{
    "name": "mongodbatlas",
    "description": "A Pulumi package for creating and managing mongodbatlas cloud resources.",
    "keywords": [
        "pulumi",
        "mongodbatlas"
    ],
    "homepage": "https://pulumi.io",
    "license": "Apache-2.0",
    "attribution": "This Pulumi package is based on the [`mongodbatlas` Terraform Provider](https://github.com/terraform-providers/terraform-provider-mongodbatlas).",
    "repository": "https://github.com/pulumi/pulumi-mongodbatlas",
    "meta": {
        "moduleFormat": "(.*)(?:/[^/]*)"
    },
    "config": {
        "variables": {
            "privateKey": {
                "type": "string",
                "description": "MongoDB Atlas Programmatic Private Key\n",
                "defaultInfo": {
                    "environment": [
                        "MONGODB_ATLAS_PRIVATE_KEY"
                    ]
                }
            },
            "publicKey": {
                "type": "string",
                "description": "MongoDB Atlas Programmatic Public Key\n",
                "defaultInfo": {
                    "environment": [
                        "MONGODB_ATLAS_PUBLIC_KEY"
                    ]
                }
            }
        },
        "defaults": [
            "privateKey",
            "publicKey"
        ]
    },
    "types": {
        "mongodbatlas:/AlertConfigurationMatcher:AlertConfigurationMatcher": {
            "properties": {
                "fieldName": {
                    "type": "string",
                    "description": "Name of the field in the target object to match on.\nHost alerts support these fields:\n- `TYPE_NAME`\n- `HOSTNAME`\n- `PORT`\n- `HOSTNAME_AND_PORT`\n- `REPLICA_SET_NAME`\nReplica set alerts support these fields:\n- `REPLICA_SET_NAME`\n- `SHARD_NAME`\n- `CLUSTER_NAME`\nSharded cluster alerts support these fields:\n- `CLUSTER_NAME`\n- `SHARD_NAME`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "description": "Operator to apply when checking the current metric value against the threshold value.\nAccepted values are:\n- `GREATER_THAN`\n- `LESS_THAN`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value to test with the specified operator. If `field_name` is set to TYPE_NAME, you can match on the following values:\n- `PRIMARY`\n- `SECONDARY`\n- `STANDALONE`\n- `CONFIG`\n- `MONGOS`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "mongodbatlas:/AlertConfigurationMetricThreshold:AlertConfigurationMetricThreshold": {
            "properties": {
                "metricName": {
                    "type": "string",
                    "description": "Name of the metric to check.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "This must be set to AVERAGE. Atlas computes the current metric value as an average.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator to apply when checking the current metric value against the threshold value.\nAccepted values are:\n- `GREATER_THAN`\n- `LESS_THAN`\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "Threshold value outside of which an alert will be triggered.\n"
                },
                "units": {
                    "type": "string",
                    "description": "The units for the threshold value. Depends on the type of metric.\nAccepted values are:\n- `RAW`\n- `BITS`\n- `BYTES`\n- `KILOBITS`\n- `KILOBYTES`\n- `MEGABITS`\n- `MEGABYTES`\n- `GIGABITS`\n- `GIGABYTES`\n- `TERABYTES`\n- `PETABYTES`\n- `MILLISECONDS`\n- `SECONDS`\n- `MINUTES`\n- `HOURS`\n- `DAYS`\n"
                }
            },
            "type": "object"
        },
        "mongodbatlas:/AlertConfigurationNotification:AlertConfigurationNotification": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Slack API token. Required for the SLACK notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "channelName": {
                    "type": "string",
                    "description": "Slack channel name. Required for the SLACK notifications type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datadogApiKey": {
                    "type": "string",
                    "description": "Datadog API Key. Found in the Datadog dashboard. Required for the DATADOG notifications type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datadogRegion": {
                    "type": "string",
                    "description": "Region that indicates which API URL to use. Accepted regions are: `US`, `EU`. The default Datadog region is US.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delayMin": {
                    "type": "integer",
                    "description": "Number of minutes to wait after an alert condition is detected before sending out the first notification.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "emailAddress": {
                    "type": "string",
                    "description": "Email address to which alert notifications are sent. Required for the EMAIL notifications type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "emailEnabled": {
                    "type": "boolean",
                    "description": "Flag indicating if email notifications should be sent. Configurable for `ORG`, `GROUP`, and `USER` notifications types.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flowName": {
                    "type": "string",
                    "description": "Flowdock flow name in lower-case letters. Required for the `FLOWDOCK` notifications type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flowdockApiToken": {
                    "type": "string",
                    "description": "The Flowdock personal API token. Required for the `FLOWDOCK` notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalMin": {
                    "type": "integer",
                    "description": "Number of minutes to wait between successive notifications for unacknowledged alerts that are not resolved. The minimum value is 5.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mobileNumber": {
                    "type": "string",
                    "description": "Mobile number to which alert notifications are sent. Required for the SMS notifications type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "opsGenieApiKey": {
                    "type": "string",
                    "description": "Opsgenie API Key. Required for the `OPS_GENIE` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "opsGenieRegion": {
                    "type": "string",
                    "description": "Region that indicates which API URL to use. Accepted regions are: `US` ,`EU`. The default Opsgenie region is US.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgName": {
                    "type": "string",
                    "description": "Flowdock organization name in lower-case letters. This is the name that appears after www.flowdock.com/app/ in the URL string. Required for the FLOWDOCK notifications type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceKey": {
                    "type": "string",
                    "description": "PagerDuty service key. Required for the PAGER_DUTY notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "smsEnabled": {
                    "type": "boolean",
                    "description": "Flag indicating if text message notifications should be sent. Configurable for `ORG`, `GROUP`, and `USER` notifications types.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "string",
                    "description": "Unique identifier of a team.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "typeName": {
                    "type": "string",
                    "description": "Type of alert notification.\nAccepted values are:\n- `DATADOG`\n- `EMAIL`\n- `FLOWDOCK`\n- `GROUP` (Project)\n- `OPS_GENIE`\n- `ORG`\n- `PAGER_DUTY`\n- `SLACK`\n- `SMS`\n- `TEAM`\n- `USER`\n- `VICTOR_OPS`\n- `WEBHOOK`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Name of the Atlas user to which to send notifications. Only a user in the project that owns the alert configuration is allowed here. Required for the `USER` notifications type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "victorOpsApiKey": {
                    "type": "string",
                    "description": "VictorOps API key. Required for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "victorOpsRoutingKey": {
                    "type": "string",
                    "description": "VictorOps routing key. Optional for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "mongodbatlas:/CloudProviderSnapshotBackupPolicyPolicy:CloudProviderSnapshotBackupPolicyPolicy": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/CloudProviderSnapshotBackupPolicyPolicyPolicyItem:CloudProviderSnapshotBackupPolicyPolicyPolicyItem"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "policyItems"
            ]
        },
        "mongodbatlas:/CloudProviderSnapshotBackupPolicyPolicyPolicyItem:CloudProviderSnapshotBackupPolicyPolicyPolicyItem": {
            "properties": {
                "frequencyInterval": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frequencyType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionUnit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionValue": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "frequencyInterval",
                "frequencyType",
                "id",
                "retentionUnit",
                "retentionValue"
            ]
        },
        "mongodbatlas:/CloudProviderSnapshotRestoreJobDeliveryType:CloudProviderSnapshotRestoreJobDeliveryType": {
            "properties": {
                "automated": {
                    "type": "boolean"
                },
                "download": {
                    "type": "boolean"
                },
                "oplogInc": {
                    "type": "integer"
                },
                "oplogTs": {
                    "type": "integer"
                },
                "pointInTime": {
                    "type": "boolean"
                },
                "pointInTimeUtcSeconds": {
                    "type": "integer"
                },
                "targetClusterName": {
                    "type": "string",
                    "description": "Name of the target Atlas cluster to which the restore job restores the snapshot. Only required if deliveryType is automated.\n"
                },
                "targetProjectId": {
                    "type": "string"
                }
            },
            "type": "object"
        },
        "mongodbatlas:/ClusterAdvancedConfiguration:ClusterAdvancedConfiguration": {
            "properties": {
                "failIndexKeyTooLong": {
                    "type": "boolean",
                    "description": "When true, documents can only be updated or inserted if, for all indexed fields on the target collection, the corresponding index entries do not exceed 1024 bytes. When false, mongod writes documents that exceed the limit but does not index them.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "javascriptEnabled": {
                    "type": "boolean",
                    "description": "When true, the cluster allows execution of operations that perform server-side executions of JavaScript. When false, the cluster disables execution of those operations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "minimumEnabledTlsProtocol": {
                    "type": "string",
                    "description": "Sets the minimum Transport Layer Security (TLS) version the cluster accepts for incoming connections.Valid values are:\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "noTableScan": {
                    "type": "boolean",
                    "description": "When true, the cluster disables the execution of any query that requires a collection scan to return results. When false, the cluster allows the execution of those operations.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oplogSizeMb": {
                    "type": "integer",
                    "description": "The custom oplog size of the cluster. Without a value that indicates that the cluster uses the default oplog size calculated by Atlas.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sampleRefreshIntervalBiConnector": {
                    "type": "integer",
                    "description": "Interval in seconds at which the mongosqld process re-samples data to create its relational schema. The default value is 300. The specified value must be a positive integer. Available only for Atlas deployments in which BI Connector for Atlas is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "sampleSizeBiConnector": {
                    "type": "integer",
                    "description": "Number of documents per database to sample when gathering schema information. Defaults to 100. Available only for Atlas deployments in which BI Connector for Atlas is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "failIndexKeyTooLong",
                        "javascriptEnabled",
                        "minimumEnabledTlsProtocol",
                        "noTableScan",
                        "oplogSizeMb",
                        "sampleRefreshIntervalBiConnector",
                        "sampleSizeBiConnector"
                    ]
                }
            }
        },
        "mongodbatlas:/ClusterBiConnector:ClusterBiConnector": {
            "properties": {
                "enabled": {
                    "type": "string",
                    "description": "Specifies whether or not BI Connector for Atlas is enabled on the cluster.l\n*\n- Set to `true` to enable BI Connector for Atlas.\n- Set to `false` to disable BI Connector for Atlas.\n"
                },
                "readPreference": {
                    "type": "string",
                    "description": "Specifies the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).\n"
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "enabled",
                        "readPreference"
                    ]
                }
            }
        },
        "mongodbatlas:/ClusterConnectionStrings:ClusterConnectionStrings": {
            "properties": {
                "awsPrivateLink": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "awsPrivateLinkSrv": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "private": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateSrv": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "standard": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "standardSrv": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "awsPrivateLink",
                        "awsPrivateLinkSrv",
                        "private",
                        "privateSrv",
                        "standard",
                        "standardSrv"
                    ]
                }
            }
        },
        "mongodbatlas:/ClusterLabel:ClusterLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key that you want to write.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value that you want to write.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "value"
                    ]
                }
            }
        },
        "mongodbatlas:/ClusterReplicationSpec:ClusterReplicationSpec": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifer of the replication document for a zone in a Global Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numShards": {
                    "type": "integer",
                    "description": "Number of shards to deploy in the specified zone, minimum 1.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionsConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/ClusterReplicationSpecRegionsConfig:ClusterReplicationSpecRegionsConfig"
                    },
                    "description": "Physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneName": {
                    "type": "string",
                    "description": "Name for the zone in a Global Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "numShards"
            ],
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "numShards",
                        "regionsConfigs"
                    ]
                }
            }
        },
        "mongodbatlas:/ClusterReplicationSpecRegionsConfig:ClusterReplicationSpecRegionsConfig": {
            "properties": {
                "analyticsNodes": {
                    "type": "integer",
                    "description": "The number of analytics nodes for Atlas to deploy to the region. Analytics nodes are useful for handling analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only, and can never become the primary. If you do not specify this option, no analytics nodes are deployed to the region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "electableNodes": {
                    "type": "integer",
                    "description": "Number of electable nodes for Atlas to deploy to the region. Electable nodes can become the primary and can facilitate local reads.\n* The total number of electableNodes across all replication spec regions  must total 3, 5, or 7.\n* Specify 0 if you do not want any electable nodes in the region.\n* You cannot create electable nodes in a region if `priority` is 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "Election priority of the region. For regions with only read-only nodes, set this value to 0.\n* For regions where `electable_nodes` is at least 1, each region must have a priority of exactly one (1) less than the previous region. The first region must have a priority of 7. The lowest possible priority is 1.\n* The priority 7 region identifies the Preferred Region of the cluster. Atlas places the primary node in the Preferred Region. Priorities 1 through 7 are exclusive - no more than one region per cluster can be assigned a given priority.\n* Example: If you have three regions, their priorities would be 7, 6, and 5 respectively. If you added two more regions for supporting electable nodes, the priorities of those regions would be 4 and 3 respectively.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnlyNodes": {
                    "type": "integer",
                    "description": "Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionName": {
                    "type": "string",
                    "description": "Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "electableNodes",
                        "priority",
                        "regionName"
                    ]
                }
            }
        },
        "mongodbatlas:/ClusterSnapshotBackupPolicy:ClusterSnapshotBackupPolicy": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "The cluster ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextSnapshot": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/ClusterSnapshotBackupPolicyPolicy:ClusterSnapshotBackupPolicyPolicy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "referenceHourOfDay": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "referenceMinuteOfHour": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restoreWindowDays": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateSnapshots": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "clusterId",
                        "clusterName",
                        "nextSnapshot",
                        "policies",
                        "referenceHourOfDay",
                        "referenceMinuteOfHour",
                        "restoreWindowDays",
                        "updateSnapshots"
                    ]
                }
            }
        },
        "mongodbatlas:/ClusterSnapshotBackupPolicyPolicy:ClusterSnapshotBackupPolicyPolicy": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifer of the replication document for a zone in a Global Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/ClusterSnapshotBackupPolicyPolicyPolicyItem:ClusterSnapshotBackupPolicyPolicyPolicyItem"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "id",
                        "policyItems"
                    ]
                }
            }
        },
        "mongodbatlas:/ClusterSnapshotBackupPolicyPolicyPolicyItem:ClusterSnapshotBackupPolicyPolicyPolicyItem": {
            "properties": {
                "frequencyInterval": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frequencyType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifer of the replication document for a zone in a Global Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionUnit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionValue": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "frequencyInterval",
                        "frequencyType",
                        "id",
                        "retentionUnit",
                        "retentionValue"
                    ]
                }
            }
        },
        "mongodbatlas:/CustomDbRoleAction:CustomDbRoleAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "Name of the privilege action. For a complete list of actions available in the Atlas API, see [Custom Role Actions](https://docs.atlas.mongodb.com/reference/api/custom-role-actions)\n\u003e **Note**: The privilege actions available to the Custom Roles API resource represent a subset of the privilege actions available in the Atlas Custom Roles UI.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/CustomDbRoleActionResource:CustomDbRoleActionResource"
                    },
                    "description": "Contains information on where the action is granted. Each object in the array either indicates a database and collection on which the action is granted, or indicates that the action is granted on the cluster resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "resources"
            ]
        },
        "mongodbatlas:/CustomDbRoleActionResource:CustomDbRoleActionResource": {
            "properties": {
                "cluster": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "collectionName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database on which the inherited role is granted.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object"
        },
        "mongodbatlas:/CustomDbRoleInheritedRole:CustomDbRoleInheritedRole": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "description": "Database on which the inherited role is granted.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleName": {
                    "type": "string",
                    "description": "Name of the inherited role. This can either be another custom role or a built-in role.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "roleName"
            ]
        },
        "mongodbatlas:/DatabaseUserLabel:DatabaseUserLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key that you want to write.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value that you want to write.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "key",
                        "value"
                    ]
                }
            }
        },
        "mongodbatlas:/DatabaseUserRole:DatabaseUserRole": {
            "properties": {
                "collectionName": {
                    "type": "string",
                    "description": "Collection for which the role applies. You can specify a collection for the `read` and `readWrite` roles. If you do not specify a collection for `read` and `readWrite`, the role applies to all collections in the database (excluding some collections in the `system`. database).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleName": {
                    "type": "string",
                    "description": "Name of the role to grant. See [Create a Database User](https://docs.atlas.mongodb.com/reference/api/database-users-create-a-user/) `roles.roleName` for valid values and restrictions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "collectionName",
                        "databaseName",
                        "roleName"
                    ]
                }
            }
        },
        "mongodbatlas:/EncryptionAtRestAwsKms:EncryptionAtRestAwsKms": {
            "properties": {
                "accessKeyId": {
                    "type": "string",
                    "description": "The IAM access key ID with permissions to access the customer master key specified by customerMasterKeyID.\n"
                },
                "customerMasterKeyId": {
                    "type": "string",
                    "description": "The AWS customer master key used to encrypt and decrypt the MongoDB master keys.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether Encryption at Rest is enabled for an Atlas project. To disable Encryption at Rest, pass only this parameter with a value of false. When you disable Encryption at Rest, Atlas also removes the configuration details.\n"
                },
                "region": {
                    "type": "string",
                    "description": "The AWS region in which the AWS customer master key exists: CA_CENTRAL_1, US_EAST_1, US_EAST_2, US_WEST_1, US_WEST_2, SA_EAST_1\n"
                },
                "secretAccessKey": {
                    "type": "string",
                    "description": "The IAM secret access key with permissions to access the customer master key specified by customerMasterKeyID.\n"
                }
            },
            "type": "object",
            "required": [
                "accessKeyId",
                "customerMasterKeyId",
                "enabled",
                "region",
                "secretAccessKey"
            ]
        },
        "mongodbatlas:/EncryptionAtRestAzureKeyVault:EncryptionAtRestAzureKeyVault": {
            "properties": {
                "azureEnvironment": {
                    "type": "string",
                    "description": "The Azure environment where the Azure account credentials reside. Valid values are the following: AZURE, AZURE_CHINA, AZURE_GERMANY\n"
                },
                "clientId": {
                    "type": "string",
                    "description": "The client ID, also known as the application ID, for an Azure application associated with the Azure AD tenant.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether Encryption at Rest is enabled for an Atlas project. To disable Encryption at Rest, pass only this parameter with a value of false. When you disable Encryption at Rest, Atlas also removes the configuration details.\n"
                },
                "keyIdentifier": {
                    "type": "string",
                    "description": "The unique identifier of a key in an Azure Key Vault.\n"
                },
                "keyVaultName": {
                    "type": "string",
                    "description": "The name of an Azure Key Vault containing your key.\n"
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "The name of the Azure Resource group that contains an Azure Key Vault.\n"
                },
                "secret": {
                    "type": "string",
                    "description": "The secret associated with the Azure Key Vault specified by azureKeyVault.tenantID.\n"
                },
                "subscriptionId": {
                    "type": "string",
                    "description": "The unique identifier associated with an Azure subscription.\n"
                },
                "tenantId": {
                    "type": "string",
                    "description": "The unique identifier for an Azure AD tenant within an Azure subscription.\n"
                }
            },
            "type": "object",
            "required": [
                "azureEnvironment",
                "clientId",
                "enabled",
                "keyIdentifier",
                "keyVaultName",
                "resourceGroupName",
                "secret",
                "subscriptionId",
                "tenantId"
            ]
        },
        "mongodbatlas:/EncryptionAtRestGoogleCloudKms:EncryptionAtRestGoogleCloudKms": {
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Specifies whether Encryption at Rest is enabled for an Atlas project. To disable Encryption at Rest, pass only this parameter with a value of false. When you disable Encryption at Rest, Atlas also removes the configuration details.\n"
                },
                "keyVersionResourceId": {
                    "type": "string",
                    "description": "The Key Version Resource ID from your GCP account.\n"
                },
                "serviceAccountKey": {
                    "type": "string",
                    "description": "String-formatted JSON object containing GCP KMS credentials from your GCP account.\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "keyVersionResourceId",
                "serviceAccountKey"
            ]
        },
        "mongodbatlas:/GlobalClusterConfigCustomZoneMapping:GlobalClusterConfigCustomZoneMapping": {
            "properties": {
                "location": {
                    "type": "string",
                    "description": "The ISO location code to which you want to map a zone in your Global Cluster. You can find a list of all supported location codes [here](https://cloud.mongodb.com/static/atlas/country_iso_codes.txt).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zone": {
                    "type": "string",
                    "description": "The name of the zone in your Global Cluster that you want to map to location.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "location",
                        "zone"
                    ]
                }
            }
        },
        "mongodbatlas:/GlobalClusterConfigManagedNamespace:GlobalClusterConfigManagedNamespace": {
            "properties": {
                "collection": {
                    "type": "string",
                    "description": "The name of the collection associated with the managed namespace.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customShardKey": {
                    "type": "string",
                    "description": "The custom shard key for the collection. Global Clusters require a compound shard key consisting of a location field and a user-selected second key, the custom shard key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "db": {
                    "type": "string",
                    "description": "The name of the database containing the collection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "collection",
                "customShardKey",
                "db"
            ]
        },
        "mongodbatlas:/ProjectTeam:ProjectTeam": {
            "properties": {
                "roleNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Each string in the array represents a project role you want to assign to the team. Every user associated with the team inherits these roles. You must specify an array even if you are only associating a single role with the team.\nThe following are valid roles:\n* `GROUP_OWNER`\n* `GROUP_READ_ONLY`\n* `GROUP_DATA_ACCESS_ADMIN`\n* `GROUP_DATA_ACCESS_READ_WRITE`\n* `GROUP_DATA_ACCESS_READ_ONLY`\n* `GROUP_CLUSTER_MANAGER`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "string",
                    "description": "The unique identifier of the team you want to associate with the project. The team and project must share the same parent organization.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "roleNames",
                "teamId"
            ]
        },
        "mongodbatlas:/X509AuthenticationDatabaseUserCertificate:X509AuthenticationDatabaseUserCertificate": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notAfter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "language": {
                "nodejs": {
                    "requiredOutputs": [
                        "createdAt",
                        "groupId",
                        "id",
                        "notAfter",
                        "subject"
                    ]
                }
            }
        },
        "mongodbatlas:/get509AuthenticationDatabaseUserCertificate:get509AuthenticationDatabaseUserCertificate": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "groupId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "notAfter": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "subject": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "groupId",
                "id",
                "notAfter",
                "subject"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getAlertConfigurationMatcher:getAlertConfigurationMatcher": {
            "properties": {
                "fieldName": {
                    "type": "string",
                    "description": "Name of the field in the target object to match on.\nHost alerts support these fields:\n- `TYPE_NAME`\n- `HOSTNAME`\n- `PORT`\n- `HOSTNAME_AND_PORT`\n- `REPLICA_SET_NAME`\nReplica set alerts support these fields:\n- `REPLICA_SET_NAME`\n- `SHARD_NAME`\n- `CLUSTER_NAME`\nSharded cluster alerts support these fields:\n- `CLUSTER_NAME`\n- `SHARD_NAME`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "operator": {
                    "type": "string",
                    "description": "Operator to apply when checking the current metric value against the threshold value. \nAccepted values are:\n- `GREATER_THAN`\n- `LESS_THAN`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "Value to test with the specified operator. If `field_name` is set to TYPE_NAME, you can match on the following values:\n- `PRIMARY`\n- `SECONDARY`\n- `STANDALONE`\n- `CONFIG`\n- `MONGOS`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "fieldName",
                "operator",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getAlertConfigurationMetricThreshold:getAlertConfigurationMetricThreshold": {
            "properties": {
                "metricName": {
                    "type": "string",
                    "description": "Name of the metric to check.\n"
                },
                "mode": {
                    "type": "string",
                    "description": "This must be set to AVERAGE. Atlas computes the current metric value as an average.\n"
                },
                "operator": {
                    "type": "string",
                    "description": "Operator to apply when checking the current metric value against the threshold value. \nAccepted values are:\n- `GREATER_THAN`\n- `LESS_THAN`\n"
                },
                "threshold": {
                    "type": "number",
                    "description": "Threshold value outside of which an alert will be triggered.\n"
                },
                "units": {
                    "type": "string",
                    "description": "The units for the threshold value. Depends on the type of metric.\nAccepted values are:\n- `RAW`\n- `BITS`\n- `BYTES`\n- `KILOBITS`\n- `KILOBYTES`\n- `MEGABITS`\n- `MEGABYTES`\n- `GIGABITS`\n- `GIGABYTES`\n- `TERABYTES`\n- `PETABYTES`\n- `MILLISECONDS`\n- `SECONDS`\n- `MINUTES`\n- `HOURS`\n- `DAYS`\n"
                }
            },
            "type": "object",
            "required": [
                "metricName",
                "mode",
                "operator",
                "threshold",
                "units"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getAlertConfigurationNotification:getAlertConfigurationNotification": {
            "properties": {
                "apiToken": {
                    "type": "string",
                    "description": "Slack API token. Required for the SLACK notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "channelName": {
                    "type": "string",
                    "description": "Slack channel name. Required for the SLACK notifications type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datadogApiKey": {
                    "type": "string",
                    "description": "Datadog API Key. Found in the Datadog dashboard. Required for the DATADOG notifications type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "datadogRegion": {
                    "type": "string",
                    "description": "Region that indicates which API URL to use. Accepted regions are: `US`, `EU`. The default Datadog region is US.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "delayMin": {
                    "type": "integer",
                    "description": "Number of minutes to wait after an alert condition is detected before sending out the first notification.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "emailAddress": {
                    "type": "string",
                    "description": "Email address to which alert notifications are sent. Required for the EMAIL notifications type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "emailEnabled": {
                    "type": "boolean",
                    "description": "Flag indicating if email notifications should be sent. Configurable for `ORG`, `GROUP`, and `USER` notifications types.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flowName": {
                    "type": "string",
                    "description": "Flowdock flow name in lower-case letters. Required for the `FLOWDOCK` notifications type\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "flowdockApiToken": {
                    "type": "string",
                    "description": "The Flowdock personal API token. Required for the `FLOWDOCK` notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "intervalMin": {
                    "type": "integer",
                    "description": "Number of minutes to wait between successive notifications for unacknowledged alerts that are not resolved. The minimum value is 5.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mobileNumber": {
                    "type": "string",
                    "description": "Mobile number to which alert notifications are sent. Required for the SMS notifications type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "opsGenieApiKey": {
                    "type": "string",
                    "description": "Opsgenie API Key. Required for the `OPS_GENIE` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "opsGenieRegion": {
                    "type": "string",
                    "description": "Region that indicates which API URL to use. Accepted regions are: `US` ,`EU`. The default Opsgenie region is US.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgName": {
                    "type": "string",
                    "description": "Flowdock organization name in lower-case letters. This is the name that appears after www.flowdock.com/app/ in the URL string. Required for the FLOWDOCK notifications type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "serviceKey": {
                    "type": "string",
                    "description": "PagerDuty service key. Required for the PAGER_DUTY notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "smsEnabled": {
                    "type": "boolean",
                    "description": "Flag indicating if text message notifications should be sent. Configurable for `ORG`, `GROUP`, and `USER` notifications types.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "string",
                    "description": "Unique identifier of a team.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "typeName": {
                    "type": "string",
                    "description": "Type of alert notification. \nAccepted values are:\n- `DATADOG`\n- `EMAIL`\n- `FLOWDOCK`\n- `GROUP` (Project)\n- `OPS_GENIE`\n- `ORG`\n- `PAGER_DUTY`\n- `SLACK`\n- `SMS`\n- `TEAM`\n- `USER`\n- `VICTOR_OPS`\n- `WEBHOOK`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Name of the Atlas user to which to send notifications. Only a user in the project that owns the alert configuration is allowed here. Required for the `USER` notifications type.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "victorOpsApiKey": {
                    "type": "string",
                    "description": "VictorOps API key. Required for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "victorOpsRoutingKey": {
                    "type": "string",
                    "description": "VictorOps routing key. Optional for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "apiToken",
                "channelName",
                "datadogApiKey",
                "datadogRegion",
                "delayMin",
                "emailAddress",
                "emailEnabled",
                "flowName",
                "flowdockApiToken",
                "intervalMin",
                "mobileNumber",
                "opsGenieApiKey",
                "opsGenieRegion",
                "orgName",
                "serviceKey",
                "smsEnabled",
                "teamId",
                "typeName",
                "username",
                "victorOpsApiKey",
                "victorOpsRoutingKey"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getCloudProviderSnapshotBackupPolicyPolicy:getCloudProviderSnapshotBackupPolicyPolicy": {
            "properties": {
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getCloudProviderSnapshotBackupPolicyPolicyPolicyItem:getCloudProviderSnapshotBackupPolicyPolicyPolicyItem"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "policyItems"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getCloudProviderSnapshotBackupPolicyPolicyPolicyItem:getCloudProviderSnapshotBackupPolicyPolicyPolicyItem": {
            "properties": {
                "frequencyInterval": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frequencyType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionUnit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionValue": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "frequencyInterval",
                "frequencyType",
                "id",
                "retentionUnit",
                "retentionValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getCloudProviderSnapshotRestoreJobsResult:getCloudProviderSnapshotRestoreJobsResult": {
            "properties": {
                "cancelled": {
                    "type": "boolean",
                    "description": "Indicates whether the restore job was canceled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "createdAt": {
                    "type": "string",
                    "description": "UTC ISO 8601 formatted point in time when Atlas created the restore job.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deliveryType": {
                    "type": "string",
                    "description": "Type of restore job to create. Possible values are: automated and download.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "deliveryUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expired": {
                    "type": "boolean",
                    "description": "Indicates whether the restore job expired.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiresAt": {
                    "type": "string",
                    "description": "UTC ISO 8601 formatted point in time when the restore job expires.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "finishedAt": {
                    "type": "string",
                    "description": "UTC ISO 8601 formatted point in time when the restore job completed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The unique identifier of the restore job.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oplogInc": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "oplogTs": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pointInTimeUtcSeconds": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotId": {
                    "type": "string",
                    "description": "Unique identifier of the source snapshot ID of the restore job.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetClusterName": {
                    "type": "string",
                    "description": "Name of the target Atlas cluster to which the restore job restores the snapshot. Only visible if deliveryType is automated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "targetProjectId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "timestamp": {
                    "type": "string",
                    "description": "Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cancelled",
                "createdAt",
                "deliveryType",
                "deliveryUrls",
                "expired",
                "expiresAt",
                "finishedAt",
                "id",
                "oplogInc",
                "oplogTs",
                "pointInTimeUtcSeconds",
                "snapshotId",
                "targetClusterName",
                "targetProjectId",
                "timestamp"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getCloudProviderSnapshotsResult:getCloudProviderSnapshotsResult": {
            "properties": {
                "createdAt": {
                    "type": "string",
                    "description": "UTC ISO 8601 formatted point in time when Atlas took the snapshot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "description": {
                    "type": "string",
                    "description": "UDescription of the snapshot. Only present for on-demand snapshots.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "expiresAt": {
                    "type": "string",
                    "description": "UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifier of the snapshot.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "masterKeyUuid": {
                    "type": "string",
                    "description": "Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mongodVersion": {
                    "type": "string",
                    "description": "Version of the MongoDB server.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotType": {
                    "type": "string",
                    "description": "Specified the type of snapshot. Valid values are onDemand and scheduled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "storageSizeBytes": {
                    "type": "integer",
                    "description": "Specifies the size of the snapshot in bytes.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of cluster: replicaSet or shardedCluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "createdAt",
                "description",
                "expiresAt",
                "id",
                "masterKeyUuid",
                "mongodVersion",
                "snapshotType",
                "status",
                "storageSizeBytes",
                "type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClusterBiConnector:getClusterBiConnector": {
            "properties": {
                "enabled": {
                    "type": "string",
                    "description": "Indicates whether or not BI Connector for Atlas is enabled on the cluster.\n"
                },
                "readPreference": {
                    "type": "string",
                    "description": "Indicates the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).\n"
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "readPreference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClusterConnectionStrings:getClusterConnectionStrings": {
            "properties": {
                "awsPrivateLink": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "awsPrivateLinkSrv": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "private": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateSrv": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "standard": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "standardSrv": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "awsPrivateLink",
                "awsPrivateLinkSrv",
                "private",
                "privateSrv",
                "standard",
                "standardSrv"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClusterLabel:getClusterLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key that was set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value that represents the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClusterReplicationSpec:getClusterReplicationSpec": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifer of the replication document for a zone in a Global Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numShards": {
                    "type": "integer",
                    "description": "Number of shards to deploy in the specified zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionsConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getClusterReplicationSpecRegionsConfig:getClusterReplicationSpecRegionsConfig"
                    },
                    "description": "Describes the physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneName": {
                    "type": "string",
                    "description": "Indicates the n ame for the zone in a Global Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "numShards",
                "regionsConfigs",
                "zoneName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClusterReplicationSpecRegionsConfig:getClusterReplicationSpecRegionsConfig": {
            "properties": {
                "analyticsNodes": {
                    "type": "integer",
                    "description": "Indicates the number of analytics nodes for Atlas to deploy to the region. Analytics nodes are useful for handling analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only, and can never become the primary.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "electableNodes": {
                    "type": "integer",
                    "description": "Number of electable nodes for Atlas to deploy to the region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "Election priority of the region. For regions with only read-only nodes, set this value to 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnlyNodes": {
                    "type": "integer",
                    "description": "Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionName": {
                    "type": "string",
                    "description": "Name for the region specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "analyticsNodes",
                "electableNodes",
                "priority",
                "readOnlyNodes",
                "regionName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClusterSnapshotBackupPolicy:getClusterSnapshotBackupPolicy": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextSnapshot": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getClusterSnapshotBackupPolicyPolicy:getClusterSnapshotBackupPolicyPolicy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "referenceHourOfDay": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "referenceMinuteOfHour": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restoreWindowDays": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateSnapshots": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "clusterName",
                "nextSnapshot",
                "policies",
                "referenceHourOfDay",
                "referenceMinuteOfHour",
                "restoreWindowDays",
                "updateSnapshots"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClusterSnapshotBackupPolicyPolicy:getClusterSnapshotBackupPolicyPolicy": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifer of the replication document for a zone in a Global Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getClusterSnapshotBackupPolicyPolicyPolicyItem:getClusterSnapshotBackupPolicyPolicyPolicyItem"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "policyItems"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClusterSnapshotBackupPolicyPolicyPolicyItem:getClusterSnapshotBackupPolicyPolicyPolicyItem": {
            "properties": {
                "frequencyInterval": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frequencyType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifer of the replication document for a zone in a Global Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionUnit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionValue": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "frequencyInterval",
                "frequencyType",
                "id",
                "retentionUnit",
                "retentionValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClustersResult:getClustersResult": {
            "properties": {
                "autoScalingComputeEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Specifies whether cluster tier auto-scaling is enabled. The default is false.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoScalingComputeScaleDownEnabled": {
                    "type": "boolean",
                    "description": "(Optional) Set to `true` to enable the cluster tier to scale down.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "autoScalingDiskGbEnabled": {
                    "type": "boolean",
                    "description": "Indicates whether disk auto-scaling is enabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backingProviderName": {
                    "type": "string",
                    "description": "Indicates Cloud service provider on which the server for a multi-tenant cluster is provisioned.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "backupEnabled": {
                    "type": "boolean",
                    "description": "Legacy Option, Indicates whether Atlas continuous backups are enabled for the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "biConnector": {
                    "$ref": "#/types/mongodbatlas:/getClustersResultBiConnector:getClustersResultBiConnector",
                    "description": "Indicates BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterType": {
                    "type": "string",
                    "description": "Indicates the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionStrings": {
                    "$ref": "#/types/mongodbatlas:/getClustersResultConnectionStrings:getClustersResultConnectionStrings",
                    "description": "Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.\n- `connection_strings.standard` -   Public mongodb:// connection string for this cluster.\n- `connection_strings.standard_srv` - Public mongodb+srv:// connection string for this cluster. The mongodb+srv protocol tells the driver to look up the seed list of hosts in DNS. Atlas synchronizes this list with the nodes in a cluster. If the connection string uses this URI format, you don’t need to append the seed list or change the URI if the nodes change. Use this URI format if your driver supports it. If it doesn’t, use connectionStrings.standard.\n- `connection_strings.aws_private_link` -  [Private-endpoint-aware](https://docs.atlas.mongodb.com/security-private-endpoint/#private-endpoint-connection-strings) mongodb://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a AWS PrivateLink connection to this cluster.\n- `connection_strings.aws_private_link_srv` - [Private-endpoint-aware](https://docs.atlas.mongodb.com/security-private-endpoint/#private-endpoint-connection-strings) mongodb+srv://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a AWS PrivateLink connection to this cluster. Use this URI format if your driver supports it. If it doesn’t, use connectionStrings.awsPrivateLink.\n- `connection_strings.private` -   [Network-peering-endpoint-aware](https://docs.atlas.mongodb.com/security-vpc-peering/#vpc-peering) mongodb://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a network peering connection to this cluster.\n- `connection_strings.private_srv` -  [Network-peering-endpoint-aware](https://docs.atlas.mongodb.com/security-vpc-peering/#vpc-peering) mongodb+srv://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a network peering connection to this cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerId": {
                    "type": "string",
                    "description": "The Network Peering Container ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "diskSizeGb": {
                    "type": "number",
                    "description": "Indicates the size in gigabytes of the server’s root volume (AWS/GCP Only).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "encryptionAtRestProvider": {
                    "type": "string",
                    "description": "Indicates whether Encryption at Rest is enabled or disabled.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getClustersResultLabel:getClustersResultLabel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mongoDbMajorVersion": {
                    "type": "string",
                    "description": "Indicates the version of the cluster to deploy.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mongoDbVersion": {
                    "type": "string",
                    "description": "Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mongoUri": {
                    "type": "string",
                    "description": "Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mongoUriUpdated": {
                    "type": "string",
                    "description": "Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "mongoUriWithOptions": {
                    "type": "string",
                    "description": "Describes connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the current plugin\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numShards": {
                    "type": "integer",
                    "description": "Number of shards to deploy in the specified zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "paused": {
                    "type": "boolean",
                    "description": "Flag that indicates whether the cluster is paused or not.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "pitEnabled": {
                    "type": "boolean",
                    "description": "Flag that indicates if the cluster uses Continuous Cloud Backup.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerAutoScalingComputeMaxInstanceSize": {
                    "type": "string",
                    "description": "(Optional) Maximum instance size to which your cluster can automatically scale.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerAutoScalingComputeMinInstanceSize": {
                    "type": "string",
                    "description": "(Optional) Minimum instance size to which your cluster can automatically scale.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerBackupEnabled": {
                    "type": "boolean",
                    "description": "Flag indicating if the cluster uses Cloud Backup Snapshots for backups.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerDiskIops": {
                    "type": "integer",
                    "description": "Indicates the maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected providerSettings.instanceSizeName and diskSizeGB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerDiskTypeName": {
                    "type": "string",
                    "description": "Describes Azure disk type of the server’s root volume (Azure Only).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerEncryptEbsVolume": {
                    "type": "boolean",
                    "description": "Indicates whether the Amazon EBS encryption is enabled. This feature encrypts the server’s root volume for both data at rest within the volume and data moving between the volume and the instance.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerInstanceSizeName": {
                    "type": "string",
                    "description": "Atlas provides different instance sizes, each with a default storage capacity and RAM size.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerName": {
                    "type": "string",
                    "description": "Indicates the cloud service provider on which the servers are provisioned.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerRegionName": {
                    "type": "string",
                    "description": "Indicates Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases. Requires the Atlas Region name, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerVolumeType": {
                    "type": "string",
                    "description": "Indicates the type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationFactor": {
                    "type": "integer",
                    "description": "Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "replicationSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getClustersResultReplicationSpec:getClustersResultReplicationSpec"
                    },
                    "description": "Configuration for cluster regions.  See Replication Spec below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "snapshotBackupPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getClustersResultSnapshotBackupPolicy:getClustersResultSnapshotBackupPolicy"
                    },
                    "description": "current snapshot schedule and retention settings for the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "srvAddress": {
                    "type": "string",
                    "description": "Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "stateName": {
                    "type": "string",
                    "description": "Indicates the current state of the cluster. The possible states are:\n- IDLE\n- CREATING\n- UPDATING\n- DELETING\n- DELETED\n- REPAIRING\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "autoScalingComputeEnabled",
                "autoScalingComputeScaleDownEnabled",
                "autoScalingDiskGbEnabled",
                "backingProviderName",
                "backupEnabled",
                "biConnector",
                "clusterType",
                "connectionStrings",
                "containerId",
                "diskSizeGb",
                "encryptionAtRestProvider",
                "labels",
                "mongoDbMajorVersion",
                "mongoDbVersion",
                "mongoUri",
                "mongoUriUpdated",
                "mongoUriWithOptions",
                "name",
                "numShards",
                "paused",
                "pitEnabled",
                "providerAutoScalingComputeMaxInstanceSize",
                "providerAutoScalingComputeMinInstanceSize",
                "providerBackupEnabled",
                "providerDiskIops",
                "providerDiskTypeName",
                "providerEncryptEbsVolume",
                "providerInstanceSizeName",
                "providerName",
                "providerRegionName",
                "providerVolumeType",
                "replicationFactor",
                "replicationSpecs",
                "snapshotBackupPolicies",
                "srvAddress",
                "stateName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClustersResultBiConnector:getClustersResultBiConnector": {
            "properties": {
                "enabled": {
                    "type": "string",
                    "description": "Indicates whether or not BI Connector for Atlas is enabled on the cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readPreference": {
                    "type": "string",
                    "description": "Indicates the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "enabled",
                "readPreference"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClustersResultConnectionStrings:getClustersResultConnectionStrings": {
            "properties": {
                "awsPrivateLink": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "awsPrivateLinkSrv": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "private": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "privateSrv": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "standard": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "standardSrv": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "awsPrivateLink",
                "awsPrivateLinkSrv",
                "private",
                "privateSrv",
                "standard",
                "standardSrv"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClustersResultLabel:getClustersResultLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key that was set.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value that represents the key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClustersResultReplicationSpec:getClustersResultReplicationSpec": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifer of the replication document for a zone in a Global Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "numShards": {
                    "type": "integer",
                    "description": "Number of shards to deploy in the specified zone.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionsConfigs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getClustersResultReplicationSpecRegionsConfig:getClustersResultReplicationSpecRegionsConfig"
                    },
                    "description": "Describes the physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "zoneName": {
                    "type": "string",
                    "description": "Indicates the n ame for the zone in a Global Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "numShards",
                "regionsConfigs",
                "zoneName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClustersResultReplicationSpecRegionsConfig:getClustersResultReplicationSpecRegionsConfig": {
            "properties": {
                "analyticsNodes": {
                    "type": "integer",
                    "description": "Indicates the number of analytics nodes for Atlas to deploy to the region. Analytics nodes are useful for handling analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only, and can never become the primary.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "electableNodes": {
                    "type": "integer",
                    "description": "Number of electable nodes for Atlas to deploy to the region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "priority": {
                    "type": "integer",
                    "description": "Election priority of the region. For regions with only read-only nodes, set this value to 0.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "readOnlyNodes": {
                    "type": "integer",
                    "description": "Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionName": {
                    "type": "string",
                    "description": "Name for the region specified.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "analyticsNodes",
                "electableNodes",
                "priority",
                "readOnlyNodes",
                "regionName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClustersResultSnapshotBackupPolicy:getClustersResultSnapshotBackupPolicy": {
            "properties": {
                "clusterId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "clusterName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "nextSnapshot": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getClustersResultSnapshotBackupPolicyPolicy:getClustersResultSnapshotBackupPolicyPolicy"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "referenceHourOfDay": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "referenceMinuteOfHour": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "restoreWindowDays": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "updateSnapshots": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterId",
                "clusterName",
                "nextSnapshot",
                "policies",
                "referenceHourOfDay",
                "referenceMinuteOfHour",
                "restoreWindowDays",
                "updateSnapshots"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClustersResultSnapshotBackupPolicyPolicy:getClustersResultSnapshotBackupPolicyPolicy": {
            "properties": {
                "id": {
                    "type": "string",
                    "description": "Unique identifer of the replication document for a zone in a Global Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "policyItems": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getClustersResultSnapshotBackupPolicyPolicyPolicyItem:getClustersResultSnapshotBackupPolicyPolicyPolicyItem"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "id",
                "policyItems"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getClustersResultSnapshotBackupPolicyPolicyPolicyItem:getClustersResultSnapshotBackupPolicyPolicyPolicyItem": {
            "properties": {
                "frequencyInterval": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "frequencyType": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Unique identifer of the replication document for a zone in a Global Cluster.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionUnit": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "retentionValue": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "frequencyInterval",
                "frequencyType",
                "id",
                "retentionUnit",
                "retentionValue"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getCustomDbRoleAction:getCustomDbRoleAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(Required) Name of the privilege action. For a complete list of actions available in the Atlas API, see Custom Role Actions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getCustomDbRoleActionResource:getCustomDbRoleActionResource"
                    },
                    "description": "(Required) Contains information on where the action is granted. Each object in the array either indicates a database and collection on which the action is granted, or indicates that the action is granted on the cluster resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getCustomDbRoleActionResource:getCustomDbRoleActionResource": {
            "properties": {
                "cluster": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "collectionName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "databaseName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cluster",
                "collectionName",
                "databaseName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getCustomDbRoleInheritedRole:getCustomDbRoleInheritedRole": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleName": {
                    "type": "string",
                    "description": "Name of the custom role. \n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "roleName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getCustomDbRolesResult:getCustomDbRolesResult": {
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getCustomDbRolesResultAction:getCustomDbRolesResultAction"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "inheritedRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getCustomDbRolesResultInheritedRole:getCustomDbRolesResultInheritedRole"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "actions",
                "inheritedRoles",
                "roleName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getCustomDbRolesResultAction:getCustomDbRolesResultAction": {
            "properties": {
                "action": {
                    "type": "string",
                    "description": "(Required) Name of the privilege action. For a complete list of actions available in the Atlas API, see Custom Role Actions.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resources": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getCustomDbRolesResultActionResource:getCustomDbRolesResultActionResource"
                    },
                    "description": "(Required) Contains information on where the action is granted. Each object in the array either indicates a database and collection on which the action is granted, or indicates that the action is granted on the cluster resource.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "action",
                "resources"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getCustomDbRolesResultActionResource:getCustomDbRolesResultActionResource": {
            "properties": {
                "cluster": {
                    "type": "boolean",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "collectionName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "databaseName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "cluster",
                "collectionName",
                "databaseName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getCustomDbRolesResultInheritedRole:getCustomDbRolesResultInheritedRole": {
            "properties": {
                "databaseName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "databaseName",
                "roleName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getDatabaseUserLabel:getDatabaseUserLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key that you want to write.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value that you want to write.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getDatabaseUserRole:getDatabaseUserRole": {
            "properties": {
                "collectionName": {
                    "type": "string",
                    "description": "Collection for which the role applies. You can specify a collection for the `read` and `readWrite` roles. If you do not specify a collection for `read` and `readWrite`, the role applies to all collections in the database (excluding some collections in the `system`. database).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "collectionName",
                "databaseName",
                "roleName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getDatabaseUsersResult:getDatabaseUsersResult": {
            "properties": {
                "authDatabaseName": {
                    "type": "string",
                    "description": "The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getDatabaseUsersResultLabel:getDatabaseUsersResultLabel"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to get all database users.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getDatabaseUsersResultRole:getDatabaseUsersResultRole"
                    },
                    "description": "List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "username": {
                    "type": "string",
                    "description": "Username for authenticating to MongoDB.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "x509Type": {
                    "type": "string",
                    "description": "X.509 method by which the provided username is authenticated.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "authDatabaseName",
                "labels",
                "projectId",
                "roles",
                "username",
                "x509Type"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getDatabaseUsersResultLabel:getDatabaseUsersResultLabel": {
            "properties": {
                "key": {
                    "type": "string",
                    "description": "The key that you want to write.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "value": {
                    "type": "string",
                    "description": "The value that you want to write.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "key",
                "value"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getDatabaseUsersResultRole:getDatabaseUsersResultRole": {
            "properties": {
                "collectionName": {
                    "type": "string",
                    "description": "Collection for which the role applies. You can specify a collection for the `read` and `readWrite` roles. If you do not specify a collection for `read` and `readWrite`, the role applies to all collections in the database (excluding some collections in the `system`. database).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "roleName": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "collectionName",
                "databaseName",
                "roleName"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getGlobalClusterConfigManagedNamespace:getGlobalClusterConfigManagedNamespace": {
            "properties": {
                "collection": {
                    "type": "string",
                    "description": "(Required) The name of the collection associated with the managed namespace.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "customShardKey": {
                    "type": "string",
                    "description": "(Required)\tThe custom shard key for the collection. Global Clusters require a compound shard key consisting of a location field and a user-selected second key, the custom shard key.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "db": {
                    "type": "string",
                    "description": "(Required) The name of the database containing the collection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "collection",
                "customShardKey",
                "db"
            ]
        },
        "mongodbatlas:/getNetworkContainersResult:getNetworkContainersResult": {
            "properties": {
                "atlasCidrBlock": {
                    "type": "string",
                    "description": "CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureSubscriptionId": {
                    "type": "string",
                    "description": "Unique identifer of the Azure subscription in which the VNet resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "Unique identifier of the GCP project in which the Network Peering connection resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "The Network Peering Container ID.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkName": {
                    "type": "string",
                    "description": "Name of the Network Peering connection in the Atlas project.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerName": {
                    "type": "string",
                    "description": "Cloud provider for this Network peering container. Accepted values are AWS, GCP, and Azure.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "provisioned": {
                    "type": "boolean",
                    "description": "Indicates whether the project has Network Peering connections deployed in the container.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "region": {
                    "type": "string",
                    "description": "The Atlas Azure region name for where this container exists.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "regionName": {
                    "type": "string",
                    "description": "The Atlas AWS region name for where this container exists.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetName": {
                    "type": "string",
                    "description": "The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "Unique identifier of the project’s VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "atlasCidrBlock",
                "azureSubscriptionId",
                "gcpProjectId",
                "id",
                "networkName",
                "providerName",
                "provisioned",
                "region",
                "regionName",
                "vnetName",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getNetworkPeeringsResult:getNetworkPeeringsResult": {
            "properties": {
                "accepterRegionName": {
                    "type": "string",
                    "description": "Specifies the region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "atlasCidrBlock": {
                    "type": "string",
                    "description": "Unique identifier for an Azure AD directory.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "awsAccountId": {
                    "type": "string",
                    "description": "Account ID of the owner of the peer VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureDirectoryId": {
                    "type": "string",
                    "description": "Unique identifier for an Azure AD directory.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "azureSubscriptionId": {
                    "type": "string",
                    "description": "Unique identifer of the Azure subscription in which the VNet resides.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "connectionId": {
                    "type": "string",
                    "description": "Unique identifier for the peering connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "containerId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "errorMessage": {
                    "type": "string",
                    "description": "When `\"status\" : \"FAILED\"`, Atlas provides a description of the error.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "errorState": {
                    "type": "string",
                    "description": "Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "errorStateName": {
                    "type": "string",
                    "description": "Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "GCP project ID of the owner of the network peer. \n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "networkName": {
                    "type": "string",
                    "description": "Name of the network peer to which Atlas connects.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "peeringId": {
                    "type": "string",
                    "description": "Atlas assigned unique ID for the peering connection.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "providerName": {
                    "type": "string",
                    "description": "Cloud provider for this VPC peering connection. If omitted, Atlas sets this parameter to AWS. (Possible Values `AWS`, `AZURE`, `GCP`).\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "Name of your Azure resource group. \n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "routeTableCidrBlock": {
                    "type": "string",
                    "description": "Peer VPC CIDR block or subnet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Atlas network peering connection: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING`, `WAITING_FOR_USER`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "statusName": {
                    "type": "string",
                    "description": "The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vnetName": {
                    "type": "string",
                    "description": "Name of your Azure VNet.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "vpcId": {
                    "type": "string",
                    "description": "Unique identifier of the peer VPC.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "accepterRegionName",
                "atlasCidrBlock",
                "awsAccountId",
                "azureDirectoryId",
                "azureSubscriptionId",
                "connectionId",
                "containerId",
                "errorMessage",
                "errorState",
                "errorStateName",
                "gcpProjectId",
                "networkName",
                "peeringId",
                "providerName",
                "resourceGroupName",
                "routeTableCidrBlock",
                "status",
                "statusName",
                "vnetName",
                "vpcId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getProjectTeam:getProjectTeam": {
            "properties": {
                "roleNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "roleNames",
                "teamId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getProjectsResult:getProjectsResult": {
            "properties": {
                "clusterCount": {
                    "type": "integer",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "created": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "id": {
                    "type": "string",
                    "description": "Autogenerated Unique ID for this data source.\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project you want to create. (Cannot be changed via this Provider after creation.)\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "orgId": {
                    "type": "string",
                    "description": "The ID of the organization you want to create the project within.\n*`cluster_count` - The number of Atlas clusters deployed in the project.\n*`created` - The ISO-8601-formatted timestamp of when Atlas created the project.\n* `teams.#.team_id` - The unique identifier of the team you want to associate with the project. The team and project must share the same parent organization.\n* `teams.#.role_names` - Each string in the array represents a project role assigned to the team. Every user associated with the team inherits these roles.\nThe following are valid roles:\n* `GROUP_OWNER`\n* `GROUP_READ_ONLY`\n* `GROUP_DATA_ACCESS_ADMIN`\n* `GROUP_DATA_ACCESS_READ_WRITE`\n* `GROUP_DATA_ACCESS_READ_ONLY`\n* `GROUP_CLUSTER_MANAGER`\n",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/getProjectsResultTeam:getProjectsResultTeam"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "clusterCount",
                "created",
                "id",
                "name",
                "orgId",
                "teams"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        },
        "mongodbatlas:/getProjectsResultTeam:getProjectsResultTeam": {
            "properties": {
                "roleNames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                },
                "teamId": {
                    "type": "string",
                    "language": {
                        "python": {
                            "mapCase": false
                        }
                    }
                }
            },
            "type": "object",
            "required": [
                "roleNames",
                "teamId"
            ],
            "language": {
                "nodejs": {
                    "requiredInputs": []
                }
            }
        }
    },
    "provider": {
        "description": "The provider type for the mongodbatlas package. By default, resources use package-wide configuration\nsettings, however an explicit `Provider` instance may be created and passed during resource\nconstruction to achieve fine-grained programmatic control over provider settings. See the\n[documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.\n",
        "inputProperties": {
            "privateKey": {
                "type": "string",
                "description": "MongoDB Atlas Programmatic Private Key\n",
                "defaultInfo": {
                    "environment": [
                        "MONGODB_ATLAS_PRIVATE_KEY"
                    ]
                }
            },
            "publicKey": {
                "type": "string",
                "description": "MongoDB Atlas Programmatic Public Key\n",
                "defaultInfo": {
                    "environment": [
                        "MONGODB_ATLAS_PUBLIC_KEY"
                    ]
                }
            }
        }
    },
    "resources": {
        "mongodbatlas:index/alertConfiguration:AlertConfiguration": {
            "description": "`mongodbatlas..AlertConfiguration` provides an Alert Configuration resource to define the conditions that trigger an alert and the methods of notification within a MongoDB Atlas project.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.AlertConfiguration(\"test\", {\n    enabled: true,\n    eventType: \"OUTSIDE_METRIC_THRESHOLD\",\n    matchers: [{\n        fieldName: \"HOSTNAME_AND_PORT\",\n        operator: \"EQUALS\",\n        value: \"SECONDARY\",\n    }],\n    metricThreshold: {\n        metric_name: \"ASSERT_REGULAR\",\n        mode: \"AVERAGE\",\n        operator: \"LESS_THAN\",\n        threshold: 99,\n        units: \"RAW\",\n    },\n    notifications: [{\n        delayMin: 0,\n        emailEnabled: true,\n        intervalMin: 5,\n        roles: [\n            \"GROUP_CHARTS_ADMIN\",\n            \"GROUP_CLUSTER_MANAGER\",\n        ],\n        smsEnabled: false,\n        typeName: \"GROUP\",\n    }],\n    projectId: \"\u003cPROJECT-ID\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.AlertConfiguration(\"test\",\n    enabled=True,\n    event_type=\"OUTSIDE_METRIC_THRESHOLD\",\n    matchers=[{\n        \"fieldName\": \"HOSTNAME_AND_PORT\",\n        \"operator\": \"EQUALS\",\n        \"value\": \"SECONDARY\",\n    }],\n    metric_threshold={\n        \"metric_name\": \"ASSERT_REGULAR\",\n        \"mode\": \"AVERAGE\",\n        \"operator\": \"LESS_THAN\",\n        \"threshold\": 99,\n        \"units\": \"RAW\",\n    },\n    notifications=[{\n        \"delayMin\": 0,\n        \"emailEnabled\": True,\n        \"intervalMin\": 5,\n        \"roles\": [\n            \"GROUP_CHARTS_ADMIN\",\n            \"GROUP_CLUSTER_MANAGER\",\n        ],\n        \"smsEnabled\": False,\n        \"typeName\": \"GROUP\",\n    }],\n    project_id=\"\u003cPROJECT-ID\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.AlertConfiguration(\"test\", new Mongodbatlas.AlertConfigurationArgs\n        {\n            Enabled = true,\n            EventType = \"OUTSIDE_METRIC_THRESHOLD\",\n            Matchers = \n            {\n                new Mongodbatlas.Inputs.AlertConfigurationMatcherArgs\n                {\n                    FieldName = \"HOSTNAME_AND_PORT\",\n                    Operator = \"EQUALS\",\n                    Value = \"SECONDARY\",\n                },\n            },\n            MetricThreshold = new Mongodbatlas.Inputs.AlertConfigurationMetricThresholdArgs\n            {\n                Metric_name = \"ASSERT_REGULAR\",\n                Mode = \"AVERAGE\",\n                Operator = \"LESS_THAN\",\n                Threshold = 99,\n                Units = \"RAW\",\n            },\n            Notifications = \n            {\n                new Mongodbatlas.Inputs.AlertConfigurationNotificationArgs\n                {\n                    DelayMin = 0,\n                    EmailEnabled = true,\n                    IntervalMin = 5,\n                    Roles = \n                    {\n                        \"GROUP_CHARTS_ADMIN\",\n                        \"GROUP_CLUSTER_MANAGER\",\n                    },\n                    SmsEnabled = false,\n                    TypeName = \"GROUP\",\n                },\n            },\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "alertConfigurationId": {
                    "type": "string",
                    "description": "Unique identifier for the alert configuration.\n"
                },
                "created": {
                    "type": "string",
                    "description": "Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.\n"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of event that will trigger an alert.\nAlert type \tPossible values:\n* Host\n- `OUTSIDE_METRIC_THRESHOLD`\n- `HOST_RESTARTED`\n- `HOST_UPGRADED`\n- `HOST_NOW_SECONDARY`\n- `HOST_NOW_PRIMARY`\n* Replica set\n- `NO_PRIMARY`\n- `TOO_MANY_ELECTIONS`\n* Sharded cluster\n- `CLUSTER_MONGOS_IS_MISSING`\n- `User`\n- `JOINED_GROUP`\n- `REMOVED_FROM_GROUP`\n- `USER_ROLES_CHANGED_AUDIT`\n* Project\n- `USERS_AWAITING_APPROVAL`\n- `USERS_WITHOUT_MULTI_FACTOR_AUTH`\n- `GROUP_CREATED`\n* Team\n- `JOINED_TEAM`\n- `REMOVED_FROM_TEAM`\n* Organization\n- `INVITED_TO_ORG`\n- `JOINED_ORG`\n* Data Explorer\n- `DATA_EXPLORER`\n- `DATA_EXPLORER_CRUD`\n* Billing\n- `CREDIT_CARD_ABOUT_TO_EXPIRE`\n- `CHARGE_SUCCEEDED`\n- `INVOICE_CLOSED`\n"
                },
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/AlertConfigurationMatcher:AlertConfigurationMatcher"
                    }
                },
                "metricThreshold": {
                    "$ref": "#/types/mongodbatlas:/AlertConfigurationMetricThreshold:AlertConfigurationMetricThreshold"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/AlertConfigurationNotification:AlertConfigurationNotification"
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project where the alert configuration will create.\n"
                },
                "updated": {
                    "type": "string",
                    "description": "Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.\n"
                }
            },
            "required": [
                "alertConfigurationId",
                "created",
                "enabled",
                "eventType",
                "notifications",
                "projectId",
                "updated"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.\n"
                },
                "eventType": {
                    "type": "string",
                    "description": "The type of event that will trigger an alert.\nAlert type \tPossible values:\n* Host\n- `OUTSIDE_METRIC_THRESHOLD`\n- `HOST_RESTARTED`\n- `HOST_UPGRADED`\n- `HOST_NOW_SECONDARY`\n- `HOST_NOW_PRIMARY`\n* Replica set\n- `NO_PRIMARY`\n- `TOO_MANY_ELECTIONS`\n* Sharded cluster\n- `CLUSTER_MONGOS_IS_MISSING`\n- `User`\n- `JOINED_GROUP`\n- `REMOVED_FROM_GROUP`\n- `USER_ROLES_CHANGED_AUDIT`\n* Project\n- `USERS_AWAITING_APPROVAL`\n- `USERS_WITHOUT_MULTI_FACTOR_AUTH`\n- `GROUP_CREATED`\n* Team\n- `JOINED_TEAM`\n- `REMOVED_FROM_TEAM`\n* Organization\n- `INVITED_TO_ORG`\n- `JOINED_ORG`\n* Data Explorer\n- `DATA_EXPLORER`\n- `DATA_EXPLORER_CRUD`\n* Billing\n- `CREDIT_CARD_ABOUT_TO_EXPIRE`\n- `CHARGE_SUCCEEDED`\n- `INVOICE_CLOSED`\n"
                },
                "matchers": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/AlertConfigurationMatcher:AlertConfigurationMatcher"
                    }
                },
                "metricThreshold": {
                    "$ref": "#/types/mongodbatlas:/AlertConfigurationMetricThreshold:AlertConfigurationMetricThreshold"
                },
                "notifications": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/AlertConfigurationNotification:AlertConfigurationNotification"
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project where the alert configuration will create.\n"
                }
            },
            "requiredInputs": [
                "eventType",
                "notifications",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering AlertConfiguration resources.\n",
                "properties": {
                    "alertConfigurationId": {
                        "type": "string",
                        "description": "Unique identifier for the alert configuration.\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.\n"
                    },
                    "eventType": {
                        "type": "string",
                        "description": "The type of event that will trigger an alert.\nAlert type \tPossible values:\n* Host\n- `OUTSIDE_METRIC_THRESHOLD`\n- `HOST_RESTARTED`\n- `HOST_UPGRADED`\n- `HOST_NOW_SECONDARY`\n- `HOST_NOW_PRIMARY`\n* Replica set\n- `NO_PRIMARY`\n- `TOO_MANY_ELECTIONS`\n* Sharded cluster\n- `CLUSTER_MONGOS_IS_MISSING`\n- `User`\n- `JOINED_GROUP`\n- `REMOVED_FROM_GROUP`\n- `USER_ROLES_CHANGED_AUDIT`\n* Project\n- `USERS_AWAITING_APPROVAL`\n- `USERS_WITHOUT_MULTI_FACTOR_AUTH`\n- `GROUP_CREATED`\n* Team\n- `JOINED_TEAM`\n- `REMOVED_FROM_TEAM`\n* Organization\n- `INVITED_TO_ORG`\n- `JOINED_ORG`\n* Data Explorer\n- `DATA_EXPLORER`\n- `DATA_EXPLORER_CRUD`\n* Billing\n- `CREDIT_CARD_ABOUT_TO_EXPIRE`\n- `CHARGE_SUCCEEDED`\n- `INVOICE_CLOSED`\n"
                    },
                    "matchers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/AlertConfigurationMatcher:AlertConfigurationMatcher"
                        }
                    },
                    "metricThreshold": {
                        "$ref": "#/types/mongodbatlas:/AlertConfigurationMetricThreshold:AlertConfigurationMetricThreshold"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/AlertConfigurationNotification:AlertConfigurationNotification"
                        }
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project where the alert configuration will create.\n"
                    },
                    "updated": {
                        "type": "string",
                        "description": "Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/auditing:Auditing": {
            "description": "`mongodbatlas..Auditing` provides an Auditing resource. This allows auditing to be created.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.Auditing(\"test\", {\n    auditAuthorizationSuccess: false,\n    auditFilter: \"{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}\",\n    enabled: true,\n    projectId: \"\u003cproject-id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.Auditing(\"test\",\n    audit_authorization_success=False,\n    audit_filter=\"{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}\",\n    enabled=True,\n    project_id=\"\u003cproject-id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.Auditing(\"test\", new Mongodbatlas.AuditingArgs\n        {\n            AuditAuthorizationSuccess = false,\n            AuditFilter = \"{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}\",\n            Enabled = true,\n            ProjectId = \"\u003cproject-id\u003e\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "auditAuthorizationSuccess": {
                    "type": "boolean",
                    "description": "JSON-formatted audit filter used by the project\n"
                },
                "auditFilter": {
                    "type": "string",
                    "description": "Indicates whether the auditing system captures successful authentication attempts for audit filters using the \"atype\" : \"authCheck\" auditing event. For more information, see auditAuthorizationSuccess\n"
                },
                "configurationType": {
                    "type": "string",
                    "description": "Denotes the configuration method for the audit filter. Possible values are: \n* NONE - auditing not configured for the project.\n* FILTER_BUILDER - auditing configured via Atlas UI filter builder.\n* FILTER_JSON - auditing configured via Atlas custom filter or API.\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Denotes whether or not the project associated with the {project_id} has database auditing enabled.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to configure auditing.\n"
                }
            },
            "required": [
                "auditAuthorizationSuccess",
                "auditFilter",
                "configurationType",
                "enabled",
                "projectId"
            ],
            "inputProperties": {
                "auditAuthorizationSuccess": {
                    "type": "boolean",
                    "description": "JSON-formatted audit filter used by the project\n"
                },
                "auditFilter": {
                    "type": "string",
                    "description": "Indicates whether the auditing system captures successful authentication attempts for audit filters using the \"atype\" : \"authCheck\" auditing event. For more information, see auditAuthorizationSuccess\n"
                },
                "enabled": {
                    "type": "boolean",
                    "description": "Denotes whether or not the project associated with the {project_id} has database auditing enabled.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to configure auditing.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Auditing resources.\n",
                "properties": {
                    "auditAuthorizationSuccess": {
                        "type": "boolean",
                        "description": "JSON-formatted audit filter used by the project\n"
                    },
                    "auditFilter": {
                        "type": "string",
                        "description": "Indicates whether the auditing system captures successful authentication attempts for audit filters using the \"atype\" : \"authCheck\" auditing event. For more information, see auditAuthorizationSuccess\n"
                    },
                    "configurationType": {
                        "type": "string",
                        "description": "Denotes the configuration method for the audit filter. Possible values are: \n* NONE - auditing not configured for the project.\n* FILTER_BUILDER - auditing configured via Atlas UI filter builder.\n* FILTER_JSON - auditing configured via Atlas custom filter or API.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Denotes whether or not the project associated with the {project_id} has database auditing enabled.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to configure auditing.\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/cloudProviderSnapshot:CloudProviderSnapshot": {
            "description": "`mongodbatlas..CloudProviderSnapshot` provides a resource to take a cloud backup snapshot on demand.\nOn-demand snapshots happen immediately, unlike scheduled snapshots which occur at regular intervals. If there is already an on-demand snapshot with a status of queued or inProgress, you must wait until Atlas has completed the on-demand snapshot before taking another.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst myCluster = new mongodbatlas.Cluster(\"myCluster\", {\n    projectId: \"5cf5a45a9ccf6400e60981b6\",\n    diskSizeGb: 5,\n    providerName: \"AWS\",\n    providerRegionName: \"EU_WEST_2\",\n    providerInstanceSizeName: \"M10\",\n    providerBackupEnabled: true,\n    providerDiskIops: 100,\n    providerEncryptEbsVolume: false,\n});\nconst testCloudProviderSnapshot = new mongodbatlas.CloudProviderSnapshot(\"testCloudProviderSnapshot\", {\n    projectId: myCluster.projectId,\n    clusterName: myCluster.name,\n    description: \"myDescription\",\n    retentionInDays: 1,\n});\nconst testCloudProviderSnapshotRestoreJob = new mongodbatlas.CloudProviderSnapshotRestoreJob(\"testCloudProviderSnapshotRestoreJob\", {\n    projectId: testCloudProviderSnapshot.projectId,\n    clusterName: testCloudProviderSnapshot.clusterName,\n    snapshotId: testCloudProviderSnapshot.snapshotId,\n    deliveryType: {\n        download: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\nmy_cluster = mongodbatlas.Cluster(\"myCluster\",\n    project_id=\"5cf5a45a9ccf6400e60981b6\",\n    disk_size_gb=5,\n    provider_name=\"AWS\",\n    provider_region_name=\"EU_WEST_2\",\n    provider_instance_size_name=\"M10\",\n    provider_backup_enabled=True,\n    provider_disk_iops=100,\n    provider_encrypt_ebs_volume=False)\ntest_cloud_provider_snapshot = mongodbatlas.CloudProviderSnapshot(\"testCloudProviderSnapshot\",\n    project_id=my_cluster.project_id,\n    cluster_name=my_cluster.name,\n    description=\"myDescription\",\n    retention_in_days=1)\ntest_cloud_provider_snapshot_restore_job = mongodbatlas.CloudProviderSnapshotRestoreJob(\"testCloudProviderSnapshotRestoreJob\",\n    project_id=test_cloud_provider_snapshot.project_id,\n    cluster_name=test_cloud_provider_snapshot.cluster_name,\n    snapshot_id=test_cloud_provider_snapshot.snapshot_id,\n    delivery_type={\n        \"download\": True,\n    })\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myCluster = new Mongodbatlas.Cluster(\"myCluster\", new Mongodbatlas.ClusterArgs\n        {\n            ProjectId = \"5cf5a45a9ccf6400e60981b6\",\n            DiskSizeGb = 5,\n            ProviderName = \"AWS\",\n            ProviderRegionName = \"EU_WEST_2\",\n            ProviderInstanceSizeName = \"M10\",\n            ProviderBackupEnabled = true,\n            ProviderDiskIops = 100,\n            ProviderEncryptEbsVolume = false,\n        });\n        var testCloudProviderSnapshot = new Mongodbatlas.CloudProviderSnapshot(\"testCloudProviderSnapshot\", new Mongodbatlas.CloudProviderSnapshotArgs\n        {\n            ProjectId = myCluster.ProjectId,\n            ClusterName = myCluster.Name,\n            Description = \"myDescription\",\n            RetentionInDays = 1,\n        });\n        var testCloudProviderSnapshotRestoreJob = new Mongodbatlas.CloudProviderSnapshotRestoreJob(\"testCloudProviderSnapshotRestoreJob\", new Mongodbatlas.CloudProviderSnapshotRestoreJobArgs\n        {\n            ProjectId = testCloudProviderSnapshot.ProjectId,\n            ClusterName = testCloudProviderSnapshot.ClusterName,\n            SnapshotId = testCloudProviderSnapshot.SnapshotId,\n            DeliveryType = new Mongodbatlas.Inputs.CloudProviderSnapshotRestoreJobDeliveryTypeArgs\n            {\n                Download = true,\n            },\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "clusterName": {
                    "type": "string",
                    "description": "The name of the Atlas cluster that contains the snapshots you want to retrieve.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "UTC ISO 8601 formatted point in time when Atlas took the snapshot.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the on-demand snapshot.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.\n"
                },
                "masterKeyUuid": {
                    "type": "string",
                    "description": "Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.\n"
                },
                "mongodVersion": {
                    "type": "string",
                    "description": "Version of the MongoDB server.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique identifier of the project for the Atlas cluster.\n"
                },
                "retentionInDays": {
                    "type": "integer",
                    "description": "The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "Unique identifier of the snapshot.\n"
                },
                "snapshotType": {
                    "type": "string",
                    "description": "Specified the type of snapshot. Valid values are onDemand and scheduled.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Current status of the snapshot. One of the following values will be returned: queued, inProgress, completed, failed.\n"
                },
                "storageSizeBytes": {
                    "type": "integer",
                    "description": "Specifies the size of the snapshot in bytes.\n"
                },
                "type": {
                    "type": "string",
                    "description": "Specifies the type of cluster: replicaSet or shardedCluster.\n"
                }
            },
            "required": [
                "clusterName",
                "createdAt",
                "description",
                "expiresAt",
                "masterKeyUuid",
                "mongodVersion",
                "projectId",
                "retentionInDays",
                "snapshotId",
                "snapshotType",
                "status",
                "storageSizeBytes",
                "type"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The name of the Atlas cluster that contains the snapshots you want to retrieve.\n"
                },
                "description": {
                    "type": "string",
                    "description": "Description of the on-demand snapshot.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique identifier of the project for the Atlas cluster.\n"
                },
                "retentionInDays": {
                    "type": "integer",
                    "description": "The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.\n"
                }
            },
            "requiredInputs": [
                "clusterName",
                "description",
                "projectId",
                "retentionInDays"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudProviderSnapshot resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The name of the Atlas cluster that contains the snapshots you want to retrieve.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "UTC ISO 8601 formatted point in time when Atlas took the snapshot.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "Description of the on-demand snapshot.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.\n"
                    },
                    "masterKeyUuid": {
                        "type": "string",
                        "description": "Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.\n"
                    },
                    "mongodVersion": {
                        "type": "string",
                        "description": "Version of the MongoDB server.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier of the project for the Atlas cluster.\n"
                    },
                    "retentionInDays": {
                        "type": "integer",
                        "description": "The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "Unique identifier of the snapshot.\n"
                    },
                    "snapshotType": {
                        "type": "string",
                        "description": "Specified the type of snapshot. Valid values are onDemand and scheduled.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the snapshot. One of the following values will be returned: queued, inProgress, completed, failed.\n"
                    },
                    "storageSizeBytes": {
                        "type": "integer",
                        "description": "Specifies the size of the snapshot in bytes.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Specifies the type of cluster: replicaSet or shardedCluster.\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/cloudProviderSnapshotBackupPolicy:CloudProviderSnapshotBackupPolicy": {
            "description": "`mongodbatlas..CloudProviderSnapshotBackupPolicy` provides a resource that enables you to view and modify the snapshot schedule and retention settings for an Atlas cluster with Cloud Backup enabled.  A default policy is created automatically when Cloud Backup is enabled for the cluster.  \n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst myCluster = new mongodbatlas.Cluster(\"myCluster\", {\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    diskSizeGb: 5,\n    providerName: \"AWS\",\n    providerRegionName: \"EU_CENTRAL_1\",\n    providerInstanceSizeName: \"M10\",\n    providerBackupEnabled: true,\n    providerDiskIops: 100,\n    providerEncryptEbsVolume: false,\n});\nconst test = new mongodbatlas.CloudProviderSnapshotBackupPolicy(\"test\", {\n    projectId: myCluster.projectId,\n    clusterName: myCluster.name,\n    referenceHourOfDay: 3,\n    referenceMinuteOfHour: 45,\n    restoreWindowDays: 4,\n    policies: [{\n        id: myCluster.snapshotBackupPolicies.apply(snapshotBackupPolicies =\u003e snapshotBackupPolicies[0].policies?[0]?.id),\n        policy_item: [\n            {\n                id: myCluster.snapshotBackupPolicies.apply(snapshotBackupPolicies =\u003e snapshotBackupPolicies[0].policies?[0]?.policyItems?[0]?.id),\n                frequencyInterval: 1,\n                frequencyType: \"hourly\",\n                retentionUnit: \"days\",\n                retentionValue: 1,\n            },\n            {\n                id: myCluster.snapshotBackupPolicies.apply(snapshotBackupPolicies =\u003e snapshotBackupPolicies[0].policies?[0]?.policyItems?[1]?.id),\n                frequencyInterval: 1,\n                frequencyType: \"daily\",\n                retentionUnit: \"days\",\n                retentionValue: 2,\n            },\n            {\n                id: myCluster.snapshotBackupPolicies.apply(snapshotBackupPolicies =\u003e snapshotBackupPolicies[0].policies?[0]?.policyItems?[2]?.id),\n                frequencyInterval: 4,\n                frequencyType: \"weekly\",\n                retentionUnit: \"weeks\",\n                retentionValue: 3,\n            },\n            {\n                id: myCluster.snapshotBackupPolicies.apply(snapshotBackupPolicies =\u003e snapshotBackupPolicies[0].policies?[0]?.policyItems?[3]?.id),\n                frequencyInterval: 5,\n                frequencyType: \"monthly\",\n                retentionUnit: \"months\",\n                retentionValue: 4,\n            },\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\nmy_cluster = mongodbatlas.Cluster(\"myCluster\",\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    disk_size_gb=5,\n    provider_name=\"AWS\",\n    provider_region_name=\"EU_CENTRAL_1\",\n    provider_instance_size_name=\"M10\",\n    provider_backup_enabled=True,\n    provider_disk_iops=100,\n    provider_encrypt_ebs_volume=False)\ntest = mongodbatlas.CloudProviderSnapshotBackupPolicy(\"test\",\n    project_id=my_cluster.project_id,\n    cluster_name=my_cluster.name,\n    reference_hour_of_day=3,\n    reference_minute_of_hour=45,\n    restore_window_days=4,\n    policies=[{\n        \"id\": my_cluster.snapshot_backup_policies[0][\"policies\"][0][\"id\"],\n        \"policy_item\": [\n            {\n                \"id\": my_cluster.snapshot_backup_policies[0][\"policies\"][0][\"policyItems\"][0][\"id\"],\n                \"frequencyInterval\": 1,\n                \"frequencyType\": \"hourly\",\n                \"retentionUnit\": \"days\",\n                \"retentionValue\": 1,\n            },\n            {\n                \"id\": my_cluster.snapshot_backup_policies[0][\"policies\"][0][\"policyItems\"][1][\"id\"],\n                \"frequencyInterval\": 1,\n                \"frequencyType\": \"daily\",\n                \"retentionUnit\": \"days\",\n                \"retentionValue\": 2,\n            },\n            {\n                \"id\": my_cluster.snapshot_backup_policies[0][\"policies\"][0][\"policyItems\"][2][\"id\"],\n                \"frequencyInterval\": 4,\n                \"frequencyType\": \"weekly\",\n                \"retentionUnit\": \"weeks\",\n                \"retentionValue\": 3,\n            },\n            {\n                \"id\": my_cluster.snapshot_backup_policies[0][\"policies\"][0][\"policyItems\"][3][\"id\"],\n                \"frequencyInterval\": 5,\n                \"frequencyType\": \"monthly\",\n                \"retentionUnit\": \"months\",\n                \"retentionValue\": 4,\n            },\n        ],\n    }])\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myCluster = new Mongodbatlas.Cluster(\"myCluster\", new Mongodbatlas.ClusterArgs\n        {\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            DiskSizeGb = 5,\n            ProviderName = \"AWS\",\n            ProviderRegionName = \"EU_CENTRAL_1\",\n            ProviderInstanceSizeName = \"M10\",\n            ProviderBackupEnabled = true,\n            ProviderDiskIops = 100,\n            ProviderEncryptEbsVolume = false,\n        });\n        var test = new Mongodbatlas.CloudProviderSnapshotBackupPolicy(\"test\", new Mongodbatlas.CloudProviderSnapshotBackupPolicyArgs\n        {\n            ProjectId = myCluster.ProjectId,\n            ClusterName = myCluster.Name,\n            ReferenceHourOfDay = 3,\n            ReferenceMinuteOfHour = 45,\n            RestoreWindowDays = 4,\n            Policies = \n            {\n                new Mongodbatlas.Inputs.CloudProviderSnapshotBackupPolicyPolicyArgs\n                {\n                    Id = myCluster.SnapshotBackupPolicies.Apply(snapshotBackupPolicies =\u003e snapshotBackupPolicies[0].Policies?[0]?.Id),\n                    Policy_item = \n                    {\n                        \n                        {\n                            { \"id\", myCluster.SnapshotBackupPolicies.Apply(snapshotBackupPolicies =\u003e snapshotBackupPolicies[0].Policies?[0]?.PolicyItems?[0]?.Id) },\n                            { \"frequencyInterval\", 1 },\n                            { \"frequencyType\", \"hourly\" },\n                            { \"retentionUnit\", \"days\" },\n                            { \"retentionValue\", 1 },\n                        },\n                        \n                        {\n                            { \"id\", myCluster.SnapshotBackupPolicies.Apply(snapshotBackupPolicies =\u003e snapshotBackupPolicies[0].Policies?[0]?.PolicyItems?[1]?.Id) },\n                            { \"frequencyInterval\", 1 },\n                            { \"frequencyType\", \"daily\" },\n                            { \"retentionUnit\", \"days\" },\n                            { \"retentionValue\", 2 },\n                        },\n                        \n                        {\n                            { \"id\", myCluster.SnapshotBackupPolicies.Apply(snapshotBackupPolicies =\u003e snapshotBackupPolicies[0].Policies?[0]?.PolicyItems?[2]?.Id) },\n                            { \"frequencyInterval\", 4 },\n                            { \"frequencyType\", \"weekly\" },\n                            { \"retentionUnit\", \"weeks\" },\n                            { \"retentionValue\", 3 },\n                        },\n                        \n                        {\n                            { \"id\", myCluster.SnapshotBackupPolicies.Apply(snapshotBackupPolicies =\u003e snapshotBackupPolicies[0].Policies?[0]?.PolicyItems?[3]?.Id) },\n                            { \"frequencyInterval\", 5 },\n                            { \"frequencyType\", \"monthly\" },\n                            { \"retentionUnit\", \"months\" },\n                            { \"retentionValue\", 4 },\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "clusterId": {
                    "type": "string",
                    "description": "Unique identifier of the Atlas cluster.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.\n"
                },
                "nextSnapshot": {
                    "type": "string",
                    "description": "Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/CloudProviderSnapshotBackupPolicyPolicy:CloudProviderSnapshotBackupPolicyPolicy"
                    },
                    "description": "Contains a document for each backup policy item in the desired updated backup policy.\n* `policies.#.id` - (Required) Unique identifier of the backup policy that you want to update. policies.#.id is a value obtained via the mongodbatlas..Cluster resource. provider_backup_enabled of the mongodbatlas..Cluster resource must be set to true. See the example above for how to refer to the mongodbatlas..Cluster resource for policies.#.id\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique identifier of the project for the Atlas cluster.\n"
                },
                "referenceHourOfDay": {
                    "type": "integer",
                    "description": "UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.\n"
                },
                "referenceMinuteOfHour": {
                    "type": "integer",
                    "description": "UTC Minutes after referenceHourOfDay that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.\n"
                },
                "restoreWindowDays": {
                    "type": "integer",
                    "description": "Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.\n"
                },
                "updateSnapshots": {
                    "type": "boolean",
                    "description": "Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.\n"
                }
            },
            "required": [
                "clusterId",
                "clusterName",
                "nextSnapshot",
                "policies",
                "projectId",
                "referenceHourOfDay",
                "referenceMinuteOfHour",
                "restoreWindowDays",
                "updateSnapshots"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.\n"
                },
                "policies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/CloudProviderSnapshotBackupPolicyPolicy:CloudProviderSnapshotBackupPolicyPolicy"
                    },
                    "description": "Contains a document for each backup policy item in the desired updated backup policy.\n* `policies.#.id` - (Required) Unique identifier of the backup policy that you want to update. policies.#.id is a value obtained via the mongodbatlas..Cluster resource. provider_backup_enabled of the mongodbatlas..Cluster resource must be set to true. See the example above for how to refer to the mongodbatlas..Cluster resource for policies.#.id\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique identifier of the project for the Atlas cluster.\n"
                },
                "referenceHourOfDay": {
                    "type": "integer",
                    "description": "UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.\n"
                },
                "referenceMinuteOfHour": {
                    "type": "integer",
                    "description": "UTC Minutes after referenceHourOfDay that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.\n"
                },
                "restoreWindowDays": {
                    "type": "integer",
                    "description": "Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.\n"
                },
                "updateSnapshots": {
                    "type": "boolean",
                    "description": "Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.\n"
                }
            },
            "requiredInputs": [
                "clusterName",
                "policies",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudProviderSnapshotBackupPolicy resources.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "Unique identifier of the Atlas cluster.\n"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.\n"
                    },
                    "nextSnapshot": {
                        "type": "string",
                        "description": "Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/CloudProviderSnapshotBackupPolicyPolicy:CloudProviderSnapshotBackupPolicyPolicy"
                        },
                        "description": "Contains a document for each backup policy item in the desired updated backup policy.\n* `policies.#.id` - (Required) Unique identifier of the backup policy that you want to update. policies.#.id is a value obtained via the mongodbatlas..Cluster resource. provider_backup_enabled of the mongodbatlas..Cluster resource must be set to true. See the example above for how to refer to the mongodbatlas..Cluster resource for policies.#.id\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier of the project for the Atlas cluster.\n"
                    },
                    "referenceHourOfDay": {
                        "type": "integer",
                        "description": "UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.\n"
                    },
                    "referenceMinuteOfHour": {
                        "type": "integer",
                        "description": "UTC Minutes after referenceHourOfDay that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.\n"
                    },
                    "restoreWindowDays": {
                        "type": "integer",
                        "description": "Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.\n"
                    },
                    "updateSnapshots": {
                        "type": "boolean",
                        "description": "Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/cloudProviderSnapshotRestoreJob:CloudProviderSnapshotRestoreJob": {
            "description": "`mongodbatlas..CloudProviderSnapshotRestoreJob` provides a resource to create a new restore job from a cloud backup snapshot of a specified cluster. The restore job can be one of three types: \n* **automated:** Atlas automatically restores the snapshot with snapshotId to the Atlas cluster with name targetClusterName in the Atlas project with targetGroupId.\n\n* **download:** Atlas provides a URL to download a .tar.gz of the snapshot with snapshotId. The contents of the archive contain the data files for your Atlas cluster.\n\n* **pointInTime:**  Atlas performs a Continuous Cloud Backup restore.\n\n\u003e **Important:** If you specify `deliveryType` : `automated` or `deliveryType` : `pointInTime` in your request body to create an automated restore job, Atlas removes all existing data on the target cluster prior to the restore.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n### Example automated delivery type.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst myCluster = new mongodbatlas.Cluster(\"myCluster\", {\n    projectId: \"5cf5a45a9ccf6400e60981b6\",\n    diskSizeGb: 5,\n    providerName: \"AWS\",\n    providerRegionName: \"EU_WEST_2\",\n    providerInstanceSizeName: \"M10\",\n    providerBackupEnabled: true,\n    providerDiskIops: 100,\n    providerEncryptEbsVolume: false,\n});\nconst testCloudProviderSnapshot = new mongodbatlas.CloudProviderSnapshot(\"testCloudProviderSnapshot\", {\n    projectId: myCluster.projectId,\n    clusterName: myCluster.name,\n    description: \"myDescription\",\n    retentionInDays: 1,\n});\nconst testCloudProviderSnapshotRestoreJob = new mongodbatlas.CloudProviderSnapshotRestoreJob(\"testCloudProviderSnapshotRestoreJob\", {\n    projectId: testCloudProviderSnapshot.projectId,\n    clusterName: testCloudProviderSnapshot.clusterName,\n    snapshotId: testCloudProviderSnapshot.snapshotId,\n    deliveryType: {\n        automated: true,\n        target_cluster_name: \"MyCluster\",\n        target_project_id: \"5cf5a45a9ccf6400e60981b6\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\nmy_cluster = mongodbatlas.Cluster(\"myCluster\",\n    project_id=\"5cf5a45a9ccf6400e60981b6\",\n    disk_size_gb=5,\n    provider_name=\"AWS\",\n    provider_region_name=\"EU_WEST_2\",\n    provider_instance_size_name=\"M10\",\n    provider_backup_enabled=True,\n    provider_disk_iops=100,\n    provider_encrypt_ebs_volume=False)\ntest_cloud_provider_snapshot = mongodbatlas.CloudProviderSnapshot(\"testCloudProviderSnapshot\",\n    project_id=my_cluster.project_id,\n    cluster_name=my_cluster.name,\n    description=\"myDescription\",\n    retention_in_days=1)\ntest_cloud_provider_snapshot_restore_job = mongodbatlas.CloudProviderSnapshotRestoreJob(\"testCloudProviderSnapshotRestoreJob\",\n    project_id=test_cloud_provider_snapshot.project_id,\n    cluster_name=test_cloud_provider_snapshot.cluster_name,\n    snapshot_id=test_cloud_provider_snapshot.snapshot_id,\n    delivery_type={\n        \"automated\": True,\n        \"target_cluster_name\": \"MyCluster\",\n        \"target_project_id\": \"5cf5a45a9ccf6400e60981b6\",\n    })\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myCluster = new Mongodbatlas.Cluster(\"myCluster\", new Mongodbatlas.ClusterArgs\n        {\n            ProjectId = \"5cf5a45a9ccf6400e60981b6\",\n            DiskSizeGb = 5,\n            ProviderName = \"AWS\",\n            ProviderRegionName = \"EU_WEST_2\",\n            ProviderInstanceSizeName = \"M10\",\n            ProviderBackupEnabled = true,\n            ProviderDiskIops = 100,\n            ProviderEncryptEbsVolume = false,\n        });\n        var testCloudProviderSnapshot = new Mongodbatlas.CloudProviderSnapshot(\"testCloudProviderSnapshot\", new Mongodbatlas.CloudProviderSnapshotArgs\n        {\n            ProjectId = myCluster.ProjectId,\n            ClusterName = myCluster.Name,\n            Description = \"myDescription\",\n            RetentionInDays = 1,\n        });\n        var testCloudProviderSnapshotRestoreJob = new Mongodbatlas.CloudProviderSnapshotRestoreJob(\"testCloudProviderSnapshotRestoreJob\", new Mongodbatlas.CloudProviderSnapshotRestoreJobArgs\n        {\n            ProjectId = testCloudProviderSnapshot.ProjectId,\n            ClusterName = testCloudProviderSnapshot.ClusterName,\n            SnapshotId = testCloudProviderSnapshot.SnapshotId,\n            DeliveryType = new Mongodbatlas.Inputs.CloudProviderSnapshotRestoreJobDeliveryTypeArgs\n            {\n                Automated = true,\n                Target_cluster_name = \"MyCluster\",\n                Target_project_id = \"5cf5a45a9ccf6400e60981b6\",\n            },\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### Example download delivery type.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst myCluster = new mongodbatlas.Cluster(\"myCluster\", {\n    projectId: \"5cf5a45a9ccf6400e60981b6\",\n    diskSizeGb: 5,\n    providerName: \"AWS\",\n    providerRegionName: \"EU_WEST_2\",\n    providerInstanceSizeName: \"M10\",\n    providerBackupEnabled: true,\n    providerDiskIops: 100,\n    providerEncryptEbsVolume: false,\n});\nconst testCloudProviderSnapshot = new mongodbatlas.CloudProviderSnapshot(\"testCloudProviderSnapshot\", {\n    projectId: myCluster.projectId,\n    clusterName: myCluster.name,\n    description: \"myDescription\",\n    retentionInDays: 1,\n});\nconst testCloudProviderSnapshotRestoreJob = new mongodbatlas.CloudProviderSnapshotRestoreJob(\"testCloudProviderSnapshotRestoreJob\", {\n    projectId: testCloudProviderSnapshot.projectId,\n    clusterName: testCloudProviderSnapshot.clusterName,\n    snapshotId: testCloudProviderSnapshot.snapshotId,\n    deliveryType: {\n        download: true,\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\nmy_cluster = mongodbatlas.Cluster(\"myCluster\",\n    project_id=\"5cf5a45a9ccf6400e60981b6\",\n    disk_size_gb=5,\n    provider_name=\"AWS\",\n    provider_region_name=\"EU_WEST_2\",\n    provider_instance_size_name=\"M10\",\n    provider_backup_enabled=True,\n    provider_disk_iops=100,\n    provider_encrypt_ebs_volume=False)\ntest_cloud_provider_snapshot = mongodbatlas.CloudProviderSnapshot(\"testCloudProviderSnapshot\",\n    project_id=my_cluster.project_id,\n    cluster_name=my_cluster.name,\n    description=\"myDescription\",\n    retention_in_days=1)\ntest_cloud_provider_snapshot_restore_job = mongodbatlas.CloudProviderSnapshotRestoreJob(\"testCloudProviderSnapshotRestoreJob\",\n    project_id=test_cloud_provider_snapshot.project_id,\n    cluster_name=test_cloud_provider_snapshot.cluster_name,\n    snapshot_id=test_cloud_provider_snapshot.snapshot_id,\n    delivery_type={\n        \"download\": True,\n    })\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myCluster = new Mongodbatlas.Cluster(\"myCluster\", new Mongodbatlas.ClusterArgs\n        {\n            ProjectId = \"5cf5a45a9ccf6400e60981b6\",\n            DiskSizeGb = 5,\n            ProviderName = \"AWS\",\n            ProviderRegionName = \"EU_WEST_2\",\n            ProviderInstanceSizeName = \"M10\",\n            ProviderBackupEnabled = true,\n            ProviderDiskIops = 100,\n            ProviderEncryptEbsVolume = false,\n        });\n        var testCloudProviderSnapshot = new Mongodbatlas.CloudProviderSnapshot(\"testCloudProviderSnapshot\", new Mongodbatlas.CloudProviderSnapshotArgs\n        {\n            ProjectId = myCluster.ProjectId,\n            ClusterName = myCluster.Name,\n            Description = \"myDescription\",\n            RetentionInDays = 1,\n        });\n        var testCloudProviderSnapshotRestoreJob = new Mongodbatlas.CloudProviderSnapshotRestoreJob(\"testCloudProviderSnapshotRestoreJob\", new Mongodbatlas.CloudProviderSnapshotRestoreJobArgs\n        {\n            ProjectId = testCloudProviderSnapshot.ProjectId,\n            ClusterName = testCloudProviderSnapshot.ClusterName,\n            SnapshotId = testCloudProviderSnapshot.SnapshotId,\n            DeliveryType = new Mongodbatlas.Inputs.CloudProviderSnapshotRestoreJobDeliveryTypeArgs\n            {\n                Download = true,\n            },\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "cancelled": {
                    "type": "boolean",
                    "description": "Indicates whether the restore job was canceled.\n"
                },
                "clusterName": {
                    "type": "string",
                    "description": "The name of the Atlas cluster whose snapshot you want to restore.\n"
                },
                "createdAt": {
                    "type": "string",
                    "description": "UTC ISO 8601 formatted point in time when Atlas created the restore job.\n"
                },
                "deliveryType": {
                    "$ref": "#/types/mongodbatlas:/CloudProviderSnapshotRestoreJobDeliveryType:CloudProviderSnapshotRestoreJobDeliveryType",
                    "description": "Type of restore job to create. Possible values are: **download** or **automated**, only one must be set it in ``true``.\n"
                },
                "deliveryUrls": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.\n"
                },
                "expired": {
                    "type": "boolean",
                    "description": "Indicates whether the restore job expired.\n"
                },
                "expiresAt": {
                    "type": "string",
                    "description": "UTC ISO 8601 formatted point in time when the restore job expires.\n"
                },
                "finishedAt": {
                    "type": "string",
                    "description": "UTC ISO 8601 formatted point in time when the restore job completed.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "Unique identifier of the snapshot to restore.\n"
                },
                "snapshotRestoreJobId": {
                    "type": "string",
                    "description": "The unique identifier of the restore job.\n"
                },
                "timestamp": {
                    "type": "string",
                    "description": "Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.\n"
                }
            },
            "required": [
                "cancelled",
                "clusterName",
                "createdAt",
                "deliveryType",
                "deliveryUrls",
                "expired",
                "expiresAt",
                "finishedAt",
                "projectId",
                "snapshotId",
                "snapshotRestoreJobId",
                "timestamp"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string",
                    "description": "The name of the Atlas cluster whose snapshot you want to restore.\n"
                },
                "deliveryType": {
                    "$ref": "#/types/mongodbatlas:/CloudProviderSnapshotRestoreJobDeliveryType:CloudProviderSnapshotRestoreJobDeliveryType",
                    "description": "Type of restore job to create. Possible values are: **download** or **automated**, only one must be set it in ``true``.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.\n"
                },
                "snapshotId": {
                    "type": "string",
                    "description": "Unique identifier of the snapshot to restore.\n"
                }
            },
            "requiredInputs": [
                "clusterName",
                "deliveryType",
                "projectId",
                "snapshotId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CloudProviderSnapshotRestoreJob resources.\n",
                "properties": {
                    "cancelled": {
                        "type": "boolean",
                        "description": "Indicates whether the restore job was canceled.\n"
                    },
                    "clusterName": {
                        "type": "string",
                        "description": "The name of the Atlas cluster whose snapshot you want to restore.\n"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "UTC ISO 8601 formatted point in time when Atlas created the restore job.\n"
                    },
                    "deliveryType": {
                        "$ref": "#/types/mongodbatlas:/CloudProviderSnapshotRestoreJobDeliveryType:CloudProviderSnapshotRestoreJobDeliveryType",
                        "description": "Type of restore job to create. Possible values are: **download** or **automated**, only one must be set it in ``true``.\n"
                    },
                    "deliveryUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.\n"
                    },
                    "expired": {
                        "type": "boolean",
                        "description": "Indicates whether the restore job expired.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "UTC ISO 8601 formatted point in time when the restore job expires.\n"
                    },
                    "finishedAt": {
                        "type": "string",
                        "description": "UTC ISO 8601 formatted point in time when the restore job completed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.\n"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "Unique identifier of the snapshot to restore.\n"
                    },
                    "snapshotRestoreJobId": {
                        "type": "string",
                        "description": "The unique identifier of the restore job.\n"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/cluster:Cluster": {
            "description": "`mongodbatlas..Cluster` provides a Cluster resource. The resource lets you create, edit and delete clusters. The resource requires your Project ID.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n\u003e **IMPORTANT:**\n\u003cbr\u003e \u0026#8226; Free tier cluster creation (M0) is not supported via API or by this Provider.\n\u003cbr\u003e \u0026#8226; Shared tier clusters (M2, M5) cannot be upgraded to higher tiers via API or by this Provider.\n\u003cbr\u003e \u0026#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).\n\u003cbr\u003e \u0026#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n### Example AWS cluster\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst cluster_test = new mongodbatlas.Cluster(\"cluster-test\", {\n    autoScalingDiskGbEnabled: true,\n    diskSizeGb: 100,\n    mongoDbMajorVersion: \"4.2\",\n    numShards: 1,\n    projectId: \"\u003cYOUR-PROJECT-ID\u003e\",\n    providerBackupEnabled: true,\n    providerDiskIops: 300,\n    providerEncryptEbsVolume: true,\n    providerInstanceSizeName: \"M40\",\n    //Provider Settings \"block\"\n    providerName: \"AWS\",\n    providerRegionName: \"US_EAST_1\",\n    providerVolumeType: \"STANDARD\",\n    replicationFactor: 3,\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ncluster_test = mongodbatlas.Cluster(\"cluster-test\",\n    auto_scaling_disk_gb_enabled=True,\n    disk_size_gb=100,\n    mongo_db_major_version=\"4.2\",\n    num_shards=1,\n    project_id=\"\u003cYOUR-PROJECT-ID\u003e\",\n    provider_backup_enabled=True,\n    provider_disk_iops=300,\n    provider_encrypt_ebs_volume=True,\n    provider_instance_size_name=\"M40\",\n    provider_name=\"AWS\",\n    provider_region_name=\"US_EAST_1\",\n    provider_volume_type=\"STANDARD\",\n    replication_factor=3)\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var cluster_test = new Mongodbatlas.Cluster(\"cluster-test\", new Mongodbatlas.ClusterArgs\n        {\n            AutoScalingDiskGbEnabled = true,\n            DiskSizeGb = 100,\n            MongoDbMajorVersion = \"4.2\",\n            NumShards = 1,\n            ProjectId = \"\u003cYOUR-PROJECT-ID\u003e\",\n            ProviderBackupEnabled = true,\n            ProviderDiskIops = 300,\n            ProviderEncryptEbsVolume = true,\n            ProviderInstanceSizeName = \"M40\",\n            ProviderName = \"AWS\",\n            ProviderRegionName = \"US_EAST_1\",\n            ProviderVolumeType = \"STANDARD\",\n            ReplicationFactor = 3,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### Example Azure cluster.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.Cluster(\"test\", {\n    autoScalingDiskGbEnabled: true,\n    mongoDbMajorVersion: \"4.2\",\n    numShards: 1,\n    projectId: \"\u003cYOUR-PROJECT-ID\u003e\",\n    providerBackupEnabled: true,\n    providerDiskTypeName: \"P6\",\n    providerInstanceSizeName: \"M30\",\n    //Provider Settings \"block\"\n    providerName: \"AZURE\",\n    providerRegionName: \"US_EAST_2\",\n    replicationFactor: 3,\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.Cluster(\"test\",\n    auto_scaling_disk_gb_enabled=True,\n    mongo_db_major_version=\"4.2\",\n    num_shards=1,\n    project_id=\"\u003cYOUR-PROJECT-ID\u003e\",\n    provider_backup_enabled=True,\n    provider_disk_type_name=\"P6\",\n    provider_instance_size_name=\"M30\",\n    provider_name=\"AZURE\",\n    provider_region_name=\"US_EAST_2\",\n    replication_factor=3)\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.Cluster(\"test\", new Mongodbatlas.ClusterArgs\n        {\n            AutoScalingDiskGbEnabled = true,\n            MongoDbMajorVersion = \"4.2\",\n            NumShards = 1,\n            ProjectId = \"\u003cYOUR-PROJECT-ID\u003e\",\n            ProviderBackupEnabled = true,\n            ProviderDiskTypeName = \"P6\",\n            ProviderInstanceSizeName = \"M30\",\n            ProviderName = \"AZURE\",\n            ProviderRegionName = \"US_EAST_2\",\n            ReplicationFactor = 3,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### Example GCP cluster\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.Cluster(\"test\", {\n    autoScalingDiskGbEnabled: true,\n    diskSizeGb: 40,\n    mongoDbMajorVersion: \"4.2\",\n    numShards: 1,\n    projectId: \"\u003cYOUR-PROJECT-ID\u003e\",\n    providerBackupEnabled: true,\n    providerInstanceSizeName: \"M30\",\n    //Provider Settings \"block\"\n    providerName: \"GCP\",\n    providerRegionName: \"US_EAST_4\",\n    replicationFactor: 3,\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.Cluster(\"test\",\n    auto_scaling_disk_gb_enabled=True,\n    disk_size_gb=40,\n    mongo_db_major_version=\"4.2\",\n    num_shards=1,\n    project_id=\"\u003cYOUR-PROJECT-ID\u003e\",\n    provider_backup_enabled=True,\n    provider_instance_size_name=\"M30\",\n    provider_name=\"GCP\",\n    provider_region_name=\"US_EAST_4\",\n    replication_factor=3)\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.Cluster(\"test\", new Mongodbatlas.ClusterArgs\n        {\n            AutoScalingDiskGbEnabled = true,\n            DiskSizeGb = 40,\n            MongoDbMajorVersion = \"4.2\",\n            NumShards = 1,\n            ProjectId = \"\u003cYOUR-PROJECT-ID\u003e\",\n            ProviderBackupEnabled = true,\n            ProviderInstanceSizeName = \"M30\",\n            ProviderName = \"GCP\",\n            ProviderRegionName = \"US_EAST_4\",\n            ReplicationFactor = 3,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### Example Multi Region cluster\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst cluster_test = new mongodbatlas.Cluster(\"cluster-test\", {\n    clusterType: \"REPLICASET\",\n    diskSizeGb: 100,\n    numShards: 1,\n    projectId: \"\u003cYOUR-PROJECT-ID\u003e\",\n    providerBackupEnabled: true,\n    providerDiskIops: 300,\n    providerInstanceSizeName: \"M10\",\n    //Provider Settings \"block\"\n    providerName: \"AWS\",\n    providerVolumeType: \"STANDARD\",\n    replicationSpecs: [{\n        numShards: 1,\n        regionsConfigs: [\n            {\n                electableNodes: 3,\n                priority: 7,\n                readOnlyNodes: 0,\n                regionName: \"US_EAST_1\",\n            },\n            {\n                electableNodes: 2,\n                priority: 6,\n                readOnlyNodes: 0,\n                regionName: \"US_EAST_2\",\n            },\n            {\n                electableNodes: 2,\n                priority: 5,\n                readOnlyNodes: 2,\n                regionName: \"US_WEST_1\",\n            },\n        ],\n    }],\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ncluster_test = mongodbatlas.Cluster(\"cluster-test\",\n    cluster_type=\"REPLICASET\",\n    disk_size_gb=100,\n    num_shards=1,\n    project_id=\"\u003cYOUR-PROJECT-ID\u003e\",\n    provider_backup_enabled=True,\n    provider_disk_iops=300,\n    provider_instance_size_name=\"M10\",\n    provider_name=\"AWS\",\n    provider_volume_type=\"STANDARD\",\n    replication_specs=[{\n        \"num_shards\": 1,\n        \"regionsConfig\": [\n            {\n                \"electableNodes\": 3,\n                \"priority\": 7,\n                \"readOnlyNodes\": 0,\n                \"region_name\": \"US_EAST_1\",\n            },\n            {\n                \"electableNodes\": 2,\n                \"priority\": 6,\n                \"readOnlyNodes\": 0,\n                \"region_name\": \"US_EAST_2\",\n            },\n            {\n                \"electableNodes\": 2,\n                \"priority\": 5,\n                \"readOnlyNodes\": 2,\n                \"region_name\": \"US_WEST_1\",\n            },\n        ],\n    }])\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var cluster_test = new Mongodbatlas.Cluster(\"cluster-test\", new Mongodbatlas.ClusterArgs\n        {\n            ClusterType = \"REPLICASET\",\n            DiskSizeGb = 100,\n            NumShards = 1,\n            ProjectId = \"\u003cYOUR-PROJECT-ID\u003e\",\n            ProviderBackupEnabled = true,\n            ProviderDiskIops = 300,\n            ProviderInstanceSizeName = \"M10\",\n            ProviderName = \"AWS\",\n            ProviderVolumeType = \"STANDARD\",\n            ReplicationSpecs = \n            {\n                new Mongodbatlas.Inputs.ClusterReplicationSpecArgs\n                {\n                    NumShards = 1,\n                    RegionsConfig = \n                    {\n                        \n                        {\n                            { \"electableNodes\", 3 },\n                            { \"priority\", 7 },\n                            { \"readOnlyNodes\", 0 },\n                            { \"regionName\", \"US_EAST_1\" },\n                        },\n                        \n                        {\n                            { \"electableNodes\", 2 },\n                            { \"priority\", 6 },\n                            { \"readOnlyNodes\", 0 },\n                            { \"regionName\", \"US_EAST_2\" },\n                        },\n                        \n                        {\n                            { \"electableNodes\", 2 },\n                            { \"priority\", 5 },\n                            { \"readOnlyNodes\", 2 },\n                            { \"regionName\", \"US_WEST_1\" },\n                        },\n                    },\n                },\n            },\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### Example Global cluster\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst cluster_test = new mongodbatlas.Cluster(\"cluster-test\", {\n    clusterType: \"GEOSHARDED\",\n    diskSizeGb: 80,\n    numShards: 1,\n    projectId: \"\u003cYOUR-PROJECT-ID\u003e\",\n    providerBackupEnabled: true,\n    providerDiskIops: 240,\n    providerInstanceSizeName: \"M30\",\n    //Provider Settings \"block\"\n    providerName: \"AWS\",\n    providerVolumeType: \"STANDARD\",\n    replicationSpecs: [\n        {\n            numShards: 2,\n            regionsConfigs: [{\n                electableNodes: 3,\n                priority: 7,\n                readOnlyNodes: 0,\n                regionName: \"US_EAST_1\",\n            }],\n            zoneName: \"Zone 1\",\n        },\n        {\n            numShards: 2,\n            regionsConfigs: [{\n                electableNodes: 3,\n                priority: 7,\n                readOnlyNodes: 0,\n                regionName: \"EU_CENTRAL_1\",\n            }],\n            zoneName: \"Zone 2\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ncluster_test = mongodbatlas.Cluster(\"cluster-test\",\n    cluster_type=\"GEOSHARDED\",\n    disk_size_gb=80,\n    num_shards=1,\n    project_id=\"\u003cYOUR-PROJECT-ID\u003e\",\n    provider_backup_enabled=True,\n    provider_disk_iops=240,\n    provider_instance_size_name=\"M30\",\n    provider_name=\"AWS\",\n    provider_volume_type=\"STANDARD\",\n    replication_specs=[\n        {\n            \"num_shards\": 2,\n            \"regionsConfig\": [{\n                \"electableNodes\": 3,\n                \"priority\": 7,\n                \"readOnlyNodes\": 0,\n                \"region_name\": \"US_EAST_1\",\n            }],\n            \"zoneName\": \"Zone 1\",\n        },\n        {\n            \"num_shards\": 2,\n            \"regionsConfig\": [{\n                \"electableNodes\": 3,\n                \"priority\": 7,\n                \"readOnlyNodes\": 0,\n                \"region_name\": \"EU_CENTRAL_1\",\n            }],\n            \"zoneName\": \"Zone 2\",\n        },\n    ])\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var cluster_test = new Mongodbatlas.Cluster(\"cluster-test\", new Mongodbatlas.ClusterArgs\n        {\n            ClusterType = \"GEOSHARDED\",\n            DiskSizeGb = 80,\n            NumShards = 1,\n            ProjectId = \"\u003cYOUR-PROJECT-ID\u003e\",\n            ProviderBackupEnabled = true,\n            ProviderDiskIops = 240,\n            ProviderInstanceSizeName = \"M30\",\n            ProviderName = \"AWS\",\n            ProviderVolumeType = \"STANDARD\",\n            ReplicationSpecs = \n            {\n                new Mongodbatlas.Inputs.ClusterReplicationSpecArgs\n                {\n                    NumShards = 2,\n                    RegionsConfig = \n                    {\n                        \n                        {\n                            { \"electableNodes\", 3 },\n                            { \"priority\", 7 },\n                            { \"readOnlyNodes\", 0 },\n                            { \"regionName\", \"US_EAST_1\" },\n                        },\n                    },\n                    ZoneName = \"Zone 1\",\n                },\n                new Mongodbatlas.Inputs.ClusterReplicationSpecArgs\n                {\n                    NumShards = 2,\n                    RegionsConfig = \n                    {\n                        \n                        {\n                            { \"electableNodes\", 3 },\n                            { \"priority\", 7 },\n                            { \"readOnlyNodes\", 0 },\n                            { \"regionName\", \"EU_CENTRAL_1\" },\n                        },\n                    },\n                    ZoneName = \"Zone 2\",\n                },\n            },\n        });\n    }\n\n}\n```\n{{% /example %}}\n{{% example %}}\n### Example AWS Shared Tier cluster\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst cluster_test = new mongodbatlas.Cluster(\"cluster-test\", {\n    autoScalingDiskGbEnabled: false,\n    backingProviderName: \"AWS\",\n    diskSizeGb: 2,\n    //These must be the following values\n    mongoDbMajorVersion: \"4.2\",\n    projectId: \"\u003cYOUR-PROJECT-ID\u003e\",\n    providerInstanceSizeName: \"M2\",\n    //Provider Settings \"block\"\n    providerName: \"TENANT\",\n    providerRegionName: \"US_EAST_1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ncluster_test = mongodbatlas.Cluster(\"cluster-test\",\n    auto_scaling_disk_gb_enabled=\"false\",\n    backing_provider_name=\"AWS\",\n    disk_size_gb=\"2\",\n    mongo_db_major_version=\"4.2\",\n    project_id=\"\u003cYOUR-PROJECT-ID\u003e\",\n    provider_instance_size_name=\"M2\",\n    provider_name=\"TENANT\",\n    provider_region_name=\"US_EAST_1\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var cluster_test = new Mongodbatlas.Cluster(\"cluster-test\", new Mongodbatlas.ClusterArgs\n        {\n            AutoScalingDiskGbEnabled = false,\n            BackingProviderName = \"AWS\",\n            DiskSizeGb = 2,\n            MongoDbMajorVersion = \"4.2\",\n            ProjectId = \"\u003cYOUR-PROJECT-ID\u003e\",\n            ProviderInstanceSizeName = \"M2\",\n            ProviderName = \"TENANT\",\n            ProviderRegionName = \"US_EAST_1\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "advancedConfiguration": {
                    "$ref": "#/types/mongodbatlas:/ClusterAdvancedConfiguration:ClusterAdvancedConfiguration"
                },
                "autoScalingComputeEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether cluster tier auto-scaling is enabled. The default is false.\n- Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.\n- Set to `false` to disable cluster tier auto-scaling.\n"
                },
                "autoScalingComputeScaleDownEnabled": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.\n- If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`\n"
                },
                "autoScalingDiskGbEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether disk auto-scaling is enabled. The default is true.\n- Set to `true` to enable disk auto-scaling.\n- Set to `false` to disable disk auto-scaling.\n"
                },
                "backingProviderName": {
                    "type": "string",
                    "description": "Cloud service provider on which the server for a multi-tenant cluster is provisioned.\n"
                },
                "backupEnabled": {
                    "type": "boolean",
                    "description": "Legacy Backup - Set to true to enable Atlas legacy backups for the cluster.\n**Important** - MongoDB deprecated the Legacy Backup feature. Clusters that use Legacy Backup can continue to use it. MongoDB recommends using [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/).\n* Any net new Atlas clusters of any type do not support this parameter. These clusters must use Cloud Backup, `provider_backup_enabled`, to enable Cloud Backup.  If you create a new Atlas cluster and set `backup_enabled` to true, the Provider will respond with an error.  This change doesn’t affect existing clusters that use legacy backups.\n* Set to false to disable legacy backups for the cluster. Atlas deletes any stored snapshots.\n* The default value is false.  M10 and above only.\n"
                },
                "biConnector": {
                    "$ref": "#/types/mongodbatlas:/ClusterBiConnector:ClusterBiConnector",
                    "description": "Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.\n"
                },
                "clusterId": {
                    "type": "string",
                    "description": "The cluster ID.\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.\n"
                },
                "connectionStrings": {
                    "$ref": "#/types/mongodbatlas:/ClusterConnectionStrings:ClusterConnectionStrings",
                    "description": "Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.\n"
                },
                "containerId": {
                    "type": "string",
                    "description": "The Network Peering Container ID. The id of the container either created programmatically by the user before any clusters existed in the project or when the first cluster in the region (AWS/Azure) or project (GCP) was created.\n"
                },
                "diskSizeGb": {
                    "type": "number",
                    "description": "Capacity, in gigabytes, of the host’s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.\n* The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.\n* Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.\n* Cannot be used with clusters with local NVMe SSDs\n* Cannot be used with Azure clusters\n"
                },
                "encryptionAtRestProvider": {
                    "type": "string",
                    "description": "Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.   \n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/ClusterLabel:ClusterLabel"
                    },
                    "description": "Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.\n"
                },
                "mongoDbMajorVersion": {
                    "type": "string",
                    "description": "Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `provider_instance_size_name` is either M2 or M5.\n"
                },
                "mongoDbVersion": {
                    "type": "string",
                    "description": "Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.\n"
                },
                "mongoUri": {
                    "type": "string",
                    "description": "Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.\n"
                },
                "mongoUriUpdated": {
                    "type": "string",
                    "description": "Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.\n"
                },
                "mongoUriWithOptions": {
                    "type": "string",
                    "description": "connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.\n"
                },
                "numShards": {
                    "type": "integer",
                    "description": "Number of shards to deploy in the specified zone, minimum 1.\n"
                },
                "paused": {
                    "type": "boolean",
                    "description": "Flag that indicates whether the cluster is paused or not.\n"
                },
                "pitEnabled": {
                    "type": "boolean",
                    "description": "- Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, provider_backup_enabled must also be set to true.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to create the database user.\n"
                },
                "providerAutoScalingComputeMaxInstanceSize": {
                    "type": "string",
                    "description": "Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.\n"
                },
                "providerAutoScalingComputeMinInstanceSize": {
                    "type": "string",
                    "description": "Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.\n"
                },
                "providerBackupEnabled": {
                    "type": "boolean",
                    "description": "Flag indicating if the cluster uses Cloud Backup for backups.\n"
                },
                "providerDiskIops": {
                    "type": "integer",
                    "description": "The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `provider_instance_size_name` and `disk_size_gb`.\n"
                },
                "providerDiskTypeName": {
                    "type": "string",
                    "description": "Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.\n"
                },
                "providerEncryptEbsVolume": {
                    "type": "boolean",
                    "description": "If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the cluster.  **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.\n"
                },
                "providerInstanceSizeName": {
                    "type": "string",
                    "description": "Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources. \n**Note** free tier (M0) creation is not supported by the Atlas API and hence not supported by this provider.)\n"
                },
                "providerName": {
                    "type": "string",
                    "description": "Cloud service provider on which the servers are provisioned.\n"
                },
                "providerRegionName": {
                    "type": "string",
                    "description": "Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).\nDo not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.\n"
                },
                "providerVolumeType": {
                    "type": "string",
                    "description": "The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.\n"
                },
                "replicationFactor": {
                    "type": "integer",
                    "description": "Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.\n"
                },
                "replicationSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/ClusterReplicationSpec:ClusterReplicationSpec"
                    },
                    "description": "Configuration for cluster regions.  See Replication Spec below for more details.\n"
                },
                "snapshotBackupPolicies": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/ClusterSnapshotBackupPolicy:ClusterSnapshotBackupPolicy"
                    },
                    "description": "current snapshot schedule and retention settings for the cluster.\n"
                },
                "srvAddress": {
                    "type": "string",
                    "description": "Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.\n"
                },
                "stateName": {
                    "type": "string",
                    "description": "Current state of the cluster. The possible states are:\n- IDLE\n- CREATING\n- UPDATING\n- DELETING\n- DELETED\n- REPAIRING\n"
                }
            },
            "required": [
                "advancedConfiguration",
                "autoScalingComputeEnabled",
                "autoScalingComputeScaleDownEnabled",
                "backingProviderName",
                "biConnector",
                "clusterId",
                "clusterType",
                "connectionStrings",
                "containerId",
                "diskSizeGb",
                "encryptionAtRestProvider",
                "labels",
                "mongoDbMajorVersion",
                "mongoDbVersion",
                "mongoUri",
                "mongoUriUpdated",
                "mongoUriWithOptions",
                "name",
                "paused",
                "pitEnabled",
                "projectId",
                "providerAutoScalingComputeMaxInstanceSize",
                "providerAutoScalingComputeMinInstanceSize",
                "providerDiskIops",
                "providerDiskTypeName",
                "providerEncryptEbsVolume",
                "providerInstanceSizeName",
                "providerName",
                "providerRegionName",
                "providerVolumeType",
                "replicationFactor",
                "replicationSpecs",
                "snapshotBackupPolicies",
                "srvAddress",
                "stateName"
            ],
            "inputProperties": {
                "advancedConfiguration": {
                    "$ref": "#/types/mongodbatlas:/ClusterAdvancedConfiguration:ClusterAdvancedConfiguration"
                },
                "autoScalingComputeEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether cluster tier auto-scaling is enabled. The default is false.\n- Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.\n- Set to `false` to disable cluster tier auto-scaling.\n"
                },
                "autoScalingComputeScaleDownEnabled": {
                    "type": "boolean",
                    "description": "Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.\n- If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`\n"
                },
                "autoScalingDiskGbEnabled": {
                    "type": "boolean",
                    "description": "Specifies whether disk auto-scaling is enabled. The default is true.\n- Set to `true` to enable disk auto-scaling.\n- Set to `false` to disable disk auto-scaling.\n"
                },
                "backingProviderName": {
                    "type": "string",
                    "description": "Cloud service provider on which the server for a multi-tenant cluster is provisioned.\n"
                },
                "backupEnabled": {
                    "type": "boolean",
                    "description": "Legacy Backup - Set to true to enable Atlas legacy backups for the cluster.\n**Important** - MongoDB deprecated the Legacy Backup feature. Clusters that use Legacy Backup can continue to use it. MongoDB recommends using [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/).\n* Any net new Atlas clusters of any type do not support this parameter. These clusters must use Cloud Backup, `provider_backup_enabled`, to enable Cloud Backup.  If you create a new Atlas cluster and set `backup_enabled` to true, the Provider will respond with an error.  This change doesn’t affect existing clusters that use legacy backups.\n* Set to false to disable legacy backups for the cluster. Atlas deletes any stored snapshots.\n* The default value is false.  M10 and above only.\n"
                },
                "biConnector": {
                    "$ref": "#/types/mongodbatlas:/ClusterBiConnector:ClusterBiConnector",
                    "description": "Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.\n"
                },
                "clusterType": {
                    "type": "string",
                    "description": "Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.\n"
                },
                "diskSizeGb": {
                    "type": "number",
                    "description": "Capacity, in gigabytes, of the host’s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.\n* The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.\n* Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.\n* Cannot be used with clusters with local NVMe SSDs\n* Cannot be used with Azure clusters\n"
                },
                "encryptionAtRestProvider": {
                    "type": "string",
                    "description": "Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.   \n"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/ClusterLabel:ClusterLabel"
                    },
                    "description": "Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.\n"
                },
                "mongoDbMajorVersion": {
                    "type": "string",
                    "description": "Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `provider_instance_size_name` is either M2 or M5.\n"
                },
                "name": {
                    "type": "string",
                    "description": "Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.\n"
                },
                "numShards": {
                    "type": "integer",
                    "description": "Number of shards to deploy in the specified zone, minimum 1.\n"
                },
                "pitEnabled": {
                    "type": "boolean",
                    "description": "- Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, provider_backup_enabled must also be set to true.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to create the database user.\n"
                },
                "providerAutoScalingComputeMaxInstanceSize": {
                    "type": "string",
                    "description": "Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.\n"
                },
                "providerAutoScalingComputeMinInstanceSize": {
                    "type": "string",
                    "description": "Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.\n"
                },
                "providerBackupEnabled": {
                    "type": "boolean",
                    "description": "Flag indicating if the cluster uses Cloud Backup for backups.\n"
                },
                "providerDiskIops": {
                    "type": "integer",
                    "description": "The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `provider_instance_size_name` and `disk_size_gb`.\n"
                },
                "providerDiskTypeName": {
                    "type": "string",
                    "description": "Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.\n"
                },
                "providerEncryptEbsVolume": {
                    "type": "boolean",
                    "description": "If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the cluster.  **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.\n"
                },
                "providerInstanceSizeName": {
                    "type": "string",
                    "description": "Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources. \n**Note** free tier (M0) creation is not supported by the Atlas API and hence not supported by this provider.)\n"
                },
                "providerName": {
                    "type": "string",
                    "description": "Cloud service provider on which the servers are provisioned.\n"
                },
                "providerRegionName": {
                    "type": "string",
                    "description": "Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).\nDo not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.\n"
                },
                "providerVolumeType": {
                    "type": "string",
                    "description": "The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.\n"
                },
                "replicationFactor": {
                    "type": "integer",
                    "description": "Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.\n"
                },
                "replicationSpecs": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/ClusterReplicationSpec:ClusterReplicationSpec"
                    },
                    "description": "Configuration for cluster regions.  See Replication Spec below for more details.\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "providerInstanceSizeName",
                "providerName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Cluster resources.\n",
                "properties": {
                    "advancedConfiguration": {
                        "$ref": "#/types/mongodbatlas:/ClusterAdvancedConfiguration:ClusterAdvancedConfiguration"
                    },
                    "autoScalingComputeEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether cluster tier auto-scaling is enabled. The default is false.\n- Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.\n- Set to `false` to disable cluster tier auto-scaling.\n"
                    },
                    "autoScalingComputeScaleDownEnabled": {
                        "type": "boolean",
                        "description": "Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.\n- If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`\n"
                    },
                    "autoScalingDiskGbEnabled": {
                        "type": "boolean",
                        "description": "Specifies whether disk auto-scaling is enabled. The default is true.\n- Set to `true` to enable disk auto-scaling.\n- Set to `false` to disable disk auto-scaling.\n"
                    },
                    "backingProviderName": {
                        "type": "string",
                        "description": "Cloud service provider on which the server for a multi-tenant cluster is provisioned.\n"
                    },
                    "backupEnabled": {
                        "type": "boolean",
                        "description": "Legacy Backup - Set to true to enable Atlas legacy backups for the cluster.\n**Important** - MongoDB deprecated the Legacy Backup feature. Clusters that use Legacy Backup can continue to use it. MongoDB recommends using [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/).\n* Any net new Atlas clusters of any type do not support this parameter. These clusters must use Cloud Backup, `provider_backup_enabled`, to enable Cloud Backup.  If you create a new Atlas cluster and set `backup_enabled` to true, the Provider will respond with an error.  This change doesn’t affect existing clusters that use legacy backups.\n* Set to false to disable legacy backups for the cluster. Atlas deletes any stored snapshots.\n* The default value is false.  M10 and above only.\n"
                    },
                    "biConnector": {
                        "$ref": "#/types/mongodbatlas:/ClusterBiConnector:ClusterBiConnector",
                        "description": "Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.\n"
                    },
                    "clusterId": {
                        "type": "string",
                        "description": "The cluster ID.\n"
                    },
                    "clusterType": {
                        "type": "string",
                        "description": "Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.\n"
                    },
                    "connectionStrings": {
                        "$ref": "#/types/mongodbatlas:/ClusterConnectionStrings:ClusterConnectionStrings",
                        "description": "Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.\n"
                    },
                    "containerId": {
                        "type": "string",
                        "description": "The Network Peering Container ID. The id of the container either created programmatically by the user before any clusters existed in the project or when the first cluster in the region (AWS/Azure) or project (GCP) was created.\n"
                    },
                    "diskSizeGb": {
                        "type": "number",
                        "description": "Capacity, in gigabytes, of the host’s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.\n* The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.\n* Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.\n* Cannot be used with clusters with local NVMe SSDs\n* Cannot be used with Azure clusters\n"
                    },
                    "encryptionAtRestProvider": {
                        "type": "string",
                        "description": "Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.   \n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/ClusterLabel:ClusterLabel"
                        },
                        "description": "Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.\n"
                    },
                    "mongoDbMajorVersion": {
                        "type": "string",
                        "description": "Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `provider_instance_size_name` is either M2 or M5.\n"
                    },
                    "mongoDbVersion": {
                        "type": "string",
                        "description": "Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.\n"
                    },
                    "mongoUri": {
                        "type": "string",
                        "description": "Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.\n"
                    },
                    "mongoUriUpdated": {
                        "type": "string",
                        "description": "Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.\n"
                    },
                    "mongoUriWithOptions": {
                        "type": "string",
                        "description": "connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.\n"
                    },
                    "numShards": {
                        "type": "integer",
                        "description": "Number of shards to deploy in the specified zone, minimum 1.\n"
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "Flag that indicates whether the cluster is paused or not.\n"
                    },
                    "pitEnabled": {
                        "type": "boolean",
                        "description": "- Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, provider_backup_enabled must also be set to true.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n"
                    },
                    "providerAutoScalingComputeMaxInstanceSize": {
                        "type": "string",
                        "description": "Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.\n"
                    },
                    "providerAutoScalingComputeMinInstanceSize": {
                        "type": "string",
                        "description": "Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.\n"
                    },
                    "providerBackupEnabled": {
                        "type": "boolean",
                        "description": "Flag indicating if the cluster uses Cloud Backup for backups.\n"
                    },
                    "providerDiskIops": {
                        "type": "integer",
                        "description": "The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `provider_instance_size_name` and `disk_size_gb`.\n"
                    },
                    "providerDiskTypeName": {
                        "type": "string",
                        "description": "Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.\n"
                    },
                    "providerEncryptEbsVolume": {
                        "type": "boolean",
                        "description": "If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the cluster.  **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.\n"
                    },
                    "providerInstanceSizeName": {
                        "type": "string",
                        "description": "Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources. \n**Note** free tier (M0) creation is not supported by the Atlas API and hence not supported by this provider.)\n"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "Cloud service provider on which the servers are provisioned.\n"
                    },
                    "providerRegionName": {
                        "type": "string",
                        "description": "Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).\nDo not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.\n"
                    },
                    "providerVolumeType": {
                        "type": "string",
                        "description": "The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.\n"
                    },
                    "replicationFactor": {
                        "type": "integer",
                        "description": "Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.\n"
                    },
                    "replicationSpecs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/ClusterReplicationSpec:ClusterReplicationSpec"
                        },
                        "description": "Configuration for cluster regions.  See Replication Spec below for more details.\n"
                    },
                    "snapshotBackupPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/ClusterSnapshotBackupPolicy:ClusterSnapshotBackupPolicy"
                        },
                        "description": "current snapshot schedule and retention settings for the cluster.\n"
                    },
                    "srvAddress": {
                        "type": "string",
                        "description": "Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.\n"
                    },
                    "stateName": {
                        "type": "string",
                        "description": "Current state of the cluster. The possible states are:\n- IDLE\n- CREATING\n- UPDATING\n- DELETING\n- DELETED\n- REPAIRING\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/customDbRole:CustomDbRole": {
            "description": "`mongodbatlas..CustomDbRole` provides a Custom DB Role resource. The customDBRoles resource lets you retrieve, create and modify the custom MongoDB roles in your cluster. Use custom MongoDB roles to specify custom sets of actions which cannot be described by the built-in Atlas database user privileges.\n\n\u003e **IMPORTANT** Custom roles cannot use actions unavailable to any cluster version in your project. Custom roles are defined at the project level, and must be compatible with each MongoDB version used by your project’s clusters. If you have a cluster in your project with MongoDB 3.4, you cannot create a custom role that uses actions introduced in MongoDB 3.6, such as useUUID.\n\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testRole = new mongodbatlas.CustomDbRole(\"test_role\", {\n    actions: [\n        {\n            action: \"UPDATE\",\n            resources: [{\n                collectionName: \"\",\n                databaseName: \"anyDatabase\",\n            }],\n        },\n        {\n            action: \"INSERT\",\n            resources: [{\n                collectionName: \"\",\n                databaseName: \"anyDatabase\",\n            }],\n        },\n        {\n            action: \"REMOVE\",\n            resources: [{\n                collectionName: \"\",\n                databaseName: \"anyDatabase\",\n            }],\n        },\n    ],\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    roleName: \"myCustomRole\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest_role = mongodbatlas.CustomDbRole(\"testRole\",\n    actions=[\n        {\n            \"action\": \"UPDATE\",\n            \"resources\": [{\n                \"collectionName\": \"\",\n                \"database_name\": \"anyDatabase\",\n            }],\n        },\n        {\n            \"action\": \"INSERT\",\n            \"resources\": [{\n                \"collectionName\": \"\",\n                \"database_name\": \"anyDatabase\",\n            }],\n        },\n        {\n            \"action\": \"REMOVE\",\n            \"resources\": [{\n                \"collectionName\": \"\",\n                \"database_name\": \"anyDatabase\",\n            }],\n        },\n    ],\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    role_name=\"myCustomRole\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testRole = new Mongodbatlas.CustomDbRole(\"testRole\", new Mongodbatlas.CustomDbRoleArgs\n        {\n            Actions = \n            {\n                new Mongodbatlas.Inputs.CustomDbRoleActionArgs\n                {\n                    Action = \"UPDATE\",\n                    Resources = \n                    {\n                        new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs\n                        {\n                            CollectionName = \"\",\n                            DatabaseName = \"anyDatabase\",\n                        },\n                    },\n                },\n                new Mongodbatlas.Inputs.CustomDbRoleActionArgs\n                {\n                    Action = \"INSERT\",\n                    Resources = \n                    {\n                        new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs\n                        {\n                            CollectionName = \"\",\n                            DatabaseName = \"anyDatabase\",\n                        },\n                    },\n                },\n                new Mongodbatlas.Inputs.CustomDbRoleActionArgs\n                {\n                    Action = \"REMOVE\",\n                    Resources = \n                    {\n                        new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs\n                        {\n                            CollectionName = \"\",\n                            DatabaseName = \"anyDatabase\",\n                        },\n                    },\n                },\n            },\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            RoleName = \"myCustomRole\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n## Example Usage with inherited roles\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst inheritedRoleOne = new mongodbatlas.CustomDbRole(\"inherited_role_one\", {\n    actions: [{\n        action: \"INSERT\",\n        resources: [{\n            collectionName: \"\",\n            databaseName: \"anyDatabase\",\n        }],\n    }],\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    roleName: \"insertRole\",\n});\nconst inheritedRoleTwo = new mongodbatlas.CustomDbRole(\"inherited_role_two\", {\n    actions: [{\n        action: \"SERVER_STATUS\",\n        resources: [{\n            cluster: true,\n        }],\n    }],\n    projectId: inheritedRoleOne.projectId,\n    roleName: \"statusServerRole\",\n});\nconst testRole = new mongodbatlas.CustomDbRole(\"test_role\", {\n    actions: [\n        {\n            action: \"UPDATE\",\n            resources: [{\n                collectionName: \"\",\n                databaseName: \"anyDatabase\",\n            }],\n        },\n        {\n            action: \"REMOVE\",\n            resources: [{\n                collectionName: \"\",\n                databaseName: \"anyDatabase\",\n            }],\n        },\n    ],\n    inheritedRoles: [\n        {\n            databaseName: \"admin\",\n            roleName: inheritedRoleOne.roleName,\n        },\n        {\n            databaseName: \"admin\",\n            roleName: inheritedRoleTwo.roleName,\n        },\n    ],\n    projectId: inheritedRoleOne.projectId,\n    roleName: \"myCustomRole\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ninherited_role_one = mongodbatlas.CustomDbRole(\"inheritedRoleOne\",\n    actions=[{\n        \"action\": \"INSERT\",\n        \"resources\": [{\n            \"collectionName\": \"\",\n            \"database_name\": \"anyDatabase\",\n        }],\n    }],\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    role_name=\"insertRole\")\ninherited_role_two = mongodbatlas.CustomDbRole(\"inheritedRoleTwo\",\n    actions=[{\n        \"action\": \"SERVER_STATUS\",\n        \"resources\": [{\n            \"cluster\": True,\n        }],\n    }],\n    project_id=inherited_role_one.project_id,\n    role_name=\"statusServerRole\")\ntest_role = mongodbatlas.CustomDbRole(\"testRole\",\n    actions=[\n        {\n            \"action\": \"UPDATE\",\n            \"resources\": [{\n                \"collectionName\": \"\",\n                \"database_name\": \"anyDatabase\",\n            }],\n        },\n        {\n            \"action\": \"REMOVE\",\n            \"resources\": [{\n                \"collectionName\": \"\",\n                \"database_name\": \"anyDatabase\",\n            }],\n        },\n    ],\n    inherited_roles=[\n        {\n            \"database_name\": \"admin\",\n            \"role_name\": inherited_role_one.role_name,\n        },\n        {\n            \"database_name\": \"admin\",\n            \"role_name\": inherited_role_two.role_name,\n        },\n    ],\n    project_id=inherited_role_one.project_id,\n    role_name=\"myCustomRole\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var inheritedRoleOne = new Mongodbatlas.CustomDbRole(\"inheritedRoleOne\", new Mongodbatlas.CustomDbRoleArgs\n        {\n            Actions = \n            {\n                new Mongodbatlas.Inputs.CustomDbRoleActionArgs\n                {\n                    Action = \"INSERT\",\n                    Resources = \n                    {\n                        new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs\n                        {\n                            CollectionName = \"\",\n                            DatabaseName = \"anyDatabase\",\n                        },\n                    },\n                },\n            },\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            RoleName = \"insertRole\",\n        });\n        var inheritedRoleTwo = new Mongodbatlas.CustomDbRole(\"inheritedRoleTwo\", new Mongodbatlas.CustomDbRoleArgs\n        {\n            Actions = \n            {\n                new Mongodbatlas.Inputs.CustomDbRoleActionArgs\n                {\n                    Action = \"SERVER_STATUS\",\n                    Resources = \n                    {\n                        new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs\n                        {\n                            Cluster = true,\n                        },\n                    },\n                },\n            },\n            ProjectId = inheritedRoleOne.ProjectId,\n            RoleName = \"statusServerRole\",\n        });\n        var testRole = new Mongodbatlas.CustomDbRole(\"testRole\", new Mongodbatlas.CustomDbRoleArgs\n        {\n            Actions = \n            {\n                new Mongodbatlas.Inputs.CustomDbRoleActionArgs\n                {\n                    Action = \"UPDATE\",\n                    Resources = \n                    {\n                        new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs\n                        {\n                            CollectionName = \"\",\n                            DatabaseName = \"anyDatabase\",\n                        },\n                    },\n                },\n                new Mongodbatlas.Inputs.CustomDbRoleActionArgs\n                {\n                    Action = \"REMOVE\",\n                    Resources = \n                    {\n                        new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs\n                        {\n                            CollectionName = \"\",\n                            DatabaseName = \"anyDatabase\",\n                        },\n                    },\n                },\n            },\n            InheritedRoles = \n            {\n                new Mongodbatlas.Inputs.CustomDbRoleInheritedRoleArgs\n                {\n                    DatabaseName = \"admin\",\n                    RoleName = inheritedRoleOne.RoleName,\n                },\n                new Mongodbatlas.Inputs.CustomDbRoleInheritedRoleArgs\n                {\n                    DatabaseName = \"admin\",\n                    RoleName = inheritedRoleTwo.RoleName,\n                },\n            },\n            ProjectId = inheritedRoleOne.ProjectId,\n            RoleName = \"myCustomRole\",\n        });\n    }\n\n}\n```\n",
            "properties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/CustomDbRoleAction:CustomDbRoleAction"
                    }
                },
                "inheritedRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/CustomDbRoleInheritedRole:CustomDbRoleInheritedRole"
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to create the database user.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Name of the inherited role. This can either be another custom role or a built-in role.\n"
                }
            },
            "required": [
                "actions",
                "projectId",
                "roleName"
            ],
            "inputProperties": {
                "actions": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/CustomDbRoleAction:CustomDbRoleAction"
                    }
                },
                "inheritedRoles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/CustomDbRoleInheritedRole:CustomDbRoleInheritedRole"
                    }
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to create the database user.\n"
                },
                "roleName": {
                    "type": "string",
                    "description": "Name of the inherited role. This can either be another custom role or a built-in role.\n"
                }
            },
            "requiredInputs": [
                "actions",
                "projectId",
                "roleName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering CustomDbRole resources.\n",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/CustomDbRoleAction:CustomDbRoleAction"
                        }
                    },
                    "inheritedRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/CustomDbRoleInheritedRole:CustomDbRoleInheritedRole"
                        }
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "Name of the inherited role. This can either be another custom role or a built-in role.\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/databaseUser:DatabaseUser": {
            "description": "`mongodbatlas..DatabaseUser` provides a Database User resource. This represents a database user which will be applied to all clusters within the project.\n\nEach user has a set of roles that provide access to the project’s databases. User's roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n\u003e **IMPORTANT:** All arguments including the password will be stored in the raw state as plain-text.\n\n## Example Usages\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.DatabaseUser(\"test\", {\n    authDatabaseName: \"admin\",\n    labels: [{\n        key: \"My Key\",\n        value: \"My Value\",\n    }],\n    password: \"test-acc-password\",\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    roles: [\n        {\n            databaseName: \"dbforApp\",\n            roleName: \"readWrite\",\n        },\n        {\n            databaseName: \"admin\",\n            roleName: \"readAnyDatabase\",\n        },\n    ],\n    username: \"test-acc-username\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.DatabaseUser(\"test\",\n    auth_database_name=\"admin\",\n    labels=[{\n        \"key\": \"My Key\",\n        \"value\": \"My Value\",\n    }],\n    password=\"test-acc-password\",\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    roles=[\n        {\n            \"database_name\": \"dbforApp\",\n            \"role_name\": \"readWrite\",\n        },\n        {\n            \"database_name\": \"admin\",\n            \"role_name\": \"readAnyDatabase\",\n        },\n    ],\n    username=\"test-acc-username\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.DatabaseUser(\"test\", new Mongodbatlas.DatabaseUserArgs\n        {\n            AuthDatabaseName = \"admin\",\n            Labels = \n            {\n                new Mongodbatlas.Inputs.DatabaseUserLabelArgs\n                {\n                    Key = \"My Key\",\n                    Value = \"My Value\",\n                },\n            },\n            Password = \"test-acc-password\",\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            Roles = \n            {\n                new Mongodbatlas.Inputs.DatabaseUserRoleArgs\n                {\n                    DatabaseName = \"dbforApp\",\n                    RoleName = \"readWrite\",\n                },\n                new Mongodbatlas.Inputs.DatabaseUserRoleArgs\n                {\n                    DatabaseName = \"admin\",\n                    RoleName = \"readAnyDatabase\",\n                },\n            },\n            Username = \"test-acc-username\",\n        });\n    }\n\n}\n```\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.DatabaseUser(\"test\", {\n    authDatabaseName: \"$external\",\n    labels: [{\n        key: \"%s\",\n        value: \"%s\",\n    }],\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    roles: [{\n        databaseName: \"admin\",\n        roleName: \"readAnyDatabase\",\n    }],\n    username: \"test-acc-username\",\n    x509Type: \"MANAGED\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.DatabaseUser(\"test\",\n    auth_database_name=\"$$external\",\n    labels=[{\n        \"key\": \"%s\",\n        \"value\": \"%s\",\n    }],\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    roles=[{\n        \"database_name\": \"admin\",\n        \"role_name\": \"readAnyDatabase\",\n    }],\n    username=\"test-acc-username\",\n    x509_type=\"MANAGED\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.DatabaseUser(\"test\", new Mongodbatlas.DatabaseUserArgs\n        {\n            AuthDatabaseName = \"$$external\",\n            Labels = \n            {\n                new Mongodbatlas.Inputs.DatabaseUserLabelArgs\n                {\n                    Key = \"%s\",\n                    Value = \"%s\",\n                },\n            },\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            Roles = \n            {\n                new Mongodbatlas.Inputs.DatabaseUserRoleArgs\n                {\n                    DatabaseName = \"admin\",\n                    RoleName = \"readAnyDatabase\",\n                },\n            },\n            Username = \"test-acc-username\",\n            X509Type = \"MANAGED\",\n        });\n    }\n\n}\n```\n",
            "properties": {
                "authDatabaseName": {
                    "type": "string",
                    "description": "The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.\n",
                    "deprecationMessage": "use auth_database_name instead"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/DatabaseUserLabel:DatabaseUserLabel"
                    }
                },
                "password": {
                    "type": "string",
                    "description": "User's initial password. A value is required to create the database user, however the argument but may be removed from your configuration after user creation without impacting the user, password or management. IMPORTANT --- Passwords may show up in provider related logs and it will be stored in the state file as plain-text. Password can be changed after creation using your preferred method, e.g. via the MongoDB Atlas UI, to ensure security.  If you do change management of the password to outside of provider be sure to remove the argument from the provider configuration so it is not inadvertently updated to the original password.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to create the database user.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/DatabaseUserRole:DatabaseUserRole"
                    },
                    "description": "List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for authenticating to MongoDB.\n"
                },
                "x509Type": {
                    "type": "string",
                    "description": "X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:\n"
                }
            },
            "required": [
                "labels",
                "projectId",
                "roles",
                "username"
            ],
            "inputProperties": {
                "authDatabaseName": {
                    "type": "string",
                    "description": "The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.\n"
                },
                "databaseName": {
                    "type": "string",
                    "description": "Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.\n",
                    "deprecationMessage": "use auth_database_name instead"
                },
                "labels": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/DatabaseUserLabel:DatabaseUserLabel"
                    }
                },
                "password": {
                    "type": "string",
                    "description": "User's initial password. A value is required to create the database user, however the argument but may be removed from your configuration after user creation without impacting the user, password or management. IMPORTANT --- Passwords may show up in provider related logs and it will be stored in the state file as plain-text. Password can be changed after creation using your preferred method, e.g. via the MongoDB Atlas UI, to ensure security.  If you do change management of the password to outside of provider be sure to remove the argument from the provider configuration so it is not inadvertently updated to the original password.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to create the database user.\n"
                },
                "roles": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/DatabaseUserRole:DatabaseUserRole"
                    },
                    "description": "List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username for authenticating to MongoDB.\n"
                },
                "x509Type": {
                    "type": "string",
                    "description": "X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "username"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering DatabaseUser resources.\n",
                "properties": {
                    "authDatabaseName": {
                        "type": "string",
                        "description": "The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.\n",
                        "deprecationMessage": "use auth_database_name instead"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/DatabaseUserLabel:DatabaseUserLabel"
                        }
                    },
                    "password": {
                        "type": "string",
                        "description": "User's initial password. A value is required to create the database user, however the argument but may be removed from your configuration after user creation without impacting the user, password or management. IMPORTANT --- Passwords may show up in provider related logs and it will be stored in the state file as plain-text. Password can be changed after creation using your preferred method, e.g. via the MongoDB Atlas UI, to ensure security.  If you do change management of the password to outside of provider be sure to remove the argument from the provider configuration so it is not inadvertently updated to the original password.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/DatabaseUserRole:DatabaseUserRole"
                        },
                        "description": "List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for authenticating to MongoDB.\n"
                    },
                    "x509Type": {
                        "type": "string",
                        "description": "X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/encryptionAtRest:EncryptionAtRest": {
            "description": "`mongodbatlas..EncryptionAtRest` Allows management of encryption at rest for an Atlas project with one of the following providers:\n\n[Amazon Web Services Key Management Service](https://docs.atlas.mongodb.com/security-aws-kms/#security-aws-kms)\n[Azure Key Vault](https://docs.atlas.mongodb.com/security-azure-kms/#security-azure-kms)\n[Google Cloud KMS](https://docs.atlas.mongodb.com/security-gcp-kms/#security-gcp-kms)\n\nAfter configuring at least one Encryption at Rest provider for the Atlas project, Project Owners can enable Encryption at Rest for each Atlas cluster for which they require encryption. The Encryption at Rest provider does not have to match the cluster cloud service provider.\n\nAtlas does not automatically rotate user-managed encryption keys. Defer to your preferred Encryption at Rest provider’s documentation and guidance for best practices on key rotation. Atlas automatically creates a 365-day key rotation alert when you configure Encryption at Rest using your Key Management in an Atlas project.\n\nSee [Encryption at Rest](https://docs.atlas.mongodb.com/security-kms-encryption/index.html) for more information, including prerequisites and restrictions.\n\n\u003e **IMPORTANT** Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.EncryptionAtRest(\"test\", {\n    awsKms: {\n        access_key_id: \"AKIAIOSFODNN7EXAMPLE\",\n        customer_master_key_id: \"030gce02-586d-48d2-a966-05ea954fde0g\",\n        enabled: true,\n        region: \"US_EAST_1\",\n        secret_access_key: \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n    },\n    azureKeyVault: {\n        azure_environment: \"AZURE\",\n        client_id: \"g54f9e2-89e3-40fd-8188-EXAMPLEID\",\n        enabled: true,\n        key_identifier: \"https://EXAMPLEKeyVault.vault.azure.net/keys/EXAMPLEKey/d891821e3d364e9eb88fbd3d11807b86\",\n        key_vault_name: \"EXAMPLEKeyVault\",\n        resource_group_name: \"ExampleRGName\",\n        secret: \"EXAMPLESECRET\",\n        subscription_id: \"0ec944e3-g725-44f9-a147-EXAMPLEID\",\n        tenant_id: \"e8e4b6ba-ff32-4c88-a9af-EXAMPLEID\",\n    },\n    googleCloudKms: {\n        enabled: true,\n        key_version_resource_id: \"projects/my-project-common-0/locations/us-east4/keyRings/my-key-ring-0/cryptoKeys/my-key-0/cryptoKeyVersions/1\",\n        service_account_key: \"{\\\"type\\\": \\\"service_account\\\",\\\"project_id\\\": \\\"my-project-common-0\\\",\\\"private_key_id\\\": \\\"e120598ea4f88249469fcdd75a9a785c1bb3\\\",\\\"private_key\\\": \\\"-----BEGIN PRIVATE KEY-----\\\\nMIIEuwIBA(truncated)SfecnS0mT94D9\\\\n-----END PRIVATE KEY-----\\\\n\\\",\\\"client_email\\\": \\\"my-email-kms-0@my-project-common-0.iam.gserviceaccount.com\\\",\\\"client_id\\\": \\\"10180967717292066\\\",\\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\\"token_uri\\\": \\\"https://accounts.google.com/o/oauth2/token\\\",\\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\\"client_x509_cert_url\\\": \\\"https://www.googleapis.com/robot/v1/metadata/x509/my-email-kms-0%40my-project-common-0.iam.gserviceaccount.com\\\"}\",\n    },\n    projectId: \"\u003cPROJECT-ID\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.EncryptionAtRest(\"test\",\n    aws_kms={\n        \"access_key_id\": \"AKIAIOSFODNN7EXAMPLE\",\n        \"customer_master_key_id\": \"030gce02-586d-48d2-a966-05ea954fde0g\",\n        \"enabled\": True,\n        \"region\": \"US_EAST_1\",\n        \"secret_access_key\": \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n    },\n    azure_key_vault={\n        \"azure_environment\": \"AZURE\",\n        \"client_id\": \"g54f9e2-89e3-40fd-8188-EXAMPLEID\",\n        \"enabled\": True,\n        \"key_identifier\": \"https://EXAMPLEKeyVault.vault.azure.net/keys/EXAMPLEKey/d891821e3d364e9eb88fbd3d11807b86\",\n        \"key_vault_name\": \"EXAMPLEKeyVault\",\n        \"resource_group_name\": \"ExampleRGName\",\n        \"secret\": \"EXAMPLESECRET\",\n        \"subscription_id\": \"0ec944e3-g725-44f9-a147-EXAMPLEID\",\n        \"tenant_id\": \"e8e4b6ba-ff32-4c88-a9af-EXAMPLEID\",\n    },\n    google_cloud_kms={\n        \"enabled\": True,\n        \"key_version_resource_id\": \"projects/my-project-common-0/locations/us-east4/keyRings/my-key-ring-0/cryptoKeys/my-key-0/cryptoKeyVersions/1\",\n        \"service_account_key\": \"{\\\"type\\\": \\\"service_account\\\",\\\"project_id\\\": \\\"my-project-common-0\\\",\\\"private_key_id\\\": \\\"e120598ea4f88249469fcdd75a9a785c1bb3\\\",\\\"private_key\\\": \\\"-----BEGIN PRIVATE KEY-----\\\\nMIIEuwIBA(truncated)SfecnS0mT94D9\\\\n-----END PRIVATE KEY-----\\\\n\\\",\\\"client_email\\\": \\\"my-email-kms-0@my-project-common-0.iam.gserviceaccount.com\\\",\\\"client_id\\\": \\\"10180967717292066\\\",\\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\\"token_uri\\\": \\\"https://accounts.google.com/o/oauth2/token\\\",\\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\\"client_x509_cert_url\\\": \\\"https://www.googleapis.com/robot/v1/metadata/x509/my-email-kms-0%40my-project-common-0.iam.gserviceaccount.com\\\"}\",\n    },\n    project_id=\"\u003cPROJECT-ID\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.EncryptionAtRest(\"test\", new Mongodbatlas.EncryptionAtRestArgs\n        {\n            AwsKms = new Mongodbatlas.Inputs.EncryptionAtRestAwsKmsArgs\n            {\n                Access_key_id = \"AKIAIOSFODNN7EXAMPLE\",\n                Customer_master_key_id = \"030gce02-586d-48d2-a966-05ea954fde0g\",\n                Enabled = true,\n                Region = \"US_EAST_1\",\n                Secret_access_key = \"wJalrXUtnFEMI/K7MDENG/bPxRfiCYEXAMPLEKEY\",\n            },\n            AzureKeyVault = new Mongodbatlas.Inputs.EncryptionAtRestAzureKeyVaultArgs\n            {\n                Azure_environment = \"AZURE\",\n                Client_id = \"g54f9e2-89e3-40fd-8188-EXAMPLEID\",\n                Enabled = true,\n                Key_identifier = \"https://EXAMPLEKeyVault.vault.azure.net/keys/EXAMPLEKey/d891821e3d364e9eb88fbd3d11807b86\",\n                Key_vault_name = \"EXAMPLEKeyVault\",\n                Resource_group_name = \"ExampleRGName\",\n                Secret = \"EXAMPLESECRET\",\n                Subscription_id = \"0ec944e3-g725-44f9-a147-EXAMPLEID\",\n                Tenant_id = \"e8e4b6ba-ff32-4c88-a9af-EXAMPLEID\",\n            },\n            GoogleCloudKms = new Mongodbatlas.Inputs.EncryptionAtRestGoogleCloudKmsArgs\n            {\n                Enabled = true,\n                Key_version_resource_id = \"projects/my-project-common-0/locations/us-east4/keyRings/my-key-ring-0/cryptoKeys/my-key-0/cryptoKeyVersions/1\",\n                Service_account_key = \"{\\\"type\\\": \\\"service_account\\\",\\\"project_id\\\": \\\"my-project-common-0\\\",\\\"private_key_id\\\": \\\"e120598ea4f88249469fcdd75a9a785c1bb3\\\",\\\"private_key\\\": \\\"-----BEGIN PRIVATE KEY-----\\\\nMIIEuwIBA(truncated)SfecnS0mT94D9\\\\n-----END PRIVATE KEY-----\\\\n\\\",\\\"client_email\\\": \\\"my-email-kms-0@my-project-common-0.iam.gserviceaccount.com\\\",\\\"client_id\\\": \\\"10180967717292066\\\",\\\"auth_uri\\\": \\\"https://accounts.google.com/o/oauth2/auth\\\",\\\"token_uri\\\": \\\"https://accounts.google.com/o/oauth2/token\\\",\\\"auth_provider_x509_cert_url\\\": \\\"https://www.googleapis.com/oauth2/v1/certs\\\",\\\"client_x509_cert_url\\\": \\\"https://www.googleapis.com/robot/v1/metadata/x509/my-email-kms-0%40my-project-common-0.iam.gserviceaccount.com\\\"}\",\n            },\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "awsKms": {
                    "$ref": "#/types/mongodbatlas:/EncryptionAtRestAwsKms:EncryptionAtRestAwsKms",
                    "description": "Specifies AWS KMS configuration details and whether Encryption at Rest is enabled for an Atlas project.\n"
                },
                "azureKeyVault": {
                    "$ref": "#/types/mongodbatlas:/EncryptionAtRestAzureKeyVault:EncryptionAtRestAzureKeyVault",
                    "description": "Specifies Azure Key Vault configuration details and whether Encryption at Rest is enabled for an Atlas project.\n"
                },
                "googleCloudKms": {
                    "$ref": "#/types/mongodbatlas:/EncryptionAtRestGoogleCloudKms:EncryptionAtRestGoogleCloudKms",
                    "description": "Specifies GCP KMS configuration details and whether Encryption at Rest is enabled for an Atlas project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique identifier for the project.\n"
                }
            },
            "required": [
                "projectId"
            ],
            "inputProperties": {
                "awsKms": {
                    "$ref": "#/types/mongodbatlas:/EncryptionAtRestAwsKms:EncryptionAtRestAwsKms",
                    "description": "Specifies AWS KMS configuration details and whether Encryption at Rest is enabled for an Atlas project.\n"
                },
                "azureKeyVault": {
                    "$ref": "#/types/mongodbatlas:/EncryptionAtRestAzureKeyVault:EncryptionAtRestAzureKeyVault",
                    "description": "Specifies Azure Key Vault configuration details and whether Encryption at Rest is enabled for an Atlas project.\n"
                },
                "googleCloudKms": {
                    "$ref": "#/types/mongodbatlas:/EncryptionAtRestGoogleCloudKms:EncryptionAtRestGoogleCloudKms",
                    "description": "Specifies GCP KMS configuration details and whether Encryption at Rest is enabled for an Atlas project.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique identifier for the project.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering EncryptionAtRest resources.\n",
                "properties": {
                    "awsKms": {
                        "$ref": "#/types/mongodbatlas:/EncryptionAtRestAwsKms:EncryptionAtRestAwsKms",
                        "description": "Specifies AWS KMS configuration details and whether Encryption at Rest is enabled for an Atlas project.\n"
                    },
                    "azureKeyVault": {
                        "$ref": "#/types/mongodbatlas:/EncryptionAtRestAzureKeyVault:EncryptionAtRestAzureKeyVault",
                        "description": "Specifies Azure Key Vault configuration details and whether Encryption at Rest is enabled for an Atlas project.\n"
                    },
                    "googleCloudKms": {
                        "$ref": "#/types/mongodbatlas:/EncryptionAtRestGoogleCloudKms:EncryptionAtRestGoogleCloudKms",
                        "description": "Specifies GCP KMS configuration details and whether Encryption at Rest is enabled for an Atlas project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier for the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/globalClusterConfig:GlobalClusterConfig": {
            "description": "`mongodbatlas..GlobalClusterConfig` provides a Global Cluster Configuration resource.\n\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n",
            "properties": {
                "clusterName": {
                    "type": "string"
                },
                "customZoneMapping": {
                    "type": "object",
                    "additionalProperties": {
                        "$ref": "pulumi.json#/Any"
                    },
                    "description": "A map of all custom zone mappings defined for the Global Cluster. Atlas automatically maps each location code to the closest geographical zone. Custom zone mappings allow administrators to override these automatic mappings. If your Global Cluster does not have any custom zone mappings, this document is empty.\n"
                },
                "customZoneMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/GlobalClusterConfigCustomZoneMapping:GlobalClusterConfigCustomZoneMapping"
                    },
                    "description": "Each element in the list maps one ISO location code to a zone in your Global Cluster. See Custom Zone Mapping below for more details.\n"
                },
                "managedNamespaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/GlobalClusterConfigManagedNamespace:GlobalClusterConfigManagedNamespace"
                    },
                    "description": "Add a managed namespaces to a Global Cluster. For more information about managed namespaces, see [Global Clusters](https://docs.atlas.mongodb.com/reference/api/global-clusters/). See Managed Namespace below for more details.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to create the database user.\n* `cluster_name - (Required) The name of the Global Cluster.\n"
                }
            },
            "required": [
                "clusterName",
                "customZoneMapping",
                "managedNamespaces",
                "projectId"
            ],
            "inputProperties": {
                "clusterName": {
                    "type": "string"
                },
                "customZoneMappings": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/GlobalClusterConfigCustomZoneMapping:GlobalClusterConfigCustomZoneMapping"
                    },
                    "description": "Each element in the list maps one ISO location code to a zone in your Global Cluster. See Custom Zone Mapping below for more details.\n"
                },
                "managedNamespaces": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/GlobalClusterConfigManagedNamespace:GlobalClusterConfigManagedNamespace"
                    },
                    "description": "Add a managed namespaces to a Global Cluster. For more information about managed namespaces, see [Global Clusters](https://docs.atlas.mongodb.com/reference/api/global-clusters/). See Managed Namespace below for more details.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to create the database user.\n* `cluster_name - (Required) The name of the Global Cluster.\n"
                }
            },
            "requiredInputs": [
                "clusterName",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering GlobalClusterConfig resources.\n",
                "properties": {
                    "clusterName": {
                        "type": "string"
                    },
                    "customZoneMapping": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A map of all custom zone mappings defined for the Global Cluster. Atlas automatically maps each location code to the closest geographical zone. Custom zone mappings allow administrators to override these automatic mappings. If your Global Cluster does not have any custom zone mappings, this document is empty.\n"
                    },
                    "customZoneMappings": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/GlobalClusterConfigCustomZoneMapping:GlobalClusterConfigCustomZoneMapping"
                        },
                        "description": "Each element in the list maps one ISO location code to a zone in your Global Cluster. See Custom Zone Mapping below for more details.\n"
                    },
                    "managedNamespaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/GlobalClusterConfigManagedNamespace:GlobalClusterConfigManagedNamespace"
                        },
                        "description": "Add a managed namespaces to a Global Cluster. For more information about managed namespaces, see [Global Clusters](https://docs.atlas.mongodb.com/reference/api/global-clusters/). See Managed Namespace below for more details.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n* `cluster_name - (Required) The name of the Global Cluster.\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/maintenanceWindow:MaintenanceWindow": {
            "description": "`mongodbatlas..MaintenanceWindow` provides a resource to schedule a maintenance window for your MongoDB Atlas Project and/or set to defer a scheduled maintenance up to two times.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n## Maintenance Window Considerations:\n\n- Urgent Maintenance Activities Cannot Wait: Urgent maintenance activities such as security patches cannot wait for your chosen window. Atlas will start those maintenance activities when needed.\n\nOnce maintenance is scheduled for your cluster, you cannot change your maintenance window until the current maintenance efforts have completed.\n- Maintenance Requires Replica Set Elections: Atlas performs maintenance the same way as the manual maintenance procedure. This requires at least one replica set election during the maintenance window per replica set.\n- Maintenance Starts As Close to the Hour As Possible: Maintenance always begins as close to the scheduled hour as possible, but in-progress cluster updates or expected system issues could delay the start time.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.MaintenanceWindow(\"test\", {\n    dayOfWeek: 3,\n    hourOfDay: 4,\n    projectId: \"\u003cyour-project-id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.MaintenanceWindow(\"test\",\n    day_of_week=3,\n    hour_of_day=4,\n    project_id=\"\u003cyour-project-id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.MaintenanceWindow(\"test\", new Mongodbatlas.MaintenanceWindowArgs\n        {\n            DayOfWeek = 3,\n            HourOfDay = 4,\n            ProjectId = \"\u003cyour-project-id\u003e\",\n        });\n    }\n\n}\n```\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.MaintenanceWindow(\"test\", {\n    defer: true,\n    projectId: \"\u003cyour-project-id\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.MaintenanceWindow(\"test\",\n    defer=True,\n    project_id=\"\u003cyour-project-id\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.MaintenanceWindow(\"test\", new Mongodbatlas.MaintenanceWindowArgs\n        {\n            Defer = true,\n            ProjectId = \"\u003cyour-project-id\u003e\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "dayOfWeek": {
                    "type": "integer",
                    "description": "Day of the week when you would like the maintenance window to start as a 1-based integer: S=1, M=2, T=3, W=4, T=5, F=6, S=7.\n"
                },
                "defer": {
                    "type": "boolean",
                    "description": "Defer maintenance for the given project for one week.\n"
                },
                "hourOfDay": {
                    "type": "integer",
                    "description": "Hour of the day when you would like the maintenance window to start. This parameter uses the 24-hour clock, where midnight is 0, noon is 12 (Time zone is UTC).\n"
                },
                "numberOfDeferrals": {
                    "type": "integer",
                    "description": "Number of times the current maintenance event for this project has been deferred, you can set a maximum of 2 deferrals.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique identifier of the project for the Maintenance Window.\n"
                },
                "startAsap": {
                    "type": "boolean",
                    "description": "Flag indicating whether project maintenance has been directed to start immediately. If you request that maintenance begin immediately, this field returns true from the time the request was made until the time the maintenance event completes.\n"
                }
            },
            "required": [
                "dayOfWeek",
                "defer",
                "hourOfDay",
                "numberOfDeferrals",
                "projectId",
                "startAsap"
            ],
            "inputProperties": {
                "dayOfWeek": {
                    "type": "integer",
                    "description": "Day of the week when you would like the maintenance window to start as a 1-based integer: S=1, M=2, T=3, W=4, T=5, F=6, S=7.\n"
                },
                "defer": {
                    "type": "boolean",
                    "description": "Defer maintenance for the given project for one week.\n"
                },
                "hourOfDay": {
                    "type": "integer",
                    "description": "Hour of the day when you would like the maintenance window to start. This parameter uses the 24-hour clock, where midnight is 0, noon is 12 (Time zone is UTC).\n"
                },
                "numberOfDeferrals": {
                    "type": "integer",
                    "description": "Number of times the current maintenance event for this project has been deferred, you can set a maximum of 2 deferrals.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique identifier of the project for the Maintenance Window.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering MaintenanceWindow resources.\n",
                "properties": {
                    "dayOfWeek": {
                        "type": "integer",
                        "description": "Day of the week when you would like the maintenance window to start as a 1-based integer: S=1, M=2, T=3, W=4, T=5, F=6, S=7.\n"
                    },
                    "defer": {
                        "type": "boolean",
                        "description": "Defer maintenance for the given project for one week.\n"
                    },
                    "hourOfDay": {
                        "type": "integer",
                        "description": "Hour of the day when you would like the maintenance window to start. This parameter uses the 24-hour clock, where midnight is 0, noon is 12 (Time zone is UTC).\n"
                    },
                    "numberOfDeferrals": {
                        "type": "integer",
                        "description": "Number of times the current maintenance event for this project has been deferred, you can set a maximum of 2 deferrals.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier of the project for the Maintenance Window.\n"
                    },
                    "startAsap": {
                        "type": "boolean",
                        "description": "Flag indicating whether project maintenance has been directed to start immediately. If you request that maintenance begin immediately, this field returns true from the time the request was made until the time the maintenance event completes.\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/networkContainer:NetworkContainer": {
            "description": "`mongodbatlas..NetworkContainer` provides a Network Peering Container resource. The resource lets you create, edit and delete network peering containers. The resource requires your Project ID.  Each cloud provider requires slightly different attributes so read the argument reference carefully. \n\n Network peering container is a general term used to describe any cloud providers' VPC/VNet concept.  Containers only need to be created if the peering connection to the cloud provider will be created before the first cluster that requires the container.  If the cluster has been/will be created first Atlas automatically creates the required container per the \"containers per cloud provider\" information that follows (in this case you can obtain the container id from the cluster resource attribute `container_id`).\n \nThe following is the maximum number of Network Peering containers per cloud provider:\n\u003cbr\u003e \u0026#8226;  GCP -  One container per project.\n\u003cbr\u003e \u0026#8226;  AWS and Azure - One container per cloud provider region.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.\n\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n### Example with AWS\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.NetworkContainer(\"test\", {\n    atlasCidrBlock: \"10.8.0.0/21\",\n    projectId: \"\u003cYOUR-PROJECT-ID\u003e\",\n    providerName: \"AWS\",\n    regionName: \"US_EAST_1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.NetworkContainer(\"test\",\n    atlas_cidr_block=\"10.8.0.0/21\",\n    project_id=\"\u003cYOUR-PROJECT-ID\u003e\",\n    provider_name=\"AWS\",\n    region_name=\"US_EAST_1\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.NetworkContainer(\"test\", new Mongodbatlas.NetworkContainerArgs\n        {\n            AtlasCidrBlock = \"10.8.0.0/21\",\n            ProjectId = \"\u003cYOUR-PROJECT-ID\u003e\",\n            ProviderName = \"AWS\",\n            RegionName = \"US_EAST_1\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### Example with GCP\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.NetworkContainer(\"test\", {\n    atlasCidrBlock: \"10.8.0.0/21\",\n    projectId: \"\u003cYOUR-PROJECT-ID\u003e\",\n    providerName: \"GCP\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.NetworkContainer(\"test\",\n    atlas_cidr_block=\"10.8.0.0/21\",\n    project_id=\"\u003cYOUR-PROJECT-ID\u003e\",\n    provider_name=\"GCP\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.NetworkContainer(\"test\", new Mongodbatlas.NetworkContainerArgs\n        {\n            AtlasCidrBlock = \"10.8.0.0/21\",\n            ProjectId = \"\u003cYOUR-PROJECT-ID\u003e\",\n            ProviderName = \"GCP\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### Example with Azure\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.NetworkContainer(\"test\", {\n    atlasCidrBlock: \"10.8.0.0/21\",\n    projectId: \"\u003cYOUR-PROJECT-ID\u003e\",\n    providerName: \"AZURE\",\n    region: \"US_EAST_2\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.NetworkContainer(\"test\",\n    atlas_cidr_block=\"10.8.0.0/21\",\n    project_id=\"\u003cYOUR-PROJECT-ID\u003e\",\n    provider_name=\"AZURE\",\n    region=\"US_EAST_2\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.NetworkContainer(\"test\", new Mongodbatlas.NetworkContainerArgs\n        {\n            AtlasCidrBlock = \"10.8.0.0/21\",\n            ProjectId = \"\u003cYOUR-PROJECT-ID\u003e\",\n            ProviderName = \"AZURE\",\n            Region = \"US_EAST_2\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "atlasCidrBlock": {
                    "type": "string",
                    "description": "CIDR block that Atlas uses for the Network Peering containers in your project.  Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3):\n* Lower bound: 10.0.0.0 -\tUpper bound: 10.255.255.255 -\tPrefix: 10/8\n* Lower bound: 172.16.0.0 -\tUpper bound:172.31.255.255 -\tPrefix:\t172.16/12\n* Lower bound: 192.168.0.0 -\tUpper bound:192.168.255.255 -\tPrefix:\t192.168/16\n"
                },
                "azureSubscriptionId": {
                    "type": "string",
                    "description": "Unique identifier of the Azure subscription in which the VNet resides.\n"
                },
                "containerId": {
                    "type": "string",
                    "description": "The Network Peering Container ID.\n"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "Unique identifier of the GCP project in which the network peer resides. Returns null. This value is populated once you create a new network peering connection with the network peering resource.\n"
                },
                "networkName": {
                    "type": "string",
                    "description": "Unique identifier of the Network Peering connection in the Atlas project. Returns null. This value is populated once you create a new network peering connection with the network peering resource.\n**AZURE ONLY:**\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier for the Atlas project for this Network Peering Container.\n"
                },
                "providerName": {
                    "type": "string",
                    "description": "Cloud provider for this Network Peering connection.  Accepted values are GCP, AWS, AZURE. If omitted, Atlas sets this parameter to AWS.\n"
                },
                "provisioned": {
                    "type": "boolean",
                    "description": "Indicates whether the project has Network Peering connections deployed in the container.\n**AWS ONLY:**\n"
                },
                "region": {
                    "type": "string",
                    "description": "Atlas region where the container resides, see the reference list for Atlas Azure region names [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).\n"
                },
                "regionName": {
                    "type": "string",
                    "description": "The Atlas AWS region name for where this container will exist, see the reference list for Atlas AWS region names [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/).\n"
                },
                "vnetName": {
                    "type": "string",
                    "description": "The name of the Azure VNet. Returns null. This value is populated once you create a new network peering connection with the network peering resource.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Unique identifier of Atlas' AWS VPC.\n**CGP ONLY:**\n"
                }
            },
            "required": [
                "atlasCidrBlock",
                "azureSubscriptionId",
                "containerId",
                "gcpProjectId",
                "networkName",
                "projectId",
                "provisioned",
                "region",
                "regionName",
                "vnetName",
                "vpcId"
            ],
            "inputProperties": {
                "atlasCidrBlock": {
                    "type": "string",
                    "description": "CIDR block that Atlas uses for the Network Peering containers in your project.  Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3):\n* Lower bound: 10.0.0.0 -\tUpper bound: 10.255.255.255 -\tPrefix: 10/8\n* Lower bound: 172.16.0.0 -\tUpper bound:172.31.255.255 -\tPrefix:\t172.16/12\n* Lower bound: 192.168.0.0 -\tUpper bound:192.168.255.255 -\tPrefix:\t192.168/16\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier for the Atlas project for this Network Peering Container.\n"
                },
                "providerName": {
                    "type": "string",
                    "description": "Cloud provider for this Network Peering connection.  Accepted values are GCP, AWS, AZURE. If omitted, Atlas sets this parameter to AWS.\n"
                },
                "region": {
                    "type": "string",
                    "description": "Atlas region where the container resides, see the reference list for Atlas Azure region names [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).\n"
                },
                "regionName": {
                    "type": "string",
                    "description": "The Atlas AWS region name for where this container will exist, see the reference list for Atlas AWS region names [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/).\n"
                }
            },
            "requiredInputs": [
                "atlasCidrBlock",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkContainer resources.\n",
                "properties": {
                    "atlasCidrBlock": {
                        "type": "string",
                        "description": "CIDR block that Atlas uses for the Network Peering containers in your project.  Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3):\n* Lower bound: 10.0.0.0 -\tUpper bound: 10.255.255.255 -\tPrefix: 10/8\n* Lower bound: 172.16.0.0 -\tUpper bound:172.31.255.255 -\tPrefix:\t172.16/12\n* Lower bound: 192.168.0.0 -\tUpper bound:192.168.255.255 -\tPrefix:\t192.168/16\n"
                    },
                    "azureSubscriptionId": {
                        "type": "string",
                        "description": "Unique identifier of the Azure subscription in which the VNet resides.\n"
                    },
                    "containerId": {
                        "type": "string",
                        "description": "The Network Peering Container ID.\n"
                    },
                    "gcpProjectId": {
                        "type": "string",
                        "description": "Unique identifier of the GCP project in which the network peer resides. Returns null. This value is populated once you create a new network peering connection with the network peering resource.\n"
                    },
                    "networkName": {
                        "type": "string",
                        "description": "Unique identifier of the Network Peering connection in the Atlas project. Returns null. This value is populated once you create a new network peering connection with the network peering resource.\n**AZURE ONLY:**\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier for the Atlas project for this Network Peering Container.\n"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "Cloud provider for this Network Peering connection.  Accepted values are GCP, AWS, AZURE. If omitted, Atlas sets this parameter to AWS.\n"
                    },
                    "provisioned": {
                        "type": "boolean",
                        "description": "Indicates whether the project has Network Peering connections deployed in the container.\n**AWS ONLY:**\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "Atlas region where the container resides, see the reference list for Atlas Azure region names [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).\n"
                    },
                    "regionName": {
                        "type": "string",
                        "description": "The Atlas AWS region name for where this container will exist, see the reference list for Atlas AWS region names [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/).\n"
                    },
                    "vnetName": {
                        "type": "string",
                        "description": "The name of the Azure VNet. Returns null. This value is populated once you create a new network peering connection with the network peering resource.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "Unique identifier of Atlas' AWS VPC.\n**CGP ONLY:**\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/networkPeering:NetworkPeering": {
            "description": "`mongodbatlas..NetworkPeering` provides a Network Peering Connection resource. The resource lets you create, edit and delete network peering connections. The resource requires your Project ID.  \n\nEnsure you have first created a network container if it is required for your configuration.  See the network_container resource documentation to determine if you need a network container first.  Examples for creating both container and peering resource are shown below as well as examples for creating the peering connection only.\n\n\u003e **GCP AND AZURE ONLY:** Connect via Peering Only mode is deprecated, so no longer needed.  See [disable Peering Only mode](https://docs.atlas.mongodb.com/reference/faq/connection-changes/#disable-peering-mode) for details and `private_ip_mode` resource to disable.\n\n\u003e **AZURE ONLY:** To create the peering request with an Azure VNET, you must grant Atlas the following permissions on the virtual network.\n    Microsoft.Network/virtualNetworks/virtualNetworkPeerings/read\n    Microsoft.Network/virtualNetworks/virtualNetworkPeerings/write\n    Microsoft.Network/virtualNetworks/virtualNetworkPeerings/delete\n    Microsoft.Network/virtualNetworks/peer/action\nFor more information see https://docs.atlas.mongodb.com/security-vpc-peering/ and https://docs.atlas.mongodb.com/reference/api/vpc-create-peering-connection/\n\n\u003e **Create a Whitelist:** Ensure you whitelist the private IP ranges of the subnets in which your application is hosted in order to connect to your Atlas cluster.  See the project_ip_whitelist resource.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.\n\n\n## Example Usage - Container \u0026 Peering Connection\n\n### Example with AWS\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\n// Container example provided but not always required, \n// see network_container documentation for details. \nconst testNetworkContainer = new mongodbatlas.NetworkContainer(\"testNetworkContainer\", {\n    projectId: local.project_id,\n    atlasCidrBlock: \"10.8.0.0/21\",\n    providerName: \"AWS\",\n    regionName: \"US_EAST_1\",\n});\n// Create the peering connection request\nconst testNetworkPeering = new mongodbatlas.NetworkPeering(\"testNetworkPeering\", {\n    accepterRegionName: \"us-east-1\",\n    projectId: local.project_id,\n    containerId: \"507f1f77bcf86cd799439011\",\n    providerName: \"AWS\",\n    routeTableCidrBlock: \"192.168.0.0/24\",\n    vpcId: \"vpc-abc123abc123\",\n    awsAccountId: \"abc123abc123\",\n});\n// the following assumes an AWS provider is configured\n// Accept the peering connection request\nconst peer = new aws.ec2.VpcPeeringConnectionAccepter(\"peer\", {\n    vpcPeeringConnectionId: testNetworkPeering.connectionId,\n    autoAccept: true,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_mongodbatlas as mongodbatlas\n\n# Container example provided but not always required, \n# see network_container documentation for details. \ntest_network_container = mongodbatlas.NetworkContainer(\"testNetworkContainer\",\n    project_id=local[\"project_id\"],\n    atlas_cidr_block=\"10.8.0.0/21\",\n    provider_name=\"AWS\",\n    region_name=\"US_EAST_1\")\n# Create the peering connection request\ntest_network_peering = mongodbatlas.NetworkPeering(\"testNetworkPeering\",\n    accepter_region_name=\"us-east-1\",\n    project_id=local[\"project_id\"],\n    container_id=\"507f1f77bcf86cd799439011\",\n    provider_name=\"AWS\",\n    route_table_cidr_block=\"192.168.0.0/24\",\n    vpc_id=\"vpc-abc123abc123\",\n    aws_account_id=\"abc123abc123\")\n# the following assumes an AWS provider is configured\n# Accept the peering connection request\npeer = aws.ec2.VpcPeeringConnectionAccepter(\"peer\",\n    vpc_peering_connection_id=test_network_peering.connection_id,\n    auto_accept=True)\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Container example provided but not always required, \n        // see network_container documentation for details. \n        var testNetworkContainer = new Mongodbatlas.NetworkContainer(\"testNetworkContainer\", new Mongodbatlas.NetworkContainerArgs\n        {\n            ProjectId = local.Project_id,\n            AtlasCidrBlock = \"10.8.0.0/21\",\n            ProviderName = \"AWS\",\n            RegionName = \"US_EAST_1\",\n        });\n        // Create the peering connection request\n        var testNetworkPeering = new Mongodbatlas.NetworkPeering(\"testNetworkPeering\", new Mongodbatlas.NetworkPeeringArgs\n        {\n            AccepterRegionName = \"us-east-1\",\n            ProjectId = local.Project_id,\n            ContainerId = \"507f1f77bcf86cd799439011\",\n            ProviderName = \"AWS\",\n            RouteTableCidrBlock = \"192.168.0.0/24\",\n            VpcId = \"vpc-abc123abc123\",\n            AwsAccountId = \"abc123abc123\",\n        });\n        // the following assumes an AWS provider is configured\n        // Accept the peering connection request\n        var peer = new Aws.Ec2.VpcPeeringConnectionAccepter(\"peer\", new Aws.Ec2.VpcPeeringConnectionAccepterArgs\n        {\n            VpcPeeringConnectionId = testNetworkPeering.ConnectionId,\n            AutoAccept = true,\n        });\n    }\n\n}\n```\n\n### Example with GCP\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gcp from \"@pulumi/gcp\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\n// Container example provided but not always required, \n// see network_container documentation for details. \nconst testNetworkContainer = new mongodbatlas.NetworkContainer(\"test\", {\n    atlasCidrBlock: \"10.8.0.0/21\",\n    projectId: local_project_id,\n    providerName: \"GCP\",\n});\n// Create the peering connection request\nconst testNetworkPeering = new mongodbatlas.NetworkPeering(\"test\", {\n    containerId: testNetworkContainer.containerId,\n    gcpProjectId: local_GCP_PROJECT_ID,\n    networkName: \"default\",\n    projectId: local_project_id,\n    providerName: \"GCP\",\n});\n// the following assumes a GCP provider is configured\nconst defaultNetwork = pulumi.output(gcp.compute.getNetwork({\n    name: \"default\",\n}, { async: true }));\n// Create the GCP peer\nconst peering = new gcp.compute.NetworkPeering(\"peering\", {\n    network: defaultNetwork.selfLink,\n    peerNetwork: pulumi.interpolate`https://www.googleapis.com/compute/v1/projects/${testNetworkPeering.atlasGcpProjectId}/global/networks/${testNetworkPeering.atlasVpcName}`,\n});\n// Create the cluster once the peering connection is completed\nconst testCluster = new mongodbatlas.Cluster(\"test\", {\n    autoScalingDiskGbEnabled: true,\n    diskSizeGb: 5,\n    mongoDbMajorVersion: \"4.2\",\n    numShards: 1,\n    projectId: local_project_id,\n    providerInstanceSizeName: \"M10\",\n    // Provider Settings \"block\"\n    providerName: \"GCP\",\n    providerRegionName: \"US_EAST_4\",\n    replicationFactor: 3,\n}, { dependsOn: [peering] });\n```\n```python\nimport pulumi\nimport pulumi_gcp as gcp\nimport pulumi_mongodbatlas as mongodbatlas\n\n# Container example provided but not always required, \n# see network_container documentation for details. \ntest_network_container = mongodbatlas.NetworkContainer(\"testNetworkContainer\",\n    atlas_cidr_block=\"10.8.0.0/21\",\n    project_id=local[\"project_id\"],\n    provider_name=\"GCP\")\n# Create the peering connection request\ntest_network_peering = mongodbatlas.NetworkPeering(\"testNetworkPeering\",\n    container_id=test_network_container.container_id,\n    gcp_project_id=local[\"GCP_PROJECT_ID\"],\n    network_name=\"default\",\n    project_id=local[\"project_id\"],\n    provider_name=\"GCP\")\ndefault = gcp.compute.get_network(name=\"default\")\n# Create the GCP peer\npeering = gcp.compute.NetworkPeering(\"peering\",\n    network=default.self_link,\n    peer_network=pulumi.Output.all(test_network_peering.atlas_gcp_project_id, test_network_peering.atlas_vpc_name).apply(lambda atlas_gcp_project_id, atlas_vpc_name: f\"https://www.googleapis.com/compute/v1/projects/{atlas_gcp_project_id}/global/networks/{atlas_vpc_name}\"))\n# Create the cluster once the peering connection is completed\ntest_cluster = mongodbatlas.Cluster(\"testCluster\",\n    auto_scaling_disk_gb_enabled=True,\n    disk_size_gb=5,\n    mongo_db_major_version=\"4.2\",\n    num_shards=1,\n    project_id=local[\"project_id\"],\n    provider_instance_size_name=\"M10\",\n    provider_name=\"GCP\",\n    provider_region_name=\"US_EAST_4\",\n    replication_factor=3)\n```\n```csharp\nusing Pulumi;\nusing Gcp = Pulumi.Gcp;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Container example provided but not always required, \n        // see network_container documentation for details. \n        var testNetworkContainer = new Mongodbatlas.NetworkContainer(\"testNetworkContainer\", new Mongodbatlas.NetworkContainerArgs\n        {\n            AtlasCidrBlock = \"10.8.0.0/21\",\n            ProjectId = local.Project_id,\n            ProviderName = \"GCP\",\n        });\n        // Create the peering connection request\n        var testNetworkPeering = new Mongodbatlas.NetworkPeering(\"testNetworkPeering\", new Mongodbatlas.NetworkPeeringArgs\n        {\n            ContainerId = testNetworkContainer.ContainerId,\n            GcpProjectId = local.GCP_PROJECT_ID,\n            NetworkName = \"default\",\n            ProjectId = local.Project_id,\n            ProviderName = \"GCP\",\n        });\n        var @default = Output.Create(Gcp.Compute.GetNetwork.InvokeAsync(new Gcp.Compute.GetNetworkArgs\n        {\n            Name = \"default\",\n        }));\n        // Create the GCP peer\n        var peering = new Gcp.Compute.NetworkPeering(\"peering\", new Gcp.Compute.NetworkPeeringArgs\n        {\n            Network = @default.Apply(@default =\u003e @default.SelfLink),\n            PeerNetwork = Output.Tuple(testNetworkPeering.AtlasGcpProjectId, testNetworkPeering.AtlasVpcName).Apply(values =\u003e\n            {\n                var atlasGcpProjectId = values.Item1;\n                var atlasVpcName = values.Item2;\n                return $\"https://www.googleapis.com/compute/v1/projects/{atlasGcpProjectId}/global/networks/{atlasVpcName}\";\n            }),\n        });\n        // Create the cluster once the peering connection is completed\n        var testCluster = new Mongodbatlas.Cluster(\"testCluster\", new Mongodbatlas.ClusterArgs\n        {\n            AutoScalingDiskGbEnabled = true,\n            DiskSizeGb = 5,\n            MongoDbMajorVersion = \"4.2\",\n            NumShards = 1,\n            ProjectId = local.Project_id,\n            ProviderInstanceSizeName = \"M10\",\n            ProviderName = \"GCP\",\n            ProviderRegionName = \"US_EAST_4\",\n            ReplicationFactor = 3,\n        });\n    }\n\n}\n```\n\n### Example with Azure\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\n// Container example provided but not always required, \n// see network_container documentation for details. \nconst testNetworkContainer = new mongodbatlas.NetworkContainer(\"test\", {\n    atlasCidrBlock: \"10.8.0.0/21\",\n    projectId: local_project_id,\n    providerName: \"AZURE\",\n    region: \"US_EAST_2\",\n});\n// Create the peering connection request\nconst testNetworkPeering = new mongodbatlas.NetworkPeering(\"test\", {\n    azureDirectoryId: local_AZURE_DIRECTORY_ID,\n    azureSubscriptionId: local_AZURE_SUBSCRIPTION_ID,\n    containerId: testNetworkContainer.containerId,\n    projectId: local_project_id,\n    providerName: \"AZURE\",\n    resourceGroupName: local_AZURE_RESOURCES_GROUP_NAME,\n    vnetName: local_AZURE_VNET_NAME,\n});\n// Create the cluster once the peering connection is completed\nconst testCluster = new mongodbatlas.Cluster(\"test\", {\n    autoScalingDiskGbEnabled: true,\n    mongoDbMajorVersion: \"4.2\",\n    numShards: 1,\n    projectId: local_project_id,\n    providerDiskTypeName: \"P4\",\n    providerInstanceSizeName: \"M10\",\n    // Provider Settings \"block\"\n    providerName: \"AZURE\",\n    providerRegionName: \"US_EAST_2\",\n    replicationFactor: 3,\n}, { dependsOn: [testNetworkPeering] });\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\n# Container example provided but not always required, \n# see network_container documentation for details. \ntest_network_container = mongodbatlas.NetworkContainer(\"testNetworkContainer\",\n    atlas_cidr_block=\"10.8.0.0/21\",\n    project_id=local[\"project_id\"],\n    provider_name=\"AZURE\",\n    region=\"US_EAST_2\")\n# Create the peering connection request\ntest_network_peering = mongodbatlas.NetworkPeering(\"testNetworkPeering\",\n    azure_directory_id=local[\"AZURE_DIRECTORY_ID\"],\n    azure_subscription_id=local[\"AZURE_SUBSCRIPTION_ID\"],\n    container_id=test_network_container.container_id,\n    project_id=local[\"project_id\"],\n    provider_name=\"AZURE\",\n    resource_group_name=local[\"AZURE_RESOURCES_GROUP_NAME\"],\n    vnet_name=local[\"AZURE_VNET_NAME\"])\n# Create the cluster once the peering connection is completed\ntest_cluster = mongodbatlas.Cluster(\"testCluster\",\n    auto_scaling_disk_gb_enabled=True,\n    mongo_db_major_version=\"4.2\",\n    num_shards=1,\n    project_id=local[\"project_id\"],\n    provider_disk_type_name=\"P4\",\n    provider_instance_size_name=\"M10\",\n    provider_name=\"AZURE\",\n    provider_region_name=\"US_EAST_2\",\n    replication_factor=3)\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Container example provided but not always required, \n        // see network_container documentation for details. \n        var testNetworkContainer = new Mongodbatlas.NetworkContainer(\"testNetworkContainer\", new Mongodbatlas.NetworkContainerArgs\n        {\n            AtlasCidrBlock = \"10.8.0.0/21\",\n            ProjectId = local.Project_id,\n            ProviderName = \"AZURE\",\n            Region = \"US_EAST_2\",\n        });\n        // Create the peering connection request\n        var testNetworkPeering = new Mongodbatlas.NetworkPeering(\"testNetworkPeering\", new Mongodbatlas.NetworkPeeringArgs\n        {\n            AzureDirectoryId = local.AZURE_DIRECTORY_ID,\n            AzureSubscriptionId = local.AZURE_SUBSCRIPTION_ID,\n            ContainerId = testNetworkContainer.ContainerId,\n            ProjectId = local.Project_id,\n            ProviderName = \"AZURE\",\n            ResourceGroupName = local.AZURE_RESOURCES_GROUP_NAME,\n            VnetName = local.AZURE_VNET_NAME,\n        });\n        // Create the cluster once the peering connection is completed\n        var testCluster = new Mongodbatlas.Cluster(\"testCluster\", new Mongodbatlas.ClusterArgs\n        {\n            AutoScalingDiskGbEnabled = true,\n            MongoDbMajorVersion = \"4.2\",\n            NumShards = 1,\n            ProjectId = local.Project_id,\n            ProviderDiskTypeName = \"P4\",\n            ProviderInstanceSizeName = \"M10\",\n            ProviderName = \"AZURE\",\n            ProviderRegionName = \"US_EAST_2\",\n            ReplicationFactor = 3,\n        });\n    }\n\n}\n```\n\n### Example with AWS - Peering Connection Only, Container Exists\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\n// Create an Atlas cluster, this creates a container if one\n// does not yet exist for this AWS region\nconst test = new mongodbatlas.Cluster(\"test\", {\n    projectId: local.project_id,\n    diskSizeGb: 5,\n    replicationFactor: 3,\n    autoScalingDiskGbEnabled: false,\n    mongoDbMajorVersion: \"4.2\",\n    providerName: \"AWS\",\n    providerInstanceSizeName: \"M10\",\n    providerRegionName: \"US_EAST_2\",\n});\n// the following assumes an AWS provider is configured\nconst _default = new aws.ec2.DefaultVpc(\"default\", {tags: {\n    Name: \"Default VPC\",\n}});\n// Create the peering connection request\nconst mongoPeer = new mongodbatlas.NetworkPeering(\"mongoPeer\", {\n    accepterRegionName: \"us-east-2\",\n    projectId: local.project_id,\n    containerId: test.containerId,\n    providerName: \"AWS\",\n    routeTableCidrBlock: \"172.31.0.0/16\",\n    vpcId: _default.id,\n    awsAccountId: local.AWS_ACCOUNT_ID,\n});\n// Accept the connection \nconst awsPeer = new aws.ec2.VpcPeeringConnectionAccepter(\"awsPeer\", {\n    vpcPeeringConnectionId: mongoPeer.connectionId,\n    autoAccept: true,\n    tags: {\n        Side: \"Accepter\",\n    },\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_mongodbatlas as mongodbatlas\n\n# Create an Atlas cluster, this creates a container if one\n# does not yet exist for this AWS region\ntest = mongodbatlas.Cluster(\"test\",\n    project_id=local[\"project_id\"],\n    disk_size_gb=5,\n    replication_factor=3,\n    auto_scaling_disk_gb_enabled=False,\n    mongo_db_major_version=\"4.2\",\n    provider_name=\"AWS\",\n    provider_instance_size_name=\"M10\",\n    provider_region_name=\"US_EAST_2\")\n# the following assumes an AWS provider is configured\ndefault = aws.ec2.DefaultVpc(\"default\", tags={\n    \"Name\": \"Default VPC\",\n})\n# Create the peering connection request\nmongo_peer = mongodbatlas.NetworkPeering(\"mongoPeer\",\n    accepter_region_name=\"us-east-2\",\n    project_id=local[\"project_id\"],\n    container_id=test.container_id,\n    provider_name=\"AWS\",\n    route_table_cidr_block=\"172.31.0.0/16\",\n    vpc_id=default.id,\n    aws_account_id=local[\"AWS_ACCOUNT_ID\"])\n# Accept the connection \naws_peer = aws.ec2.VpcPeeringConnectionAccepter(\"awsPeer\",\n    vpc_peering_connection_id=mongo_peer.connection_id,\n    auto_accept=True,\n    tags={\n        \"Side\": \"Accepter\",\n    })\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create an Atlas cluster, this creates a container if one\n        // does not yet exist for this AWS region\n        var test = new Mongodbatlas.Cluster(\"test\", new Mongodbatlas.ClusterArgs\n        {\n            ProjectId = local.Project_id,\n            DiskSizeGb = 5,\n            ReplicationFactor = 3,\n            AutoScalingDiskGbEnabled = false,\n            MongoDbMajorVersion = \"4.2\",\n            ProviderName = \"AWS\",\n            ProviderInstanceSizeName = \"M10\",\n            ProviderRegionName = \"US_EAST_2\",\n        });\n        // the following assumes an AWS provider is configured\n        var @default = new Aws.Ec2.DefaultVpc(\"default\", new Aws.Ec2.DefaultVpcArgs\n        {\n            Tags = \n            {\n                { \"Name\", \"Default VPC\" },\n            },\n        });\n        // Create the peering connection request\n        var mongoPeer = new Mongodbatlas.NetworkPeering(\"mongoPeer\", new Mongodbatlas.NetworkPeeringArgs\n        {\n            AccepterRegionName = \"us-east-2\",\n            ProjectId = local.Project_id,\n            ContainerId = test.ContainerId,\n            ProviderName = \"AWS\",\n            RouteTableCidrBlock = \"172.31.0.0/16\",\n            VpcId = @default.Id,\n            AwsAccountId = local.AWS_ACCOUNT_ID,\n        });\n        // Accept the connection \n        var awsPeer = new Aws.Ec2.VpcPeeringConnectionAccepter(\"awsPeer\", new Aws.Ec2.VpcPeeringConnectionAccepterArgs\n        {\n            VpcPeeringConnectionId = mongoPeer.ConnectionId,\n            AutoAccept = true,\n            Tags = \n            {\n                { \"Side\", \"Accepter\" },\n            },\n        });\n    }\n\n}\n```\n\n### Example with GCP - Peering Connection Only, Container Exists\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as gcp from \"@pulumi/gcp\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\n// Create an Atlas cluster, this creates a container if one\n// does not yet exist for this GCP \nconst testCluster = new mongodbatlas.Cluster(\"testCluster\", {\n    projectId: local.project_id,\n    numShards: 1,\n    diskSizeGb: 5,\n    replicationFactor: 3,\n    autoScalingDiskGbEnabled: true,\n    mongoDbMajorVersion: \"4.2\",\n    providerName: \"GCP\",\n    providerInstanceSizeName: \"M10\",\n    providerRegionName: \"US_EAST_2\",\n});\n// Create the peering connection request\nconst testNetworkPeering = new mongodbatlas.NetworkPeering(\"testNetworkPeering\", {\n    projectId: local.project_id,\n    atlasCidrBlock: \"192.168.0.0/18\",\n    containerId: testCluster.containerId,\n    providerName: \"GCP\",\n    gcpProjectId: local.GCP_PROJECT_ID,\n    networkName: \"default\",\n});\nconst default = gcp.compute.getNetwork({\n    name: \"default\",\n});\n// Create the GCP peer\nconst peering = new gcp.compute.NetworkPeering(\"peering\", {\n    network: _default.then(_default =\u003e _default.selfLink),\n    peerNetwork: pulumi.interpolate`https://www.googleapis.com/compute/v1/projects/${testNetworkPeering.atlasGcpProjectId}/global/networks/${testNetworkPeering.atlasVpcName}`,\n});\n```\n```python\nimport pulumi\nimport pulumi_gcp as gcp\nimport pulumi_mongodbatlas as mongodbatlas\n\n# Create an Atlas cluster, this creates a container if one\n# does not yet exist for this GCP \ntest_cluster = mongodbatlas.Cluster(\"testCluster\",\n    project_id=local[\"project_id\"],\n    num_shards=1,\n    disk_size_gb=5,\n    replication_factor=3,\n    auto_scaling_disk_gb_enabled=True,\n    mongo_db_major_version=\"4.2\",\n    provider_name=\"GCP\",\n    provider_instance_size_name=\"M10\",\n    provider_region_name=\"US_EAST_2\")\n# Create the peering connection request\ntest_network_peering = mongodbatlas.NetworkPeering(\"testNetworkPeering\",\n    project_id=local[\"project_id\"],\n    atlas_cidr_block=\"192.168.0.0/18\",\n    container_id=test_cluster.container_id,\n    provider_name=\"GCP\",\n    gcp_project_id=local[\"GCP_PROJECT_ID\"],\n    network_name=\"default\")\ndefault = gcp.compute.get_network(name=\"default\")\n# Create the GCP peer\npeering = gcp.compute.NetworkPeering(\"peering\",\n    network=default.self_link,\n    peer_network=pulumi.Output.all(test_network_peering.atlas_gcp_project_id, test_network_peering.atlas_vpc_name).apply(lambda atlas_gcp_project_id, atlas_vpc_name: f\"https://www.googleapis.com/compute/v1/projects/{atlas_gcp_project_id}/global/networks/{atlas_vpc_name}\"))\n```\n```csharp\nusing Pulumi;\nusing Gcp = Pulumi.Gcp;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Create an Atlas cluster, this creates a container if one\n        // does not yet exist for this GCP \n        var testCluster = new Mongodbatlas.Cluster(\"testCluster\", new Mongodbatlas.ClusterArgs\n        {\n            ProjectId = local.Project_id,\n            NumShards = 1,\n            DiskSizeGb = 5,\n            ReplicationFactor = 3,\n            AutoScalingDiskGbEnabled = true,\n            MongoDbMajorVersion = \"4.2\",\n            ProviderName = \"GCP\",\n            ProviderInstanceSizeName = \"M10\",\n            ProviderRegionName = \"US_EAST_2\",\n        });\n        // Create the peering connection request\n        var testNetworkPeering = new Mongodbatlas.NetworkPeering(\"testNetworkPeering\", new Mongodbatlas.NetworkPeeringArgs\n        {\n            ProjectId = local.Project_id,\n            AtlasCidrBlock = \"192.168.0.0/18\",\n            ContainerId = testCluster.ContainerId,\n            ProviderName = \"GCP\",\n            GcpProjectId = local.GCP_PROJECT_ID,\n            NetworkName = \"default\",\n        });\n        var @default = Output.Create(Gcp.Compute.GetNetwork.InvokeAsync(new Gcp.Compute.GetNetworkArgs\n        {\n            Name = \"default\",\n        }));\n        // Create the GCP peer\n        var peering = new Gcp.Compute.NetworkPeering(\"peering\", new Gcp.Compute.NetworkPeeringArgs\n        {\n            Network = @default.Apply(@default =\u003e @default.SelfLink),\n            PeerNetwork = Output.Tuple(testNetworkPeering.AtlasGcpProjectId, testNetworkPeering.AtlasVpcName).Apply(values =\u003e\n            {\n                var atlasGcpProjectId = values.Item1;\n                var atlasVpcName = values.Item2;\n                return $\"https://www.googleapis.com/compute/v1/projects/{atlasGcpProjectId}/global/networks/{atlasVpcName}\";\n            }),\n        });\n    }\n\n}\n```\n\n### Example with Azure - Peering Connection Only, Container Exists\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\n// Ensure you have created the required Azure service principal first, see\n// see https://docs.atlas.mongodb.com/security-vpc-peering/\n// Create an Atlas cluster, this creates a container if one\n// does not yet exist for this AZURE region\nconst testCluster = new mongodbatlas.Cluster(\"testCluster\", {\n    projectId: local.project_id,\n    replicationFactor: 3,\n    autoScalingDiskGbEnabled: false,\n    mongoDbMajorVersion: \"4.2\",\n    providerName: \"AZURE\",\n    providerInstanceSizeName: \"M10\",\n    providerRegionName: \"US_EAST_2\",\n});\n// Create the peering connection request\nconst testNetworkPeering = new mongodbatlas.NetworkPeering(\"testNetworkPeering\", {\n    projectId: local.project_id,\n    containerId: testCluster.containerId,\n    providerName: \"AZURE\",\n    azureDirectoryId: local.AZURE_DIRECTORY_ID,\n    azureSubscriptionId: local.AZURE_SUBCRIPTION_ID,\n    resourceGroupName: local.AZURE_RESOURCE_GROUP_NAME,\n    vnetName: local.AZURE_VNET_NAME,\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\n# Ensure you have created the required Azure service principal first, see\n# see https://docs.atlas.mongodb.com/security-vpc-peering/\n# Create an Atlas cluster, this creates a container if one\n# does not yet exist for this AZURE region\ntest_cluster = mongodbatlas.Cluster(\"testCluster\",\n    project_id=local[\"project_id\"],\n    replication_factor=3,\n    auto_scaling_disk_gb_enabled=False,\n    mongo_db_major_version=\"4.2\",\n    provider_name=\"AZURE\",\n    provider_instance_size_name=\"M10\",\n    provider_region_name=\"US_EAST_2\")\n# Create the peering connection request\ntest_network_peering = mongodbatlas.NetworkPeering(\"testNetworkPeering\",\n    project_id=local[\"project_id\"],\n    container_id=test_cluster.container_id,\n    provider_name=\"AZURE\",\n    azure_directory_id=local[\"AZURE_DIRECTORY_ID\"],\n    azure_subscription_id=local[\"AZURE_SUBCRIPTION_ID\"],\n    resource_group_name=local[\"AZURE_RESOURCE_GROUP_NAME\"],\n    vnet_name=local[\"AZURE_VNET_NAME\"])\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        // Ensure you have created the required Azure service principal first, see\n        // see https://docs.atlas.mongodb.com/security-vpc-peering/\n        // Create an Atlas cluster, this creates a container if one\n        // does not yet exist for this AZURE region\n        var testCluster = new Mongodbatlas.Cluster(\"testCluster\", new Mongodbatlas.ClusterArgs\n        {\n            ProjectId = local.Project_id,\n            ReplicationFactor = 3,\n            AutoScalingDiskGbEnabled = false,\n            MongoDbMajorVersion = \"4.2\",\n            ProviderName = \"AZURE\",\n            ProviderInstanceSizeName = \"M10\",\n            ProviderRegionName = \"US_EAST_2\",\n        });\n        // Create the peering connection request\n        var testNetworkPeering = new Mongodbatlas.NetworkPeering(\"testNetworkPeering\", new Mongodbatlas.NetworkPeeringArgs\n        {\n            ProjectId = local.Project_id,\n            ContainerId = testCluster.ContainerId,\n            ProviderName = \"AZURE\",\n            AzureDirectoryId = local.AZURE_DIRECTORY_ID,\n            AzureSubscriptionId = local.AZURE_SUBCRIPTION_ID,\n            ResourceGroupName = local.AZURE_RESOURCE_GROUP_NAME,\n            VnetName = local.AZURE_VNET_NAME,\n        });\n    }\n\n}\n```\n",
            "properties": {
                "accepterRegionName": {
                    "type": "string",
                    "description": "Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).\n"
                },
                "atlasCidrBlock": {
                    "type": "string"
                },
                "atlasGcpProjectId": {
                    "type": "string",
                    "description": "The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that it is need to set up the reciprocal connection.\n"
                },
                "atlasId": {
                    "type": "string"
                },
                "atlasVpcName": {
                    "type": "string"
                },
                "awsAccountId": {
                    "type": "string",
                    "description": "AWS Account ID of the owner of the peer VPC.\n"
                },
                "azureDirectoryId": {
                    "type": "string",
                    "description": "Unique identifier for an Azure AD directory.\n"
                },
                "azureSubscriptionId": {
                    "type": "string",
                    "description": "Unique identifier of the Azure subscription in which the VNet resides.\n"
                },
                "connectionId": {
                    "type": "string",
                    "description": "Unique identifier of the Atlas network peering container.\n"
                },
                "containerId": {
                    "type": "string",
                    "description": "Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the network_container resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "When `\"status\" : \"FAILED\"`, Atlas provides a description of the error.\n"
                },
                "errorState": {
                    "type": "string",
                    "description": "Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.\n"
                },
                "errorStateName": {
                    "type": "string",
                    "description": "Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.\n"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "GCP project ID of the owner of the network peer.\n"
                },
                "networkName": {
                    "type": "string",
                    "description": "Name of the network peer to which Atlas connects.\n"
                },
                "peerId": {
                    "type": "string",
                    "description": "Unique identifier of the Atlas network peer.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the MongoDB Atlas project to create the database user.\n"
                },
                "providerName": {
                    "type": "string",
                    "description": "Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).\n"
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "Name of your Azure resource group.\n"
                },
                "routeTableCidrBlock": {
                    "type": "string",
                    "description": "AWS VPC CIDR block or subnet.\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the Atlas network peering connection.  Azure/GCP: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING` GCP Only:  `WAITING_FOR_USER`.\n"
                },
                "statusName": {
                    "type": "string",
                    "description": "(AWS Only) The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.\n"
                },
                "vnetName": {
                    "type": "string",
                    "description": "Name of your Azure VNet.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the network_container resource).\n"
                }
            },
            "required": [
                "accepterRegionName",
                "atlasCidrBlock",
                "atlasGcpProjectId",
                "atlasId",
                "atlasVpcName",
                "awsAccountId",
                "azureDirectoryId",
                "azureSubscriptionId",
                "connectionId",
                "containerId",
                "errorMessage",
                "errorState",
                "errorStateName",
                "gcpProjectId",
                "networkName",
                "peerId",
                "projectId",
                "providerName",
                "resourceGroupName",
                "routeTableCidrBlock",
                "status",
                "statusName",
                "vnetName",
                "vpcId"
            ],
            "inputProperties": {
                "accepterRegionName": {
                    "type": "string",
                    "description": "Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).\n"
                },
                "atlasCidrBlock": {
                    "type": "string"
                },
                "atlasGcpProjectId": {
                    "type": "string",
                    "description": "The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that it is need to set up the reciprocal connection.\n"
                },
                "atlasVpcName": {
                    "type": "string"
                },
                "awsAccountId": {
                    "type": "string",
                    "description": "AWS Account ID of the owner of the peer VPC.\n"
                },
                "azureDirectoryId": {
                    "type": "string",
                    "description": "Unique identifier for an Azure AD directory.\n"
                },
                "azureSubscriptionId": {
                    "type": "string",
                    "description": "Unique identifier of the Azure subscription in which the VNet resides.\n"
                },
                "containerId": {
                    "type": "string",
                    "description": "Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the network_container resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.\n"
                },
                "gcpProjectId": {
                    "type": "string",
                    "description": "GCP project ID of the owner of the network peer.\n"
                },
                "networkName": {
                    "type": "string",
                    "description": "Name of the network peer to which Atlas connects.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the MongoDB Atlas project to create the database user.\n"
                },
                "providerName": {
                    "type": "string",
                    "description": "Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).\n"
                },
                "resourceGroupName": {
                    "type": "string",
                    "description": "Name of your Azure resource group.\n"
                },
                "routeTableCidrBlock": {
                    "type": "string",
                    "description": "AWS VPC CIDR block or subnet.\n"
                },
                "vnetName": {
                    "type": "string",
                    "description": "Name of your Azure VNet.\n"
                },
                "vpcId": {
                    "type": "string",
                    "description": "Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the network_container resource).\n"
                }
            },
            "requiredInputs": [
                "containerId",
                "projectId",
                "providerName"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering NetworkPeering resources.\n",
                "properties": {
                    "accepterRegionName": {
                        "type": "string",
                        "description": "Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).\n"
                    },
                    "atlasCidrBlock": {
                        "type": "string"
                    },
                    "atlasGcpProjectId": {
                        "type": "string",
                        "description": "The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that it is need to set up the reciprocal connection.\n"
                    },
                    "atlasId": {
                        "type": "string"
                    },
                    "atlasVpcName": {
                        "type": "string"
                    },
                    "awsAccountId": {
                        "type": "string",
                        "description": "AWS Account ID of the owner of the peer VPC.\n"
                    },
                    "azureDirectoryId": {
                        "type": "string",
                        "description": "Unique identifier for an Azure AD directory.\n"
                    },
                    "azureSubscriptionId": {
                        "type": "string",
                        "description": "Unique identifier of the Azure subscription in which the VNet resides.\n"
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "Unique identifier of the Atlas network peering container.\n"
                    },
                    "containerId": {
                        "type": "string",
                        "description": "Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the network_container resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.\n"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "When `\"status\" : \"FAILED\"`, Atlas provides a description of the error.\n"
                    },
                    "errorState": {
                        "type": "string",
                        "description": "Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.\n"
                    },
                    "errorStateName": {
                        "type": "string",
                        "description": "Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.\n"
                    },
                    "gcpProjectId": {
                        "type": "string",
                        "description": "GCP project ID of the owner of the network peer.\n"
                    },
                    "networkName": {
                        "type": "string",
                        "description": "Name of the network peer to which Atlas connects.\n"
                    },
                    "peerId": {
                        "type": "string",
                        "description": "Unique identifier of the Atlas network peer.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the MongoDB Atlas project to create the database user.\n"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).\n"
                    },
                    "resourceGroupName": {
                        "type": "string",
                        "description": "Name of your Azure resource group.\n"
                    },
                    "routeTableCidrBlock": {
                        "type": "string",
                        "description": "AWS VPC CIDR block or subnet.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Atlas network peering connection.  Azure/GCP: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING` GCP Only:  `WAITING_FOR_USER`.\n"
                    },
                    "statusName": {
                        "type": "string",
                        "description": "(AWS Only) The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.\n"
                    },
                    "vnetName": {
                        "type": "string",
                        "description": "Name of your Azure VNet.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the network_container resource).\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/privateEndpoint:PrivateEndpoint": {
            "description": "`mongodbatlas..PrivateEndpoint` provides a Private Endpoint resource. This represents a Private Endpoint Connection that can be created in an Atlas project.\n\n\u003e **IMPORTANT:**You must have one of the following roles to successfully handle the resource:\n  * Organization Owner\n  * Project Owner\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.PrivateEndpoint(\"test\", {\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    providerName: \"AWS\",\n    region: \"us-east-1\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.PrivateEndpoint(\"test\",\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    provider_name=\"AWS\",\n    region=\"us-east-1\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.PrivateEndpoint(\"test\", new Mongodbatlas.PrivateEndpointArgs\n        {\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            ProviderName = \"AWS\",\n            Region = \"us-east-1\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "endpointServiceName": {
                    "type": "string",
                    "description": "Name of the PrivateLink endpoint service in AWS. Returns null while the endpoint service is being created.\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "Error message pertaining to the AWS PrivateLink connection. Returns null if there are no errors.\n"
                },
                "interfaceEndpoints": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "Unique identifiers of the interface endpoints in your VPC that you added to the AWS PrivateLink connection.\n"
                },
                "privateLinkId": {
                    "type": "string",
                    "description": "Unique identifier of the AWS PrivateLink connection.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Required \tUnique identifier for the project.\n"
                },
                "providerName": {
                    "type": "string"
                },
                "region": {
                    "type": "string",
                    "description": "Cloud provider region in which you want to create the private endpoint connection.\nAccepted values are:\n* `us-east-1`\n* `us-east-2`\n* `us-west-1`\n* `us-west-2`\n* `ca-central-1`\n* `sa-east-1`\n* `eu-north-1`\n* `eu-west-1`\n* `eu-west-2`\n* `eu-west-3`\n* `eu-central-1`\n* `me-south-1`\n* `ap-northeast-1`\n* `ap-northeast-2`\n* `ap-south-1`\n* `ap-southeast-1`\n* `ap-southeast-2`\n* `ap-east-1`\n"
                },
                "status": {
                    "type": "string",
                    "description": "Status of the AWS PrivateLink connection.\nReturns one of the following values:\n"
                }
            },
            "required": [
                "endpointServiceName",
                "errorMessage",
                "interfaceEndpoints",
                "privateLinkId",
                "projectId",
                "providerName",
                "region",
                "status"
            ],
            "inputProperties": {
                "projectId": {
                    "type": "string",
                    "description": "Required \tUnique identifier for the project.\n"
                },
                "providerName": {
                    "type": "string"
                },
                "region": {
                    "type": "string",
                    "description": "Cloud provider region in which you want to create the private endpoint connection.\nAccepted values are:\n* `us-east-1`\n* `us-east-2`\n* `us-west-1`\n* `us-west-2`\n* `ca-central-1`\n* `sa-east-1`\n* `eu-north-1`\n* `eu-west-1`\n* `eu-west-2`\n* `eu-west-3`\n* `eu-central-1`\n* `me-south-1`\n* `ap-northeast-1`\n* `ap-northeast-2`\n* `ap-south-1`\n* `ap-southeast-1`\n* `ap-southeast-2`\n* `ap-east-1`\n"
                }
            },
            "requiredInputs": [
                "projectId",
                "providerName",
                "region"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateEndpoint resources.\n",
                "properties": {
                    "endpointServiceName": {
                        "type": "string",
                        "description": "Name of the PrivateLink endpoint service in AWS. Returns null while the endpoint service is being created.\n"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Error message pertaining to the AWS PrivateLink connection. Returns null if there are no errors.\n"
                    },
                    "interfaceEndpoints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Unique identifiers of the interface endpoints in your VPC that you added to the AWS PrivateLink connection.\n"
                    },
                    "privateLinkId": {
                        "type": "string",
                        "description": "Unique identifier of the AWS PrivateLink connection.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Required \tUnique identifier for the project.\n"
                    },
                    "providerName": {
                        "type": "string"
                    },
                    "region": {
                        "type": "string",
                        "description": "Cloud provider region in which you want to create the private endpoint connection.\nAccepted values are:\n* `us-east-1`\n* `us-east-2`\n* `us-west-1`\n* `us-west-2`\n* `ca-central-1`\n* `sa-east-1`\n* `eu-north-1`\n* `eu-west-1`\n* `eu-west-2`\n* `eu-west-3`\n* `eu-central-1`\n* `me-south-1`\n* `ap-northeast-1`\n* `ap-northeast-2`\n* `ap-south-1`\n* `ap-southeast-1`\n* `ap-southeast-2`\n* `ap-east-1`\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the AWS PrivateLink connection.\nReturns one of the following values:\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/privateEndpointInterfaceLink:PrivateEndpointInterfaceLink": {
            "description": "`mongodbatlas..PrivateEndpointInterfaceLink` provides a Private Endpoint Interface Link resource. This represents a Private Endpoint Interface Link, which adds one interface endpoint to a private endpoint connection in an Atlas project.\n\n\u003e **IMPORTANT:**You must have one of the following roles to successfully handle the resource:\n  * Organization Owner\n  * Project Owner\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as aws from \"@pulumi/aws\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testPrivateEndpoint = new mongodbatlas.PrivateEndpoint(\"test\", {\n    projectId: \"\u003cPROJECT_ID\u003e\",\n    providerName: \"AWS\",\n    region: \"us-east-1\",\n});\nconst ptfeService = new aws.ec2.VpcEndpoint(\"ptfe_service\", {\n    securityGroupIds: [\"sg-3f238186\"],\n    serviceName: testPrivateEndpoint.endpointServiceName,\n    subnetIds: [\"subnet-de0406d2\"],\n    vpcEndpointType: \"Interface\",\n    vpcId: \"vpc-7fc0a543\",\n});\nconst testPrivateEndpointInterfaceLink = new mongodbatlas.PrivateEndpointInterfaceLink(\"test\", {\n    interfaceEndpointId: ptfeService.id,\n    privateLinkId: testPrivateEndpoint.privateLinkId,\n    projectId: testPrivateEndpoint.projectId,\n});\n```\n```python\nimport pulumi\nimport pulumi_aws as aws\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest_private_endpoint = mongodbatlas.PrivateEndpoint(\"testPrivateEndpoint\",\n    project_id=\"\u003cPROJECT_ID\u003e\",\n    provider_name=\"AWS\",\n    region=\"us-east-1\")\nptfe_service = aws.ec2.VpcEndpoint(\"ptfeService\",\n    security_group_ids=[\"sg-3f238186\"],\n    service_name=test_private_endpoint.endpoint_service_name,\n    subnet_ids=[\"subnet-de0406d2\"],\n    vpc_endpoint_type=\"Interface\",\n    vpc_id=\"vpc-7fc0a543\")\ntest_private_endpoint_interface_link = mongodbatlas.PrivateEndpointInterfaceLink(\"testPrivateEndpointInterfaceLink\",\n    interface_endpoint_id=ptfe_service.id,\n    private_link_id=test_private_endpoint.private_link_id,\n    project_id=test_private_endpoint.project_id)\n```\n```csharp\nusing Pulumi;\nusing Aws = Pulumi.Aws;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testPrivateEndpoint = new Mongodbatlas.PrivateEndpoint(\"testPrivateEndpoint\", new Mongodbatlas.PrivateEndpointArgs\n        {\n            ProjectId = \"\u003cPROJECT_ID\u003e\",\n            ProviderName = \"AWS\",\n            Region = \"us-east-1\",\n        });\n        var ptfeService = new Aws.Ec2.VpcEndpoint(\"ptfeService\", new Aws.Ec2.VpcEndpointArgs\n        {\n            SecurityGroupIds = \n            {\n                \"sg-3f238186\",\n            },\n            ServiceName = testPrivateEndpoint.EndpointServiceName,\n            SubnetIds = \n            {\n                \"subnet-de0406d2\",\n            },\n            VpcEndpointType = \"Interface\",\n            VpcId = \"vpc-7fc0a543\",\n        });\n        var testPrivateEndpointInterfaceLink = new Mongodbatlas.PrivateEndpointInterfaceLink(\"testPrivateEndpointInterfaceLink\", new Mongodbatlas.PrivateEndpointInterfaceLinkArgs\n        {\n            InterfaceEndpointId = ptfeService.Id,\n            PrivateLinkId = testPrivateEndpoint.PrivateLinkId,\n            ProjectId = testPrivateEndpoint.ProjectId,\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "connectionStatus": {
                    "type": "string",
                    "description": "Status of the interface endpoint.\nReturns one of the following values:\n"
                },
                "deleteRequested": {
                    "type": "boolean",
                    "description": "Indicates if Atlas received a request to remove the interface endpoint from the private endpoint connection.\n"
                },
                "errorMessage": {
                    "type": "string",
                    "description": "Error message pertaining to the interface endpoint. Returns null if there are no errors.\n"
                },
                "interfaceEndpointId": {
                    "type": "string",
                    "description": "Unique identifier of the interface endpoint you created in your VPC with the AWS resource.\n"
                },
                "privateLinkId": {
                    "type": "string",
                    "description": "Unique identifier of the AWS PrivateLink connection which is created by `mongodbatlas..PrivateEndpoint` resource.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier for the project.\n"
                }
            },
            "required": [
                "connectionStatus",
                "deleteRequested",
                "errorMessage",
                "interfaceEndpointId",
                "privateLinkId",
                "projectId"
            ],
            "inputProperties": {
                "interfaceEndpointId": {
                    "type": "string",
                    "description": "Unique identifier of the interface endpoint you created in your VPC with the AWS resource.\n"
                },
                "privateLinkId": {
                    "type": "string",
                    "description": "Unique identifier of the AWS PrivateLink connection which is created by `mongodbatlas..PrivateEndpoint` resource.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Unique identifier for the project.\n"
                }
            },
            "requiredInputs": [
                "interfaceEndpointId",
                "privateLinkId",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateEndpointInterfaceLink resources.\n",
                "properties": {
                    "connectionStatus": {
                        "type": "string",
                        "description": "Status of the interface endpoint.\nReturns one of the following values:\n"
                    },
                    "deleteRequested": {
                        "type": "boolean",
                        "description": "Indicates if Atlas received a request to remove the interface endpoint from the private endpoint connection.\n"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Error message pertaining to the interface endpoint. Returns null if there are no errors.\n"
                    },
                    "interfaceEndpointId": {
                        "type": "string",
                        "description": "Unique identifier of the interface endpoint you created in your VPC with the AWS resource.\n"
                    },
                    "privateLinkId": {
                        "type": "string",
                        "description": "Unique identifier of the AWS PrivateLink connection which is created by `mongodbatlas..PrivateEndpoint` resource.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier for the project.\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/privateIpMode:PrivateIpMode": {
            "description": "`mongodbatlas..PrivateIpMode` provides a Private IP Mode resource. This allows one to disable Connect via Peering Only mode for a MongoDB Atlas Project.\n\n\u003e **Deprecated Feature**: \u003cbr\u003e This feature has been deprecated. Use [Split Horizon connection strings](https://dochub.mongodb.org/core/atlas-horizon-faq) to connect to your cluster. These connection strings allow you to connect using both VPC/VNet Peering and whitelisted public IP addresses. To learn more about support for Split Horizon, see [this FAQ](https://dochub.mongodb.org/core/atlas-horizon-faq). You need this endpoint to [disable Peering Only](https://docs.atlas.mongodb.com/reference/faq/connection-changes/#disable-peering-mode).\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst myPrivateIpMode = new mongodbatlas.PrivateIpMode(\"my_private_ip_mode\", {\n    enabled: false,\n    projectId: \"\u003cYOUR PROJECT ID\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\nmy_private_ip_mode = mongodbatlas.PrivateIpMode(\"myPrivateIpMode\",\n    enabled=False,\n    project_id=\"\u003cYOUR PROJECT ID\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var myPrivateIpMode = new Mongodbatlas.PrivateIpMode(\"myPrivateIpMode\", new Mongodbatlas.PrivateIpModeArgs\n        {\n            Enabled = false,\n            ProjectId = \"\u003cYOUR PROJECT ID\u003e\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether Connect via Peering Only mode is enabled or disabled for an Atlas project\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to enable Only Private IP Mode.\n"
                }
            },
            "required": [
                "enabled",
                "projectId"
            ],
            "inputProperties": {
                "enabled": {
                    "type": "boolean",
                    "description": "Indicates whether Connect via Peering Only mode is enabled or disabled for an Atlas project\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The unique ID for the project to enable Only Private IP Mode.\n"
                }
            },
            "requiredInputs": [
                "enabled",
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering PrivateIpMode resources.\n",
                "properties": {
                    "enabled": {
                        "type": "boolean",
                        "description": "Indicates whether Connect via Peering Only mode is enabled or disabled for an Atlas project\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to enable Only Private IP Mode.\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/project:Project": {
            "description": "`mongodbatlas..Project` provides a Project resource. This allows project to be created.\n\n\u003e **IMPORTANT WARNING:**  Changing the name of an existing Project in your configuration will result the destruction of that Project and related resources (including Clusters) and the re-creation of those resources.  The provider will inform you of the destroyed/created resources before applying so be sure to verify any change to your environment before applying.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.Project(\"test\", {\n    orgId: \"\u003cORG_ID\u003e\",\n    teams: [\n        {\n            roleNames: [\"GROUP_OWNER\"],\n            teamId: \"5e0fa8c99ccf641c722fe645\",\n        },\n        {\n            roleNames: [\n                \"GROUP_READ_ONLY\",\n                \"GROUP_DATA_ACCESS_READ_WRITE\",\n            ],\n            teamId: \"5e1dd7b4f2a30ba80a70cd4rw\",\n        },\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.Project(\"test\",\n    org_id=\"\u003cORG_ID\u003e\",\n    teams=[\n        {\n            \"roleNames\": [\"GROUP_OWNER\"],\n            \"team_id\": \"5e0fa8c99ccf641c722fe645\",\n        },\n        {\n            \"roleNames\": [\n                \"GROUP_READ_ONLY\",\n                \"GROUP_DATA_ACCESS_READ_WRITE\",\n            ],\n            \"team_id\": \"5e1dd7b4f2a30ba80a70cd4rw\",\n        },\n    ])\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.Project(\"test\", new Mongodbatlas.ProjectArgs\n        {\n            OrgId = \"\u003cORG_ID\u003e\",\n            Teams = \n            {\n                new Mongodbatlas.Inputs.ProjectTeamArgs\n                {\n                    RoleNames = \n                    {\n                        \"GROUP_OWNER\",\n                    },\n                    TeamId = \"5e0fa8c99ccf641c722fe645\",\n                },\n                new Mongodbatlas.Inputs.ProjectTeamArgs\n                {\n                    RoleNames = \n                    {\n                        \"GROUP_READ_ONLY\",\n                        \"GROUP_DATA_ACCESS_READ_WRITE\",\n                    },\n                    TeamId = \"5e1dd7b4f2a30ba80a70cd4rw\",\n                },\n            },\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "clusterCount": {
                    "type": "integer",
                    "description": "The number of Atlas clusters deployed in the project..\n"
                },
                "created": {
                    "type": "string",
                    "description": "The ISO-8601-formatted timestamp of when Atlas created the project..\n"
                },
                "name": {
                    "type": "string",
                    "description": "The name of the project you want to create. (Cannot be changed via this Provider after creation.)\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The ID of the organization you want to create the project within.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/ProjectTeam:ProjectTeam"
                    }
                }
            },
            "required": [
                "clusterCount",
                "created",
                "name",
                "orgId"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the project you want to create. (Cannot be changed via this Provider after creation.)\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The ID of the organization you want to create the project within.\n"
                },
                "teams": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/ProjectTeam:ProjectTeam"
                    }
                }
            },
            "requiredInputs": [
                "orgId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Project resources.\n",
                "properties": {
                    "clusterCount": {
                        "type": "integer",
                        "description": "The number of Atlas clusters deployed in the project..\n"
                    },
                    "created": {
                        "type": "string",
                        "description": "The ISO-8601-formatted timestamp of when Atlas created the project..\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project you want to create. (Cannot be changed via this Provider after creation.)\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The ID of the organization you want to create the project within.\n"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/ProjectTeam:ProjectTeam"
                        }
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/projectIpWhitelist:ProjectIpWhitelist": {
            "description": "`mongodbatlas..ProjectIpWhitelist` provides an IP Whitelist entry resource. The whitelist grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n\u003e **IMPORTANT:**\nWhen you remove an entry from the whitelist, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.   \n\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n### Using CIDR Block\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.ProjectIpWhitelist(\"test\", {\n    cidrBlock: \"1.2.3.4/32\",\n    comment: \"cidr block for tf acc testing\",\n    projectId: \"\u003cPROJECT-ID\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.ProjectIpWhitelist(\"test\",\n    cidr_block=\"1.2.3.4/32\",\n    comment=\"cidr block for tf acc testing\",\n    project_id=\"\u003cPROJECT-ID\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.ProjectIpWhitelist(\"test\", new Mongodbatlas.ProjectIpWhitelistArgs\n        {\n            CidrBlock = \"1.2.3.4/32\",\n            Comment = \"cidr block for tf acc testing\",\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### Using IP Address\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.ProjectIpWhitelist(\"test\", {\n    comment: \"ip address for tf acc testing\",\n    ipAddress: \"2.3.4.5\",\n    projectId: \"\u003cPROJECT-ID\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.ProjectIpWhitelist(\"test\",\n    comment=\"ip address for tf acc testing\",\n    ip_address=\"2.3.4.5\",\n    project_id=\"\u003cPROJECT-ID\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.ProjectIpWhitelist(\"test\", new Mongodbatlas.ProjectIpWhitelistArgs\n        {\n            Comment = \"ip address for tf acc testing\",\n            IpAddress = \"2.3.4.5\",\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% example %}}\n### Using an AWS Security Group\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testNetworkContainer = new mongodbatlas.NetworkContainer(\"testNetworkContainer\", {\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    atlasCidrBlock: \"192.168.208.0/21\",\n    providerName: \"AWS\",\n    regionName: \"US_EAST_1\",\n});\nconst testNetworkPeering = new mongodbatlas.NetworkPeering(\"testNetworkPeering\", {\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    containerId: testNetworkContainer.containerId,\n    accepterRegionName: \"us-east-1\",\n    providerName: \"AWS\",\n    routeTableCidrBlock: \"172.31.0.0/16\",\n    vpcId: \"vpc-0d93d6f69f1578bd8\",\n    awsAccountId: \"232589400519\",\n});\nconst testProjectIpWhitelist = new mongodbatlas.ProjectIpWhitelist(\"testProjectIpWhitelist\", {\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    awsSecurityGroup: \"sg-0026348ec11780bd1\",\n    comment: \"TestAcc for awsSecurityGroup\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest_network_container = mongodbatlas.NetworkContainer(\"testNetworkContainer\",\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    atlas_cidr_block=\"192.168.208.0/21\",\n    provider_name=\"AWS\",\n    region_name=\"US_EAST_1\")\ntest_network_peering = mongodbatlas.NetworkPeering(\"testNetworkPeering\",\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    container_id=test_network_container.container_id,\n    accepter_region_name=\"us-east-1\",\n    provider_name=\"AWS\",\n    route_table_cidr_block=\"172.31.0.0/16\",\n    vpc_id=\"vpc-0d93d6f69f1578bd8\",\n    aws_account_id=\"232589400519\")\ntest_project_ip_whitelist = mongodbatlas.ProjectIpWhitelist(\"testProjectIpWhitelist\",\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    aws_security_group=\"sg-0026348ec11780bd1\",\n    comment=\"TestAcc for awsSecurityGroup\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testNetworkContainer = new Mongodbatlas.NetworkContainer(\"testNetworkContainer\", new Mongodbatlas.NetworkContainerArgs\n        {\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            AtlasCidrBlock = \"192.168.208.0/21\",\n            ProviderName = \"AWS\",\n            RegionName = \"US_EAST_1\",\n        });\n        var testNetworkPeering = new Mongodbatlas.NetworkPeering(\"testNetworkPeering\", new Mongodbatlas.NetworkPeeringArgs\n        {\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            ContainerId = testNetworkContainer.ContainerId,\n            AccepterRegionName = \"us-east-1\",\n            ProviderName = \"AWS\",\n            RouteTableCidrBlock = \"172.31.0.0/16\",\n            VpcId = \"vpc-0d93d6f69f1578bd8\",\n            AwsAccountId = \"232589400519\",\n        });\n        var testProjectIpWhitelist = new Mongodbatlas.ProjectIpWhitelist(\"testProjectIpWhitelist\", new Mongodbatlas.ProjectIpWhitelistArgs\n        {\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            AwsSecurityGroup = \"sg-0026348ec11780bd1\",\n            Comment = \"TestAcc for awsSecurityGroup\",\n        });\n    }\n\n}\n```\n\n\u003e **IMPORTANT:** In order to use AWS Security Group(s) VPC Peering must be enabled like above example.\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "awsSecurityGroup": {
                    "type": "string",
                    "description": "ID of the whitelisted AWS security group. Mutually exclusive with `cidr_block` and `ip_address`.\n"
                },
                "cidrBlock": {
                    "type": "string",
                    "description": "Whitelist entry in Classless Inter-Domain Routing (CIDR) notation. Mutually exclusive with `aws_security_group` and `ip_address`.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment to add to the whitelist entry.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Whitelisted IP address. Mutually exclusive with `aws_security_group` and `cidr_block`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to add the whitelist entry.\n"
                }
            },
            "required": [
                "awsSecurityGroup",
                "cidrBlock",
                "comment",
                "ipAddress",
                "projectId"
            ],
            "inputProperties": {
                "awsSecurityGroup": {
                    "type": "string",
                    "description": "ID of the whitelisted AWS security group. Mutually exclusive with `cidr_block` and `ip_address`.\n"
                },
                "cidrBlock": {
                    "type": "string",
                    "description": "Whitelist entry in Classless Inter-Domain Routing (CIDR) notation. Mutually exclusive with `aws_security_group` and `ip_address`.\n"
                },
                "comment": {
                    "type": "string",
                    "description": "Comment to add to the whitelist entry.\n"
                },
                "ipAddress": {
                    "type": "string",
                    "description": "Whitelisted IP address. Mutually exclusive with `aws_security_group` and `cidr_block`.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "The ID of the project in which to add the whitelist entry.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering ProjectIpWhitelist resources.\n",
                "properties": {
                    "awsSecurityGroup": {
                        "type": "string",
                        "description": "ID of the whitelisted AWS security group. Mutually exclusive with `cidr_block` and `ip_address`.\n"
                    },
                    "cidrBlock": {
                        "type": "string",
                        "description": "Whitelist entry in Classless Inter-Domain Routing (CIDR) notation. Mutually exclusive with `aws_security_group` and `ip_address`.\n"
                    },
                    "comment": {
                        "type": "string",
                        "description": "Comment to add to the whitelist entry.\n"
                    },
                    "ipAddress": {
                        "type": "string",
                        "description": "Whitelisted IP address. Mutually exclusive with `aws_security_group` and `cidr_block`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project in which to add the whitelist entry.\n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/team:Team": {
            "description": "`mongodbatlas..Teams` provides a Team resource. The resource lets you create, edit and delete Teams. Also, Teams can be assigned to multiple projects, and team members’ access to the project is determined by the team’s project role.\n\n\u003e **IMPORTANT:** MongoDB Atlas Team limits: max 250 teams in an organization and max 100 teams per project.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\nMongoDB Atlas Team limits: max 250 teams in an organization and max 100 teams per project.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.Teams(\"test\", {\n    orgId: \"\u003cORGANIZATION-ID\u003e\",\n    usernames: [\n        \"user1@email.com\",\n        \"user2@email.com\",\n        \"user3@email.com\",\n    ],\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.Teams(\"test\",\n    org_id=\"\u003cORGANIZATION-ID\u003e\",\n    usernames=[\n        \"user1@email.com\",\n        \"user2@email.com\",\n        \"user3@email.com\",\n    ])\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.Teams(\"test\", new Mongodbatlas.TeamsArgs\n        {\n            OrgId = \"\u003cORGANIZATION-ID\u003e\",\n            Usernames = \n            {\n                \"user1@email.com\",\n                \"user2@email.com\",\n                \"user3@email.com\",\n            },\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "properties": {
                "name": {
                    "type": "string",
                    "description": "The name of the team you want to create.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The unique identifier for the organization you want to associate the team with.\n"
                },
                "teamId": {
                    "type": "string",
                    "description": "The unique identifier for the team.\n"
                },
                "usernames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Atlas usernames (email address). You can only add Atlas users who are part of the organization. Users who have not accepted an invitation to join the organization cannot be added as team members. There is a maximum of 250 Atlas users per team. \n"
                }
            },
            "required": [
                "name",
                "orgId",
                "teamId",
                "usernames"
            ],
            "inputProperties": {
                "name": {
                    "type": "string",
                    "description": "The name of the team you want to create.\n"
                },
                "orgId": {
                    "type": "string",
                    "description": "The unique identifier for the organization you want to associate the team with.\n"
                },
                "usernames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    },
                    "description": "The Atlas usernames (email address). You can only add Atlas users who are part of the organization. Users who have not accepted an invitation to join the organization cannot be added as team members. There is a maximum of 250 Atlas users per team. \n"
                }
            },
            "requiredInputs": [
                "orgId",
                "usernames"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Team resources.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The name of the team you want to create.\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The unique identifier for the organization you want to associate the team with.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The unique identifier for the team.\n"
                    },
                    "usernames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The Atlas usernames (email address). You can only add Atlas users who are part of the organization. Users who have not accepted an invitation to join the organization cannot be added as team members. There is a maximum of 250 Atlas users per team. \n"
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/teams:Teams": {
            "properties": {
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "teamId": {
                    "type": "string"
                },
                "usernames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "required": [
                "name",
                "orgId",
                "teamId",
                "usernames"
            ],
            "inputProperties": {
                "name": {
                    "type": "string"
                },
                "orgId": {
                    "type": "string"
                },
                "usernames": {
                    "type": "array",
                    "items": {
                        "type": "string"
                    }
                }
            },
            "requiredInputs": [
                "orgId",
                "usernames"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering Teams resources.\n",
                "properties": {
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string"
                    },
                    "usernames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object"
            }
        },
        "mongodbatlas:index/x509AuthenticationDatabaseUser:X509AuthenticationDatabaseUser": {
            "description": "`mongodbatlas..X509AuthenticationDatabaseUser` provides a X509 Authentication Database User resource. The mongodbatlas..X509AuthenticationDatabaseUser resource lets you manage MongoDB users who authenticate using X.509 certificates. You can manage these X.509 certificates or let Atlas do it for you.\n\n| Management  | Description  |\n|---|---|\n| Atlas  | Atlas manages your Certificate Authority and can generate certificates for your MongoDB users. No additional X.509 configuration is required.  |\n| Customer  |  You must provide a Certificate Authority and generate certificates for your MongoDB users. |\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n## Example Usages\n\n### Example Usage: Generate an Atlas-managed X.509 certificate for a MongoDB user\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst user = new mongodbatlas.DatabaseUser(\"user\", {\n    databaseName: \"$external\",\n    labels: [{\n        key: \"My Key\",\n        value: \"My Value\",\n    }],\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    roles: [{\n        databaseName: \"admin\",\n        roleName: \"atlasAdmin\",\n    }],\n    username: \"myUsername\",\n    x509Type: \"MANAGED\",\n});\nconst test = new mongodbatlas.X509AuthenticationDatabaseUser(\"test\", {\n    monthsUntilExpiration: 2,\n    projectId: user.projectId,\n    username: user.username,\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\nuser = mongodbatlas.DatabaseUser(\"user\",\n    database_name=\"$$external\",\n    labels=[{\n        \"key\": \"My Key\",\n        \"value\": \"My Value\",\n    }],\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    roles=[{\n        \"database_name\": \"admin\",\n        \"role_name\": \"atlasAdmin\",\n    }],\n    username=\"myUsername\",\n    x509_type=\"MANAGED\")\ntest = mongodbatlas.X509AuthenticationDatabaseUser(\"test\",\n    months_until_expiration=2,\n    project_id=user.project_id,\n    username=user.username)\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new Mongodbatlas.DatabaseUser(\"user\", new Mongodbatlas.DatabaseUserArgs\n        {\n            DatabaseName = \"$$external\",\n            Labels = \n            {\n                new Mongodbatlas.Inputs.DatabaseUserLabelArgs\n                {\n                    Key = \"My Key\",\n                    Value = \"My Value\",\n                },\n            },\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            Roles = \n            {\n                new Mongodbatlas.Inputs.DatabaseUserRoleArgs\n                {\n                    DatabaseName = \"admin\",\n                    RoleName = \"atlasAdmin\",\n                },\n            },\n            Username = \"myUsername\",\n            X509Type = \"MANAGED\",\n        });\n        var test = new Mongodbatlas.X509AuthenticationDatabaseUser(\"test\", new Mongodbatlas.X509AuthenticationDatabaseUserArgs\n        {\n            MonthsUntilExpiration = 2,\n            ProjectId = user.ProjectId,\n            Username = user.Username,\n        });\n    }\n\n}\n```\n\n### Example Usage: Save a customer-managed X.509 configuration for an Atlas project\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst test = new mongodbatlas.X509AuthenticationDatabaseUser(\"test\", {\n    customerX509Cas: `  -----BEGIN CERTIFICATE-----\n  MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC\n  VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl\n  c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG\n  SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy\n  MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF\n  VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV\n  BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp\n  c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\n  iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr\n  cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O\n  Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG\n  SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA\n  7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A\n  iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz\n  -----END CERTIFICATE-----\"\n`,\n    projectId: \"\u003cPROJECT-ID\u003e\",\n});\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest = mongodbatlas.X509AuthenticationDatabaseUser(\"test\",\n    customer_x509_cas=\"\"\"  -----BEGIN CERTIFICATE-----\n  MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC\n  VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl\n  c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG\n  SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy\n  MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF\n  VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV\n  BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp\n  c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\n  iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr\n  cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O\n  Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG\n  SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA\n  7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A\n  iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz\n  -----END CERTIFICATE-----\"\n\n\"\"\",\n    project_id=\"\u003cPROJECT-ID\u003e\")\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var test = new Mongodbatlas.X509AuthenticationDatabaseUser(\"test\", new Mongodbatlas.X509AuthenticationDatabaseUserArgs\n        {\n            CustomerX509Cas = @\"  -----BEGIN CERTIFICATE-----\n  MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC\n  VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl\n  c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG\n  SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy\n  MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF\n  VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV\n  BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp\n  c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\n  iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr\n  cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O\n  Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG\n  SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA\n  7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A\n  iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz\n  -----END CERTIFICATE-----\"\"\n\n\",\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n        });\n    }\n\n}\n```\n",
            "properties": {
                "certificates": {
                    "type": "array",
                    "items": {
                        "$ref": "#/types/mongodbatlas:/X509AuthenticationDatabaseUserCertificate:X509AuthenticationDatabaseUserCertificate"
                    },
                    "description": "Array of objects where each details one unexpired database user certificate.\n"
                },
                "currentCertificate": {
                    "type": "string",
                    "description": "Contains the last X.509 certificate and private key created for a database user.\n"
                },
                "customerX509Cas": {
                    "type": "string",
                    "description": "PEM string containing one or more customer CAs for database user authentication.\n"
                },
                "monthsUntilExpiration": {
                    "type": "integer",
                    "description": "A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Identifier for the Atlas project associated with the X.509 configuration.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the database user to create a certificate for.\n"
                }
            },
            "required": [
                "certificates",
                "currentCertificate",
                "projectId"
            ],
            "inputProperties": {
                "customerX509Cas": {
                    "type": "string",
                    "description": "PEM string containing one or more customer CAs for database user authentication.\n"
                },
                "monthsUntilExpiration": {
                    "type": "integer",
                    "description": "A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.\n"
                },
                "projectId": {
                    "type": "string",
                    "description": "Identifier for the Atlas project associated with the X.509 configuration.\n"
                },
                "username": {
                    "type": "string",
                    "description": "Username of the database user to create a certificate for.\n"
                }
            },
            "requiredInputs": [
                "projectId"
            ],
            "stateInputs": {
                "description": "Input properties used for looking up and filtering X509AuthenticationDatabaseUser resources.\n",
                "properties": {
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/X509AuthenticationDatabaseUserCertificate:X509AuthenticationDatabaseUserCertificate"
                        },
                        "description": "Array of objects where each details one unexpired database user certificate.\n"
                    },
                    "currentCertificate": {
                        "type": "string",
                        "description": "Contains the last X.509 certificate and private key created for a database user.\n"
                    },
                    "customerX509Cas": {
                        "type": "string",
                        "description": "PEM string containing one or more customer CAs for database user authentication.\n"
                    },
                    "monthsUntilExpiration": {
                        "type": "integer",
                        "description": "A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Identifier for the Atlas project associated with the X.509 configuration.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username of the database user to create a certificate for.\n"
                    }
                },
                "type": "object"
            }
        }
    },
    "functions": {
        "mongodbatlas:index/get509AuthenticationDatabaseUser:get509AuthenticationDatabaseUser": {
            "description": "`mongodbatlas..X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n## Example Usages\n\n### Example Usage: Generate an Atlas-managed X.509 certificate for a MongoDB user\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst user = new mongodbatlas.DatabaseUser(\"user\", {\n    databaseName: \"$external\",\n    labels: [{\n        key: \"My Key\",\n        value: \"My Value\",\n    }],\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    roles: [{\n        databaseName: \"admin\",\n        roleName: \"atlasAdmin\",\n    }],\n    username: \"myUsername\",\n    x509Type: \"MANAGED\",\n});\nconst testX509AuthenticationDatabaseUser = new mongodbatlas.X509AuthenticationDatabaseUser(\"test\", {\n    monthsUntilExpiration: 2,\n    projectId: user.projectId,\n    username: user.username,\n});\nconst test509AuthenticationDatabaseUser = pulumi.all([testX509AuthenticationDatabaseUser.projectId, testX509AuthenticationDatabaseUser.username]).apply(([projectId, username]) =\u003e mongodbatlas.get509AuthenticationDatabaseUser({\n    projectId: projectId,\n    username: username,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\nuser = mongodbatlas.DatabaseUser(\"user\",\n    database_name=\"$$external\",\n    labels=[{\n        \"key\": \"My Key\",\n        \"value\": \"My Value\",\n    }],\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    roles=[{\n        \"database_name\": \"admin\",\n        \"role_name\": \"atlasAdmin\",\n    }],\n    username=\"myUsername\",\n    x509_type=\"MANAGED\")\ntest_x509_authentication_database_user = mongodbatlas.X509AuthenticationDatabaseUser(\"testX509AuthenticationDatabaseUser\",\n    months_until_expiration=2,\n    project_id=user.project_id,\n    username=user.username)\ntest509_authentication_database_user = pulumi.Output.all(test_x509_authentication_database_user.project_id, test_x509_authentication_database_user.username).apply(lambda project_id, username: mongodbatlas.get509_authentication_database_user(project_id=project_id,\n    username=username))\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var user = new Mongodbatlas.DatabaseUser(\"user\", new Mongodbatlas.DatabaseUserArgs\n        {\n            DatabaseName = \"$$external\",\n            Labels = \n            {\n                new Mongodbatlas.Inputs.DatabaseUserLabelArgs\n                {\n                    Key = \"My Key\",\n                    Value = \"My Value\",\n                },\n            },\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            Roles = \n            {\n                new Mongodbatlas.Inputs.DatabaseUserRoleArgs\n                {\n                    DatabaseName = \"admin\",\n                    RoleName = \"atlasAdmin\",\n                },\n            },\n            Username = \"myUsername\",\n            X509Type = \"MANAGED\",\n        });\n        var testX509AuthenticationDatabaseUser = new Mongodbatlas.X509AuthenticationDatabaseUser(\"testX509AuthenticationDatabaseUser\", new Mongodbatlas.X509AuthenticationDatabaseUserArgs\n        {\n            MonthsUntilExpiration = 2,\n            ProjectId = user.ProjectId,\n            Username = user.Username,\n        });\n        var test509AuthenticationDatabaseUser = Output.Tuple(testX509AuthenticationDatabaseUser.ProjectId, testX509AuthenticationDatabaseUser.Username).Apply(values =\u003e\n        {\n            var projectId = values.Item1;\n            var username = values.Item2;\n            return Mongodbatlas.Get509AuthenticationDatabaseUser.InvokeAsync(new Mongodbatlas.Get509AuthenticationDatabaseUserArgs\n            {\n                ProjectId = projectId,\n                Username = username,\n            });\n        });\n    }\n\n}\n```\n\n### Example Usage: Save a customer-managed X.509 configuration for an Atlas project\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testX509AuthenticationDatabaseUser = new mongodbatlas.X509AuthenticationDatabaseUser(\"test\", {\n    customerX509Cas: `  -----BEGIN CERTIFICATE-----\n  MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC\n  VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl\n  c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG\n  SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy\n  MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF\n  VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV\n  BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp\n  c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\n  iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr\n  cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O\n  Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG\n  SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA\n  7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A\n  iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz\n  -----END CERTIFICATE-----\"\n`,\n    projectId: \"\u003cPROJECT-ID\u003e\",\n});\nconst test509AuthenticationDatabaseUser = testX509AuthenticationDatabaseUser.projectId.apply(projectId =\u003e mongodbatlas.get509AuthenticationDatabaseUser({\n    projectId: projectId,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest_x509_authentication_database_user = mongodbatlas.X509AuthenticationDatabaseUser(\"testX509AuthenticationDatabaseUser\",\n    customer_x509_cas=\"\"\"  -----BEGIN CERTIFICATE-----\n  MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC\n  VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl\n  c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG\n  SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy\n  MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF\n  VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV\n  BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp\n  c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\n  iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr\n  cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O\n  Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG\n  SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA\n  7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A\n  iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz\n  -----END CERTIFICATE-----\"\n\n\"\"\",\n    project_id=\"\u003cPROJECT-ID\u003e\")\ntest509_authentication_database_user = test_x509_authentication_database_user.project_id.apply(lambda project_id: mongodbatlas.get509_authentication_database_user(project_id=project_id))\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testX509AuthenticationDatabaseUser = new Mongodbatlas.X509AuthenticationDatabaseUser(\"testX509AuthenticationDatabaseUser\", new Mongodbatlas.X509AuthenticationDatabaseUserArgs\n        {\n            CustomerX509Cas = @\"  -----BEGIN CERTIFICATE-----\n  MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC\n  VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl\n  c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG\n  SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy\n  MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF\n  VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV\n  BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp\n  c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB\n  iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr\n  cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O\n  Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG\n  SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA\n  7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A\n  iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz\n  -----END CERTIFICATE-----\"\"\n\n\",\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n        });\n        var test509AuthenticationDatabaseUser = testX509AuthenticationDatabaseUser.ProjectId.Apply(projectId =\u003e Mongodbatlas.Get509AuthenticationDatabaseUser.InvokeAsync(new Mongodbatlas.Get509AuthenticationDatabaseUserArgs\n        {\n            ProjectId = projectId,\n        }));\n    }\n\n}\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking get509AuthenticationDatabaseUser.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "Identifier for the Atlas project associated with the X.509 configuration.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username of the database user to create a certificate for.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by get509AuthenticationDatabaseUser.\n",
                "properties": {
                    "certificates": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/get509AuthenticationDatabaseUserCertificate:get509AuthenticationDatabaseUserCertificate"
                        },
                        "description": "Array of objects where each details one unexpired database user certificate.\n"
                    },
                    "customerX509Cas": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "username": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "certificates",
                    "customerX509Cas",
                    "projectId",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getAlertConfiguration:getAlertConfiguration": {
            "description": "`mongodbatlas..AlertConfiguration` describes an Alert Configuration.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testMongodbatlasAlertConfiguration = new mongodbatlas.AlertConfiguration(\"test\", {\n    enabled: true,\n    eventType: \"OUTSIDE_METRIC_THRESHOLD\",\n    matchers: [{\n        fieldName: \"HOSTNAME_AND_PORT\",\n        operator: \"EQUALS\",\n        value: \"SECONDARY\",\n    }],\n    metricThreshold: {\n        metric_name: \"ASSERT_REGULAR\",\n        mode: \"AVERAGE\",\n        operator: \"LESS_THAN\",\n        threshold: 99,\n        units: \"RAW\",\n    },\n    notifications: [{\n        delayMin: 0,\n        emailEnabled: true,\n        intervalMin: 5,\n        smsEnabled: false,\n        typeName: \"GROUP\",\n    }],\n    projectId: \"\u003cPROJECT-ID\u003e\",\n});\nconst testAlertConfiguration = pulumi.all([testMongodbatlasAlertConfiguration.alertConfigurationId, testMongodbatlasAlertConfiguration.projectId]).apply(([alertConfigurationId, projectId]) =\u003e mongodbatlas.getAlertConfiguration({\n    alertConfigurationId: alertConfigurationId,\n    projectId: projectId,\n}, { async: true }));\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAlertConfiguration.\n",
                "properties": {
                    "alertConfigurationId": {
                        "type": "string",
                        "description": "Unique identifier for the alert configuration.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The ID of the project where the alert configuration will create.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alertConfigurationId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAlertConfiguration.\n",
                "properties": {
                    "alertConfigurationId": {
                        "type": "string"
                    },
                    "created": {
                        "type": "string",
                        "description": "Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "If set to true, the alert configuration is enabled. If enabled is not exported it is set to false.\n"
                    },
                    "eventType": {
                        "type": "string",
                        "description": "The type of event that will trigger an alert.\nAlert type. Possible values:\n- Host\n- `OUTSIDE_METRIC_THRESHOLD`\n- `HOST_RESTARTED`\n- `HOST_UPGRADED`\n- `HOST_NOW_SECONDARY`\n- `HOST_NOW_PRIMARY`\n- Replica set\n- `NO_PRIMARY`\n- `TOO_MANY_ELECTIONS`\nSharded cluster\n- `CLUSTER_MONGOS_IS_MISSING`\n- `User`\n- `JOINED_GROUP`\n- `REMOVED_FROM_GROUP`\n- `USER_ROLES_CHANGED_AUDIT`\n- Project\n- `USERS_AWAITING_APPROVAL`\n- `USERS_WITHOUT_MULTI_FACTOR_AUTH`\n- `GROUP_CREATED`\n- Team\n- `JOINED_TEAM`\n- `REMOVED_FROM_TEAM`\n- Organization\n- `INVITED_TO_ORG`\n- `JOINED_ORG`\n- Data Explorer\n- `DATA_EXPLORER`\n- `DATA_EXPLORER_CRUD`\n- Billing\n- `CREDIT_CARD_ABOUT_TO_EXPIRE`\n- `CHARGE_SUCCEEDED`\n- `INVOICE_CLOSED`\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "matchers": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getAlertConfigurationMatcher:getAlertConfigurationMatcher"
                        }
                    },
                    "metricThreshold": {
                        "$ref": "#/types/mongodbatlas:/getAlertConfigurationMetricThreshold:getAlertConfigurationMetricThreshold"
                    },
                    "notifications": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getAlertConfigurationNotification:getAlertConfigurationNotification"
                        }
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "updated": {
                        "type": "string",
                        "description": "Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "alertConfigurationId",
                    "created",
                    "enabled",
                    "eventType",
                    "matchers",
                    "metricThreshold",
                    "notifications",
                    "projectId",
                    "updated",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getAuditing:getAuditing": {
            "description": "`mongodbatlas..Auditing` describes a Auditing.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testMongodbatlasAuditing = new mongodbatlas.Auditing(\"test\", {\n    auditAuthorizationSuccess: false,\n    auditFilter: \"{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}\",\n    enabled: true,\n    projectId: \"\u003cproject-id\u003e\",\n});\nconst testAuditing = testMongodbatlasAuditing.id.apply(id =\u003e mongodbatlas.getAuditing({\n    projectId: id,\n}, { async: true }));\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getAuditing.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getAuditing.\n",
                "properties": {
                    "auditAuthorizationSuccess": {
                        "type": "boolean",
                        "description": "JSON-formatted audit filter used by the project\n"
                    },
                    "auditFilter": {
                        "type": "string",
                        "description": "Indicates whether the auditing system captures successful authentication attempts for audit filters using the \"atype\" : \"authCheck\" auditing event. For more information, see auditAuthorizationSuccess\n"
                    },
                    "configurationType": {
                        "type": "string",
                        "description": "Denotes the configuration method for the audit filter. Possible values are: NONE - auditing not configured for the project.m FILTER_BUILDER - auditing configured via Atlas UI filter builderm FILTER_JSON - auditing configured via Atlas custom filter or API.\n"
                    },
                    "enabled": {
                        "type": "boolean",
                        "description": "Denotes whether or not the project associated with the {GROUP-ID} has database auditing enabled.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "auditAuthorizationSuccess",
                    "auditFilter",
                    "configurationType",
                    "enabled",
                    "projectId",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getCloudProviderSnapshot:getCloudProviderSnapshot": {
            "description": "`mongodbatlas..CloudProviderSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testMongodbatlasCloudProviderSnapshot = new mongodbatlas.CloudProviderSnapshot(\"test\", {\n    clusterName: \"MyClusterTest\",\n    description: \"SomeDescription\",\n    groupId: \"5d0f1f73cf09a29120e173cf\",\n    retentionInDays: 1,\n});\nconst testCloudProviderSnapshot = pulumi.all([testMongodbatlasCloudProviderSnapshot.clusterName, testMongodbatlasCloudProviderSnapshot.groupId]).apply(([clusterName, groupId]) =\u003e mongodbatlas.getCloudProviderSnapshot({\n    clusterName: clusterName,\n    groupId: groupId,\n    snapshotId: \"5d1285acd5ec13b6c2d1726a\",\n}, { async: true }));\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudProviderSnapshot.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The name of the Atlas cluster that contains the snapshot you want to retrieve.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "The unique identifier of the snapshot you want to retrieve.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterName",
                    "projectId",
                    "snapshotId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudProviderSnapshot.\n",
                "properties": {
                    "clusterName": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "UTC ISO 8601 formatted point in time when Atlas took the snapshot.\n"
                    },
                    "description": {
                        "type": "string",
                        "description": "UDescription of the snapshot. Only present for on-demand snapshots.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "masterKeyUuid": {
                        "type": "string",
                        "description": "Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.\n"
                    },
                    "mongodVersion": {
                        "type": "string",
                        "description": "Version of the MongoDB server.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "snapshotId": {
                        "type": "string"
                    },
                    "snapshotType": {
                        "type": "string",
                        "description": "Specified the type of snapshot. Valid values are onDemand and scheduled.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.\n"
                    },
                    "storageSizeBytes": {
                        "type": "integer",
                        "description": "Specifies the size of the snapshot in bytes.\n"
                    },
                    "type": {
                        "type": "string",
                        "description": "Specifies the type of cluster: replicaSet or shardedCluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterName",
                    "createdAt",
                    "description",
                    "expiresAt",
                    "masterKeyUuid",
                    "mongodVersion",
                    "projectId",
                    "snapshotId",
                    "snapshotType",
                    "status",
                    "storageSizeBytes",
                    "type",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getCloudProviderSnapshotBackupPolicy:getCloudProviderSnapshotBackupPolicy": {
            "description": "`mongodbatlas..CloudProviderSnapshotBackupPolicy` provides a Cloud Backup Snapshot Backup Policy datasource. An Atlas Cloud Backup Snapshot Policy provides the current snapshot schedule and retention settings for the cluster. \n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudProviderSnapshotBackupPolicy.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The name of the Atlas cluster that contains the snapshots backup policy you want to retrieve.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier of the project for the Atlas cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterName",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudProviderSnapshotBackupPolicy.\n",
                "properties": {
                    "clusterId": {
                        "type": "string",
                        "description": "Unique identifier of the Atlas cluster.\n"
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "nextSnapshot": {
                        "type": "string",
                        "description": "UTC ISO 8601 formatted point in time when Atlas will take the next snapshot.\n"
                    },
                    "policies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getCloudProviderSnapshotBackupPolicyPolicy:getCloudProviderSnapshotBackupPolicyPolicy"
                        },
                        "description": "A list of policy definitions for the cluster.\n* `policies.#.id` - Unique identifier of the backup policy.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "referenceHourOfDay": {
                        "type": "integer",
                        "description": "UTC Hour of day between 0 and 23 representing which hour of the day that Atlas takes a snapshot.\n"
                    },
                    "referenceMinuteOfHour": {
                        "type": "integer",
                        "description": "UTC Minute of day between 0 and 59 representing which minute of the referenceHourOfDay that Atlas takes the snapshot.\n"
                    },
                    "restoreWindowDays": {
                        "type": "integer",
                        "description": "Specifies a restore window in days for cloud backup to maintain.\n"
                    },
                    "updateSnapshots": {
                        "type": "boolean"
                    }
                },
                "type": "object",
                "required": [
                    "clusterId",
                    "clusterName",
                    "nextSnapshot",
                    "policies",
                    "projectId",
                    "referenceHourOfDay",
                    "referenceMinuteOfHour",
                    "restoreWindowDays",
                    "updateSnapshots",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getCloudProviderSnapshotRestoreJob:getCloudProviderSnapshotRestoreJob": {
            "description": "`mongodbatlas..CloudProviderSnapshotRestoreJob` provides a Cloud Backup Snapshot Restore Job datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\nFirst create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testCloudProviderSnapshot = new mongodbatlas.CloudProviderSnapshot(\"test\", {\n    clusterName: \"MyCluster\",\n    description: \"MyDescription\",\n    projectId: \"5cf5a45a9ccf6400e60981b6\",\n    retentionInDays: 1,\n});\nconst testMongodbatlasCloudProviderSnapshotRestoreJob = new mongodbatlas.CloudProviderSnapshotRestoreJob(\"test\", {\n    clusterName: \"MyCluster\",\n    deliveryType: {\n        automated: true,\n        target_cluster_name: \"MyCluster\",\n        target_project_id: \"5cf5a45a9ccf6400e60981b6\",\n    },\n    projectId: \"5cf5a45a9ccf6400e60981b6\",\n    snapshotId: testCloudProviderSnapshot.id,\n});\nconst testCloudProviderSnapshotRestoreJob = pulumi.all([testMongodbatlasCloudProviderSnapshotRestoreJob.clusterName, testMongodbatlasCloudProviderSnapshotRestoreJob.id, testMongodbatlasCloudProviderSnapshotRestoreJob.projectId]).apply(([clusterName, id, projectId]) =\u003e mongodbatlas.getCloudProviderSnapshotRestoreJob({\n    clusterName: clusterName,\n    jobId: id,\n    projectId: projectId,\n}, { async: true }));\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudProviderSnapshotRestoreJob.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The name of the Atlas cluster for which you want to retrieve the restore job.\n"
                    },
                    "jobId": {
                        "type": "string",
                        "description": "The unique identifier of the restore job to retrieve.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier of the project for the Atlas cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterName",
                    "jobId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudProviderSnapshotRestoreJob.\n",
                "properties": {
                    "cancelled": {
                        "type": "boolean",
                        "description": "Indicates whether the restore job was canceled.\n"
                    },
                    "clusterName": {
                        "type": "string"
                    },
                    "createdAt": {
                        "type": "string",
                        "description": "UTC ISO 8601 formatted point in time when Atlas created the restore job.\n"
                    },
                    "deliveryType": {
                        "type": "string",
                        "description": "Type of restore job to create. Possible values are: automated and download.\n"
                    },
                    "deliveryUrls": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.\n"
                    },
                    "expired": {
                        "type": "boolean",
                        "description": "Indicates whether the restore job expired.\n"
                    },
                    "expiresAt": {
                        "type": "string",
                        "description": "UTC ISO 8601 formatted point in time when the restore job expires.\n"
                    },
                    "finishedAt": {
                        "type": "string",
                        "description": "UTC ISO 8601 formatted point in time when the restore job completed.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "jobId": {
                        "type": "string"
                    },
                    "oplogInc": {
                        "type": "integer"
                    },
                    "oplogTs": {
                        "type": "string"
                    },
                    "pointInTimeUtcSeconds": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "snapshotId": {
                        "type": "string",
                        "description": "Unique identifier of the source snapshot ID of the restore job.\n"
                    },
                    "targetClusterName": {
                        "type": "string",
                        "description": "Name of the target Atlas cluster to which the restore job restores the snapshot. Only visible if deliveryType is automated.\n"
                    },
                    "targetProjectId": {
                        "type": "string"
                    },
                    "timestamp": {
                        "type": "string",
                        "description": "Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.\n"
                    }
                },
                "type": "object",
                "required": [
                    "cancelled",
                    "clusterName",
                    "createdAt",
                    "deliveryType",
                    "deliveryUrls",
                    "expired",
                    "expiresAt",
                    "finishedAt",
                    "jobId",
                    "oplogInc",
                    "oplogTs",
                    "pointInTimeUtcSeconds",
                    "projectId",
                    "snapshotId",
                    "targetClusterName",
                    "targetProjectId",
                    "timestamp",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getCloudProviderSnapshotRestoreJobs:getCloudProviderSnapshotRestoreJobs": {
            "description": "`mongodbatlas..getCloudProviderSnapshotRestoreJobs` provides a Cloud Backup Snapshot Restore Jobs datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\nFirst create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testCloudProviderSnapshot = new mongodbatlas.CloudProviderSnapshot(\"test\", {\n    clusterName: \"MyCluster\",\n    description: \"MyDescription\",\n    projectId: \"5cf5a45a9ccf6400e60981b6\",\n    retentionInDays: 1,\n});\nconst testCloudProviderSnapshotRestoreJob = new mongodbatlas.CloudProviderSnapshotRestoreJob(\"test\", {\n    clusterName: \"MyCluster\",\n    deliveryType: {\n        automated: true,\n        target_cluster_name: \"MyCluster\",\n        target_project_id: \"5cf5a45a9ccf6400e60981b6\",\n    },\n    projectId: \"5cf5a45a9ccf6400e60981b6\",\n    snapshotId: testCloudProviderSnapshot.id,\n});\nconst testCloudProviderSnapshotRestoreJobs = pulumi.all([testCloudProviderSnapshotRestoreJob.clusterName, testCloudProviderSnapshotRestoreJob.projectId]).apply(([clusterName, projectId]) =\u003e mongodbatlas.getCloudProviderSnapshotRestoreJobs({\n    clusterName: clusterName,\n    itemsPerPage: 5,\n    pageNum: 1,\n    projectId: projectId,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest_cloud_provider_snapshot = mongodbatlas.CloudProviderSnapshot(\"testCloudProviderSnapshot\",\n    cluster_name=\"MyCluster\",\n    description=\"MyDescription\",\n    project_id=\"5cf5a45a9ccf6400e60981b6\",\n    retention_in_days=1)\ntest_cloud_provider_snapshot_restore_job = mongodbatlas.CloudProviderSnapshotRestoreJob(\"testCloudProviderSnapshotRestoreJob\",\n    cluster_name=\"MyCluster\",\n    delivery_type={\n        \"automated\": True,\n        \"target_cluster_name\": \"MyCluster\",\n        \"target_project_id\": \"5cf5a45a9ccf6400e60981b6\",\n    },\n    project_id=\"5cf5a45a9ccf6400e60981b6\",\n    snapshot_id=test_cloud_provider_snapshot.id)\ntest_cloud_provider_snapshot_restore_jobs = pulumi.Output.all(test_cloud_provider_snapshot_restore_job.cluster_name, test_cloud_provider_snapshot_restore_job.project_id).apply(lambda cluster_name, project_id: mongodbatlas.get_cloud_provider_snapshot_restore_jobs(cluster_name=cluster_name,\n    items_per_page=5,\n    page_num=1,\n    project_id=project_id))\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testCloudProviderSnapshot = new Mongodbatlas.CloudProviderSnapshot(\"testCloudProviderSnapshot\", new Mongodbatlas.CloudProviderSnapshotArgs\n        {\n            ClusterName = \"MyCluster\",\n            Description = \"MyDescription\",\n            ProjectId = \"5cf5a45a9ccf6400e60981b6\",\n            RetentionInDays = 1,\n        });\n        var testCloudProviderSnapshotRestoreJob = new Mongodbatlas.CloudProviderSnapshotRestoreJob(\"testCloudProviderSnapshotRestoreJob\", new Mongodbatlas.CloudProviderSnapshotRestoreJobArgs\n        {\n            ClusterName = \"MyCluster\",\n            DeliveryType = new Mongodbatlas.Inputs.CloudProviderSnapshotRestoreJobDeliveryTypeArgs\n            {\n                Automated = true,\n                Target_cluster_name = \"MyCluster\",\n                Target_project_id = \"5cf5a45a9ccf6400e60981b6\",\n            },\n            ProjectId = \"5cf5a45a9ccf6400e60981b6\",\n            SnapshotId = testCloudProviderSnapshot.Id,\n        });\n        var testCloudProviderSnapshotRestoreJobs = Output.Tuple(testCloudProviderSnapshotRestoreJob.ClusterName, testCloudProviderSnapshotRestoreJob.ProjectId).Apply(values =\u003e\n        {\n            var clusterName = values.Item1;\n            var projectId = values.Item2;\n            return Mongodbatlas.GetCloudProviderSnapshotRestoreJobs.InvokeAsync(new Mongodbatlas.GetCloudProviderSnapshotRestoreJobsArgs\n            {\n                ClusterName = clusterName,\n                ItemsPerPage = 5,\n                PageNum = 1,\n                ProjectId = projectId,\n            });\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudProviderSnapshotRestoreJobs.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The name of the Atlas cluster for which you want to retrieve restore jobs.\n"
                    },
                    "itemsPerPage": {
                        "type": "integer",
                        "description": "Number of items to return per page, up to a maximum of 500. Defaults to `100`.\n"
                    },
                    "pageNum": {
                        "type": "integer",
                        "description": "The page to return. Defaults to `1`.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier of the project for the Atlas cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterName",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudProviderSnapshotRestoreJobs.\n",
                "properties": {
                    "clusterName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "itemsPerPage": {
                        "type": "integer"
                    },
                    "pageNum": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getCloudProviderSnapshotRestoreJobsResult:getCloudProviderSnapshotRestoreJobsResult"
                        },
                        "description": "Includes cloudProviderSnapshotRestoreJob object for each item detailed in the results array section.\n"
                    },
                    "totalCount": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "clusterName",
                    "projectId",
                    "results",
                    "totalCount",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getCloudProviderSnapshots:getCloudProviderSnapshots": {
            "description": "`mongodbatlas..getCloudProviderSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCloudProviderSnapshots.\n",
                "properties": {
                    "clusterName": {
                        "type": "string",
                        "description": "The name of the Atlas cluster that contains the snapshot you want to retrieve.\n"
                    },
                    "itemsPerPage": {
                        "type": "integer",
                        "description": "Number of items to return per page, up to a maximum of 500. Defaults to `100`.\n"
                    },
                    "pageNum": {
                        "type": "integer",
                        "description": "The page to return. Defaults to `1`.\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterName",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCloudProviderSnapshots.\n",
                "properties": {
                    "clusterName": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "itemsPerPage": {
                        "type": "integer"
                    },
                    "pageNum": {
                        "type": "integer"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getCloudProviderSnapshotsResult:getCloudProviderSnapshotsResult"
                        },
                        "description": "Includes cloudProviderSnapshot object for each item detailed in the results array section.\n"
                    },
                    "totalCount": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "clusterName",
                    "projectId",
                    "results",
                    "totalCount",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getCluster:getCluster": {
            "description": "`mongodbatlas..Cluster` describes a Cluster. The. The data source requires your Project ID.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n\u003e **IMPORTANT:**\n\u003cbr\u003e \u0026#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).\n\u003cbr\u003e \u0026#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCluster.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCluster.\n",
                "properties": {
                    "autoScalingComputeEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Specifies whether cluster tier auto-scaling is enabled. The default is false.\n"
                    },
                    "autoScalingComputeScaleDownEnabled": {
                        "type": "boolean",
                        "description": "(Optional) Set to `true` to enable the cluster tier to scale down.\n"
                    },
                    "autoScalingDiskGbEnabled": {
                        "type": "boolean",
                        "description": "Indicates whether disk auto-scaling is enabled.\n"
                    },
                    "backingProviderName": {
                        "type": "string",
                        "description": "Indicates Cloud service provider on which the server for a multi-tenant cluster is provisioned.\n"
                    },
                    "backupEnabled": {
                        "type": "boolean",
                        "description": "Legacy Option, Indicates whether Atlas continuous backups are enabled for the cluster.\n"
                    },
                    "biConnector": {
                        "$ref": "#/types/mongodbatlas:/getClusterBiConnector:getClusterBiConnector",
                        "description": "Indicates BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.\n"
                    },
                    "clusterType": {
                        "type": "string",
                        "description": "Indicates the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.\n"
                    },
                    "connectionStrings": {
                        "$ref": "#/types/mongodbatlas:/getClusterConnectionStrings:getClusterConnectionStrings",
                        "description": "Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.\n- `connection_strings.standard` -   Public mongodb:// connection string for this cluster.\n- `connection_strings.standard_srv` - Public mongodb+srv:// connection string for this cluster. The mongodb+srv protocol tells the driver to look up the seed list of hosts in DNS. Atlas synchronizes this list with the nodes in a cluster. If the connection string uses this URI format, you don’t need to append the seed list or change the URI if the nodes change. Use this URI format if your driver supports it. If it doesn’t, use connectionStrings.standard.\n- `connection_strings.aws_private_link` -  [Private-endpoint-aware](https://docs.atlas.mongodb.com/security-private-endpoint/#private-endpoint-connection-strings) mongodb://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a AWS PrivateLink connection to this cluster.\n- `connection_strings.aws_private_link_srv` - [Private-endpoint-aware](https://docs.atlas.mongodb.com/security-private-endpoint/#private-endpoint-connection-strings) mongodb+srv://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a AWS PrivateLink connection to this cluster. Use this URI format if your driver supports it. If it doesn’t, use connectionStrings.awsPrivateLink.\n- `connection_strings.private` -   [Network-peering-endpoint-aware](https://docs.atlas.mongodb.com/security-vpc-peering/#vpc-peering) mongodb://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a network peering connection to this cluster.\n- `connection_strings.private_srv` -  [Network-peering-endpoint-aware](https://docs.atlas.mongodb.com/security-vpc-peering/#vpc-peering) mongodb+srv://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a network peering connection to this cluster.\n"
                    },
                    "containerId": {
                        "type": "string",
                        "description": "The Network Peering Container ID.\n"
                    },
                    "diskSizeGb": {
                        "type": "number",
                        "description": "Indicates the size in gigabytes of the server’s root volume (AWS/GCP Only).\n"
                    },
                    "encryptionAtRestProvider": {
                        "type": "string",
                        "description": "Indicates whether Encryption at Rest is enabled or disabled.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getClusterLabel:getClusterLabel"
                        }
                    },
                    "mongoDbMajorVersion": {
                        "type": "string",
                        "description": "Indicates the version of the cluster to deploy.\n"
                    },
                    "mongoDbVersion": {
                        "type": "string",
                        "description": "Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.\n"
                    },
                    "mongoUri": {
                        "type": "string",
                        "description": "Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.\n"
                    },
                    "mongoUriUpdated": {
                        "type": "string",
                        "description": "Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.\n"
                    },
                    "mongoUriWithOptions": {
                        "type": "string",
                        "description": "Describes connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the current plugin\n"
                    },
                    "numShards": {
                        "type": "integer",
                        "description": "Number of shards to deploy in the specified zone.\n"
                    },
                    "paused": {
                        "type": "boolean",
                        "description": "Flag that indicates whether the cluster is paused or not.\n"
                    },
                    "pitEnabled": {
                        "type": "boolean",
                        "description": "Flag that indicates if the cluster uses Continuous Cloud Backup.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "providerAutoScalingComputeMaxInstanceSize": {
                        "type": "string",
                        "description": "(Optional) Maximum instance size to which your cluster can automatically scale.\n"
                    },
                    "providerAutoScalingComputeMinInstanceSize": {
                        "type": "string",
                        "description": "(Optional) Minimum instance size to which your cluster can automatically scale.\n"
                    },
                    "providerBackupEnabled": {
                        "type": "boolean",
                        "description": "Flag indicating if the cluster uses Cloud Backup Snapshots for backups.\n"
                    },
                    "providerDiskIops": {
                        "type": "integer",
                        "description": "Indicates the maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected providerSettings.instanceSizeName and diskSizeGB.\n"
                    },
                    "providerDiskTypeName": {
                        "type": "string",
                        "description": "Describes Azure disk type of the server’s root volume (Azure Only).\n"
                    },
                    "providerEncryptEbsVolume": {
                        "type": "boolean",
                        "description": "Indicates whether the Amazon EBS encryption is enabled. This feature encrypts the server’s root volume for both data at rest within the volume and data moving between the volume and the instance.\n"
                    },
                    "providerInstanceSizeName": {
                        "type": "string",
                        "description": "Atlas provides different instance sizes, each with a default storage capacity and RAM size.\n"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "Indicates the cloud service provider on which the servers are provisioned.\n"
                    },
                    "providerRegionName": {
                        "type": "string",
                        "description": "Indicates Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the Atlas Region name, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).\n"
                    },
                    "providerVolumeType": {
                        "type": "string",
                        "description": "Indicates the type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.\n"
                    },
                    "replicationFactor": {
                        "type": "integer",
                        "description": "Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.\n"
                    },
                    "replicationSpecs": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getClusterReplicationSpec:getClusterReplicationSpec"
                        },
                        "description": "Configuration for cluster regions.  See Replication Spec below for more details.\n"
                    },
                    "snapshotBackupPolicies": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getClusterSnapshotBackupPolicy:getClusterSnapshotBackupPolicy"
                        },
                        "description": "current snapshot schedule and retention settings for the cluster.\n"
                    },
                    "srvAddress": {
                        "type": "string",
                        "description": "Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.\n"
                    },
                    "stateName": {
                        "type": "string",
                        "description": "Indicates the current state of the cluster. The possible states are:\n- IDLE\n- CREATING\n- UPDATING\n- DELETING\n- DELETED\n- REPAIRING\n"
                    }
                },
                "type": "object",
                "required": [
                    "autoScalingComputeEnabled",
                    "autoScalingComputeScaleDownEnabled",
                    "autoScalingDiskGbEnabled",
                    "backingProviderName",
                    "backupEnabled",
                    "biConnector",
                    "clusterType",
                    "connectionStrings",
                    "containerId",
                    "diskSizeGb",
                    "encryptionAtRestProvider",
                    "labels",
                    "mongoDbMajorVersion",
                    "mongoDbVersion",
                    "mongoUri",
                    "mongoUriUpdated",
                    "mongoUriWithOptions",
                    "name",
                    "numShards",
                    "paused",
                    "pitEnabled",
                    "projectId",
                    "providerAutoScalingComputeMaxInstanceSize",
                    "providerAutoScalingComputeMinInstanceSize",
                    "providerBackupEnabled",
                    "providerDiskIops",
                    "providerDiskTypeName",
                    "providerEncryptEbsVolume",
                    "providerInstanceSizeName",
                    "providerName",
                    "providerRegionName",
                    "providerVolumeType",
                    "replicationFactor",
                    "replicationSpecs",
                    "snapshotBackupPolicies",
                    "srvAddress",
                    "stateName",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getClusters:getClusters": {
            "description": "`mongodbatlas..Cluster` describes all Clusters by the provided project_id. The data source requires your Project ID.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n\u003e **IMPORTANT:**\n\u003cbr\u003e \u0026#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).\n\u003cbr\u003e \u0026#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testCluster = new mongodbatlas.Cluster(\"testCluster\", {\n    projectId: \"\u003cYOUR-PROJECT-ID\u003e\",\n    diskSizeGb: 100,\n    numShards: 1,\n    replicationFactor: 3,\n    providerBackupEnabled: true,\n    autoScalingDiskGbEnabled: true,\n    providerName: \"AWS\",\n    providerDiskIops: 300,\n    providerVolumeType: \"STANDARD\",\n    providerEncryptEbsVolume: true,\n    providerInstanceSizeName: \"M40\",\n    providerRegionName: \"US_EAST_1\",\n});\nconst testClusters = testCluster.projectId.apply(projectId =\u003e mongodbatlas.getClusters({\n    projectId: projectId,\n}));\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest_cluster = mongodbatlas.Cluster(\"testCluster\",\n    project_id=\"\u003cYOUR-PROJECT-ID\u003e\",\n    disk_size_gb=100,\n    num_shards=1,\n    replication_factor=3,\n    provider_backup_enabled=True,\n    auto_scaling_disk_gb_enabled=True,\n    provider_name=\"AWS\",\n    provider_disk_iops=300,\n    provider_volume_type=\"STANDARD\",\n    provider_encrypt_ebs_volume=True,\n    provider_instance_size_name=\"M40\",\n    provider_region_name=\"US_EAST_1\")\ntest_clusters = test_cluster.project_id.apply(lambda project_id: mongodbatlas.get_clusters(project_id=project_id))\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testCluster = new Mongodbatlas.Cluster(\"testCluster\", new Mongodbatlas.ClusterArgs\n        {\n            ProjectId = \"\u003cYOUR-PROJECT-ID\u003e\",\n            DiskSizeGb = 100,\n            NumShards = 1,\n            ReplicationFactor = 3,\n            ProviderBackupEnabled = true,\n            AutoScalingDiskGbEnabled = true,\n            ProviderName = \"AWS\",\n            ProviderDiskIops = 300,\n            ProviderVolumeType = \"STANDARD\",\n            ProviderEncryptEbsVolume = true,\n            ProviderInstanceSizeName = \"M40\",\n            ProviderRegionName = \"US_EAST_1\",\n        });\n        var testClusters = testCluster.ProjectId.Apply(projectId =\u003e Mongodbatlas.GetClusters.InvokeAsync(new Mongodbatlas.GetClustersArgs\n        {\n            ProjectId = projectId,\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getClusters.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to get the clusters.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getClusters.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getClustersResult:getClustersResult"
                        },
                        "description": "A list where each represents a Cluster. See Cluster below for more details.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "results",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getCustomDbRole:getCustomDbRole": {
            "description": "`mongodbatlas..CustomDbRole` describe a Custom DB Role. This represents a custom db role.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testRole = new mongodbatlas.CustomDbRole(\"test_role\", {\n    actions: [\n        {\n            action: \"UPDATE\",\n            resources: [{\n                collectionName: \"\",\n                databaseName: \"anyDatabase\",\n            }],\n        },\n        {\n            action: \"INSERT\",\n            resources: [{\n                collectionName: \"\",\n                databaseName: \"anyDatabase\",\n            }],\n        },\n    ],\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    roleName: \"myCustomRole\",\n});\nconst test = pulumi.all([testRole.projectId, testRole.roleName]).apply(([projectId, roleName]) =\u003e mongodbatlas.getCustomDbRole({\n    projectId: projectId,\n    roleName: roleName,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest_role = mongodbatlas.CustomDbRole(\"testRole\",\n    actions=[\n        {\n            \"action\": \"UPDATE\",\n            \"resources\": [{\n                \"collectionName\": \"\",\n                \"database_name\": \"anyDatabase\",\n            }],\n        },\n        {\n            \"action\": \"INSERT\",\n            \"resources\": [{\n                \"collectionName\": \"\",\n                \"database_name\": \"anyDatabase\",\n            }],\n        },\n    ],\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    role_name=\"myCustomRole\")\ntest = pulumi.Output.all(test_role.project_id, test_role.role_name).apply(lambda project_id, role_name: mongodbatlas.get_custom_db_role(project_id=project_id,\n    role_name=role_name))\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testRole = new Mongodbatlas.CustomDbRole(\"testRole\", new Mongodbatlas.CustomDbRoleArgs\n        {\n            Actions = \n            {\n                new Mongodbatlas.Inputs.CustomDbRoleActionArgs\n                {\n                    Action = \"UPDATE\",\n                    Resources = \n                    {\n                        new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs\n                        {\n                            CollectionName = \"\",\n                            DatabaseName = \"anyDatabase\",\n                        },\n                    },\n                },\n                new Mongodbatlas.Inputs.CustomDbRoleActionArgs\n                {\n                    Action = \"INSERT\",\n                    Resources = \n                    {\n                        new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs\n                        {\n                            CollectionName = \"\",\n                            DatabaseName = \"anyDatabase\",\n                        },\n                    },\n                },\n            },\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            RoleName = \"myCustomRole\",\n        });\n        var test = Output.Tuple(testRole.ProjectId, testRole.RoleName).Apply(values =\u003e\n        {\n            var projectId = values.Item1;\n            var roleName = values.Item2;\n            return Mongodbatlas.GetCustomDbRole.InvokeAsync(new Mongodbatlas.GetCustomDbRoleArgs\n            {\n                ProjectId = projectId,\n                RoleName = roleName,\n            });\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomDbRole.\n",
                "properties": {
                    "inheritedRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getCustomDbRoleInheritedRole:getCustomDbRoleInheritedRole"
                        }
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n"
                    },
                    "roleName": {
                        "type": "string",
                        "description": "Name of the custom role. \n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "roleName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomDbRole.\n",
                "properties": {
                    "actions": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getCustomDbRoleAction:getCustomDbRoleAction"
                        }
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "inheritedRoles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getCustomDbRoleInheritedRole:getCustomDbRoleInheritedRole"
                        }
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "roleName": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "actions",
                    "projectId",
                    "roleName",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getCustomDbRoles:getCustomDbRoles": {
            "description": "`mongodbatlas..getCustomDbRoles` describe all Custom DB Roles. This represents a custom db roles.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testDatabaseUser = new mongodbatlas.DatabaseUser(\"test\", {\n    databaseName: \"admin\",\n    password: \"test-acc-password\",\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    roles: [\n        {\n            databaseName: \"admin\",\n            roleName: \"readWrite\",\n        },\n        {\n            databaseName: \"admin\",\n            roleName: \"atlasAdmin\",\n        },\n    ],\n    username: \"test-acc-username\",\n});\nconst testCustomDbRoles = mongodbatlas_custom_db_role_test.projectId.apply(projectId =\u003e mongodbatlas.getCustomDbRoles({\n    projectId: projectId,\n}, { async: true }));\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest_database_user = mongodbatlas.DatabaseUser(\"testDatabaseUser\",\n    database_name=\"admin\",\n    password=\"test-acc-password\",\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    roles=[\n        {\n            \"database_name\": \"admin\",\n            \"role_name\": \"readWrite\",\n        },\n        {\n            \"database_name\": \"admin\",\n            \"role_name\": \"atlasAdmin\",\n        },\n    ],\n    username=\"test-acc-username\")\ntest_custom_db_roles = mongodbatlas.get_custom_db_roles(project_id=mongodbatlas_custom_db_role[\"test\"][\"project_id\"])\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testDatabaseUser = new Mongodbatlas.DatabaseUser(\"testDatabaseUser\", new Mongodbatlas.DatabaseUserArgs\n        {\n            DatabaseName = \"admin\",\n            Password = \"test-acc-password\",\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            Roles = \n            {\n                new Mongodbatlas.Inputs.DatabaseUserRoleArgs\n                {\n                    DatabaseName = \"admin\",\n                    RoleName = \"readWrite\",\n                },\n                new Mongodbatlas.Inputs.DatabaseUserRoleArgs\n                {\n                    DatabaseName = \"admin\",\n                    RoleName = \"atlasAdmin\",\n                },\n            },\n            Username = \"test-acc-username\",\n        });\n        var testCustomDbRoles = Output.Create(Mongodbatlas.GetCustomDbRoles.InvokeAsync(new Mongodbatlas.GetCustomDbRolesArgs\n        {\n            ProjectId = mongodbatlas_custom_db_role.Test.Project_id,\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getCustomDbRoles.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to get all custom db roles.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getCustomDbRoles.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getCustomDbRolesResult:getCustomDbRolesResult"
                        },
                        "description": "A list where each represents a custom db roles.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "results",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getDatabaseUser:getDatabaseUser": {
            "description": "`mongodbatlas..DatabaseUser` describe a Database User. This represents a database user which will be applied to all clusters within the project.\n\nEach user has a set of roles that provide access to the project’s databases. User's roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseUser.\n",
                "properties": {
                    "authDatabaseName": {
                        "type": "string",
                        "description": "The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is almost always the admin database, for X509 it is $external.\n"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.\n",
                        "deprecationMessage": "use auth_database_name instead"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n"
                    },
                    "username": {
                        "type": "string",
                        "description": "Username for authenticating to MongoDB.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "username"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseUser.\n",
                "properties": {
                    "authDatabaseName": {
                        "type": "string"
                    },
                    "databaseName": {
                        "type": "string",
                        "description": "Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.\n",
                        "deprecationMessage": "use auth_database_name instead"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "labels": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getDatabaseUserLabel:getDatabaseUserLabel"
                        }
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "roles": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getDatabaseUserRole:getDatabaseUserRole"
                        },
                        "description": "List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.\n"
                    },
                    "username": {
                        "type": "string"
                    },
                    "x509Type": {
                        "type": "string",
                        "description": "X.509 method by which the provided username is authenticated.\n"
                    }
                },
                "type": "object",
                "required": [
                    "labels",
                    "projectId",
                    "roles",
                    "username",
                    "x509Type",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getDatabaseUsers:getDatabaseUsers": {
            "description": "`mongodbatlas..getDatabaseUsers` describe all Database Users. This represents a database user which will be applied to all clusters within the project.\n\nEach user has a set of roles that provide access to the project’s databases. User's roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testDatabaseUser = new mongodbatlas.DatabaseUser(\"testDatabaseUser\", {\n    username: \"test-acc-username\",\n    password: \"test-acc-password\",\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    authDatabaseName: \"admin\",\n    roles: [\n        {\n            roleName: \"readWrite\",\n            databaseName: \"admin\",\n        },\n        {\n            roleName: \"atlasAdmin\",\n            databaseName: \"admin\",\n        },\n    ],\n    labels: [\n        {\n            key: \"key 1\",\n            value: \"value 1\",\n        },\n        {\n            key: \"key 2\",\n            value: \"value 2\",\n        },\n    ],\n});\nconst testDatabaseUsers = testDatabaseUser.projectId.apply(projectId =\u003e mongodbatlas.getDatabaseUsers({\n    projectId: projectId,\n}));\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest_database_user = mongodbatlas.DatabaseUser(\"testDatabaseUser\",\n    username=\"test-acc-username\",\n    password=\"test-acc-password\",\n    project_id=\"\u003cPROJECT-ID\u003e\",\n    auth_database_name=\"admin\",\n    roles=[\n        {\n            \"role_name\": \"readWrite\",\n            \"database_name\": \"admin\",\n        },\n        {\n            \"role_name\": \"atlasAdmin\",\n            \"database_name\": \"admin\",\n        },\n    ],\n    labels=[\n        {\n            \"key\": \"key 1\",\n            \"value\": \"value 1\",\n        },\n        {\n            \"key\": \"key 2\",\n            \"value\": \"value 2\",\n        },\n    ])\ntest_database_users = test_database_user.project_id.apply(lambda project_id: mongodbatlas.get_database_users(project_id=project_id))\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testDatabaseUser = new Mongodbatlas.DatabaseUser(\"testDatabaseUser\", new Mongodbatlas.DatabaseUserArgs\n        {\n            Username = \"test-acc-username\",\n            Password = \"test-acc-password\",\n            ProjectId = \"\u003cPROJECT-ID\u003e\",\n            AuthDatabaseName = \"admin\",\n            Roles = \n            {\n                new Mongodbatlas.Inputs.DatabaseUserRoleArgs\n                {\n                    RoleName = \"readWrite\",\n                    DatabaseName = \"admin\",\n                },\n                new Mongodbatlas.Inputs.DatabaseUserRoleArgs\n                {\n                    RoleName = \"atlasAdmin\",\n                    DatabaseName = \"admin\",\n                },\n            },\n            Labels = \n            {\n                new Mongodbatlas.Inputs.DatabaseUserLabelArgs\n                {\n                    Key = \"key 1\",\n                    Value = \"value 1\",\n                },\n                new Mongodbatlas.Inputs.DatabaseUserLabelArgs\n                {\n                    Key = \"key 2\",\n                    Value = \"value 2\",\n                },\n            },\n        });\n        var testDatabaseUsers = testDatabaseUser.ProjectId.Apply(projectId =\u003e Mongodbatlas.GetDatabaseUsers.InvokeAsync(new Mongodbatlas.GetDatabaseUsersArgs\n        {\n            ProjectId = projectId,\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getDatabaseUsers.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to get all database users.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getDatabaseUsers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "ID of the Atlas project the user belongs to.\n"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getDatabaseUsersResult:getDatabaseUsersResult"
                        },
                        "description": "A list where each represents a Database user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "results",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getGlobalClusterConfig:getGlobalClusterConfig": {
            "description": "`mongodbatlas..GlobalClusterConfig` describes all managed namespaces and custom zone mappings associated with the specified Global Cluster.\n\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getGlobalClusterConfig.\n",
                "properties": {
                    "clusterName": {
                        "type": "string"
                    },
                    "managedNamespaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getGlobalClusterConfigManagedNamespace:getGlobalClusterConfigManagedNamespace"
                        },
                        "description": "Add a managed namespaces to a Global Cluster. For more information about managed namespaces, see [Global Clusters](https://docs.atlas.mongodb.com/reference/api/global-clusters/). See Managed Namespace below for more details.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n* `cluster_name - (Required) The name of the Global Cluster.\n"
                    }
                },
                "type": "object",
                "required": [
                    "clusterName",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getGlobalClusterConfig.\n",
                "properties": {
                    "clusterName": {
                        "type": "string"
                    },
                    "customZoneMapping": {
                        "type": "object",
                        "additionalProperties": {
                            "$ref": "pulumi.json#/Any"
                        },
                        "description": "A map of all custom zone mappings defined for the Global Cluster. Atlas automatically maps each location code to the closest geographical zone. Custom zone mappings allow administrators to override these automatic mappings. If your Global Cluster does not have any custom zone mappings, this document is empty.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "managedNamespaces": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getGlobalClusterConfigManagedNamespace:getGlobalClusterConfigManagedNamespace"
                        },
                        "description": "Add a managed namespaces to a Global Cluster. For more information about managed namespaces, see [Global Clusters](https://docs.atlas.mongodb.com/reference/api/global-clusters/). See Managed Namespace below for more details.\n"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "clusterName",
                    "customZoneMapping",
                    "managedNamespaces",
                    "projectId",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getMaintenanceWindow:getMaintenanceWindow": {
            "description": "`mongodbatlas..MaintenanceWindow` provides a Maintenance Window entry datasource. Gets information regarding the configured maintenance window for a MongoDB Atlas project.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n## Examples Usage\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testMongodbatlasMaintenanceWindow = new mongodbatlas.MaintenanceWindow(\"test\", {\n    dayOfWeek: 3,\n    hourOfDay: 4,\n    projectId: \"\u003cyour-project-id\u003e\",\n});\nconst testMaintenanceWindow = testMongodbatlasMaintenanceWindow.id.apply(id =\u003e mongodbatlas.getMaintenanceWindow({\n    projectId: id,\n}, { async: true }));\n```\n\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testMongodbatlasMaintenanceWindow = new mongodbatlas.MaintenanceWindow(\"test\", {\n    projectId: \"\u003cyour-project-id\u003e\",\n    startAsap: true,\n});\nconst testMaintenanceWindow = testMongodbatlasMaintenanceWindow.id.apply(id =\u003e mongodbatlas.getMaintenanceWindow({\n    projectId: id,\n}, { async: true }));\n```\n",
            "inputs": {
                "description": "A collection of arguments for invoking getMaintenanceWindow.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The unique identifier of the project for the Maintenance Window.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getMaintenanceWindow.\n",
                "properties": {
                    "dayOfWeek": {
                        "type": "integer",
                        "description": "Day of the week when you would like the maintenance window to start as a 1-based integer: S=1, M=2, T=3, W=4, T=5, F=6, S=7.\n"
                    },
                    "hourOfDay": {
                        "type": "integer",
                        "description": "Hour of the day when you would like the maintenance window to start. This parameter uses the 24-hour clock, where midnight is 0, noon is 12  (Time zone is UTC).\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "numberOfDeferrals": {
                        "type": "integer",
                        "description": "Number of times the current maintenance event for this project has been deferred, you can set a maximum of 2 deferrals.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "startAsap": {
                        "type": "boolean",
                        "description": "Flag indicating whether project maintenance has been directed to start immediately. If you request that maintenance begin immediately, this field returns true from the time the request was made until the time the maintenance event completes.\n"
                    }
                },
                "type": "object",
                "required": [
                    "dayOfWeek",
                    "hourOfDay",
                    "numberOfDeferrals",
                    "projectId",
                    "startAsap",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getNetworkContainer:getNetworkContainer": {
            "description": "`mongodbatlas..NetworkContainer` describes a Network Peering Container. The resource requires your Project ID and container ID.\n\n\u003e **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.\n\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n### Basic Example.\n\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkContainer.\n",
                "properties": {
                    "containerId": {
                        "type": "string",
                        "description": "The Network Peering Container ID.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "containerId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkContainer.\n",
                "properties": {
                    "atlasCidrBlock": {
                        "type": "string",
                        "description": "CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).\n"
                    },
                    "azureSubscriptionId": {
                        "type": "string",
                        "description": "Unique identifer of the Azure subscription in which the VNet resides.\n"
                    },
                    "containerId": {
                        "type": "string"
                    },
                    "gcpProjectId": {
                        "type": "string",
                        "description": "Unique identifier of the GCP project in which the Network Peering connection resides.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "networkName": {
                        "type": "string",
                        "description": "Name of the Network Peering connection in the Atlas project.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.\n"
                    },
                    "provisioned": {
                        "type": "boolean",
                        "description": "Indicates whether the project has Network Peering connections deployed in the container.\n"
                    },
                    "region": {
                        "type": "string",
                        "description": "The Atlas Azure region name for where this container will exist.\n"
                    },
                    "regionName": {
                        "type": "string",
                        "description": "The Atlas AWS region name for where this container will exist.\n"
                    },
                    "vnetName": {
                        "type": "string",
                        "description": "The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "Unique identifier of the project’s VPC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "atlasCidrBlock",
                    "azureSubscriptionId",
                    "containerId",
                    "gcpProjectId",
                    "networkName",
                    "projectId",
                    "providerName",
                    "provisioned",
                    "region",
                    "regionName",
                    "vnetName",
                    "vpcId",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getNetworkContainers:getNetworkContainers": {
            "description": "`mongodbatlas..getNetworkContainers` describes all Network Peering Containers. The data source requires your Project ID.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.\n\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n### Basic Example.\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testNetworkContainer = new mongodbatlas.NetworkContainer(\"testNetworkContainer\", {\n    projectId: \"\u003cYOUR-PROJECT-ID\u003e\",\n    atlasCidrBlock: \"10.8.0.0/21\",\n    providerName: \"AWS\",\n    regionName: \"US_EAST_1\",\n});\nconst testNetworkContainers = pulumi.all([testNetworkContainer.projectId, testNetworkContainer.providerName]).apply(([projectId, providerName]) =\u003e mongodbatlas.getNetworkContainers({\n    projectId: projectId,\n    providerName: providerName,\n}));\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest_network_container = mongodbatlas.NetworkContainer(\"testNetworkContainer\",\n    project_id=\"\u003cYOUR-PROJECT-ID\u003e\",\n    atlas_cidr_block=\"10.8.0.0/21\",\n    provider_name=\"AWS\",\n    region_name=\"US_EAST_1\")\ntest_network_containers = pulumi.Output.all(test_network_container.project_id, test_network_container.provider_name).apply(lambda project_id, provider_name: mongodbatlas.get_network_containers(project_id=project_id,\n    provider_name=provider_name))\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testNetworkContainer = new Mongodbatlas.NetworkContainer(\"testNetworkContainer\", new Mongodbatlas.NetworkContainerArgs\n        {\n            ProjectId = \"\u003cYOUR-PROJECT-ID\u003e\",\n            AtlasCidrBlock = \"10.8.0.0/21\",\n            ProviderName = \"AWS\",\n            RegionName = \"US_EAST_1\",\n        });\n        var testNetworkContainers = Output.Tuple(testNetworkContainer.ProjectId, testNetworkContainer.ProviderName).Apply(values =\u003e\n        {\n            var projectId = values.Item1;\n            var providerName = values.Item2;\n            return Mongodbatlas.GetNetworkContainers.InvokeAsync(new Mongodbatlas.GetNetworkContainersArgs\n            {\n                ProjectId = projectId,\n                ProviderName = providerName,\n            });\n        });\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkContainers.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "Cloud provider for this Network peering container. Accepted values are AWS, GCP, and Azure.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "providerName"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkContainers.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.\n"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getNetworkContainersResult:getNetworkContainersResult"
                        },
                        "description": "A list where each represents a Network Peering Container.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "providerName",
                    "results",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getNetworkPeering:getNetworkPeering": {
            "description": "`mongodbatlas..NetworkPeering` describes a Network Peering Connection.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.\n\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n### Basic Example (AWS).\n\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkPeering.\n",
                "properties": {
                    "peeringId": {
                        "type": "string",
                        "description": "Atlas assigned unique ID for the peering connection.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "peeringId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkPeering.\n",
                "properties": {
                    "accepterRegionName": {
                        "type": "string",
                        "description": "Specifies the region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).\n"
                    },
                    "atlasCidrBlock": {
                        "type": "string",
                        "description": "Unique identifier for an Azure AD directory.\n"
                    },
                    "atlasId": {
                        "type": "string"
                    },
                    "awsAccountId": {
                        "type": "string",
                        "description": "Account ID of the owner of the peer VPC.\n"
                    },
                    "azureDirectoryId": {
                        "type": "string",
                        "description": "Unique identifier for an Azure AD directory.\n"
                    },
                    "azureSubscriptionId": {
                        "type": "string",
                        "description": "Unique identifer of the Azure subscription in which the VNet resides.\n"
                    },
                    "connectionId": {
                        "type": "string",
                        "description": "Unique identifier for the peering connection.\n"
                    },
                    "containerId": {
                        "type": "string"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "When `\"status\" : \"FAILED\"`, Atlas provides a description of the error.\n"
                    },
                    "errorState": {
                        "type": "string",
                        "description": "Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.\n"
                    },
                    "errorStateName": {
                        "type": "string",
                        "description": "Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.\n"
                    },
                    "gcpProjectId": {
                        "type": "string",
                        "description": "GCP project ID of the owner of the network peer. \n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "networkName": {
                        "type": "string",
                        "description": "Name of the network peer to which Atlas connects.\n"
                    },
                    "peeringId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "providerName": {
                        "type": "string",
                        "description": "Cloud provider for this VPC peering connection. If omitted, Atlas sets this parameter to AWS. (Possible Values `AWS`, `AZURE`, `GCP`).\n"
                    },
                    "resourceGroupName": {
                        "type": "string",
                        "description": "Name of your Azure resource group. \n"
                    },
                    "routeTableCidrBlock": {
                        "type": "string",
                        "description": "Peer VPC CIDR block or subnet.\n"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the Atlas network peering connection: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING`, `WAITING_FOR_USER`.\n"
                    },
                    "statusName": {
                        "type": "string",
                        "description": "The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.\n"
                    },
                    "vnetName": {
                        "type": "string",
                        "description": "Name of your Azure VNet.\n"
                    },
                    "vpcId": {
                        "type": "string",
                        "description": "Unique identifier of the peer VPC.\n"
                    }
                },
                "type": "object",
                "required": [
                    "accepterRegionName",
                    "atlasCidrBlock",
                    "atlasId",
                    "awsAccountId",
                    "azureDirectoryId",
                    "azureSubscriptionId",
                    "connectionId",
                    "containerId",
                    "errorMessage",
                    "errorState",
                    "errorStateName",
                    "gcpProjectId",
                    "networkName",
                    "peeringId",
                    "projectId",
                    "providerName",
                    "resourceGroupName",
                    "routeTableCidrBlock",
                    "status",
                    "statusName",
                    "vnetName",
                    "vpcId",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getNetworkPeerings:getNetworkPeerings": {
            "description": "`mongodbatlas..getNetworkPeerings` describes all Network Peering Connections.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.\n\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n### Basic Example (AWS).\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testNetworkPeering = new mongodbatlas.NetworkPeering(\"testNetworkPeering\", {\n    accepterRegionName: \"us-east-1\",\n    projectId: \"\u003cYOUR-PROJEC-ID\u003e\",\n    containerId: \"507f1f77bcf86cd799439011\",\n    providerName: \"AWS\",\n    routeTableCidrBlock: \"192.168.0.0/24\",\n    vpcId: \"vpc-abc123abc123\",\n    awsAccountId: \"abc123abc123\",\n});\nconst testNetworkPeerings = testNetworkPeering.projectId.apply(projectId =\u003e mongodbatlas.getNetworkPeerings({\n    projectId: projectId,\n}));\n```\n```python\nimport pulumi\nimport pulumi_mongodbatlas as mongodbatlas\n\ntest_network_peering = mongodbatlas.NetworkPeering(\"testNetworkPeering\",\n    accepter_region_name=\"us-east-1\",\n    project_id=\"\u003cYOUR-PROJEC-ID\u003e\",\n    container_id=\"507f1f77bcf86cd799439011\",\n    provider_name=\"AWS\",\n    route_table_cidr_block=\"192.168.0.0/24\",\n    vpc_id=\"vpc-abc123abc123\",\n    aws_account_id=\"abc123abc123\")\ntest_network_peerings = test_network_peering.project_id.apply(lambda project_id: mongodbatlas.get_network_peerings(project_id=project_id))\n```\n```csharp\nusing Pulumi;\nusing Mongodbatlas = Pulumi.Mongodbatlas;\n\nclass MyStack : Stack\n{\n    public MyStack()\n    {\n        var testNetworkPeering = new Mongodbatlas.NetworkPeering(\"testNetworkPeering\", new Mongodbatlas.NetworkPeeringArgs\n        {\n            AccepterRegionName = \"us-east-1\",\n            ProjectId = \"\u003cYOUR-PROJEC-ID\u003e\",\n            ContainerId = \"507f1f77bcf86cd799439011\",\n            ProviderName = \"AWS\",\n            RouteTableCidrBlock = \"192.168.0.0/24\",\n            VpcId = \"vpc-abc123abc123\",\n            AwsAccountId = \"abc123abc123\",\n        });\n        var testNetworkPeerings = testNetworkPeering.ProjectId.Apply(projectId =\u003e Mongodbatlas.GetNetworkPeerings.InvokeAsync(new Mongodbatlas.GetNetworkPeeringsArgs\n        {\n            ProjectId = projectId,\n        }));\n    }\n\n}\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getNetworkPeerings.\n",
                "properties": {
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project to create the database user.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getNetworkPeerings.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getNetworkPeeringsResult:getNetworkPeeringsResult"
                        },
                        "description": "A list where each represents a Network Peering Connection.\n"
                    }
                },
                "type": "object",
                "required": [
                    "projectId",
                    "results",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getPrivateEndpoint:getPrivateEndpoint": {
            "description": "`mongodbatlas..PrivateEndpoint` describe a Private Endpoint. This represents a Private Endpoint Connection to retrieve details regarding a private endpoint by id in an Atlas project\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testMongodbatlasPrivateEndpoint = new mongodbatlas.PrivateEndpoint(\"test\", {\n    projectId: \"\u003cPROJECT-ID\u003e\",\n    providerName: \"AWS\",\n    region: \"us-east-1\",\n});\nconst testPrivateEndpoint = pulumi.all([testMongodbatlasPrivateEndpoint.privateLinkId, testMongodbatlasPrivateEndpoint.projectId]).apply(([privateLinkId, projectId]) =\u003e mongodbatlas.getPrivateEndpoint({\n    privateLinkId: privateLinkId,\n    projectId: projectId,\n}, { async: true }));\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivateEndpoint.\n",
                "properties": {
                    "privateLinkId": {
                        "type": "string",
                        "description": "Unique identifier of the AWS PrivateLink connection.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier for the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "privateLinkId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrivateEndpoint.\n",
                "properties": {
                    "endpointServiceName": {
                        "type": "string",
                        "description": "Name of the PrivateLink endpoint service in AWS. Returns null while the endpoint service is being created.\n"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Error message pertaining to the AWS PrivateLink connection. Returns null if there are no errors.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "interfaceEndpoints": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "Unique identifiers of the interface endpoints in your VPC that you added to the AWS PrivateLink connection.\n"
                    },
                    "privateLinkId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "status": {
                        "type": "string",
                        "description": "Status of the AWS PrivateLink connection.\nReturns one of the following values:\n"
                    }
                },
                "type": "object",
                "required": [
                    "endpointServiceName",
                    "errorMessage",
                    "interfaceEndpoints",
                    "privateLinkId",
                    "projectId",
                    "status",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getPrivateEndpointInterfaceLink:getPrivateEndpointInterfaceLink": {
            "description": "`mongodbatlas_private_endpoint_link` describe a Private Endpoint Link. This represents a Private Endpoint Link Connection that wants to retrieve details in an Atlas project.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n{{% examples %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getPrivateEndpointInterfaceLink.\n",
                "properties": {
                    "interfaceEndpointId": {
                        "type": "string"
                    },
                    "privateLinkId": {
                        "type": "string",
                        "description": "Unique identifier of the AWS PrivateLink connection.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "Unique identifier for the project.\n"
                    }
                },
                "type": "object",
                "required": [
                    "interfaceEndpointId",
                    "privateLinkId",
                    "projectId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getPrivateEndpointInterfaceLink.\n",
                "properties": {
                    "connectionStatus": {
                        "type": "string",
                        "description": "Status of the interface endpoint.\nReturns one of the following values:\n"
                    },
                    "deleteRequested": {
                        "type": "boolean",
                        "description": "Indicates if Atlas received a request to remove the interface endpoint from the private endpoint connection.\n"
                    },
                    "errorMessage": {
                        "type": "string",
                        "description": "Error message pertaining to the interface endpoint. Returns null if there are no errors.\n"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "interfaceEndpointId": {
                        "type": "string"
                    },
                    "privateLinkId": {
                        "type": "string"
                    },
                    "projectId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "connectionStatus",
                    "deleteRequested",
                    "errorMessage",
                    "interfaceEndpointId",
                    "privateLinkId",
                    "projectId",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getProject:getProject": {
            "description": "`mongodbatlas..Project` describes a MongoDB Atlas Project. This represents a project that has been created.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n{{% examples %}}\n## Example Usage\n\n{{% example %}}\n### Using project_id attribute to query\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testMongodbatlasProject = new mongodbatlas.Project(\"test\", {\n    orgId: \"\u003cORG_ID\u003e\",\n    teams: [\n        {\n            roleNames: [\"GROUP_OWNER\"],\n            teamId: \"5e0fa8c99ccf641c722fe645\",\n        },\n        {\n            roleNames: [\n                \"GROUP_READ_ONLY\",\n                \"GROUP_DATA_ACCESS_READ_WRITE\",\n            ],\n            teamId: \"5e1dd7b4f2a30ba80a70cd4rw\",\n        },\n    ],\n});\nconst testProject = testMongodbatlasProject.id.apply(id =\u003e mongodbatlas.getProject({\n    projectId: id,\n}, { async: true }));\n```\n\n{{% /example %}}\n{{% example %}}\n### Using name attribute to query\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testMongodbatlasProject = new mongodbatlas.Project(\"test\", {\n    orgId: \"\u003cORG_ID\u003e\",\n    teams: [\n        {\n            roleNames: [\"GROUP_OWNER\"],\n            teamId: \"5e0fa8c99ccf641c722fe645\",\n        },\n        {\n            roleNames: [\n                \"GROUP_READ_ONLY\",\n                \"GROUP_DATA_ACCESS_READ_WRITE\",\n            ],\n            teamId: \"5e1dd7b4f2a30ba80a70cd4rw\",\n        },\n    ],\n});\nconst testProject = testMongodbatlasProject.name.apply(name =\u003e mongodbatlas.getProject({\n    name: name,\n}, { async: true }));\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProject.\n",
                "properties": {
                    "name": {
                        "type": "string",
                        "description": "The unique ID for the project.\n"
                    },
                    "projectId": {
                        "type": "string",
                        "description": "The unique ID for the project.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProject.\n",
                "properties": {
                    "clusterCount": {
                        "type": "integer"
                    },
                    "created": {
                        "type": "string"
                    },
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the project you want to create. (Cannot be changed via this Provider after creation.)\n"
                    },
                    "orgId": {
                        "type": "string",
                        "description": "The ID of the organization you want to create the project within.\n*`cluster_count` - The number of Atlas clusters deployed in the project.\n*`created` - The ISO-8601-formatted timestamp of when Atlas created the project.\n* `teams.#.team_id` - The unique identifier of the team you want to associate with the project. The team and project must share the same parent organization.\n* `teams.#.role_names` - Each string in the array represents a project role assigned to the team. Every user associated with the team inherits these roles.\nThe following are valid roles:\n* `GROUP_OWNER`\n* `GROUP_READ_ONLY`\n* `GROUP_DATA_ACCESS_ADMIN`\n* `GROUP_DATA_ACCESS_READ_WRITE`\n* `GROUP_DATA_ACCESS_READ_ONLY`\n* `GROUP_CLUSTER_MANAGER`\n"
                    },
                    "projectId": {
                        "type": "string"
                    },
                    "teams": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getProjectTeam:getProjectTeam"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "clusterCount",
                    "created",
                    "orgId",
                    "teams",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getProjects:getProjects": {
            "description": "`mongodbatlas..getProjects` describe all Projects. This represents projects that have been created.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n```typescript\nimport * as pulumi from \"@pulumi/pulumi\";\nimport * as mongodbatlas from \"@pulumi/mongodbatlas\";\n\nconst testMongodbatlasProject = new mongodbatlas.Project(\"test\", {\n    orgId: \"\u003cORG_ID\u003e\",\n    teams: [\n        {\n            roleNames: [\"GROUP_OWNER\"],\n            teamId: \"5e0fa8c99ccf641c722fe645\",\n        },\n        {\n            roleNames: [\n                \"GROUP_READ_ONLY\",\n                \"GROUP_DATA_ACCESS_READ_WRITE\",\n            ],\n            teamId: \"5e1dd7b4f2a30ba80a70cd4rw\",\n        },\n    ],\n});\nconst testProject = pulumi.output(mongodbatlas.getProject({\n    itemsPerPage: 5,\n    pageNum: 1,\n}, { async: true }));\n```\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getProjects.\n",
                "properties": {
                    "itemsPerPage": {
                        "type": "integer",
                        "description": "Number of items to return per page, up to a maximum of 500. Defaults to `100`.\n"
                    },
                    "pageNum": {
                        "type": "integer",
                        "description": "The page to return. Defaults to `1`.\n"
                    }
                },
                "type": "object"
            },
            "outputs": {
                "description": "A collection of values returned by getProjects.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "itemsPerPage": {
                        "type": "integer"
                    },
                    "pageNum": {
                        "type": "integer"
                    },
                    "results": {
                        "type": "array",
                        "items": {
                            "$ref": "#/types/mongodbatlas:/getProjectsResult:getProjectsResult"
                        }
                    },
                    "totalCount": {
                        "type": "integer"
                    }
                },
                "type": "object",
                "required": [
                    "results",
                    "totalCount",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getTeam:getTeam": {
            "description": "`mongodbatlas..Teams` describes a Team. The resource requires your Organization ID, Project ID and Team ID.\n\n\u003e **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.\n\n{{% examples %}}\n## Example Usage\n{{% example %}}\n\n\n{{% /example %}}\n{{% /examples %}}\n",
            "inputs": {
                "description": "A collection of arguments for invoking getTeam.\n",
                "properties": {
                    "orgId": {
                        "type": "string",
                        "description": "The unique identifier for the organization you want to associate the team with.\n"
                    },
                    "teamId": {
                        "type": "string",
                        "description": "The unique identifier for the team.\n"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "teamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeam.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string",
                        "description": "The name of the team you want to create.\n"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string"
                    },
                    "usernames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        },
                        "description": "The users who are part of the organization.\n"
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "orgId",
                    "teamId",
                    "usernames",
                    "id"
                ]
            }
        },
        "mongodbatlas:index/getTeams:getTeams": {
            "inputs": {
                "description": "A collection of arguments for invoking getTeams.\n",
                "properties": {
                    "orgId": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string"
                    }
                },
                "type": "object",
                "required": [
                    "orgId",
                    "teamId"
                ]
            },
            "outputs": {
                "description": "A collection of values returned by getTeams.\n",
                "properties": {
                    "id": {
                        "type": "string",
                        "description": "The provider-assigned unique ID for this managed resource.\n"
                    },
                    "name": {
                        "type": "string"
                    },
                    "orgId": {
                        "type": "string"
                    },
                    "teamId": {
                        "type": "string"
                    },
                    "usernames": {
                        "type": "array",
                        "items": {
                            "type": "string"
                        }
                    }
                },
                "type": "object",
                "required": [
                    "name",
                    "orgId",
                    "teamId",
                    "usernames",
                    "id"
                ]
            }
        }
    },
    "language": {
        "csharp": {
            "namespaces": null,
            "packageReferences": {
                "Pulumi": "2.*",
                "System.Collections.Immutable": "1.6.0"
            }
        },
        "nodejs": {
            "dependencies": {
                "@pulumi/pulumi": "^2.0.0"
            },
            "devDependencies": {
                "@types/mime": "^2.0.0",
                "@types/node": "^8.0.25"
            },
            "disableUnionOutputTypes": true,
            "packageDescription": "A Pulumi package for creating and managing mongodbatlas cloud resources.",
            "packageName": "",
            "readme": "\u003e This provider is a derived work of the [Terraform Provider](https://github.com/terraform-providers/terraform-provider-mongodbatlas)\n\u003e distributed under [MPL 2.0](https://www.mozilla.org/en-US/MPL/2.0/). If you encounter a bug or missing feature,\n\u003e first check the [`pulumi/pulumi-mongodbatlas` repo](https://github.com/pulumi/pulumi-mongodbatlas/issues); however, if that doesn't turn up anything,\n\u003e please consult the source [`terraform-providers/terraform-provider-mongodbatlas` repo](https://github.com/terraform-providers/terraform-provider-mongodbatlas/issues).",
            "typescriptVersion": ""
        },
        "python": {
            "requires": {
                "pulumi": "\u003e=2.0.0,\u003c3.0.0"
            }
        }
    }
}