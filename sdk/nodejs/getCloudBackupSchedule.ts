// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Data Source: mongodbatlas.CloudBackupSchedule
 *
 * `mongodbatlas.CloudBackupSchedule` provides a Cloud Backup Schedule datasource. An Atlas Cloud Backup Schedule provides the current cloud backup schedule for the cluster.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const myCluster = new mongodbatlas.AdvancedCluster("my_cluster", {
 *     projectId: "<PROJECT-ID>",
 *     name: "clusterTest",
 *     clusterType: "REPLICASET",
 *     backupEnabled: true,
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             priority: 7,
 *             providerName: "AWS",
 *             regionName: "EU_CENTRAL_1",
 *             electableSpecs: {
 *                 instanceSize: "M10",
 *                 nodeCount: 3,
 *             },
 *         }],
 *     }],
 * });
 * const testCloudBackupSchedule = new mongodbatlas.CloudBackupSchedule("test", {
 *     projectId: myCluster.projectId,
 *     clusterName: myCluster.name,
 *     referenceHourOfDay: 3,
 *     referenceMinuteOfHour: 45,
 *     restoreWindowDays: 4,
 * });
 * const test = mongodbatlas.getCloudBackupScheduleOutput({
 *     projectId: testCloudBackupSchedule.projectId,
 *     clusterName: testCloudBackupSchedule.clusterName,
 * });
 * ```
 */
export function getCloudBackupSchedule(args: GetCloudBackupScheduleArgs, opts?: pulumi.InvokeOptions): Promise<GetCloudBackupScheduleResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getCloudBackupSchedule:getCloudBackupSchedule", {
        "clusterName": args.clusterName,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getCloudBackupSchedule.
 */
export interface GetCloudBackupScheduleArgs {
    /**
     * The name of the Atlas cluster that contains the snapshots backup policy you want to retrieve.
     */
    clusterName: string;
    /**
     * The unique identifier of the project for the Atlas cluster.
     */
    projectId: string;
}

/**
 * A collection of values returned by getCloudBackupSchedule.
 */
export interface GetCloudBackupScheduleResult {
    /**
     * Flag that indicates whether automatic export of cloud backup snapshots to the AWS bucket is enabled. Value can be one of the following:
     * * true - enables automatic export of cloud backup snapshots to the AWS bucket
     * * false - disables automatic export of cloud backup snapshots to the AWS bucket (default)
     */
    readonly autoExportEnabled: boolean;
    /**
     * Unique identifier of the Atlas cluster.
     */
    readonly clusterId: string;
    readonly clusterName: string;
    readonly copySettings: outputs.GetCloudBackupScheduleCopySetting[];
    readonly exports: outputs.GetCloudBackupScheduleExport[];
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique identifier of the backup policy.
     */
    readonly idPolicy: string;
    /**
     * UTC ISO 8601 formatted point in time when Atlas will take the next snapshot.
     */
    readonly nextSnapshot: string;
    /**
     * Daily policy item
     */
    readonly policyItemDailies: outputs.GetCloudBackupSchedulePolicyItemDaily[];
    /**
     * Hourly policy item
     */
    readonly policyItemHourlies: outputs.GetCloudBackupSchedulePolicyItemHourly[];
    /**
     * Monthly policy item
     */
    readonly policyItemMonthlies: outputs.GetCloudBackupSchedulePolicyItemMonthly[];
    /**
     * Weekly policy item
     */
    readonly policyItemWeeklies: outputs.GetCloudBackupSchedulePolicyItemWeekly[];
    /**
     * Yearly policy item
     */
    readonly policyItemYearlies: outputs.GetCloudBackupSchedulePolicyItemYearly[];
    readonly projectId: string;
    /**
     * UTC Hour of day between 0 and 23 representing which hour of the day that Atlas takes a snapshot.
     */
    readonly referenceHourOfDay: number;
    /**
     * UTC Minute of day between 0 and 59 representing which minute of the `referenceHourOfDay` that Atlas takes the snapshot.
     */
    readonly referenceMinuteOfHour: number;
    /**
     * Specifies a restore window in days for cloud backup to maintain.
     */
    readonly restoreWindowDays: number;
    /**
     * Specify true to use organization and project names instead of organization and project UUIDs in the path for the metadata files that Atlas uploads to your S3 bucket after it finishes exporting the snapshots. To learn more about the metadata files that Atlas uploads, see [Export Cloud Backup Snapshot](https://www.mongodb.com/docs/atlas/backup/cloud-backup/export/#std-label-cloud-provider-snapshot-export).
     */
    readonly useOrgAndGroupNamesInExportPrefix: boolean;
}
/**
 * ## # Data Source: mongodbatlas.CloudBackupSchedule
 *
 * `mongodbatlas.CloudBackupSchedule` provides a Cloud Backup Schedule datasource. An Atlas Cloud Backup Schedule provides the current cloud backup schedule for the cluster.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const myCluster = new mongodbatlas.AdvancedCluster("my_cluster", {
 *     projectId: "<PROJECT-ID>",
 *     name: "clusterTest",
 *     clusterType: "REPLICASET",
 *     backupEnabled: true,
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             priority: 7,
 *             providerName: "AWS",
 *             regionName: "EU_CENTRAL_1",
 *             electableSpecs: {
 *                 instanceSize: "M10",
 *                 nodeCount: 3,
 *             },
 *         }],
 *     }],
 * });
 * const testCloudBackupSchedule = new mongodbatlas.CloudBackupSchedule("test", {
 *     projectId: myCluster.projectId,
 *     clusterName: myCluster.name,
 *     referenceHourOfDay: 3,
 *     referenceMinuteOfHour: 45,
 *     restoreWindowDays: 4,
 * });
 * const test = mongodbatlas.getCloudBackupScheduleOutput({
 *     projectId: testCloudBackupSchedule.projectId,
 *     clusterName: testCloudBackupSchedule.clusterName,
 * });
 * ```
 */
export function getCloudBackupScheduleOutput(args: GetCloudBackupScheduleOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetCloudBackupScheduleResult> {
    return pulumi.output(args).apply((a: any) => getCloudBackupSchedule(a, opts))
}

/**
 * A collection of arguments for invoking getCloudBackupSchedule.
 */
export interface GetCloudBackupScheduleOutputArgs {
    /**
     * The name of the Atlas cluster that contains the snapshots backup policy you want to retrieve.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The unique identifier of the project for the Atlas cluster.
     */
    projectId: pulumi.Input<string>;
}
