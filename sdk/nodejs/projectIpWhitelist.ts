// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.ProjectIpWhitelist` provides an IP Whitelist entry resource. The whitelist grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * > **IMPORTANT:**
 * When you remove an entry from the whitelist, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.
 *
 * ## Example Usage
 * ### Using CIDR Block
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.ProjectIpWhitelist("test", {
 *     cidrBlock: "1.2.3.4/32",
 *     comment: "cidr block for tf acc testing",
 *     projectId: "<PROJECT-ID>",
 * });
 * ```
 * ### Using IP Address
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.ProjectIpWhitelist("test", {
 *     comment: "ip address for tf acc testing",
 *     ipAddress: "2.3.4.5",
 *     projectId: "<PROJECT-ID>",
 * });
 * ```
 * ### Using an AWS Security Group
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testNetworkContainer = new mongodbatlas.NetworkContainer("testNetworkContainer", {
 *     projectId: "<PROJECT-ID>",
 *     atlasCidrBlock: "192.168.208.0/21",
 *     providerName: "AWS",
 *     regionName: "US_EAST_1",
 * });
 * const testNetworkPeering = new mongodbatlas.NetworkPeering("testNetworkPeering", {
 *     projectId: "<PROJECT-ID>",
 *     containerId: testNetworkContainer.containerId,
 *     accepterRegionName: "us-east-1",
 *     providerName: "AWS",
 *     routeTableCidrBlock: "172.31.0.0/16",
 *     vpcId: "vpc-0d93d6f69f1578bd8",
 *     awsAccountId: "232589400519",
 * });
 * const testProjectIpWhitelist = new mongodbatlas.ProjectIpWhitelist("testProjectIpWhitelist", {
 *     projectId: "<PROJECT-ID>",
 *     awsSecurityGroup: "sg-0026348ec11780bd1",
 *     comment: "TestAcc for awsSecurityGroup",
 * }, {
 *     dependsOn: ["mongodbatlas_network_peering.test"],
 * });
 * ```
 *
 * > **IMPORTANT:** In order to use AWS Security Group(s) VPC Peering must be enabled like above example.
 */
export class ProjectIpWhitelist extends pulumi.CustomResource {
    /**
     * Get an existing ProjectIpWhitelist resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectIpWhitelistState, opts?: pulumi.CustomResourceOptions): ProjectIpWhitelist {
        return new ProjectIpWhitelist(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/projectIpWhitelist:ProjectIpWhitelist';

    /**
     * Returns true if the given object is an instance of ProjectIpWhitelist.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectIpWhitelist {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectIpWhitelist.__pulumiType;
    }

    /**
     * ID of the whitelisted AWS security group. Mutually exclusive with `cidrBlock` and `ipAddress`.
     */
    public readonly awsSecurityGroup!: pulumi.Output<string>;
    /**
     * Whitelist entry in Classless Inter-Domain Routing (CIDR) notation. Mutually exclusive with `awsSecurityGroup` and `ipAddress`.
     */
    public readonly cidrBlock!: pulumi.Output<string>;
    /**
     * Comment to add to the whitelist entry.
     */
    public readonly comment!: pulumi.Output<string>;
    /**
     * Whitelisted IP address. Mutually exclusive with `awsSecurityGroup` and `cidrBlock`.
     */
    public readonly ipAddress!: pulumi.Output<string>;
    /**
     * The ID of the project in which to add the whitelist entry.
     */
    public readonly projectId!: pulumi.Output<string>;

    /**
     * Create a ProjectIpWhitelist resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectIpWhitelistArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectIpWhitelistArgs | ProjectIpWhitelistState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as ProjectIpWhitelistState | undefined;
            inputs["awsSecurityGroup"] = state ? state.awsSecurityGroup : undefined;
            inputs["cidrBlock"] = state ? state.cidrBlock : undefined;
            inputs["comment"] = state ? state.comment : undefined;
            inputs["ipAddress"] = state ? state.ipAddress : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
        } else {
            const args = argsOrState as ProjectIpWhitelistArgs | undefined;
            if (!args || args.projectId === undefined) {
                throw new Error("Missing required property 'projectId'");
            }
            inputs["awsSecurityGroup"] = args ? args.awsSecurityGroup : undefined;
            inputs["cidrBlock"] = args ? args.cidrBlock : undefined;
            inputs["comment"] = args ? args.comment : undefined;
            inputs["ipAddress"] = args ? args.ipAddress : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(ProjectIpWhitelist.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectIpWhitelist resources.
 */
export interface ProjectIpWhitelistState {
    /**
     * ID of the whitelisted AWS security group. Mutually exclusive with `cidrBlock` and `ipAddress`.
     */
    readonly awsSecurityGroup?: pulumi.Input<string>;
    /**
     * Whitelist entry in Classless Inter-Domain Routing (CIDR) notation. Mutually exclusive with `awsSecurityGroup` and `ipAddress`.
     */
    readonly cidrBlock?: pulumi.Input<string>;
    /**
     * Comment to add to the whitelist entry.
     */
    readonly comment?: pulumi.Input<string>;
    /**
     * Whitelisted IP address. Mutually exclusive with `awsSecurityGroup` and `cidrBlock`.
     */
    readonly ipAddress?: pulumi.Input<string>;
    /**
     * The ID of the project in which to add the whitelist entry.
     */
    readonly projectId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ProjectIpWhitelist resource.
 */
export interface ProjectIpWhitelistArgs {
    /**
     * ID of the whitelisted AWS security group. Mutually exclusive with `cidrBlock` and `ipAddress`.
     */
    readonly awsSecurityGroup?: pulumi.Input<string>;
    /**
     * Whitelist entry in Classless Inter-Domain Routing (CIDR) notation. Mutually exclusive with `awsSecurityGroup` and `ipAddress`.
     */
    readonly cidrBlock?: pulumi.Input<string>;
    /**
     * Comment to add to the whitelist entry.
     */
    readonly comment?: pulumi.Input<string>;
    /**
     * Whitelisted IP address. Mutually exclusive with `awsSecurityGroup` and `cidrBlock`.
     */
    readonly ipAddress?: pulumi.Input<string>;
    /**
     * The ID of the project in which to add the whitelist entry.
     */
    readonly projectId: pulumi.Input<string>;
}
