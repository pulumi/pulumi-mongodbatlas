// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 * ### Create And Assign PAK Together
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.ProjectApiKey("test", {
 *     description: "key-name",
 *     projectId: "<PROJECT_ID>",
 *     roleNames: ["GROUP_OWNER"],
 * });
 * ```
 *
 * ## Import
 *
 * API Keys must be imported using org ID, API Key ID e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/projectApiKey:ProjectApiKey test 5d09d6a59ccf6445652a444a-6576974933969669
 * ```
 *
 *  See [MongoDB Atlas API - API Key](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Programmatic-API-Keys/operation/createAndAssignOneOrganizationApiKeyToOneProject) - Documentation for more information.
 */
export class ProjectApiKey extends pulumi.CustomResource {
    /**
     * Get an existing ProjectApiKey resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ProjectApiKeyState, opts?: pulumi.CustomResourceOptions): ProjectApiKey {
        return new ProjectApiKey(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/projectApiKey:ProjectApiKey';

    /**
     * Returns true if the given object is an instance of ProjectApiKey.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ProjectApiKey {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ProjectApiKey.__pulumiType;
    }

    /**
     * The unique identifier of the Programmatic API key you want to associate with the Project.  The Programmatic API key and Project must share the same parent organization.  Note: this is not the `publicKey` of the Programmatic API key but the `id` of the key. See [Programmatic API Keys](https://docs.atlas.mongodb.com/reference/api/apiKeys/) for more.
     */
    public /*out*/ readonly apiKeyId!: pulumi.Output<string>;
    /**
     * Description of this Organization API key.
     */
    public readonly description!: pulumi.Output<string>;
    public /*out*/ readonly privateKey!: pulumi.Output<string>;
    public readonly projectAssignments!: pulumi.Output<outputs.ProjectApiKeyProjectAssignment[] | undefined>;
    /**
     * Project ID to assign to Access Key
     */
    public readonly projectId!: pulumi.Output<string>;
    public /*out*/ readonly publicKey!: pulumi.Output<string>;
    /**
     * Name of the role. This resource returns all the roles the user has in Atlas.
     * The following are valid roles:
     */
    public readonly roleNames!: pulumi.Output<string[] | undefined>;

    /**
     * Create a ProjectApiKey resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ProjectApiKeyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ProjectApiKeyArgs | ProjectApiKeyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ProjectApiKeyState | undefined;
            resourceInputs["apiKeyId"] = state ? state.apiKeyId : undefined;
            resourceInputs["description"] = state ? state.description : undefined;
            resourceInputs["privateKey"] = state ? state.privateKey : undefined;
            resourceInputs["projectAssignments"] = state ? state.projectAssignments : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["publicKey"] = state ? state.publicKey : undefined;
            resourceInputs["roleNames"] = state ? state.roleNames : undefined;
        } else {
            const args = argsOrState as ProjectApiKeyArgs | undefined;
            if ((!args || args.description === undefined) && !opts.urn) {
                throw new Error("Missing required property 'description'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["description"] = args ? args.description : undefined;
            resourceInputs["projectAssignments"] = args ? args.projectAssignments : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["roleNames"] = args ? args.roleNames : undefined;
            resourceInputs["apiKeyId"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ProjectApiKey.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ProjectApiKey resources.
 */
export interface ProjectApiKeyState {
    /**
     * The unique identifier of the Programmatic API key you want to associate with the Project.  The Programmatic API key and Project must share the same parent organization.  Note: this is not the `publicKey` of the Programmatic API key but the `id` of the key. See [Programmatic API Keys](https://docs.atlas.mongodb.com/reference/api/apiKeys/) for more.
     */
    apiKeyId?: pulumi.Input<string>;
    /**
     * Description of this Organization API key.
     */
    description?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    projectAssignments?: pulumi.Input<pulumi.Input<inputs.ProjectApiKeyProjectAssignment>[]>;
    /**
     * Project ID to assign to Access Key
     */
    projectId?: pulumi.Input<string>;
    publicKey?: pulumi.Input<string>;
    /**
     * Name of the role. This resource returns all the roles the user has in Atlas.
     * The following are valid roles:
     */
    roleNames?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ProjectApiKey resource.
 */
export interface ProjectApiKeyArgs {
    /**
     * Description of this Organization API key.
     */
    description: pulumi.Input<string>;
    projectAssignments?: pulumi.Input<pulumi.Input<inputs.ProjectApiKeyProjectAssignment>[]>;
    /**
     * Project ID to assign to Access Key
     */
    projectId: pulumi.Input<string>;
    /**
     * Name of the role. This resource returns all the roles the user has in Atlas.
     * The following are valid roles:
     */
    roleNames?: pulumi.Input<pulumi.Input<string>[]>;
}
