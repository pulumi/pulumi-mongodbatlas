// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.AdvancedCluster` provides an Advanced Cluster resource. The resource lets you create, edit and delete advanced clusters. The resource requires your Project ID.
 *
 * More information on considerations for using advanced clusters please see [Considerations](https://docs.atlas.mongodb.com/reference/api/cluster-advanced/create-one-cluster-advanced/#considerations)
 *
 * > **IMPORTANT:**
 * <br> &#8226; The primary difference between `mongodbatlas.Cluster` is that `mongodbatlas.AdvancedCluster` supports multi-cloud clusters.  We recommend new users start with the `mongodbatlas.AdvancedCluster` resource.
 *
 * > **NOTE:** If Backup Compliance Policy is enabled for the project for which this backup schedule is defined, you cannot modify the backup schedule for an individual cluster below the minimum requirements set in the Backup Compliance Policy.  See [Backup Compliance Policy Prohibited Actions and Considerations](https://www.mongodb.com/docs/atlas/backup/cloud-backup/backup-compliance-policy/#configure-a-backup-compliance-policy).
 *
 * <br> &#8226; Upgrading the shared tier is supported. Any change from a shared tier cluster (a tenant) to a different instance size will be considered a tenant upgrade. When upgrading from the shared tier, change the `providerName` from "TENANT" to your preferred provider (AWS, GCP or Azure) and remove the variable `backingProviderName`.  See the Example Tenant Cluster Upgrade below.   Note you can upgrade a shared tier cluster only to a single provider on an M10-tier cluster or greater.\
 * <br> &#8226; **IMPORTANT NOTE** When upgrading from the shared tier, *only* the upgrade changes will be applied. This helps avoid a corrupt state file in the event that the upgrade succeeds but subsequent updates fail within the same `pulumi up`. To apply additional cluster changes, run a secondary `pulumi up` after the upgrade succeeds.
 * > **NOTE:** Groups and projects are synonymous terms. You might find groupId in the official documentation.
 *
 * > **NOTE:** A network container is created for each provider/region combination on the advanced cluster. This can be referenced via a computed attribute for use with other resources. Refer to the `replication_specs.#.container_id` attribute in the Attributes Reference for more information.
 *
 * > **NOTE:** To enable Cluster Extended Storage Sizes use the `isExtendedStorageSizesEnabled` parameter in the mongodbatlas.Project resource.
 *
 * > **NOTE:** The Low-CPU instance clusters are prefixed with `R`, i.e. `R40`. For complete list of Low-CPU instance clusters see Cluster Configuration Options under each Cloud Provider (https://www.mongodb.com/docs/atlas/reference/cloud-providers/).
 *
 * ## Example Usage
 *
 * ### Example single provider and single region
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AdvancedCluster("test", {
 *     projectId: "PROJECT ID",
 *     name: "NAME OF CLUSTER",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             electableSpecs: {
 *                 instanceSize: "M10",
 *                 nodeCount: 3,
 *             },
 *             analyticsSpecs: {
 *                 instanceSize: "M10",
 *                 nodeCount: 1,
 *             },
 *             providerName: "AWS",
 *             priority: 7,
 *             regionName: "US_EAST_1",
 *         }],
 *     }],
 * });
 * ```
 *
 * ### Example Tenant Cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AdvancedCluster("test", {
 *     projectId: "PROJECT ID",
 *     name: "NAME OF CLUSTER",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             electableSpecs: {
 *                 instanceSize: "M5",
 *             },
 *             providerName: "TENANT",
 *             backingProviderName: "AWS",
 *             regionName: "US_EAST_1",
 *             priority: 7,
 *         }],
 *     }],
 * });
 * ```
 *
 * ### Example Tenant Cluster Upgrade
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AdvancedCluster("test", {
 *     projectId: "PROJECT ID",
 *     name: "NAME OF CLUSTER",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         regionConfigs: [{
 *             electableSpecs: {
 *                 instanceSize: "M10",
 *             },
 *             providerName: "AWS",
 *             regionName: "US_EAST_1",
 *             priority: 7,
 *         }],
 *     }],
 * });
 * ```
 *
 * ### Example Multi-Cloud Cluster
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AdvancedCluster("test", {
 *     projectId: "PROJECT ID",
 *     name: "NAME OF CLUSTER",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         regionConfigs: [
 *             {
 *                 electableSpecs: {
 *                     instanceSize: "M10",
 *                     nodeCount: 3,
 *                 },
 *                 analyticsSpecs: {
 *                     instanceSize: "M10",
 *                     nodeCount: 1,
 *                 },
 *                 providerName: "AWS",
 *                 priority: 7,
 *                 regionName: "US_EAST_1",
 *             },
 *             {
 *                 electableSpecs: {
 *                     instanceSize: "M10",
 *                     nodeCount: 2,
 *                 },
 *                 providerName: "GCP",
 *                 priority: 6,
 *                 regionName: "NORTH_AMERICA_NORTHEAST_1",
 *             },
 *         ],
 *     }],
 * });
 * ```
 * ### Example of a Multi-Cloud Cluster
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const cluster = new mongodbatlas.AdvancedCluster("cluster", {
 *     projectId: project.id,
 *     name: clusterName,
 *     clusterType: "SHARDED",
 *     backupEnabled: true,
 *     replicationSpecs: [{
 *         numShards: 3,
 *         regionConfigs: [
 *             {
 *                 electableSpecs: {
 *                     instanceSize: "M10",
 *                     nodeCount: 3,
 *                 },
 *                 analyticsSpecs: {
 *                     instanceSize: "M10",
 *                     nodeCount: 1,
 *                 },
 *                 providerName: "AWS",
 *                 priority: 7,
 *                 regionName: "US_EAST_1",
 *             },
 *             {
 *                 electableSpecs: {
 *                     instanceSize: "M10",
 *                     nodeCount: 2,
 *                 },
 *                 analyticsSpecs: {
 *                     instanceSize: "M10",
 *                     nodeCount: 1,
 *                 },
 *                 providerName: "AZURE",
 *                 priority: 6,
 *                 regionName: "US_EAST_2",
 *             },
 *             {
 *                 electableSpecs: {
 *                     instanceSize: "M10",
 *                     nodeCount: 2,
 *                 },
 *                 analyticsSpecs: {
 *                     instanceSize: "M10",
 *                     nodeCount: 1,
 *                 },
 *                 providerName: "GCP",
 *                 priority: 5,
 *                 regionName: "US_EAST_4",
 *             },
 *         ],
 *     }],
 *     advancedConfiguration: {
 *         javascriptEnabled: true,
 *         oplogSizeMb: 30,
 *         sampleRefreshIntervalBiConnector: 300,
 *     },
 * });
 * ```
 *
 * ### Example of a Global Cluster
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const cluster = new mongodbatlas.AdvancedCluster("cluster", {
 *     projectId: project.id,
 *     name: clusterName,
 *     clusterType: "GEOSHARDED",
 *     backupEnabled: true,
 *     replicationSpecs: [
 *         {
 *             zoneName: "zone n1",
 *             numShards: 3,
 *             regionConfigs: [
 *                 {
 *                     electableSpecs: {
 *                         instanceSize: "M10",
 *                         nodeCount: 3,
 *                     },
 *                     analyticsSpecs: {
 *                         instanceSize: "M10",
 *                         nodeCount: 1,
 *                     },
 *                     providerName: "AWS",
 *                     priority: 7,
 *                     regionName: "US_EAST_1",
 *                 },
 *                 {
 *                     electableSpecs: {
 *                         instanceSize: "M10",
 *                         nodeCount: 2,
 *                     },
 *                     analyticsSpecs: {
 *                         instanceSize: "M10",
 *                         nodeCount: 1,
 *                     },
 *                     providerName: "AZURE",
 *                     priority: 6,
 *                     regionName: "US_EAST_2",
 *                 },
 *                 {
 *                     electableSpecs: {
 *                         instanceSize: "M10",
 *                         nodeCount: 2,
 *                     },
 *                     analyticsSpecs: {
 *                         instanceSize: "M10",
 *                         nodeCount: 1,
 *                     },
 *                     providerName: "GCP",
 *                     priority: 5,
 *                     regionName: "US_EAST_4",
 *                 },
 *             ],
 *         },
 *         {
 *             zoneName: "zone n2",
 *             numShards: 2,
 *             regionConfigs: [
 *                 {
 *                     electableSpecs: {
 *                         instanceSize: "M10",
 *                         nodeCount: 3,
 *                     },
 *                     analyticsSpecs: {
 *                         instanceSize: "M10",
 *                         nodeCount: 1,
 *                     },
 *                     providerName: "AWS",
 *                     priority: 7,
 *                     regionName: "EU_WEST_1",
 *                 },
 *                 {
 *                     electableSpecs: {
 *                         instanceSize: "M10",
 *                         nodeCount: 2,
 *                     },
 *                     analyticsSpecs: {
 *                         instanceSize: "M10",
 *                         nodeCount: 1,
 *                     },
 *                     providerName: "AZURE",
 *                     priority: 6,
 *                     regionName: "EUROPE_NORTH",
 *                 },
 *                 {
 *                     electableSpecs: {
 *                         instanceSize: "M10",
 *                         nodeCount: 2,
 *                     },
 *                     analyticsSpecs: {
 *                         instanceSize: "M10",
 *                         nodeCount: 1,
 *                     },
 *                     providerName: "GCP",
 *                     priority: 5,
 *                     regionName: "US_EAST_4",
 *                 },
 *             ],
 *         },
 *     ],
 *     advancedConfiguration: {
 *         javascriptEnabled: true,
 *         oplogSizeMb: 999,
 *         sampleRefreshIntervalBiConnector: 300,
 *     },
 * });
 * ```
 *
 * ### Example - Return a Connection String
 * Standard
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 *
 * export const standard = cluster_test.connectionStrings[0].standard;
 * ```
 * Standard srv
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 *
 * export const standardSrv = cluster_test.connectionStrings[0].standardSrv;
 * ```
 * Private with Network peering and Custom DNS AWS enabled
 * ## Import
 *
 * Clusters can be imported using project ID and cluster name, in the format `PROJECTID-CLUSTERNAME`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/advancedCluster:AdvancedCluster my_cluster 1112222b3bf99403840e8934-Cluster0
 * ```
 * See detailed information for arguments and attributes: [MongoDB API Advanced Clusters](https://docs.atlas.mongodb.com/reference/api/cluster-advanced/create-one-cluster-advanced/)
 */
export class AdvancedCluster extends pulumi.CustomResource {
    /**
     * Get an existing AdvancedCluster resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AdvancedClusterState, opts?: pulumi.CustomResourceOptions): AdvancedCluster {
        return new AdvancedCluster(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/advancedCluster:AdvancedCluster';

    /**
     * Returns true if the given object is an instance of AdvancedCluster.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AdvancedCluster {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AdvancedCluster.__pulumiType;
    }

    /**
     * If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
     */
    public readonly acceptDataRisksAndForceReplicaSetReconfig!: pulumi.Output<string | undefined>;
    public readonly advancedConfiguration!: pulumi.Output<outputs.AdvancedClusterAdvancedConfiguration>;
    /**
     * Flag that indicates whether the cluster can perform backups.
     * If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
     *
     * Backup uses:
     * [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
     * [Shared Cluster Backups](https://docs.atlas.mongodb.com/backup/shared-tier/overview/#std-label-m2-m5-snapshots) for tenant clusters.
     * If "`backupEnabled`" : `false`, the cluster doesn't use Atlas backups.
     *
     * This parameter defaults to false.
     */
    public readonly backupEnabled!: pulumi.Output<boolean>;
    /**
     * Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
     */
    public readonly biConnectorConfig!: pulumi.Output<outputs.AdvancedClusterBiConnectorConfig>;
    /**
     * The cluster ID.
     */
    public /*out*/ readonly clusterId!: pulumi.Output<string>;
    /**
     * Type of the cluster that you want to create.
     * Accepted values include:
     * - `REPLICASET` Replica set
     * - `SHARDED`	Sharded cluster
     * - `GEOSHARDED` Global Cluster
     */
    public readonly clusterType!: pulumi.Output<string>;
    /**
     * Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
     */
    public /*out*/ readonly connectionStrings!: pulumi.Output<outputs.AdvancedClusterConnectionString[]>;
    public /*out*/ readonly createDate!: pulumi.Output<string>;
    /**
     * Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
     */
    public readonly diskSizeGb!: pulumi.Output<number>;
    /**
     * Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
     */
    public readonly encryptionAtRestProvider!: pulumi.Output<string>;
    /**
     * Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you're an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more info [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
     */
    public readonly globalClusterSelfManagedSharding!: pulumi.Output<boolean>;
    /**
     * Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
     *
     * @deprecated This parameter is deprecated and will be removed by September 2024. Please transition to tags.
     */
    public readonly labels!: pulumi.Output<outputs.AdvancedClusterLabel[] | undefined>;
    /**
     * Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.4`, `5.0`, `6.0` or `7.0`. If omitted, Atlas deploys a cluster that runs MongoDB 7.0. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
     */
    public readonly mongoDbMajorVersion!: pulumi.Output<string>;
    /**
     * Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
     */
    public /*out*/ readonly mongoDbVersion!: pulumi.Output<string>;
    /**
     * Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
     */
    public readonly name!: pulumi.Output<string>;
    public readonly paused!: pulumi.Output<boolean>;
    /**
     * Flag that indicates if the cluster uses Continuous Cloud Backup.
     */
    public readonly pitEnabled!: pulumi.Output<boolean>;
    /**
     * Unique ID for the project to create the database user.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Configuration for cluster regions and the hardware provisioned in them. See below
     */
    public readonly replicationSpecs!: pulumi.Output<outputs.AdvancedClusterReplicationSpec[]>;
    /**
     * Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
     */
    public readonly retainBackupsEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
     */
    public readonly rootCertType!: pulumi.Output<string>;
    /**
     * Current state of the cluster. The possible states are:
     * - IDLE
     * - CREATING
     * - UPDATING
     * - DELETING
     * - DELETED
     * - REPAIRING
     */
    public /*out*/ readonly stateName!: pulumi.Output<string>;
    /**
     * Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
     */
    public readonly tags!: pulumi.Output<outputs.AdvancedClusterTag[] | undefined>;
    /**
     * Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
     */
    public readonly terminationProtectionEnabled!: pulumi.Output<boolean>;
    /**
     * Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
     * - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
     * - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
     */
    public readonly versionReleaseSystem!: pulumi.Output<string>;

    /**
     * Create a AdvancedCluster resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AdvancedClusterArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AdvancedClusterArgs | AdvancedClusterState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AdvancedClusterState | undefined;
            resourceInputs["acceptDataRisksAndForceReplicaSetReconfig"] = state ? state.acceptDataRisksAndForceReplicaSetReconfig : undefined;
            resourceInputs["advancedConfiguration"] = state ? state.advancedConfiguration : undefined;
            resourceInputs["backupEnabled"] = state ? state.backupEnabled : undefined;
            resourceInputs["biConnectorConfig"] = state ? state.biConnectorConfig : undefined;
            resourceInputs["clusterId"] = state ? state.clusterId : undefined;
            resourceInputs["clusterType"] = state ? state.clusterType : undefined;
            resourceInputs["connectionStrings"] = state ? state.connectionStrings : undefined;
            resourceInputs["createDate"] = state ? state.createDate : undefined;
            resourceInputs["diskSizeGb"] = state ? state.diskSizeGb : undefined;
            resourceInputs["encryptionAtRestProvider"] = state ? state.encryptionAtRestProvider : undefined;
            resourceInputs["globalClusterSelfManagedSharding"] = state ? state.globalClusterSelfManagedSharding : undefined;
            resourceInputs["labels"] = state ? state.labels : undefined;
            resourceInputs["mongoDbMajorVersion"] = state ? state.mongoDbMajorVersion : undefined;
            resourceInputs["mongoDbVersion"] = state ? state.mongoDbVersion : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["paused"] = state ? state.paused : undefined;
            resourceInputs["pitEnabled"] = state ? state.pitEnabled : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["replicationSpecs"] = state ? state.replicationSpecs : undefined;
            resourceInputs["retainBackupsEnabled"] = state ? state.retainBackupsEnabled : undefined;
            resourceInputs["rootCertType"] = state ? state.rootCertType : undefined;
            resourceInputs["stateName"] = state ? state.stateName : undefined;
            resourceInputs["tags"] = state ? state.tags : undefined;
            resourceInputs["terminationProtectionEnabled"] = state ? state.terminationProtectionEnabled : undefined;
            resourceInputs["versionReleaseSystem"] = state ? state.versionReleaseSystem : undefined;
        } else {
            const args = argsOrState as AdvancedClusterArgs | undefined;
            if ((!args || args.clusterType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterType'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.replicationSpecs === undefined) && !opts.urn) {
                throw new Error("Missing required property 'replicationSpecs'");
            }
            resourceInputs["acceptDataRisksAndForceReplicaSetReconfig"] = args ? args.acceptDataRisksAndForceReplicaSetReconfig : undefined;
            resourceInputs["advancedConfiguration"] = args ? args.advancedConfiguration : undefined;
            resourceInputs["backupEnabled"] = args ? args.backupEnabled : undefined;
            resourceInputs["biConnectorConfig"] = args ? args.biConnectorConfig : undefined;
            resourceInputs["clusterType"] = args ? args.clusterType : undefined;
            resourceInputs["diskSizeGb"] = args ? args.diskSizeGb : undefined;
            resourceInputs["encryptionAtRestProvider"] = args ? args.encryptionAtRestProvider : undefined;
            resourceInputs["globalClusterSelfManagedSharding"] = args ? args.globalClusterSelfManagedSharding : undefined;
            resourceInputs["labels"] = args ? args.labels : undefined;
            resourceInputs["mongoDbMajorVersion"] = args ? args.mongoDbMajorVersion : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["paused"] = args ? args.paused : undefined;
            resourceInputs["pitEnabled"] = args ? args.pitEnabled : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["replicationSpecs"] = args ? args.replicationSpecs : undefined;
            resourceInputs["retainBackupsEnabled"] = args ? args.retainBackupsEnabled : undefined;
            resourceInputs["rootCertType"] = args ? args.rootCertType : undefined;
            resourceInputs["tags"] = args ? args.tags : undefined;
            resourceInputs["terminationProtectionEnabled"] = args ? args.terminationProtectionEnabled : undefined;
            resourceInputs["versionReleaseSystem"] = args ? args.versionReleaseSystem : undefined;
            resourceInputs["clusterId"] = undefined /*out*/;
            resourceInputs["connectionStrings"] = undefined /*out*/;
            resourceInputs["createDate"] = undefined /*out*/;
            resourceInputs["mongoDbVersion"] = undefined /*out*/;
            resourceInputs["stateName"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AdvancedCluster.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AdvancedCluster resources.
 */
export interface AdvancedClusterState {
    /**
     * If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
     */
    acceptDataRisksAndForceReplicaSetReconfig?: pulumi.Input<string>;
    advancedConfiguration?: pulumi.Input<inputs.AdvancedClusterAdvancedConfiguration>;
    /**
     * Flag that indicates whether the cluster can perform backups.
     * If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
     *
     * Backup uses:
     * [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
     * [Shared Cluster Backups](https://docs.atlas.mongodb.com/backup/shared-tier/overview/#std-label-m2-m5-snapshots) for tenant clusters.
     * If "`backupEnabled`" : `false`, the cluster doesn't use Atlas backups.
     *
     * This parameter defaults to false.
     */
    backupEnabled?: pulumi.Input<boolean>;
    /**
     * Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
     */
    biConnectorConfig?: pulumi.Input<inputs.AdvancedClusterBiConnectorConfig>;
    /**
     * The cluster ID.
     */
    clusterId?: pulumi.Input<string>;
    /**
     * Type of the cluster that you want to create.
     * Accepted values include:
     * - `REPLICASET` Replica set
     * - `SHARDED`	Sharded cluster
     * - `GEOSHARDED` Global Cluster
     */
    clusterType?: pulumi.Input<string>;
    /**
     * Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
     */
    connectionStrings?: pulumi.Input<pulumi.Input<inputs.AdvancedClusterConnectionString>[]>;
    createDate?: pulumi.Input<string>;
    /**
     * Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
     */
    diskSizeGb?: pulumi.Input<number>;
    /**
     * Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
     */
    encryptionAtRestProvider?: pulumi.Input<string>;
    /**
     * Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you're an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more info [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
     */
    globalClusterSelfManagedSharding?: pulumi.Input<boolean>;
    /**
     * Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
     *
     * @deprecated This parameter is deprecated and will be removed by September 2024. Please transition to tags.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.AdvancedClusterLabel>[]>;
    /**
     * Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.4`, `5.0`, `6.0` or `7.0`. If omitted, Atlas deploys a cluster that runs MongoDB 7.0. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
     */
    mongoDbMajorVersion?: pulumi.Input<string>;
    /**
     * Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
     */
    mongoDbVersion?: pulumi.Input<string>;
    /**
     * Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
     */
    name?: pulumi.Input<string>;
    paused?: pulumi.Input<boolean>;
    /**
     * Flag that indicates if the cluster uses Continuous Cloud Backup.
     */
    pitEnabled?: pulumi.Input<boolean>;
    /**
     * Unique ID for the project to create the database user.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Configuration for cluster regions and the hardware provisioned in them. See below
     */
    replicationSpecs?: pulumi.Input<pulumi.Input<inputs.AdvancedClusterReplicationSpec>[]>;
    /**
     * Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
     */
    retainBackupsEnabled?: pulumi.Input<boolean>;
    /**
     * Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
     */
    rootCertType?: pulumi.Input<string>;
    /**
     * Current state of the cluster. The possible states are:
     * - IDLE
     * - CREATING
     * - UPDATING
     * - DELETING
     * - DELETED
     * - REPAIRING
     */
    stateName?: pulumi.Input<string>;
    /**
     * Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AdvancedClusterTag>[]>;
    /**
     * Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
     */
    terminationProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
     * - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
     * - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
     */
    versionReleaseSystem?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AdvancedCluster resource.
 */
export interface AdvancedClusterArgs {
    /**
     * If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
     */
    acceptDataRisksAndForceReplicaSetReconfig?: pulumi.Input<string>;
    advancedConfiguration?: pulumi.Input<inputs.AdvancedClusterAdvancedConfiguration>;
    /**
     * Flag that indicates whether the cluster can perform backups.
     * If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
     *
     * Backup uses:
     * [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
     * [Shared Cluster Backups](https://docs.atlas.mongodb.com/backup/shared-tier/overview/#std-label-m2-m5-snapshots) for tenant clusters.
     * If "`backupEnabled`" : `false`, the cluster doesn't use Atlas backups.
     *
     * This parameter defaults to false.
     */
    backupEnabled?: pulumi.Input<boolean>;
    /**
     * Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
     */
    biConnectorConfig?: pulumi.Input<inputs.AdvancedClusterBiConnectorConfig>;
    /**
     * Type of the cluster that you want to create.
     * Accepted values include:
     * - `REPLICASET` Replica set
     * - `SHARDED`	Sharded cluster
     * - `GEOSHARDED` Global Cluster
     */
    clusterType: pulumi.Input<string>;
    /**
     * Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
     */
    diskSizeGb?: pulumi.Input<number>;
    /**
     * Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
     */
    encryptionAtRestProvider?: pulumi.Input<string>;
    /**
     * Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you're an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more info [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
     */
    globalClusterSelfManagedSharding?: pulumi.Input<boolean>;
    /**
     * Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
     *
     * @deprecated This parameter is deprecated and will be removed by September 2024. Please transition to tags.
     */
    labels?: pulumi.Input<pulumi.Input<inputs.AdvancedClusterLabel>[]>;
    /**
     * Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.4`, `5.0`, `6.0` or `7.0`. If omitted, Atlas deploys a cluster that runs MongoDB 7.0. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
     */
    mongoDbMajorVersion?: pulumi.Input<string>;
    /**
     * Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
     */
    name?: pulumi.Input<string>;
    paused?: pulumi.Input<boolean>;
    /**
     * Flag that indicates if the cluster uses Continuous Cloud Backup.
     */
    pitEnabled?: pulumi.Input<boolean>;
    /**
     * Unique ID for the project to create the database user.
     */
    projectId: pulumi.Input<string>;
    /**
     * Configuration for cluster regions and the hardware provisioned in them. See below
     */
    replicationSpecs: pulumi.Input<pulumi.Input<inputs.AdvancedClusterReplicationSpec>[]>;
    /**
     * Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
     */
    retainBackupsEnabled?: pulumi.Input<boolean>;
    /**
     * Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
     */
    rootCertType?: pulumi.Input<string>;
    /**
     * Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
     */
    tags?: pulumi.Input<pulumi.Input<inputs.AdvancedClusterTag>[]>;
    /**
     * Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
     */
    terminationProtectionEnabled?: pulumi.Input<boolean>;
    /**
     * Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
     * - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
     * - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
     */
    versionReleaseSystem?: pulumi.Input<string>;
}
