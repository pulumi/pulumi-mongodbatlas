// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

// Export members:
export { AccessListApiKeyArgs, AccessListApiKeyState } from "./accessListApiKey";
export type AccessListApiKey = import("./accessListApiKey").AccessListApiKey;
export const AccessListApiKey: typeof import("./accessListApiKey").AccessListApiKey = null as any;
utilities.lazyLoad(exports, ["AccessListApiKey"], () => require("./accessListApiKey"));

export { AdvancedClusterArgs, AdvancedClusterState } from "./advancedCluster";
export type AdvancedCluster = import("./advancedCluster").AdvancedCluster;
export const AdvancedCluster: typeof import("./advancedCluster").AdvancedCluster = null as any;
utilities.lazyLoad(exports, ["AdvancedCluster"], () => require("./advancedCluster"));

export { AlertConfigurationArgs, AlertConfigurationState } from "./alertConfiguration";
export type AlertConfiguration = import("./alertConfiguration").AlertConfiguration;
export const AlertConfiguration: typeof import("./alertConfiguration").AlertConfiguration = null as any;
utilities.lazyLoad(exports, ["AlertConfiguration"], () => require("./alertConfiguration"));

export { ApiKeyArgs, ApiKeyState } from "./apiKey";
export type ApiKey = import("./apiKey").ApiKey;
export const ApiKey: typeof import("./apiKey").ApiKey = null as any;
utilities.lazyLoad(exports, ["ApiKey"], () => require("./apiKey"));

export { AuditingArgs, AuditingState } from "./auditing";
export type Auditing = import("./auditing").Auditing;
export const Auditing: typeof import("./auditing").Auditing = null as any;
utilities.lazyLoad(exports, ["Auditing"], () => require("./auditing"));

export { BackupCompliancePolicyArgs, BackupCompliancePolicyState } from "./backupCompliancePolicy";
export type BackupCompliancePolicy = import("./backupCompliancePolicy").BackupCompliancePolicy;
export const BackupCompliancePolicy: typeof import("./backupCompliancePolicy").BackupCompliancePolicy = null as any;
utilities.lazyLoad(exports, ["BackupCompliancePolicy"], () => require("./backupCompliancePolicy"));

export { CloudBackupScheduleArgs, CloudBackupScheduleState } from "./cloudBackupSchedule";
export type CloudBackupSchedule = import("./cloudBackupSchedule").CloudBackupSchedule;
export const CloudBackupSchedule: typeof import("./cloudBackupSchedule").CloudBackupSchedule = null as any;
utilities.lazyLoad(exports, ["CloudBackupSchedule"], () => require("./cloudBackupSchedule"));

export { CloudBackupSnapshotArgs, CloudBackupSnapshotState } from "./cloudBackupSnapshot";
export type CloudBackupSnapshot = import("./cloudBackupSnapshot").CloudBackupSnapshot;
export const CloudBackupSnapshot: typeof import("./cloudBackupSnapshot").CloudBackupSnapshot = null as any;
utilities.lazyLoad(exports, ["CloudBackupSnapshot"], () => require("./cloudBackupSnapshot"));

export { CloudBackupSnapshotExportBucketArgs, CloudBackupSnapshotExportBucketState } from "./cloudBackupSnapshotExportBucket";
export type CloudBackupSnapshotExportBucket = import("./cloudBackupSnapshotExportBucket").CloudBackupSnapshotExportBucket;
export const CloudBackupSnapshotExportBucket: typeof import("./cloudBackupSnapshotExportBucket").CloudBackupSnapshotExportBucket = null as any;
utilities.lazyLoad(exports, ["CloudBackupSnapshotExportBucket"], () => require("./cloudBackupSnapshotExportBucket"));

export { CloudBackupSnapshotExportJobArgs, CloudBackupSnapshotExportJobState } from "./cloudBackupSnapshotExportJob";
export type CloudBackupSnapshotExportJob = import("./cloudBackupSnapshotExportJob").CloudBackupSnapshotExportJob;
export const CloudBackupSnapshotExportJob: typeof import("./cloudBackupSnapshotExportJob").CloudBackupSnapshotExportJob = null as any;
utilities.lazyLoad(exports, ["CloudBackupSnapshotExportJob"], () => require("./cloudBackupSnapshotExportJob"));

export { CloudBackupSnapshotRestoreJobArgs, CloudBackupSnapshotRestoreJobState } from "./cloudBackupSnapshotRestoreJob";
export type CloudBackupSnapshotRestoreJob = import("./cloudBackupSnapshotRestoreJob").CloudBackupSnapshotRestoreJob;
export const CloudBackupSnapshotRestoreJob: typeof import("./cloudBackupSnapshotRestoreJob").CloudBackupSnapshotRestoreJob = null as any;
utilities.lazyLoad(exports, ["CloudBackupSnapshotRestoreJob"], () => require("./cloudBackupSnapshotRestoreJob"));

export { CloudProviderAccessAuthorizationArgs, CloudProviderAccessAuthorizationState } from "./cloudProviderAccessAuthorization";
export type CloudProviderAccessAuthorization = import("./cloudProviderAccessAuthorization").CloudProviderAccessAuthorization;
export const CloudProviderAccessAuthorization: typeof import("./cloudProviderAccessAuthorization").CloudProviderAccessAuthorization = null as any;
utilities.lazyLoad(exports, ["CloudProviderAccessAuthorization"], () => require("./cloudProviderAccessAuthorization"));

export { CloudProviderAccessSetupArgs, CloudProviderAccessSetupState } from "./cloudProviderAccessSetup";
export type CloudProviderAccessSetup = import("./cloudProviderAccessSetup").CloudProviderAccessSetup;
export const CloudProviderAccessSetup: typeof import("./cloudProviderAccessSetup").CloudProviderAccessSetup = null as any;
utilities.lazyLoad(exports, ["CloudProviderAccessSetup"], () => require("./cloudProviderAccessSetup"));

export { ClusterArgs, ClusterState } from "./cluster";
export type Cluster = import("./cluster").Cluster;
export const Cluster: typeof import("./cluster").Cluster = null as any;
utilities.lazyLoad(exports, ["Cluster"], () => require("./cluster"));

export { ClusterOutageSimulationArgs, ClusterOutageSimulationState } from "./clusterOutageSimulation";
export type ClusterOutageSimulation = import("./clusterOutageSimulation").ClusterOutageSimulation;
export const ClusterOutageSimulation: typeof import("./clusterOutageSimulation").ClusterOutageSimulation = null as any;
utilities.lazyLoad(exports, ["ClusterOutageSimulation"], () => require("./clusterOutageSimulation"));

export { CustomDbRoleArgs, CustomDbRoleState } from "./customDbRole";
export type CustomDbRole = import("./customDbRole").CustomDbRole;
export const CustomDbRole: typeof import("./customDbRole").CustomDbRole = null as any;
utilities.lazyLoad(exports, ["CustomDbRole"], () => require("./customDbRole"));

export { CustomDnsConfigurationClusterAwsArgs, CustomDnsConfigurationClusterAwsState } from "./customDnsConfigurationClusterAws";
export type CustomDnsConfigurationClusterAws = import("./customDnsConfigurationClusterAws").CustomDnsConfigurationClusterAws;
export const CustomDnsConfigurationClusterAws: typeof import("./customDnsConfigurationClusterAws").CustomDnsConfigurationClusterAws = null as any;
utilities.lazyLoad(exports, ["CustomDnsConfigurationClusterAws"], () => require("./customDnsConfigurationClusterAws"));

export { DataLakePipelineArgs, DataLakePipelineState } from "./dataLakePipeline";
export type DataLakePipeline = import("./dataLakePipeline").DataLakePipeline;
export const DataLakePipeline: typeof import("./dataLakePipeline").DataLakePipeline = null as any;
utilities.lazyLoad(exports, ["DataLakePipeline"], () => require("./dataLakePipeline"));

export { DatabaseUserArgs, DatabaseUserState } from "./databaseUser";
export type DatabaseUser = import("./databaseUser").DatabaseUser;
export const DatabaseUser: typeof import("./databaseUser").DatabaseUser = null as any;
utilities.lazyLoad(exports, ["DatabaseUser"], () => require("./databaseUser"));

export { EncryptionAtRestArgs, EncryptionAtRestState } from "./encryptionAtRest";
export type EncryptionAtRest = import("./encryptionAtRest").EncryptionAtRest;
export const EncryptionAtRest: typeof import("./encryptionAtRest").EncryptionAtRest = null as any;
utilities.lazyLoad(exports, ["EncryptionAtRest"], () => require("./encryptionAtRest"));

export { EncryptionAtRestPrivateEndpointArgs, EncryptionAtRestPrivateEndpointState } from "./encryptionAtRestPrivateEndpoint";
export type EncryptionAtRestPrivateEndpoint = import("./encryptionAtRestPrivateEndpoint").EncryptionAtRestPrivateEndpoint;
export const EncryptionAtRestPrivateEndpoint: typeof import("./encryptionAtRestPrivateEndpoint").EncryptionAtRestPrivateEndpoint = null as any;
utilities.lazyLoad(exports, ["EncryptionAtRestPrivateEndpoint"], () => require("./encryptionAtRestPrivateEndpoint"));

export { EventTriggerArgs, EventTriggerState } from "./eventTrigger";
export type EventTrigger = import("./eventTrigger").EventTrigger;
export const EventTrigger: typeof import("./eventTrigger").EventTrigger = null as any;
utilities.lazyLoad(exports, ["EventTrigger"], () => require("./eventTrigger"));

export { FederatedDatabaseInstanceArgs, FederatedDatabaseInstanceState } from "./federatedDatabaseInstance";
export type FederatedDatabaseInstance = import("./federatedDatabaseInstance").FederatedDatabaseInstance;
export const FederatedDatabaseInstance: typeof import("./federatedDatabaseInstance").FederatedDatabaseInstance = null as any;
utilities.lazyLoad(exports, ["FederatedDatabaseInstance"], () => require("./federatedDatabaseInstance"));

export { FederatedQueryLimitArgs, FederatedQueryLimitState } from "./federatedQueryLimit";
export type FederatedQueryLimit = import("./federatedQueryLimit").FederatedQueryLimit;
export const FederatedQueryLimit: typeof import("./federatedQueryLimit").FederatedQueryLimit = null as any;
utilities.lazyLoad(exports, ["FederatedQueryLimit"], () => require("./federatedQueryLimit"));

export { FederatedSettingsIdentityProviderArgs, FederatedSettingsIdentityProviderState } from "./federatedSettingsIdentityProvider";
export type FederatedSettingsIdentityProvider = import("./federatedSettingsIdentityProvider").FederatedSettingsIdentityProvider;
export const FederatedSettingsIdentityProvider: typeof import("./federatedSettingsIdentityProvider").FederatedSettingsIdentityProvider = null as any;
utilities.lazyLoad(exports, ["FederatedSettingsIdentityProvider"], () => require("./federatedSettingsIdentityProvider"));

export { FederatedSettingsOrgConfigArgs, FederatedSettingsOrgConfigState } from "./federatedSettingsOrgConfig";
export type FederatedSettingsOrgConfig = import("./federatedSettingsOrgConfig").FederatedSettingsOrgConfig;
export const FederatedSettingsOrgConfig: typeof import("./federatedSettingsOrgConfig").FederatedSettingsOrgConfig = null as any;
utilities.lazyLoad(exports, ["FederatedSettingsOrgConfig"], () => require("./federatedSettingsOrgConfig"));

export { FederatedSettingsOrgRoleMappingArgs, FederatedSettingsOrgRoleMappingState } from "./federatedSettingsOrgRoleMapping";
export type FederatedSettingsOrgRoleMapping = import("./federatedSettingsOrgRoleMapping").FederatedSettingsOrgRoleMapping;
export const FederatedSettingsOrgRoleMapping: typeof import("./federatedSettingsOrgRoleMapping").FederatedSettingsOrgRoleMapping = null as any;
utilities.lazyLoad(exports, ["FederatedSettingsOrgRoleMapping"], () => require("./federatedSettingsOrgRoleMapping"));

export { Get509AuthenticationDatabaseUserArgs, Get509AuthenticationDatabaseUserResult, Get509AuthenticationDatabaseUserOutputArgs } from "./get509AuthenticationDatabaseUser";
export const get509AuthenticationDatabaseUser: typeof import("./get509AuthenticationDatabaseUser").get509AuthenticationDatabaseUser = null as any;
export const get509AuthenticationDatabaseUserOutput: typeof import("./get509AuthenticationDatabaseUser").get509AuthenticationDatabaseUserOutput = null as any;
utilities.lazyLoad(exports, ["get509AuthenticationDatabaseUser","get509AuthenticationDatabaseUserOutput"], () => require("./get509AuthenticationDatabaseUser"));

export { GetAccessListApiKeyArgs, GetAccessListApiKeyResult, GetAccessListApiKeyOutputArgs } from "./getAccessListApiKey";
export const getAccessListApiKey: typeof import("./getAccessListApiKey").getAccessListApiKey = null as any;
export const getAccessListApiKeyOutput: typeof import("./getAccessListApiKey").getAccessListApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getAccessListApiKey","getAccessListApiKeyOutput"], () => require("./getAccessListApiKey"));

export { GetAccessListApiKeysArgs, GetAccessListApiKeysResult, GetAccessListApiKeysOutputArgs } from "./getAccessListApiKeys";
export const getAccessListApiKeys: typeof import("./getAccessListApiKeys").getAccessListApiKeys = null as any;
export const getAccessListApiKeysOutput: typeof import("./getAccessListApiKeys").getAccessListApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getAccessListApiKeys","getAccessListApiKeysOutput"], () => require("./getAccessListApiKeys"));

export { GetAdvancedClusterArgs, GetAdvancedClusterResult, GetAdvancedClusterOutputArgs } from "./getAdvancedCluster";
export const getAdvancedCluster: typeof import("./getAdvancedCluster").getAdvancedCluster = null as any;
export const getAdvancedClusterOutput: typeof import("./getAdvancedCluster").getAdvancedClusterOutput = null as any;
utilities.lazyLoad(exports, ["getAdvancedCluster","getAdvancedClusterOutput"], () => require("./getAdvancedCluster"));

export { GetAdvancedClustersArgs, GetAdvancedClustersResult, GetAdvancedClustersOutputArgs } from "./getAdvancedClusters";
export const getAdvancedClusters: typeof import("./getAdvancedClusters").getAdvancedClusters = null as any;
export const getAdvancedClustersOutput: typeof import("./getAdvancedClusters").getAdvancedClustersOutput = null as any;
utilities.lazyLoad(exports, ["getAdvancedClusters","getAdvancedClustersOutput"], () => require("./getAdvancedClusters"));

export { GetAlertConfigurationArgs, GetAlertConfigurationResult, GetAlertConfigurationOutputArgs } from "./getAlertConfiguration";
export const getAlertConfiguration: typeof import("./getAlertConfiguration").getAlertConfiguration = null as any;
export const getAlertConfigurationOutput: typeof import("./getAlertConfiguration").getAlertConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getAlertConfiguration","getAlertConfigurationOutput"], () => require("./getAlertConfiguration"));

export { GetAlertConfigurationsArgs, GetAlertConfigurationsResult, GetAlertConfigurationsOutputArgs } from "./getAlertConfigurations";
export const getAlertConfigurations: typeof import("./getAlertConfigurations").getAlertConfigurations = null as any;
export const getAlertConfigurationsOutput: typeof import("./getAlertConfigurations").getAlertConfigurationsOutput = null as any;
utilities.lazyLoad(exports, ["getAlertConfigurations","getAlertConfigurationsOutput"], () => require("./getAlertConfigurations"));

export { GetApiKeyArgs, GetApiKeyResult, GetApiKeyOutputArgs } from "./getApiKey";
export const getApiKey: typeof import("./getApiKey").getApiKey = null as any;
export const getApiKeyOutput: typeof import("./getApiKey").getApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getApiKey","getApiKeyOutput"], () => require("./getApiKey"));

export { GetApiKeysArgs, GetApiKeysResult, GetApiKeysOutputArgs } from "./getApiKeys";
export const getApiKeys: typeof import("./getApiKeys").getApiKeys = null as any;
export const getApiKeysOutput: typeof import("./getApiKeys").getApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getApiKeys","getApiKeysOutput"], () => require("./getApiKeys"));

export { GetAtlasUserArgs, GetAtlasUserResult, GetAtlasUserOutputArgs } from "./getAtlasUser";
export const getAtlasUser: typeof import("./getAtlasUser").getAtlasUser = null as any;
export const getAtlasUserOutput: typeof import("./getAtlasUser").getAtlasUserOutput = null as any;
utilities.lazyLoad(exports, ["getAtlasUser","getAtlasUserOutput"], () => require("./getAtlasUser"));

export { GetAtlasUsersArgs, GetAtlasUsersResult, GetAtlasUsersOutputArgs } from "./getAtlasUsers";
export const getAtlasUsers: typeof import("./getAtlasUsers").getAtlasUsers = null as any;
export const getAtlasUsersOutput: typeof import("./getAtlasUsers").getAtlasUsersOutput = null as any;
utilities.lazyLoad(exports, ["getAtlasUsers","getAtlasUsersOutput"], () => require("./getAtlasUsers"));

export { GetAuditingArgs, GetAuditingResult, GetAuditingOutputArgs } from "./getAuditing";
export const getAuditing: typeof import("./getAuditing").getAuditing = null as any;
export const getAuditingOutput: typeof import("./getAuditing").getAuditingOutput = null as any;
utilities.lazyLoad(exports, ["getAuditing","getAuditingOutput"], () => require("./getAuditing"));

export { GetBackupCompliancePolicyArgs, GetBackupCompliancePolicyResult, GetBackupCompliancePolicyOutputArgs } from "./getBackupCompliancePolicy";
export const getBackupCompliancePolicy: typeof import("./getBackupCompliancePolicy").getBackupCompliancePolicy = null as any;
export const getBackupCompliancePolicyOutput: typeof import("./getBackupCompliancePolicy").getBackupCompliancePolicyOutput = null as any;
utilities.lazyLoad(exports, ["getBackupCompliancePolicy","getBackupCompliancePolicyOutput"], () => require("./getBackupCompliancePolicy"));

export { GetCloudBackupScheduleArgs, GetCloudBackupScheduleResult, GetCloudBackupScheduleOutputArgs } from "./getCloudBackupSchedule";
export const getCloudBackupSchedule: typeof import("./getCloudBackupSchedule").getCloudBackupSchedule = null as any;
export const getCloudBackupScheduleOutput: typeof import("./getCloudBackupSchedule").getCloudBackupScheduleOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBackupSchedule","getCloudBackupScheduleOutput"], () => require("./getCloudBackupSchedule"));

export { GetCloudBackupSnapshotArgs, GetCloudBackupSnapshotResult, GetCloudBackupSnapshotOutputArgs } from "./getCloudBackupSnapshot";
export const getCloudBackupSnapshot: typeof import("./getCloudBackupSnapshot").getCloudBackupSnapshot = null as any;
export const getCloudBackupSnapshotOutput: typeof import("./getCloudBackupSnapshot").getCloudBackupSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBackupSnapshot","getCloudBackupSnapshotOutput"], () => require("./getCloudBackupSnapshot"));

export { GetCloudBackupSnapshotExportBucketArgs, GetCloudBackupSnapshotExportBucketResult, GetCloudBackupSnapshotExportBucketOutputArgs } from "./getCloudBackupSnapshotExportBucket";
export const getCloudBackupSnapshotExportBucket: typeof import("./getCloudBackupSnapshotExportBucket").getCloudBackupSnapshotExportBucket = null as any;
export const getCloudBackupSnapshotExportBucketOutput: typeof import("./getCloudBackupSnapshotExportBucket").getCloudBackupSnapshotExportBucketOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBackupSnapshotExportBucket","getCloudBackupSnapshotExportBucketOutput"], () => require("./getCloudBackupSnapshotExportBucket"));

export { GetCloudBackupSnapshotExportBucketsArgs, GetCloudBackupSnapshotExportBucketsResult, GetCloudBackupSnapshotExportBucketsOutputArgs } from "./getCloudBackupSnapshotExportBuckets";
export const getCloudBackupSnapshotExportBuckets: typeof import("./getCloudBackupSnapshotExportBuckets").getCloudBackupSnapshotExportBuckets = null as any;
export const getCloudBackupSnapshotExportBucketsOutput: typeof import("./getCloudBackupSnapshotExportBuckets").getCloudBackupSnapshotExportBucketsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBackupSnapshotExportBuckets","getCloudBackupSnapshotExportBucketsOutput"], () => require("./getCloudBackupSnapshotExportBuckets"));

export { GetCloudBackupSnapshotExportJobArgs, GetCloudBackupSnapshotExportJobResult, GetCloudBackupSnapshotExportJobOutputArgs } from "./getCloudBackupSnapshotExportJob";
export const getCloudBackupSnapshotExportJob: typeof import("./getCloudBackupSnapshotExportJob").getCloudBackupSnapshotExportJob = null as any;
export const getCloudBackupSnapshotExportJobOutput: typeof import("./getCloudBackupSnapshotExportJob").getCloudBackupSnapshotExportJobOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBackupSnapshotExportJob","getCloudBackupSnapshotExportJobOutput"], () => require("./getCloudBackupSnapshotExportJob"));

export { GetCloudBackupSnapshotExportJobsArgs, GetCloudBackupSnapshotExportJobsResult, GetCloudBackupSnapshotExportJobsOutputArgs } from "./getCloudBackupSnapshotExportJobs";
export const getCloudBackupSnapshotExportJobs: typeof import("./getCloudBackupSnapshotExportJobs").getCloudBackupSnapshotExportJobs = null as any;
export const getCloudBackupSnapshotExportJobsOutput: typeof import("./getCloudBackupSnapshotExportJobs").getCloudBackupSnapshotExportJobsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBackupSnapshotExportJobs","getCloudBackupSnapshotExportJobsOutput"], () => require("./getCloudBackupSnapshotExportJobs"));

export { GetCloudBackupSnapshotRestoreJobArgs, GetCloudBackupSnapshotRestoreJobResult, GetCloudBackupSnapshotRestoreJobOutputArgs } from "./getCloudBackupSnapshotRestoreJob";
export const getCloudBackupSnapshotRestoreJob: typeof import("./getCloudBackupSnapshotRestoreJob").getCloudBackupSnapshotRestoreJob = null as any;
export const getCloudBackupSnapshotRestoreJobOutput: typeof import("./getCloudBackupSnapshotRestoreJob").getCloudBackupSnapshotRestoreJobOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBackupSnapshotRestoreJob","getCloudBackupSnapshotRestoreJobOutput"], () => require("./getCloudBackupSnapshotRestoreJob"));

export { GetCloudBackupSnapshotRestoreJobsArgs, GetCloudBackupSnapshotRestoreJobsResult, GetCloudBackupSnapshotRestoreJobsOutputArgs } from "./getCloudBackupSnapshotRestoreJobs";
export const getCloudBackupSnapshotRestoreJobs: typeof import("./getCloudBackupSnapshotRestoreJobs").getCloudBackupSnapshotRestoreJobs = null as any;
export const getCloudBackupSnapshotRestoreJobsOutput: typeof import("./getCloudBackupSnapshotRestoreJobs").getCloudBackupSnapshotRestoreJobsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBackupSnapshotRestoreJobs","getCloudBackupSnapshotRestoreJobsOutput"], () => require("./getCloudBackupSnapshotRestoreJobs"));

export { GetCloudBackupSnapshotsArgs, GetCloudBackupSnapshotsResult, GetCloudBackupSnapshotsOutputArgs } from "./getCloudBackupSnapshots";
export const getCloudBackupSnapshots: typeof import("./getCloudBackupSnapshots").getCloudBackupSnapshots = null as any;
export const getCloudBackupSnapshotsOutput: typeof import("./getCloudBackupSnapshots").getCloudBackupSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getCloudBackupSnapshots","getCloudBackupSnapshotsOutput"], () => require("./getCloudBackupSnapshots"));

export { GetCloudProviderAccessSetupArgs, GetCloudProviderAccessSetupResult, GetCloudProviderAccessSetupOutputArgs } from "./getCloudProviderAccessSetup";
export const getCloudProviderAccessSetup: typeof import("./getCloudProviderAccessSetup").getCloudProviderAccessSetup = null as any;
export const getCloudProviderAccessSetupOutput: typeof import("./getCloudProviderAccessSetup").getCloudProviderAccessSetupOutput = null as any;
utilities.lazyLoad(exports, ["getCloudProviderAccessSetup","getCloudProviderAccessSetupOutput"], () => require("./getCloudProviderAccessSetup"));

export { GetClusterArgs, GetClusterResult, GetClusterOutputArgs } from "./getCluster";
export const getCluster: typeof import("./getCluster").getCluster = null as any;
export const getClusterOutput: typeof import("./getCluster").getClusterOutput = null as any;
utilities.lazyLoad(exports, ["getCluster","getClusterOutput"], () => require("./getCluster"));

export { GetClusterOutageSimulationArgs, GetClusterOutageSimulationResult, GetClusterOutageSimulationOutputArgs } from "./getClusterOutageSimulation";
export const getClusterOutageSimulation: typeof import("./getClusterOutageSimulation").getClusterOutageSimulation = null as any;
export const getClusterOutageSimulationOutput: typeof import("./getClusterOutageSimulation").getClusterOutageSimulationOutput = null as any;
utilities.lazyLoad(exports, ["getClusterOutageSimulation","getClusterOutageSimulationOutput"], () => require("./getClusterOutageSimulation"));

export { GetClustersArgs, GetClustersResult, GetClustersOutputArgs } from "./getClusters";
export const getClusters: typeof import("./getClusters").getClusters = null as any;
export const getClustersOutput: typeof import("./getClusters").getClustersOutput = null as any;
utilities.lazyLoad(exports, ["getClusters","getClustersOutput"], () => require("./getClusters"));

export { GetControlPlaneIpAddressesResult } from "./getControlPlaneIpAddresses";
export const getControlPlaneIpAddresses: typeof import("./getControlPlaneIpAddresses").getControlPlaneIpAddresses = null as any;
export const getControlPlaneIpAddressesOutput: typeof import("./getControlPlaneIpAddresses").getControlPlaneIpAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getControlPlaneIpAddresses","getControlPlaneIpAddressesOutput"], () => require("./getControlPlaneIpAddresses"));

export { GetCustomDbRoleArgs, GetCustomDbRoleResult, GetCustomDbRoleOutputArgs } from "./getCustomDbRole";
export const getCustomDbRole: typeof import("./getCustomDbRole").getCustomDbRole = null as any;
export const getCustomDbRoleOutput: typeof import("./getCustomDbRole").getCustomDbRoleOutput = null as any;
utilities.lazyLoad(exports, ["getCustomDbRole","getCustomDbRoleOutput"], () => require("./getCustomDbRole"));

export { GetCustomDbRolesArgs, GetCustomDbRolesResult, GetCustomDbRolesOutputArgs } from "./getCustomDbRoles";
export const getCustomDbRoles: typeof import("./getCustomDbRoles").getCustomDbRoles = null as any;
export const getCustomDbRolesOutput: typeof import("./getCustomDbRoles").getCustomDbRolesOutput = null as any;
utilities.lazyLoad(exports, ["getCustomDbRoles","getCustomDbRolesOutput"], () => require("./getCustomDbRoles"));

export { GetCustomDnsConfigurationClusterAwsArgs, GetCustomDnsConfigurationClusterAwsResult, GetCustomDnsConfigurationClusterAwsOutputArgs } from "./getCustomDnsConfigurationClusterAws";
export const getCustomDnsConfigurationClusterAws: typeof import("./getCustomDnsConfigurationClusterAws").getCustomDnsConfigurationClusterAws = null as any;
export const getCustomDnsConfigurationClusterAwsOutput: typeof import("./getCustomDnsConfigurationClusterAws").getCustomDnsConfigurationClusterAwsOutput = null as any;
utilities.lazyLoad(exports, ["getCustomDnsConfigurationClusterAws","getCustomDnsConfigurationClusterAwsOutput"], () => require("./getCustomDnsConfigurationClusterAws"));

export { GetDataLakePipelineArgs, GetDataLakePipelineResult, GetDataLakePipelineOutputArgs } from "./getDataLakePipeline";
export const getDataLakePipeline: typeof import("./getDataLakePipeline").getDataLakePipeline = null as any;
export const getDataLakePipelineOutput: typeof import("./getDataLakePipeline").getDataLakePipelineOutput = null as any;
utilities.lazyLoad(exports, ["getDataLakePipeline","getDataLakePipelineOutput"], () => require("./getDataLakePipeline"));

export { GetDataLakePipelineRunArgs, GetDataLakePipelineRunResult, GetDataLakePipelineRunOutputArgs } from "./getDataLakePipelineRun";
export const getDataLakePipelineRun: typeof import("./getDataLakePipelineRun").getDataLakePipelineRun = null as any;
export const getDataLakePipelineRunOutput: typeof import("./getDataLakePipelineRun").getDataLakePipelineRunOutput = null as any;
utilities.lazyLoad(exports, ["getDataLakePipelineRun","getDataLakePipelineRunOutput"], () => require("./getDataLakePipelineRun"));

export { GetDataLakePipelineRunsArgs, GetDataLakePipelineRunsResult, GetDataLakePipelineRunsOutputArgs } from "./getDataLakePipelineRuns";
export const getDataLakePipelineRuns: typeof import("./getDataLakePipelineRuns").getDataLakePipelineRuns = null as any;
export const getDataLakePipelineRunsOutput: typeof import("./getDataLakePipelineRuns").getDataLakePipelineRunsOutput = null as any;
utilities.lazyLoad(exports, ["getDataLakePipelineRuns","getDataLakePipelineRunsOutput"], () => require("./getDataLakePipelineRuns"));

export { GetDataLakePipelinesArgs, GetDataLakePipelinesResult, GetDataLakePipelinesOutputArgs } from "./getDataLakePipelines";
export const getDataLakePipelines: typeof import("./getDataLakePipelines").getDataLakePipelines = null as any;
export const getDataLakePipelinesOutput: typeof import("./getDataLakePipelines").getDataLakePipelinesOutput = null as any;
utilities.lazyLoad(exports, ["getDataLakePipelines","getDataLakePipelinesOutput"], () => require("./getDataLakePipelines"));

export { GetDatabaseUserArgs, GetDatabaseUserResult, GetDatabaseUserOutputArgs } from "./getDatabaseUser";
export const getDatabaseUser: typeof import("./getDatabaseUser").getDatabaseUser = null as any;
export const getDatabaseUserOutput: typeof import("./getDatabaseUser").getDatabaseUserOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseUser","getDatabaseUserOutput"], () => require("./getDatabaseUser"));

export { GetDatabaseUsersArgs, GetDatabaseUsersResult, GetDatabaseUsersOutputArgs } from "./getDatabaseUsers";
export const getDatabaseUsers: typeof import("./getDatabaseUsers").getDatabaseUsers = null as any;
export const getDatabaseUsersOutput: typeof import("./getDatabaseUsers").getDatabaseUsersOutput = null as any;
utilities.lazyLoad(exports, ["getDatabaseUsers","getDatabaseUsersOutput"], () => require("./getDatabaseUsers"));

export { GetEncryptionAtRestArgs, GetEncryptionAtRestResult, GetEncryptionAtRestOutputArgs } from "./getEncryptionAtRest";
export const getEncryptionAtRest: typeof import("./getEncryptionAtRest").getEncryptionAtRest = null as any;
export const getEncryptionAtRestOutput: typeof import("./getEncryptionAtRest").getEncryptionAtRestOutput = null as any;
utilities.lazyLoad(exports, ["getEncryptionAtRest","getEncryptionAtRestOutput"], () => require("./getEncryptionAtRest"));

export { GetEncryptionAtRestPrivateEndpointArgs, GetEncryptionAtRestPrivateEndpointResult, GetEncryptionAtRestPrivateEndpointOutputArgs } from "./getEncryptionAtRestPrivateEndpoint";
export const getEncryptionAtRestPrivateEndpoint: typeof import("./getEncryptionAtRestPrivateEndpoint").getEncryptionAtRestPrivateEndpoint = null as any;
export const getEncryptionAtRestPrivateEndpointOutput: typeof import("./getEncryptionAtRestPrivateEndpoint").getEncryptionAtRestPrivateEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getEncryptionAtRestPrivateEndpoint","getEncryptionAtRestPrivateEndpointOutput"], () => require("./getEncryptionAtRestPrivateEndpoint"));

export { GetEncryptionAtRestPrivateEndpointsArgs, GetEncryptionAtRestPrivateEndpointsResult, GetEncryptionAtRestPrivateEndpointsOutputArgs } from "./getEncryptionAtRestPrivateEndpoints";
export const getEncryptionAtRestPrivateEndpoints: typeof import("./getEncryptionAtRestPrivateEndpoints").getEncryptionAtRestPrivateEndpoints = null as any;
export const getEncryptionAtRestPrivateEndpointsOutput: typeof import("./getEncryptionAtRestPrivateEndpoints").getEncryptionAtRestPrivateEndpointsOutput = null as any;
utilities.lazyLoad(exports, ["getEncryptionAtRestPrivateEndpoints","getEncryptionAtRestPrivateEndpointsOutput"], () => require("./getEncryptionAtRestPrivateEndpoints"));

export { GetEventTriggerArgs, GetEventTriggerResult, GetEventTriggerOutputArgs } from "./getEventTrigger";
export const getEventTrigger: typeof import("./getEventTrigger").getEventTrigger = null as any;
export const getEventTriggerOutput: typeof import("./getEventTrigger").getEventTriggerOutput = null as any;
utilities.lazyLoad(exports, ["getEventTrigger","getEventTriggerOutput"], () => require("./getEventTrigger"));

export { GetEventTriggersArgs, GetEventTriggersResult, GetEventTriggersOutputArgs } from "./getEventTriggers";
export const getEventTriggers: typeof import("./getEventTriggers").getEventTriggers = null as any;
export const getEventTriggersOutput: typeof import("./getEventTriggers").getEventTriggersOutput = null as any;
utilities.lazyLoad(exports, ["getEventTriggers","getEventTriggersOutput"], () => require("./getEventTriggers"));

export { GetFederatedDatabaseInstanceArgs, GetFederatedDatabaseInstanceResult, GetFederatedDatabaseInstanceOutputArgs } from "./getFederatedDatabaseInstance";
export const getFederatedDatabaseInstance: typeof import("./getFederatedDatabaseInstance").getFederatedDatabaseInstance = null as any;
export const getFederatedDatabaseInstanceOutput: typeof import("./getFederatedDatabaseInstance").getFederatedDatabaseInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getFederatedDatabaseInstance","getFederatedDatabaseInstanceOutput"], () => require("./getFederatedDatabaseInstance"));

export { GetFederatedDatabaseInstancesArgs, GetFederatedDatabaseInstancesResult, GetFederatedDatabaseInstancesOutputArgs } from "./getFederatedDatabaseInstances";
export const getFederatedDatabaseInstances: typeof import("./getFederatedDatabaseInstances").getFederatedDatabaseInstances = null as any;
export const getFederatedDatabaseInstancesOutput: typeof import("./getFederatedDatabaseInstances").getFederatedDatabaseInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getFederatedDatabaseInstances","getFederatedDatabaseInstancesOutput"], () => require("./getFederatedDatabaseInstances"));

export { GetFederatedQueryLimitArgs, GetFederatedQueryLimitResult, GetFederatedQueryLimitOutputArgs } from "./getFederatedQueryLimit";
export const getFederatedQueryLimit: typeof import("./getFederatedQueryLimit").getFederatedQueryLimit = null as any;
export const getFederatedQueryLimitOutput: typeof import("./getFederatedQueryLimit").getFederatedQueryLimitOutput = null as any;
utilities.lazyLoad(exports, ["getFederatedQueryLimit","getFederatedQueryLimitOutput"], () => require("./getFederatedQueryLimit"));

export { GetFederatedQueryLimitsArgs, GetFederatedQueryLimitsResult, GetFederatedQueryLimitsOutputArgs } from "./getFederatedQueryLimits";
export const getFederatedQueryLimits: typeof import("./getFederatedQueryLimits").getFederatedQueryLimits = null as any;
export const getFederatedQueryLimitsOutput: typeof import("./getFederatedQueryLimits").getFederatedQueryLimitsOutput = null as any;
utilities.lazyLoad(exports, ["getFederatedQueryLimits","getFederatedQueryLimitsOutput"], () => require("./getFederatedQueryLimits"));

export { GetFederatedSettingsArgs, GetFederatedSettingsResult, GetFederatedSettingsOutputArgs } from "./getFederatedSettings";
export const getFederatedSettings: typeof import("./getFederatedSettings").getFederatedSettings = null as any;
export const getFederatedSettingsOutput: typeof import("./getFederatedSettings").getFederatedSettingsOutput = null as any;
utilities.lazyLoad(exports, ["getFederatedSettings","getFederatedSettingsOutput"], () => require("./getFederatedSettings"));

export { GetFederatedSettingsIdentityProviderArgs, GetFederatedSettingsIdentityProviderResult, GetFederatedSettingsIdentityProviderOutputArgs } from "./getFederatedSettingsIdentityProvider";
export const getFederatedSettingsIdentityProvider: typeof import("./getFederatedSettingsIdentityProvider").getFederatedSettingsIdentityProvider = null as any;
export const getFederatedSettingsIdentityProviderOutput: typeof import("./getFederatedSettingsIdentityProvider").getFederatedSettingsIdentityProviderOutput = null as any;
utilities.lazyLoad(exports, ["getFederatedSettingsIdentityProvider","getFederatedSettingsIdentityProviderOutput"], () => require("./getFederatedSettingsIdentityProvider"));

export { GetFederatedSettingsIdentityProvidersArgs, GetFederatedSettingsIdentityProvidersResult, GetFederatedSettingsIdentityProvidersOutputArgs } from "./getFederatedSettingsIdentityProviders";
export const getFederatedSettingsIdentityProviders: typeof import("./getFederatedSettingsIdentityProviders").getFederatedSettingsIdentityProviders = null as any;
export const getFederatedSettingsIdentityProvidersOutput: typeof import("./getFederatedSettingsIdentityProviders").getFederatedSettingsIdentityProvidersOutput = null as any;
utilities.lazyLoad(exports, ["getFederatedSettingsIdentityProviders","getFederatedSettingsIdentityProvidersOutput"], () => require("./getFederatedSettingsIdentityProviders"));

export { GetFederatedSettingsOrgConfigArgs, GetFederatedSettingsOrgConfigResult, GetFederatedSettingsOrgConfigOutputArgs } from "./getFederatedSettingsOrgConfig";
export const getFederatedSettingsOrgConfig: typeof import("./getFederatedSettingsOrgConfig").getFederatedSettingsOrgConfig = null as any;
export const getFederatedSettingsOrgConfigOutput: typeof import("./getFederatedSettingsOrgConfig").getFederatedSettingsOrgConfigOutput = null as any;
utilities.lazyLoad(exports, ["getFederatedSettingsOrgConfig","getFederatedSettingsOrgConfigOutput"], () => require("./getFederatedSettingsOrgConfig"));

export { GetFederatedSettingsOrgConfigsArgs, GetFederatedSettingsOrgConfigsResult, GetFederatedSettingsOrgConfigsOutputArgs } from "./getFederatedSettingsOrgConfigs";
export const getFederatedSettingsOrgConfigs: typeof import("./getFederatedSettingsOrgConfigs").getFederatedSettingsOrgConfigs = null as any;
export const getFederatedSettingsOrgConfigsOutput: typeof import("./getFederatedSettingsOrgConfigs").getFederatedSettingsOrgConfigsOutput = null as any;
utilities.lazyLoad(exports, ["getFederatedSettingsOrgConfigs","getFederatedSettingsOrgConfigsOutput"], () => require("./getFederatedSettingsOrgConfigs"));

export { GetFederatedSettingsOrgRoleMappingArgs, GetFederatedSettingsOrgRoleMappingResult, GetFederatedSettingsOrgRoleMappingOutputArgs } from "./getFederatedSettingsOrgRoleMapping";
export const getFederatedSettingsOrgRoleMapping: typeof import("./getFederatedSettingsOrgRoleMapping").getFederatedSettingsOrgRoleMapping = null as any;
export const getFederatedSettingsOrgRoleMappingOutput: typeof import("./getFederatedSettingsOrgRoleMapping").getFederatedSettingsOrgRoleMappingOutput = null as any;
utilities.lazyLoad(exports, ["getFederatedSettingsOrgRoleMapping","getFederatedSettingsOrgRoleMappingOutput"], () => require("./getFederatedSettingsOrgRoleMapping"));

export { GetFederatedSettingsOrgRoleMappingsArgs, GetFederatedSettingsOrgRoleMappingsResult, GetFederatedSettingsOrgRoleMappingsOutputArgs } from "./getFederatedSettingsOrgRoleMappings";
export const getFederatedSettingsOrgRoleMappings: typeof import("./getFederatedSettingsOrgRoleMappings").getFederatedSettingsOrgRoleMappings = null as any;
export const getFederatedSettingsOrgRoleMappingsOutput: typeof import("./getFederatedSettingsOrgRoleMappings").getFederatedSettingsOrgRoleMappingsOutput = null as any;
utilities.lazyLoad(exports, ["getFederatedSettingsOrgRoleMappings","getFederatedSettingsOrgRoleMappingsOutput"], () => require("./getFederatedSettingsOrgRoleMappings"));

export { GetGlobalClusterConfigArgs, GetGlobalClusterConfigResult, GetGlobalClusterConfigOutputArgs } from "./getGlobalClusterConfig";
export const getGlobalClusterConfig: typeof import("./getGlobalClusterConfig").getGlobalClusterConfig = null as any;
export const getGlobalClusterConfigOutput: typeof import("./getGlobalClusterConfig").getGlobalClusterConfigOutput = null as any;
utilities.lazyLoad(exports, ["getGlobalClusterConfig","getGlobalClusterConfigOutput"], () => require("./getGlobalClusterConfig"));

export { GetLdapConfigurationArgs, GetLdapConfigurationResult, GetLdapConfigurationOutputArgs } from "./getLdapConfiguration";
export const getLdapConfiguration: typeof import("./getLdapConfiguration").getLdapConfiguration = null as any;
export const getLdapConfigurationOutput: typeof import("./getLdapConfiguration").getLdapConfigurationOutput = null as any;
utilities.lazyLoad(exports, ["getLdapConfiguration","getLdapConfigurationOutput"], () => require("./getLdapConfiguration"));

export { GetLdapVerifyArgs, GetLdapVerifyResult, GetLdapVerifyOutputArgs } from "./getLdapVerify";
export const getLdapVerify: typeof import("./getLdapVerify").getLdapVerify = null as any;
export const getLdapVerifyOutput: typeof import("./getLdapVerify").getLdapVerifyOutput = null as any;
utilities.lazyLoad(exports, ["getLdapVerify","getLdapVerifyOutput"], () => require("./getLdapVerify"));

export { GetMaintenanceWindowArgs, GetMaintenanceWindowResult, GetMaintenanceWindowOutputArgs } from "./getMaintenanceWindow";
export const getMaintenanceWindow: typeof import("./getMaintenanceWindow").getMaintenanceWindow = null as any;
export const getMaintenanceWindowOutput: typeof import("./getMaintenanceWindow").getMaintenanceWindowOutput = null as any;
utilities.lazyLoad(exports, ["getMaintenanceWindow","getMaintenanceWindowOutput"], () => require("./getMaintenanceWindow"));

export { GetNetworkContainerArgs, GetNetworkContainerResult, GetNetworkContainerOutputArgs } from "./getNetworkContainer";
export const getNetworkContainer: typeof import("./getNetworkContainer").getNetworkContainer = null as any;
export const getNetworkContainerOutput: typeof import("./getNetworkContainer").getNetworkContainerOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkContainer","getNetworkContainerOutput"], () => require("./getNetworkContainer"));

export { GetNetworkContainersArgs, GetNetworkContainersResult, GetNetworkContainersOutputArgs } from "./getNetworkContainers";
export const getNetworkContainers: typeof import("./getNetworkContainers").getNetworkContainers = null as any;
export const getNetworkContainersOutput: typeof import("./getNetworkContainers").getNetworkContainersOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkContainers","getNetworkContainersOutput"], () => require("./getNetworkContainers"));

export { GetNetworkPeeringArgs, GetNetworkPeeringResult, GetNetworkPeeringOutputArgs } from "./getNetworkPeering";
export const getNetworkPeering: typeof import("./getNetworkPeering").getNetworkPeering = null as any;
export const getNetworkPeeringOutput: typeof import("./getNetworkPeering").getNetworkPeeringOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkPeering","getNetworkPeeringOutput"], () => require("./getNetworkPeering"));

export { GetNetworkPeeringsArgs, GetNetworkPeeringsResult, GetNetworkPeeringsOutputArgs } from "./getNetworkPeerings";
export const getNetworkPeerings: typeof import("./getNetworkPeerings").getNetworkPeerings = null as any;
export const getNetworkPeeringsOutput: typeof import("./getNetworkPeerings").getNetworkPeeringsOutput = null as any;
utilities.lazyLoad(exports, ["getNetworkPeerings","getNetworkPeeringsOutput"], () => require("./getNetworkPeerings"));

export { GetOnlineArchiveArgs, GetOnlineArchiveResult, GetOnlineArchiveOutputArgs } from "./getOnlineArchive";
export const getOnlineArchive: typeof import("./getOnlineArchive").getOnlineArchive = null as any;
export const getOnlineArchiveOutput: typeof import("./getOnlineArchive").getOnlineArchiveOutput = null as any;
utilities.lazyLoad(exports, ["getOnlineArchive","getOnlineArchiveOutput"], () => require("./getOnlineArchive"));

export { GetOnlineArchivesArgs, GetOnlineArchivesResult, GetOnlineArchivesOutputArgs } from "./getOnlineArchives";
export const getOnlineArchives: typeof import("./getOnlineArchives").getOnlineArchives = null as any;
export const getOnlineArchivesOutput: typeof import("./getOnlineArchives").getOnlineArchivesOutput = null as any;
utilities.lazyLoad(exports, ["getOnlineArchives","getOnlineArchivesOutput"], () => require("./getOnlineArchives"));

export { GetOrgInvitationArgs, GetOrgInvitationResult, GetOrgInvitationOutputArgs } from "./getOrgInvitation";
export const getOrgInvitation: typeof import("./getOrgInvitation").getOrgInvitation = null as any;
export const getOrgInvitationOutput: typeof import("./getOrgInvitation").getOrgInvitationOutput = null as any;
utilities.lazyLoad(exports, ["getOrgInvitation","getOrgInvitationOutput"], () => require("./getOrgInvitation"));

export { GetOrganizationArgs, GetOrganizationResult, GetOrganizationOutputArgs } from "./getOrganization";
export const getOrganization: typeof import("./getOrganization").getOrganization = null as any;
export const getOrganizationOutput: typeof import("./getOrganization").getOrganizationOutput = null as any;
utilities.lazyLoad(exports, ["getOrganization","getOrganizationOutput"], () => require("./getOrganization"));

export { GetOrganizationsArgs, GetOrganizationsResult, GetOrganizationsOutputArgs } from "./getOrganizations";
export const getOrganizations: typeof import("./getOrganizations").getOrganizations = null as any;
export const getOrganizationsOutput: typeof import("./getOrganizations").getOrganizationsOutput = null as any;
utilities.lazyLoad(exports, ["getOrganizations","getOrganizationsOutput"], () => require("./getOrganizations"));

export { GetPrivateEndpointRegionalModeArgs, GetPrivateEndpointRegionalModeResult, GetPrivateEndpointRegionalModeOutputArgs } from "./getPrivateEndpointRegionalMode";
export const getPrivateEndpointRegionalMode: typeof import("./getPrivateEndpointRegionalMode").getPrivateEndpointRegionalMode = null as any;
export const getPrivateEndpointRegionalModeOutput: typeof import("./getPrivateEndpointRegionalMode").getPrivateEndpointRegionalModeOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateEndpointRegionalMode","getPrivateEndpointRegionalModeOutput"], () => require("./getPrivateEndpointRegionalMode"));

export { GetPrivateLinkEndpointArgs, GetPrivateLinkEndpointResult, GetPrivateLinkEndpointOutputArgs } from "./getPrivateLinkEndpoint";
export const getPrivateLinkEndpoint: typeof import("./getPrivateLinkEndpoint").getPrivateLinkEndpoint = null as any;
export const getPrivateLinkEndpointOutput: typeof import("./getPrivateLinkEndpoint").getPrivateLinkEndpointOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateLinkEndpoint","getPrivateLinkEndpointOutput"], () => require("./getPrivateLinkEndpoint"));

export { GetPrivateLinkEndpointServiceArgs, GetPrivateLinkEndpointServiceResult, GetPrivateLinkEndpointServiceOutputArgs } from "./getPrivateLinkEndpointService";
export const getPrivateLinkEndpointService: typeof import("./getPrivateLinkEndpointService").getPrivateLinkEndpointService = null as any;
export const getPrivateLinkEndpointServiceOutput: typeof import("./getPrivateLinkEndpointService").getPrivateLinkEndpointServiceOutput = null as any;
utilities.lazyLoad(exports, ["getPrivateLinkEndpointService","getPrivateLinkEndpointServiceOutput"], () => require("./getPrivateLinkEndpointService"));

export { GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs, GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult, GetPrivatelinkEndpointServiceDataFederationOnlineArchiveOutputArgs } from "./getPrivatelinkEndpointServiceDataFederationOnlineArchive";
export const getPrivatelinkEndpointServiceDataFederationOnlineArchive: typeof import("./getPrivatelinkEndpointServiceDataFederationOnlineArchive").getPrivatelinkEndpointServiceDataFederationOnlineArchive = null as any;
export const getPrivatelinkEndpointServiceDataFederationOnlineArchiveOutput: typeof import("./getPrivatelinkEndpointServiceDataFederationOnlineArchive").getPrivatelinkEndpointServiceDataFederationOnlineArchiveOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkEndpointServiceDataFederationOnlineArchive","getPrivatelinkEndpointServiceDataFederationOnlineArchiveOutput"], () => require("./getPrivatelinkEndpointServiceDataFederationOnlineArchive"));

export { GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs, GetPrivatelinkEndpointServiceDataFederationOnlineArchivesResult, GetPrivatelinkEndpointServiceDataFederationOnlineArchivesOutputArgs } from "./getPrivatelinkEndpointServiceDataFederationOnlineArchives";
export const getPrivatelinkEndpointServiceDataFederationOnlineArchives: typeof import("./getPrivatelinkEndpointServiceDataFederationOnlineArchives").getPrivatelinkEndpointServiceDataFederationOnlineArchives = null as any;
export const getPrivatelinkEndpointServiceDataFederationOnlineArchivesOutput: typeof import("./getPrivatelinkEndpointServiceDataFederationOnlineArchives").getPrivatelinkEndpointServiceDataFederationOnlineArchivesOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkEndpointServiceDataFederationOnlineArchives","getPrivatelinkEndpointServiceDataFederationOnlineArchivesOutput"], () => require("./getPrivatelinkEndpointServiceDataFederationOnlineArchives"));

export { GetPrivatelinkEndpointServiceServerlessArgs, GetPrivatelinkEndpointServiceServerlessResult, GetPrivatelinkEndpointServiceServerlessOutputArgs } from "./getPrivatelinkEndpointServiceServerless";
export const getPrivatelinkEndpointServiceServerless: typeof import("./getPrivatelinkEndpointServiceServerless").getPrivatelinkEndpointServiceServerless = null as any;
export const getPrivatelinkEndpointServiceServerlessOutput: typeof import("./getPrivatelinkEndpointServiceServerless").getPrivatelinkEndpointServiceServerlessOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkEndpointServiceServerless","getPrivatelinkEndpointServiceServerlessOutput"], () => require("./getPrivatelinkEndpointServiceServerless"));

export { GetPrivatelinkEndpointsServiceServerlessArgs, GetPrivatelinkEndpointsServiceServerlessResult, GetPrivatelinkEndpointsServiceServerlessOutputArgs } from "./getPrivatelinkEndpointsServiceServerless";
export const getPrivatelinkEndpointsServiceServerless: typeof import("./getPrivatelinkEndpointsServiceServerless").getPrivatelinkEndpointsServiceServerless = null as any;
export const getPrivatelinkEndpointsServiceServerlessOutput: typeof import("./getPrivatelinkEndpointsServiceServerless").getPrivatelinkEndpointsServiceServerlessOutput = null as any;
utilities.lazyLoad(exports, ["getPrivatelinkEndpointsServiceServerless","getPrivatelinkEndpointsServiceServerlessOutput"], () => require("./getPrivatelinkEndpointsServiceServerless"));

export { GetProjectArgs, GetProjectResult, GetProjectOutputArgs } from "./getProject";
export const getProject: typeof import("./getProject").getProject = null as any;
export const getProjectOutput: typeof import("./getProject").getProjectOutput = null as any;
utilities.lazyLoad(exports, ["getProject","getProjectOutput"], () => require("./getProject"));

export { GetProjectApiKeyArgs, GetProjectApiKeyResult, GetProjectApiKeyOutputArgs } from "./getProjectApiKey";
export const getProjectApiKey: typeof import("./getProjectApiKey").getProjectApiKey = null as any;
export const getProjectApiKeyOutput: typeof import("./getProjectApiKey").getProjectApiKeyOutput = null as any;
utilities.lazyLoad(exports, ["getProjectApiKey","getProjectApiKeyOutput"], () => require("./getProjectApiKey"));

export { GetProjectApiKeysArgs, GetProjectApiKeysResult, GetProjectApiKeysOutputArgs } from "./getProjectApiKeys";
export const getProjectApiKeys: typeof import("./getProjectApiKeys").getProjectApiKeys = null as any;
export const getProjectApiKeysOutput: typeof import("./getProjectApiKeys").getProjectApiKeysOutput = null as any;
utilities.lazyLoad(exports, ["getProjectApiKeys","getProjectApiKeysOutput"], () => require("./getProjectApiKeys"));

export { GetProjectInvitationArgs, GetProjectInvitationResult, GetProjectInvitationOutputArgs } from "./getProjectInvitation";
export const getProjectInvitation: typeof import("./getProjectInvitation").getProjectInvitation = null as any;
export const getProjectInvitationOutput: typeof import("./getProjectInvitation").getProjectInvitationOutput = null as any;
utilities.lazyLoad(exports, ["getProjectInvitation","getProjectInvitationOutput"], () => require("./getProjectInvitation"));

export { GetProjectIpAccessListArgs, GetProjectIpAccessListResult, GetProjectIpAccessListOutputArgs } from "./getProjectIpAccessList";
export const getProjectIpAccessList: typeof import("./getProjectIpAccessList").getProjectIpAccessList = null as any;
export const getProjectIpAccessListOutput: typeof import("./getProjectIpAccessList").getProjectIpAccessListOutput = null as any;
utilities.lazyLoad(exports, ["getProjectIpAccessList","getProjectIpAccessListOutput"], () => require("./getProjectIpAccessList"));

export { GetProjectIpAddressesArgs, GetProjectIpAddressesResult, GetProjectIpAddressesOutputArgs } from "./getProjectIpAddresses";
export const getProjectIpAddresses: typeof import("./getProjectIpAddresses").getProjectIpAddresses = null as any;
export const getProjectIpAddressesOutput: typeof import("./getProjectIpAddresses").getProjectIpAddressesOutput = null as any;
utilities.lazyLoad(exports, ["getProjectIpAddresses","getProjectIpAddressesOutput"], () => require("./getProjectIpAddresses"));

export { GetProjectsArgs, GetProjectsResult, GetProjectsOutputArgs } from "./getProjects";
export const getProjects: typeof import("./getProjects").getProjects = null as any;
export const getProjectsOutput: typeof import("./getProjects").getProjectsOutput = null as any;
utilities.lazyLoad(exports, ["getProjects","getProjectsOutput"], () => require("./getProjects"));

export { GetPushBasedLogExportArgs, GetPushBasedLogExportResult, GetPushBasedLogExportOutputArgs } from "./getPushBasedLogExport";
export const getPushBasedLogExport: typeof import("./getPushBasedLogExport").getPushBasedLogExport = null as any;
export const getPushBasedLogExportOutput: typeof import("./getPushBasedLogExport").getPushBasedLogExportOutput = null as any;
utilities.lazyLoad(exports, ["getPushBasedLogExport","getPushBasedLogExportOutput"], () => require("./getPushBasedLogExport"));

export { GetRolesOrgIdResult } from "./getRolesOrgId";
export const getRolesOrgId: typeof import("./getRolesOrgId").getRolesOrgId = null as any;
export const getRolesOrgIdOutput: typeof import("./getRolesOrgId").getRolesOrgIdOutput = null as any;
utilities.lazyLoad(exports, ["getRolesOrgId","getRolesOrgIdOutput"], () => require("./getRolesOrgId"));

export { GetSearchDeploymentArgs, GetSearchDeploymentResult, GetSearchDeploymentOutputArgs } from "./getSearchDeployment";
export const getSearchDeployment: typeof import("./getSearchDeployment").getSearchDeployment = null as any;
export const getSearchDeploymentOutput: typeof import("./getSearchDeployment").getSearchDeploymentOutput = null as any;
utilities.lazyLoad(exports, ["getSearchDeployment","getSearchDeploymentOutput"], () => require("./getSearchDeployment"));

export { GetSearchIndexArgs, GetSearchIndexResult, GetSearchIndexOutputArgs } from "./getSearchIndex";
export const getSearchIndex: typeof import("./getSearchIndex").getSearchIndex = null as any;
export const getSearchIndexOutput: typeof import("./getSearchIndex").getSearchIndexOutput = null as any;
utilities.lazyLoad(exports, ["getSearchIndex","getSearchIndexOutput"], () => require("./getSearchIndex"));

export { GetSearchIndexesArgs, GetSearchIndexesResult, GetSearchIndexesOutputArgs } from "./getSearchIndexes";
export const getSearchIndexes: typeof import("./getSearchIndexes").getSearchIndexes = null as any;
export const getSearchIndexesOutput: typeof import("./getSearchIndexes").getSearchIndexesOutput = null as any;
utilities.lazyLoad(exports, ["getSearchIndexes","getSearchIndexesOutput"], () => require("./getSearchIndexes"));

export { GetServerlessInstanceArgs, GetServerlessInstanceResult, GetServerlessInstanceOutputArgs } from "./getServerlessInstance";
export const getServerlessInstance: typeof import("./getServerlessInstance").getServerlessInstance = null as any;
export const getServerlessInstanceOutput: typeof import("./getServerlessInstance").getServerlessInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getServerlessInstance","getServerlessInstanceOutput"], () => require("./getServerlessInstance"));

export { GetServerlessInstancesArgs, GetServerlessInstancesResult, GetServerlessInstancesOutputArgs } from "./getServerlessInstances";
export const getServerlessInstances: typeof import("./getServerlessInstances").getServerlessInstances = null as any;
export const getServerlessInstancesOutput: typeof import("./getServerlessInstances").getServerlessInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getServerlessInstances","getServerlessInstancesOutput"], () => require("./getServerlessInstances"));

export { GetSharedTierRestoreJobArgs, GetSharedTierRestoreJobResult, GetSharedTierRestoreJobOutputArgs } from "./getSharedTierRestoreJob";
export const getSharedTierRestoreJob: typeof import("./getSharedTierRestoreJob").getSharedTierRestoreJob = null as any;
export const getSharedTierRestoreJobOutput: typeof import("./getSharedTierRestoreJob").getSharedTierRestoreJobOutput = null as any;
utilities.lazyLoad(exports, ["getSharedTierRestoreJob","getSharedTierRestoreJobOutput"], () => require("./getSharedTierRestoreJob"));

export { GetSharedTierRestoreJobsArgs, GetSharedTierRestoreJobsResult, GetSharedTierRestoreJobsOutputArgs } from "./getSharedTierRestoreJobs";
export const getSharedTierRestoreJobs: typeof import("./getSharedTierRestoreJobs").getSharedTierRestoreJobs = null as any;
export const getSharedTierRestoreJobsOutput: typeof import("./getSharedTierRestoreJobs").getSharedTierRestoreJobsOutput = null as any;
utilities.lazyLoad(exports, ["getSharedTierRestoreJobs","getSharedTierRestoreJobsOutput"], () => require("./getSharedTierRestoreJobs"));

export { GetSharedTierSnapshotArgs, GetSharedTierSnapshotResult, GetSharedTierSnapshotOutputArgs } from "./getSharedTierSnapshot";
export const getSharedTierSnapshot: typeof import("./getSharedTierSnapshot").getSharedTierSnapshot = null as any;
export const getSharedTierSnapshotOutput: typeof import("./getSharedTierSnapshot").getSharedTierSnapshotOutput = null as any;
utilities.lazyLoad(exports, ["getSharedTierSnapshot","getSharedTierSnapshotOutput"], () => require("./getSharedTierSnapshot"));

export { GetSharedTierSnapshotsArgs, GetSharedTierSnapshotsResult, GetSharedTierSnapshotsOutputArgs } from "./getSharedTierSnapshots";
export const getSharedTierSnapshots: typeof import("./getSharedTierSnapshots").getSharedTierSnapshots = null as any;
export const getSharedTierSnapshotsOutput: typeof import("./getSharedTierSnapshots").getSharedTierSnapshotsOutput = null as any;
utilities.lazyLoad(exports, ["getSharedTierSnapshots","getSharedTierSnapshotsOutput"], () => require("./getSharedTierSnapshots"));

export { GetStreamConnectionArgs, GetStreamConnectionResult, GetStreamConnectionOutputArgs } from "./getStreamConnection";
export const getStreamConnection: typeof import("./getStreamConnection").getStreamConnection = null as any;
export const getStreamConnectionOutput: typeof import("./getStreamConnection").getStreamConnectionOutput = null as any;
utilities.lazyLoad(exports, ["getStreamConnection","getStreamConnectionOutput"], () => require("./getStreamConnection"));

export { GetStreamConnectionsArgs, GetStreamConnectionsResult, GetStreamConnectionsOutputArgs } from "./getStreamConnections";
export const getStreamConnections: typeof import("./getStreamConnections").getStreamConnections = null as any;
export const getStreamConnectionsOutput: typeof import("./getStreamConnections").getStreamConnectionsOutput = null as any;
utilities.lazyLoad(exports, ["getStreamConnections","getStreamConnectionsOutput"], () => require("./getStreamConnections"));

export { GetStreamInstanceArgs, GetStreamInstanceResult, GetStreamInstanceOutputArgs } from "./getStreamInstance";
export const getStreamInstance: typeof import("./getStreamInstance").getStreamInstance = null as any;
export const getStreamInstanceOutput: typeof import("./getStreamInstance").getStreamInstanceOutput = null as any;
utilities.lazyLoad(exports, ["getStreamInstance","getStreamInstanceOutput"], () => require("./getStreamInstance"));

export { GetStreamInstancesArgs, GetStreamInstancesResult, GetStreamInstancesOutputArgs } from "./getStreamInstances";
export const getStreamInstances: typeof import("./getStreamInstances").getStreamInstances = null as any;
export const getStreamInstancesOutput: typeof import("./getStreamInstances").getStreamInstancesOutput = null as any;
utilities.lazyLoad(exports, ["getStreamInstances","getStreamInstancesOutput"], () => require("./getStreamInstances"));

export { GetStreamProcessorArgs, GetStreamProcessorResult, GetStreamProcessorOutputArgs } from "./getStreamProcessor";
export const getStreamProcessor: typeof import("./getStreamProcessor").getStreamProcessor = null as any;
export const getStreamProcessorOutput: typeof import("./getStreamProcessor").getStreamProcessorOutput = null as any;
utilities.lazyLoad(exports, ["getStreamProcessor","getStreamProcessorOutput"], () => require("./getStreamProcessor"));

export { GetStreamProcessorsArgs, GetStreamProcessorsResult, GetStreamProcessorsOutputArgs } from "./getStreamProcessors";
export const getStreamProcessors: typeof import("./getStreamProcessors").getStreamProcessors = null as any;
export const getStreamProcessorsOutput: typeof import("./getStreamProcessors").getStreamProcessorsOutput = null as any;
utilities.lazyLoad(exports, ["getStreamProcessors","getStreamProcessorsOutput"], () => require("./getStreamProcessors"));

export { GetTeamArgs, GetTeamResult, GetTeamOutputArgs } from "./getTeam";
export const getTeam: typeof import("./getTeam").getTeam = null as any;
export const getTeamOutput: typeof import("./getTeam").getTeamOutput = null as any;
utilities.lazyLoad(exports, ["getTeam","getTeamOutput"], () => require("./getTeam"));

export { GetTeamsArgs, GetTeamsResult, GetTeamsOutputArgs } from "./getTeams";
export const getTeams: typeof import("./getTeams").getTeams = null as any;
export const getTeamsOutput: typeof import("./getTeams").getTeamsOutput = null as any;
utilities.lazyLoad(exports, ["getTeams","getTeamsOutput"], () => require("./getTeams"));

export { GetThirdPartyIntegrationArgs, GetThirdPartyIntegrationResult, GetThirdPartyIntegrationOutputArgs } from "./getThirdPartyIntegration";
export const getThirdPartyIntegration: typeof import("./getThirdPartyIntegration").getThirdPartyIntegration = null as any;
export const getThirdPartyIntegrationOutput: typeof import("./getThirdPartyIntegration").getThirdPartyIntegrationOutput = null as any;
utilities.lazyLoad(exports, ["getThirdPartyIntegration","getThirdPartyIntegrationOutput"], () => require("./getThirdPartyIntegration"));

export { GetThirdPartyIntegrationsArgs, GetThirdPartyIntegrationsResult, GetThirdPartyIntegrationsOutputArgs } from "./getThirdPartyIntegrations";
export const getThirdPartyIntegrations: typeof import("./getThirdPartyIntegrations").getThirdPartyIntegrations = null as any;
export const getThirdPartyIntegrationsOutput: typeof import("./getThirdPartyIntegrations").getThirdPartyIntegrationsOutput = null as any;
utilities.lazyLoad(exports, ["getThirdPartyIntegrations","getThirdPartyIntegrationsOutput"], () => require("./getThirdPartyIntegrations"));

export { GetX509AuthenticationDatabaseUserArgs, GetX509AuthenticationDatabaseUserResult, GetX509AuthenticationDatabaseUserOutputArgs } from "./getX509AuthenticationDatabaseUser";
export const getX509AuthenticationDatabaseUser: typeof import("./getX509AuthenticationDatabaseUser").getX509AuthenticationDatabaseUser = null as any;
export const getX509AuthenticationDatabaseUserOutput: typeof import("./getX509AuthenticationDatabaseUser").getX509AuthenticationDatabaseUserOutput = null as any;
utilities.lazyLoad(exports, ["getX509AuthenticationDatabaseUser","getX509AuthenticationDatabaseUserOutput"], () => require("./getX509AuthenticationDatabaseUser"));

export { GlobalClusterConfigArgs, GlobalClusterConfigState } from "./globalClusterConfig";
export type GlobalClusterConfig = import("./globalClusterConfig").GlobalClusterConfig;
export const GlobalClusterConfig: typeof import("./globalClusterConfig").GlobalClusterConfig = null as any;
utilities.lazyLoad(exports, ["GlobalClusterConfig"], () => require("./globalClusterConfig"));

export { LdapConfigurationArgs, LdapConfigurationState } from "./ldapConfiguration";
export type LdapConfiguration = import("./ldapConfiguration").LdapConfiguration;
export const LdapConfiguration: typeof import("./ldapConfiguration").LdapConfiguration = null as any;
utilities.lazyLoad(exports, ["LdapConfiguration"], () => require("./ldapConfiguration"));

export { LdapVerifyArgs, LdapVerifyState } from "./ldapVerify";
export type LdapVerify = import("./ldapVerify").LdapVerify;
export const LdapVerify: typeof import("./ldapVerify").LdapVerify = null as any;
utilities.lazyLoad(exports, ["LdapVerify"], () => require("./ldapVerify"));

export { MaintenanceWindowArgs, MaintenanceWindowState } from "./maintenanceWindow";
export type MaintenanceWindow = import("./maintenanceWindow").MaintenanceWindow;
export const MaintenanceWindow: typeof import("./maintenanceWindow").MaintenanceWindow = null as any;
utilities.lazyLoad(exports, ["MaintenanceWindow"], () => require("./maintenanceWindow"));

export { NetworkContainerArgs, NetworkContainerState } from "./networkContainer";
export type NetworkContainer = import("./networkContainer").NetworkContainer;
export const NetworkContainer: typeof import("./networkContainer").NetworkContainer = null as any;
utilities.lazyLoad(exports, ["NetworkContainer"], () => require("./networkContainer"));

export { NetworkPeeringArgs, NetworkPeeringState } from "./networkPeering";
export type NetworkPeering = import("./networkPeering").NetworkPeering;
export const NetworkPeering: typeof import("./networkPeering").NetworkPeering = null as any;
utilities.lazyLoad(exports, ["NetworkPeering"], () => require("./networkPeering"));

export { OnlineArchiveArgs, OnlineArchiveState } from "./onlineArchive";
export type OnlineArchive = import("./onlineArchive").OnlineArchive;
export const OnlineArchive: typeof import("./onlineArchive").OnlineArchive = null as any;
utilities.lazyLoad(exports, ["OnlineArchive"], () => require("./onlineArchive"));

export { OrgInvitationArgs, OrgInvitationState } from "./orgInvitation";
export type OrgInvitation = import("./orgInvitation").OrgInvitation;
export const OrgInvitation: typeof import("./orgInvitation").OrgInvitation = null as any;
utilities.lazyLoad(exports, ["OrgInvitation"], () => require("./orgInvitation"));

export { OrganizationArgs, OrganizationState } from "./organization";
export type Organization = import("./organization").Organization;
export const Organization: typeof import("./organization").Organization = null as any;
utilities.lazyLoad(exports, ["Organization"], () => require("./organization"));

export { PrivateEndpointRegionalModeArgs, PrivateEndpointRegionalModeState } from "./privateEndpointRegionalMode";
export type PrivateEndpointRegionalMode = import("./privateEndpointRegionalMode").PrivateEndpointRegionalMode;
export const PrivateEndpointRegionalMode: typeof import("./privateEndpointRegionalMode").PrivateEndpointRegionalMode = null as any;
utilities.lazyLoad(exports, ["PrivateEndpointRegionalMode"], () => require("./privateEndpointRegionalMode"));

export { PrivateLinkEndpointArgs, PrivateLinkEndpointState } from "./privateLinkEndpoint";
export type PrivateLinkEndpoint = import("./privateLinkEndpoint").PrivateLinkEndpoint;
export const PrivateLinkEndpoint: typeof import("./privateLinkEndpoint").PrivateLinkEndpoint = null as any;
utilities.lazyLoad(exports, ["PrivateLinkEndpoint"], () => require("./privateLinkEndpoint"));

export { PrivateLinkEndpointServiceArgs, PrivateLinkEndpointServiceState } from "./privateLinkEndpointService";
export type PrivateLinkEndpointService = import("./privateLinkEndpointService").PrivateLinkEndpointService;
export const PrivateLinkEndpointService: typeof import("./privateLinkEndpointService").PrivateLinkEndpointService = null as any;
utilities.lazyLoad(exports, ["PrivateLinkEndpointService"], () => require("./privateLinkEndpointService"));

export { PrivatelinkEndpointServerlessArgs, PrivatelinkEndpointServerlessState } from "./privatelinkEndpointServerless";
export type PrivatelinkEndpointServerless = import("./privatelinkEndpointServerless").PrivatelinkEndpointServerless;
export const PrivatelinkEndpointServerless: typeof import("./privatelinkEndpointServerless").PrivatelinkEndpointServerless = null as any;
utilities.lazyLoad(exports, ["PrivatelinkEndpointServerless"], () => require("./privatelinkEndpointServerless"));

export { PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs, PrivatelinkEndpointServiceDataFederationOnlineArchiveState } from "./privatelinkEndpointServiceDataFederationOnlineArchive";
export type PrivatelinkEndpointServiceDataFederationOnlineArchive = import("./privatelinkEndpointServiceDataFederationOnlineArchive").PrivatelinkEndpointServiceDataFederationOnlineArchive;
export const PrivatelinkEndpointServiceDataFederationOnlineArchive: typeof import("./privatelinkEndpointServiceDataFederationOnlineArchive").PrivatelinkEndpointServiceDataFederationOnlineArchive = null as any;
utilities.lazyLoad(exports, ["PrivatelinkEndpointServiceDataFederationOnlineArchive"], () => require("./privatelinkEndpointServiceDataFederationOnlineArchive"));

export { PrivatelinkEndpointServiceServerlessArgs, PrivatelinkEndpointServiceServerlessState } from "./privatelinkEndpointServiceServerless";
export type PrivatelinkEndpointServiceServerless = import("./privatelinkEndpointServiceServerless").PrivatelinkEndpointServiceServerless;
export const PrivatelinkEndpointServiceServerless: typeof import("./privatelinkEndpointServiceServerless").PrivatelinkEndpointServiceServerless = null as any;
utilities.lazyLoad(exports, ["PrivatelinkEndpointServiceServerless"], () => require("./privatelinkEndpointServiceServerless"));

export { ProjectArgs, ProjectState } from "./project";
export type Project = import("./project").Project;
export const Project: typeof import("./project").Project = null as any;
utilities.lazyLoad(exports, ["Project"], () => require("./project"));

export { ProjectApiKeyArgs, ProjectApiKeyState } from "./projectApiKey";
export type ProjectApiKey = import("./projectApiKey").ProjectApiKey;
export const ProjectApiKey: typeof import("./projectApiKey").ProjectApiKey = null as any;
utilities.lazyLoad(exports, ["ProjectApiKey"], () => require("./projectApiKey"));

export { ProjectInvitationArgs, ProjectInvitationState } from "./projectInvitation";
export type ProjectInvitation = import("./projectInvitation").ProjectInvitation;
export const ProjectInvitation: typeof import("./projectInvitation").ProjectInvitation = null as any;
utilities.lazyLoad(exports, ["ProjectInvitation"], () => require("./projectInvitation"));

export { ProjectIpAccessListArgs, ProjectIpAccessListState } from "./projectIpAccessList";
export type ProjectIpAccessList = import("./projectIpAccessList").ProjectIpAccessList;
export const ProjectIpAccessList: typeof import("./projectIpAccessList").ProjectIpAccessList = null as any;
utilities.lazyLoad(exports, ["ProjectIpAccessList"], () => require("./projectIpAccessList"));

export { ProviderArgs } from "./provider";
export type Provider = import("./provider").Provider;
export const Provider: typeof import("./provider").Provider = null as any;
utilities.lazyLoad(exports, ["Provider"], () => require("./provider"));

export { PushBasedLogExportArgs, PushBasedLogExportState } from "./pushBasedLogExport";
export type PushBasedLogExport = import("./pushBasedLogExport").PushBasedLogExport;
export const PushBasedLogExport: typeof import("./pushBasedLogExport").PushBasedLogExport = null as any;
utilities.lazyLoad(exports, ["PushBasedLogExport"], () => require("./pushBasedLogExport"));

export { SearchDeploymentArgs, SearchDeploymentState } from "./searchDeployment";
export type SearchDeployment = import("./searchDeployment").SearchDeployment;
export const SearchDeployment: typeof import("./searchDeployment").SearchDeployment = null as any;
utilities.lazyLoad(exports, ["SearchDeployment"], () => require("./searchDeployment"));

export { SearchIndexArgs, SearchIndexState } from "./searchIndex";
export type SearchIndex = import("./searchIndex").SearchIndex;
export const SearchIndex: typeof import("./searchIndex").SearchIndex = null as any;
utilities.lazyLoad(exports, ["SearchIndex"], () => require("./searchIndex"));

export { ServerlessInstanceArgs, ServerlessInstanceState } from "./serverlessInstance";
export type ServerlessInstance = import("./serverlessInstance").ServerlessInstance;
export const ServerlessInstance: typeof import("./serverlessInstance").ServerlessInstance = null as any;
utilities.lazyLoad(exports, ["ServerlessInstance"], () => require("./serverlessInstance"));

export { StreamConnectionArgs, StreamConnectionState } from "./streamConnection";
export type StreamConnection = import("./streamConnection").StreamConnection;
export const StreamConnection: typeof import("./streamConnection").StreamConnection = null as any;
utilities.lazyLoad(exports, ["StreamConnection"], () => require("./streamConnection"));

export { StreamInstanceArgs, StreamInstanceState } from "./streamInstance";
export type StreamInstance = import("./streamInstance").StreamInstance;
export const StreamInstance: typeof import("./streamInstance").StreamInstance = null as any;
utilities.lazyLoad(exports, ["StreamInstance"], () => require("./streamInstance"));

export { StreamProcessorArgs, StreamProcessorState } from "./streamProcessor";
export type StreamProcessor = import("./streamProcessor").StreamProcessor;
export const StreamProcessor: typeof import("./streamProcessor").StreamProcessor = null as any;
utilities.lazyLoad(exports, ["StreamProcessor"], () => require("./streamProcessor"));

export { TeamArgs, TeamState } from "./team";
export type Team = import("./team").Team;
export const Team: typeof import("./team").Team = null as any;
utilities.lazyLoad(exports, ["Team"], () => require("./team"));

export { TeamsArgs, TeamsState } from "./teams";
export type Teams = import("./teams").Teams;
export const Teams: typeof import("./teams").Teams = null as any;
utilities.lazyLoad(exports, ["Teams"], () => require("./teams"));

export { ThirdPartyIntegrationArgs, ThirdPartyIntegrationState } from "./thirdPartyIntegration";
export type ThirdPartyIntegration = import("./thirdPartyIntegration").ThirdPartyIntegration;
export const ThirdPartyIntegration: typeof import("./thirdPartyIntegration").ThirdPartyIntegration = null as any;
utilities.lazyLoad(exports, ["ThirdPartyIntegration"], () => require("./thirdPartyIntegration"));

export { X509AuthenticationDatabaseUserArgs, X509AuthenticationDatabaseUserState } from "./x509authenticationDatabaseUser";
export type X509AuthenticationDatabaseUser = import("./x509authenticationDatabaseUser").X509AuthenticationDatabaseUser;
export const X509AuthenticationDatabaseUser: typeof import("./x509authenticationDatabaseUser").X509AuthenticationDatabaseUser = null as any;
utilities.lazyLoad(exports, ["X509AuthenticationDatabaseUser"], () => require("./x509authenticationDatabaseUser"));


// Export sub-modules:
import * as config from "./config";
import * as types from "./types";

export {
    config,
    types,
};

const _module = {
    version: utilities.getVersion(),
    construct: (name: string, type: string, urn: string): pulumi.Resource => {
        switch (type) {
            case "mongodbatlas:index/accessListApiKey:AccessListApiKey":
                return new AccessListApiKey(name, <any>undefined, { urn })
            case "mongodbatlas:index/advancedCluster:AdvancedCluster":
                return new AdvancedCluster(name, <any>undefined, { urn })
            case "mongodbatlas:index/alertConfiguration:AlertConfiguration":
                return new AlertConfiguration(name, <any>undefined, { urn })
            case "mongodbatlas:index/apiKey:ApiKey":
                return new ApiKey(name, <any>undefined, { urn })
            case "mongodbatlas:index/auditing:Auditing":
                return new Auditing(name, <any>undefined, { urn })
            case "mongodbatlas:index/backupCompliancePolicy:BackupCompliancePolicy":
                return new BackupCompliancePolicy(name, <any>undefined, { urn })
            case "mongodbatlas:index/cloudBackupSchedule:CloudBackupSchedule":
                return new CloudBackupSchedule(name, <any>undefined, { urn })
            case "mongodbatlas:index/cloudBackupSnapshot:CloudBackupSnapshot":
                return new CloudBackupSnapshot(name, <any>undefined, { urn })
            case "mongodbatlas:index/cloudBackupSnapshotExportBucket:CloudBackupSnapshotExportBucket":
                return new CloudBackupSnapshotExportBucket(name, <any>undefined, { urn })
            case "mongodbatlas:index/cloudBackupSnapshotExportJob:CloudBackupSnapshotExportJob":
                return new CloudBackupSnapshotExportJob(name, <any>undefined, { urn })
            case "mongodbatlas:index/cloudBackupSnapshotRestoreJob:CloudBackupSnapshotRestoreJob":
                return new CloudBackupSnapshotRestoreJob(name, <any>undefined, { urn })
            case "mongodbatlas:index/cloudProviderAccessAuthorization:CloudProviderAccessAuthorization":
                return new CloudProviderAccessAuthorization(name, <any>undefined, { urn })
            case "mongodbatlas:index/cloudProviderAccessSetup:CloudProviderAccessSetup":
                return new CloudProviderAccessSetup(name, <any>undefined, { urn })
            case "mongodbatlas:index/cluster:Cluster":
                return new Cluster(name, <any>undefined, { urn })
            case "mongodbatlas:index/clusterOutageSimulation:ClusterOutageSimulation":
                return new ClusterOutageSimulation(name, <any>undefined, { urn })
            case "mongodbatlas:index/customDbRole:CustomDbRole":
                return new CustomDbRole(name, <any>undefined, { urn })
            case "mongodbatlas:index/customDnsConfigurationClusterAws:CustomDnsConfigurationClusterAws":
                return new CustomDnsConfigurationClusterAws(name, <any>undefined, { urn })
            case "mongodbatlas:index/dataLakePipeline:DataLakePipeline":
                return new DataLakePipeline(name, <any>undefined, { urn })
            case "mongodbatlas:index/databaseUser:DatabaseUser":
                return new DatabaseUser(name, <any>undefined, { urn })
            case "mongodbatlas:index/encryptionAtRest:EncryptionAtRest":
                return new EncryptionAtRest(name, <any>undefined, { urn })
            case "mongodbatlas:index/encryptionAtRestPrivateEndpoint:EncryptionAtRestPrivateEndpoint":
                return new EncryptionAtRestPrivateEndpoint(name, <any>undefined, { urn })
            case "mongodbatlas:index/eventTrigger:EventTrigger":
                return new EventTrigger(name, <any>undefined, { urn })
            case "mongodbatlas:index/federatedDatabaseInstance:FederatedDatabaseInstance":
                return new FederatedDatabaseInstance(name, <any>undefined, { urn })
            case "mongodbatlas:index/federatedQueryLimit:FederatedQueryLimit":
                return new FederatedQueryLimit(name, <any>undefined, { urn })
            case "mongodbatlas:index/federatedSettingsIdentityProvider:FederatedSettingsIdentityProvider":
                return new FederatedSettingsIdentityProvider(name, <any>undefined, { urn })
            case "mongodbatlas:index/federatedSettingsOrgConfig:FederatedSettingsOrgConfig":
                return new FederatedSettingsOrgConfig(name, <any>undefined, { urn })
            case "mongodbatlas:index/federatedSettingsOrgRoleMapping:FederatedSettingsOrgRoleMapping":
                return new FederatedSettingsOrgRoleMapping(name, <any>undefined, { urn })
            case "mongodbatlas:index/globalClusterConfig:GlobalClusterConfig":
                return new GlobalClusterConfig(name, <any>undefined, { urn })
            case "mongodbatlas:index/ldapConfiguration:LdapConfiguration":
                return new LdapConfiguration(name, <any>undefined, { urn })
            case "mongodbatlas:index/ldapVerify:LdapVerify":
                return new LdapVerify(name, <any>undefined, { urn })
            case "mongodbatlas:index/maintenanceWindow:MaintenanceWindow":
                return new MaintenanceWindow(name, <any>undefined, { urn })
            case "mongodbatlas:index/networkContainer:NetworkContainer":
                return new NetworkContainer(name, <any>undefined, { urn })
            case "mongodbatlas:index/networkPeering:NetworkPeering":
                return new NetworkPeering(name, <any>undefined, { urn })
            case "mongodbatlas:index/onlineArchive:OnlineArchive":
                return new OnlineArchive(name, <any>undefined, { urn })
            case "mongodbatlas:index/orgInvitation:OrgInvitation":
                return new OrgInvitation(name, <any>undefined, { urn })
            case "mongodbatlas:index/organization:Organization":
                return new Organization(name, <any>undefined, { urn })
            case "mongodbatlas:index/privateEndpointRegionalMode:PrivateEndpointRegionalMode":
                return new PrivateEndpointRegionalMode(name, <any>undefined, { urn })
            case "mongodbatlas:index/privateLinkEndpoint:PrivateLinkEndpoint":
                return new PrivateLinkEndpoint(name, <any>undefined, { urn })
            case "mongodbatlas:index/privateLinkEndpointService:PrivateLinkEndpointService":
                return new PrivateLinkEndpointService(name, <any>undefined, { urn })
            case "mongodbatlas:index/privatelinkEndpointServerless:PrivatelinkEndpointServerless":
                return new PrivatelinkEndpointServerless(name, <any>undefined, { urn })
            case "mongodbatlas:index/privatelinkEndpointServiceDataFederationOnlineArchive:PrivatelinkEndpointServiceDataFederationOnlineArchive":
                return new PrivatelinkEndpointServiceDataFederationOnlineArchive(name, <any>undefined, { urn })
            case "mongodbatlas:index/privatelinkEndpointServiceServerless:PrivatelinkEndpointServiceServerless":
                return new PrivatelinkEndpointServiceServerless(name, <any>undefined, { urn })
            case "mongodbatlas:index/project:Project":
                return new Project(name, <any>undefined, { urn })
            case "mongodbatlas:index/projectApiKey:ProjectApiKey":
                return new ProjectApiKey(name, <any>undefined, { urn })
            case "mongodbatlas:index/projectInvitation:ProjectInvitation":
                return new ProjectInvitation(name, <any>undefined, { urn })
            case "mongodbatlas:index/projectIpAccessList:ProjectIpAccessList":
                return new ProjectIpAccessList(name, <any>undefined, { urn })
            case "mongodbatlas:index/pushBasedLogExport:PushBasedLogExport":
                return new PushBasedLogExport(name, <any>undefined, { urn })
            case "mongodbatlas:index/searchDeployment:SearchDeployment":
                return new SearchDeployment(name, <any>undefined, { urn })
            case "mongodbatlas:index/searchIndex:SearchIndex":
                return new SearchIndex(name, <any>undefined, { urn })
            case "mongodbatlas:index/serverlessInstance:ServerlessInstance":
                return new ServerlessInstance(name, <any>undefined, { urn })
            case "mongodbatlas:index/streamConnection:StreamConnection":
                return new StreamConnection(name, <any>undefined, { urn })
            case "mongodbatlas:index/streamInstance:StreamInstance":
                return new StreamInstance(name, <any>undefined, { urn })
            case "mongodbatlas:index/streamProcessor:StreamProcessor":
                return new StreamProcessor(name, <any>undefined, { urn })
            case "mongodbatlas:index/team:Team":
                return new Team(name, <any>undefined, { urn })
            case "mongodbatlas:index/teams:Teams":
                return new Teams(name, <any>undefined, { urn })
            case "mongodbatlas:index/thirdPartyIntegration:ThirdPartyIntegration":
                return new ThirdPartyIntegration(name, <any>undefined, { urn })
            case "mongodbatlas:index/x509AuthenticationDatabaseUser:X509AuthenticationDatabaseUser":
                return new X509AuthenticationDatabaseUser(name, <any>undefined, { urn })
            default:
                throw new Error(`unknown resource type ${type}`);
        }
    },
};
pulumi.runtime.registerResourceModule("mongodbatlas", "index/accessListApiKey", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/advancedCluster", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/alertConfiguration", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/apiKey", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/auditing", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/backupCompliancePolicy", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudBackupSchedule", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudBackupSnapshot", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudBackupSnapshotExportBucket", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudBackupSnapshotExportJob", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudBackupSnapshotRestoreJob", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudProviderAccessAuthorization", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cloudProviderAccessSetup", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/cluster", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/clusterOutageSimulation", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/customDbRole", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/customDnsConfigurationClusterAws", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/dataLakePipeline", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/databaseUser", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/encryptionAtRest", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/encryptionAtRestPrivateEndpoint", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/eventTrigger", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/federatedDatabaseInstance", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/federatedQueryLimit", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/federatedSettingsIdentityProvider", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/federatedSettingsOrgConfig", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/federatedSettingsOrgRoleMapping", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/globalClusterConfig", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/ldapConfiguration", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/ldapVerify", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/maintenanceWindow", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/networkContainer", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/networkPeering", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/onlineArchive", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/orgInvitation", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/organization", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/privateEndpointRegionalMode", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/privateLinkEndpoint", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/privateLinkEndpointService", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/privatelinkEndpointServerless", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/privatelinkEndpointServiceDataFederationOnlineArchive", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/privatelinkEndpointServiceServerless", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/project", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/projectApiKey", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/projectInvitation", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/projectIpAccessList", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/pushBasedLogExport", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/searchDeployment", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/searchIndex", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/serverlessInstance", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/streamConnection", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/streamInstance", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/streamProcessor", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/team", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/teams", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/thirdPartyIntegration", _module)
pulumi.runtime.registerResourceModule("mongodbatlas", "index/x509AuthenticationDatabaseUser", _module)
pulumi.runtime.registerResourcePackage("mongodbatlas", {
    version: utilities.getVersion(),
    constructProvider: (name: string, type: string, urn: string): pulumi.ProviderResource => {
        if (type !== "pulumi:providers:mongodbatlas") {
            throw new Error(`unknown provider type ${type}`);
        }
        return new Provider(name, <any>undefined, { urn });
    },
});
