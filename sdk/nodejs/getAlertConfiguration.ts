// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testAlertConfiguration = new mongodbatlas.AlertConfiguration("test", {
 *     projectId: "<PROJECT-ID>",
 *     eventType: "OUTSIDE_METRIC_THRESHOLD",
 *     enabled: true,
 *     notifications: [{
 *         typeName: "GROUP",
 *         intervalMin: 5,
 *         delayMin: 0,
 *         smsEnabled: false,
 *         emailEnabled: true,
 *     }],
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     metricThresholdConfig: {
 *         metricName: "ASSERT_REGULAR",
 *         operator: "LESS_THAN",
 *         threshold: 99,
 *         units: "RAW",
 *         mode: "AVERAGE",
 *     },
 * });
 * const test = mongodbatlas.getAlertConfigurationOutput({
 *     projectId: testAlertConfiguration.projectId,
 *     alertConfigurationId: testAlertConfiguration.alertConfigurationId,
 * });
 * ```
 *
 * > **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testAlertConfiguration = new mongodbatlas.AlertConfiguration("test", {
 *     projectId: "<PROJECT-ID>",
 *     eventType: "REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
 *     enabled: true,
 *     notifications: [{
 *         typeName: "GROUP",
 *         intervalMin: 5,
 *         delayMin: 0,
 *         smsEnabled: false,
 *         emailEnabled: true,
 *         roles: [
 *             "GROUP_CHARTS_ADMIN",
 *             "GROUP_CLUSTER_MANAGER",
 *         ],
 *     }],
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     thresholdConfig: {
 *         operator: "LESS_THAN",
 *         threshold: 1,
 *         units: "HOURS",
 *     },
 * });
 * const test = mongodbatlas.getAlertConfigurationOutput({
 *     projectId: testAlertConfiguration.projectId,
 *     alertConfigurationId: testAlertConfiguration.alertConfigurationId,
 * });
 * ```
 *
 * Utilize dataSource to generate resource hcl and import statement. Useful if you have a specific alertConfigurationId and are looking to manage it as is in state. To import all alerts, refer to the documentation on dataSourceMongodbatlasAlertConfigurations
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getAlertConfiguration({
 *     projectId: projectId,
 *     alertConfigurationId: alertConfigurationId,
 *     outputs: [
 *         {
 *             type: "resource_hcl",
 *             label: "test",
 *         },
 *         {
 *             type: "resource_import",
 *             label: "test",
 *         },
 *     ],
 * });
 * ```
 */
export function getAlertConfiguration(args: GetAlertConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetAlertConfigurationResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getAlertConfiguration:getAlertConfiguration", {
        "alertConfigurationId": args.alertConfigurationId,
        "outputs": args.outputs,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAlertConfiguration.
 */
export interface GetAlertConfigurationArgs {
    /**
     * Unique identifier for the alert configuration.
     */
    alertConfigurationId: string;
    /**
     * List of formatted output requested for this alert configuration
     * * `output.#.type` - (Required) If the output is requested, you must specify its type. The format is computed as `output.#.value`, the following are the supported types:
     */
    outputs?: inputs.GetAlertConfigurationOutput[];
    /**
     * The ID of the project where the alert configuration will create.
     */
    projectId: string;
}

/**
 * A collection of values returned by getAlertConfiguration.
 */
export interface GetAlertConfigurationResult {
    readonly alertConfigurationId: string;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
     */
    readonly created: string;
    /**
     * If set to true, the alert configuration is enabled. If enabled is not exported it is set to false.
     */
    readonly enabled: boolean;
    /**
     * The type of event that will trigger an alert.
     */
    readonly eventType: string;
    readonly id: string;
    /**
     * Rules to apply when matching an object against this alert configuration. See matchers.
     */
    readonly matchers: outputs.GetAlertConfigurationMatcher[];
    /**
     * The threshold that causes an alert to be triggered. Required if `eventTypeName` : `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`. See metric threshold config.
     */
    readonly metricThresholdConfigs: outputs.GetAlertConfigurationMetricThresholdConfig[];
    readonly notifications: outputs.GetAlertConfigurationNotification[];
    readonly outputs?: outputs.GetAlertConfigurationOutput[];
    readonly projectId: string;
    /**
     * Threshold that triggers an alert. Required if `eventTypeName` is any value other than `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`. See threshold config.
     */
    readonly thresholdConfigs: outputs.GetAlertConfigurationThresholdConfig[];
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
     */
    readonly updated: string;
}
/**
 * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testAlertConfiguration = new mongodbatlas.AlertConfiguration("test", {
 *     projectId: "<PROJECT-ID>",
 *     eventType: "OUTSIDE_METRIC_THRESHOLD",
 *     enabled: true,
 *     notifications: [{
 *         typeName: "GROUP",
 *         intervalMin: 5,
 *         delayMin: 0,
 *         smsEnabled: false,
 *         emailEnabled: true,
 *     }],
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     metricThresholdConfig: {
 *         metricName: "ASSERT_REGULAR",
 *         operator: "LESS_THAN",
 *         threshold: 99,
 *         units: "RAW",
 *         mode: "AVERAGE",
 *     },
 * });
 * const test = mongodbatlas.getAlertConfigurationOutput({
 *     projectId: testAlertConfiguration.projectId,
 *     alertConfigurationId: testAlertConfiguration.alertConfigurationId,
 * });
 * ```
 *
 * > **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testAlertConfiguration = new mongodbatlas.AlertConfiguration("test", {
 *     projectId: "<PROJECT-ID>",
 *     eventType: "REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
 *     enabled: true,
 *     notifications: [{
 *         typeName: "GROUP",
 *         intervalMin: 5,
 *         delayMin: 0,
 *         smsEnabled: false,
 *         emailEnabled: true,
 *         roles: [
 *             "GROUP_CHARTS_ADMIN",
 *             "GROUP_CLUSTER_MANAGER",
 *         ],
 *     }],
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     thresholdConfig: {
 *         operator: "LESS_THAN",
 *         threshold: 1,
 *         units: "HOURS",
 *     },
 * });
 * const test = mongodbatlas.getAlertConfigurationOutput({
 *     projectId: testAlertConfiguration.projectId,
 *     alertConfigurationId: testAlertConfiguration.alertConfigurationId,
 * });
 * ```
 *
 * Utilize dataSource to generate resource hcl and import statement. Useful if you have a specific alertConfigurationId and are looking to manage it as is in state. To import all alerts, refer to the documentation on dataSourceMongodbatlasAlertConfigurations
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getAlertConfiguration({
 *     projectId: projectId,
 *     alertConfigurationId: alertConfigurationId,
 *     outputs: [
 *         {
 *             type: "resource_hcl",
 *             label: "test",
 *         },
 *         {
 *             type: "resource_import",
 *             label: "test",
 *         },
 *     ],
 * });
 * ```
 */
export function getAlertConfigurationOutput(args: GetAlertConfigurationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetAlertConfigurationResult> {
    return pulumi.output(args).apply((a: any) => getAlertConfiguration(a, opts))
}

/**
 * A collection of arguments for invoking getAlertConfiguration.
 */
export interface GetAlertConfigurationOutputArgs {
    /**
     * Unique identifier for the alert configuration.
     */
    alertConfigurationId: pulumi.Input<string>;
    /**
     * List of formatted output requested for this alert configuration
     * * `output.#.type` - (Required) If the output is requested, you must specify its type. The format is computed as `output.#.value`, the following are the supported types:
     */
    outputs?: pulumi.Input<pulumi.Input<inputs.GetAlertConfigurationOutputArgs>[]>;
    /**
     * The ID of the project where the alert configuration will create.
     */
    projectId: pulumi.Input<string>;
}
