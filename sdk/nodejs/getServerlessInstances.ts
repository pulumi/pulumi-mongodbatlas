// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.getServerlessInstances` describe all serverless instances. This represents serverless instances that have been created for the specified group id.
 *
 * > **NOTE:**  Serverless instances do not support some Atlas features at this time.
 * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const dataServerless = mongodbatlas.getServerlessInstances({
 *     projectId: "<PROJECT_ID",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getServerlessInstances(args: GetServerlessInstancesArgs, opts?: pulumi.InvokeOptions): Promise<GetServerlessInstancesResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getServerlessInstances:getServerlessInstances", {
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getServerlessInstances.
 */
export interface GetServerlessInstancesArgs {
    /**
     * Unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
     */
    projectId: string;
}

/**
 * A collection of values returned by getServerlessInstances.
 */
export interface GetServerlessInstancesResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly projectId: string;
    /**
     * A list where each result represents a Serverless Instance. To learn more, see Serverless Instance.
     */
    readonly results: outputs.GetServerlessInstancesResult[];
}
/**
 * `mongodbatlas.getServerlessInstances` describe all serverless instances. This represents serverless instances that have been created for the specified group id.
 *
 * > **NOTE:**  Serverless instances do not support some Atlas features at this time.
 * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const dataServerless = mongodbatlas.getServerlessInstances({
 *     projectId: "<PROJECT_ID",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 */
export function getServerlessInstancesOutput(args: GetServerlessInstancesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetServerlessInstancesResult> {
    return pulumi.output(args).apply((a: any) => getServerlessInstances(a, opts))
}

/**
 * A collection of arguments for invoking getServerlessInstances.
 */
export interface GetServerlessInstancesOutputArgs {
    /**
     * Unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
     */
    projectId: pulumi.Input<string>;
}
