// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Organizational configuration provides federated settings outputs for the configured Organizational configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const orgConnection = new mongodbatlas.FederatedSettingsOrgConfig("org_connection", {
 *     federationSettingsId: "627a9687f7f7f7f774de306f14",
 *     orgId: "627a9683ea7ff7f74de306f14",
 *     dataAccessIdentityProviderIds: ["64d613677e1ad50839cce4db"],
 *     domainRestrictionEnabled: false,
 *     domainAllowLists: ["mydomain.com"],
 *     postAuthRoleGrants: ["ORG_MEMBER"],
 *     identityProviderId: "0oaqyt9fc2ySTWnA0357",
 * });
 * const orgConfigsDs = mongodbatlas.getFederatedSettingsOrgConfig({
 *     federationSettingsId: orgConnectionMongodbatlasFederatedSettingsOrgConfig.id,
 *     orgId: "627a9683ea7ff7f74de306f14",
 * });
 * ```
 */
export function getFederatedSettingsOrgConfig(args: GetFederatedSettingsOrgConfigArgs, opts?: pulumi.InvokeOptions): Promise<GetFederatedSettingsOrgConfigResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getFederatedSettingsOrgConfig:getFederatedSettingsOrgConfig", {
        "federationSettingsId": args.federationSettingsId,
        "orgId": args.orgId,
    }, opts);
}

/**
 * A collection of arguments for invoking getFederatedSettingsOrgConfig.
 */
export interface GetFederatedSettingsOrgConfigArgs {
    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     */
    federationSettingsId: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     */
    orgId: string;
}

/**
 * A collection of values returned by getFederatedSettingsOrgConfig.
 */
export interface GetFederatedSettingsOrgConfigResult {
    /**
     * The collection of unique ids representing the identity providers that can be used for data access in this organization.
     */
    readonly dataAccessIdentityProviderIds: string[];
    /**
     * List that contains the approved domains from which organization users can log in.  Note: If the organization uses an identity provider,  `domainAllowList` includes: any SSO domains associated with organization's identity provider and any custom domains associated with the specific organization.
     */
    readonly domainAllowLists: string[];
    /**
     * Flag that indicates whether domain restriction is enabled for the connected organization.  User Conflicts returns null when `domainRestrictionEnabled` is false.
     */
    readonly domainRestrictionEnabled: boolean;
    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     */
    readonly federationSettingsId: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Legacy 20-hexadecimal digit string that identifies the SAML access identity provider that this connected org config is associated with. This id can be found in two ways:
     * 1. Within the Federation Management UI in Atlas in the Identity Providers tab by clicking the info icon in the IdP ID row of a configured SAML identity provider
     * 2. `oktaIdpId` on the `mongodbatlas.FederatedSettingsIdentityProvider` resource
     */
    readonly identityProviderId: string;
    readonly orgId: string;
    /**
     * List that contains the default [roles](https://www.mongodb.com/docs/atlas/reference/user-roles/#std-label-organization-roles) granted to users who authenticate through the IdP in a connected organization.
     */
    readonly postAuthRoleGrants: string[];
    /**
     * Role mappings that are configured in this organization. See below
     */
    readonly roleMappings: outputs.GetFederatedSettingsOrgConfigRoleMapping[];
    /**
     * List that contains the users who have an email address that doesn't match any domain on the allowed list. See below
     */
    readonly userConflicts: outputs.GetFederatedSettingsOrgConfigUserConflict[];
}
/**
 * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Organizational configuration provides federated settings outputs for the configured Organizational configuration.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const orgConnection = new mongodbatlas.FederatedSettingsOrgConfig("org_connection", {
 *     federationSettingsId: "627a9687f7f7f7f774de306f14",
 *     orgId: "627a9683ea7ff7f74de306f14",
 *     dataAccessIdentityProviderIds: ["64d613677e1ad50839cce4db"],
 *     domainRestrictionEnabled: false,
 *     domainAllowLists: ["mydomain.com"],
 *     postAuthRoleGrants: ["ORG_MEMBER"],
 *     identityProviderId: "0oaqyt9fc2ySTWnA0357",
 * });
 * const orgConfigsDs = mongodbatlas.getFederatedSettingsOrgConfig({
 *     federationSettingsId: orgConnectionMongodbatlasFederatedSettingsOrgConfig.id,
 *     orgId: "627a9683ea7ff7f74de306f14",
 * });
 * ```
 */
export function getFederatedSettingsOrgConfigOutput(args: GetFederatedSettingsOrgConfigOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetFederatedSettingsOrgConfigResult> {
    return pulumi.output(args).apply((a: any) => getFederatedSettingsOrgConfig(a, opts))
}

/**
 * A collection of arguments for invoking getFederatedSettingsOrgConfig.
 */
export interface GetFederatedSettingsOrgConfigOutputArgs {
    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     */
    federationSettingsId: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     */
    orgId: pulumi.Input<string>;
}
