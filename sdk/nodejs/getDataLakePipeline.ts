// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * **WARNING:** Data Lake is deprecated. To learn more, see <https://dochub.mongodb.org/core/data-lake-deprecation>
 *
 * `mongodbatlas.DataLakePipeline` describes a Data Lake Pipeline.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ### S
 */
export function getDataLakePipeline(args: GetDataLakePipelineArgs, opts?: pulumi.InvokeOptions): Promise<GetDataLakePipelineResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getDataLakePipeline:getDataLakePipeline", {
        "name": args.name,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDataLakePipeline.
 */
export interface GetDataLakePipelineArgs {
    /**
     * Name of the Atlas Data Lake Pipeline.
     */
    name: string;
    /**
     * The unique ID for the project to create a Data Lake Pipeline.
     */
    projectId: string;
}

/**
 * A collection of values returned by getDataLakePipeline.
 */
export interface GetDataLakePipelineResult {
    /**
     * Timestamp that indicates when the Data Lake Pipeline was created.
     */
    readonly createdDate: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the Data Lake Pipeline.
     */
    readonly id: string;
    /**
     * List of backup schedule policy items that you can use as a Data Lake Pipeline source.
     * * `ingestion_schedules.#.id` - Unique 24-hexadecimal digit string that identifies this backup policy item.
     * * `ingestion_schedules.#.frequency_type` - Human-readable label that identifies the frequency type associated with the backup policy.
     * * `ingestion_schedules.#.frequency_interval` - Number that indicates the frequency interval for a set of snapshots.
     * * `ingestion_schedules.#.retention_unit` - Unit of time in which MongoDB Atlas measures snapshot retention.
     * * `ingestion_schedules.#.retention_value` - Duration in days, weeks, or months that MongoDB Atlas retains the snapshot.
     */
    readonly ingestionSchedules: outputs.GetDataLakePipelineIngestionSchedule[];
    /**
     * Timestamp that indicates the last time that the Data Lake Pipeline was updated.
     */
    readonly lastUpdatedDate: string;
    readonly name: string;
    /**
     * Unique 24-hexadecimal character string that identifies the project.
     * * `policyItemId` - Unique 24-hexadecimal character string that identifies a policy item.
     */
    readonly projectId: string;
    readonly sinks: outputs.GetDataLakePipelineSink[];
    /**
     * List of backup snapshots that you can use to trigger an on demand pipeline run.
     * * `snapshots.#.id` - Unique 24-hexadecimal digit string that identifies the snapshot.
     * * `snapshots.#.provider` - Human-readable label that identifies the cloud provider that stores this snapshot.
     * * `snapshots.#.created_at` - Date and time when MongoDB Atlas took the snapshot.
     * * `snapshots.#.expires_at` - Date and time when MongoDB Atlas deletes the snapshot.
     * * `snapshots.#.frequency_type` - Human-readable label that identifies how often this snapshot triggers.
     * * `snapshots.#.master_key` - Unique string that identifies the Amazon Web Services (AWS) Key Management Service (KMS) Customer Master Key (CMK) used to encrypt the snapshot.
     * * `snapshots.#.mongod_version` - Version of the MongoDB host that this snapshot backs up.
     * * `snapshots.#.replica_set_name` - Human-readable label that identifies the replica set from which MongoDB Atlas took this snapshot.
     * * `snapshots.#.type` - Human-readable label that categorizes the cluster as a replica set or sharded cluster.
     * * `snapshots.#.snapshot_type` - Human-readable label that identifies when this snapshot triggers.
     * * `snapshots.#.status` - Human-readable label that indicates the stage of the backup process for this snapshot.
     * * `snapshots.#.size` - List of backup snapshots that you can use to trigger an on demand pipeline run.
     * * `snapshots.#.copy_region` - List that identifies the regions to which MongoDB Atlas copies the snapshot.
     * * `snapshots.#.policies` - List that contains unique identifiers for the policy items.
     */
    readonly snapshots: outputs.GetDataLakePipelineSnapshot[];
    readonly sources: outputs.GetDataLakePipelineSource[];
    /**
     * State of this Data Lake Pipeline.
     */
    readonly state: string;
    /**
     * Fields to be excluded for this Data Lake Pipeline.
     * * `transformations.#.field` - Key in the document.
     * * `transformations.#.type` - Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
     */
    readonly transformations: outputs.GetDataLakePipelineTransformation[];
}
/**
 * **WARNING:** Data Lake is deprecated. To learn more, see <https://dochub.mongodb.org/core/data-lake-deprecation>
 *
 * `mongodbatlas.DataLakePipeline` describes a Data Lake Pipeline.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ### S
 */
export function getDataLakePipelineOutput(args: GetDataLakePipelineOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetDataLakePipelineResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getDataLakePipeline:getDataLakePipeline", {
        "name": args.name,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getDataLakePipeline.
 */
export interface GetDataLakePipelineOutputArgs {
    /**
     * Name of the Atlas Data Lake Pipeline.
     */
    name: pulumi.Input<string>;
    /**
     * The unique ID for the project to create a Data Lake Pipeline.
     */
    projectId: pulumi.Input<string>;
}
