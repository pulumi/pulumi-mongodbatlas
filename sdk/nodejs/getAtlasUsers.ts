// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Data Source: atlasUsers
 *
 * `atlasUsers` provides Atlas Users associated with a specified Organization, Project, or Team.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ### Using orgId attribute to query Organization Atlas Users
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getAtlasUsers({
 *     orgId: "<ORG_ID>",
 * });
 * ```
 *
 * ### Using projectId attribute to query Project Atlas Users
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getAtlasUsers({
 *     projectId: "<PROJECT_ID>",
 * });
 * ```
 *
 * ### Using teamId and orgId attribute to query Team Atlas Users
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getAtlasUsers({
 *     teamId: "<TEAM_ID>",
 *     orgId: "<ORG_ID>",
 * });
 * ```
 */
export function getAtlasUsers(args?: GetAtlasUsersArgs, opts?: pulumi.InvokeOptions): Promise<GetAtlasUsersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getAtlasUsers:getAtlasUsers", {
        "itemsPerPage": args.itemsPerPage,
        "orgId": args.orgId,
        "pageNum": args.pageNum,
        "projectId": args.projectId,
        "teamId": args.teamId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAtlasUsers.
 */
export interface GetAtlasUsersArgs {
    /**
     * Number of items that the response returns per page, up to a maximum of `500`. Defaults to `100`.
     *
     * > **IMPORTANT:** Either `orgId`, `projectId`, or `teamId` with `orgId` must be configurated.
     */
    itemsPerPage?: number;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization whose users you want to return. Also needed when `teamId` attributes is defined.
     */
    orgId?: string;
    /**
     * Number of the page that displays the current set of the total objects that the response returns. Defaults to `1`.
     */
    pageNum?: number;
    /**
     * Unique 24-hexadecimal digit string that identifies the project whose users you want to return.
     */
    projectId?: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the team whose users you want to return.
     */
    teamId?: string;
}

/**
 * A collection of values returned by getAtlasUsers.
 */
export interface GetAtlasUsersResult {
    /**
     * @deprecated Please use each user's id attribute instead
     */
    readonly id: string;
    readonly itemsPerPage?: number;
    readonly orgId?: string;
    readonly pageNum?: number;
    readonly projectId?: string;
    /**
     * A list where each element contains a Atlas User.
     */
    readonly results: outputs.GetAtlasUsersResult[];
    readonly teamId?: string;
    /**
     * Count of the total number of items in the result set. It may be greater than the number of objects in the results array if the entire result set is paginated.
     */
    readonly totalCount: number;
}
/**
 * ## # Data Source: atlasUsers
 *
 * `atlasUsers` provides Atlas Users associated with a specified Organization, Project, or Team.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ### Using orgId attribute to query Organization Atlas Users
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getAtlasUsers({
 *     orgId: "<ORG_ID>",
 * });
 * ```
 *
 * ### Using projectId attribute to query Project Atlas Users
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getAtlasUsers({
 *     projectId: "<PROJECT_ID>",
 * });
 * ```
 *
 * ### Using teamId and orgId attribute to query Team Atlas Users
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getAtlasUsers({
 *     teamId: "<TEAM_ID>",
 *     orgId: "<ORG_ID>",
 * });
 * ```
 */
export function getAtlasUsersOutput(args?: GetAtlasUsersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetAtlasUsersResult> {
    args = args || {};
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getAtlasUsers:getAtlasUsers", {
        "itemsPerPage": args.itemsPerPage,
        "orgId": args.orgId,
        "pageNum": args.pageNum,
        "projectId": args.projectId,
        "teamId": args.teamId,
    }, opts);
}

/**
 * A collection of arguments for invoking getAtlasUsers.
 */
export interface GetAtlasUsersOutputArgs {
    /**
     * Number of items that the response returns per page, up to a maximum of `500`. Defaults to `100`.
     *
     * > **IMPORTANT:** Either `orgId`, `projectId`, or `teamId` with `orgId` must be configurated.
     */
    itemsPerPage?: pulumi.Input<number>;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization whose users you want to return. Also needed when `teamId` attributes is defined.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Number of the page that displays the current set of the total objects that the response returns. Defaults to `1`.
     */
    pageNum?: pulumi.Input<number>;
    /**
     * Unique 24-hexadecimal digit string that identifies the project whose users you want to return.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the team whose users you want to return.
     */
    teamId?: pulumi.Input<string>;
}
