// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.getSearchIndexes` describe all search indexes. This represents search indexes that have been created.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = pulumi.output(mongodbatlas.getSearchIndex({
 *     clusterName: "<CLUSTER_NAME>",
 *     collectionName: "<COLLECTION_NAME>",
 *     databaseName: "<DATABASE_NAME>",
 *     itemsPerPage: 100,
 *     pageNum: 1,
 *     projectId: "<PROJECT_ID>",
 * }));
 * ```
 */
export function getSearchIndexes(args: GetSearchIndexesArgs, opts?: pulumi.InvokeOptions): Promise<GetSearchIndexesResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("mongodbatlas:index/getSearchIndexes:getSearchIndexes", {
        "clusterName": args.clusterName,
        "collectionName": args.collectionName,
        "database": args.database,
        "itemsPerPage": args.itemsPerPage,
        "pageNum": args.pageNum,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSearchIndexes.
 */
export interface GetSearchIndexesArgs {
    /**
     * Name of the cluster containing the collection with one or more Atlas Search indexes.
     */
    clusterName: string;
    /**
     * Name of the collection with one or more Atlas Search indexes.
     */
    collectionName: string;
    /**
     * (Required) Name of the database the collection is in.
     */
    database: string;
    /**
     * Number of items that Atlas returns per page, up to a maximum of 500.
     */
    itemsPerPage?: number;
    /**
     * Page number, starting with one, that Atlas returns of the total number of objects.
     */
    pageNum?: number;
    /**
     * Unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
     */
    projectId: string;
}

/**
 * A collection of values returned by getSearchIndexes.
 */
export interface GetSearchIndexesResult {
    readonly clusterName: string;
    /**
     * (Required) Name of the collection the index is on.
     */
    readonly collectionName: string;
    /**
     * (Required) Name of the database the collection is in.
     */
    readonly database: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly itemsPerPage?: number;
    readonly pageNum?: number;
    readonly projectId: string;
    /**
     * A list where each represents a search index.
     */
    readonly results: outputs.GetSearchIndexesResult[];
    /**
     * Represents the total of the search indexes
     */
    readonly totalCount: number;
}

export function getSearchIndexesOutput(args: GetSearchIndexesOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetSearchIndexesResult> {
    return pulumi.output(args).apply(a => getSearchIndexes(a, opts))
}

/**
 * A collection of arguments for invoking getSearchIndexes.
 */
export interface GetSearchIndexesOutputArgs {
    /**
     * Name of the cluster containing the collection with one or more Atlas Search indexes.
     */
    clusterName: pulumi.Input<string>;
    /**
     * Name of the collection with one or more Atlas Search indexes.
     */
    collectionName: pulumi.Input<string>;
    /**
     * (Required) Name of the database the collection is in.
     */
    database: pulumi.Input<string>;
    /**
     * Number of items that Atlas returns per page, up to a maximum of 500.
     */
    itemsPerPage?: pulumi.Input<number>;
    /**
     * Page number, starting with one, that Atlas returns of the total number of objects.
     */
    pageNum?: pulumi.Input<number>;
    /**
     * Unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
     */
    projectId: pulumi.Input<string>;
}
