// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Resource: mongodbatlas.OnlineArchive
 *
 * `mongodbatlas.OnlineArchive` resource provides access to create, edit, pause and resume an online archive for a collection.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * > **IMPORTANT:** The collection must exists before performing an online archive.
 *
 * > **IMPORTANT:** There are fields that are immutable after creation, i.e if `dateField` value does not exist in the collection, the online archive state will be pending forever, and this field cannot be updated, that means a destroy is required, known error `ONLINE_ARCHIVE_CANNOT_MODIFY_FIELD`
 *
 * ## Example Usage
 *
 * ### S
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.OnlineArchive("test", {
 *     projectId: projectId,
 *     clusterName: clusterName,
 *     collName: collectionName,
 *     dbName: databaseName,
 *     partitionFields: [
 *         {
 *             fieldName: "dateField",
 *             order: 0,
 *         },
 *         {
 *             fieldName: "firstName",
 *             order: 1,
 *         },
 *         {
 *             fieldName: "lastName",
 *             order: 2,
 *         },
 *     ],
 *     criteria: {
 *         type: "DATE",
 *         dateField: "dateField",
 *         expireAfterDays: 5,
 *     },
 *     schedule: {
 *         type: "DAILY",
 *         endHour: 1,
 *         endMinute: 1,
 *         startHour: 1,
 *         startMinute: 1,
 *     },
 * });
 * ```
 *
 * For custom criteria example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.OnlineArchive("test", {
 *     projectId: projectId,
 *     clusterName: clusterName,
 *     collName: collectionName,
 *     dbName: databaseName,
 *     partitionFields: [
 *         {
 *             fieldName: "firstName",
 *             order: 0,
 *         },
 *         {
 *             fieldName: "secondName",
 *             order: 1,
 *         },
 *     ],
 *     criteria: {
 *         type: "CUSTOM",
 *         query: "{ \"department\": \"engineering\" }",
 *     },
 * });
 * ```
 *
 * Defining custom provider and region example
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.OnlineArchive("test", {
 *     projectId: projectId,
 *     clusterName: clusterName,
 *     collName: collectionName,
 *     dbName: databaseName,
 *     dataProcessRegion: {
 *         cloudProvider: "AZURE",
 *         region: "US_EAST_2",
 *     },
 *     partitionFields: [{
 *         fieldName: "firstName",
 *         order: 0,
 *     }],
 *     criteria: {
 *         type: "CUSTOM",
 *         query: "{ \"department\": \"engineering\" }",
 *     },
 * });
 * ```
 *
 * ## Import
 *
 * See [MongoDB Atlas API](https://docs.atlas.mongodb.com/reference/api/online-archive-create-one/) Documentation for more information.
 */
export class OnlineArchive extends pulumi.CustomResource {
    /**
     * Get an existing OnlineArchive resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OnlineArchiveState, opts?: pulumi.CustomResourceOptions): OnlineArchive {
        return new OnlineArchive(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/onlineArchive:OnlineArchive';

    /**
     * Returns true if the given object is an instance of OnlineArchive.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is OnlineArchive {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === OnlineArchive.__pulumiType;
    }

    /**
     * ID of the online archive.
     */
    public /*out*/ readonly archiveId!: pulumi.Output<string>;
    /**
     * Name of the cluster that contains the collection.
     */
    public readonly clusterName!: pulumi.Output<string>;
    /**
     * Name of the collection.
     */
    public readonly collName!: pulumi.Output<string>;
    /**
     * Type of MongoDB collection that you want to return. This value can be "TIMESERIES" or "STANDARD". Default is "STANDARD".
     */
    public readonly collectionType!: pulumi.Output<string>;
    /**
     * Criteria to use for archiving data. See criteria.
     */
    public readonly criteria!: pulumi.Output<outputs.OnlineArchiveCriteria>;
    /**
     * Rule for specifying when data should be deleted from the archive. See data expiration rule.
     */
    public readonly dataExpirationRule!: pulumi.Output<outputs.OnlineArchiveDataExpirationRule | undefined>;
    /**
     * Settings to configure the region where you wish to store your archived data. See data process region. This field is immutable hence cannot be updated.
     */
    public readonly dataProcessRegion!: pulumi.Output<outputs.OnlineArchiveDataProcessRegion>;
    /**
     * Name of the database that contains the collection.
     */
    public readonly dbName!: pulumi.Output<string>;
    /**
     * Fields to use to partition data. You can specify up to two frequently queried fields (or up to three fields when one of them is `dateField`) to use for partitioning data. Queries that donâ€™t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     */
    public readonly partitionFields!: pulumi.Output<outputs.OnlineArchivePartitionField[]>;
    /**
     * State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     */
    public readonly paused!: pulumi.Output<boolean>;
    /**
     * The unique ID for the project
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Regular frequency and duration when archiving process occurs. See schedule.
     */
    public readonly schedule!: pulumi.Output<outputs.OnlineArchiveSchedule | undefined>;
    /**
     * Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     */
    public /*out*/ readonly state!: pulumi.Output<string>;
    public readonly syncCreation!: pulumi.Output<boolean | undefined>;

    /**
     * Create a OnlineArchive resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: OnlineArchiveArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OnlineArchiveArgs | OnlineArchiveState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OnlineArchiveState | undefined;
            resourceInputs["archiveId"] = state ? state.archiveId : undefined;
            resourceInputs["clusterName"] = state ? state.clusterName : undefined;
            resourceInputs["collName"] = state ? state.collName : undefined;
            resourceInputs["collectionType"] = state ? state.collectionType : undefined;
            resourceInputs["criteria"] = state ? state.criteria : undefined;
            resourceInputs["dataExpirationRule"] = state ? state.dataExpirationRule : undefined;
            resourceInputs["dataProcessRegion"] = state ? state.dataProcessRegion : undefined;
            resourceInputs["dbName"] = state ? state.dbName : undefined;
            resourceInputs["partitionFields"] = state ? state.partitionFields : undefined;
            resourceInputs["paused"] = state ? state.paused : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["schedule"] = state ? state.schedule : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["syncCreation"] = state ? state.syncCreation : undefined;
        } else {
            const args = argsOrState as OnlineArchiveArgs | undefined;
            if ((!args || args.clusterName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'clusterName'");
            }
            if ((!args || args.collName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'collName'");
            }
            if ((!args || args.criteria === undefined) && !opts.urn) {
                throw new Error("Missing required property 'criteria'");
            }
            if ((!args || args.dbName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'dbName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["clusterName"] = args ? args.clusterName : undefined;
            resourceInputs["collName"] = args ? args.collName : undefined;
            resourceInputs["collectionType"] = args ? args.collectionType : undefined;
            resourceInputs["criteria"] = args ? args.criteria : undefined;
            resourceInputs["dataExpirationRule"] = args ? args.dataExpirationRule : undefined;
            resourceInputs["dataProcessRegion"] = args ? args.dataProcessRegion : undefined;
            resourceInputs["dbName"] = args ? args.dbName : undefined;
            resourceInputs["partitionFields"] = args ? args.partitionFields : undefined;
            resourceInputs["paused"] = args ? args.paused : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["schedule"] = args ? args.schedule : undefined;
            resourceInputs["syncCreation"] = args ? args.syncCreation : undefined;
            resourceInputs["archiveId"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(OnlineArchive.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering OnlineArchive resources.
 */
export interface OnlineArchiveState {
    /**
     * ID of the online archive.
     */
    archiveId?: pulumi.Input<string>;
    /**
     * Name of the cluster that contains the collection.
     */
    clusterName?: pulumi.Input<string>;
    /**
     * Name of the collection.
     */
    collName?: pulumi.Input<string>;
    /**
     * Type of MongoDB collection that you want to return. This value can be "TIMESERIES" or "STANDARD". Default is "STANDARD".
     */
    collectionType?: pulumi.Input<string>;
    /**
     * Criteria to use for archiving data. See criteria.
     */
    criteria?: pulumi.Input<inputs.OnlineArchiveCriteria>;
    /**
     * Rule for specifying when data should be deleted from the archive. See data expiration rule.
     */
    dataExpirationRule?: pulumi.Input<inputs.OnlineArchiveDataExpirationRule>;
    /**
     * Settings to configure the region where you wish to store your archived data. See data process region. This field is immutable hence cannot be updated.
     */
    dataProcessRegion?: pulumi.Input<inputs.OnlineArchiveDataProcessRegion>;
    /**
     * Name of the database that contains the collection.
     */
    dbName?: pulumi.Input<string>;
    /**
     * Fields to use to partition data. You can specify up to two frequently queried fields (or up to three fields when one of them is `dateField`) to use for partitioning data. Queries that donâ€™t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     */
    partitionFields?: pulumi.Input<pulumi.Input<inputs.OnlineArchivePartitionField>[]>;
    /**
     * State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * The unique ID for the project
     */
    projectId?: pulumi.Input<string>;
    /**
     * Regular frequency and duration when archiving process occurs. See schedule.
     */
    schedule?: pulumi.Input<inputs.OnlineArchiveSchedule>;
    /**
     * Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     */
    state?: pulumi.Input<string>;
    syncCreation?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a OnlineArchive resource.
 */
export interface OnlineArchiveArgs {
    /**
     * Name of the cluster that contains the collection.
     */
    clusterName: pulumi.Input<string>;
    /**
     * Name of the collection.
     */
    collName: pulumi.Input<string>;
    /**
     * Type of MongoDB collection that you want to return. This value can be "TIMESERIES" or "STANDARD". Default is "STANDARD".
     */
    collectionType?: pulumi.Input<string>;
    /**
     * Criteria to use for archiving data. See criteria.
     */
    criteria: pulumi.Input<inputs.OnlineArchiveCriteria>;
    /**
     * Rule for specifying when data should be deleted from the archive. See data expiration rule.
     */
    dataExpirationRule?: pulumi.Input<inputs.OnlineArchiveDataExpirationRule>;
    /**
     * Settings to configure the region where you wish to store your archived data. See data process region. This field is immutable hence cannot be updated.
     */
    dataProcessRegion?: pulumi.Input<inputs.OnlineArchiveDataProcessRegion>;
    /**
     * Name of the database that contains the collection.
     */
    dbName: pulumi.Input<string>;
    /**
     * Fields to use to partition data. You can specify up to two frequently queried fields (or up to three fields when one of them is `dateField`) to use for partitioning data. Queries that donâ€™t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     */
    partitionFields?: pulumi.Input<pulumi.Input<inputs.OnlineArchivePartitionField>[]>;
    /**
     * State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     */
    paused?: pulumi.Input<boolean>;
    /**
     * The unique ID for the project
     */
    projectId: pulumi.Input<string>;
    /**
     * Regular frequency and duration when archiving process occurs. See schedule.
     */
    schedule?: pulumi.Input<inputs.OnlineArchiveSchedule>;
    syncCreation?: pulumi.Input<boolean>;
}
