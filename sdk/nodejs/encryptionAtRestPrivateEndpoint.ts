// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Resource: mongodbatlas.EncryptionAtRestPrivateEndpoint
 *
 * `mongodbatlas.EncryptionAtRestPrivateEndpoint` provides a resource for managing a private endpoint used for encryption at rest with customer-managed keys. This ensures all traffic between Atlas and customer key management systems take place over private network interfaces.
 *
 * > **IMPORTANT** The Encryption at Rest using Azure Key Vault over Private Endpoints feature is available by request. To request this functionality for your Atlas deployments, contact your Account Manager.
 * To learn more about existing limitations, see [Manage Customer Keys with Azure Key Vault Over Private Endpoints](https://www.mongodb.com/docs/atlas/security/azure-kms-over-private-endpoint/#manage-customer-keys-with-azure-key-vault-over-private-endpoints).
 *
 * > **NOTE:** As a prerequisite to configuring a private endpoint for Azure Key Vault, the corresponding `mongodbatlas.EncryptionAtRest` resource has to be adjust by configuring `azure_key_vault_config.require_private_networking` to true. This attribute should be updated in place, ensuring the customer-managed keys encryption is never disabled.
 *
 * > **NOTE:** This resource does not support update operations. To modify values of a private endpoint the existing resource must be deleted and a new one can be created with the modified values.
 *
 * ## Example Usage
 *
 * ### S
 *
 * > **NOTE:** Only Azure Key Vault with Azure Private Link is supported at this time.
 *
 * ### Configuring Atlas Encryption at Rest using Azure Key Vault with Azure Private Link
 *
 * Make sure to reference the complete example section for detailed steps and considerations.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as azapi from "@pulumi/azapi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const ear = new mongodbatlas.EncryptionAtRest("ear", {
 *     projectId: atlasProjectId,
 *     azureKeyVaultConfig: {
 *         requirePrivateNetworking: true,
 *         enabled: true,
 *         azureEnvironment: "AZURE",
 *         tenantId: azureTenantId,
 *         subscriptionId: azureSubscriptionId,
 *         clientId: azureClientId,
 *         secret: azureClientSecret,
 *         resourceGroupName: azureResourceGroupName,
 *         keyVaultName: azureKeyVaultName,
 *         keyIdentifier: azureKeyIdentifier,
 *     },
 * });
 * // Creates private endpoint
 * const endpoint = new mongodbatlas.EncryptionAtRestPrivateEndpoint("endpoint", {
 *     projectId: ear.projectId,
 *     cloudProvider: "AZURE",
 *     regionName: azureRegionName,
 * });
 * const keyVaultResourceId = `/subscriptions/${azureSubscriptionId}/resourceGroups/${azureResourceGroupName}/providers/Microsoft.KeyVault/vaults/${azureKeyVaultName}`;
 * // Approves private endpoint connection from Azure Key Vault
 * const approval = new azapi.index.UpdateResource("approval", {
 *     type: "Microsoft.KeyVault/Vaults/PrivateEndpointConnections@2023-07-01",
 *     name: endpoint.privateEndpointConnectionName,
 *     parentId: keyVaultResourceId,
 *     body: JSON.stringify({
 *         properties: {
 *             privateLinkServiceConnectionState: {
 *                 description: "Approved via Terraform",
 *                 status: "Approved",
 *             },
 *         },
 *     }),
 * });
 * ```
 */
export class EncryptionAtRestPrivateEndpoint extends pulumi.CustomResource {
    /**
     * Get an existing EncryptionAtRestPrivateEndpoint resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: EncryptionAtRestPrivateEndpointState, opts?: pulumi.CustomResourceOptions): EncryptionAtRestPrivateEndpoint {
        return new EncryptionAtRestPrivateEndpoint(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/encryptionAtRestPrivateEndpoint:EncryptionAtRestPrivateEndpoint';

    /**
     * Returns true if the given object is an instance of EncryptionAtRestPrivateEndpoint.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is EncryptionAtRestPrivateEndpoint {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === EncryptionAtRestPrivateEndpoint.__pulumiType;
    }

    /**
     * Label that identifies the cloud provider for the Encryption At Rest private endpoint.
     */
    public readonly cloudProvider!: pulumi.Output<string>;
    /**
     * Error message for failures associated with the Encryption At Rest private endpoint.
     */
    public /*out*/ readonly errorMessage!: pulumi.Output<string>;
    /**
     * Connection name of the Azure Private Endpoint.
     */
    public /*out*/ readonly privateEndpointConnectionName!: pulumi.Output<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Cloud provider region in which the Encryption At Rest private endpoint is located.
     */
    public readonly regionName!: pulumi.Output<string>;
    /**
     * State of the Encryption At Rest private endpoint.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a EncryptionAtRestPrivateEndpoint resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: EncryptionAtRestPrivateEndpointArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: EncryptionAtRestPrivateEndpointArgs | EncryptionAtRestPrivateEndpointState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as EncryptionAtRestPrivateEndpointState | undefined;
            resourceInputs["cloudProvider"] = state ? state.cloudProvider : undefined;
            resourceInputs["errorMessage"] = state ? state.errorMessage : undefined;
            resourceInputs["privateEndpointConnectionName"] = state ? state.privateEndpointConnectionName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["regionName"] = state ? state.regionName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as EncryptionAtRestPrivateEndpointArgs | undefined;
            if ((!args || args.cloudProvider === undefined) && !opts.urn) {
                throw new Error("Missing required property 'cloudProvider'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.regionName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'regionName'");
            }
            resourceInputs["cloudProvider"] = args ? args.cloudProvider : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["regionName"] = args ? args.regionName : undefined;
            resourceInputs["errorMessage"] = undefined /*out*/;
            resourceInputs["privateEndpointConnectionName"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(EncryptionAtRestPrivateEndpoint.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering EncryptionAtRestPrivateEndpoint resources.
 */
export interface EncryptionAtRestPrivateEndpointState {
    /**
     * Label that identifies the cloud provider for the Encryption At Rest private endpoint.
     */
    cloudProvider?: pulumi.Input<string>;
    /**
     * Error message for failures associated with the Encryption At Rest private endpoint.
     */
    errorMessage?: pulumi.Input<string>;
    /**
     * Connection name of the Azure Private Endpoint.
     */
    privateEndpointConnectionName?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Cloud provider region in which the Encryption At Rest private endpoint is located.
     */
    regionName?: pulumi.Input<string>;
    /**
     * State of the Encryption At Rest private endpoint.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a EncryptionAtRestPrivateEndpoint resource.
 */
export interface EncryptionAtRestPrivateEndpointArgs {
    /**
     * Label that identifies the cloud provider for the Encryption At Rest private endpoint.
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     */
    projectId: pulumi.Input<string>;
    /**
     * Cloud provider region in which the Encryption At Rest private endpoint is located.
     */
    regionName: pulumi.Input<string>;
}
