// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Data Source: mongodbatlas.getClusters
 *
 * `mongodbatlas.Cluster` describes all Clusters by the provided project_id. The data source requires your Project ID.
 *
 * > **IMPORTANT:**
 * <br> &#8226; Multi Region Cluster: The `mongodbatlas.Cluster` data source doesn't return the `containerId` for each region utilized by the cluster. For retrieving the `containerId`, we recommend the `mongodbatlas.AdvancedCluster` data source instead.
 * <br> &#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
 * <br> &#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testCluster = new mongodbatlas.Cluster("test", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "cluster-test",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         numShards: 1,
 *         regionsConfigs: [{
 *             regionName: "US_EAST_1",
 *             electableNodes: 3,
 *             priority: 7,
 *             readOnlyNodes: 0,
 *         }],
 *     }],
 *     cloudBackup: true,
 *     autoScalingDiskGbEnabled: true,
 *     providerName: "AWS",
 *     providerInstanceSizeName: "M40",
 * });
 * const test = mongodbatlas.getClustersOutput({
 *     projectId: testCluster.projectId,
 * });
 * ```
 */
export function getClusters(args: GetClustersArgs, opts?: pulumi.InvokeOptions): Promise<GetClustersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getClusters:getClusters", {
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getClusters.
 */
export interface GetClustersArgs {
    /**
     * The unique ID for the project to get the clusters.
     */
    projectId: string;
}

/**
 * A collection of values returned by getClusters.
 */
export interface GetClustersResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly projectId: string;
    /**
     * A list where each represents a Cluster. See Cluster below for more details.
     */
    readonly results: outputs.GetClustersResult[];
}
/**
 * ## # Data Source: mongodbatlas.getClusters
 *
 * `mongodbatlas.Cluster` describes all Clusters by the provided project_id. The data source requires your Project ID.
 *
 * > **IMPORTANT:**
 * <br> &#8226; Multi Region Cluster: The `mongodbatlas.Cluster` data source doesn't return the `containerId` for each region utilized by the cluster. For retrieving the `containerId`, we recommend the `mongodbatlas.AdvancedCluster` data source instead.
 * <br> &#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
 * <br> &#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testCluster = new mongodbatlas.Cluster("test", {
 *     projectId: "<YOUR-PROJECT-ID>",
 *     name: "cluster-test",
 *     clusterType: "REPLICASET",
 *     replicationSpecs: [{
 *         numShards: 1,
 *         regionsConfigs: [{
 *             regionName: "US_EAST_1",
 *             electableNodes: 3,
 *             priority: 7,
 *             readOnlyNodes: 0,
 *         }],
 *     }],
 *     cloudBackup: true,
 *     autoScalingDiskGbEnabled: true,
 *     providerName: "AWS",
 *     providerInstanceSizeName: "M40",
 * });
 * const test = mongodbatlas.getClustersOutput({
 *     projectId: testCluster.projectId,
 * });
 * ```
 */
export function getClustersOutput(args: GetClustersOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetClustersResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getClusters:getClusters", {
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getClusters.
 */
export interface GetClustersOutputArgs {
    /**
     * The unique ID for the project to get the clusters.
     */
    projectId: pulumi.Input<string>;
}
