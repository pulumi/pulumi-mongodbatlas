// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Resource: mongodbatlas.Organization
 *
 * `mongodbatlas.Organization` provides programmatic management (including creation) of a MongoDB Atlas Organization resource.
 *
 * > **IMPORTANT NOTE:**  When you establish an Atlas organization using this resource, it automatically generates a set of initial public and private Programmatic API Keys. These key values are vital to store because you'll need to use them to grant access to the newly created Atlas organization. To use this resource, `roleNames` for new API Key must have the ORG_OWNER role specified.
 *
 * > **IMPORTANT NOTE:** To use this resource, the requesting API Key must have the Organization Owner role. The requesting API Key's organization must be a paying organization. To learn more, see Configure a Paying Organization in the MongoDB Atlas documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Organization("test", {
 *     orgOwnerId: "<ORG_OWNER_ID>",
 *     name: "testCreateORG",
 *     description: "test API key from Org Creation Test",
 *     roleNames: ["ORG_OWNER"],
 * });
 * ```
 *
 * ## Import
 *
 * You can import an existing organization using the organization ID, e.g.:
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/organization:Organization example 5d09d6a59ccf6445652a444a
 * ```
 * ~> __IMPORTANT:__ When importing an existing organization, you should __NOT__ specify the creation-only attributes (`org_owner_id`, `description`, `role_names`, `federation_settings_id`) in your Terraform configuration.
 *
 * See the [Guide: Importing MongoDB Atlas Organizations](../guides/importing-organization) for more information.
 *
 * For more information about the `mongodbatlas_organization` resource see: [MongoDB Atlas Admin API Organization](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/group/endpoint-organizations).
 */
export class Organization extends pulumi.CustomResource {
    /**
     * Get an existing Organization resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: OrganizationState, opts?: pulumi.CustomResourceOptions): Organization {
        return new Organization(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/organization:Organization';

    /**
     * Returns true if the given object is an instance of Organization.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is Organization {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === Organization.__pulumiType;
    }

    /**
     * Flag that indicates whether to require API operations to originate from an IP Address added to the API access list for the specified organization.
     */
    declare public readonly apiAccessListRequired: pulumi.Output<boolean>;
    declare public readonly description: pulumi.Output<string | undefined>;
    /**
     * Unique 24-hexadecimal digit string that identifies the federation to link the newly created organization to. If specified, the proposed Organization Owner of the new organization must have the Organization Owner role in an organization associated with the federation. This attribute can't be updated after creation.
     */
    declare public readonly federationSettingsId: pulumi.Output<string | undefined>;
    /**
     * Flag that indicates whether this organization has access to generative AI features. This setting only applies to Atlas Commercial and defaults to `true`. With this setting on, Project Owners may be able to enable or disable individual AI features at the project level. To learn more, see https://www.mongodb.com/docs/generative-ai-faq/.
     */
    declare public readonly genAiFeaturesEnabled: pulumi.Output<boolean | undefined>;
    /**
     * Flag that indicates whether to require users to set up Multi-Factor Authentication (MFA) before accessing the specified organization. To learn more, see: https://www.mongodb.com/docs/atlas/security-multi-factor-authentication/.
     */
    declare public readonly multiFactorAuthRequired: pulumi.Output<boolean>;
    /**
     * The name of the organization.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The organization id.
     */
    declare public /*out*/ readonly orgId: pulumi.Output<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the Atlas user that you want to assign the Organization Owner role. This user must be a member of the same organization as the calling API key.  This is only required when authenticating with Programmatic API Keys. [MongoDB Atlas Admin API - Get User By Username](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/MongoDB-Cloud-Users/operation/getUserByUsername). This attribute is required in creation and can't be updated later.
     */
    declare public readonly orgOwnerId: pulumi.Output<string | undefined>;
    declare public /*out*/ readonly privateKey: pulumi.Output<string>;
    /**
     * Public API key value set for the specified organization API key.
     */
    declare public /*out*/ readonly publicKey: pulumi.Output<string>;
    /**
     * Flag that indicates whether to block MongoDB Support from accessing Atlas infrastructure for any deployment in the specified organization without explicit permission. Once this setting is turned on, you can grant MongoDB Support a 24-hour bypass access to the Atlas deployment to resolve support issues. To learn more, see: https://www.mongodb.com/docs/atlas/security-restrict-support-access/.
     */
    declare public readonly restrictEmployeeAccess: pulumi.Output<boolean>;
    /**
     * List of Organization roles that the Programmatic API key needs to have. Ensure that you provide at least one role and ensure all roles are valid for the Organization.  You must specify an array even if you are only associating a single role with the Programmatic API key. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles that you can assign to a Programmatic API key. This attribute is required in creation and can't be updated later.
     */
    declare public readonly roleNames: pulumi.Output<string[] | undefined>;
    /**
     * String that specifies a single email address for the specified organization to receive security-related notifications. Specifying a security contact does not grant them authorization or access to Atlas for security decisions or approvals.
     */
    declare public readonly securityContact: pulumi.Output<string | undefined>;
    declare public readonly skipDefaultAlertsSettings: pulumi.Output<boolean>;

    /**
     * Create a Organization resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args?: OrganizationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: OrganizationArgs | OrganizationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as OrganizationState | undefined;
            resourceInputs["apiAccessListRequired"] = state?.apiAccessListRequired;
            resourceInputs["description"] = state?.description;
            resourceInputs["federationSettingsId"] = state?.federationSettingsId;
            resourceInputs["genAiFeaturesEnabled"] = state?.genAiFeaturesEnabled;
            resourceInputs["multiFactorAuthRequired"] = state?.multiFactorAuthRequired;
            resourceInputs["name"] = state?.name;
            resourceInputs["orgId"] = state?.orgId;
            resourceInputs["orgOwnerId"] = state?.orgOwnerId;
            resourceInputs["privateKey"] = state?.privateKey;
            resourceInputs["publicKey"] = state?.publicKey;
            resourceInputs["restrictEmployeeAccess"] = state?.restrictEmployeeAccess;
            resourceInputs["roleNames"] = state?.roleNames;
            resourceInputs["securityContact"] = state?.securityContact;
            resourceInputs["skipDefaultAlertsSettings"] = state?.skipDefaultAlertsSettings;
        } else {
            const args = argsOrState as OrganizationArgs | undefined;
            resourceInputs["apiAccessListRequired"] = args?.apiAccessListRequired;
            resourceInputs["description"] = args?.description;
            resourceInputs["federationSettingsId"] = args?.federationSettingsId;
            resourceInputs["genAiFeaturesEnabled"] = args?.genAiFeaturesEnabled;
            resourceInputs["multiFactorAuthRequired"] = args?.multiFactorAuthRequired;
            resourceInputs["name"] = args?.name;
            resourceInputs["orgOwnerId"] = args?.orgOwnerId;
            resourceInputs["restrictEmployeeAccess"] = args?.restrictEmployeeAccess;
            resourceInputs["roleNames"] = args?.roleNames;
            resourceInputs["securityContact"] = args?.securityContact;
            resourceInputs["skipDefaultAlertsSettings"] = args?.skipDefaultAlertsSettings;
            resourceInputs["orgId"] = undefined /*out*/;
            resourceInputs["privateKey"] = undefined /*out*/;
            resourceInputs["publicKey"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["privateKey", "publicKey"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(Organization.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering Organization resources.
 */
export interface OrganizationState {
    /**
     * Flag that indicates whether to require API operations to originate from an IP Address added to the API access list for the specified organization.
     */
    apiAccessListRequired?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the federation to link the newly created organization to. If specified, the proposed Organization Owner of the new organization must have the Organization Owner role in an organization associated with the federation. This attribute can't be updated after creation.
     */
    federationSettingsId?: pulumi.Input<string>;
    /**
     * Flag that indicates whether this organization has access to generative AI features. This setting only applies to Atlas Commercial and defaults to `true`. With this setting on, Project Owners may be able to enable or disable individual AI features at the project level. To learn more, see https://www.mongodb.com/docs/generative-ai-faq/.
     */
    genAiFeaturesEnabled?: pulumi.Input<boolean>;
    /**
     * Flag that indicates whether to require users to set up Multi-Factor Authentication (MFA) before accessing the specified organization. To learn more, see: https://www.mongodb.com/docs/atlas/security-multi-factor-authentication/.
     */
    multiFactorAuthRequired?: pulumi.Input<boolean>;
    /**
     * The name of the organization.
     */
    name?: pulumi.Input<string>;
    /**
     * The organization id.
     */
    orgId?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the Atlas user that you want to assign the Organization Owner role. This user must be a member of the same organization as the calling API key.  This is only required when authenticating with Programmatic API Keys. [MongoDB Atlas Admin API - Get User By Username](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/MongoDB-Cloud-Users/operation/getUserByUsername). This attribute is required in creation and can't be updated later.
     */
    orgOwnerId?: pulumi.Input<string>;
    privateKey?: pulumi.Input<string>;
    /**
     * Public API key value set for the specified organization API key.
     */
    publicKey?: pulumi.Input<string>;
    /**
     * Flag that indicates whether to block MongoDB Support from accessing Atlas infrastructure for any deployment in the specified organization without explicit permission. Once this setting is turned on, you can grant MongoDB Support a 24-hour bypass access to the Atlas deployment to resolve support issues. To learn more, see: https://www.mongodb.com/docs/atlas/security-restrict-support-access/.
     */
    restrictEmployeeAccess?: pulumi.Input<boolean>;
    /**
     * List of Organization roles that the Programmatic API key needs to have. Ensure that you provide at least one role and ensure all roles are valid for the Organization.  You must specify an array even if you are only associating a single role with the Programmatic API key. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles that you can assign to a Programmatic API key. This attribute is required in creation and can't be updated later.
     */
    roleNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * String that specifies a single email address for the specified organization to receive security-related notifications. Specifying a security contact does not grant them authorization or access to Atlas for security decisions or approvals.
     */
    securityContact?: pulumi.Input<string>;
    skipDefaultAlertsSettings?: pulumi.Input<boolean>;
}

/**
 * The set of arguments for constructing a Organization resource.
 */
export interface OrganizationArgs {
    /**
     * Flag that indicates whether to require API operations to originate from an IP Address added to the API access list for the specified organization.
     */
    apiAccessListRequired?: pulumi.Input<boolean>;
    description?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the federation to link the newly created organization to. If specified, the proposed Organization Owner of the new organization must have the Organization Owner role in an organization associated with the federation. This attribute can't be updated after creation.
     */
    federationSettingsId?: pulumi.Input<string>;
    /**
     * Flag that indicates whether this organization has access to generative AI features. This setting only applies to Atlas Commercial and defaults to `true`. With this setting on, Project Owners may be able to enable or disable individual AI features at the project level. To learn more, see https://www.mongodb.com/docs/generative-ai-faq/.
     */
    genAiFeaturesEnabled?: pulumi.Input<boolean>;
    /**
     * Flag that indicates whether to require users to set up Multi-Factor Authentication (MFA) before accessing the specified organization. To learn more, see: https://www.mongodb.com/docs/atlas/security-multi-factor-authentication/.
     */
    multiFactorAuthRequired?: pulumi.Input<boolean>;
    /**
     * The name of the organization.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the Atlas user that you want to assign the Organization Owner role. This user must be a member of the same organization as the calling API key.  This is only required when authenticating with Programmatic API Keys. [MongoDB Atlas Admin API - Get User By Username](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/MongoDB-Cloud-Users/operation/getUserByUsername). This attribute is required in creation and can't be updated later.
     */
    orgOwnerId?: pulumi.Input<string>;
    /**
     * Flag that indicates whether to block MongoDB Support from accessing Atlas infrastructure for any deployment in the specified organization without explicit permission. Once this setting is turned on, you can grant MongoDB Support a 24-hour bypass access to the Atlas deployment to resolve support issues. To learn more, see: https://www.mongodb.com/docs/atlas/security-restrict-support-access/.
     */
    restrictEmployeeAccess?: pulumi.Input<boolean>;
    /**
     * List of Organization roles that the Programmatic API key needs to have. Ensure that you provide at least one role and ensure all roles are valid for the Organization.  You must specify an array even if you are only associating a single role with the Programmatic API key. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles that you can assign to a Programmatic API key. This attribute is required in creation and can't be updated later.
     */
    roleNames?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * String that specifies a single email address for the specified organization to receive security-related notifications. Specifying a security contact does not grant them authorization or access to Atlas for security decisions or approvals.
     */
    securityContact?: pulumi.Input<string>;
    skipDefaultAlertsSettings?: pulumi.Input<boolean>;
}
