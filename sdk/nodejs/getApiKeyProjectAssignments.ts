// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Data Source: mongodbatlas.getApiKeyProjectAssignments
 *
 * `mongodbatlas.getApiKeyProjectAssignments` provides an API Key Project Assignments data source. The data source lets you list all API key project assignments for an organization.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const _this = new mongodbatlas.ApiKey("this", {
 *     orgId: orgId,
 *     description: "Test API Key",
 *     roleNames: ["ORG_READ_ONLY"],
 * });
 * const firstProject = new mongodbatlas.Project("first_project", {
 *     name: "First Project",
 *     orgId: orgId,
 * });
 * const secondProject = new mongodbatlas.Project("second_project", {
 *     name: "Second Project",
 *     orgId: orgId,
 * });
 * const firstAssignment = new mongodbatlas.ApiKeyProjectAssignment("first_assignment", {
 *     projectId: firstProject.id,
 *     apiKeyId: _this.apiKeyId,
 *     roles: ["GROUP_OWNER"],
 * });
 * const secondAssignment = new mongodbatlas.ApiKeyProjectAssignment("second_assignment", {
 *     projectId: secondProject.id,
 *     apiKeyId: _this.apiKeyId,
 *     roles: ["GROUP_OWNER"],
 * });
 * // Add IP Access List Entry to Programmatic API Key 
 * const thisAccessListApiKey = new mongodbatlas.AccessListApiKey("this", {
 *     orgId: orgId,
 *     cidrBlock: "0.0.0.0/1",
 *     apiKeyId: _this.apiKeyId,
 * });
 * ```
 */
export function getApiKeyProjectAssignments(args: GetApiKeyProjectAssignmentsArgs, opts?: pulumi.InvokeOptions): Promise<GetApiKeyProjectAssignmentsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getApiKeyProjectAssignments:getApiKeyProjectAssignments", {
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getApiKeyProjectAssignments.
 */
export interface GetApiKeyProjectAssignmentsArgs {
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     */
    projectId: string;
}

/**
 * A collection of values returned by getApiKeyProjectAssignments.
 */
export interface GetApiKeyProjectAssignmentsResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     */
    readonly projectId: string;
    readonly results: outputs.GetApiKeyProjectAssignmentsResult[];
}
/**
 * ## # Data Source: mongodbatlas.getApiKeyProjectAssignments
 *
 * `mongodbatlas.getApiKeyProjectAssignments` provides an API Key Project Assignments data source. The data source lets you list all API key project assignments for an organization.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const _this = new mongodbatlas.ApiKey("this", {
 *     orgId: orgId,
 *     description: "Test API Key",
 *     roleNames: ["ORG_READ_ONLY"],
 * });
 * const firstProject = new mongodbatlas.Project("first_project", {
 *     name: "First Project",
 *     orgId: orgId,
 * });
 * const secondProject = new mongodbatlas.Project("second_project", {
 *     name: "Second Project",
 *     orgId: orgId,
 * });
 * const firstAssignment = new mongodbatlas.ApiKeyProjectAssignment("first_assignment", {
 *     projectId: firstProject.id,
 *     apiKeyId: _this.apiKeyId,
 *     roles: ["GROUP_OWNER"],
 * });
 * const secondAssignment = new mongodbatlas.ApiKeyProjectAssignment("second_assignment", {
 *     projectId: secondProject.id,
 *     apiKeyId: _this.apiKeyId,
 *     roles: ["GROUP_OWNER"],
 * });
 * // Add IP Access List Entry to Programmatic API Key 
 * const thisAccessListApiKey = new mongodbatlas.AccessListApiKey("this", {
 *     orgId: orgId,
 *     cidrBlock: "0.0.0.0/1",
 *     apiKeyId: _this.apiKeyId,
 * });
 * ```
 */
export function getApiKeyProjectAssignmentsOutput(args: GetApiKeyProjectAssignmentsOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetApiKeyProjectAssignmentsResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getApiKeyProjectAssignments:getApiKeyProjectAssignments", {
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getApiKeyProjectAssignments.
 */
export interface GetApiKeyProjectAssignmentsOutputArgs {
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     */
    projectId: pulumi.Input<string>;
}
