// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * **WARNING:** Data Lake is deprecated. To learn more, see <https://dochub.mongodb.org/core/data-lake-deprecation>
 *
 * `mongodbatlas.DataLakePipeline` provides a Data Lake Pipeline resource.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ## Import
 *
 * Data Lake Pipeline can be imported using project ID, name of the data lake and name of the AWS s3 bucket, in the format `project_id`--`name`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/dataLakePipeline:DataLakePipeline example 1112222b3bf99403840e8934--test-data-lake-pipeline-test
 * ```
 *
 * See [MongoDB Atlas API](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Data-Lake-Pipelines) Documentation for more information.
 */
export class DataLakePipeline extends pulumi.CustomResource {
    /**
     * Get an existing DataLakePipeline resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: DataLakePipelineState, opts?: pulumi.CustomResourceOptions): DataLakePipeline {
        return new DataLakePipeline(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/dataLakePipeline:DataLakePipeline';

    /**
     * Returns true if the given object is an instance of DataLakePipeline.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is DataLakePipeline {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === DataLakePipeline.__pulumiType;
    }

    /**
     * Timestamp that indicates when the Data Lake Pipeline was created.
     */
    declare public /*out*/ readonly createdDate: pulumi.Output<string>;
    /**
     * List of backup schedule policy items that you can use as a Data Lake Pipeline source.
     * * `ingestion_schedules.#.id` - Unique 24-hexadecimal digit string that identifies this backup policy item.
     * * `ingestion_schedules.#.frequency_type` - Human-readable label that identifies the frequency type associated with the backup policy.
     * * `ingestion_schedules.#.frequency_interval` - Number that indicates the frequency interval for a set of snapshots.
     * * `ingestion_schedules.#.retention_unit` - Unit of time in which MongoDB Atlas measures snapshot retention.
     * * `ingestion_schedules.#.retention_value` - Duration in days, weeks, or months that MongoDB Atlas retains the snapshot.
     */
    declare public /*out*/ readonly ingestionSchedules: pulumi.Output<outputs.DataLakePipelineIngestionSchedule[]>;
    /**
     * Timestamp that indicates the last time that the Data Lake Pipeline was updated.
     */
    declare public /*out*/ readonly lastUpdatedDate: pulumi.Output<string>;
    /**
     * Name of the Atlas Data Lake Pipeline.
     */
    declare public readonly name: pulumi.Output<string>;
    /**
     * The unique ID for the project to create a data lake pipeline.
     */
    declare public readonly projectId: pulumi.Output<string>;
    declare public readonly sink: pulumi.Output<outputs.DataLakePipelineSink | undefined>;
    /**
     * List of backup snapshots that you can use to trigger an on demand pipeline run.
     * * `snapshots.#.id` - Unique 24-hexadecimal digit string that identifies the snapshot.
     * * `snapshots.#.provider` - Human-readable label that identifies the cloud provider that stores this snapshot.
     * * `snapshots.#.created_at` - Date and time when MongoDB Atlas took the snapshot.
     * * `snapshots.#.expires_at` - Date and time when MongoDB Atlas deletes the snapshot.
     * * `snapshots.#.frequency_type` - Human-readable label that identifies how often this snapshot triggers.
     * * `snapshots.#.master_key` - Unique string that identifies the Amazon Web Services (AWS) Key Management Service (KMS) Customer Master Key (CMK) used to encrypt the snapshot.
     * * `snapshots.#.mongod_version` - Version of the MongoDB host that this snapshot backs up.
     * * `snapshots.#.replica_set_name` - Human-readable label that identifies the replica set from which MongoDB Atlas took this snapshot.
     * * `snapshots.#.type` - Human-readable label that categorizes the cluster as a replica set or sharded cluster.
     * * `snapshots.#.snapshot_type` - Human-readable label that identifies when this snapshot triggers.
     * * `snapshots.#.status` - Human-readable label that indicates the stage of the backup process for this snapshot.
     * * `snapshots.#.size` - List of backup snapshots that you can use to trigger an on demand pipeline run.
     * * `snapshots.#.copy_region` - List that identifies the regions to which MongoDB Atlas copies the snapshot.
     * * `snapshots.#.policies` - List that contains unique identifiers for the policy items.
     */
    declare public /*out*/ readonly snapshots: pulumi.Output<outputs.DataLakePipelineSnapshot[]>;
    declare public readonly source: pulumi.Output<outputs.DataLakePipelineSource | undefined>;
    /**
     * State of this Data Lake Pipeline.
     */
    declare public /*out*/ readonly state: pulumi.Output<string>;
    /**
     * Fields to be excluded for this Data Lake Pipeline.
     * * `transformations.#.field` - Key in the document.
     * * `transformations.#.type` - Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
     */
    declare public readonly transformations: pulumi.Output<outputs.DataLakePipelineTransformation[] | undefined>;

    /**
     * Create a DataLakePipeline resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: DataLakePipelineArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: DataLakePipelineArgs | DataLakePipelineState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as DataLakePipelineState | undefined;
            resourceInputs["createdDate"] = state?.createdDate;
            resourceInputs["ingestionSchedules"] = state?.ingestionSchedules;
            resourceInputs["lastUpdatedDate"] = state?.lastUpdatedDate;
            resourceInputs["name"] = state?.name;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["sink"] = state?.sink;
            resourceInputs["snapshots"] = state?.snapshots;
            resourceInputs["source"] = state?.source;
            resourceInputs["state"] = state?.state;
            resourceInputs["transformations"] = state?.transformations;
        } else {
            const args = argsOrState as DataLakePipelineArgs | undefined;
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["name"] = args?.name;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["sink"] = args?.sink;
            resourceInputs["source"] = args?.source;
            resourceInputs["transformations"] = args?.transformations;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["ingestionSchedules"] = undefined /*out*/;
            resourceInputs["lastUpdatedDate"] = undefined /*out*/;
            resourceInputs["snapshots"] = undefined /*out*/;
            resourceInputs["state"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(DataLakePipeline.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering DataLakePipeline resources.
 */
export interface DataLakePipelineState {
    /**
     * Timestamp that indicates when the Data Lake Pipeline was created.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * List of backup schedule policy items that you can use as a Data Lake Pipeline source.
     * * `ingestion_schedules.#.id` - Unique 24-hexadecimal digit string that identifies this backup policy item.
     * * `ingestion_schedules.#.frequency_type` - Human-readable label that identifies the frequency type associated with the backup policy.
     * * `ingestion_schedules.#.frequency_interval` - Number that indicates the frequency interval for a set of snapshots.
     * * `ingestion_schedules.#.retention_unit` - Unit of time in which MongoDB Atlas measures snapshot retention.
     * * `ingestion_schedules.#.retention_value` - Duration in days, weeks, or months that MongoDB Atlas retains the snapshot.
     */
    ingestionSchedules?: pulumi.Input<pulumi.Input<inputs.DataLakePipelineIngestionSchedule>[]>;
    /**
     * Timestamp that indicates the last time that the Data Lake Pipeline was updated.
     */
    lastUpdatedDate?: pulumi.Input<string>;
    /**
     * Name of the Atlas Data Lake Pipeline.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique ID for the project to create a data lake pipeline.
     */
    projectId?: pulumi.Input<string>;
    sink?: pulumi.Input<inputs.DataLakePipelineSink>;
    /**
     * List of backup snapshots that you can use to trigger an on demand pipeline run.
     * * `snapshots.#.id` - Unique 24-hexadecimal digit string that identifies the snapshot.
     * * `snapshots.#.provider` - Human-readable label that identifies the cloud provider that stores this snapshot.
     * * `snapshots.#.created_at` - Date and time when MongoDB Atlas took the snapshot.
     * * `snapshots.#.expires_at` - Date and time when MongoDB Atlas deletes the snapshot.
     * * `snapshots.#.frequency_type` - Human-readable label that identifies how often this snapshot triggers.
     * * `snapshots.#.master_key` - Unique string that identifies the Amazon Web Services (AWS) Key Management Service (KMS) Customer Master Key (CMK) used to encrypt the snapshot.
     * * `snapshots.#.mongod_version` - Version of the MongoDB host that this snapshot backs up.
     * * `snapshots.#.replica_set_name` - Human-readable label that identifies the replica set from which MongoDB Atlas took this snapshot.
     * * `snapshots.#.type` - Human-readable label that categorizes the cluster as a replica set or sharded cluster.
     * * `snapshots.#.snapshot_type` - Human-readable label that identifies when this snapshot triggers.
     * * `snapshots.#.status` - Human-readable label that indicates the stage of the backup process for this snapshot.
     * * `snapshots.#.size` - List of backup snapshots that you can use to trigger an on demand pipeline run.
     * * `snapshots.#.copy_region` - List that identifies the regions to which MongoDB Atlas copies the snapshot.
     * * `snapshots.#.policies` - List that contains unique identifiers for the policy items.
     */
    snapshots?: pulumi.Input<pulumi.Input<inputs.DataLakePipelineSnapshot>[]>;
    source?: pulumi.Input<inputs.DataLakePipelineSource>;
    /**
     * State of this Data Lake Pipeline.
     */
    state?: pulumi.Input<string>;
    /**
     * Fields to be excluded for this Data Lake Pipeline.
     * * `transformations.#.field` - Key in the document.
     * * `transformations.#.type` - Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
     */
    transformations?: pulumi.Input<pulumi.Input<inputs.DataLakePipelineTransformation>[]>;
}

/**
 * The set of arguments for constructing a DataLakePipeline resource.
 */
export interface DataLakePipelineArgs {
    /**
     * Name of the Atlas Data Lake Pipeline.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique ID for the project to create a data lake pipeline.
     */
    projectId: pulumi.Input<string>;
    sink?: pulumi.Input<inputs.DataLakePipelineSink>;
    source?: pulumi.Input<inputs.DataLakePipelineSource>;
    /**
     * Fields to be excluded for this Data Lake Pipeline.
     * * `transformations.#.field` - Key in the document.
     * * `transformations.#.type` - Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
     */
    transformations?: pulumi.Input<pulumi.Input<inputs.DataLakePipelineTransformation>[]>;
}
