// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `privatelinkEndpointServiceServerless` Provides a Serverless PrivateLink Endpoint Service resource.
 * This is the second of two resources required to configure PrivateLink for Serverless, the first is mongodbatlas_privatelink_endpoint_serverless.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
 * **NOTE:** Create waits for all serverless instances on the project to IDLE in order for their operations to complete. This ensures the latest connection strings can be retrieved following creation of this resource. Default timeout is 2hrs.
 *
 * ## Example with AWS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testServerlessInstance = new mongodbatlas.ServerlessInstance("testServerlessInstance", {
 *     projectId: "<PROJECT_ID>",
 *     providerSettingsBackingProviderName: "AWS",
 *     providerSettingsProviderName: "SERVERLESS",
 *     providerSettingsRegionName: "US_EAST_1",
 *     continuousBackupEnabled: true,
 * });
 * const testPrivatelinkEndpointServerless = new mongodbatlas.PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", {
 *     projectId: "<PROJECT_ID>",
 *     instanceName: testServerlessInstance.name,
 *     providerName: "AWS",
 * });
 * const ptfeService = new aws.ec2.VpcEndpoint("ptfeService", {
 *     vpcId: "vpc-7fc0a543",
 *     serviceName: testPrivatelinkEndpointServerless.endpointServiceName,
 *     vpcEndpointType: "Interface",
 *     subnetIds: ["subnet-de0406d2"],
 *     securityGroupIds: ["sg-3f238186"],
 * });
 * const testPrivatelinkEndpointServiceServerless = new mongodbatlas.PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", {
 *     projectId: "<PROJECT_ID>",
 *     instanceName: testServerlessInstance.name,
 *     endpointId: testPrivatelinkEndpointServerless.endpointId,
 *     cloudProviderEndpointId: ptfeService.id,
 *     providerName: "AWS",
 *     comment: "New serverless endpoint",
 * });
 * ```
 *
 * ## Example with AZURE
 * ### Available complete examples
 * - Setup private connection to a MongoDB Atlas Serverless Instance with AWS VPC
 *
 * ## Import
 *
 * Serverless privatelink endpoint can be imported using project ID and endpoint ID, in the format `project_id`--`endpoint_id`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/privatelinkEndpointServiceServerless:PrivatelinkEndpointServiceServerless test 1112222b3bf99403840e8934--serverless_name--vpce-jjg5e24qp93513h03
 * ```
 *  For more information see: [MongoDB Atlas API - Serverless Private Endpoints](https://www.mongodb.com/docs/atlas/reference/api/serverless-private-endpoints-get-one/).
 */
export class PrivatelinkEndpointServiceServerless extends pulumi.CustomResource {
    /**
     * Get an existing PrivatelinkEndpointServiceServerless resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: PrivatelinkEndpointServiceServerlessState, opts?: pulumi.CustomResourceOptions): PrivatelinkEndpointServiceServerless {
        return new PrivatelinkEndpointServiceServerless(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/privatelinkEndpointServiceServerless:PrivatelinkEndpointServiceServerless';

    /**
     * Returns true if the given object is an instance of PrivatelinkEndpointServiceServerless.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is PrivatelinkEndpointServiceServerless {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === PrivatelinkEndpointServiceServerless.__pulumiType;
    }

    /**
     * Unique string that identifies the private endpoint's network interface.
     */
    public readonly cloudProviderEndpointId!: pulumi.Output<string>;
    /**
     * Human-readable string to associate with this private endpoint.
     */
    public readonly comment!: pulumi.Output<string | undefined>;
    /**
     * Unique 24-hexadecimal digit string that identifies the private endpoint.
     */
    public readonly endpointId!: pulumi.Output<string>;
    /**
     * Human-readable label that identifies the serverless instance.
     */
    public readonly instanceName!: pulumi.Output<string>;
    /**
     * IPv4 address of the private endpoint in your Azure VNet that someone added to this private endpoint service.
     */
    public readonly privateEndpointIpAddress!: pulumi.Output<string>;
    /**
     * Root-relative path that identifies the Azure Private Link Service that MongoDB Cloud manages.
     */
    public /*out*/ readonly privateLinkServiceResourceId!: pulumi.Output<string>;
    /**
     * Unique 24-digit hexadecimal string that identifies the project.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Cloud provider for which you want to create a private endpoint. Atlas accepts `AWS`, `AZURE`.
     */
    public readonly providerName!: pulumi.Output<string>;
    /**
     * Human-readable label that indicates the current operating status of the private endpoint. Values include: RESERVATION_REQUESTED, RESERVED, INITIATING, AVAILABLE, FAILED, DELETING.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;

    /**
     * Create a PrivatelinkEndpointServiceServerless resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: PrivatelinkEndpointServiceServerlessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: PrivatelinkEndpointServiceServerlessArgs | PrivatelinkEndpointServiceServerlessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as PrivatelinkEndpointServiceServerlessState | undefined;
            resourceInputs["cloudProviderEndpointId"] = state ? state.cloudProviderEndpointId : undefined;
            resourceInputs["comment"] = state ? state.comment : undefined;
            resourceInputs["endpointId"] = state ? state.endpointId : undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["privateEndpointIpAddress"] = state ? state.privateEndpointIpAddress : undefined;
            resourceInputs["privateLinkServiceResourceId"] = state ? state.privateLinkServiceResourceId : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
        } else {
            const args = argsOrState as PrivatelinkEndpointServiceServerlessArgs | undefined;
            if ((!args || args.endpointId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'endpointId'");
            }
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            resourceInputs["cloudProviderEndpointId"] = args ? args.cloudProviderEndpointId : undefined;
            resourceInputs["comment"] = args ? args.comment : undefined;
            resourceInputs["endpointId"] = args ? args.endpointId : undefined;
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["privateEndpointIpAddress"] = args ? args.privateEndpointIpAddress : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["privateLinkServiceResourceId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(PrivatelinkEndpointServiceServerless.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering PrivatelinkEndpointServiceServerless resources.
 */
export interface PrivatelinkEndpointServiceServerlessState {
    /**
     * Unique string that identifies the private endpoint's network interface.
     */
    cloudProviderEndpointId?: pulumi.Input<string>;
    /**
     * Human-readable string to associate with this private endpoint.
     */
    comment?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the private endpoint.
     */
    endpointId?: pulumi.Input<string>;
    /**
     * Human-readable label that identifies the serverless instance.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * IPv4 address of the private endpoint in your Azure VNet that someone added to this private endpoint service.
     */
    privateEndpointIpAddress?: pulumi.Input<string>;
    /**
     * Root-relative path that identifies the Azure Private Link Service that MongoDB Cloud manages.
     */
    privateLinkServiceResourceId?: pulumi.Input<string>;
    /**
     * Unique 24-digit hexadecimal string that identifies the project.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Cloud provider for which you want to create a private endpoint. Atlas accepts `AWS`, `AZURE`.
     */
    providerName?: pulumi.Input<string>;
    /**
     * Human-readable label that indicates the current operating status of the private endpoint. Values include: RESERVATION_REQUESTED, RESERVED, INITIATING, AVAILABLE, FAILED, DELETING.
     */
    status?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a PrivatelinkEndpointServiceServerless resource.
 */
export interface PrivatelinkEndpointServiceServerlessArgs {
    /**
     * Unique string that identifies the private endpoint's network interface.
     */
    cloudProviderEndpointId?: pulumi.Input<string>;
    /**
     * Human-readable string to associate with this private endpoint.
     */
    comment?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the private endpoint.
     */
    endpointId: pulumi.Input<string>;
    /**
     * Human-readable label that identifies the serverless instance.
     */
    instanceName: pulumi.Input<string>;
    /**
     * IPv4 address of the private endpoint in your Azure VNet that someone added to this private endpoint service.
     */
    privateEndpointIpAddress?: pulumi.Input<string>;
    /**
     * Unique 24-digit hexadecimal string that identifies the project.
     */
    projectId: pulumi.Input<string>;
    /**
     * Cloud provider for which you want to create a private endpoint. Atlas accepts `AWS`, `AZURE`.
     */
    providerName: pulumi.Input<string>;
}
