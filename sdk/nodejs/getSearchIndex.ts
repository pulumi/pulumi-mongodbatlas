// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## # Data Source: mongodbatlas.SearchIndex
 *
 * `mongodbatlas.SearchIndex` describes a single search indexes. This represents a single search index that have been created.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getSearchIndex({
 *     indexId: "<INDEX_ID",
 *     projectId: "<PROJECT_ID>",
 *     clusterName: "<CLUSTER_NAME>",
 * });
 * ```
 */
export function getSearchIndex(args: GetSearchIndexArgs, opts?: pulumi.InvokeOptions): Promise<GetSearchIndexResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getSearchIndex:getSearchIndex", {
        "clusterName": args.clusterName,
        "indexId": args.indexId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSearchIndex.
 */
export interface GetSearchIndexArgs {
    /**
     * The name of the cluster containing the collection with one or more Atlas Search indexes.
     */
    clusterName: string;
    /**
     * The unique identifier of the Atlas Search index. Use the `mongodbatlas.getSearchIndexes`datasource to find the IDs of all Atlas Search indexes.
     */
    indexId: string;
    /**
     * The unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
     */
    projectId: string;
}

/**
 * A collection of values returned by getSearchIndex.
 */
export interface GetSearchIndexResult {
    /**
     * [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index.
     */
    readonly analyzer: string;
    /**
     * [Custom analyzers](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-custom-analyzers) to use in this index (this is an array of objects).
     */
    readonly analyzers: string;
    readonly clusterName: string;
    /**
     * Name of the collection the index is on.
     */
    readonly collectionName: string;
    /**
     * Name of the database the collection is in.
     */
    readonly database: string;
    readonly fields: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    readonly indexId: string;
    /**
     * Flag indicating whether the index uses dynamic or static mappings.
     */
    readonly mappingsDynamic: boolean;
    /**
     * Object containing one or more field specifications.
     */
    readonly mappingsFields: string;
    /**
     * Name of the index.
     */
    readonly name: string;
    readonly projectId: string;
    /**
     * [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when searching the index.
     */
    readonly searchAnalyzer: string;
    /**
     * Current status of the index.
     */
    readonly status: string;
    /**
     * String that can be "true" (store all fields), "false" (default, don't store any field), or a JSON string that contains the list of fields to store (include) or not store (exclude) on Atlas Search. To learn more, see [Stored Source Fields](https://www.mongodb.com/docs/atlas/atlas-search/stored-source-definition/).
     */
    readonly storedSource: string;
    /**
     * Synonyms mapping definition to use in this index.
     * * `synonyms.#.name` - Name of the [synonym mapping definition](https://docs.atlas.mongodb.com/reference/atlas-search/synonyms/#std-label-synonyms-ref).
     * * `synonyms.#.source_collection` - Name of the source MongoDB collection for the synonyms.
     * * `synonyms.#.analyzer` - Name of the [analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use with this synonym mapping.
     */
    readonly synonyms: outputs.GetSearchIndexSynonym[];
    readonly type: string;
}
/**
 * ## # Data Source: mongodbatlas.SearchIndex
 *
 * `mongodbatlas.SearchIndex` describes a single search indexes. This represents a single search index that have been created.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = mongodbatlas.getSearchIndex({
 *     indexId: "<INDEX_ID",
 *     projectId: "<PROJECT_ID>",
 *     clusterName: "<CLUSTER_NAME>",
 * });
 * ```
 */
export function getSearchIndexOutput(args: GetSearchIndexOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetSearchIndexResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getSearchIndex:getSearchIndex", {
        "clusterName": args.clusterName,
        "indexId": args.indexId,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getSearchIndex.
 */
export interface GetSearchIndexOutputArgs {
    /**
     * The name of the cluster containing the collection with one or more Atlas Search indexes.
     */
    clusterName: pulumi.Input<string>;
    /**
     * The unique identifier of the Atlas Search index. Use the `mongodbatlas.getSearchIndexes`datasource to find the IDs of all Atlas Search indexes.
     */
    indexId: pulumi.Input<string>;
    /**
     * The unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
     */
    projectId: pulumi.Input<string>;
}
