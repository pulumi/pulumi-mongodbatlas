// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.LdapVerify` provides an LDAP Verify resource. This allows a a verification of an LDAP configuration over TLS for an Atlas project. Atlas retains only the most recent request for each project.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testProject = new mongodbatlas.Project("testProject", {orgId: "ORG ID"});
 * const testCluster = new mongodbatlas.Cluster("testCluster", {
 *     projectId: testProject.id,
 *     diskSizeGb: 5,
 *     providerName: "AWS",
 *     providerRegionName: "US_EAST_2",
 *     providerInstanceSizeName: "M10",
 *     cloudBackup: true,
 * });
 * //enable cloud provider snapshots
 * const testLdapVerify = new mongodbatlas.LdapVerify("testLdapVerify", {
 *     projectId: testProject.id,
 *     hostname: "HOSTNAME",
 *     port: 636,
 *     bindUsername: "USERNAME",
 *     bindPassword: "PASSWORD",
 * }, {
 *     dependsOn: [testCluster],
 * });
 * ```
 *
 * ## Import
 *
 * LDAP Configuration must be imported using project ID and request ID, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/ldapVerify:LdapVerify test 5d09d6a59ccf6445652a444a-5d09d6a59ccf6445652a444a
 * ```
 *
 *  For more information see[MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
 */
export class LdapVerify extends pulumi.CustomResource {
    /**
     * Get an existing LdapVerify resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: LdapVerifyState, opts?: pulumi.CustomResourceOptions): LdapVerify {
        return new LdapVerify(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/ldapVerify:LdapVerify';

    /**
     * Returns true if the given object is an instance of LdapVerify.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is LdapVerify {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === LdapVerify.__pulumiType;
    }

    /**
     * An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
     */
    public readonly authzQueryTemplate!: pulumi.Output<string>;
    /**
     * The password used to authenticate the `bindUsername`.
     */
    public readonly bindPassword!: pulumi.Output<string>;
    /**
     * The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
     */
    public readonly bindUsername!: pulumi.Output<string>;
    /**
     * CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
     */
    public readonly caCertificate!: pulumi.Output<string>;
    /**
     * The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
     */
    public readonly hostname!: pulumi.Output<string>;
    /**
     * One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
     */
    public /*out*/ readonly links!: pulumi.Output<outputs.LdapVerifyLink[]>;
    /**
     * The port to which the LDAP server listens for client connections. Default: `636`
     */
    public readonly port!: pulumi.Output<number>;
    /**
     * The unique ID for the project to configure LDAP.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
     */
    public /*out*/ readonly requestId!: pulumi.Output<string>;
    /**
     * The current status of the LDAP over TLS/SSL configuration. One of the following values: `PENDING`, `SUCCESS`, and `FAILED`.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details. The array contains a document for each test that Atlas runs. Atlas stops running tests after the first failure. The following return values can be seen here: [Values](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
     */
    public /*out*/ readonly validations!: pulumi.Output<outputs.LdapVerifyValidation[]>;

    /**
     * Create a LdapVerify resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: LdapVerifyArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: LdapVerifyArgs | LdapVerifyState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as LdapVerifyState | undefined;
            resourceInputs["authzQueryTemplate"] = state ? state.authzQueryTemplate : undefined;
            resourceInputs["bindPassword"] = state ? state.bindPassword : undefined;
            resourceInputs["bindUsername"] = state ? state.bindUsername : undefined;
            resourceInputs["caCertificate"] = state ? state.caCertificate : undefined;
            resourceInputs["hostname"] = state ? state.hostname : undefined;
            resourceInputs["links"] = state ? state.links : undefined;
            resourceInputs["port"] = state ? state.port : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["requestId"] = state ? state.requestId : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["validations"] = state ? state.validations : undefined;
        } else {
            const args = argsOrState as LdapVerifyArgs | undefined;
            if ((!args || args.bindPassword === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindPassword'");
            }
            if ((!args || args.bindUsername === undefined) && !opts.urn) {
                throw new Error("Missing required property 'bindUsername'");
            }
            if ((!args || args.hostname === undefined) && !opts.urn) {
                throw new Error("Missing required property 'hostname'");
            }
            if ((!args || args.port === undefined) && !opts.urn) {
                throw new Error("Missing required property 'port'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["authzQueryTemplate"] = args ? args.authzQueryTemplate : undefined;
            resourceInputs["bindPassword"] = args ? args.bindPassword : undefined;
            resourceInputs["bindUsername"] = args ? args.bindUsername : undefined;
            resourceInputs["caCertificate"] = args ? args.caCertificate : undefined;
            resourceInputs["hostname"] = args ? args.hostname : undefined;
            resourceInputs["port"] = args ? args.port : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["links"] = undefined /*out*/;
            resourceInputs["requestId"] = undefined /*out*/;
            resourceInputs["status"] = undefined /*out*/;
            resourceInputs["validations"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(LdapVerify.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering LdapVerify resources.
 */
export interface LdapVerifyState {
    /**
     * An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
     */
    authzQueryTemplate?: pulumi.Input<string>;
    /**
     * The password used to authenticate the `bindUsername`.
     */
    bindPassword?: pulumi.Input<string>;
    /**
     * The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
     */
    bindUsername?: pulumi.Input<string>;
    /**
     * CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
     */
    hostname?: pulumi.Input<string>;
    /**
     * One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
     */
    links?: pulumi.Input<pulumi.Input<inputs.LdapVerifyLink>[]>;
    /**
     * The port to which the LDAP server listens for client connections. Default: `636`
     */
    port?: pulumi.Input<number>;
    /**
     * The unique ID for the project to configure LDAP.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
     */
    requestId?: pulumi.Input<string>;
    /**
     * The current status of the LDAP over TLS/SSL configuration. One of the following values: `PENDING`, `SUCCESS`, and `FAILED`.
     */
    status?: pulumi.Input<string>;
    /**
     * Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details. The array contains a document for each test that Atlas runs. Atlas stops running tests after the first failure. The following return values can be seen here: [Values](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
     */
    validations?: pulumi.Input<pulumi.Input<inputs.LdapVerifyValidation>[]>;
}

/**
 * The set of arguments for constructing a LdapVerify resource.
 */
export interface LdapVerifyArgs {
    /**
     * An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
     */
    authzQueryTemplate?: pulumi.Input<string>;
    /**
     * The password used to authenticate the `bindUsername`.
     */
    bindPassword: pulumi.Input<string>;
    /**
     * The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
     */
    bindUsername: pulumi.Input<string>;
    /**
     * CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
     */
    caCertificate?: pulumi.Input<string>;
    /**
     * The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
     */
    hostname: pulumi.Input<string>;
    /**
     * The port to which the LDAP server listens for client connections. Default: `636`
     */
    port: pulumi.Input<number>;
    /**
     * The unique ID for the project to configure LDAP.
     */
    projectId: pulumi.Input<string>;
}
