// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.FederatedSettingsIdentityProvider` provides an Atlas federated settings identity provider resource provides a subset of settings to be maintained post import of the existing resource.
 *
 * > **NOTE:** OIDC Workforce IdP is currently in preview. To learn more about OIDC and existing limitations see the [OIDC Authentication Documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
 * ## Example Usage
 *
 * > **IMPORTANT** You **MUST** import this resource before you can manage it with this provider.
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const identityProvider = new mongodbatlas.FederatedSettingsIdentityProvider("identityProvider", {
 *     associatedDomains: ["yourdomain.com"],
 *     federationSettingsId: "627a9687f7f7f7f774de306f14",
 *     issuerUri: "http://www.okta.com/exk17q7f7f7f7fp50h8",
 *     requestBinding: "HTTP-POST",
 *     responseSignatureAlgorithm: "SHA-256",
 *     ssoDebugEnabled: true,
 *     ssoUrl: "https://mysso.oktapreview.com/app/mysso_terraformtestsso/exk17q7f7f7f7f50h8/sso/saml",
 *     status: "ACTIVE",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Identity Provider __must__ be imported before using federation_settings_id-idp_id, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/federatedSettingsIdentityProvider:FederatedSettingsIdentityProvider identity_provider 6287a663c660f52b1c441c6c-0oad4fas87jL5Xnk1297
 * ```
 * __WARNING:__ Starting from terraform provider version 1.16.0, to import the resource a 24-hexadecimal digit string that identifies the IdP (`idp_id`) will have to be used instead of `okta_idp_id`. See more [here](../guides/1.15.0-upgrade-guide.html.markdown)
 *
 * For more information see: [MongoDB Atlas API Reference.](https://www.mongodb.com/docs/atlas/reference/api/federation-configuration/)
 */
export class FederatedSettingsIdentityProvider extends pulumi.CustomResource {
    /**
     * Get an existing FederatedSettingsIdentityProvider resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: FederatedSettingsIdentityProviderState, opts?: pulumi.CustomResourceOptions): FederatedSettingsIdentityProvider {
        return new FederatedSettingsIdentityProvider(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/federatedSettingsIdentityProvider:FederatedSettingsIdentityProvider';

    /**
     * Returns true if the given object is an instance of FederatedSettingsIdentityProvider.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is FederatedSettingsIdentityProvider {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === FederatedSettingsIdentityProvider.__pulumiType;
    }

    /**
     * List that contains the domains associated with the identity provider.
     */
    public readonly associatedDomains!: pulumi.Output<string[] | undefined>;
    /**
     * Identifier of the intended recipient of the token used in OIDC IdP.
     */
    public readonly audienceClaims!: pulumi.Output<string[] | undefined>;
    /**
     * Client identifier that is assigned to an application by the OIDC Identity Provider.
     */
    public readonly clientId!: pulumi.Output<string | undefined>;
    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     */
    public readonly federationSettingsId!: pulumi.Output<string>;
    /**
     * Identifier of the claim which contains OIDC IdP Group IDs in the token.
     */
    public readonly groupsClaim!: pulumi.Output<string | undefined>;
    /**
     * Unique 24-hexadecimal digit string that identifies the IdP.
     */
    public /*out*/ readonly idpId!: pulumi.Output<string>;
    /**
     * Unique string that identifies the issuer of the IdP.
     */
    public readonly issuerUri!: pulumi.Output<string>;
    /**
     * Human-readable label that identifies the identity provider.
     */
    public readonly name!: pulumi.Output<string>;
    /**
     * Unique 20-hexadecimal digit string that identifies the IdP.
     */
    public /*out*/ readonly oktaIdpId!: pulumi.Output<string>;
    /**
     * The protocol of the identity provider. Either `SAML` or `OIDC`.
     */
    public readonly protocol!: pulumi.Output<string>;
    /**
     * SAML Authentication Request Protocol HTTP method binding (`POST` or `REDIRECT`) that Federated Authentication uses to send the authentication request. Atlas supports the following binding values:
     * - HTTP POST
     * - HTTP REDIRECT
     */
    public readonly requestBinding!: pulumi.Output<string | undefined>;
    /**
     * Scopes that MongoDB applications will request from the authorization endpoint used for OIDC IdPs.
     */
    public readonly requestedScopes!: pulumi.Output<string[] | undefined>;
    /**
     * Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.  Valid values include `SHA-1 `and `SHA-256`.
     */
    public readonly responseSignatureAlgorithm!: pulumi.Output<string | undefined>;
    /**
     * Flag that indicates whether the identity provider has SSO debug enabled.
     */
    public readonly ssoDebugEnabled!: pulumi.Output<boolean | undefined>;
    /**
     * Unique string that identifies the intended audience of the SAML assertion.
     */
    public readonly ssoUrl!: pulumi.Output<string | undefined>;
    /**
     * String enum that indicates whether the identity provider is active or not. Accepted values are ACTIVE or INACTIVE.
     */
    public readonly status!: pulumi.Output<string | undefined>;
    /**
     * Identifier of the claim which contains the user ID in the token used for OIDC IdPs.
     */
    public readonly userClaim!: pulumi.Output<string | undefined>;

    /**
     * Create a FederatedSettingsIdentityProvider resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: FederatedSettingsIdentityProviderArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: FederatedSettingsIdentityProviderArgs | FederatedSettingsIdentityProviderState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as FederatedSettingsIdentityProviderState | undefined;
            resourceInputs["associatedDomains"] = state ? state.associatedDomains : undefined;
            resourceInputs["audienceClaims"] = state ? state.audienceClaims : undefined;
            resourceInputs["clientId"] = state ? state.clientId : undefined;
            resourceInputs["federationSettingsId"] = state ? state.federationSettingsId : undefined;
            resourceInputs["groupsClaim"] = state ? state.groupsClaim : undefined;
            resourceInputs["idpId"] = state ? state.idpId : undefined;
            resourceInputs["issuerUri"] = state ? state.issuerUri : undefined;
            resourceInputs["name"] = state ? state.name : undefined;
            resourceInputs["oktaIdpId"] = state ? state.oktaIdpId : undefined;
            resourceInputs["protocol"] = state ? state.protocol : undefined;
            resourceInputs["requestBinding"] = state ? state.requestBinding : undefined;
            resourceInputs["requestedScopes"] = state ? state.requestedScopes : undefined;
            resourceInputs["responseSignatureAlgorithm"] = state ? state.responseSignatureAlgorithm : undefined;
            resourceInputs["ssoDebugEnabled"] = state ? state.ssoDebugEnabled : undefined;
            resourceInputs["ssoUrl"] = state ? state.ssoUrl : undefined;
            resourceInputs["status"] = state ? state.status : undefined;
            resourceInputs["userClaim"] = state ? state.userClaim : undefined;
        } else {
            const args = argsOrState as FederatedSettingsIdentityProviderArgs | undefined;
            if ((!args || args.federationSettingsId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'federationSettingsId'");
            }
            if ((!args || args.issuerUri === undefined) && !opts.urn) {
                throw new Error("Missing required property 'issuerUri'");
            }
            resourceInputs["associatedDomains"] = args ? args.associatedDomains : undefined;
            resourceInputs["audienceClaims"] = args ? args.audienceClaims : undefined;
            resourceInputs["clientId"] = args ? args.clientId : undefined;
            resourceInputs["federationSettingsId"] = args ? args.federationSettingsId : undefined;
            resourceInputs["groupsClaim"] = args ? args.groupsClaim : undefined;
            resourceInputs["issuerUri"] = args ? args.issuerUri : undefined;
            resourceInputs["name"] = args ? args.name : undefined;
            resourceInputs["protocol"] = args ? args.protocol : undefined;
            resourceInputs["requestBinding"] = args ? args.requestBinding : undefined;
            resourceInputs["requestedScopes"] = args ? args.requestedScopes : undefined;
            resourceInputs["responseSignatureAlgorithm"] = args ? args.responseSignatureAlgorithm : undefined;
            resourceInputs["ssoDebugEnabled"] = args ? args.ssoDebugEnabled : undefined;
            resourceInputs["ssoUrl"] = args ? args.ssoUrl : undefined;
            resourceInputs["status"] = args ? args.status : undefined;
            resourceInputs["userClaim"] = args ? args.userClaim : undefined;
            resourceInputs["idpId"] = undefined /*out*/;
            resourceInputs["oktaIdpId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(FederatedSettingsIdentityProvider.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering FederatedSettingsIdentityProvider resources.
 */
export interface FederatedSettingsIdentityProviderState {
    /**
     * List that contains the domains associated with the identity provider.
     */
    associatedDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the intended recipient of the token used in OIDC IdP.
     */
    audienceClaims?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Client identifier that is assigned to an application by the OIDC Identity Provider.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     */
    federationSettingsId?: pulumi.Input<string>;
    /**
     * Identifier of the claim which contains OIDC IdP Group IDs in the token.
     */
    groupsClaim?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the IdP.
     */
    idpId?: pulumi.Input<string>;
    /**
     * Unique string that identifies the issuer of the IdP.
     */
    issuerUri?: pulumi.Input<string>;
    /**
     * Human-readable label that identifies the identity provider.
     */
    name?: pulumi.Input<string>;
    /**
     * Unique 20-hexadecimal digit string that identifies the IdP.
     */
    oktaIdpId?: pulumi.Input<string>;
    /**
     * The protocol of the identity provider. Either `SAML` or `OIDC`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * SAML Authentication Request Protocol HTTP method binding (`POST` or `REDIRECT`) that Federated Authentication uses to send the authentication request. Atlas supports the following binding values:
     * - HTTP POST
     * - HTTP REDIRECT
     */
    requestBinding?: pulumi.Input<string>;
    /**
     * Scopes that MongoDB applications will request from the authorization endpoint used for OIDC IdPs.
     */
    requestedScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.  Valid values include `SHA-1 `and `SHA-256`.
     */
    responseSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Flag that indicates whether the identity provider has SSO debug enabled.
     */
    ssoDebugEnabled?: pulumi.Input<boolean>;
    /**
     * Unique string that identifies the intended audience of the SAML assertion.
     */
    ssoUrl?: pulumi.Input<string>;
    /**
     * String enum that indicates whether the identity provider is active or not. Accepted values are ACTIVE or INACTIVE.
     */
    status?: pulumi.Input<string>;
    /**
     * Identifier of the claim which contains the user ID in the token used for OIDC IdPs.
     */
    userClaim?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a FederatedSettingsIdentityProvider resource.
 */
export interface FederatedSettingsIdentityProviderArgs {
    /**
     * List that contains the domains associated with the identity provider.
     */
    associatedDomains?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Identifier of the intended recipient of the token used in OIDC IdP.
     */
    audienceClaims?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Client identifier that is assigned to an application by the OIDC Identity Provider.
     */
    clientId?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     */
    federationSettingsId: pulumi.Input<string>;
    /**
     * Identifier of the claim which contains OIDC IdP Group IDs in the token.
     */
    groupsClaim?: pulumi.Input<string>;
    /**
     * Unique string that identifies the issuer of the IdP.
     */
    issuerUri: pulumi.Input<string>;
    /**
     * Human-readable label that identifies the identity provider.
     */
    name?: pulumi.Input<string>;
    /**
     * The protocol of the identity provider. Either `SAML` or `OIDC`.
     */
    protocol?: pulumi.Input<string>;
    /**
     * SAML Authentication Request Protocol HTTP method binding (`POST` or `REDIRECT`) that Federated Authentication uses to send the authentication request. Atlas supports the following binding values:
     * - HTTP POST
     * - HTTP REDIRECT
     */
    requestBinding?: pulumi.Input<string>;
    /**
     * Scopes that MongoDB applications will request from the authorization endpoint used for OIDC IdPs.
     */
    requestedScopes?: pulumi.Input<pulumi.Input<string>[]>;
    /**
     * Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.  Valid values include `SHA-1 `and `SHA-256`.
     */
    responseSignatureAlgorithm?: pulumi.Input<string>;
    /**
     * Flag that indicates whether the identity provider has SSO debug enabled.
     */
    ssoDebugEnabled?: pulumi.Input<boolean>;
    /**
     * Unique string that identifies the intended audience of the SAML assertion.
     */
    ssoUrl?: pulumi.Input<string>;
    /**
     * String enum that indicates whether the identity provider is active or not. Accepted values are ACTIVE or INACTIVE.
     */
    status?: pulumi.Input<string>;
    /**
     * Identifier of the claim which contains the user ID in the token used for OIDC IdPs.
     */
    userClaim?: pulumi.Input<string>;
}
