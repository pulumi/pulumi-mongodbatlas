// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Data Source: mongodbatlas.Team
 *
 * `mongodbatlas.Team` describes a Team. The resource requires your Organization ID, Project ID and Team ID.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testTeam = new mongodbatlas.Team("test", {
 *     orgId: "<ORGANIZATION-ID>",
 *     name: "myNewTeam",
 *     usernames: [
 *         "user1",
 *         "user2",
 *         "user3",
 *     ],
 * });
 * const test = mongodbatlas.getTeamOutput({
 *     orgId: testTeam.orgId,
 *     teamId: testTeam.teamId,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Team("test", {
 *     orgId: "<ORGANIZATION-ID>",
 *     name: "myNewTeam",
 *     usernames: [
 *         "user1",
 *         "user2",
 *         "user3",
 *     ],
 * });
 * const test2 = mongodbatlas.getTeamOutput({
 *     orgId: test.orgId,
 *     name: test.name,
 * });
 * ```
 */
export function getTeam(args: GetTeamArgs, opts?: pulumi.InvokeOptions): Promise<GetTeamResult> {

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getTeam:getTeam", {
        "name": args.name,
        "orgId": args.orgId,
        "teamId": args.teamId,
    }, opts);
}

/**
 * A collection of arguments for invoking getTeam.
 */
export interface GetTeamArgs {
    /**
     * The team name.
     *
     * > **IMPORTANT:** Either `teamId` or `name` must be configured.
     */
    name?: string;
    /**
     * The unique identifier for the organization you want to associate the team with.
     */
    orgId: string;
    /**
     * The unique identifier for the team.
     */
    teamId?: string;
}

/**
 * A collection of values returned by getTeam.
 */
export interface GetTeamResult {
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the team you want to create.
     */
    readonly name: string;
    readonly orgId: string;
    /**
     * The unique identifier for the team.
     */
    readonly teamId: string;
    /**
     * The users who are part of the organization.
     */
    readonly usernames: string[];
}
/**
 * ## # Data Source: mongodbatlas.Team
 *
 * `mongodbatlas.Team` describes a Team. The resource requires your Organization ID, Project ID and Team ID.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testTeam = new mongodbatlas.Team("test", {
 *     orgId: "<ORGANIZATION-ID>",
 *     name: "myNewTeam",
 *     usernames: [
 *         "user1",
 *         "user2",
 *         "user3",
 *     ],
 * });
 * const test = mongodbatlas.getTeamOutput({
 *     orgId: testTeam.orgId,
 *     teamId: testTeam.teamId,
 * });
 * ```
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.Team("test", {
 *     orgId: "<ORGANIZATION-ID>",
 *     name: "myNewTeam",
 *     usernames: [
 *         "user1",
 *         "user2",
 *         "user3",
 *     ],
 * });
 * const test2 = mongodbatlas.getTeamOutput({
 *     orgId: test.orgId,
 *     name: test.name,
 * });
 * ```
 */
export function getTeamOutput(args: GetTeamOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetTeamResult> {
    return pulumi.output(args).apply((a: any) => getTeam(a, opts))
}

/**
 * A collection of arguments for invoking getTeam.
 */
export interface GetTeamOutputArgs {
    /**
     * The team name.
     *
     * > **IMPORTANT:** Either `teamId` or `name` must be configured.
     */
    name?: pulumi.Input<string>;
    /**
     * The unique identifier for the organization you want to associate the team with.
     */
    orgId: pulumi.Input<string>;
    /**
     * The unique identifier for the team.
     */
    teamId?: pulumi.Input<string>;
}
