// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.AlertConfiguration` provides an Alert Configuration resource to define the conditions that trigger an alert and the methods of notification within a MongoDB Atlas project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AlertConfiguration("test", {
 *     enabled: true,
 *     eventType: "OUTSIDE_METRIC_THRESHOLD",
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     metricThreshold: {
 *         metric_name: "ASSERT_REGULAR",
 *         mode: "AVERAGE",
 *         operator: "LESS_THAN",
 *         threshold: 99,
 *         units: "RAW",
 *     },
 *     notifications: [{
 *         delayMin: 0,
 *         emailEnabled: true,
 *         intervalMin: 5,
 *         roles: [
 *             "GROUP_CHARTS_ADMIN",
 *             "GROUP_CLUSTER_MANAGER",
 *         ],
 *         smsEnabled: false,
 *         typeName: "GROUP",
 *     }],
 *     projectId: "<PROJECT-ID>",
 * });
 * ```
 */
export class AlertConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing AlertConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertConfigurationState, opts?: pulumi.CustomResourceOptions): AlertConfiguration {
        return new AlertConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/alertConfiguration:AlertConfiguration';

    /**
     * Returns true if the given object is an instance of AlertConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertConfiguration.__pulumiType;
    }

    /**
     * Unique identifier for the alert configuration.
     */
    public /*out*/ readonly alertConfigurationId!: pulumi.Output<string>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The type of event that will trigger an alert.
     * Alert type 	Possible values:
     * * Host
     * - `OUTSIDE_METRIC_THRESHOLD`
     * - `HOST_RESTARTED`
     * - `HOST_UPGRADED`
     * - `HOST_NOW_SECONDARY`
     * - `HOST_NOW_PRIMARY`
     * * Replica set
     * - `NO_PRIMARY`
     * - `TOO_MANY_ELECTIONS`
     * * Sharded cluster
     * - `CLUSTER_MONGOS_IS_MISSING`
     * - `User`
     * - `JOINED_GROUP`
     * - `REMOVED_FROM_GROUP`
     * - `USER_ROLES_CHANGED_AUDIT`
     * * Project
     * - `USERS_AWAITING_APPROVAL`
     * - `USERS_WITHOUT_MULTI_FACTOR_AUTH`
     * - `GROUP_CREATED`
     * * Team
     * - `JOINED_TEAM`
     * - `REMOVED_FROM_TEAM`
     * * Organization
     * - `INVITED_TO_ORG`
     * - `JOINED_ORG`
     * * Data Explorer
     * - `DATA_EXPLORER`
     * - `DATA_EXPLORER_CRUD`
     * * Billing
     * - `CREDIT_CARD_ABOUT_TO_EXPIRE`
     * - `CHARGE_SUCCEEDED`
     * - `INVOICE_CLOSED`
     */
    public readonly eventType!: pulumi.Output<string>;
    public readonly matchers!: pulumi.Output<outputs.AlertConfigurationMatcher[] | undefined>;
    public readonly metricThreshold!: pulumi.Output<outputs.AlertConfigurationMetricThreshold | undefined>;
    public readonly notifications!: pulumi.Output<outputs.AlertConfigurationNotification[]>;
    /**
     * The ID of the project where the alert configuration will create.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
     */
    public /*out*/ readonly updated!: pulumi.Output<string>;

    /**
     * Create a AlertConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertConfigurationArgs | AlertConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as AlertConfigurationState | undefined;
            inputs["alertConfigurationId"] = state ? state.alertConfigurationId : undefined;
            inputs["created"] = state ? state.created : undefined;
            inputs["enabled"] = state ? state.enabled : undefined;
            inputs["eventType"] = state ? state.eventType : undefined;
            inputs["matchers"] = state ? state.matchers : undefined;
            inputs["metricThreshold"] = state ? state.metricThreshold : undefined;
            inputs["notifications"] = state ? state.notifications : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["updated"] = state ? state.updated : undefined;
        } else {
            const args = argsOrState as AlertConfigurationArgs | undefined;
            if (!args || args.eventType === undefined) {
                throw new Error("Missing required property 'eventType'");
            }
            if (!args || args.notifications === undefined) {
                throw new Error("Missing required property 'notifications'");
            }
            if (!args || args.projectId === undefined) {
                throw new Error("Missing required property 'projectId'");
            }
            inputs["enabled"] = args ? args.enabled : undefined;
            inputs["eventType"] = args ? args.eventType : undefined;
            inputs["matchers"] = args ? args.matchers : undefined;
            inputs["metricThreshold"] = args ? args.metricThreshold : undefined;
            inputs["notifications"] = args ? args.notifications : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["alertConfigurationId"] = undefined /*out*/;
            inputs["created"] = undefined /*out*/;
            inputs["updated"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(AlertConfiguration.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertConfiguration resources.
 */
export interface AlertConfigurationState {
    /**
     * Unique identifier for the alert configuration.
     */
    readonly alertConfigurationId?: pulumi.Input<string>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
     */
    readonly created?: pulumi.Input<string>;
    /**
     * It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * The type of event that will trigger an alert.
     * Alert type 	Possible values:
     * * Host
     * - `OUTSIDE_METRIC_THRESHOLD`
     * - `HOST_RESTARTED`
     * - `HOST_UPGRADED`
     * - `HOST_NOW_SECONDARY`
     * - `HOST_NOW_PRIMARY`
     * * Replica set
     * - `NO_PRIMARY`
     * - `TOO_MANY_ELECTIONS`
     * * Sharded cluster
     * - `CLUSTER_MONGOS_IS_MISSING`
     * - `User`
     * - `JOINED_GROUP`
     * - `REMOVED_FROM_GROUP`
     * - `USER_ROLES_CHANGED_AUDIT`
     * * Project
     * - `USERS_AWAITING_APPROVAL`
     * - `USERS_WITHOUT_MULTI_FACTOR_AUTH`
     * - `GROUP_CREATED`
     * * Team
     * - `JOINED_TEAM`
     * - `REMOVED_FROM_TEAM`
     * * Organization
     * - `INVITED_TO_ORG`
     * - `JOINED_ORG`
     * * Data Explorer
     * - `DATA_EXPLORER`
     * - `DATA_EXPLORER_CRUD`
     * * Billing
     * - `CREDIT_CARD_ABOUT_TO_EXPIRE`
     * - `CHARGE_SUCCEEDED`
     * - `INVOICE_CLOSED`
     */
    readonly eventType?: pulumi.Input<string>;
    readonly matchers?: pulumi.Input<pulumi.Input<inputs.AlertConfigurationMatcher>[]>;
    readonly metricThreshold?: pulumi.Input<inputs.AlertConfigurationMetricThreshold>;
    readonly notifications?: pulumi.Input<pulumi.Input<inputs.AlertConfigurationNotification>[]>;
    /**
     * The ID of the project where the alert configuration will create.
     */
    readonly projectId?: pulumi.Input<string>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
     */
    readonly updated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertConfiguration resource.
 */
export interface AlertConfigurationArgs {
    /**
     * It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     */
    readonly enabled?: pulumi.Input<boolean>;
    /**
     * The type of event that will trigger an alert.
     * Alert type 	Possible values:
     * * Host
     * - `OUTSIDE_METRIC_THRESHOLD`
     * - `HOST_RESTARTED`
     * - `HOST_UPGRADED`
     * - `HOST_NOW_SECONDARY`
     * - `HOST_NOW_PRIMARY`
     * * Replica set
     * - `NO_PRIMARY`
     * - `TOO_MANY_ELECTIONS`
     * * Sharded cluster
     * - `CLUSTER_MONGOS_IS_MISSING`
     * - `User`
     * - `JOINED_GROUP`
     * - `REMOVED_FROM_GROUP`
     * - `USER_ROLES_CHANGED_AUDIT`
     * * Project
     * - `USERS_AWAITING_APPROVAL`
     * - `USERS_WITHOUT_MULTI_FACTOR_AUTH`
     * - `GROUP_CREATED`
     * * Team
     * - `JOINED_TEAM`
     * - `REMOVED_FROM_TEAM`
     * * Organization
     * - `INVITED_TO_ORG`
     * - `JOINED_ORG`
     * * Data Explorer
     * - `DATA_EXPLORER`
     * - `DATA_EXPLORER_CRUD`
     * * Billing
     * - `CREDIT_CARD_ABOUT_TO_EXPIRE`
     * - `CHARGE_SUCCEEDED`
     * - `INVOICE_CLOSED`
     */
    readonly eventType: pulumi.Input<string>;
    readonly matchers?: pulumi.Input<pulumi.Input<inputs.AlertConfigurationMatcher>[]>;
    readonly metricThreshold?: pulumi.Input<inputs.AlertConfigurationMetricThreshold>;
    readonly notifications: pulumi.Input<pulumi.Input<inputs.AlertConfigurationNotification>[]>;
    /**
     * The ID of the project where the alert configuration will create.
     */
    readonly projectId: pulumi.Input<string>;
}
