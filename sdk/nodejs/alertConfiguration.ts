// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.AlertConfiguration` provides an Alert Configuration resource to define the conditions that trigger an alert and the methods of notification within a MongoDB Atlas project.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * ## Example Usage
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AlertConfiguration("test", {
 *     enabled: true,
 *     eventType: "OUTSIDE_METRIC_THRESHOLD",
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     metricThresholdConfig: {
 *         metricName: "ASSERT_REGULAR",
 *         mode: "AVERAGE",
 *         operator: "LESS_THAN",
 *         threshold: 99,
 *         units: "RAW",
 *     },
 *     notifications: [{
 *         delayMin: 0,
 *         emailEnabled: true,
 *         intervalMin: 5,
 *         roles: [
 *             "GROUP_CHARTS_ADMIN",
 *             "GROUP_CLUSTER_MANAGER",
 *         ],
 *         smsEnabled: false,
 *         typeName: "GROUP",
 *     }],
 *     projectId: "<PROJECT-ID>",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * > **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AlertConfiguration("test", {
 *     enabled: true,
 *     eventType: "REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     notifications: [{
 *         delayMin: 0,
 *         emailEnabled: true,
 *         intervalMin: 5,
 *         roles: [
 *             "GROUP_CHARTS_ADMIN",
 *             "GROUP_CLUSTER_MANAGER",
 *         ],
 *         smsEnabled: false,
 *         typeName: "GROUP",
 *     }],
 *     projectId: "<PROJECT-ID>",
 *     thresholdConfig: {
 *         operator: "LESS_THAN",
 *         threshold: 1,
 *         units: "HOURS",
 *     },
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ### Create an alert with two notifications using Email and SMS
 *
 * <!--Start PulumiCodeChooser -->
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const test = new mongodbatlas.AlertConfiguration("test", {
 *     enabled: true,
 *     eventType: "OUTSIDE_METRIC_THRESHOLD",
 *     matchers: [{
 *         fieldName: "HOSTNAME_AND_PORT",
 *         operator: "EQUALS",
 *         value: "SECONDARY",
 *     }],
 *     metricThresholdConfig: {
 *         metricName: "ASSERT_REGULAR",
 *         mode: "AVERAGE",
 *         operator: "LESS_THAN",
 *         threshold: 99,
 *         units: "RAW",
 *     },
 *     notifications: [
 *         {
 *             delayMin: 0,
 *             emailEnabled: true,
 *             intervalMin: 5,
 *             roles: [
 *                 "GROUP_DATA_ACCESS_READ_ONLY",
 *                 "GROUP_CLUSTER_MANAGER",
 *                 "GROUP_DATA_ACCESS_ADMIN",
 *             ],
 *             smsEnabled: false,
 *             typeName: "GROUP",
 *         },
 *         {
 *             delayMin: 0,
 *             emailEnabled: false,
 *             intervalMin: 5,
 *             smsEnabled: true,
 *             typeName: "ORG",
 *         },
 *     ],
 *     projectId: "PROJECT ID",
 * });
 * ```
 * <!--End PulumiCodeChooser -->
 *
 * ## Import
 *
 * Alert Configuration can be imported using the `project_id-alert_configuration_id`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/alertConfiguration:AlertConfiguration test 5d0f1f74cf09a29120e123cd-5d0f1f74cf09a29120e1fscg
 * ```
 * __NOTE__: Third-party notifications will not contain their respective credentials as these are sensitive attributes. If you wish to perform updates on these notifications without providing the original credentials, the corresponding `notifier_id` attribute must be provided instead.
 *
 * For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/alert-configurations/)
 */
export class AlertConfiguration extends pulumi.CustomResource {
    /**
     * Get an existing AlertConfiguration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: AlertConfigurationState, opts?: pulumi.CustomResourceOptions): AlertConfiguration {
        return new AlertConfiguration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/alertConfiguration:AlertConfiguration';

    /**
     * Returns true if the given object is an instance of AlertConfiguration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is AlertConfiguration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === AlertConfiguration.__pulumiType;
    }

    /**
     * Unique identifier for the alert configuration.
     */
    public /*out*/ readonly alertConfigurationId!: pulumi.Output<string>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
     */
    public /*out*/ readonly created!: pulumi.Output<string>;
    /**
     * It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     */
    public readonly enabled!: pulumi.Output<boolean>;
    /**
     * The type of event that will trigger an alert.
     *
     * > ***IMPORTANT:*** Event Type has many possible values. Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Alert-Configurations/operation/createAlertConfiguration) and checking the latest eventTypeName options.
     *
     *
     * > **NOTE:** If `eventType` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metricThresholdConfig` field must also be configured.
     */
    public readonly eventType!: pulumi.Output<string>;
    public readonly matchers!: pulumi.Output<outputs.AlertConfigurationMatcher[] | undefined>;
    public readonly metricThresholdConfig!: pulumi.Output<outputs.AlertConfigurationMetricThresholdConfig | undefined>;
    public readonly notifications!: pulumi.Output<outputs.AlertConfigurationNotification[] | undefined>;
    /**
     * The ID of the project where the alert configuration will create.
     */
    public readonly projectId!: pulumi.Output<string>;
    public readonly thresholdConfig!: pulumi.Output<outputs.AlertConfigurationThresholdConfig | undefined>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
     */
    public /*out*/ readonly updated!: pulumi.Output<string>;

    /**
     * Create a AlertConfiguration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: AlertConfigurationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: AlertConfigurationArgs | AlertConfigurationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as AlertConfigurationState | undefined;
            resourceInputs["alertConfigurationId"] = state ? state.alertConfigurationId : undefined;
            resourceInputs["created"] = state ? state.created : undefined;
            resourceInputs["enabled"] = state ? state.enabled : undefined;
            resourceInputs["eventType"] = state ? state.eventType : undefined;
            resourceInputs["matchers"] = state ? state.matchers : undefined;
            resourceInputs["metricThresholdConfig"] = state ? state.metricThresholdConfig : undefined;
            resourceInputs["notifications"] = state ? state.notifications : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["thresholdConfig"] = state ? state.thresholdConfig : undefined;
            resourceInputs["updated"] = state ? state.updated : undefined;
        } else {
            const args = argsOrState as AlertConfigurationArgs | undefined;
            if ((!args || args.eventType === undefined) && !opts.urn) {
                throw new Error("Missing required property 'eventType'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["enabled"] = args ? args.enabled : undefined;
            resourceInputs["eventType"] = args ? args.eventType : undefined;
            resourceInputs["matchers"] = args ? args.matchers : undefined;
            resourceInputs["metricThresholdConfig"] = args ? args.metricThresholdConfig : undefined;
            resourceInputs["notifications"] = args ? args.notifications : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["thresholdConfig"] = args ? args.thresholdConfig : undefined;
            resourceInputs["alertConfigurationId"] = undefined /*out*/;
            resourceInputs["created"] = undefined /*out*/;
            resourceInputs["updated"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(AlertConfiguration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering AlertConfiguration resources.
 */
export interface AlertConfigurationState {
    /**
     * Unique identifier for the alert configuration.
     */
    alertConfigurationId?: pulumi.Input<string>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
     */
    created?: pulumi.Input<string>;
    /**
     * It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The type of event that will trigger an alert.
     *
     * > ***IMPORTANT:*** Event Type has many possible values. Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Alert-Configurations/operation/createAlertConfiguration) and checking the latest eventTypeName options.
     *
     *
     * > **NOTE:** If `eventType` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metricThresholdConfig` field must also be configured.
     */
    eventType?: pulumi.Input<string>;
    matchers?: pulumi.Input<pulumi.Input<inputs.AlertConfigurationMatcher>[]>;
    metricThresholdConfig?: pulumi.Input<inputs.AlertConfigurationMetricThresholdConfig>;
    notifications?: pulumi.Input<pulumi.Input<inputs.AlertConfigurationNotification>[]>;
    /**
     * The ID of the project where the alert configuration will create.
     */
    projectId?: pulumi.Input<string>;
    thresholdConfig?: pulumi.Input<inputs.AlertConfigurationThresholdConfig>;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
     */
    updated?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a AlertConfiguration resource.
 */
export interface AlertConfigurationArgs {
    /**
     * It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     */
    enabled?: pulumi.Input<boolean>;
    /**
     * The type of event that will trigger an alert.
     *
     * > ***IMPORTANT:*** Event Type has many possible values. Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Alert-Configurations/operation/createAlertConfiguration) and checking the latest eventTypeName options.
     *
     *
     * > **NOTE:** If `eventType` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metricThresholdConfig` field must also be configured.
     */
    eventType: pulumi.Input<string>;
    matchers?: pulumi.Input<pulumi.Input<inputs.AlertConfigurationMatcher>[]>;
    metricThresholdConfig?: pulumi.Input<inputs.AlertConfigurationMetricThresholdConfig>;
    notifications?: pulumi.Input<pulumi.Input<inputs.AlertConfigurationNotification>[]>;
    /**
     * The ID of the project where the alert configuration will create.
     */
    projectId: pulumi.Input<string>;
    thresholdConfig?: pulumi.Input<inputs.AlertConfigurationThresholdConfig>;
}
