// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Data Source: mongodbatlas.EncryptionAtRestPrivateEndpoint
 *
 * `mongodbatlas.EncryptionAtRestPrivateEndpoint` describes a private endpoint used for encryption at rest using customer-managed keys.
 *
 * > **IMPORTANT** The Encryption at Rest using Azure Key Vault over Private Endpoints feature is available by request. To request this functionality for your Atlas deployments, contact your Account Manager.
 * To learn more about existing limitations, see [Manage Customer Keys with Azure Key Vault Over Private Endpoints](https://www.mongodb.com/docs/atlas/security/azure-kms-over-private-endpoint/#manage-customer-keys-with-azure-key-vault-over-private-endpoints).
 *
 * ## Example Usage
 *
 * ### S
 *
 * > **NOTE:** Only Azure Key Vault with Azure Private Link is supported at this time.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const single = mongodbatlas.getEncryptionAtRestPrivateEndpoint({
 *     projectId: atlasProjectId,
 *     cloudProvider: "AZURE",
 *     id: endpoint.id,
 * });
 * export const endpointConnectionName = single.then(single => single.privateEndpointConnectionName);
 * ```
 */
export function getEncryptionAtRestPrivateEndpoint(args: GetEncryptionAtRestPrivateEndpointArgs, opts?: pulumi.InvokeOptions): Promise<GetEncryptionAtRestPrivateEndpointResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invoke("mongodbatlas:index/getEncryptionAtRestPrivateEndpoint:getEncryptionAtRestPrivateEndpoint", {
        "cloudProvider": args.cloudProvider,
        "id": args.id,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getEncryptionAtRestPrivateEndpoint.
 */
export interface GetEncryptionAtRestPrivateEndpointArgs {
    /**
     * Label that identifies the cloud provider for the Encryption At Rest private endpoint.
     */
    cloudProvider: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the Private Endpoint Service.
     */
    id: string;
    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     */
    projectId: string;
}

/**
 * A collection of values returned by getEncryptionAtRestPrivateEndpoint.
 */
export interface GetEncryptionAtRestPrivateEndpointResult {
    /**
     * Label that identifies the cloud provider for the Encryption At Rest private endpoint.
     */
    readonly cloudProvider: string;
    /**
     * Error message for failures associated with the Encryption At Rest private endpoint.
     */
    readonly errorMessage: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the Private Endpoint Service.
     */
    readonly id: string;
    /**
     * Connection name of the Azure Private Endpoint.
     */
    readonly privateEndpointConnectionName: string;
    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     */
    readonly projectId: string;
    /**
     * Cloud provider region in which the Encryption At Rest private endpoint is located.
     */
    readonly regionName: string;
    /**
     * State of the Encryption At Rest private endpoint.
     */
    readonly status: string;
}
/**
 * ## # Data Source: mongodbatlas.EncryptionAtRestPrivateEndpoint
 *
 * `mongodbatlas.EncryptionAtRestPrivateEndpoint` describes a private endpoint used for encryption at rest using customer-managed keys.
 *
 * > **IMPORTANT** The Encryption at Rest using Azure Key Vault over Private Endpoints feature is available by request. To request this functionality for your Atlas deployments, contact your Account Manager.
 * To learn more about existing limitations, see [Manage Customer Keys with Azure Key Vault Over Private Endpoints](https://www.mongodb.com/docs/atlas/security/azure-kms-over-private-endpoint/#manage-customer-keys-with-azure-key-vault-over-private-endpoints).
 *
 * ## Example Usage
 *
 * ### S
 *
 * > **NOTE:** Only Azure Key Vault with Azure Private Link is supported at this time.
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const single = mongodbatlas.getEncryptionAtRestPrivateEndpoint({
 *     projectId: atlasProjectId,
 *     cloudProvider: "AZURE",
 *     id: endpoint.id,
 * });
 * export const endpointConnectionName = single.then(single => single.privateEndpointConnectionName);
 * ```
 */
export function getEncryptionAtRestPrivateEndpointOutput(args: GetEncryptionAtRestPrivateEndpointOutputArgs, opts?: pulumi.InvokeOutputOptions): pulumi.Output<GetEncryptionAtRestPrivateEndpointResult> {
    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts || {});
    return pulumi.runtime.invokeOutput("mongodbatlas:index/getEncryptionAtRestPrivateEndpoint:getEncryptionAtRestPrivateEndpoint", {
        "cloudProvider": args.cloudProvider,
        "id": args.id,
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getEncryptionAtRestPrivateEndpoint.
 */
export interface GetEncryptionAtRestPrivateEndpointOutputArgs {
    /**
     * Label that identifies the cloud provider for the Encryption At Rest private endpoint.
     */
    cloudProvider: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies the Private Endpoint Service.
     */
    id: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     */
    projectId: pulumi.Input<string>;
}
