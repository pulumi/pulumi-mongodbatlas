// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AlertConfigurationMatcher {
    /**
     * Name of the field in the target object to match on.
     * Host alerts support these fields:
     * - `TYPE_NAME`
     * - `HOSTNAME`
     * - `PORT`
     * - `HOSTNAME_AND_PORT`
     * - `REPLICA_SET_NAME`
     * Replica set alerts support these fields:
     * - `REPLICA_SET_NAME`
     * - `SHARD_NAME`
     * - `CLUSTER_NAME`
     * Sharded cluster alerts support these fields:
     * - `CLUSTER_NAME`
     * - `SHARD_NAME`
     */
    fieldName?: string;
    /**
     * Operator to apply when checking the current metric value against the threshold value.
     * Accepted values are:
     * - `GREATER_THAN`
     * - `LESS_THAN`
     */
    operator?: string;
    /**
     * Value to test with the specified operator. If `fieldName` is set to TYPE_NAME, you can match on the following values:
     * - `PRIMARY`
     * - `SECONDARY`
     * - `STANDALONE`
     * - `CONFIG`
     * - `MONGOS`
     */
    value?: string;
}

export interface AlertConfigurationMetricThreshold {
    /**
     * Name of the metric to check.
     */
    metricName?: string;
    /**
     * This must be set to AVERAGE. Atlas computes the current metric value as an average.
     */
    mode?: string;
    /**
     * Operator to apply when checking the current metric value against the threshold value.
     * Accepted values are:
     * - `GREATER_THAN`
     * - `LESS_THAN`
     */
    operator?: string;
    /**
     * Threshold value outside of which an alert will be triggered.
     */
    threshold?: number;
    /**
     * The units for the threshold value. Depends on the type of metric.
     * Accepted values are:
     * - `RAW`
     * - `BITS`
     * - `BYTES`
     * - `KILOBITS`
     * - `KILOBYTES`
     * - `MEGABITS`
     * - `MEGABYTES`
     * - `GIGABITS`
     * - `GIGABYTES`
     * - `TERABYTES`
     * - `PETABYTES`
     * - `MILLISECONDS`
     * - `SECONDS`
     * - `MINUTES`
     * - `HOURS`
     * - `DAYS`
     */
    units?: string;
}

export interface AlertConfigurationNotification {
    /**
     * Slack API token. Required for the SLACK notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     */
    apiToken?: string;
    /**
     * Slack channel name. Required for the SLACK notifications type.
     */
    channelName?: string;
    /**
     * Datadog API Key. Found in the Datadog dashboard. Required for the DATADOG notifications type.
     */
    datadogApiKey?: string;
    /**
     * Region that indicates which API URL to use. Accepted regions are: `US`, `EU`. The default Datadog region is US.
     */
    datadogRegion?: string;
    /**
     * Number of minutes to wait after an alert condition is detected before sending out the first notification.
     */
    delayMin?: number;
    /**
     * Email address to which alert notifications are sent. Required for the EMAIL notifications type.
     */
    emailAddress?: string;
    /**
     * Flag indicating if email notifications should be sent. Configurable for `ORG`, `GROUP`, and `USER` notifications types.
     */
    emailEnabled?: boolean;
    /**
     * Flowdock flow name in lower-case letters. Required for the `FLOWDOCK` notifications type
     */
    flowName?: string;
    /**
     * The Flowdock personal API token. Required for the `FLOWDOCK` notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     */
    flowdockApiToken?: string;
    /**
     * Number of minutes to wait between successive notifications for unacknowledged alerts that are not resolved. The minimum value is 5.
     */
    intervalMin?: number;
    /**
     * Mobile number to which alert notifications are sent. Required for the SMS notifications type.
     */
    mobileNumber?: string;
    /**
     * Opsgenie API Key. Required for the `OPS_GENIE` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     */
    opsGenieApiKey?: string;
    /**
     * Region that indicates which API URL to use. Accepted regions are: `US` ,`EU`. The default Opsgenie region is US.
     */
    opsGenieRegion?: string;
    /**
     * Flowdock organization name in lower-case letters. This is the name that appears after www.flowdock.com/app/ in the URL string. Required for the FLOWDOCK notifications type.
     */
    orgName?: string;
    roles?: string[];
    /**
     * PagerDuty service key. Required for the PAGER_DUTY notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     */
    serviceKey?: string;
    /**
     * Flag indicating if text message notifications should be sent. Configurable for `ORG`, `GROUP`, and `USER` notifications types.
     */
    smsEnabled?: boolean;
    /**
     * Unique identifier of a team.
     */
    teamId?: string;
    /**
     * Type of alert notification.
     * Accepted values are:
     * - `DATADOG`
     * - `EMAIL`
     * - `FLOWDOCK`
     * - `GROUP` (Project)
     * - `OPS_GENIE`
     * - `ORG`
     * - `PAGER_DUTY`
     * - `SLACK`
     * - `SMS`
     * - `TEAM`
     * - `USER`
     * - `VICTOR_OPS`
     * - `WEBHOOK`
     */
    typeName?: string;
    /**
     * Name of the Atlas user to which to send notifications. Only a user in the project that owns the alert configuration is allowed here. Required for the `USER` notifications type.
     */
    username?: string;
    /**
     * VictorOps API key. Required for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     */
    victorOpsApiKey?: string;
    /**
     * VictorOps routing key. Optional for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     */
    victorOpsRoutingKey?: string;
}

export interface CloudProviderSnapshotBackupPolicyPolicy {
    id: string;
    policyItems: outputs.CloudProviderSnapshotBackupPolicyPolicyPolicyItem[];
}

export interface CloudProviderSnapshotBackupPolicyPolicyPolicyItem {
    frequencyInterval: number;
    frequencyType: string;
    id: string;
    retentionUnit: string;
    retentionValue: number;
}

export interface CloudProviderSnapshotRestoreJobDeliveryType {
    automated?: boolean;
    download?: boolean;
    oplogInc?: number;
    oplogTs?: number;
    pointInTime?: boolean;
    pointInTimeUtcSeconds?: number;
    /**
     * Name of the target Atlas cluster to which the restore job restores the snapshot. Only required if deliveryType is automated.
     */
    targetClusterName?: string;
    targetProjectId?: string;
}

export interface ClusterAdvancedConfiguration {
    /**
     * When true, documents can only be updated or inserted if, for all indexed fields on the target collection, the corresponding index entries do not exceed 1024 bytes. When false, mongod writes documents that exceed the limit but does not index them.
     */
    failIndexKeyTooLong: boolean;
    /**
     * When true, the cluster allows execution of operations that perform server-side executions of JavaScript. When false, the cluster disables execution of those operations.
     */
    javascriptEnabled: boolean;
    /**
     * Sets the minimum Transport Layer Security (TLS) version the cluster accepts for incoming connections.Valid values are:
     */
    minimumEnabledTlsProtocol: string;
    /**
     * When true, the cluster disables the execution of any query that requires a collection scan to return results. When false, the cluster allows the execution of those operations.
     */
    noTableScan: boolean;
    /**
     * The custom oplog size of the cluster. Without a value that indicates that the cluster uses the default oplog size calculated by Atlas.
     */
    oplogSizeMb: number;
    /**
     * Interval in seconds at which the mongosqld process re-samples data to create its relational schema. The default value is 300. The specified value must be a positive integer. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleRefreshIntervalBiConnector: number;
    /**
     * Number of documents per database to sample when gathering schema information. Defaults to 100. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleSizeBiConnector: number;
}

export interface ClusterBiConnector {
    /**
     * Specifies whether or not BI Connector for Atlas is enabled on the cluster.l
     * *
     * - Set to `true` to enable BI Connector for Atlas.
     * - Set to `false` to disable BI Connector for Atlas.
     */
    enabled: string;
    /**
     * Specifies the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).
     */
    readPreference: string;
}

export interface ClusterConnectionStrings {
    awsPrivateLink: {[key: string]: any};
    awsPrivateLinkSrv: {[key: string]: any};
    private: string;
    privateSrv: string;
    standard: string;
    standardSrv: string;
}

export interface ClusterLabel {
    /**
     * The key that you want to write.
     */
    key: string;
    /**
     * The value that you want to write.
     */
    value: string;
}

export interface ClusterReplicationSpec {
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    /**
     * Number of shards to deploy in the specified zone, minimum 1.
     */
    numShards: number;
    /**
     * Physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.
     */
    regionsConfigs: outputs.ClusterReplicationSpecRegionsConfig[];
    /**
     * Name for the zone in a Global Cluster.
     */
    zoneName?: string;
}

export interface ClusterReplicationSpecRegionsConfig {
    /**
     * The number of analytics nodes for Atlas to deploy to the region. Analytics nodes are useful for handling analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only, and can never become the primary. If you do not specify this option, no analytics nodes are deployed to the region.
     */
    analyticsNodes?: number;
    /**
     * Number of electable nodes for Atlas to deploy to the region. Electable nodes can become the primary and can facilitate local reads.
     * * The total number of electableNodes across all replication spec regions  must total 3, 5, or 7.
     * * Specify 0 if you do not want any electable nodes in the region.
     * * You cannot create electable nodes in a region if `priority` is 0.
     */
    electableNodes: number;
    /**
     * Election priority of the region. For regions with only read-only nodes, set this value to 0.
     * * For regions where `electableNodes` is at least 1, each region must have a priority of exactly one (1) less than the previous region. The first region must have a priority of 7. The lowest possible priority is 1.
     * * The priority 7 region identifies the Preferred Region of the cluster. Atlas places the primary node in the Preferred Region. Priorities 1 through 7 are exclusive - no more than one region per cluster can be assigned a given priority.
     * * Example: If you have three regions, their priorities would be 7, 6, and 5 respectively. If you added two more regions for supporting electable nodes, the priorities of those regions would be 4 and 3 respectively.
     */
    priority: number;
    /**
     * Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.
     */
    readOnlyNodes?: number;
    /**
     * Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
     */
    regionName: string;
}

export interface ClusterSnapshotBackupPolicy {
    /**
     * The cluster ID.
     */
    clusterId: string;
    clusterName: string;
    nextSnapshot: string;
    policies: outputs.ClusterSnapshotBackupPolicyPolicy[];
    referenceHourOfDay: number;
    referenceMinuteOfHour: number;
    restoreWindowDays: number;
    updateSnapshots: boolean;
}

export interface ClusterSnapshotBackupPolicyPolicy {
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    policyItems: outputs.ClusterSnapshotBackupPolicyPolicyPolicyItem[];
}

export interface ClusterSnapshotBackupPolicyPolicyPolicyItem {
    frequencyInterval: number;
    frequencyType: string;
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    retentionUnit: string;
    retentionValue: number;
}

export interface CustomDbRoleAction {
    /**
     * Name of the privilege action. For a complete list of actions available in the Atlas API, see [Custom Role Actions](https://docs.atlas.mongodb.com/reference/api/custom-role-actions)
     * > **Note**: The privilege actions available to the Custom Roles API resource represent a subset of the privilege actions available in the Atlas Custom Roles UI.
     */
    action: string;
    /**
     * Contains information on where the action is granted. Each object in the array either indicates a database and collection on which the action is granted, or indicates that the action is granted on the cluster resource.
     */
    resources: outputs.CustomDbRoleActionResource[];
}

export interface CustomDbRoleActionResource {
    cluster?: boolean;
    collectionName?: string;
    /**
     * Database on which the inherited role is granted.
     */
    databaseName?: string;
}

export interface CustomDbRoleInheritedRole {
    /**
     * Database on which the inherited role is granted.
     */
    databaseName: string;
    /**
     * Name of the inherited role. This can either be another custom role or a built-in role.
     */
    roleName: string;
}

export interface DatabaseUserLabel {
    /**
     * The key that you want to write.
     */
    key: string;
    /**
     * The value that you want to write.
     */
    value: string;
}

export interface DatabaseUserRole {
    /**
     * Collection for which the role applies. You can specify a collection for the `read` and `readWrite` roles. If you do not specify a collection for `read` and `readWrite`, the role applies to all collections in the database (excluding some collections in the `system`. database).
     */
    collectionName: string;
    /**
     * Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
     */
    databaseName: string;
    /**
     * Name of the role to grant. See [Create a Database User](https://docs.atlas.mongodb.com/reference/api/database-users-create-a-user/) `roles.roleName` for valid values and restrictions.
     */
    roleName: string;
}

export interface EncryptionAtRestAwsKms {
    /**
     * The IAM access key ID with permissions to access the customer master key specified by customerMasterKeyID.
     */
    accessKeyId: string;
    /**
     * The AWS customer master key used to encrypt and decrypt the MongoDB master keys.
     */
    customerMasterKeyId: string;
    /**
     * Specifies whether Encryption at Rest is enabled for an Atlas project. To disable Encryption at Rest, pass only this parameter with a value of false. When you disable Encryption at Rest, Atlas also removes the configuration details.
     */
    enabled: boolean;
    /**
     * The AWS region in which the AWS customer master key exists: CA_CENTRAL_1, US_EAST_1, US_EAST_2, US_WEST_1, US_WEST_2, SA_EAST_1
     */
    region: string;
    /**
     * The IAM secret access key with permissions to access the customer master key specified by customerMasterKeyID.
     */
    secretAccessKey: string;
}

export interface EncryptionAtRestAzureKeyVault {
    /**
     * The Azure environment where the Azure account credentials reside. Valid values are the following: AZURE, AZURE_CHINA, AZURE_GERMANY
     */
    azureEnvironment: string;
    /**
     * The client ID, also known as the application ID, for an Azure application associated with the Azure AD tenant.
     */
    clientId: string;
    /**
     * Specifies whether Encryption at Rest is enabled for an Atlas project. To disable Encryption at Rest, pass only this parameter with a value of false. When you disable Encryption at Rest, Atlas also removes the configuration details.
     */
    enabled: boolean;
    /**
     * The unique identifier of a key in an Azure Key Vault.
     */
    keyIdentifier: string;
    /**
     * The name of an Azure Key Vault containing your key.
     */
    keyVaultName: string;
    /**
     * The name of the Azure Resource group that contains an Azure Key Vault.
     */
    resourceGroupName: string;
    /**
     * The secret associated with the Azure Key Vault specified by azureKeyVault.tenantID.
     */
    secret: string;
    /**
     * The unique identifier associated with an Azure subscription.
     */
    subscriptionId: string;
    /**
     * The unique identifier for an Azure AD tenant within an Azure subscription.
     */
    tenantId: string;
}

export interface EncryptionAtRestGoogleCloudKms {
    /**
     * Specifies whether Encryption at Rest is enabled for an Atlas project. To disable Encryption at Rest, pass only this parameter with a value of false. When you disable Encryption at Rest, Atlas also removes the configuration details.
     */
    enabled: boolean;
    /**
     * The Key Version Resource ID from your GCP account.
     */
    keyVersionResourceId: string;
    /**
     * String-formatted JSON object containing GCP KMS credentials from your GCP account.
     */
    serviceAccountKey: string;
}

export interface Get509AuthenticationDatabaseUserCertificate {
    createdAt: string;
    groupId: string;
    id: number;
    notAfter: string;
    subject: string;
}

export interface GetAlertConfigurationMatcher {
    /**
     * Name of the field in the target object to match on.
     * Host alerts support these fields:
     * - `TYPE_NAME`
     * - `HOSTNAME`
     * - `PORT`
     * - `HOSTNAME_AND_PORT`
     * - `REPLICA_SET_NAME`
     * Replica set alerts support these fields:
     * - `REPLICA_SET_NAME`
     * - `SHARD_NAME`
     * - `CLUSTER_NAME`
     * Sharded cluster alerts support these fields:
     * - `CLUSTER_NAME`
     * - `SHARD_NAME`
     */
    fieldName: string;
    /**
     * Operator to apply when checking the current metric value against the threshold value. 
     * Accepted values are:
     * - `GREATER_THAN`
     * - `LESS_THAN`
     */
    operator: string;
    /**
     * Value to test with the specified operator. If `fieldName` is set to TYPE_NAME, you can match on the following values:
     * - `PRIMARY`
     * - `SECONDARY`
     * - `STANDALONE`
     * - `CONFIG`
     * - `MONGOS`
     */
    value: string;
}

export interface GetAlertConfigurationMetricThreshold {
    /**
     * Name of the metric to check.
     */
    metricName: string;
    /**
     * This must be set to AVERAGE. Atlas computes the current metric value as an average.
     */
    mode: string;
    /**
     * Operator to apply when checking the current metric value against the threshold value. 
     * Accepted values are:
     * - `GREATER_THAN`
     * - `LESS_THAN`
     */
    operator: string;
    /**
     * Threshold value outside of which an alert will be triggered.
     */
    threshold: number;
    /**
     * The units for the threshold value. Depends on the type of metric.
     * Accepted values are:
     * - `RAW`
     * - `BITS`
     * - `BYTES`
     * - `KILOBITS`
     * - `KILOBYTES`
     * - `MEGABITS`
     * - `MEGABYTES`
     * - `GIGABITS`
     * - `GIGABYTES`
     * - `TERABYTES`
     * - `PETABYTES`
     * - `MILLISECONDS`
     * - `SECONDS`
     * - `MINUTES`
     * - `HOURS`
     * - `DAYS`
     */
    units: string;
}

export interface GetAlertConfigurationNotification {
    /**
     * Slack API token. Required for the SLACK notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     */
    apiToken: string;
    /**
     * Slack channel name. Required for the SLACK notifications type.
     */
    channelName: string;
    /**
     * Datadog API Key. Found in the Datadog dashboard. Required for the DATADOG notifications type.
     */
    datadogApiKey: string;
    /**
     * Region that indicates which API URL to use. Accepted regions are: `US`, `EU`. The default Datadog region is US.
     */
    datadogRegion: string;
    /**
     * Number of minutes to wait after an alert condition is detected before sending out the first notification.
     */
    delayMin: number;
    /**
     * Email address to which alert notifications are sent. Required for the EMAIL notifications type.
     */
    emailAddress: string;
    /**
     * Flag indicating if email notifications should be sent. Configurable for `ORG`, `GROUP`, and `USER` notifications types.
     */
    emailEnabled: boolean;
    /**
     * Flowdock flow name in lower-case letters. Required for the `FLOWDOCK` notifications type
     */
    flowName: string;
    /**
     * The Flowdock personal API token. Required for the `FLOWDOCK` notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     */
    flowdockApiToken: string;
    /**
     * Number of minutes to wait between successive notifications for unacknowledged alerts that are not resolved. The minimum value is 5.
     */
    intervalMin: number;
    /**
     * Mobile number to which alert notifications are sent. Required for the SMS notifications type.
     */
    mobileNumber: string;
    /**
     * Opsgenie API Key. Required for the `OPS_GENIE` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     */
    opsGenieApiKey: string;
    /**
     * Region that indicates which API URL to use. Accepted regions are: `US` ,`EU`. The default Opsgenie region is US.
     */
    opsGenieRegion: string;
    /**
     * Flowdock organization name in lower-case letters. This is the name that appears after www.flowdock.com/app/ in the URL string. Required for the FLOWDOCK notifications type.
     */
    orgName: string;
    /**
     * PagerDuty service key. Required for the PAGER_DUTY notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     */
    serviceKey: string;
    /**
     * Flag indicating if text message notifications should be sent. Configurable for `ORG`, `GROUP`, and `USER` notifications types.
     */
    smsEnabled: boolean;
    /**
     * Unique identifier of a team.
     */
    teamId: string;
    /**
     * Type of alert notification. 
     * Accepted values are:
     * - `DATADOG`
     * - `EMAIL`
     * - `FLOWDOCK`
     * - `GROUP` (Project)
     * - `OPS_GENIE`
     * - `ORG`
     * - `PAGER_DUTY`
     * - `SLACK`
     * - `SMS`
     * - `TEAM`
     * - `USER`
     * - `VICTOR_OPS`
     * - `WEBHOOK`
     */
    typeName: string;
    /**
     * Name of the Atlas user to which to send notifications. Only a user in the project that owns the alert configuration is allowed here. Required for the `USER` notifications type.
     */
    username: string;
    /**
     * VictorOps API key. Required for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     */
    victorOpsApiKey: string;
    /**
     * VictorOps routing key. Optional for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     */
    victorOpsRoutingKey: string;
}

export interface GetCloudProviderSnapshotBackupPolicyPolicy {
    id: string;
    policyItems: outputs.GetCloudProviderSnapshotBackupPolicyPolicyPolicyItem[];
}

export interface GetCloudProviderSnapshotBackupPolicyPolicyPolicyItem {
    frequencyInterval: number;
    frequencyType: string;
    id: string;
    retentionUnit: string;
    retentionValue: number;
}

export interface GetCloudProviderSnapshotRestoreJobsResult {
    /**
     * Indicates whether the restore job was canceled.
     */
    cancelled: boolean;
    /**
     * UTC ISO 8601 formatted point in time when Atlas created the restore job.
     */
    createdAt: string;
    /**
     * Type of restore job to create. Possible values are: automated and download.
     */
    deliveryType: string;
    /**
     * One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.
     */
    deliveryUrls: string[];
    /**
     * Indicates whether the restore job expired.
     */
    expired: boolean;
    /**
     * UTC ISO 8601 formatted point in time when the restore job expires.
     */
    expiresAt: string;
    /**
     * UTC ISO 8601 formatted point in time when the restore job completed.
     */
    finishedAt: string;
    /**
     * The unique identifier of the restore job.
     */
    id: string;
    oplogInc: number;
    oplogTs: number;
    pointInTimeUtcSeconds: number;
    /**
     * Unique identifier of the source snapshot ID of the restore job.
     */
    snapshotId: string;
    /**
     * Name of the target Atlas cluster to which the restore job restores the snapshot. Only visible if deliveryType is automated.
     */
    targetClusterName: string;
    targetProjectId: string;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.
     */
    timestamp: string;
}

export interface GetCloudProviderSnapshotsResult {
    /**
     * UTC ISO 8601 formatted point in time when Atlas took the snapshot.
     */
    createdAt: string;
    /**
     * UDescription of the snapshot. Only present for on-demand snapshots.
     */
    description: string;
    /**
     * UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
     */
    expiresAt: string;
    /**
     * Unique identifier of the snapshot.
     */
    id: string;
    /**
     * Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
     */
    masterKeyUuid: string;
    /**
     * Version of the MongoDB server.
     */
    mongodVersion: string;
    /**
     * Specified the type of snapshot. Valid values are onDemand and scheduled.
     */
    snapshotType: string;
    /**
     * Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.
     */
    status: string;
    /**
     * Specifies the size of the snapshot in bytes.
     */
    storageSizeBytes: number;
    /**
     * Specifies the type of cluster: replicaSet or shardedCluster.
     */
    type: string;
}

export interface GetClusterBiConnector {
    /**
     * Indicates whether or not BI Connector for Atlas is enabled on the cluster.
     */
    enabled: string;
    /**
     * Indicates the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).
     */
    readPreference: string;
}

export interface GetClusterConnectionStrings {
    awsPrivateLink: {[key: string]: any};
    awsPrivateLinkSrv: {[key: string]: any};
    private: string;
    privateSrv: string;
    standard: string;
    standardSrv: string;
}

export interface GetClusterLabel {
    /**
     * The key that was set.
     */
    key: string;
    /**
     * The value that represents the key.
     */
    value: string;
}

export interface GetClusterReplicationSpec {
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    /**
     * Number of shards to deploy in the specified zone.
     */
    numShards: number;
    /**
     * Describes the physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.
     */
    regionsConfigs: outputs.GetClusterReplicationSpecRegionsConfig[];
    /**
     * Indicates the n ame for the zone in a Global Cluster.
     */
    zoneName: string;
}

export interface GetClusterReplicationSpecRegionsConfig {
    /**
     * Indicates the number of analytics nodes for Atlas to deploy to the region. Analytics nodes are useful for handling analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only, and can never become the primary.
     */
    analyticsNodes: number;
    /**
     * Number of electable nodes for Atlas to deploy to the region.
     */
    electableNodes: number;
    /**
     * Election priority of the region. For regions with only read-only nodes, set this value to 0.
     */
    priority: number;
    /**
     * Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.
     */
    readOnlyNodes: number;
    /**
     * Name for the region specified.
     */
    regionName: string;
}

export interface GetClusterSnapshotBackupPolicy {
    clusterId: string;
    clusterName: string;
    nextSnapshot: string;
    policies: outputs.GetClusterSnapshotBackupPolicyPolicy[];
    referenceHourOfDay: number;
    referenceMinuteOfHour: number;
    restoreWindowDays: number;
    updateSnapshots: boolean;
}

export interface GetClusterSnapshotBackupPolicyPolicy {
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    policyItems: outputs.GetClusterSnapshotBackupPolicyPolicyPolicyItem[];
}

export interface GetClusterSnapshotBackupPolicyPolicyPolicyItem {
    frequencyInterval: number;
    frequencyType: string;
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    retentionUnit: string;
    retentionValue: number;
}

export interface GetClustersResult {
    /**
     * (Optional) Specifies whether cluster tier auto-scaling is enabled. The default is false.
     */
    autoScalingComputeEnabled: boolean;
    /**
     * (Optional) Set to `true` to enable the cluster tier to scale down.
     */
    autoScalingComputeScaleDownEnabled: boolean;
    /**
     * Indicates whether disk auto-scaling is enabled.
     */
    autoScalingDiskGbEnabled: boolean;
    /**
     * Indicates Cloud service provider on which the server for a multi-tenant cluster is provisioned.
     */
    backingProviderName: string;
    /**
     * Legacy Option, Indicates whether Atlas continuous backups are enabled for the cluster.
     */
    backupEnabled: boolean;
    /**
     * Indicates BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
     */
    biConnector: outputs.GetClustersResultBiConnector;
    /**
     * Indicates the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
     */
    clusterType: string;
    /**
     * Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
     * - `connection_strings.standard` -   Public mongodb:// connection string for this cluster.
     * - `connection_strings.standard_srv` - Public mongodb+srv:// connection string for this cluster. The mongodb+srv protocol tells the driver to look up the seed list of hosts in DNS. Atlas synchronizes this list with the nodes in a cluster. If the connection string uses this URI format, you don’t need to append the seed list or change the URI if the nodes change. Use this URI format if your driver supports it. If it doesn’t, use connectionStrings.standard.
     * - `connection_strings.aws_private_link` -  [Private-endpoint-aware](https://docs.atlas.mongodb.com/security-private-endpoint/#private-endpoint-connection-strings) mongodb://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a AWS PrivateLink connection to this cluster.
     * - `connection_strings.aws_private_link_srv` - [Private-endpoint-aware](https://docs.atlas.mongodb.com/security-private-endpoint/#private-endpoint-connection-strings) mongodb+srv://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a AWS PrivateLink connection to this cluster. Use this URI format if your driver supports it. If it doesn’t, use connectionStrings.awsPrivateLink.
     * - `connection_strings.private` -   [Network-peering-endpoint-aware](https://docs.atlas.mongodb.com/security-vpc-peering/#vpc-peering) mongodb://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a network peering connection to this cluster.
     * - `connection_strings.private_srv` -  [Network-peering-endpoint-aware](https://docs.atlas.mongodb.com/security-vpc-peering/#vpc-peering) mongodb+srv://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a network peering connection to this cluster.
     */
    connectionStrings: outputs.GetClustersResultConnectionStrings;
    /**
     * The Network Peering Container ID.
     */
    containerId: string;
    /**
     * Indicates the size in gigabytes of the server’s root volume (AWS/GCP Only).
     */
    diskSizeGb: number;
    /**
     * Indicates whether Encryption at Rest is enabled or disabled.
     */
    encryptionAtRestProvider: string;
    labels: outputs.GetClustersResultLabel[];
    /**
     * Indicates the version of the cluster to deploy.
     */
    mongoDbMajorVersion: string;
    /**
     * Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
     */
    mongoDbVersion: string;
    /**
     * Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.
     */
    mongoUri: string;
    /**
     * Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.
     */
    mongoUriUpdated: string;
    /**
     * Describes connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.
     */
    mongoUriWithOptions: string;
    /**
     * The name of the current plugin
     */
    name: string;
    /**
     * Number of shards to deploy in the specified zone.
     */
    numShards: number;
    /**
     * Flag that indicates whether the cluster is paused or not.
     */
    paused: boolean;
    /**
     * Flag that indicates if the cluster uses Continuous Cloud Backup.
     */
    pitEnabled: boolean;
    /**
     * (Optional) Maximum instance size to which your cluster can automatically scale.
     */
    providerAutoScalingComputeMaxInstanceSize: string;
    /**
     * (Optional) Minimum instance size to which your cluster can automatically scale.
     */
    providerAutoScalingComputeMinInstanceSize: string;
    /**
     * Flag indicating if the cluster uses Cloud Backup Snapshots for backups.
     */
    providerBackupEnabled: boolean;
    /**
     * Indicates the maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected providerSettings.instanceSizeName and diskSizeGB.
     */
    providerDiskIops: number;
    /**
     * Describes Azure disk type of the server’s root volume (Azure Only).
     */
    providerDiskTypeName: string;
    /**
     * Indicates whether the Amazon EBS encryption is enabled. This feature encrypts the server’s root volume for both data at rest within the volume and data moving between the volume and the instance.
     */
    providerEncryptEbsVolume: boolean;
    /**
     * Atlas provides different instance sizes, each with a default storage capacity and RAM size.
     */
    providerInstanceSizeName: string;
    /**
     * Indicates the cloud service provider on which the servers are provisioned.
     */
    providerName: string;
    /**
     * Indicates Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases. Requires the Atlas Region name, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
     */
    providerRegionName: string;
    /**
     * Indicates the type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.
     */
    providerVolumeType: string;
    /**
     * Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
     */
    replicationFactor: number;
    /**
     * Configuration for cluster regions.  See Replication Spec below for more details.
     */
    replicationSpecs: outputs.GetClustersResultReplicationSpec[];
    /**
     * current snapshot schedule and retention settings for the cluster.
     */
    snapshotBackupPolicies: outputs.GetClustersResultSnapshotBackupPolicy[];
    /**
     * Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.
     */
    srvAddress: string;
    /**
     * Indicates the current state of the cluster. The possible states are:
     * - IDLE
     * - CREATING
     * - UPDATING
     * - DELETING
     * - DELETED
     * - REPAIRING
     */
    stateName: string;
}

export interface GetClustersResultBiConnector {
    /**
     * Indicates whether or not BI Connector for Atlas is enabled on the cluster.
     */
    enabled: string;
    /**
     * Indicates the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).
     */
    readPreference: string;
}

export interface GetClustersResultConnectionStrings {
    awsPrivateLink: {[key: string]: any};
    awsPrivateLinkSrv: {[key: string]: any};
    private: string;
    privateSrv: string;
    standard: string;
    standardSrv: string;
}

export interface GetClustersResultLabel {
    /**
     * The key that was set.
     */
    key: string;
    /**
     * The value that represents the key.
     */
    value: string;
}

export interface GetClustersResultReplicationSpec {
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    /**
     * Number of shards to deploy in the specified zone.
     */
    numShards: number;
    /**
     * Describes the physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.
     */
    regionsConfigs: outputs.GetClustersResultReplicationSpecRegionsConfig[];
    /**
     * Indicates the n ame for the zone in a Global Cluster.
     */
    zoneName: string;
}

export interface GetClustersResultReplicationSpecRegionsConfig {
    /**
     * Indicates the number of analytics nodes for Atlas to deploy to the region. Analytics nodes are useful for handling analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only, and can never become the primary.
     */
    analyticsNodes: number;
    /**
     * Number of electable nodes for Atlas to deploy to the region.
     */
    electableNodes: number;
    /**
     * Election priority of the region. For regions with only read-only nodes, set this value to 0.
     */
    priority: number;
    /**
     * Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.
     */
    readOnlyNodes: number;
    /**
     * Name for the region specified.
     */
    regionName: string;
}

export interface GetClustersResultSnapshotBackupPolicy {
    clusterId: string;
    clusterName: string;
    nextSnapshot: string;
    policies: outputs.GetClustersResultSnapshotBackupPolicyPolicy[];
    referenceHourOfDay: number;
    referenceMinuteOfHour: number;
    restoreWindowDays: number;
    updateSnapshots: boolean;
}

export interface GetClustersResultSnapshotBackupPolicyPolicy {
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    policyItems: outputs.GetClustersResultSnapshotBackupPolicyPolicyPolicyItem[];
}

export interface GetClustersResultSnapshotBackupPolicyPolicyPolicyItem {
    frequencyInterval: number;
    frequencyType: string;
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    retentionUnit: string;
    retentionValue: number;
}

export interface GetCustomDbRoleAction {
    /**
     * (Required) Name of the privilege action. For a complete list of actions available in the Atlas API, see Custom Role Actions.
     */
    action: string;
    /**
     * (Required) Contains information on where the action is granted. Each object in the array either indicates a database and collection on which the action is granted, or indicates that the action is granted on the cluster resource.
     */
    resources: outputs.GetCustomDbRoleActionResource[];
}

export interface GetCustomDbRoleActionResource {
    cluster: boolean;
    collectionName: string;
    databaseName: string;
}

export interface GetCustomDbRoleInheritedRole {
    databaseName: string;
    /**
     * Name of the custom role.
     */
    roleName: string;
}

export interface GetCustomDbRolesResult {
    actions: outputs.GetCustomDbRolesResultAction[];
    inheritedRoles: outputs.GetCustomDbRolesResultInheritedRole[];
    roleName: string;
}

export interface GetCustomDbRolesResultAction {
    /**
     * (Required) Name of the privilege action. For a complete list of actions available in the Atlas API, see Custom Role Actions.
     */
    action: string;
    /**
     * (Required) Contains information on where the action is granted. Each object in the array either indicates a database and collection on which the action is granted, or indicates that the action is granted on the cluster resource.
     */
    resources: outputs.GetCustomDbRolesResultActionResource[];
}

export interface GetCustomDbRolesResultActionResource {
    cluster: boolean;
    collectionName: string;
    databaseName: string;
}

export interface GetCustomDbRolesResultInheritedRole {
    databaseName: string;
    roleName: string;
}

export interface GetDatabaseUserLabel {
    /**
     * The key that you want to write.
     */
    key: string;
    /**
     * The value that you want to write.
     */
    value: string;
}

export interface GetDatabaseUserRole {
    /**
     * Collection for which the role applies. You can specify a collection for the `read` and `readWrite` roles. If you do not specify a collection for `read` and `readWrite`, the role applies to all collections in the database (excluding some collections in the `system`. database).
     */
    collectionName: string;
    /**
     * Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
     */
    databaseName: string;
    roleName: string;
}

export interface GetDatabaseUsersResult {
    /**
     * The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.
     */
    authDatabaseName: string;
    labels: outputs.GetDatabaseUsersResultLabel[];
    /**
     * The unique ID for the project to get all database users.
     */
    projectId: string;
    /**
     * List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
     */
    roles: outputs.GetDatabaseUsersResultRole[];
    /**
     * Username for authenticating to MongoDB.
     */
    username: string;
    /**
     * X.509 method by which the provided username is authenticated.
     */
    x509Type: string;
}

export interface GetDatabaseUsersResultLabel {
    /**
     * The key that you want to write.
     */
    key: string;
    /**
     * The value that you want to write.
     */
    value: string;
}

export interface GetDatabaseUsersResultRole {
    /**
     * Collection for which the role applies. You can specify a collection for the `read` and `readWrite` roles. If you do not specify a collection for `read` and `readWrite`, the role applies to all collections in the database (excluding some collections in the `system`. database).
     */
    collectionName: string;
    /**
     * Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
     */
    databaseName: string;
    roleName: string;
}

export interface GetGlobalClusterConfigManagedNamespace {
    /**
     * (Required) The name of the collection associated with the managed namespace.
     */
    collection: string;
    /**
     * (Required)	The custom shard key for the collection. Global Clusters require a compound shard key consisting of a location field and a user-selected second key, the custom shard key.
     */
    customShardKey: string;
    /**
     * (Required) The name of the database containing the collection.
     */
    db: string;
}

export interface GetNetworkContainersResult {
    /**
     * CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
     */
    atlasCidrBlock: string;
    /**
     * Unique identifer of the Azure subscription in which the VNet resides.
     */
    azureSubscriptionId: string;
    /**
     * Unique identifier of the GCP project in which the Network Peering connection resides.
     */
    gcpProjectId: string;
    /**
     * The Network Peering Container ID.
     */
    id: string;
    /**
     * Name of the Network Peering connection in the Atlas project.
     */
    networkName: string;
    /**
     * Cloud provider for this Network peering container. Accepted values are AWS, GCP, and Azure.
     */
    providerName: string;
    /**
     * Indicates whether the project has Network Peering connections deployed in the container.
     */
    provisioned: boolean;
    /**
     * The Atlas Azure region name for where this container exists.
     */
    region: string;
    /**
     * The Atlas AWS region name for where this container exists.
     */
    regionName: string;
    /**
     * The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.
     */
    vnetName: string;
    /**
     * Unique identifier of the project’s VPC.
     */
    vpcId: string;
}

export interface GetNetworkPeeringsResult {
    /**
     * Specifies the region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     */
    accepterRegionName: string;
    /**
     * Unique identifier for an Azure AD directory.
     */
    atlasCidrBlock: string;
    /**
     * Account ID of the owner of the peer VPC.
     */
    awsAccountId: string;
    /**
     * Unique identifier for an Azure AD directory.
     */
    azureDirectoryId: string;
    /**
     * Unique identifer of the Azure subscription in which the VNet resides.
     */
    azureSubscriptionId: string;
    /**
     * Unique identifier for the peering connection.
     */
    connectionId: string;
    containerId: string;
    /**
     * When `"status" : "FAILED"`, Atlas provides a description of the error.
     */
    errorMessage: string;
    /**
     * Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
     */
    errorState: string;
    /**
     * Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
     */
    errorStateName: string;
    /**
     * GCP project ID of the owner of the network peer.
     */
    gcpProjectId: string;
    /**
     * Name of the network peer to which Atlas connects.
     */
    networkName: string;
    /**
     * Atlas assigned unique ID for the peering connection.
     */
    peeringId: string;
    /**
     * Cloud provider for this VPC peering connection. If omitted, Atlas sets this parameter to AWS. (Possible Values `AWS`, `AZURE`, `GCP`).
     */
    providerName: string;
    /**
     * Name of your Azure resource group.
     */
    resourceGroupName: string;
    /**
     * Peer VPC CIDR block or subnet.
     */
    routeTableCidrBlock: string;
    /**
     * Status of the Atlas network peering connection: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING`, `WAITING_FOR_USER`.
     */
    status: string;
    /**
     * The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
     */
    statusName: string;
    /**
     * Name of your Azure VNet.
     */
    vnetName: string;
    /**
     * Unique identifier of the peer VPC.
     */
    vpcId: string;
}

export interface GetProjectTeam {
    roleNames: string[];
    teamId: string;
}

export interface GetProjectsResult {
    clusterCount: number;
    created: string;
    /**
     * Autogenerated Unique ID for this data source.
     */
    id: string;
    /**
     * The name of the project you want to create. (Cannot be changed via this Provider after creation.)
     */
    name: string;
    /**
     * The ID of the organization you want to create the project within.
     * *`clusterCount` - The number of Atlas clusters deployed in the project.
     * *`created` - The ISO-8601-formatted timestamp of when Atlas created the project.
     * * `teams.#.team_id` - The unique identifier of the team you want to associate with the project. The team and project must share the same parent organization.
     * * `teams.#.role_names` - Each string in the array represents a project role assigned to the team. Every user associated with the team inherits these roles.
     * The following are valid roles:
     * * `GROUP_OWNER`
     * * `GROUP_READ_ONLY`
     * * `GROUP_DATA_ACCESS_ADMIN`
     * * `GROUP_DATA_ACCESS_READ_WRITE`
     * * `GROUP_DATA_ACCESS_READ_ONLY`
     * * `GROUP_CLUSTER_MANAGER`
     */
    orgId: string;
    teams: outputs.GetProjectsResultTeam[];
}

export interface GetProjectsResultTeam {
    roleNames: string[];
    teamId: string;
}

export interface GlobalClusterConfigCustomZoneMapping {
    /**
     * The ISO location code to which you want to map a zone in your Global Cluster. You can find a list of all supported location codes [here](https://cloud.mongodb.com/static/atlas/country_iso_codes.txt).
     */
    location: string;
    /**
     * The name of the zone in your Global Cluster that you want to map to location.
     */
    zone: string;
}

export interface GlobalClusterConfigManagedNamespace {
    /**
     * The name of the collection associated with the managed namespace.
     */
    collection: string;
    /**
     * The custom shard key for the collection. Global Clusters require a compound shard key consisting of a location field and a user-selected second key, the custom shard key.
     */
    customShardKey: string;
    /**
     * The name of the database containing the collection.
     */
    db: string;
}

export interface ProjectTeam {
    /**
     * Each string in the array represents a project role you want to assign to the team. Every user associated with the team inherits these roles. You must specify an array even if you are only associating a single role with the team.
     * The following are valid roles:
     * * `GROUP_OWNER`
     * * `GROUP_READ_ONLY`
     * * `GROUP_DATA_ACCESS_ADMIN`
     * * `GROUP_DATA_ACCESS_READ_WRITE`
     * * `GROUP_DATA_ACCESS_READ_ONLY`
     * * `GROUP_CLUSTER_MANAGER`
     */
    roleNames: string[];
    /**
     * The unique identifier of the team you want to associate with the project. The team and project must share the same parent organization.
     */
    teamId: string;
}

export interface X509AuthenticationDatabaseUserCertificate {
    createdAt: string;
    groupId: string;
    id: number;
    notAfter: string;
    subject: string;
}
