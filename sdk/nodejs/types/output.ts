// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "../types/input";
import * as outputs from "../types/output";

export interface AdvancedClusterAdvancedConfiguration {
    /**
     * [Default level of acknowledgment requested from MongoDB for read operations](https://docs.mongodb.com/manual/reference/read-concern/) set for this cluster. MongoDB 4.4 clusters default to [available](https://docs.mongodb.com/manual/reference/read-concern-available/).
     */
    defaultReadConcern: string;
    /**
     * [Default level of acknowledgment requested from MongoDB for write operations](https://docs.mongodb.com/manual/reference/write-concern/) set for this cluster. MongoDB 4.4 clusters default to [1](https://docs.mongodb.com/manual/reference/write-concern/).
     */
    defaultWriteConcern: string;
    /**
     * When true, documents can only be updated or inserted if, for all indexed fields on the target collection, the corresponding index entries do not exceed 1024 bytes. When false, mongod writes documents that exceed the limit but does not index them.
     */
    failIndexKeyTooLong: boolean;
    /**
     * When true, the cluster allows execution of operations that perform server-side executions of JavaScript. When false, the cluster disables execution of those operations.
     */
    javascriptEnabled: boolean;
    /**
     * Sets the minimum Transport Layer Security (TLS) version the cluster accepts for incoming connections.Valid values are:
     */
    minimumEnabledTlsProtocol: string;
    /**
     * When true, the cluster disables the execution of any query that requires a collection scan to return results. When false, the cluster allows the execution of those operations.
     */
    noTableScan: boolean;
    /**
     * The custom oplog size of the cluster. Without a value that indicates that the cluster uses the default oplog size calculated by Atlas.
     */
    oplogSizeMb: number;
    /**
     * Interval in seconds at which the mongosqld process re-samples data to create its relational schema. The default value is 300. The specified value must be a positive integer. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleRefreshIntervalBiConnector: number;
    /**
     * Number of documents per database to sample when gathering schema information. Defaults to 100. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleSizeBiConnector: number;
}

export interface AdvancedClusterBiConnector {
    /**
     * Specifies whether or not BI Connector for Atlas is enabled on the cluster.l
     * *
     * - Set to `true` to enable BI Connector for Atlas.
     * - Set to `false` to disable BI Connector for Atlas.
     */
    enabled: boolean;
    /**
     * Specifies the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).
     */
    readPreference: string;
}

export interface AdvancedClusterConnectionString {
    /**
     * @deprecated This field is deprecated. Use connection_strings.private_endpoint[n].connection_string instead
     */
    awsPrivateLink: {[key: string]: any};
    /**
     * @deprecated This field is deprecated. Use connection_strings.private_endpoint[n].srv_connection_string instead
     */
    awsPrivateLinkSrv: {[key: string]: any};
    private: string;
    privateEndpoints: outputs.AdvancedClusterConnectionStringPrivateEndpoint[];
    privateSrv: string;
    standard: string;
    standardSrv: string;
}

export interface AdvancedClusterConnectionStringPrivateEndpoint {
    connectionString: string;
    endpoints: outputs.AdvancedClusterConnectionStringPrivateEndpointEndpoint[];
    srvConnectionString: string;
    type: string;
}

export interface AdvancedClusterConnectionStringPrivateEndpointEndpoint {
    endpointId: string;
    /**
     * Cloud service provider on which the servers are provisioned.
     * The possible values are:
     */
    providerName: string;
    region: string;
}

export interface AdvancedClusterLabel {
    /**
     * The key that you want to write.
     */
    key: string;
    /**
     * The value that you want to write.
     */
    value: string;
}

export interface AdvancedClusterReplicationSpec {
    containerId: {[key: string]: string};
    id: string;
    /**
     * Provide this value if you set a `clusterType` of SHARDED or GEOSHARDED. Omit this value if you selected a `clusterType` of REPLICASET. This API resource accepts 1 through 50, inclusive. This parameter defaults to 1. If you specify a `numShards` value of 1 and a `clusterType` of SHARDED, Atlas deploys a single-shard [sharded cluster](https://docs.atlas.mongodb.com/reference/glossary/#std-term-sharded-cluster). Don't create a sharded cluster with a single shard for production environments. Single-shard sharded clusters don't provide the same benefits as multi-shard configurations.
     */
    numShards?: number;
    /**
     * Configuration for the hardware specifications for nodes set for a given regionEach `regionConfigs` object describes the region's priority in elections and the number and type of MongoDB nodes that Atlas deploys to the region. Each `regionConfigs` object must have either an `analyticsSpecs` object, `electableSpecs` object, or `readOnlySpecs` object. See below
     */
    regionConfigs: outputs.AdvancedClusterReplicationSpecRegionConfig[];
    /**
     * Name for the zone in a Global Cluster.
     */
    zoneName?: string;
}

export interface AdvancedClusterReplicationSpecRegionConfig {
    /**
     * Hardware specifications for [analytics nodes](https://docs.atlas.mongodb.com/reference/faq/deployment/#std-label-analytics-nodes-overview) needed in the region. Analytics nodes handle analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only and can never become the [primary](https://docs.atlas.mongodb.com/reference/glossary/#std-term-primary). If you don't specify this parameter, no analytics nodes deploy to this region. See below
     */
    analyticsSpecs?: outputs.AdvancedClusterReplicationSpecRegionConfigAnalyticsSpecs;
    /**
     * Configuration for the Collection of settings that configures auto-scaling information for the cluster. The values for the `autoScaling` parameter must be the same for every item in the `replicationSpecs` array. See below
     */
    autoScaling: outputs.AdvancedClusterReplicationSpecRegionConfigAutoScaling;
    /**
     * Cloud service provider on which you provision the host for a multi-tenant cluster. Use this only when a `providerName` is `TENANT` and `instanceSize` of a specs is `M2` or `M5`.
     */
    backingProviderName?: string;
    /**
     * Hardware specifications for electable nodes in the region. Electable nodes can become the [primary](https://docs.atlas.mongodb.com/reference/glossary/#std-term-primary) and can enable local reads. If you do not specify this option, no electable nodes are deployed to the region. See below
     */
    electableSpecs?: outputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecs;
    /**
     * Election priority of the region. For regions with only read-only nodes, set this value to 0.
     * * If you have multiple `regionConfigs` objects (your cluster is multi-region or multi-cloud), they must have priorities in descending order. The highest priority is 7.
     * * If your region has set `region_configs.#.electable_specs.0.node_count` to 1 or higher, it must have a priority of exactly one (1) less than another region in the `replication_specs.#.region_configs.#` array. The highest-priority region must have a priority of 7. The lowest possible priority is 1.
     */
    priority: number;
    /**
     * Cloud service provider on which the servers are provisioned.
     * The possible values are:
     */
    providerName: string;
    /**
     * Hardware specifications for read-only nodes in the region. Read-only nodes can become the [primary](https://docs.atlas.mongodb.com/reference/glossary/#std-term-primary) and can enable local reads. If you don't specify this parameter, no read-only nodes are deployed to the region. See below
     */
    readOnlySpecs?: outputs.AdvancedClusterReplicationSpecRegionConfigReadOnlySpecs;
    /**
     * Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
     */
    regionName: string;
}

export interface AdvancedClusterReplicationSpecRegionConfigAnalyticsSpecs {
    /**
     * Target throughput (IOPS) desired for AWS storage attached to your cluster. Set only if you selected AWS as your cloud service provider. You can't set this parameter for a multi-cloud cluster.
     */
    diskIops?: number;
    /**
     * Type of storage you want to attach to your AWS-provisioned cluster. Set only if you selected AWS as your cloud service provider. You can't set this parameter for a multi-cloud cluster. Valid values are:
     */
    ebsVolumeType?: string;
    /**
     * Hardware specification for the instance sizes in this region. Each instance size has a default storage and memory capacity. The instance size you select applies to all the data-bearing hosts in your instance size.
     */
    instanceSize: string;
    /**
     * Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the [primary](https://docs.atlas.mongodb.com/reference/glossary/#std-term-primary), but can enable local reads.
     */
    nodeCount?: number;
}

export interface AdvancedClusterReplicationSpecRegionConfigAutoScaling {
    /**
     * Flag that indicates whether instance size auto-scaling is enabled. This parameter defaults to false.
     */
    computeEnabled: boolean;
    /**
     * Maximum instance size to which your cluster can automatically scale (such as M40). Atlas requires this parameter if `replication_specs.#.region_configs.#.auto_scaling.0.compute_enabled` is true.
     */
    computeMaxInstanceSize: string;
    /**
     * Minimum instance size to which your cluster can automatically scale (such as M10). Atlas requires this parameter if `replication_specs.#.region_configs.#.auto_scaling.0.compute_scale_down_enabled` is true.
     */
    computeMinInstanceSize: string;
    /**
     * Flag that indicates whether the instance size may scale down. Atlas requires this parameter if `replication_specs.#.region_configs.#.auto_scaling.0.compute_enabled` : true. If you enable this option, specify a value for `replication_specs.#.region_configs.#.auto_scaling.0.compute_min_instance_size`.
     */
    computeScaleDownEnabled: boolean;
    /**
     * Flag that indicates whether this cluster enables disk auto-scaling. This parameter defaults to true.
     */
    diskGbEnabled: boolean;
}

export interface AdvancedClusterReplicationSpecRegionConfigElectableSpecs {
    /**
     * Target throughput (IOPS) desired for AWS storage attached to your cluster. Set only if you selected AWS as your cloud service provider. You can't set this parameter for a multi-cloud cluster.
     */
    diskIops?: number;
    /**
     * Type of storage you want to attach to your AWS-provisioned cluster. Set only if you selected AWS as your cloud service provider. You can't set this parameter for a multi-cloud cluster. Valid values are:
     */
    ebsVolumeType?: string;
    /**
     * Hardware specification for the instance sizes in this region. Each instance size has a default storage and memory capacity. The instance size you select applies to all the data-bearing hosts in your instance size.
     */
    instanceSize: string;
    /**
     * Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the [primary](https://docs.atlas.mongodb.com/reference/glossary/#std-term-primary), but can enable local reads.
     */
    nodeCount?: number;
}

export interface AdvancedClusterReplicationSpecRegionConfigReadOnlySpecs {
    /**
     * Target throughput (IOPS) desired for AWS storage attached to your cluster. Set only if you selected AWS as your cloud service provider. You can't set this parameter for a multi-cloud cluster.
     */
    diskIops?: number;
    /**
     * Type of storage you want to attach to your AWS-provisioned cluster. Set only if you selected AWS as your cloud service provider. You can't set this parameter for a multi-cloud cluster. Valid values are:
     */
    ebsVolumeType?: string;
    /**
     * Hardware specification for the instance sizes in this region. Each instance size has a default storage and memory capacity. The instance size you select applies to all the data-bearing hosts in your instance size.
     */
    instanceSize: string;
    /**
     * Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the [primary](https://docs.atlas.mongodb.com/reference/glossary/#std-term-primary), but can enable local reads.
     */
    nodeCount?: number;
}

export interface AlertConfigurationMatcher {
    /**
     * Name of the field in the target object to match on.
     */
    fieldName?: string;
    /**
     * If omitted, the configuration is disabled.
     * Accepted values are:
     * Accepted values are:
     * Accepted values are:
     */
    operator?: string;
    /**
     * If omitted, the configuration is disabled.
     */
    value?: string;
}

export interface AlertConfigurationMetricThresholdConfig {
    /**
     * Name of the metric to check. The full list being quite large, please refer to atlas docs [here for general metrics](https://docs.atlas.mongodb.com/reference/alert-host-metrics/#measurement-types) and [here for serverless metrics](https://www.mongodb.com/docs/atlas/reference/api/alert-configurations-create-config/#serverless-measurements)
     */
    metricName?: string;
    /**
     * This must be set to AVERAGE. Atlas computes the current metric value as an average.
     */
    mode?: string;
    /**
     * If omitted, the configuration is disabled.
     * Accepted values are:
     * Accepted values are:
     * Accepted values are:
     */
    operator?: string;
    /**
     * Threshold value outside of which an alert will be triggered.
     */
    threshold?: number;
    /**
     * The units for the threshold value. Depends on the type of metric.
     * Refer to the [MongoDB API Alert Configuration documentation](https://www.mongodb.com/docs/atlas/reference/api/alert-configurations-get-config/#request-body-parameters) for a list of accepted values.
     * Refer to the [MongoDB API Alert Configuration documentation](https://www.mongodb.com/docs/atlas/reference/api/alert-configurations-get-config/#request-body-parameters) for a list of accepted values.
     */
    units?: string;
}

export interface AlertConfigurationNotification {
    /**
     * Slack API token. Required for the SLACK notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     */
    apiToken?: string;
    /**
     * Slack channel name. Required for the SLACK notifications type.
     */
    channelName?: string;
    /**
     * Datadog API Key. Found in the Datadog dashboard. Required for the DATADOG notifications type.
     */
    datadogApiKey?: string;
    /**
     * Region that indicates which API URL to use. Accepted regions are: `US`, `EU`. The default Datadog region is US.
     */
    datadogRegion?: string;
    /**
     * Number of minutes to wait after an alert condition is detected before sending out the first notification.
     */
    delayMin?: number;
    /**
     * Email address to which alert notifications are sent. Required for the EMAIL notifications type.
     */
    emailAddress?: string;
    /**
     * Flag indicating email notifications should be sent. This flag is only valid if `typeName` is set to `ORG`, `GROUP`, or `USER`.
     */
    emailEnabled?: boolean;
    /**
     * Flowdock flow name in lower-case letters. Required for the `FLOWDOCK` notifications type
     */
    flowName?: string;
    /**
     * The Flowdock personal API token. Required for the `FLOWDOCK` notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     */
    flowdockApiToken?: string;
    /**
     * Number of minutes to wait between successive notifications for unacknowledged alerts that are not resolved. The minimum value is 5. **NOTE** `PAGER_DUTY`, `VICTOR_OPS`, and `OPS_GENIE` notifications do not return this value. The notification interval must be configured and managed within each external service.
     */
    intervalMin?: number;
    /**
     * Microsoft Teams Webhook Uniform Resource Locator (URL) that MongoDB Cloud needs to send this notification via Microsoft Teams. Required if `typeName` is `MICROSOFT_TEAMS`. If the URL later becomes invalid, MongoDB Cloud sends an email to the project owners. If the key remains invalid, MongoDB Cloud removes it.
     */
    microsoftTeamsWebhookUrl?: string;
    /**
     * Mobile number to which alert notifications are sent. Required for the SMS notifications type.
     */
    mobileNumber?: string;
    /**
     * Opsgenie API Key. Required for the `OPS_GENIE` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     */
    opsGenieApiKey?: string;
    /**
     * Region that indicates which API URL to use. Accepted regions are: `US` ,`EU`. The default Opsgenie region is US.
     */
    opsGenieRegion?: string;
    /**
     * Flowdock organization name in lower-case letters. This is the name that appears after www.flowdock.com/app/ in the URL string. Required for the FLOWDOCK notifications type.
     */
    orgName?: string;
    /**
     * Optional. One or more roles that receive the configured alert. If you include this field, Atlas sends alerts only to users assigned the roles you specify in the array. If you omit this field, Atlas sends alerts to users assigned any role. This parameter is only valid if `typeName` is set to `ORG`, `GROUP`, or `USER`.
     * Accepted values are:
     */
    roles?: string[];
    /**
     * PagerDuty service key. Required for the PAGER_DUTY notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     */
    serviceKey?: string;
    /**
     * Flag indicating if text message notifications should be sent to this user's mobile phone. This flag is only valid if `typeName` is set to `ORG`, `GROUP`, or `USER`.
     */
    smsEnabled?: boolean;
    /**
     * Unique identifier of a team.
     */
    teamId?: string;
    /**
     * Label for the team that receives this notification.
     */
    teamName: string;
    /**
     * Type of alert notification.
     * Accepted values are:
     */
    typeName?: string;
    /**
     * Name of the Atlas user to which to send notifications. Only a user in the project that owns the alert configuration is allowed here. Required for the `USER` notifications type.
     */
    username?: string;
    /**
     * VictorOps API key. Required for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     */
    victorOpsApiKey?: string;
    /**
     * VictorOps routing key. Optional for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     */
    victorOpsRoutingKey?: string;
    /**
     * Optional authentication secret for the `WEBHOOK` notifications type.
     */
    webhookSecret?: string;
    /**
     * Target URL  for the `WEBHOOK` notifications type.
     */
    webhookUrl?: string;
}

export interface AlertConfigurationThresholdConfig {
    /**
     * If omitted, the configuration is disabled.
     * Accepted values are:
     * Accepted values are:
     * Accepted values are:
     */
    operator?: string;
    /**
     * Threshold value outside of which an alert will be triggered.
     */
    threshold?: number;
    /**
     * The units for the threshold value. Depends on the type of metric.
     * Refer to the [MongoDB API Alert Configuration documentation](https://www.mongodb.com/docs/atlas/reference/api/alert-configurations-get-config/#request-body-parameters) for a list of accepted values.
     * Refer to the [MongoDB API Alert Configuration documentation](https://www.mongodb.com/docs/atlas/reference/api/alert-configurations-get-config/#request-body-parameters) for a list of accepted values.
     */
    units?: string;
}

export interface CloudBackupScheduleExport {
    /**
     * Unique identifier of the mongodbatlas.CloudBackupSnapshotExportBucket export_bucket_id value.
     */
    exportBucketId: string;
    /**
     * Frequency associated with the export snapshot item.
     */
    frequencyType: string;
}

export interface CloudBackupSchedulePolicyItemDaily {
    /**
     * Desired frequency of the new backup policy item specified by `frequencyType`.
     */
    frequencyInterval: number;
    /**
     * Frequency associated with the export snapshot item.
     */
    frequencyType: string;
    id: string;
    /**
     * Scope of the backup policy item: days, weeks, or months.
     */
    retentionUnit: string;
    /**
     * Value to associate with `retentionUnit`.
     */
    retentionValue: number;
}

export interface CloudBackupSchedulePolicyItemHourly {
    /**
     * Desired frequency of the new backup policy item specified by `frequencyType`.
     */
    frequencyInterval: number;
    /**
     * Frequency associated with the export snapshot item.
     */
    frequencyType: string;
    id: string;
    /**
     * Scope of the backup policy item: days, weeks, or months.
     */
    retentionUnit: string;
    /**
     * Value to associate with `retentionUnit`.
     */
    retentionValue: number;
}

export interface CloudBackupSchedulePolicyItemMonthly {
    /**
     * Desired frequency of the new backup policy item specified by `frequencyType`.
     */
    frequencyInterval: number;
    /**
     * Frequency associated with the export snapshot item.
     */
    frequencyType: string;
    id: string;
    /**
     * Scope of the backup policy item: days, weeks, or months.
     */
    retentionUnit: string;
    /**
     * Value to associate with `retentionUnit`.
     */
    retentionValue: number;
}

export interface CloudBackupSchedulePolicyItemWeekly {
    /**
     * Desired frequency of the new backup policy item specified by `frequencyType`.
     */
    frequencyInterval: number;
    /**
     * Frequency associated with the export snapshot item.
     */
    frequencyType: string;
    id: string;
    /**
     * Scope of the backup policy item: days, weeks, or months.
     */
    retentionUnit: string;
    /**
     * Value to associate with `retentionUnit`.
     */
    retentionValue: number;
}

export interface CloudBackupSnapshotExportJobComponent {
    /**
     * _Returned for sharded clusters only._ Export job details for each replica set in the sharded cluster.
     */
    exportId: string;
    /**
     * _Returned for sharded clusters only._ Unique identifier of the export job for the replica set.
     */
    replicaSetName: string;
}

export interface CloudBackupSnapshotExportJobCustomData {
    /**
     * Required if you want to include custom data using `customData` in the metadata file uploaded to the bucket. Key to include in the metadata file that Atlas uploads to the bucket when the export job finishes.
     */
    key: string;
    /**
     * Required if you specify `key`.
     */
    value: string;
}

export interface CloudBackupSnapshotMember {
    /**
     * Cloud provider that stores this snapshot.
     */
    cloudProvider: string;
    /**
     * Unique identifier for the sharded cluster snapshot.
     */
    id: string;
    /**
     * Label given to a shard or config server from which Atlas took this snapshot.
     */
    replicaSetName: string;
}

export interface CloudBackupSnapshotRestoreJobDeliveryTypeConfig {
    automated?: boolean;
    download?: boolean;
    oplogInc?: number;
    oplogTs?: number;
    pointInTime?: boolean;
    pointInTimeUtcSeconds?: number;
    /**
     * Name of the target Atlas cluster to which the restore job restores the snapshot. Only visible if deliveryType is automated.
     */
    targetClusterName?: string;
    /**
     * Name of the target Atlas project of the restore job. Only visible if deliveryType is automated.
     */
    targetProjectId?: string;
}

export interface CloudProviderAccessAuthorizationAws {
    iamAssumedRoleArn: string;
}

export interface CloudProviderAccessAuthorizationFeatureUsage {
    featureId: {[key: string]: any};
    featureType: string;
}

export interface CloudProviderAccessFeatureUsage {
    featureId: {[key: string]: any};
    featureType: string;
}

export interface CloudProviderAccessSetupAwsConfig {
    atlasAssumedRoleExternalId: string;
    atlasAwsAccountArn: string;
}

export interface CloudProviderSnapshotBackupPolicyPolicy {
    id: string;
    policyItems: outputs.CloudProviderSnapshotBackupPolicyPolicyPolicyItem[];
}

export interface CloudProviderSnapshotBackupPolicyPolicyPolicyItem {
    frequencyInterval: number;
    frequencyType: string;
    id: string;
    retentionUnit: string;
    retentionValue: number;
}

export interface CloudProviderSnapshotRestoreJobDeliveryTypeConfig {
    automated?: boolean;
    download?: boolean;
    oplogInc?: number;
    oplogTs?: number;
    pointInTime?: boolean;
    pointInTimeUtcSeconds?: number;
    /**
     * Name of the target Atlas cluster to which the restore job restores the snapshot. Only required if deliveryType is automated.
     */
    targetClusterName?: string;
    /**
     * Unique ID of the target Atlas project for the specified targetClusterName. Only required if deliveryType is automated.
     */
    targetProjectId?: string;
}

export interface ClusterAdvancedConfiguration {
    /**
     * [Default level of acknowledgment requested from MongoDB for read operations](https://docs.mongodb.com/manual/reference/read-concern/) set for this cluster. MongoDB 4.4 clusters default to [available](https://docs.mongodb.com/manual/reference/read-concern-available/).
     */
    defaultReadConcern: string;
    /**
     * [Default level of acknowledgment requested from MongoDB for write operations](https://docs.mongodb.com/manual/reference/write-concern/) set for this cluster. MongoDB 4.4 clusters default to [1](https://docs.mongodb.com/manual/reference/write-concern/).
     */
    defaultWriteConcern: string;
    /**
     * When true, documents can only be updated or inserted if, for all indexed fields on the target collection, the corresponding index entries do not exceed 1024 bytes. When false, mongod writes documents that exceed the limit but does not index them.
     */
    failIndexKeyTooLong: boolean;
    /**
     * When true, the cluster allows execution of operations that perform server-side executions of JavaScript. When false, the cluster disables execution of those operations.
     */
    javascriptEnabled: boolean;
    /**
     * Sets the minimum Transport Layer Security (TLS) version the cluster accepts for incoming connections.Valid values are:
     */
    minimumEnabledTlsProtocol: string;
    /**
     * When true, the cluster disables the execution of any query that requires a collection scan to return results. When false, the cluster allows the execution of those operations.
     */
    noTableScan: boolean;
    /**
     * The custom oplog size of the cluster. Without a value that indicates that the cluster uses the default oplog size calculated by Atlas.
     */
    oplogSizeMb: number;
    /**
     * Interval in seconds at which the mongosqld process re-samples data to create its relational schema. The default value is 300. The specified value must be a positive integer. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleRefreshIntervalBiConnector: number;
    /**
     * Number of documents per database to sample when gathering schema information. Defaults to 100. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleSizeBiConnector: number;
}

export interface ClusterBiConnectorConfig {
    /**
     * Specifies whether or not BI Connector for Atlas is enabled on the cluster.l
     * *
     * - Set to `true` to enable BI Connector for Atlas.
     * - Set to `false` to disable BI Connector for Atlas.
     */
    enabled: boolean;
    /**
     * Specifies the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).
     */
    readPreference: string;
}

export interface ClusterConnectionString {
    /**
     * @deprecated This field is deprecated. Use connection_strings.private_endpoint[n].connection_string instead
     */
    awsPrivateLink: {[key: string]: any};
    /**
     * @deprecated This field is deprecated. Use connection_strings.private_endpoint[n].srv_connection_string instead
     */
    awsPrivateLinkSrv: {[key: string]: any};
    private: string;
    privateEndpoints: outputs.ClusterConnectionStringPrivateEndpoint[];
    privateSrv: string;
    standard: string;
    standardSrv: string;
}

export interface ClusterConnectionStringPrivateEndpoint {
    connectionString: string;
    endpoints: outputs.ClusterConnectionStringPrivateEndpointEndpoint[];
    srvConnectionString: string;
    type: string;
}

export interface ClusterConnectionStringPrivateEndpointEndpoint {
    endpointId: string;
    /**
     * Cloud service provider on which the servers are provisioned.
     */
    providerName: string;
    region: string;
}

export interface ClusterLabel {
    /**
     * The key that you want to write.
     */
    key: string;
    /**
     * The value that you want to write.
     */
    value: string;
}

export interface ClusterReplicationSpec {
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    /**
     * Selects whether the cluster is a replica set or a sharded cluster. If you use the replicationSpecs parameter, you must set num_shards.
     */
    numShards: number;
    /**
     * Physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.
     */
    regionsConfigs: outputs.ClusterReplicationSpecRegionsConfig[];
    /**
     * Name for the zone in a Global Cluster.
     */
    zoneName?: string;
}

export interface ClusterReplicationSpecRegionsConfig {
    /**
     * The number of analytics nodes for Atlas to deploy to the region. Analytics nodes are useful for handling analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only, and can never become the primary. If you do not specify this option, no analytics nodes are deployed to the region.
     */
    analyticsNodes?: number;
    /**
     * Number of electable nodes for Atlas to deploy to the region. Electable nodes can become the primary and can facilitate local reads.
     * * The total number of electableNodes across all replication spec regions  must total 3, 5, or 7.
     * * Specify 0 if you do not want any electable nodes in the region.
     * * You cannot create electable nodes in a region if `priority` is 0.
     */
    electableNodes: number;
    /**
     * Election priority of the region. For regions with only read-only nodes, set this value to 0.
     * * For regions where `electableNodes` is at least 1, each region must have a priority of exactly one (1) less than the previous region. The first region must have a priority of 7. The lowest possible priority is 1.
     * * The priority 7 region identifies the Preferred Region of the cluster. Atlas places the primary node in the Preferred Region. Priorities 1 through 7 are exclusive - no more than one region per cluster can be assigned a given priority.
     * * Example: If you have three regions, their priorities would be 7, 6, and 5 respectively. If you added two more regions for supporting electable nodes, the priorities of those regions would be 4 and 3 respectively.
     */
    priority: number;
    /**
     * Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.
     */
    readOnlyNodes?: number;
    /**
     * Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
     */
    regionName: string;
}

export interface ClusterSnapshotBackupPolicy {
    /**
     * The cluster ID.
     */
    clusterId: string;
    clusterName: string;
    nextSnapshot: string;
    policies: outputs.ClusterSnapshotBackupPolicyPolicy[];
    referenceHourOfDay: number;
    referenceMinuteOfHour: number;
    restoreWindowDays: number;
    updateSnapshots: boolean;
}

export interface ClusterSnapshotBackupPolicyPolicy {
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    policyItems: outputs.ClusterSnapshotBackupPolicyPolicyPolicyItem[];
}

export interface ClusterSnapshotBackupPolicyPolicyPolicyItem {
    frequencyInterval: number;
    frequencyType: string;
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    retentionUnit: string;
    retentionValue: number;
}

export interface CustomDbRoleAction {
    /**
     * Name of the privilege action. For a complete list of actions available in the Atlas API, see [Custom Role Actions](https://docs.atlas.mongodb.com/reference/api/custom-role-actions)
     * > **Note**: The privilege actions available to the Custom Roles API resource represent a subset of the privilege actions available in the Atlas Custom Roles UI.
     */
    action: string;
    /**
     * Contains information on where the action is granted. Each object in the array either indicates a database and collection on which the action is granted, or indicates that the action is granted on the cluster resource.
     */
    resources: outputs.CustomDbRoleActionResource[];
}

export interface CustomDbRoleActionResource {
    cluster?: boolean;
    collectionName?: string;
    /**
     * Database on which the inherited role is granted.
     */
    databaseName?: string;
}

export interface CustomDbRoleInheritedRole {
    /**
     * Database on which the inherited role is granted.
     */
    databaseName: string;
    /**
     * Name of the inherited role. This can either be another custom role or a built-in role.
     */
    roleName: string;
}

export interface DataLakeAws {
    externalId: string;
    iamAssumedRoleArn: string;
    iamUserArn: string;
    roleId: string;
    testS3Bucket: string;
}

export interface DataLakeDataProcessRegion {
    cloudProvider: string;
    region: string;
}

export interface DataLakeStorageDatabase {
    collections: outputs.DataLakeStorageDatabaseCollection[];
    maxWildcardCollections: number;
    /**
     * Name of the Atlas Data Lake.
     */
    name: string;
    views: outputs.DataLakeStorageDatabaseView[];
}

export interface DataLakeStorageDatabaseCollection {
    dataSources: outputs.DataLakeStorageDatabaseCollectionDataSource[];
    /**
     * Name of the Atlas Data Lake.
     */
    name: string;
}

export interface DataLakeStorageDatabaseCollectionDataSource {
    defaultFormat: string;
    path: string;
    storeName: string;
}

export interface DataLakeStorageDatabaseView {
    /**
     * Name of the Atlas Data Lake.
     */
    name: string;
    pipeline: string;
    source: string;
}

export interface DataLakeStorageStore {
    additionalStorageClasses: string[];
    bucket: string;
    delimiter: string;
    includeTags: boolean;
    /**
     * Name of the Atlas Data Lake.
     */
    name: string;
    prefix: string;
    provider: string;
    region: string;
}

export interface DatabaseUserLabel {
    /**
     * The key that you want to write.
     */
    key: string;
    /**
     * The value that you want to write.
     */
    value: string;
}

export interface DatabaseUserRole {
    /**
     * Collection for which the role applies. You can specify a collection for the `read` and `readWrite` roles. If you do not specify a collection for `read` and `readWrite`, the role applies to all collections in the database (excluding some collections in the `system`. database).
     */
    collectionName: string;
    /**
     * Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
     */
    databaseName: string;
    /**
     * Name of the role to grant. See [Create a Database User](https://docs.atlas.mongodb.com/reference/api/database-users-create-a-user/) `roles.roleName` for valid values and restrictions.
     */
    roleName: string;
}

export interface DatabaseUserScope {
    /**
     * Name of the cluster or Atlas Data Lake that the user has access to.
     */
    name?: string;
    /**
     * Type of resource that the user has access to. Valid values are: `CLUSTER` and `DATA_LAKE`
     */
    type?: string;
}

export interface EncryptionAtRestAwsKmsConfig {
    accessKeyId?: string;
    /**
     * The AWS customer master key used to encrypt and decrypt the MongoDB master keys.
     */
    customerMasterKeyId?: string;
    /**
     * Specifies whether Encryption at Rest is enabled for an Atlas project, To disable Encryption at Rest, pass only this parameter with a value of false, When you disable Encryption at Rest, Atlas also removes the configuration details.
     */
    enabled?: boolean;
    /**
     * The AWS region in which the AWS customer master key exists: CA_CENTRAL_1, US_EAST_1, US_EAST_2, US_WEST_1, US_WEST_2, SA_EAST_1
     */
    region?: string;
    /**
     * ID of an AWS IAM role authorized to manage an AWS customer master key. To find the ID for an existing IAM role check the `roleId` attribute of the `mongodbatlas.CloudProviderAccess` resource.
     */
    roleId?: string;
    secretAccessKey?: string;
}

export interface EncryptionAtRestAzureKeyVaultConfig {
    /**
     * The Azure environment where the Azure account credentials reside. Valid values are the following: AZURE, AZURE_CHINA, AZURE_GERMANY
     */
    azureEnvironment?: string;
    /**
     * The client ID, also known as the application ID, for an Azure application associated with the Azure AD tenant.
     */
    clientId?: string;
    /**
     * Specifies whether Encryption at Rest is enabled for an Atlas project. To disable Encryption at Rest, pass only this parameter with a value of false. When you disable Encryption at Rest, Atlas also removes the configuration details.
     */
    enabled: boolean;
    /**
     * The unique identifier of a key in an Azure Key Vault.
     */
    keyIdentifier?: string;
    /**
     * The name of an Azure Key Vault containing your key.
     */
    keyVaultName?: string;
    /**
     * The name of the Azure Resource group that contains an Azure Key Vault.
     */
    resourceGroupName?: string;
    /**
     * The secret associated with the Azure Key Vault specified by azureKeyVault.tenantID.
     */
    secret?: string;
    /**
     * The unique identifier associated with an Azure subscription.
     */
    subscriptionId?: string;
    /**
     * The unique identifier for an Azure AD tenant within an Azure subscription.
     */
    tenantId?: string;
}

export interface EncryptionAtRestGoogleCloudKmsConfig {
    /**
     * Specifies whether Encryption at Rest is enabled for an Atlas project. To disable Encryption at Rest, pass only this parameter with a value of false. When you disable Encryption at Rest, Atlas also removes the configuration details.
     */
    enabled?: boolean;
    /**
     * The Key Version Resource ID from your GCP account.
     */
    keyVersionResourceId?: string;
    /**
     * String-formatted JSON object containing GCP KMS credentials from your GCP account.
     */
    serviceAccountKey?: string;
}

export interface EventTriggerEventProcessors {
    awsEventbridge?: outputs.EventTriggerEventProcessorsAwsEventbridge;
}

export interface EventTriggerEventProcessorsAwsEventbridge {
    configAccountId?: string;
    configRegion?: string;
}

export interface FederatedSettingsOrgRoleMappingRoleAssignment {
    /**
     * Unique identifier of the project to which you want the role mapping to apply.
     */
    groupId?: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     */
    orgId?: string;
    /**
     * Specifies the Roles that are attached to the Role Mapping. Available role IDs can be found on [the User Roles
     * Reference](https://www.mongodb.com/docs/atlas/reference/user-roles/).
     */
    roles?: string[];
}

export interface Get509AuthenticationDatabaseUserCertificate {
    createdAt: string;
    groupId: string;
    id: number;
    notAfter: string;
    subject: string;
}

export interface GetAdvancedClusterAdvancedConfiguration {
    /**
     * [Default level of acknowledgment requested from MongoDB for read operations](https://docs.mongodb.com/manual/reference/read-concern/) set for this cluster. MongoDB 4.4 clusters default to [available](https://docs.mongodb.com/manual/reference/read-concern-available/).
     */
    defaultReadConcern: string;
    /**
     * [Default level of acknowledgment requested from MongoDB for write operations](https://docs.mongodb.com/manual/reference/write-concern/) set for this cluster. MongoDB 4.4 clusters default to [1](https://docs.mongodb.com/manual/reference/write-concern/).
     */
    defaultWriteConcern: string;
    /**
     * When true, documents can only be updated or inserted if, for all indexed fields on the target collection, the corresponding index entries do not exceed 1024 bytes. When false, mongod writes documents that exceed the limit but does not index them.
     */
    failIndexKeyTooLong: boolean;
    /**
     * When true, the cluster allows execution of operations that perform server-side executions of JavaScript. When false, the cluster disables execution of those operations.
     */
    javascriptEnabled: boolean;
    /**
     * Sets the minimum Transport Layer Security (TLS) version the cluster accepts for incoming connections.Valid values are:
     */
    minimumEnabledTlsProtocol: string;
    /**
     * When true, the cluster disables the execution of any query that requires a collection scan to return results. When false, the cluster allows the execution of those operations.
     */
    noTableScan: boolean;
    /**
     * The custom oplog size of the cluster. Without a value that indicates that the cluster uses the default oplog size calculated by Atlas.
     */
    oplogSizeMb: number;
    /**
     * Interval in seconds at which the mongosqld process re-samples data to create its relational schema. The default value is 300. The specified value must be a positive integer. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleRefreshIntervalBiConnector: number;
    /**
     * Number of documents per database to sample when gathering schema information. Defaults to 100. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleSizeBiConnector: number;
}

export interface GetAdvancedClusterBiConnector {
    /**
     * Specifies whether or not BI Connector for Atlas is enabled on the cluster.l
     */
    enabled: boolean;
    /**
     * Specifies the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).
     */
    readPreference: string;
}

export interface GetAdvancedClusterConnectionString {
    /**
     * @deprecated This field is deprecated. Use connection_strings.private_endpoint[n].connection_string instead
     */
    awsPrivateLink: {[key: string]: any};
    /**
     * @deprecated This field is deprecated. Use connection_strings.private_endpoint[n].srv_connection_string instead
     */
    awsPrivateLinkSrv: {[key: string]: any};
    private: string;
    privateEndpoints: outputs.GetAdvancedClusterConnectionStringPrivateEndpoint[];
    privateSrv: string;
    standard: string;
    standardSrv: string;
}

export interface GetAdvancedClusterConnectionStringPrivateEndpoint {
    connectionString: string;
    endpoints: outputs.GetAdvancedClusterConnectionStringPrivateEndpointEndpoint[];
    srvConnectionString: string;
    type: string;
}

export interface GetAdvancedClusterConnectionStringPrivateEndpointEndpoint {
    endpointId: string;
    /**
     * Cloud service provider on which the servers are provisioned.
     */
    providerName: string;
    region: string;
}

export interface GetAdvancedClusterLabel {
    /**
     * The key that you want to write.
     */
    key: string;
    /**
     * The value that you want to write.
     */
    value: string;
}

export interface GetAdvancedClusterReplicationSpec {
    /**
     * A key-value map of the Network Peering Container ID(s) for the configuration specified in `regionConfigs`. The Container ID is the id of the container either created programmatically by the user before any clusters existed in a project or when the first cluster in the region (AWS/Azure) or project (GCP) was created.  The syntax is `"providerName:regionName" = "containerId"`. Example `AWS:US_EAST_1" = "61e0797dde08fb498ca11a71`.
     */
    containerId: {[key: string]: string};
    id: string;
    /**
     * Provide this value if you set a `clusterType` of SHARDED or GEOSHARDED.
     */
    numShards: number;
    /**
     * Configuration for the hardware specifications for nodes set for a given regionEach `regionConfigs` object describes the region's priority in elections and the number and type of MongoDB nodes that Atlas deploys to the region. Each `regionConfigs` object must have either an `analyticsSpecs` object, `electableSpecs` object, or `readOnlySpecs` object. See below
     */
    regionConfigs: outputs.GetAdvancedClusterReplicationSpecRegionConfig[];
    /**
     * Name for the zone in a Global Cluster.
     */
    zoneName: string;
}

export interface GetAdvancedClusterReplicationSpecRegionConfig {
    /**
     * Hardware specifications for [analytics nodes](https://docs.atlas.mongodb.com/reference/faq/deployment/#std-label-analytics-nodes-overview) needed in the region. See below
     */
    analyticsSpecs?: outputs.GetAdvancedClusterReplicationSpecRegionConfigAnalyticsSpecs;
    /**
     * Configuration for the Collection of settings that configures auto-scaling information for the cluster. See below
     */
    autoScalings: outputs.GetAdvancedClusterReplicationSpecRegionConfigAutoScaling[];
    /**
     * Cloud service provider on which you provision the host for a multi-tenant cluster.
     */
    backingProviderName: string;
    /**
     * Hardware specifications for electable nodes in the region.
     */
    electableSpecs?: outputs.GetAdvancedClusterReplicationSpecRegionConfigElectableSpecs;
    /**
     * Election priority of the region.
     */
    priority: number;
    /**
     * Cloud service provider on which the servers are provisioned.
     */
    providerName: string;
    /**
     * Hardware specifications for read-only nodes in the region. See below
     */
    readOnlySpecs?: outputs.GetAdvancedClusterReplicationSpecRegionConfigReadOnlySpecs;
    /**
     * Physical location of your MongoDB cluster.
     */
    regionName: string;
}

export interface GetAdvancedClusterReplicationSpecRegionConfigAnalyticsSpecs {
    /**
     * Target throughput (IOPS) desired for AWS storage attached to your cluster.
     */
    diskIops?: number;
    /**
     * Type of storage you want to attach to your AWS-provisioned cluster.
     */
    ebsVolumeType?: string;
    /**
     * Hardware specification for the instance sizes in this region.
     */
    instanceSize: string;
    /**
     * Number of read-only nodes for Atlas to deploy to the region.
     */
    nodeCount?: number;
}

export interface GetAdvancedClusterReplicationSpecRegionConfigAutoScaling {
    /**
     * Flag that indicates whether instance size auto-scaling is enabled.
     */
    computeEnabled: boolean;
    /**
     * Maximum instance size to which your cluster can automatically scale (such as M40).
     */
    computeMaxInstanceSize: string;
    /**
     * Minimum instance size to which your cluster can automatically scale (such as M10).
     */
    computeMinInstanceSize: string;
    /**
     * Flag that indicates whether the instance size may scale down.
     */
    computeScaleDownEnabled: boolean;
    /**
     * Flag that indicates whether this cluster enables disk auto-scaling.
     */
    diskGbEnabled: boolean;
}

export interface GetAdvancedClusterReplicationSpecRegionConfigElectableSpecs {
    /**
     * Target throughput (IOPS) desired for AWS storage attached to your cluster.
     */
    diskIops?: number;
    /**
     * Type of storage you want to attach to your AWS-provisioned cluster.
     */
    ebsVolumeType?: string;
    /**
     * Hardware specification for the instance sizes in this region.
     */
    instanceSize: string;
    /**
     * Number of read-only nodes for Atlas to deploy to the region.
     */
    nodeCount?: number;
}

export interface GetAdvancedClusterReplicationSpecRegionConfigReadOnlySpecs {
    /**
     * Target throughput (IOPS) desired for AWS storage attached to your cluster.
     */
    diskIops?: number;
    /**
     * Type of storage you want to attach to your AWS-provisioned cluster.
     */
    ebsVolumeType?: string;
    /**
     * Hardware specification for the instance sizes in this region.
     */
    instanceSize: string;
    /**
     * Number of read-only nodes for Atlas to deploy to the region.
     */
    nodeCount?: number;
}

export interface GetAdvancedClustersResult {
    /**
     * Get the advanced configuration options. See Advanced Configuration below for more details.
     */
    advancedConfigurations: outputs.GetAdvancedClustersResultAdvancedConfiguration[];
    backupEnabled: boolean;
    /**
     * Configuration settings applied to BI Connector for Atlas on this cluster. See below.
     */
    biConnectors: outputs.GetAdvancedClustersResultBiConnector[];
    /**
     * Type of the cluster that you want to create.
     */
    clusterType: string;
    /**
     * Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
     */
    connectionStrings: outputs.GetAdvancedClustersResultConnectionString[];
    createDate: string;
    /**
     * Capacity, in gigabytes, of the host's root volume.
     */
    diskSizeGb: number;
    /**
     * Possible values are AWS, GCP, AZURE or NONE.
     */
    encryptionAtRestProvider: string;
    /**
     * Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
     */
    labels: outputs.GetAdvancedClustersResultLabel[];
    /**
     * Version of the cluster to deploy.
     */
    mongoDbMajorVersion: string;
    /**
     * Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
     */
    mongoDbVersion: string;
    name: string;
    /**
     * Flag that indicates whether the cluster is paused or not.
     */
    paused: boolean;
    /**
     * Flag that indicates if the cluster uses Continuous Cloud Backup.
     */
    pitEnabled: boolean;
    /**
     * Configuration for cluster regions and the hardware provisioned in them. See below
     */
    replicationSpecs: outputs.GetAdvancedClustersResultReplicationSpec[];
    /**
     * Certificate Authority that MongoDB Atlas clusters use.
     */
    rootCertType: string;
    /**
     * Current state of the cluster. The possible states are:
     */
    stateName: string;
    /**
     * Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
     */
    terminationProtectionEnabled: boolean;
    /**
     * Release cadence that Atlas uses for this cluster.
     */
    versionReleaseSystem: string;
}

export interface GetAdvancedClustersResultAdvancedConfiguration {
    /**
     * [Default level of acknowledgment requested from MongoDB for read operations](https://docs.mongodb.com/manual/reference/read-concern/) set for this cluster. MongoDB 4.4 clusters default to [available](https://docs.mongodb.com/manual/reference/read-concern-available/).
     */
    defaultReadConcern: string;
    /**
     * [Default level of acknowledgment requested from MongoDB for write operations](https://docs.mongodb.com/manual/reference/write-concern/) set for this cluster. MongoDB 4.4 clusters default to [1](https://docs.mongodb.com/manual/reference/write-concern/).
     */
    defaultWriteConcern: string;
    /**
     * When true, documents can only be updated or inserted if, for all indexed fields on the target collection, the corresponding index entries do not exceed 1024 bytes. When false, mongod writes documents that exceed the limit but does not index them.
     */
    failIndexKeyTooLong: boolean;
    /**
     * When true, the cluster allows execution of operations that perform server-side executions of JavaScript. When false, the cluster disables execution of those operations.
     */
    javascriptEnabled: boolean;
    /**
     * Sets the minimum Transport Layer Security (TLS) version the cluster accepts for incoming connections.Valid values are:
     */
    minimumEnabledTlsProtocol: string;
    /**
     * When true, the cluster disables the execution of any query that requires a collection scan to return results. When false, the cluster allows the execution of those operations.
     */
    noTableScan: boolean;
    /**
     * The custom oplog size of the cluster. Without a value that indicates that the cluster uses the default oplog size calculated by Atlas.
     */
    oplogSizeMb: number;
    /**
     * Interval in seconds at which the mongosqld process re-samples data to create its relational schema. The default value is 300. The specified value must be a positive integer. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleRefreshIntervalBiConnector: number;
    /**
     * Number of documents per database to sample when gathering schema information. Defaults to 100. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleSizeBiConnector: number;
}

export interface GetAdvancedClustersResultBiConnector {
    /**
     * Specifies whether or not BI Connector for Atlas is enabled on the cluster.l
     */
    enabled: boolean;
    /**
     * Specifies the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).
     */
    readPreference: string;
}

export interface GetAdvancedClustersResultConnectionString {
    /**
     * @deprecated This field is deprecated. Use connection_strings.private_endpoint[n].connection_string instead
     */
    awsPrivateLink: {[key: string]: any};
    /**
     * @deprecated This field is deprecated. Use connection_strings.private_endpoint[n].srv_connection_string instead
     */
    awsPrivateLinkSrv: {[key: string]: any};
    private: string;
    privateEndpoints: outputs.GetAdvancedClustersResultConnectionStringPrivateEndpoint[];
    privateSrv: string;
    standard: string;
    standardSrv: string;
}

export interface GetAdvancedClustersResultConnectionStringPrivateEndpoint {
    connectionString: string;
    endpoints: outputs.GetAdvancedClustersResultConnectionStringPrivateEndpointEndpoint[];
    srvConnectionString: string;
    type: string;
}

export interface GetAdvancedClustersResultConnectionStringPrivateEndpointEndpoint {
    endpointId: string;
    /**
     * Cloud service provider on which the servers are provisioned.
     */
    providerName: string;
    region: string;
}

export interface GetAdvancedClustersResultLabel {
    /**
     * The key that you want to write.
     */
    key: string;
    /**
     * The value that you want to write.
     */
    value: string;
}

export interface GetAdvancedClustersResultReplicationSpec {
    /**
     * A key-value map of the Network Peering Container ID(s) for the configuration specified in `regionConfigs`. The Container ID is the id of the container either created programmatically by the user before any clusters existed in a project or when the first cluster in the region (AWS/Azure) or project (GCP) was created.  The syntax is `"providerName:regionName" = "containerId"`. Example `AWS:US_EAST_1" = "61e0797dde08fb498ca11a71`.
     */
    containerId: {[key: string]: string};
    id: string;
    /**
     * Provide this value if you set a `clusterType` of SHARDED or GEOSHARDED.
     */
    numShards: number;
    /**
     * Configuration for the hardware specifications for nodes set for a given regionEach `regionConfigs` object describes the region's priority in elections and the number and type of MongoDB nodes that Atlas deploys to the region. Each `regionConfigs` object must have either an `analyticsSpecs` object, `electableSpecs` object, or `readOnlySpecs` object. See below
     */
    regionConfigs: outputs.GetAdvancedClustersResultReplicationSpecRegionConfig[];
    /**
     * Name for the zone in a Global Cluster.
     */
    zoneName: string;
}

export interface GetAdvancedClustersResultReplicationSpecRegionConfig {
    /**
     * Hardware specifications for [analytics nodes](https://docs.atlas.mongodb.com/reference/faq/deployment/#std-label-analytics-nodes-overview) needed in the region. See below
     */
    analyticsSpecs?: outputs.GetAdvancedClustersResultReplicationSpecRegionConfigAnalyticsSpecs;
    /**
     * Configuration for the Collection of settings that configures auto-scaling information for the cluster. See below
     */
    autoScalings: outputs.GetAdvancedClustersResultReplicationSpecRegionConfigAutoScaling[];
    /**
     * Cloud service provider on which you provision the host for a multi-tenant cluster.
     */
    backingProviderName: string;
    /**
     * Hardware specifications for electable nodes in the region.
     */
    electableSpecs?: outputs.GetAdvancedClustersResultReplicationSpecRegionConfigElectableSpecs;
    /**
     * Election priority of the region.
     */
    priority: number;
    /**
     * Cloud service provider on which the servers are provisioned.
     */
    providerName: string;
    /**
     * Hardware specifications for read-only nodes in the region. See below
     */
    readOnlySpecs?: outputs.GetAdvancedClustersResultReplicationSpecRegionConfigReadOnlySpecs;
    /**
     * Physical location of your MongoDB cluster.
     */
    regionName: string;
}

export interface GetAdvancedClustersResultReplicationSpecRegionConfigAnalyticsSpecs {
    /**
     * Target throughput (IOPS) desired for AWS storage attached to your cluster.
     */
    diskIops?: number;
    /**
     * Type of storage you want to attach to your AWS-provisioned cluster.
     */
    ebsVolumeType?: string;
    /**
     * Hardware specification for the instance sizes in this region.
     */
    instanceSize: string;
    /**
     * Number of read-only nodes for Atlas to deploy to the region.
     */
    nodeCount?: number;
}

export interface GetAdvancedClustersResultReplicationSpecRegionConfigAutoScaling {
    /**
     * Flag that indicates whether instance size auto-scaling is enabled.
     */
    computeEnabled: boolean;
    /**
     * Maximum instance size to which your cluster can automatically scale (such as M40).
     */
    computeMaxInstanceSize: string;
    /**
     * Minimum instance size to which your cluster can automatically scale (such as M10).
     */
    computeMinInstanceSize: string;
    /**
     * Flag that indicates whether the instance size may scale down.
     */
    computeScaleDownEnabled: boolean;
    /**
     * Flag that indicates whether this cluster enables disk auto-scaling.
     */
    diskGbEnabled: boolean;
}

export interface GetAdvancedClustersResultReplicationSpecRegionConfigElectableSpecs {
    /**
     * Target throughput (IOPS) desired for AWS storage attached to your cluster.
     */
    diskIops?: number;
    /**
     * Type of storage you want to attach to your AWS-provisioned cluster.
     */
    ebsVolumeType?: string;
    /**
     * Hardware specification for the instance sizes in this region.
     */
    instanceSize: string;
    /**
     * Number of read-only nodes for Atlas to deploy to the region.
     */
    nodeCount?: number;
}

export interface GetAdvancedClustersResultReplicationSpecRegionConfigReadOnlySpecs {
    /**
     * Target throughput (IOPS) desired for AWS storage attached to your cluster.
     */
    diskIops?: number;
    /**
     * Type of storage you want to attach to your AWS-provisioned cluster.
     */
    ebsVolumeType?: string;
    /**
     * Hardware specification for the instance sizes in this region.
     */
    instanceSize: string;
    /**
     * Number of read-only nodes for Atlas to deploy to the region.
     */
    nodeCount?: number;
}

export interface GetAlertConfigurationMatcher {
    /**
     * Name of the field in the target object to match on.
     */
    fieldName: string;
    /**
     * Operator to apply when checking the current metric value against the threshold value.
     * Accepted values are:
     */
    operator: string;
    /**
     * Value to test with the specified operator. If `fieldName` is set to TYPE_NAME, you can match on the following values:
     */
    value: string;
}

export interface GetAlertConfigurationMetricThresholdConfig {
    /**
     * Name of the metric to check. The full list being quite large, please refer to atlas docs [here for general metrics](https://docs.atlas.mongodb.com/reference/alert-host-metrics/#measurement-types) and [here for serverless metrics](https://www.mongodb.com/docs/atlas/reference/api/alert-configurations-create-config/#serverless-measurements)
     */
    metricName: string;
    /**
     * This must be set to AVERAGE. Atlas computes the current metric value as an average.
     */
    mode: string;
    /**
     * Operator to apply when checking the current metric value against the threshold value.
     * Accepted values are:
     */
    operator: string;
    /**
     * Threshold value outside of which an alert will be triggered.
     */
    threshold: number;
    /**
     * The units for the threshold value. Depends on the type of metric.
     * Refer to the [MongoDB API Alert Configuration documentation](https://www.mongodb.com/docs/atlas/reference/api/alert-configurations-get-config/#request-body-parameters) for a list of accepted values.
     */
    units: string;
}

export interface GetAlertConfigurationNotification {
    /**
     * Slack API token. Required for the SLACK notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     */
    apiToken: string;
    /**
     * Slack channel name. Required for the SLACK notifications type.
     */
    channelName: string;
    /**
     * Datadog API Key. Found in the Datadog dashboard. Required for the DATADOG notifications type.
     */
    datadogApiKey: string;
    /**
     * Region that indicates which API URL to use. Accepted regions are: `US`, `EU`. The default Datadog region is US.
     */
    datadogRegion: string;
    /**
     * Number of minutes to wait after an alert condition is detected before sending out the first notification.
     */
    delayMin: number;
    /**
     * Email address to which alert notifications are sent. Required for the EMAIL notifications type.
     */
    emailAddress: string;
    /**
     * Flag indicating email notifications should be sent. Atlas returns this value if `typeName` is set  to `ORG`, `GROUP`, or `USER`.
     */
    emailEnabled: boolean;
    /**
     * Flowdock flow name in lower-case letters. Required for the `FLOWDOCK` notifications type
     */
    flowName: string;
    /**
     * The Flowdock personal API token. Required for the `FLOWDOCK` notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     */
    flowdockApiToken: string;
    /**
     * Number of minutes to wait between successive notifications for unacknowledged alerts that are not resolved. The minimum value is 5.
     */
    intervalMin: number;
    /**
     * Microsoft Teams channel incoming webhook URL. Required for the `MICROSOFT_TEAMS` notifications type.
     */
    microsoftTeamsWebhookUrl?: string;
    /**
     * Mobile number to which alert notifications are sent. Required for the SMS notifications type.
     */
    mobileNumber: string;
    /**
     * Opsgenie API Key. Required for the `OPS_GENIE` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     */
    opsGenieApiKey: string;
    /**
     * Region that indicates which API URL to use. Accepted regions are: `US` ,`EU`. The default Opsgenie region is US.
     */
    opsGenieRegion: string;
    /**
     * Flowdock organization name in lower-case letters. This is the name that appears after www.flowdock.com/app/ in the URL string. Required for the FLOWDOCK notifications type.
     */
    orgName: string;
    /**
     * Atlas role in current Project or Organization. Atlas returns this value if you set `typeName` to `ORG` or `GROUP`.
     */
    roles?: string[];
    /**
     * PagerDuty service key. Required for the PAGER_DUTY notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     */
    serviceKey: string;
    /**
     * Flag indicating text notifications should be sent. Atlas returns this value if `typeName` is set to `ORG`, `GROUP`, or `USER`.
     */
    smsEnabled: boolean;
    /**
     * Unique identifier of a team.
     */
    teamId: string;
    /**
     * Label for the team that receives this notification.
     */
    teamName: string;
    /**
     * Type of alert notification.
     * Accepted values are:
     */
    typeName: string;
    /**
     * Name of the Atlas user to which to send notifications. Only a user in the project that owns the alert configuration is allowed here. Required for the `USER` notifications type.
     */
    username: string;
    /**
     * VictorOps API key. Required for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     */
    victorOpsApiKey: string;
    /**
     * VictorOps routing key. Optional for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     */
    victorOpsRoutingKey: string;
    /**
     * Authentication secret for the `WEBHOOK` notifications type.
     */
    webhookSecret?: string;
    /**
     * Target URL  for the `WEBHOOK` notifications type.
     */
    webhookUrl?: string;
}

export interface GetAlertConfigurationThresholdConfig {
    /**
     * Operator to apply when checking the current metric value against the threshold value.
     * Accepted values are:
     */
    operator: string;
    /**
     * Threshold value outside of which an alert will be triggered.
     */
    threshold: number;
    /**
     * The units for the threshold value. Depends on the type of metric.
     * Refer to the [MongoDB API Alert Configuration documentation](https://www.mongodb.com/docs/atlas/reference/api/alert-configurations-get-config/#request-body-parameters) for a list of accepted values.
     */
    units: string;
}

export interface GetCloudBackupScheduleExport {
    /**
     * Unique identifier of the mongodbatlas.CloudBackupSnapshotExportBucket export_bucket_id value.
     */
    exportBucketId: string;
    /**
     * Frequency associated with the backup policy item.
     */
    frequencyType: string;
}

export interface GetCloudBackupSchedulePolicyItemDaily {
    /**
     * Desired frequency of the new backup policy item specified by `frequencyType`.
     */
    frequencyInterval: number;
    /**
     * Frequency associated with the backup policy item.
     */
    frequencyType: string;
    /**
     * Unique identifier of the backup policy item.
     */
    id: string;
    /**
     * Scope of the backup policy item: days, weeks, or months.
     */
    retentionUnit: string;
    /**
     * Value to associate with `retentionUnit`.
     */
    retentionValue: number;
}

export interface GetCloudBackupSchedulePolicyItemHourly {
    /**
     * Desired frequency of the new backup policy item specified by `frequencyType`.
     */
    frequencyInterval: number;
    /**
     * Frequency associated with the backup policy item.
     */
    frequencyType: string;
    /**
     * Unique identifier of the backup policy item.
     */
    id: string;
    /**
     * Scope of the backup policy item: days, weeks, or months.
     */
    retentionUnit: string;
    /**
     * Value to associate with `retentionUnit`.
     */
    retentionValue: number;
}

export interface GetCloudBackupSchedulePolicyItemMonthly {
    /**
     * Desired frequency of the new backup policy item specified by `frequencyType`.
     */
    frequencyInterval: number;
    /**
     * Frequency associated with the backup policy item.
     */
    frequencyType: string;
    /**
     * Unique identifier of the backup policy item.
     */
    id: string;
    /**
     * Scope of the backup policy item: days, weeks, or months.
     */
    retentionUnit: string;
    /**
     * Value to associate with `retentionUnit`.
     */
    retentionValue: number;
}

export interface GetCloudBackupSchedulePolicyItemWeekly {
    /**
     * Desired frequency of the new backup policy item specified by `frequencyType`.
     */
    frequencyInterval: number;
    /**
     * Frequency associated with the backup policy item.
     */
    frequencyType: string;
    /**
     * Unique identifier of the backup policy item.
     */
    id: string;
    /**
     * Scope of the backup policy item: days, weeks, or months.
     */
    retentionUnit: string;
    /**
     * Value to associate with `retentionUnit`.
     */
    retentionValue: number;
}

export interface GetCloudBackupSnapshotExportBucketsResult {
    /**
     * Name of the bucket that the provided role ID is authorized to access. You must also specify the `iamRoleId`.
     */
    bucketName: string;
    /**
     * Name of the provider of the cloud service where Atlas can access the S3 bucket. Atlas only supports `AWS`.
     */
    cloudProvider: string;
    /**
     * Unique identifier of the snapshot bucket id.
     */
    exportBucketId: string;
    /**
     * Unique identifier of the role that Atlas can use to access the bucket. You must also specify the `bucketName`.
     */
    iamRoleId: string;
}

export interface GetCloudBackupSnapshotExportJobComponent {
    /**
     * _Returned for sharded clusters only._ Export job details for each replica set in the sharded cluster.
     */
    exportId: string;
    /**
     * _Returned for sharded clusters only._ Unique identifier of the export job for the replica set.
     */
    replicaSetName: string;
}

export interface GetCloudBackupSnapshotExportJobCustomData {
    /**
     * Custom data specified as key in the key and value pair.
     */
    key: string;
    /**
     * Value for the key specified using `key`.
     */
    value: string;
}

export interface GetCloudBackupSnapshotExportJobsResult {
    /**
     * _Returned for sharded clusters only._ Export job details for each replica set in the sharded cluster.
     */
    components: outputs.GetCloudBackupSnapshotExportJobsResultComponent[];
    /**
     * Timestamp in ISO 8601 date and time format in UTC when the export job was created.
     */
    createdAt: string;
    /**
     * Custom data to include in the metadata file named `.complete` that Atlas uploads to the bucket when the export job finishes. Custom data can be specified as key and value pairs.
     */
    customDatas: outputs.GetCloudBackupSnapshotExportJobsResultCustomData[];
    /**
     * Error message, only if the export job failed.
     */
    errMsg: string;
    /**
     * Unique identifier of the AWS bucket to export the Cloud Backup snapshot to.
     */
    exportBucketId: string;
    /**
     * Unique identifier of the export job.
     * * `prefix ` - Full path on the cloud provider bucket to the folder where the snapshot is exported. The path is in the following format:`/exported_snapshots/{ORG-NAME}/{PROJECT-NAME}/{CLUSTER-NAME}/{SNAPSHOT-INITIATION-DATE}/{TIMESTAMP}`
     */
    exportJobId: string;
    exportStatusExportedCollections: number;
    exportStatusTotalCollections: number;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when the export job completes.
     */
    finishedAt: string;
    prefix: string;
    /**
     * Unique identifier of the Cloud Backup snapshot to export.
     */
    snapshotId: string;
    /**
     * Status of the export job. Value can be one of the following:
     */
    state: string;
}

export interface GetCloudBackupSnapshotExportJobsResultComponent {
    /**
     * _Returned for sharded clusters only._ Export job details for each replica set in the sharded cluster.
     */
    exportId: string;
    /**
     * _Returned for sharded clusters only._ Unique identifier of the export job for the replica set.
     */
    replicaSetName: string;
}

export interface GetCloudBackupSnapshotExportJobsResultCustomData {
    /**
     * Custom data specified as key in the key and value pair.
     */
    key: string;
    /**
     * Value for the key specified using `key`.
     */
    value: string;
}

export interface GetCloudBackupSnapshotMember {
    /**
     * Cloud provider that stores this snapshot.
     */
    cloudProvider: string;
    /**
     * Unique identifier for the sharded cluster snapshot.
     */
    id: string;
    /**
     * Label given to a shard or config server from which Atlas took this snapshot.
     */
    replicaSetName: string;
}

export interface GetCloudBackupSnapshotRestoreJobsResult {
    /**
     * Indicates whether the restore job was canceled.
     */
    cancelled: boolean;
    /**
     * UTC ISO 8601 formatted point in time when Atlas created the restore job.
     */
    createdAt: string;
    /**
     * Type of restore job to create. Possible values are: automated and download.
     */
    deliveryType: string;
    /**
     * One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.
     */
    deliveryUrls: string[];
    /**
     * Indicates whether the restore job expired.
     */
    expired: boolean;
    /**
     * UTC ISO 8601 formatted point in time when the restore job expires.
     */
    expiresAt: string;
    /**
     * UTC ISO 8601 formatted point in time when the restore job completed.
     */
    finishedAt: string;
    /**
     * The unique identifier of the restore job.
     */
    id: string;
    oplogInc: number;
    oplogTs: number;
    pointInTimeUtcSeconds: number;
    /**
     * Unique identifier of the source snapshot ID of the restore job.
     */
    snapshotId: string;
    /**
     * Name of the target Atlas cluster to which the restore job restores the snapshot. Only visible if deliveryType is automated.
     */
    targetClusterName: string;
    /**
     * Name of the target Atlas project of the restore job. Only visible if deliveryType is automated.
     */
    targetProjectId: string;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.
     */
    timestamp: string;
}

export interface GetCloudBackupSnapshotsResult {
    /**
     * Cloud provider that stores this snapshot.
     */
    cloudProvider: string;
    /**
     * UTC ISO 8601 formatted point in time when Atlas took the snapshot.
     */
    createdAt: string;
    /**
     * UDescription of the snapshot. Only present for on-demand snapshots.
     */
    description: string;
    /**
     * UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
     */
    expiresAt: string;
    /**
     * Unique identifier for the sharded cluster snapshot.
     */
    id: string;
    /**
     * Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
     */
    masterKeyUuid: string;
    /**
     * Block of List of snapshots and the cloud provider where the snapshots are stored. See below
     */
    members: outputs.GetCloudBackupSnapshotsResultMember[];
    /**
     * Version of the MongoDB server.
     */
    mongodVersion: string;
    /**
     * Label given to a shard or config server from which Atlas took this snapshot.
     */
    replicaSetName: string;
    /**
     * Unique identifiers of the snapshots created for the shards and config server for a sharded cluster.
     */
    snapshotIds: string[];
    /**
     * Specified the type of snapshot. Valid values are onDemand and scheduled.
     */
    snapshotType: string;
    /**
     * Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.
     */
    status: string;
    /**
     * Specifies the size of the snapshot in bytes.
     */
    storageSizeBytes: number;
    /**
     * Specifies the type of cluster: replicaSet or shardedCluster.
     */
    type: string;
}

export interface GetCloudBackupSnapshotsResultMember {
    /**
     * Cloud provider that stores this snapshot.
     */
    cloudProvider: string;
    /**
     * Unique identifier for the sharded cluster snapshot.
     */
    id: string;
    /**
     * Label given to a shard or config server from which Atlas took this snapshot.
     */
    replicaSetName: string;
}

export interface GetCloudProviderAccessAwsIamRole {
    /**
     * Unique external ID Atlas uses when assuming the IAM role in your AWS account.
     */
    atlasAssumedRoleExternalId: string;
    /**
     * ARN associated with the Atlas AWS account used to assume IAM roles in your AWS account.
     */
    atlasAwsAccountArn: string;
    /**
     * Date on which this role was authorized.
     */
    authorizedDate: string;
    /**
     * Date on which this role was created.
     */
    createdDate: string;
    /**
     * Atlas features this AWS IAM role is linked to.
     */
    featureUsages: outputs.GetCloudProviderAccessAwsIamRoleFeatureUsage[];
    /**
     * ARN of the IAM Role that Atlas assumes when accessing resources in your AWS account.
     */
    iamAssumedRoleArn: string;
    /**
     * Name of the cloud provider. Currently limited to AWS.
     */
    providerName: string;
    /**
     * Unique ID of this role.
     */
    roleId: string;
}

export interface GetCloudProviderAccessAwsIamRoleFeatureUsage {
    featureId: {[key: string]: any};
    featureType: string;
}

export interface GetCloudProviderAccessSetupAwsConfig {
    /**
     * Unique external ID Atlas uses when assuming the IAM role in your AWS account.
     */
    atlasAssumedRoleExternalId: string;
    /**
     * ARN associated with the Atlas AWS account used to assume IAM roles in your AWS account.
     */
    atlasAwsAccountArn: string;
}

export interface GetCloudProviderSnapshotBackupPolicyPolicy {
    id: string;
    policyItems: outputs.GetCloudProviderSnapshotBackupPolicyPolicyPolicyItem[];
}

export interface GetCloudProviderSnapshotBackupPolicyPolicyPolicyItem {
    frequencyInterval: number;
    frequencyType: string;
    id: string;
    retentionUnit: string;
    retentionValue: number;
}

export interface GetCloudProviderSnapshotRestoreJobsResult {
    /**
     * Indicates whether the restore job was canceled.
     */
    cancelled: boolean;
    /**
     * UTC ISO 8601 formatted point in time when Atlas created the restore job.
     */
    createdAt: string;
    /**
     * Type of restore job to create. Possible values are: automated and download.
     */
    deliveryType: string;
    /**
     * One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.
     */
    deliveryUrls: string[];
    /**
     * Indicates whether the restore job expired.
     */
    expired: boolean;
    /**
     * UTC ISO 8601 formatted point in time when the restore job expires.
     */
    expiresAt: string;
    /**
     * UTC ISO 8601 formatted point in time when the restore job completed.
     */
    finishedAt: string;
    /**
     * The unique identifier of the restore job.
     */
    id: string;
    oplogInc: number;
    oplogTs: number;
    pointInTimeUtcSeconds: number;
    /**
     * Unique identifier of the source snapshot ID of the restore job.
     */
    snapshotId: string;
    /**
     * Name of the target Atlas cluster to which the restore job restores the snapshot. Only visible if deliveryType is automated.
     */
    targetClusterName: string;
    /**
     * Name of the target Atlas project of the restore job. Only visible if deliveryType is automated.
     */
    targetProjectId: string;
    /**
     * Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.
     */
    timestamp: string;
}

export interface GetCloudProviderSnapshotsResult {
    /**
     * UTC ISO 8601 formatted point in time when Atlas took the snapshot.
     */
    createdAt: string;
    /**
     * UDescription of the snapshot. Only present for on-demand snapshots.
     */
    description: string;
    /**
     * UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
     */
    expiresAt: string;
    /**
     * Unique identifier of the snapshot.
     */
    id: string;
    /**
     * Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
     */
    masterKeyUuid: string;
    /**
     * Version of the MongoDB server.
     */
    mongodVersion: string;
    /**
     * Specified the type of snapshot. Valid values are onDemand and scheduled.
     */
    snapshotType: string;
    /**
     * Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.
     */
    status: string;
    /**
     * Specifies the size of the snapshot in bytes.
     */
    storageSizeBytes: number;
    /**
     * Specifies the type of cluster: replicaSet or shardedCluster.
     */
    type: string;
}

export interface GetClusterAdvancedConfiguration {
    /**
     * [Default level of acknowledgment requested from MongoDB for read operations](https://docs.mongodb.com/manual/reference/read-concern/) set for this cluster. MongoDB 4.4 clusters default to [available](https://docs.mongodb.com/manual/reference/read-concern-available/).
     */
    defaultReadConcern: string;
    /**
     * [Default level of acknowledgment requested from MongoDB for write operations](https://docs.mongodb.com/manual/reference/write-concern/) set for this cluster. MongoDB 4.4 clusters default to [1](https://docs.mongodb.com/manual/reference/write-concern/).
     */
    defaultWriteConcern: string;
    /**
     * When true, documents can only be updated or inserted if, for all indexed fields on the target collection, the corresponding index entries do not exceed 1024 bytes. When false, mongod writes documents that exceed the limit but does not index them.
     */
    failIndexKeyTooLong: boolean;
    /**
     * When true, the cluster allows execution of operations that perform server-side executions of JavaScript. When false, the cluster disables execution of those operations.
     */
    javascriptEnabled: boolean;
    /**
     * Sets the minimum Transport Layer Security (TLS) version the cluster accepts for incoming connections.Valid values are:
     */
    minimumEnabledTlsProtocol: string;
    /**
     * When true, the cluster disables the execution of any query that requires a collection scan to return results. When false, the cluster allows the execution of those operations.
     */
    noTableScan: boolean;
    /**
     * The custom oplog size of the cluster. Without a value that indicates that the cluster uses the default oplog size calculated by Atlas.
     */
    oplogSizeMb: number;
    /**
     * Interval in seconds at which the mongosqld process re-samples data to create its relational schema. The default value is 300. The specified value must be a positive integer. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleRefreshIntervalBiConnector: number;
    /**
     * Number of documents per database to sample when gathering schema information. Defaults to 100. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleSizeBiConnector: number;
}

export interface GetClusterBiConnectorConfig {
    /**
     * Indicates whether or not BI Connector for Atlas is enabled on the cluster.
     */
    enabled: boolean;
    /**
     * Indicates the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).
     */
    readPreference: string;
}

export interface GetClusterConnectionString {
    awsPrivateLink: {[key: string]: any};
    awsPrivateLinkSrv: {[key: string]: any};
    private: string;
    privateEndpoints: outputs.GetClusterConnectionStringPrivateEndpoint[];
    privateSrv: string;
    standard: string;
    standardSrv: string;
}

export interface GetClusterConnectionStringPrivateEndpoint {
    connectionString: string;
    endpoints: outputs.GetClusterConnectionStringPrivateEndpointEndpoint[];
    srvConnectionString: string;
    type: string;
}

export interface GetClusterConnectionStringPrivateEndpointEndpoint {
    endpointId: string;
    /**
     * Indicates the cloud service provider on which the servers are provisioned.
     */
    providerName: string;
    region: string;
}

export interface GetClusterLabel {
    /**
     * The key that was set.
     */
    key: string;
    /**
     * The value that represents the key.
     */
    value: string;
}

export interface GetClusterReplicationSpec {
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    /**
     * Number of shards to deploy in the specified zone.
     */
    numShards: number;
    /**
     * Describes the physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.
     */
    regionsConfigs: outputs.GetClusterReplicationSpecRegionsConfig[];
    /**
     * Indicates the n ame for the zone in a Global Cluster.
     */
    zoneName: string;
}

export interface GetClusterReplicationSpecRegionsConfig {
    /**
     * Indicates the number of analytics nodes for Atlas to deploy to the region. Analytics nodes are useful for handling analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only, and can never become the primary.
     */
    analyticsNodes: number;
    /**
     * Number of electable nodes for Atlas to deploy to the region.
     */
    electableNodes: number;
    /**
     * Election priority of the region. For regions with only read-only nodes, set this value to 0.
     */
    priority: number;
    /**
     * Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.
     */
    readOnlyNodes: number;
    /**
     * Name for the region specified.
     */
    regionName: string;
}

export interface GetClusterSnapshotBackupPolicy {
    clusterId: string;
    clusterName: string;
    nextSnapshot: string;
    policies: outputs.GetClusterSnapshotBackupPolicyPolicy[];
    referenceHourOfDay: number;
    referenceMinuteOfHour: number;
    restoreWindowDays: number;
    updateSnapshots: boolean;
}

export interface GetClusterSnapshotBackupPolicyPolicy {
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    policyItems: outputs.GetClusterSnapshotBackupPolicyPolicyPolicyItem[];
}

export interface GetClusterSnapshotBackupPolicyPolicyPolicyItem {
    frequencyInterval: number;
    frequencyType: string;
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    retentionUnit: string;
    retentionValue: number;
}

export interface GetClustersResult {
    /**
     * Get the advanced configuration options. See Advanced Configuration below for more details.
     */
    advancedConfigurations: outputs.GetClustersResultAdvancedConfiguration[];
    /**
     * Specifies whether cluster tier auto-scaling is enabled. The default is false.
     */
    autoScalingComputeEnabled: boolean;
    /**
     * * `autoScalingComputeScaleDownEnabled` - Specifies whether cluster tier auto-down-scaling is enabled.
     */
    autoScalingComputeScaleDownEnabled: boolean;
    /**
     * Indicates whether disk auto-scaling is enabled.
     */
    autoScalingDiskGbEnabled: boolean;
    /**
     * Indicates Cloud service provider on which the server for a multi-tenant cluster is provisioned.
     */
    backingProviderName: string;
    /**
     * Legacy Option, Indicates whether Atlas continuous backups are enabled for the cluster.
     */
    backupEnabled: boolean;
    /**
     * Indicates BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details. **DEPRECATED** Use `biConnectorConfig` instead.
     *
     * @deprecated use bi_connector_config instead
     */
    biConnector: {[key: string]: string};
    /**
     * Indicates BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
     */
    biConnectorConfigs: outputs.GetClustersResultBiConnectorConfig[];
    /**
     * Indicates the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
     */
    clusterType: string;
    /**
     * Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
     * - `connection_strings.standard` -   Public mongodb:// connection string for this cluster.
     * - `connection_strings.standard_srv` - Public mongodb+srv:// connection string for this cluster. The mongodb+srv protocol tells the driver to look up the seed list of hosts in DNS. Atlas synchronizes this list with the nodes in a cluster. If the connection string uses this URI format, you don’t need to append the seed list or change the URI if the nodes change. Use this URI format if your driver supports it. If it doesn’t, use connectionStrings.standard.
     * - `connection_strings.aws_private_link` -  [Private-endpoint-aware](https://docs.atlas.mongodb.com/security-private-endpoint/#private-endpoint-connection-strings) mongodb://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a AWS PrivateLink connection to this cluster. **DEPRECATED** Use `connection_strings.private_endpoint[n].connection_string` instead.
     * - `connection_strings.aws_private_link_srv` - [Private-endpoint-aware](https://docs.atlas.mongodb.com/security-private-endpoint/#private-endpoint-connection-strings) mongodb+srv://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a AWS PrivateLink connection to this cluster. Use this URI format if your driver supports it. If it doesn’t, use connectionStrings.awsPrivateLink. **DEPRECATED** `connection_strings.private_endpoint[n].srv_connection_string` instead.
     * - `connection_strings.private` -   [Network-peering-endpoint-aware](https://docs.atlas.mongodb.com/security-vpc-peering/#vpc-peering) mongodb://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a network peering connection to this cluster.
     * - `connection_strings.private_srv` -  [Network-peering-endpoint-aware](https://docs.atlas.mongodb.com/security-vpc-peering/#vpc-peering) mongodb+srv://connection strings for each interface VPC endpoint you configured to connect to this cluster. Returned only if you created a network peering connection to this cluster.
     * - `connection_strings.private_endpoint.#.connection_string` - Private-endpoint-aware `mongodb://`connection string for this private endpoint.
     * - `connection_strings.private_endpoint.#.srv_connection_string` - Private-endpoint-aware `mongodb+srv://` connection string for this private endpoint.
     * - `connection_strings.private_endpoint.#.type` - Type of MongoDB process that you connect to with the connection strings. Atlas returns `MONGOD` for replica sets, or `MONGOS` for sharded clusters.
     * - `connection_strings.private_endpoint.#.endpoints` - Private endpoint through which you connect to Atlas when you use `connection_strings.private_endpoint[n].connection_string` or `connection_strings.private_endpoint[n].srv_connection_string`
     * - `connection_strings.private_endoint.#.endpoints.#.endpoint_id` - Unique identifier of the private endpoint.
     * - `connection_strings.private_endpoint.#.endpoints.#.provider_name` - Cloud provider to which you deployed the private endpoint. Atlas returns `AWS` or `AZURE`.
     * - `connection_strings.private_endpoint.#.endpoints.#.region` - Region to which you deployed the private endpoint.
     */
    connectionStrings: outputs.GetClustersResultConnectionString[];
    /**
     * The Network Peering Container ID.
     */
    containerId: string;
    /**
     * Indicates the size in gigabytes of the server’s root volume (AWS/GCP Only).
     */
    diskSizeGb: number;
    /**
     * Indicates whether Encryption at Rest is enabled or disabled.
     */
    encryptionAtRestProvider: string;
    labels: outputs.GetClustersResultLabel[];
    /**
     * Indicates the version of the cluster to deploy.
     */
    mongoDbMajorVersion: string;
    /**
     * Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
     */
    mongoDbVersion: string;
    /**
     * Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.
     */
    mongoUri: string;
    /**
     * Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.
     */
    mongoUriUpdated: string;
    /**
     * Describes connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.
     */
    mongoUriWithOptions: string;
    /**
     * The name of the current plugin
     */
    name: string;
    /**
     * Number of shards to deploy in the specified zone.
     */
    numShards: number;
    /**
     * Flag that indicates whether the cluster is paused or not.
     */
    paused: boolean;
    /**
     * Flag that indicates if the cluster uses Continuous Cloud Backup.
     */
    pitEnabled: boolean;
    /**
     * Maximum instance size to which your cluster can automatically scale.
     */
    providerAutoScalingComputeMaxInstanceSize: string;
    /**
     * Minimum instance size to which your cluster can automatically scale.
     */
    providerAutoScalingComputeMinInstanceSize: string;
    /**
     * Flag indicating if the cluster uses Cloud Backup Snapshots for backups. **DEPRECATED** Use `cloudBackup` instead.
     */
    providerBackupEnabled: boolean;
    /**
     * Indicates the maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected providerSettings.instanceSizeName and diskSizeGB.
     */
    providerDiskIops: number;
    /**
     * Describes Azure disk type of the server’s root volume (Azure Only).
     */
    providerDiskTypeName: string;
    /**
     * **(DEPRECATED)** Indicates whether the Amazon EBS encryption is enabled. This feature encrypts the server’s root volume for both data at rest within the volume and data moving between the volume and the instance. By default this attribute is always enabled, per deprecation process showing the real value at `providerEncryptEbsVolumeFlag` computed attribute.
     */
    providerEncryptEbsVolume: boolean;
    /**
     * Atlas provides different instance sizes, each with a default storage capacity and RAM size.
     */
    providerInstanceSizeName: string;
    /**
     * Indicates the cloud service provider on which the servers are provisioned.
     */
    providerName: string;
    /**
     * Indicates Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases. Requires the Atlas Region name, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
     */
    providerRegionName: string;
    /**
     * Indicates the type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.
     */
    providerVolumeType: string;
    /**
     * (Deprecated) Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
     */
    replicationFactor: number;
    /**
     * Configuration for cluster regions.  See Replication Spec below for more details.
     */
    replicationSpecs: outputs.GetClustersResultReplicationSpec[];
    /**
     * current snapshot schedule and retention settings for the cluster.
     */
    snapshotBackupPolicies: outputs.GetClustersResultSnapshotBackupPolicy[];
    /**
     * Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.
     */
    srvAddress: string;
    /**
     * Indicates the current state of the cluster. The possible states are:
     * - IDLE
     * - CREATING
     * - UPDATING
     * - DELETING
     * - DELETED
     * - REPAIRING
     */
    stateName: string;
    /**
     * Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
     */
    terminationProtectionEnabled: boolean;
    /**
     * Release cadence that Atlas uses for this cluster.
     */
    versionReleaseSystem: string;
}

export interface GetClustersResultAdvancedConfiguration {
    /**
     * [Default level of acknowledgment requested from MongoDB for read operations](https://docs.mongodb.com/manual/reference/read-concern/) set for this cluster. MongoDB 4.4 clusters default to [available](https://docs.mongodb.com/manual/reference/read-concern-available/).
     */
    defaultReadConcern: string;
    /**
     * [Default level of acknowledgment requested from MongoDB for write operations](https://docs.mongodb.com/manual/reference/write-concern/) set for this cluster. MongoDB 4.4 clusters default to [1](https://docs.mongodb.com/manual/reference/write-concern/).
     */
    defaultWriteConcern: string;
    /**
     * When true, documents can only be updated or inserted if, for all indexed fields on the target collection, the corresponding index entries do not exceed 1024 bytes. When false, mongod writes documents that exceed the limit but does not index them.
     */
    failIndexKeyTooLong: boolean;
    /**
     * When true, the cluster allows execution of operations that perform server-side executions of JavaScript. When false, the cluster disables execution of those operations.
     */
    javascriptEnabled: boolean;
    /**
     * Sets the minimum Transport Layer Security (TLS) version the cluster accepts for incoming connections.Valid values are:
     */
    minimumEnabledTlsProtocol: string;
    /**
     * When true, the cluster disables the execution of any query that requires a collection scan to return results. When false, the cluster allows the execution of those operations.
     */
    noTableScan: boolean;
    /**
     * The custom oplog size of the cluster. Without a value that indicates that the cluster uses the default oplog size calculated by Atlas.
     */
    oplogSizeMb: number;
    /**
     * Interval in seconds at which the mongosqld process re-samples data to create its relational schema. The default value is 300. The specified value must be a positive integer. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleRefreshIntervalBiConnector: number;
    /**
     * Number of documents per database to sample when gathering schema information. Defaults to 100. Available only for Atlas deployments in which BI Connector for Atlas is enabled.
     */
    sampleSizeBiConnector: number;
}

export interface GetClustersResultBiConnectorConfig {
    /**
     * Indicates whether or not BI Connector for Atlas is enabled on the cluster.
     */
    enabled: boolean;
    /**
     * Indicates the read preference to be used by BI Connector for Atlas on the cluster. Each BI Connector for Atlas read preference contains a distinct combination of [readPreference](https://docs.mongodb.com/manual/core/read-preference/) and [readPreferenceTags](https://docs.mongodb.com/manual/core/read-preference/#tag-sets) options. For details on BI Connector for Atlas read preferences, refer to the [BI Connector Read Preferences Table](https://docs.atlas.mongodb.com/tutorial/create-global-writes-cluster/#bic-read-preferences).
     */
    readPreference: string;
}

export interface GetClustersResultConnectionString {
    awsPrivateLink: {[key: string]: any};
    awsPrivateLinkSrv: {[key: string]: any};
    private: string;
    privateEndpoints: outputs.GetClustersResultConnectionStringPrivateEndpoint[];
    privateSrv: string;
    standard: string;
    standardSrv: string;
}

export interface GetClustersResultConnectionStringPrivateEndpoint {
    connectionString: string;
    endpoints: outputs.GetClustersResultConnectionStringPrivateEndpointEndpoint[];
    srvConnectionString: string;
    type: string;
}

export interface GetClustersResultConnectionStringPrivateEndpointEndpoint {
    endpointId: string;
    /**
     * Indicates the cloud service provider on which the servers are provisioned.
     */
    providerName: string;
    region: string;
}

export interface GetClustersResultLabel {
    /**
     * The key that was set.
     */
    key: string;
    /**
     * The value that represents the key.
     */
    value: string;
}

export interface GetClustersResultReplicationSpec {
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    /**
     * Number of shards to deploy in the specified zone.
     */
    numShards: number;
    /**
     * Describes the physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.
     */
    regionsConfigs: outputs.GetClustersResultReplicationSpecRegionsConfig[];
    /**
     * Indicates the n ame for the zone in a Global Cluster.
     */
    zoneName: string;
}

export interface GetClustersResultReplicationSpecRegionsConfig {
    /**
     * Indicates the number of analytics nodes for Atlas to deploy to the region. Analytics nodes are useful for handling analytic data such as reporting queries from BI Connector for Atlas. Analytics nodes are read-only, and can never become the primary.
     */
    analyticsNodes: number;
    /**
     * Number of electable nodes for Atlas to deploy to the region.
     */
    electableNodes: number;
    /**
     * Election priority of the region. For regions with only read-only nodes, set this value to 0.
     */
    priority: number;
    /**
     * Number of read-only nodes for Atlas to deploy to the region. Read-only nodes can never become the primary, but can facilitate local-reads. Specify 0 if you do not want any read-only nodes in the region.
     */
    readOnlyNodes: number;
    /**
     * Name for the region specified.
     */
    regionName: string;
}

export interface GetClustersResultSnapshotBackupPolicy {
    clusterId: string;
    clusterName: string;
    nextSnapshot: string;
    policies: outputs.GetClustersResultSnapshotBackupPolicyPolicy[];
    referenceHourOfDay: number;
    referenceMinuteOfHour: number;
    restoreWindowDays: number;
    updateSnapshots: boolean;
}

export interface GetClustersResultSnapshotBackupPolicyPolicy {
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    policyItems: outputs.GetClustersResultSnapshotBackupPolicyPolicyPolicyItem[];
}

export interface GetClustersResultSnapshotBackupPolicyPolicyPolicyItem {
    frequencyInterval: number;
    frequencyType: string;
    /**
     * Unique identifer of the replication document for a zone in a Global Cluster.
     */
    id: string;
    retentionUnit: string;
    retentionValue: number;
}

export interface GetCustomDbRoleAction {
    /**
     * (Required) Name of the privilege action. For a complete list of actions available in the Atlas API, see Custom Role Actions.
     */
    action: string;
    /**
     * (Required) Contains information on where the action is granted. Each object in the array either indicates a database and collection on which the action is granted, or indicates that the action is granted on the cluster resource.
     */
    resources: outputs.GetCustomDbRoleActionResource[];
}

export interface GetCustomDbRoleActionResource {
    cluster: boolean;
    collectionName: string;
    /**
     * (Required) Database on which the inherited role is granted.
     */
    databaseName: string;
}

export interface GetCustomDbRoleInheritedRole {
    /**
     * (Required) Database on which the inherited role is granted.
     */
    databaseName: string;
    /**
     * Name of the custom role.
     */
    roleName: string;
}

export interface GetCustomDbRolesResult {
    actions: outputs.GetCustomDbRolesResultAction[];
    inheritedRoles: outputs.GetCustomDbRolesResultInheritedRole[];
    /**
     * (Required) Name of the inherited role. This can either be another custom role or a built-in role.
     */
    roleName: string;
}

export interface GetCustomDbRolesResultAction {
    /**
     * (Required) Name of the privilege action. For a complete list of actions available in the Atlas API, see Custom Role Actions.
     */
    action: string;
    /**
     * (Required) Contains information on where the action is granted. Each object in the array either indicates a database and collection on which the action is granted, or indicates that the action is granted on the cluster resource.
     */
    resources: outputs.GetCustomDbRolesResultActionResource[];
}

export interface GetCustomDbRolesResultActionResource {
    cluster: boolean;
    collectionName: string;
    /**
     * (Required) Database on which the inherited role is granted.
     */
    databaseName: string;
}

export interface GetCustomDbRolesResultInheritedRole {
    /**
     * (Required) Database on which the inherited role is granted.
     */
    databaseName: string;
    /**
     * (Required) Name of the inherited role. This can either be another custom role or a built-in role.
     */
    roleName: string;
}

export interface GetDataLakeAw {
    externalId: string;
    iamAssumedRoleArn: string;
    iamUserArn: string;
    roleId: string;
    testS3Bucket: string;
}

export interface GetDataLakeDataProcessRegion {
    cloudProvider: string;
    region: string;
}

export interface GetDataLakeStorageDatabase {
    collections: outputs.GetDataLakeStorageDatabaseCollection[];
    maxWildcardCollections: number;
    /**
     * Name of the data lake.
     */
    name: string;
    views: outputs.GetDataLakeStorageDatabaseView[];
}

export interface GetDataLakeStorageDatabaseCollection {
    dataSources: outputs.GetDataLakeStorageDatabaseCollectionDataSource[];
    /**
     * Name of the data lake.
     */
    name: string;
}

export interface GetDataLakeStorageDatabaseCollectionDataSource {
    defaultFormat: string;
    path: string;
    storeName: string;
}

export interface GetDataLakeStorageDatabaseView {
    /**
     * Name of the data lake.
     */
    name: string;
    pipeline: string;
    source: string;
}

export interface GetDataLakeStorageStore {
    additionalStorageClasses: string[];
    bucket: string;
    delimiter: string;
    includeTags: boolean;
    /**
     * Name of the data lake.
     */
    name: string;
    prefix: string;
    provider: string;
    region: string;
}

export interface GetDataLakesResult {
    aws: outputs.GetDataLakesResultAw[];
    /**
     * The cloud provider region to which Atlas Data Lake routes client connections for data processing.
     * * `data_process_region.0.cloud_provider` - Name of the cloud service provider.
     * * `data_process_region.0.region` -Name of the region to which Data Lake routes client connections for data processing.
     */
    dataProcessRegions: outputs.GetDataLakesResultDataProcessRegion[];
    /**
     * The list of hostnames assigned to the Atlas Data Lake. Each string in the array is a hostname assigned to the Atlas Data Lake.
     */
    hostnames: string[];
    name: string;
    /**
     * The unique ID for the project to get all data lakes.
     */
    projectId: string;
    /**
     * Current state of the Atlas Data Lake:
     */
    state: string;
    /**
     * Configuration details for mapping each data store to queryable databases and collections.
     * * `storage_databases.#.name` - Name of the database to which Data Lake maps the data contained in the data store.
     * * `storage_databases.#.collections` -     Array of objects where each object represents a collection and data sources that map to a [stores](https://docs.mongodb.com/datalake/reference/format/data-lake-configuration#mongodb-datalakeconf-datalakeconf.stores) data store.
     * * `storage_databases.#.collections.#.name` - Name of the collection.
     * * `storage_databases.#.collections.#.data_sources` -     Array of objects where each object represents a stores data store to map with the collection.
     * * `storage_databases.#.collections.#.data_sources.#.store_name` -     Name of a data store to map to the `<collection>`.
     * * `storage_databases.#.collections.#.data_sources.#.default_format` - Default format that Data Lake assumes if it encounters a file without an extension while searching the storeName.
     * * `storage_databases.#.collections.#.data_sources.#.path` - Controls how Atlas Data Lake searches for and parses files in the storeName before mapping them to the `<collection>`.
     * * `storage_databases.#.views` -     Array of objects where each object represents an [aggregation pipeline](https://docs.mongodb.com/manual/core/aggregation-pipeline/#id1) on a collection.
     * * `storage_databases.#.views.#.name` - Name of the view.
     * * `storage_databases.#.views.#.source` -  Name of the source collection for the view.
     * * `storage_databases.#.views.#.pipeline`- Aggregation pipeline stage(s) to apply to the source collection.
     */
    storageDatabases: outputs.GetDataLakesResultStorageDatabase[];
    /**
     * Each object in the array represents a data store. Data Lake uses the storage.databases configuration details to map data in each data store to queryable databases and collections.
     * * `storage_stores.#.name` - Name of the data store.
     * * `storage_stores.#.provider` - Defines where the data is stored.
     * * `storage_stores.#.region` - Name of the AWS region in which the S3 bucket is hosted.
     * * `storage_stores.#.bucket` - Name of the AWS S3 bucket.
     * * `storage_stores.#.prefix` - Prefix Data Lake applies when searching for files in the S3 bucket .
     * * `storage_stores.#.delimiter` - The delimiter that separates `storage_databases.#.collections.#.data_sources.#.path` segments in the data store.
     * * `storage_stores.#.include_tags` - Determines whether or not to use S3 tags on the files in the given path as additional partition attributes.
     */
    storageStores: outputs.GetDataLakesResultStorageStore[];
}

export interface GetDataLakesResultAw {
    externalId: string;
    iamAssumedRoleArn: string;
    iamUserArn: string;
    roleId: string;
    testS3Bucket: string;
}

export interface GetDataLakesResultDataProcessRegion {
    cloudProvider: string;
    region: string;
}

export interface GetDataLakesResultStorageDatabase {
    collections: outputs.GetDataLakesResultStorageDatabaseCollection[];
    maxWildcardCollections: number;
    name: string;
    views: outputs.GetDataLakesResultStorageDatabaseView[];
}

export interface GetDataLakesResultStorageDatabaseCollection {
    dataSources: outputs.GetDataLakesResultStorageDatabaseCollectionDataSource[];
    name: string;
}

export interface GetDataLakesResultStorageDatabaseCollectionDataSource {
    defaultFormat: string;
    path: string;
    storeName: string;
}

export interface GetDataLakesResultStorageDatabaseView {
    name: string;
    pipeline: string;
    source: string;
}

export interface GetDataLakesResultStorageStore {
    additionalStorageClasses: string[];
    bucket: string;
    delimiter: string;
    includeTags: boolean;
    name: string;
    prefix: string;
    provider: string;
    region: string;
}

export interface GetDatabaseUserLabel {
    /**
     * The key that you want to write.
     */
    key: string;
    /**
     * The value that you want to write.
     */
    value: string;
}

export interface GetDatabaseUserRole {
    /**
     * Collection for which the role applies. You can specify a collection for the `read` and `readWrite` roles. If you do not specify a collection for `read` and `readWrite`, the role applies to all collections in the database (excluding some collections in the `system`. database).
     */
    collectionName: string;
    /**
     * Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
     */
    databaseName: string;
    roleName: string;
}

export interface GetDatabaseUserScope {
    /**
     * Name of the role to grant.
     */
    name: string;
    /**
     * Type of resource that the user has access to. Valid values are: `CLUSTER` and `DATA_LAKE`
     */
    type: string;
}

export interface GetDatabaseUsersResult {
    /**
     * (Required) Database against which Atlas authenticates the user. A user must provide both a username and authentication database to log into MongoDB.
     * Possible values include:
     */
    authDatabaseName: string;
    /**
     * The new database user authenticates with AWS IAM credentials. Default is `NONE`, `USER` means user has AWS IAM user credentials, `ROLE` - means user has credentials associated with an AWS IAM role.
     */
    awsIamType: string;
    labels: outputs.GetDatabaseUsersResultLabel[];
    /**
     * Method by which the provided username is authenticated. Default is `NONE`. Other valid values are: `USER`, `GROUP`.
     */
    ldapAuthType: string;
    /**
     * The unique ID for the project to get all database users.
     */
    projectId: string;
    /**
     * List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
     */
    roles: outputs.GetDatabaseUsersResultRole[];
    /**
     * Array of clusters and Atlas Data Lakes that this user has access to.
     */
    scopes: outputs.GetDatabaseUsersResultScope[];
    /**
     * Username for authenticating to MongoDB.
     */
    username: string;
    /**
     * X.509 method by which the provided username is authenticated.
     */
    x509Type: string;
}

export interface GetDatabaseUsersResultLabel {
    /**
     * The key that you want to write.
     */
    key: string;
    /**
     * The value that you want to write.
     */
    value: string;
}

export interface GetDatabaseUsersResultRole {
    /**
     * Collection for which the role applies. You can specify a collection for the `read` and `readWrite` roles. If you do not specify a collection for `read` and `readWrite`, the role applies to all collections in the database (excluding some collections in the `system`. database).
     */
    collectionName: string;
    /**
     * Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
     */
    databaseName: string;
    roleName: string;
}

export interface GetDatabaseUsersResultScope {
    /**
     * Name of the role to grant.
     */
    name: string;
    /**
     * Type of resource that the user has access to. Valid values are: `CLUSTER` and `DATA_LAKE`
     */
    type: string;
}

export interface GetEventTriggerEventProcessor {
    awsEventbridges: outputs.GetEventTriggerEventProcessorAwsEventbridge[];
}

export interface GetEventTriggerEventProcessorAwsEventbridge {
    configAccountId: string;
    configRegion: string;
}

export interface GetEventTriggersResult {
    /**
     * The name of the MongoDB collection that the trigger watches for change events.
     */
    configCollection: string;
    /**
     * The name of the MongoDB database that contains the watched collection.
     */
    configDatabase: string;
    /**
     * If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
     */
    configFullDocument: boolean;
    configFullDocumentBefore: boolean;
    /**
     * A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger.
     */
    configMatch: string;
    /**
     * The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for.
     */
    configOperationType: string;
    /**
     * The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for.
     */
    configOperationTypes: string[];
    /**
     * A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
     */
    configProject: string;
    /**
     * A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
     */
    configProviders: string[];
    /**
     * A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
     */
    configSchedule: string;
    configScheduleType: string;
    /**
     * The ID of the MongoDB Service associated with the trigger.
     */
    configServiceId: string;
    /**
     * Status of a trigger.
     */
    disabled: boolean;
    /**
     * An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor.
     * * `event_processors.0.aws_eventbridge.config_account_id` - AWS Account ID.
     * * `event_processors.0.aws_eventbridge.config_region` - Region of AWS Account.
     */
    eventProcessors: outputs.GetEventTriggersResultEventProcessor[];
    /**
     * The ID of the function associated with the trigger.
     */
    functionId: string;
    /**
     * The name of the function associated with the trigger.
     */
    functionName: string;
    /**
     * The name of the trigger.
     */
    name: string;
    triggerId: string;
    /**
     * The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`
     */
    type: string;
    /**
     * Sort order for `DATABASE` type.
     */
    unordered: boolean;
}

export interface GetEventTriggersResultEventProcessor {
    awsEventbridges: outputs.GetEventTriggersResultEventProcessorAwsEventbridge[];
}

export interface GetEventTriggersResultEventProcessorAwsEventbridge {
    configAccountId: string;
    configRegion: string;
}

export interface GetFederatedSettingsIdentityProviderAssociatedOrg {
    /**
     * List that contains the approved domains from which organization users can log in.
     */
    domainAllowLists: string[];
    /**
     * Flag that indicates whether domain restriction is enabled for the connected organization.
     */
    domainRestrictionEnabled: boolean;
    /**
     * Unique 20-hexadecimal digit string that identifies the IdP.
     */
    identityProviderId: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     */
    orgId: string;
    /**
     * List that contains the default roles granted to users who authenticate through the IdP in a connected organization. If you provide a postAuthRoleGrants field in the request, the array that you provide replaces the current postAuthRoleGrants.
     */
    postAuthRoleGrants: string[];
    roleMappings: outputs.GetFederatedSettingsIdentityProviderAssociatedOrgRoleMapping[];
    userConflicts: outputs.GetFederatedSettingsIdentityProviderAssociatedOrgUserConflict[];
}

export interface GetFederatedSettingsIdentityProviderAssociatedOrgRoleMapping {
    /**
     * Unique human-readable label that identifies the identity provider group to which this role mapping applies.
     */
    externalGroupName: string;
    /**
     * Unique 24-hexadecimal digit string that identifies this role mapping.
     */
    id: string;
    /**
     * Atlas roles and the unique identifiers of the groups and organizations associated with each role.
     */
    roleAssignments: outputs.GetFederatedSettingsIdentityProviderAssociatedOrgRoleMappingRoleAssignment[];
}

export interface GetFederatedSettingsIdentityProviderAssociatedOrgRoleMappingRoleAssignment {
    /**
     * Unique identifier of the project to which you want the role mapping to apply.
     */
    groupId: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     */
    orgId: string;
    /**
     * Specifies the Role that is attached to the Role Mapping.
     */
    role: string;
}

export interface GetFederatedSettingsIdentityProviderAssociatedOrgUserConflict {
    /**
     * Email address of the the user that conflicts with selected domains.
     */
    emailAddress: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     */
    federationSettingsId: string;
    /**
     * First name of the the user that conflicts with selected domains.
     */
    firstName: string;
    /**
     * Last name of the the user that conflicts with selected domains.
     */
    lastName: string;
    /**
     * Name of the Atlas user that conflicts with selected domains.
     */
    userId: string;
}

export interface GetFederatedSettingsIdentityProviderPemFileInfo {
    certificates: outputs.GetFederatedSettingsIdentityProviderPemFileInfoCertificate[];
    /**
     * Filename of certificate
     */
    fileName: string;
}

export interface GetFederatedSettingsIdentityProviderPemFileInfoCertificate {
    /**
     * Expiration  Date.
     */
    notAfter: string;
    /**
     * Start Date.
     */
    notBefore: string;
}

export interface GetFederatedSettingsIdentityProvidersResult {
    /**
     * Assertion consumer service URL to which the IdP sends the SAML response.
     */
    acsUrl: string;
    /**
     * List that contains the configured domains from which users can log in for this IdP.
     */
    associatedDomains: string[];
    /**
     * List that contains the configured domains from which users can log in for this IdP.
     */
    associatedOrgs: outputs.GetFederatedSettingsIdentityProvidersResultAssociatedOrg[];
    /**
     * Identifier for the intended audience of the SAML Assertion.
     */
    audienceUri: string;
    /**
     * Human-readable label that identifies the IdP.
     */
    displayName: string;
    /**
     * Identifier for the issuer of the SAML Assertion.
     */
    issuerUri: string;
    oktaIdpId: string;
    pemFileInfos: outputs.GetFederatedSettingsIdentityProvidersResultPemFileInfo[];
    /**
     * SAML Authentication Request Protocol binding used to send the AuthNRequest. Atlas supports the following binding values:
     * - HTTP POST
     * - HTTP REDIRECT
     */
    requestBinding: string;
    /**
     * Algorithm used to encrypt the IdP signature. Atlas supports the following signature algorithm values:
     * - SHA-1
     * - SHA-256
     */
    responseSignatureAlgorithm: string;
    /**
     * Flag that indicates whether the IdP has enabled Bypass SAML Mode. Enabling this mode generates a URL that allows you bypass SAML and login to your organizations at any point. You can authenticate with this special URL only when Bypass Mode is enabled. Set this parameter to true during testing. This keeps you from getting locked out of MongoDB.
     */
    ssoDebugEnabled: boolean;
    /**
     * URL of the receiver of the SAML AuthNRequest.
     */
    ssoUrl: string;
    /**
     * Label that indicates whether the identity provider is active. The IdP is Inactive until you map at least one domain to the IdP.
     */
    status: string;
}

export interface GetFederatedSettingsIdentityProvidersResultAssociatedOrg {
    /**
     * List that contains the approved domains from which organization users can log in.
     */
    domainAllowLists: string[];
    /**
     * Flag that indicates whether domain restriction is enabled for the connected organization.
     */
    domainRestrictionEnabled: boolean;
    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     */
    identityProviderId: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     */
    orgId: string;
    /**
     * List that contains the default roles granted to users who authenticate through the IdP in a connected organization. If you provide a postAuthRoleGrants field in the request, the array that you provide replaces the current postAuthRoleGrants.
     */
    postAuthRoleGrants: string[];
    roleMappings: outputs.GetFederatedSettingsIdentityProvidersResultAssociatedOrgRoleMapping[];
    userConflicts: outputs.GetFederatedSettingsIdentityProvidersResultAssociatedOrgUserConflict[];
}

export interface GetFederatedSettingsIdentityProvidersResultAssociatedOrgRoleMapping {
    /**
     * Unique human-readable label that identifies the identity provider group to which this role mapping applies.
     */
    externalGroupName: string;
    /**
     * Unique 24-hexadecimal digit string that identifies this role mapping.
     */
    id: string;
    /**
     * Atlas roles and the unique identifiers of the groups and organizations associated with each role.
     */
    roleAssignments: outputs.GetFederatedSettingsIdentityProvidersResultAssociatedOrgRoleMappingRoleAssignment[];
}

export interface GetFederatedSettingsIdentityProvidersResultAssociatedOrgRoleMappingRoleAssignment {
    /**
     * Unique identifier of the project to which you want the role mapping to apply.
     */
    groupId: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     */
    orgId: string;
    /**
     * Specifies the Role that is attached to the Role Mapping.
     */
    role: string;
}

export interface GetFederatedSettingsIdentityProvidersResultAssociatedOrgUserConflict {
    /**
     * Email address of the the user that conflicts with selected domains.
     */
    emailAddress: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     */
    federationSettingsId: string;
    /**
     * First name of the the user that conflicts with selected domains.
     */
    firstName: string;
    /**
     * Last name of the the user that conflicts with selected domains.
     */
    lastName: string;
    /**
     * Name of the Atlas user that conflicts with selected domains.
     */
    userId: string;
}

export interface GetFederatedSettingsIdentityProvidersResultPemFileInfo {
    certificates: outputs.GetFederatedSettingsIdentityProvidersResultPemFileInfoCertificate[];
    /**
     * Filename of certificate
     */
    fileName: string;
}

export interface GetFederatedSettingsIdentityProvidersResultPemFileInfoCertificate {
    /**
     * Expiration  Date.
     */
    notAfter: string;
    /**
     * Start Date.
     */
    notBefore: string;
}

export interface GetFederatedSettingsOrgConfigRoleMapping {
    /**
     * Unique human-readable label that identifies the identity provider group to which this role mapping applies.
     */
    externalGroupName: string;
    /**
     * Unique 24-hexadecimal digit string that identifies this role mapping.
     */
    id: string;
    /**
     * Atlas roles and the unique identifiers of the groups and organizations associated with each role.
     */
    roleAssignments: outputs.GetFederatedSettingsOrgConfigRoleMappingRoleAssignment[];
}

export interface GetFederatedSettingsOrgConfigRoleMappingRoleAssignment {
    /**
     * Unique identifier of the project to which you want the role mapping to apply.
     */
    groupId: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     */
    orgId: string;
    /**
     * Specifies the Role that is attached to the Role Mapping.
     */
    role: string;
}

export interface GetFederatedSettingsOrgConfigUserConflict {
    /**
     * Email address of the the user that conflicts with selected domains.
     */
    emailAddress: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     */
    federationSettingsId: string;
    /**
     * First name of the the user that conflicts with selected domains.
     */
    firstName: string;
    /**
     * Last name of the the user that conflicts with selected domains.
     */
    lastName: string;
    /**
     * Name of the Atlas user that conflicts with selected domains.
     */
    userId: string;
}

export interface GetFederatedSettingsOrgConfigsResult {
    /**
     * List that contains the approved domains from which organization users can log in.
     */
    domainAllowLists: string[];
    /**
     * Flag that indicates whether domain restriction is enabled for the connected organization.
     */
    domainRestrictionEnabled: boolean;
    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     */
    identityProviderId: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     */
    orgId: string;
    /**
     * List that contains the default roles granted to users who authenticate through the IdP in a connected organization.
     */
    postAuthRoleGrants: string[];
    roleMappings: outputs.GetFederatedSettingsOrgConfigsResultRoleMapping[];
    userConflicts: outputs.GetFederatedSettingsOrgConfigsResultUserConflict[];
}

export interface GetFederatedSettingsOrgConfigsResultRoleMapping {
    /**
     * Unique human-readable label that identifies the identity provider group to which this role mapping applies.
     */
    externalGroupName: string;
    /**
     * Unique 24-hexadecimal digit string that identifies this role mapping.
     */
    id: string;
    /**
     * Atlas roles and the unique identifiers of the groups and organizations associated with each role.
     */
    roleAssignments: outputs.GetFederatedSettingsOrgConfigsResultRoleMappingRoleAssignment[];
}

export interface GetFederatedSettingsOrgConfigsResultRoleMappingRoleAssignment {
    /**
     * Unique identifier of the project to which you want the role mapping to apply.
     */
    groupId: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     */
    orgId: string;
    /**
     * Specifies the Role that is attached to the Role Mapping.
     */
    role: string;
}

export interface GetFederatedSettingsOrgConfigsResultUserConflict {
    /**
     * Email address of the the user that conflicts with selected domains.
     */
    emailAddress: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     */
    federationSettingsId: string;
    /**
     * First name of the the user that conflicts with selected domains.
     */
    firstName: string;
    /**
     * Last name of the the user that conflicts with selected domains.
     */
    lastName: string;
    /**
     * Name of the Atlas user that conflicts with selected domains.
     */
    userId: string;
}

export interface GetFederatedSettingsOrgRoleMappingRoleAssignment {
    /**
     * Unique identifier of the project to which you want the role mapping to apply.
     */
    groupId: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     */
    orgId: string;
    /**
     * Specifies the Role that is attached to the Role Mapping.
     */
    role: string;
}

export interface GetFederatedSettingsOrgRoleMappingsResult {
    /**
     * Unique human-readable label that identifies the identity provider group to which this role mapping applies.
     */
    externalGroupName: string;
    /**
     * Unique 24-hexadecimal digit string that identifies this role mapping.
     */
    id: string;
    /**
     * Atlas roles and the unique identifiers of the groups and organizations associated with each role.
     */
    roleAssignments: outputs.GetFederatedSettingsOrgRoleMappingsResultRoleAssignment[];
}

export interface GetFederatedSettingsOrgRoleMappingsResultRoleAssignment {
    /**
     * Unique identifier of the project to which you want the role mapping to apply.
     */
    groupId: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     */
    orgId: string;
    /**
     * Specifies the Role that is attached to the Role Mapping.
     */
    role: string;
}

export interface GetGlobalClusterConfigManagedNamespace {
    /**
     * (Required) The name of the collection associated with the managed namespace.
     */
    collection: string;
    /**
     * (Required)	The custom shard key for the collection. Global Clusters require a compound shard key consisting of a location field and a user-selected second key, the custom shard key.
     */
    customShardKey: string;
    /**
     * (Required) The name of the database containing the collection.
     */
    db: string;
    /**
     * Specifies whether the custom shard key for the collection is [hashed](https://docs.mongodb.com/manual/reference/method/sh.shardCollection/#hashed-shard-keys). If omitted, defaults to `false`. If `false`, Atlas uses [ranged sharding](https://docs.mongodb.com/manual/core/ranged-sharding/). This is only available for Atlas clusters with MongoDB v4.4 and later.
     */
    isCustomShardKeyHashed: boolean;
    /**
     * Specifies whether the underlying index enforces a unique constraint. If omitted, defaults to false. You cannot specify true when using [hashed shard keys](https://docs.mongodb.com/manual/core/hashed-sharding/#std-label-sharding-hashed).
     */
    isShardKeyUnique: boolean;
}

export interface GetLdapConfigurationUserToDnMapping {
    ldapQuery: string;
    match: string;
    substitution: string;
}

export interface GetLdapVerifyLink {
    href: string;
    rel: string;
}

export interface GetLdapVerifyValidation {
    /**
     * The current status of the LDAP over TLS/SSL configuration.
     */
    status: string;
    validationType: string;
}

export interface GetNetworkContainersResult {
    /**
     * CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
     */
    atlasCidrBlock: string;
    /**
     * Unique identifer of the Azure subscription in which the VNet resides.
     */
    azureSubscriptionId: string;
    /**
     * Unique identifier of the GCP project in which the Network Peering connection resides.
     */
    gcpProjectId: string;
    /**
     * The Network Peering Container ID.
     */
    id: string;
    /**
     * Name of the Network Peering connection in the Atlas project.
     */
    networkName: string;
    /**
     * Cloud provider for this Network peering container. Accepted values are AWS, GCP, and Azure.
     */
    providerName: string;
    /**
     * Indicates whether the project has Network Peering connections deployed in the container.
     */
    provisioned: boolean;
    /**
     * The Atlas Azure region name for where this container exists.
     */
    region: string;
    /**
     * The Atlas AWS region name for where this container exists.
     */
    regionName: string;
    /**
     * Atlas GCP regions where the container resides.
     */
    regions: string[];
    /**
     * The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.
     */
    vnetName: string;
    /**
     * Unique identifier of the project’s VPC.
     */
    vpcId: string;
}

export interface GetNetworkPeeringsResult {
    /**
     * Specifies the region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     */
    accepterRegionName: string;
    atlasCidrBlock: string;
    /**
     * Account ID of the owner of the peer VPC.
     */
    awsAccountId: string;
    /**
     * Unique identifier for an Azure AD directory.
     */
    azureDirectoryId: string;
    /**
     * Unique identifer of the Azure subscription in which the VNet resides.
     */
    azureSubscriptionId: string;
    /**
     * Unique identifier for the peering connection.
     */
    connectionId: string;
    containerId: string;
    /**
     * When `"status" : "FAILED"`, Atlas provides a description of the error.
     */
    errorMessage: string;
    /**
     * Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
     */
    errorState: string;
    /**
     * Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
     */
    errorStateName: string;
    /**
     * GCP project ID of the owner of the network peer.
     */
    gcpProjectId: string;
    /**
     * Name of the network peer to which Atlas connects.
     */
    networkName: string;
    /**
     * Atlas assigned unique ID for the peering connection.
     */
    peeringId: string;
    /**
     * Cloud provider for this VPC peering connection. If omitted, Atlas sets this parameter to AWS. (Possible Values `AWS`, `AZURE`, `GCP`).
     */
    providerName: string;
    /**
     * Name of your Azure resource group.
     */
    resourceGroupName: string;
    /**
     * Peer VPC CIDR block or subnet.
     */
    routeTableCidrBlock: string;
    /**
     * Status of the Atlas network peering connection: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING`, `WAITING_FOR_USER`.
     */
    status: string;
    /**
     * The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
     */
    statusName: string;
    /**
     * Name of your Azure VNet.
     */
    vnetName: string;
    /**
     * Unique identifier of the peer VPC.
     */
    vpcId: string;
}

export interface GetOnlineArchiveCriteria {
    dateField: string;
    dateFormat: string;
    expireAfterDays: number;
    query: string;
    type: string;
}

export interface GetOnlineArchivePartitionField {
    fieldName: string;
    fieldType: string;
    order: number;
}

export interface GetOnlineArchivesResult {
    archiveId: string;
    /**
     * Name of the cluster that contains the collection.
     */
    clusterName: string;
    collName: string;
    criterias: outputs.GetOnlineArchivesResultCriteria[];
    dbName: string;
    partitionFields: outputs.GetOnlineArchivesResultPartitionField[];
    paused: boolean;
    /**
     * The unique ID for the project.
     */
    projectId: string;
    state: string;
}

export interface GetOnlineArchivesResultCriteria {
    dateField: string;
    dateFormat: string;
    expireAfterDays: number;
    query: string;
    type: string;
}

export interface GetOnlineArchivesResultPartitionField {
    fieldName: string;
    fieldType: string;
    order: number;
}

export interface GetPrivateLinkEndpointServiceEndpoint {
    /**
     * Forwarding rule that corresponds to the endpoint you created in GCP.
     */
    endpointName: string;
    /**
     * Private IP address of the network endpoint group you created in GCP.
     */
    ipAddress: string;
    /**
     * Unique alphanumeric and special character strings that identify the service attachment associated with the endpoint.
     */
    serviceAttachmentName: string;
    /**
     * Status of the endpoint. Atlas returns one of the [values shown above](https://docs.atlas.mongodb.com/reference/api/private-endpoints-endpoint-create-one/#std-label-ref-status-field).
     */
    status: string;
}

export interface GetPrivatelinkEndpointsServiceAdlLink {
    href: string;
    rel: string;
}

export interface GetPrivatelinkEndpointsServiceAdlResult {
    /**
     * Human-readable string to associate with this private endpoint.
     */
    comment: string;
    /**
     * Unique 22-character alphanumeric string that identifies the private endpoint. Atlas supports AWS private endpoints using the [|aws| PrivateLink](https://aws.amazon.com/privatelink/) feature.
     */
    endpointId: string;
    /**
     * Human-readable label that identifies the cloud provider for this endpoint.
     */
    providerName: string;
    /**
     * Human-readable label that identifies the type of resource to associate with this private endpoint.
     */
    type: string;
}

export interface GetPrivatelinkEndpointsServiceServerlessResult {
    /**
     * Unique string that identifies the private endpoint's network interface.
     */
    cloudProviderEndpointId: string;
    /**
     * Human-readable string to associate with this private endpoint.
     */
    comment: string;
    /**
     * (Required) Unique 22-character alphanumeric string that identifies the private endpoint. Atlas supports AWS private endpoints using the [AWS PrivateLink](https://aws.amazon.com/privatelink/) feature.
     */
    endpointId: string;
    /**
     * Unique string that identifies the PrivateLink endpoint service. MongoDB Cloud returns null while it creates the endpoint service.
     */
    endpointServiceName: string;
    errorMessage: string;
    /**
     * IPv4 address of the private endpoint in your Azure VNet that someone added to this private endpoint service.
     */
    privateEndpointIpAddress: string;
    /**
     * Root-relative path that identifies the Azure Private Link Service that MongoDB Cloud manages.
     */
    privateLinkServiceResourceId: string;
    /**
     * Human-readable label that indicates the current operating status of the private endpoint. Values include: RESERVATION_REQUESTED, RESERVED, INITIATING, AVAILABLE, FAILED, DELETING.
     */
    status: string;
}

export interface GetProjectApiKey {
    apiKeyId: string;
    roleNames: string[];
}

export interface GetProjectTeam {
    roleNames: string[];
    teamId: string;
}

export interface GetProjectsResult {
    apiKeys: outputs.GetProjectsResultApiKey[];
    /**
     * The number of Atlas clusters deployed in the project.
     */
    clusterCount: number;
    /**
     * The ISO-8601-formatted timestamp of when Atlas created the project.
     * * `teams.#.team_id` - The unique identifier of the team you want to associate with the project. The team and project must share the same parent organization.
     * * `teams.#.role_names` - Each string in the array represents a project role assigned to the team. Every user associated with the team inherits these roles.
     * The following are valid roles:
     */
    created: string;
    /**
     * Autogenerated Unique ID for this data source.
     */
    id: string;
    /**
     * Flag that indicates whether to enable statistics in [cluster metrics](https://www.mongodb.com/docs/atlas/monitor-cluster-metrics/) collection for the project.
     */
    isCollectDatabaseSpecificsStatisticsEnabled: boolean;
    /**
     * Flag that indicates whether to enable Data Explorer for the project. If enabled, you can query your database with an easy to use interface.
     */
    isDataExplorerEnabled: boolean;
    /**
     * Flag that indicates whether to enable Performance Advisor and Profiler for the project. If enabled, you can analyze database logs to recommend performance improvements.
     */
    isPerformanceAdvisorEnabled: boolean;
    /**
     * Flag that indicates whether to enable Real Time Performance Panel for the project. If enabled, you can see real time metrics from your MongoDB database.
     */
    isRealtimePerformancePanelEnabled: boolean;
    /**
     * Flag that indicates whether to enable Schema Advisor for the project. If enabled, you receive customized recommendations to optimize your data model and enhance performance. Disable this setting to disable schema suggestions in the [Performance Advisor](https://www.mongodb.com/docs/atlas/performance-advisor/#std-label-performance-advisor) and the [Data Explorer](https://www.mongodb.com/docs/atlas/atlas-ui/#std-label-atlas-ui).
     */
    isSchemaAdvisorEnabled: boolean;
    /**
     * The name of the project you want to create. (Cannot be changed via this Provider after creation.)
     */
    name: string;
    /**
     * The ID of the organization you want to create the project within.
     */
    orgId: string;
    /**
     * If GOV_REGIONS_ONLY the project can be used for government regions only, otherwise defaults to standard regions. For more information see [MongoDB Atlas for Government](https://www.mongodb.com/docs/atlas/government/api/#creating-a-project).
     */
    regionUsageRestrictions: string;
    teams: outputs.GetProjectsResultTeam[];
}

export interface GetProjectsResultApiKey {
    apiKeyId: string;
    roleNames: string[];
}

export interface GetProjectsResultTeam {
    roleNames: string[];
    teamId: string;
}

export interface GetSearchIndexSynonym {
    /**
     * [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index.
     */
    analyzer: string;
    /**
     * Name of the index.
     */
    name: string;
    sourceCollection: string;
}

export interface GetSearchIndexesResult {
    /**
     * [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index.
     */
    analyzer: string;
    /**
     * [Custom analyzers](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-custom-analyzers) to use in this index (this is an array of objects).
     */
    analyzers?: string;
    /**
     * Name of the cluster containing the collection with one or more Atlas Search indexes.
     */
    clusterName: string;
    /**
     * Name of the collection with one or more Atlas Search indexes.
     */
    collectionName: string;
    /**
     * (Required) Name of the database the collection is in.
     */
    database: string;
    indexId: string;
    /**
     * Flag indicating whether the index uses dynamic or static mappings.
     */
    mappingsDynamic?: boolean;
    /**
     * Object containing one or more field specifications.
     */
    mappingsFields?: string;
    /**
     * Name of the index.
     */
    name: string;
    /**
     * Unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
     */
    projectId: string;
    /**
     * [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when searching the index.
     */
    searchAnalyzer?: string;
    status: string;
    /**
     * Synonyms mapping definition to use in this index.
     * * `synonyms.#.name` - Name of the [synonym mapping definition](https://docs.atlas.mongodb.com/reference/atlas-search/synonyms/#std-label-synonyms-ref).
     * * `synonyms.#.source_collection` - Name of the source MongoDB collection for the synonyms.
     * * `synonyms.#.analyzer` - Name of the [analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use with this synonym mapping.
     */
    synonyms?: outputs.GetSearchIndexesResultSynonym[];
}

export interface GetSearchIndexesResultSynonym {
    /**
     * [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index.
     */
    analyzer: string;
    /**
     * Name of the index.
     */
    name: string;
    sourceCollection: string;
}

export interface GetServerlessInstanceLink {
    href: string;
    rel: string;
}

export interface GetServerlessInstancesResult {
    /**
     * Public `mongodb+srv://` connection string that you can use to connect to this serverless instance.
     */
    connectionStringsStandardSrv: string;
    /**
     * Flag that indicates whether the serverless instance uses Serverless Continuous Backup.
     */
    continuousBackupEnabled: boolean;
    createDate: string;
    /**
     * Unique 24-hexadecimal digit string that identifies the serverless instance.
     */
    id: string;
    links: outputs.GetServerlessInstancesResultLink[];
    /**
     * Version of MongoDB that the serverless instance runs, in `<major version>`.`<minor version>` format.
     */
    mongoDbVersion: string;
    /**
     * (Required) Human-readable label that identifies your serverless instance.
     */
    name: string;
    /**
     * Unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
     */
    projectId: string;
    /**
     * Cloud service provider on which MongoDB Cloud provisioned the serverless instance.
     */
    providerSettingsBackingProviderName: string;
    /**
     * Cloud service provider that applies to the provisioned the serverless instance.
     */
    providerSettingsProviderName: string;
    /**
     * Human-readable label that identifies the physical location of your MongoDB serverless instance. The region you choose can affect network latency for clients accessing your databases.
     */
    providerSettingsRegionName: string;
    /**
     * Stage of deployment of this serverless instance when the resource made its request.
     */
    stateName: string;
    /**
     * Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
     */
    terminationProtectionEnabled: boolean;
}

export interface GetServerlessInstancesResultLink {
    href: string;
    rel: string;
}

export interface GetThirdPartyIntegrationsResult {
    /**
     * Unique identifier of your New Relic account.
     */
    accountId: string;
    /**
     * Your API Key.
     */
    apiKey: string;
    /**
     * Your API Token.
     */
    apiToken: string;
    channelName: string;
    /**
     * Whether your cluster has Prometheus enabled.
     */
    enabled?: boolean;
    /**
     * Your Flowdock Flow name.
     */
    flowName: string;
    /**
     * Your License Key.
     */
    licenseKey: string;
    /**
     * Your Microsoft Teams incoming webhook URL.
     */
    microsoftTeamsWebhookUrl?: string;
    /**
     * Your Flowdock organization name.
     */
    orgName: string;
    /**
     * The unique ID for the project to get all Third-Party service integrations
     */
    projectId: string;
    /**
     * Your Insights Query Key.
     */
    readToken: string;
    /**
     * Indicates which API URL to use, either US or EU. Opsgenie will use US by default.
     */
    region: string;
    /**
     * An optional field for your Routing Key.
     */
    routingKey: string;
    /**
     * Your Prometheus protocol scheme configured for requests.
     */
    scheme?: string;
    /**
     * An optional field for your webhook secret.
     */
    secret: string;
    /**
     * Indicates which service discovery method is used, either file or http.
     */
    serviceDiscovery?: string;
    /**
     * Your Service Key.
     */
    serviceKey: string;
    teamName: string;
    /**
     * (Required) Thirt-Party service integration type.
     */
    type: string;
    /**
     * Your webhook URL.
     */
    url: string;
    /**
     * Your Prometheus username.
     */
    userName?: string;
    /**
     * Your Insights Insert Key.
     */
    writeToken: string;
}

export interface GlobalClusterConfigCustomZoneMapping {
    /**
     * The ISO location code to which you want to map a zone in your Global Cluster. You can find a list of all supported location codes [here](https://cloud.mongodb.com/static/atlas/country_iso_codes.txt).
     */
    location: string;
    /**
     * The name of the zone in your Global Cluster that you want to map to location.
     */
    zone: string;
}

export interface GlobalClusterConfigManagedNamespace {
    /**
     * The name of the collection associated with the managed namespace.
     */
    collection: string;
    /**
     * The custom shard key for the collection. Global Clusters require a compound shard key consisting of a location field and a user-selected second key, the custom shard key.
     */
    customShardKey: string;
    /**
     * The name of the database containing the collection.
     */
    db: string;
    /**
     * Specifies whether the custom shard key for the collection is [hashed](https://docs.mongodb.com/manual/reference/method/sh.shardCollection/#hashed-shard-keys). If omitted, defaults to `false`. If `false`, Atlas uses [ranged sharding](https://docs.mongodb.com/manual/core/ranged-sharding/). This is only available for Atlas clusters with MongoDB v4.4 and later.
     */
    isCustomShardKeyHashed: boolean;
    /**
     * Specifies whether the underlying index enforces a unique constraint. If omitted, defaults to false. You cannot specify true when using [hashed shard keys](https://docs.mongodb.com/manual/core/hashed-sharding/#std-label-sharding-hashed).
     */
    isShardKeyUnique: boolean;
}

export interface LdapConfigurationUserToDnMapping {
    ldapQuery: string;
    match: string;
    substitution: string;
}

export interface LdapVerifyLink {
    href: string;
    rel: string;
}

export interface LdapVerifyValidation {
    /**
     * The current status of the LDAP over TLS/SSL configuration. One of the following values: `PENDING`, `SUCCESS`, and `FAILED`.
     */
    status: string;
    validationType: string;
}

export interface OnlineArchiveCriteria {
    dateField?: string;
    dateFormat: string;
    expireAfterDays?: number;
    query?: string;
    type: string;
}

export interface OnlineArchivePartitionField {
    fieldName: string;
    fieldType: string;
    order: number;
}

export interface PrivateLinkEndpointServiceEndpoint {
    /**
     * Forwarding rule that corresponds to the endpoint you created in GCP.
     */
    endpointName?: string;
    /**
     * Private IP address of the endpoint you created in GCP.
     */
    ipAddress?: string;
    /**
     * Unique alphanumeric and special character strings that identify the service attachment associated with the endpoint.
     */
    serviceAttachmentName: string;
    /**
     * Status of the endpoint. Atlas returns one of the [values shown above](https://docs.atlas.mongodb.com/reference/api/private-endpoints-endpoint-create-one/#std-label-ref-status-field).
     */
    status: string;
}

export interface ProjectApiKey {
    /**
     * The unique identifier of the Programmatic API key you want to associate with the Project.  The Programmatic API key and Project must share the same parent organization.  Note: this is not the `publicKey` of the Programmatic API key but the `id` of the key. See [Programmatic API Keys](https://docs.atlas.mongodb.com/reference/api/apiKeys/) for more.
     */
    apiKeyId: string;
    /**
     * Each string in the array represents a project role you want to assign to the team. Every user associated with the team inherits these roles. You must specify an array even if you are only associating a single role with the team.
     * The following are valid roles:
     * The following are valid roles:
     */
    roleNames: string[];
}

export interface ProjectTeam {
    /**
     * Each string in the array represents a project role you want to assign to the team. Every user associated with the team inherits these roles. You must specify an array even if you are only associating a single role with the team.
     * The following are valid roles:
     */
    roleNames: string[];
    /**
     * The unique identifier of the team you want to associate with the project. The team and project must share the same parent organization.
     */
    teamId: string;
}

export interface SearchIndexSynonym {
    /**
     * Name of the [analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use with this synonym mapping. Atlas Search doesn't support these [custom analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-custom-analyzers) tokenizers and token filters in [analyzers used in synonym mappings](https://docs.atlas.mongodb.com/reference/atlas-search/synonyms/#options):
     * * [nGram](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-ngram-tokenizer-ref) Tokenizer
     * * [edgeGram](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-edgegram-tokenizer-ref) Tokenizers
     * * [daitchMokotoffSoundex](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-daitchmokotoffsoundex-tf-ref) token filter
     * * [nGram](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-ngram-tf-ref) token filter
     * * [edgeGram](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-edgegram-tf-ref) token filter
     * * [shingle](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-shingle-tf-ref) token filter
     */
    analyzer: string;
    /**
     * Name of the [synonym mapping definition](https://docs.atlas.mongodb.com/reference/atlas-search/synonyms/#std-label-synonyms-ref). Name must be unique in this index definition and it can't be an empty string.
     */
    name: string;
    /**
     * Name of the source MongoDB collection for the synonyms. Documents in this collection must be in the format described in the [Synonyms Source Collection Documents](https://docs.atlas.mongodb.com/reference/atlas-search/synonyms/#std-label-synonyms-coll-spec).
     */
    sourceCollection: string;
}

export interface ServerlessInstanceLink {
    href: string;
    rel: string;
}

export interface X509AuthenticationDatabaseUserCertificate {
    createdAt: string;
    groupId: string;
    id: number;
    notAfter: string;
    subject: string;
}

export namespace config {
    export interface AssumeRole {
        duration?: string;
        /**
         * @deprecated Use assume_role.duration instead
         */
        durationSeconds?: number;
        externalId?: string;
        policy?: string;
        policyArns?: string[];
        roleArn?: string;
        sessionName?: string;
        sourceIdentity?: string;
        tags?: {[key: string]: string};
        transitiveTagKeys?: string[];
    }

}
