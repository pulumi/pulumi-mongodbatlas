// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Resource: mongodbatlas.ApiKeyProjectAssignment
 *
 * `mongodbatlas.ApiKeyProjectAssignment` provides an API Key Project Assignment resource. The resource lets you create, edit, and delete Organization API keys assignments to projects.
 *
 * ## Example Usage
 *
 * ### S
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const _this = new mongodbatlas.ApiKey("this", {
 *     orgId: orgId,
 *     description: "Test API Key",
 *     roleNames: ["ORG_READ_ONLY"],
 * });
 * const firstProject = new mongodbatlas.Project("first_project", {
 *     name: "First Project",
 *     orgId: orgId,
 * });
 * const secondProject = new mongodbatlas.Project("second_project", {
 *     name: "Second Project",
 *     orgId: orgId,
 * });
 * const firstAssignment = new mongodbatlas.ApiKeyProjectAssignment("first_assignment", {
 *     projectId: firstProject.id,
 *     apiKeyId: _this.apiKeyId,
 *     roles: ["GROUP_OWNER"],
 * });
 * const secondAssignment = new mongodbatlas.ApiKeyProjectAssignment("second_assignment", {
 *     projectId: secondProject.id,
 *     apiKeyId: _this.apiKeyId,
 *     roles: ["GROUP_OWNER"],
 * });
 * // Add IP Access List Entry to Programmatic API Key 
 * const thisAccessListApiKey = new mongodbatlas.AccessListApiKey("this", {
 *     orgId: orgId,
 *     cidrBlock: "0.0.0.0/1",
 *     apiKeyId: _this.apiKeyId,
 * });
 * ```
 *
 * ## Import
 *
 * API Key Project Assignment resource can be imported using the project ID and API key ID, in the format `{PROJECT_ID}/{API_KEY_ID}`, e.g.
 *
 * For more information see: [MongoDB Atlas API - Programmatic API Keys Project Assignment](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/group/endpoint-programmatic-api-keys) Documentation.
 */
export class ApiKeyProjectAssignment extends pulumi.CustomResource {
    /**
     * Get an existing ApiKeyProjectAssignment resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ApiKeyProjectAssignmentState, opts?: pulumi.CustomResourceOptions): ApiKeyProjectAssignment {
        return new ApiKeyProjectAssignment(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/apiKeyProjectAssignment:ApiKeyProjectAssignment';

    /**
     * Returns true if the given object is an instance of ApiKeyProjectAssignment.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ApiKeyProjectAssignment {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ApiKeyProjectAssignment.__pulumiType;
    }

    /**
     * Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
     */
    declare public readonly apiKeyId: pulumi.Output<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     */
    declare public readonly projectId: pulumi.Output<string>;
    /**
     * Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
     */
    declare public readonly roles: pulumi.Output<string[]>;

    /**
     * Create a ApiKeyProjectAssignment resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ApiKeyProjectAssignmentArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ApiKeyProjectAssignmentArgs | ApiKeyProjectAssignmentState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ApiKeyProjectAssignmentState | undefined;
            resourceInputs["apiKeyId"] = state?.apiKeyId;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["roles"] = state?.roles;
        } else {
            const args = argsOrState as ApiKeyProjectAssignmentArgs | undefined;
            if (args?.apiKeyId === undefined && !opts.urn) {
                throw new Error("Missing required property 'apiKeyId'");
            }
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.roles === undefined && !opts.urn) {
                throw new Error("Missing required property 'roles'");
            }
            resourceInputs["apiKeyId"] = args?.apiKeyId;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["roles"] = args?.roles;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(ApiKeyProjectAssignment.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ApiKeyProjectAssignment resources.
 */
export interface ApiKeyProjectAssignmentState {
    /**
     * Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
     */
    apiKeyId?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     */
    projectId?: pulumi.Input<string>;
    /**
     * Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
     */
    roles?: pulumi.Input<pulumi.Input<string>[]>;
}

/**
 * The set of arguments for constructing a ApiKeyProjectAssignment resource.
 */
export interface ApiKeyProjectAssignmentArgs {
    /**
     * Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
     */
    apiKeyId: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     */
    projectId: pulumi.Input<string>;
    /**
     * Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
     */
    roles: pulumi.Input<pulumi.Input<string>[]>;
}
