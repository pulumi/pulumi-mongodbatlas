// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * `mongodbatlas..NetworkPeering` provides a Network Peering Connection resource. The resource lets you create, edit and delete network peering connections. The resource requires your Project ID.  
 *
 * Ensure you have first created a network container if it is required for your configuration.  See the networkContainer resource documentation to determine if you need a network container first.  Examples for creating both container and peering resource are shown below as well as examples for creating the peering connection only.
 *
 * > **GCP AND AZURE ONLY:** Connect via Peering Only mode is deprecated, so no longer needed.  See [disable Peering Only mode](https://docs.atlas.mongodb.com/reference/faq/connection-changes/#disable-peering-mode) for details and `privateIpMode` resource to disable.
 *
 * > **AZURE ONLY:** To create the peering request with an Azure VNET, you must grant Atlas the following permissions on the virtual network.
 *     Microsoft.Network/virtualNetworks/virtualNetworkPeerings/read
 *     Microsoft.Network/virtualNetworks/virtualNetworkPeerings/write
 *     Microsoft.Network/virtualNetworks/virtualNetworkPeerings/delete
 *     Microsoft.Network/virtualNetworks/peer/action
 * For more information see https://docs.atlas.mongodb.com/security-vpc-peering/ and https://docs.atlas.mongodb.com/reference/api/vpc-create-peering-connection/
 *
 * > **Create a Whitelist:** Ensure you whitelist the private IP ranges of the subnets in which your application is hosted in order to connect to your Atlas cluster.  See the projectIpWhitelist resource.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 *
 *
 * ## Example Usage - Container & Peering Connection
 *
 * ### Example with AWS
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as aws from "@pulumi/aws";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * // Container example provided but not always required, 
 * // see networkContainer documentation for details. 
 * const testNetworkContainer = new mongodbatlas.NetworkContainer("testNetworkContainer", {
 *     projectId: local.project_id,
 *     atlasCidrBlock: "10.8.0.0/21",
 *     providerName: "AWS",
 *     regionName: "US_EAST_1",
 * });
 * // Create the peering connection request
 * const testNetworkPeering = new mongodbatlas.NetworkPeering("testNetworkPeering", {
 *     accepterRegionName: "us-east-1",
 *     projectId: local.project_id,
 *     containerId: "507f1f77bcf86cd799439011",
 *     providerName: "AWS",
 *     routeTableCidrBlock: "192.168.0.0/24",
 *     vpcId: "vpc-abc123abc123",
 *     awsAccountId: "abc123abc123",
 * });
 * // the following assumes an AWS provider is configured
 * // Accept the peering connection request
 * const peer = new aws.ec2.VpcPeeringConnectionAccepter("peer", {
 *     vpcPeeringConnectionId: testNetworkPeering.connectionId,
 *     autoAccept: true,
 * });
 * ```
 *
 * ### Example with GCP
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as gcp from "@pulumi/gcp";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * // Container example provided but not always required, 
 * // see networkContainer documentation for details. 
 * const testNetworkContainer = new mongodbatlas.NetworkContainer("test", {
 *     atlasCidrBlock: "10.8.0.0/21",
 *     projectId: local_project_id,
 *     providerName: "GCP",
 * });
 * // Create the peering connection request
 * const testNetworkPeering = new mongodbatlas.NetworkPeering("test", {
 *     containerId: testNetworkContainer.containerId,
 *     gcpProjectId: local_GCP_PROJECT_ID,
 *     networkName: "default",
 *     projectId: local_project_id,
 *     providerName: "GCP",
 * });
 * // the following assumes a GCP provider is configured
 * const defaultNetwork = pulumi.output(gcp.compute.getNetwork({
 *     name: "default",
 * }, { async: true }));
 * // Create the GCP peer
 * const peering = new gcp.compute.NetworkPeering("peering", {
 *     network: defaultNetwork.selfLink,
 *     peerNetwork: pulumi.interpolate`https://www.googleapis.com/compute/v1/projects/${testNetworkPeering.atlasGcpProjectId}/global/networks/${testNetworkPeering.atlasVpcName}`,
 * });
 * // Create the cluster once the peering connection is completed
 * const testCluster = new mongodbatlas.Cluster("test", {
 *     autoScalingDiskGbEnabled: true,
 *     diskSizeGb: 5,
 *     mongoDbMajorVersion: "4.2",
 *     numShards: 1,
 *     projectId: local_project_id,
 *     providerInstanceSizeName: "M10",
 *     // Provider Settings "block"
 *     providerName: "GCP",
 *     providerRegionName: "US_EAST_4",
 *     replicationFactor: 3,
 * }, { dependsOn: [peering] });
 * ```
 *
 * ### Example with Azure
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * // Container example provided but not always required, 
 * // see networkContainer documentation for details. 
 * const testNetworkContainer = new mongodbatlas.NetworkContainer("test", {
 *     atlasCidrBlock: "10.8.0.0/21",
 *     projectId: local_project_id,
 *     providerName: "AZURE",
 *     region: "US_EAST_2",
 * });
 * // Create the peering connection request
 * const testNetworkPeering = new mongodbatlas.NetworkPeering("test", {
 *     azureDirectoryId: local_AZURE_DIRECTORY_ID,
 *     azureSubscriptionId: local_AZURE_SUBSCRIPTION_ID,
 *     containerId: testNetworkContainer.containerId,
 *     projectId: local_project_id,
 *     providerName: "AZURE",
 *     resourceGroupName: local_AZURE_RESOURCES_GROUP_NAME,
 *     vnetName: local_AZURE_VNET_NAME,
 * });
 * // Create the cluster once the peering connection is completed
 * const testCluster = new mongodbatlas.Cluster("test", {
 *     autoScalingDiskGbEnabled: true,
 *     mongoDbMajorVersion: "4.2",
 *     numShards: 1,
 *     projectId: local_project_id,
 *     providerDiskTypeName: "P4",
 *     providerInstanceSizeName: "M10",
 *     // Provider Settings "block"
 *     providerName: "AZURE",
 *     providerRegionName: "US_EAST_2",
 *     replicationFactor: 3,
 * }, { dependsOn: [testNetworkPeering] });
 * ```
 */
export class NetworkPeering extends pulumi.CustomResource {
    /**
     * Get an existing NetworkPeering resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: NetworkPeeringState, opts?: pulumi.CustomResourceOptions): NetworkPeering {
        return new NetworkPeering(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/networkPeering:NetworkPeering';

    /**
     * Returns true if the given object is an instance of NetworkPeering.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is NetworkPeering {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === NetworkPeering.__pulumiType;
    }

    /**
     * Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     */
    public readonly accepterRegionName!: pulumi.Output<string>;
    public readonly atlasCidrBlock!: pulumi.Output<string>;
    /**
     * The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that it is need to set up the reciprocal connection.
     */
    public readonly atlasGcpProjectId!: pulumi.Output<string>;
    public /*out*/ readonly atlasId!: pulumi.Output<string>;
    public readonly atlasVpcName!: pulumi.Output<string>;
    /**
     * AWS Account ID of the owner of the peer VPC.
     */
    public readonly awsAccountId!: pulumi.Output<string>;
    /**
     * Unique identifier for an Azure AD directory.
     */
    public readonly azureDirectoryId!: pulumi.Output<string>;
    /**
     * Unique identifier of the Azure subscription in which the VNet resides.
     */
    public readonly azureSubscriptionId!: pulumi.Output<string>;
    /**
     * Unique identifier of the Atlas network peering container.
     */
    public /*out*/ readonly connectionId!: pulumi.Output<string>;
    /**
     * Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the networkContainer resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.
     */
    public readonly containerId!: pulumi.Output<string>;
    /**
     * When `"status" : "FAILED"`, Atlas provides a description of the error.
     */
    public /*out*/ readonly errorMessage!: pulumi.Output<string>;
    /**
     * Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
     */
    public /*out*/ readonly errorState!: pulumi.Output<string>;
    /**
     * Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
     */
    public /*out*/ readonly errorStateName!: pulumi.Output<string>;
    /**
     * GCP project ID of the owner of the network peer.
     */
    public readonly gcpProjectId!: pulumi.Output<string>;
    /**
     * Name of the network peer to which Atlas connects.
     */
    public readonly networkName!: pulumi.Output<string>;
    /**
     * Unique identifier of the Atlas network peer.
     */
    public /*out*/ readonly peerId!: pulumi.Output<string>;
    /**
     * The unique ID for the MongoDB Atlas project to create the database user.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).
     */
    public readonly providerName!: pulumi.Output<string>;
    /**
     * Name of your Azure resource group.
     */
    public readonly resourceGroupName!: pulumi.Output<string>;
    /**
     * AWS VPC CIDR block or subnet.
     */
    public readonly routeTableCidrBlock!: pulumi.Output<string>;
    /**
     * Status of the Atlas network peering connection.  Azure/GCP: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING` GCP Only:  `WAITING_FOR_USER`.
     */
    public /*out*/ readonly status!: pulumi.Output<string>;
    /**
     * (AWS Only) The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
     */
    public /*out*/ readonly statusName!: pulumi.Output<string>;
    /**
     * Name of your Azure VNet.
     */
    public readonly vnetName!: pulumi.Output<string>;
    /**
     * Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the networkContainer resource).
     */
    public readonly vpcId!: pulumi.Output<string>;

    /**
     * Create a NetworkPeering resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: NetworkPeeringArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: NetworkPeeringArgs | NetworkPeeringState, opts?: pulumi.CustomResourceOptions) {
        let inputs: pulumi.Inputs = {};
        if (opts && opts.id) {
            const state = argsOrState as NetworkPeeringState | undefined;
            inputs["accepterRegionName"] = state ? state.accepterRegionName : undefined;
            inputs["atlasCidrBlock"] = state ? state.atlasCidrBlock : undefined;
            inputs["atlasGcpProjectId"] = state ? state.atlasGcpProjectId : undefined;
            inputs["atlasId"] = state ? state.atlasId : undefined;
            inputs["atlasVpcName"] = state ? state.atlasVpcName : undefined;
            inputs["awsAccountId"] = state ? state.awsAccountId : undefined;
            inputs["azureDirectoryId"] = state ? state.azureDirectoryId : undefined;
            inputs["azureSubscriptionId"] = state ? state.azureSubscriptionId : undefined;
            inputs["connectionId"] = state ? state.connectionId : undefined;
            inputs["containerId"] = state ? state.containerId : undefined;
            inputs["errorMessage"] = state ? state.errorMessage : undefined;
            inputs["errorState"] = state ? state.errorState : undefined;
            inputs["errorStateName"] = state ? state.errorStateName : undefined;
            inputs["gcpProjectId"] = state ? state.gcpProjectId : undefined;
            inputs["networkName"] = state ? state.networkName : undefined;
            inputs["peerId"] = state ? state.peerId : undefined;
            inputs["projectId"] = state ? state.projectId : undefined;
            inputs["providerName"] = state ? state.providerName : undefined;
            inputs["resourceGroupName"] = state ? state.resourceGroupName : undefined;
            inputs["routeTableCidrBlock"] = state ? state.routeTableCidrBlock : undefined;
            inputs["status"] = state ? state.status : undefined;
            inputs["statusName"] = state ? state.statusName : undefined;
            inputs["vnetName"] = state ? state.vnetName : undefined;
            inputs["vpcId"] = state ? state.vpcId : undefined;
        } else {
            const args = argsOrState as NetworkPeeringArgs | undefined;
            if (!args || args.containerId === undefined) {
                throw new Error("Missing required property 'containerId'");
            }
            if (!args || args.projectId === undefined) {
                throw new Error("Missing required property 'projectId'");
            }
            if (!args || args.providerName === undefined) {
                throw new Error("Missing required property 'providerName'");
            }
            inputs["accepterRegionName"] = args ? args.accepterRegionName : undefined;
            inputs["atlasCidrBlock"] = args ? args.atlasCidrBlock : undefined;
            inputs["atlasGcpProjectId"] = args ? args.atlasGcpProjectId : undefined;
            inputs["atlasVpcName"] = args ? args.atlasVpcName : undefined;
            inputs["awsAccountId"] = args ? args.awsAccountId : undefined;
            inputs["azureDirectoryId"] = args ? args.azureDirectoryId : undefined;
            inputs["azureSubscriptionId"] = args ? args.azureSubscriptionId : undefined;
            inputs["containerId"] = args ? args.containerId : undefined;
            inputs["gcpProjectId"] = args ? args.gcpProjectId : undefined;
            inputs["networkName"] = args ? args.networkName : undefined;
            inputs["projectId"] = args ? args.projectId : undefined;
            inputs["providerName"] = args ? args.providerName : undefined;
            inputs["resourceGroupName"] = args ? args.resourceGroupName : undefined;
            inputs["routeTableCidrBlock"] = args ? args.routeTableCidrBlock : undefined;
            inputs["vnetName"] = args ? args.vnetName : undefined;
            inputs["vpcId"] = args ? args.vpcId : undefined;
            inputs["atlasId"] = undefined /*out*/;
            inputs["connectionId"] = undefined /*out*/;
            inputs["errorMessage"] = undefined /*out*/;
            inputs["errorState"] = undefined /*out*/;
            inputs["errorStateName"] = undefined /*out*/;
            inputs["peerId"] = undefined /*out*/;
            inputs["status"] = undefined /*out*/;
            inputs["statusName"] = undefined /*out*/;
        }
        if (!opts) {
            opts = {}
        }

        if (!opts.version) {
            opts.version = utilities.getVersion();
        }
        super(NetworkPeering.__pulumiType, name, inputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering NetworkPeering resources.
 */
export interface NetworkPeeringState {
    /**
     * Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     */
    readonly accepterRegionName?: pulumi.Input<string>;
    readonly atlasCidrBlock?: pulumi.Input<string>;
    /**
     * The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that it is need to set up the reciprocal connection.
     */
    readonly atlasGcpProjectId?: pulumi.Input<string>;
    readonly atlasId?: pulumi.Input<string>;
    readonly atlasVpcName?: pulumi.Input<string>;
    /**
     * AWS Account ID of the owner of the peer VPC.
     */
    readonly awsAccountId?: pulumi.Input<string>;
    /**
     * Unique identifier for an Azure AD directory.
     */
    readonly azureDirectoryId?: pulumi.Input<string>;
    /**
     * Unique identifier of the Azure subscription in which the VNet resides.
     */
    readonly azureSubscriptionId?: pulumi.Input<string>;
    /**
     * Unique identifier of the Atlas network peering container.
     */
    readonly connectionId?: pulumi.Input<string>;
    /**
     * Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the networkContainer resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.
     */
    readonly containerId?: pulumi.Input<string>;
    /**
     * When `"status" : "FAILED"`, Atlas provides a description of the error.
     */
    readonly errorMessage?: pulumi.Input<string>;
    /**
     * Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
     */
    readonly errorState?: pulumi.Input<string>;
    /**
     * Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
     */
    readonly errorStateName?: pulumi.Input<string>;
    /**
     * GCP project ID of the owner of the network peer.
     */
    readonly gcpProjectId?: pulumi.Input<string>;
    /**
     * Name of the network peer to which Atlas connects.
     */
    readonly networkName?: pulumi.Input<string>;
    /**
     * Unique identifier of the Atlas network peer.
     */
    readonly peerId?: pulumi.Input<string>;
    /**
     * The unique ID for the MongoDB Atlas project to create the database user.
     */
    readonly projectId?: pulumi.Input<string>;
    /**
     * Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).
     */
    readonly providerName?: pulumi.Input<string>;
    /**
     * Name of your Azure resource group.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
    /**
     * AWS VPC CIDR block or subnet.
     */
    readonly routeTableCidrBlock?: pulumi.Input<string>;
    /**
     * Status of the Atlas network peering connection.  Azure/GCP: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING` GCP Only:  `WAITING_FOR_USER`.
     */
    readonly status?: pulumi.Input<string>;
    /**
     * (AWS Only) The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
     */
    readonly statusName?: pulumi.Input<string>;
    /**
     * Name of your Azure VNet.
     */
    readonly vnetName?: pulumi.Input<string>;
    /**
     * Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the networkContainer resource).
     */
    readonly vpcId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a NetworkPeering resource.
 */
export interface NetworkPeeringArgs {
    /**
     * Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     */
    readonly accepterRegionName?: pulumi.Input<string>;
    readonly atlasCidrBlock?: pulumi.Input<string>;
    /**
     * The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that it is need to set up the reciprocal connection.
     */
    readonly atlasGcpProjectId?: pulumi.Input<string>;
    readonly atlasVpcName?: pulumi.Input<string>;
    /**
     * AWS Account ID of the owner of the peer VPC.
     */
    readonly awsAccountId?: pulumi.Input<string>;
    /**
     * Unique identifier for an Azure AD directory.
     */
    readonly azureDirectoryId?: pulumi.Input<string>;
    /**
     * Unique identifier of the Azure subscription in which the VNet resides.
     */
    readonly azureSubscriptionId?: pulumi.Input<string>;
    /**
     * Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the networkContainer resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.
     */
    readonly containerId: pulumi.Input<string>;
    /**
     * GCP project ID of the owner of the network peer.
     */
    readonly gcpProjectId?: pulumi.Input<string>;
    /**
     * Name of the network peer to which Atlas connects.
     */
    readonly networkName?: pulumi.Input<string>;
    /**
     * The unique ID for the MongoDB Atlas project to create the database user.
     */
    readonly projectId: pulumi.Input<string>;
    /**
     * Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).
     */
    readonly providerName: pulumi.Input<string>;
    /**
     * Name of your Azure resource group.
     */
    readonly resourceGroupName?: pulumi.Input<string>;
    /**
     * AWS VPC CIDR block or subnet.
     */
    readonly routeTableCidrBlock?: pulumi.Input<string>;
    /**
     * Name of your Azure VNet.
     */
    readonly vnetName?: pulumi.Input<string>;
    /**
     * Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the networkContainer resource).
     */
    readonly vpcId?: pulumi.Input<string>;
}
