// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.EventTrigger` describe an Event Trigger.
 */
export function getEventTrigger(args: GetEventTriggerArgs, opts?: pulumi.InvokeOptions): Promise<GetEventTriggerResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("mongodbatlas:index/getEventTrigger:getEventTrigger", {
        "appId": args.appId,
        "projectId": args.projectId,
        "triggerId": args.triggerId,
    }, opts);
}

/**
 * A collection of arguments for invoking getEventTrigger.
 */
export interface GetEventTriggerArgs {
    /**
     * The ObjectID of your application.
     */
    appId: string;
    /**
     * The unique ID for the project to create the trigger.
     */
    projectId: string;
    /**
     * The unique ID of the trigger.
     */
    triggerId: string;
}

/**
 * A collection of values returned by getEventTrigger.
 */
export interface GetEventTriggerResult {
    readonly appId: string;
    /**
     * The name of the MongoDB collection that the trigger watches for change events.
     */
    readonly configCollection: string;
    /**
     * The name of the MongoDB database that contains the watched collection.
     */
    readonly configDatabase: string;
    /**
     * If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
     */
    readonly configFullDocument: boolean;
    readonly configFullDocumentBefore: boolean;
    /**
     * A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger.
     */
    readonly configMatch: string;
    /**
     * The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for.
     */
    readonly configOperationType: string;
    /**
     * The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for.
     */
    readonly configOperationTypes: string[];
    /**
     * A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
     */
    readonly configProject: string;
    /**
     * A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
     */
    readonly configProviders: string[];
    /**
     * A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
     */
    readonly configSchedule: string;
    readonly configScheduleType: string;
    /**
     * The ID of the MongoDB Service associated with the trigger.
     */
    readonly configServiceId: string;
    /**
     * Status of a trigger.
     */
    readonly disabled: boolean;
    /**
     * An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor.
     * * `event_processors.0.aws_eventbridge.config_account_id` - AWS Account ID.
     * * `event_processors.0.aws_eventbridge.config_region` - Region of AWS Account.
     */
    readonly eventProcessors: outputs.GetEventTriggerEventProcessor[];
    /**
     * The ID of the function associated with the trigger.
     */
    readonly functionId: string;
    /**
     * The name of the function associated with the trigger.
     */
    readonly functionName: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The name of the trigger.
     */
    readonly name: string;
    readonly projectId: string;
    readonly triggerId: string;
    /**
     * The type of the trigger.
     */
    readonly type: string;
}

export function getEventTriggerOutput(args: GetEventTriggerOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetEventTriggerResult> {
    return pulumi.output(args).apply(a => getEventTrigger(a, opts))
}

/**
 * A collection of arguments for invoking getEventTrigger.
 */
export interface GetEventTriggerOutputArgs {
    /**
     * The ObjectID of your application.
     */
    appId: pulumi.Input<string>;
    /**
     * The unique ID for the project to create the trigger.
     */
    projectId: pulumi.Input<string>;
    /**
     * The unique ID of the trigger.
     */
    triggerId: pulumi.Input<string>;
}
