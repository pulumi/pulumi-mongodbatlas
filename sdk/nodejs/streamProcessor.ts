// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as inputs from "./types/input";
import * as outputs from "./types/output";
import * as utilities from "./utilities";

/**
 * ## Example Usage
 *
 * ## Import
 *
 * Stream Processor resource can be imported using the Project ID, Stream Instance name and Stream Processor name, in the format `INSTANCE_NAME-PROJECT_ID-PROCESSOR_NAME`, e.g.
 *
 * For more information see: [MongoDB Atlas API - Stream Processor](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Streams/operation/createStreamProcessor) Documentation.
 */
export class StreamProcessor extends pulumi.CustomResource {
    /**
     * Get an existing StreamProcessor resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: StreamProcessorState, opts?: pulumi.CustomResourceOptions): StreamProcessor {
        return new StreamProcessor(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/streamProcessor:StreamProcessor';

    /**
     * Returns true if the given object is an instance of StreamProcessor.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is StreamProcessor {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === StreamProcessor.__pulumiType;
    }

    /**
     * Human-readable label that identifies the stream instance.
     */
    public readonly instanceName!: pulumi.Output<string>;
    /**
     * Optional configuration for the stream processor.
     */
    public readonly options!: pulumi.Output<outputs.StreamProcessorOptions | undefined>;
    /**
     * Stream aggregation pipeline you want to apply to your streaming data. [MongoDB Atlas Docs](https://www.mongodb.com/docs/atlas/atlas-stream-processing/stream-aggregation/#std-label-stream-aggregation) contain more information. Using jsonencode is recommended when setting this attribute. For more details see the [Aggregation Pipelines Documentation](https://www.mongodb.com/docs/atlas/atlas-stream-processing/stream-aggregation/)
     */
    public readonly pipeline!: pulumi.Output<string>;
    /**
     * Human-readable label that identifies the stream processor.
     */
    public readonly processorName!: pulumi.Output<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The state of the stream processor. Commonly occurring states are 'CREATED', 'STARTED', 'STOPPED' and 'FAILED'. Used to
     * start or stop the Stream Processor. Valid values are `CREATED`, `STARTED` or `STOPPED`. When a Stream Processor is
     * created without specifying the state, it will default to `CREATED` state. **NOTE** When creating a stream processor,
     * setting the state to STARTED can automatically start the stream processor.
     */
    public readonly state!: pulumi.Output<string>;
    /**
     * The stats associated with the stream processor. Refer to the [MongoDB Atlas
     * Docs](https://www.mongodb.com/docs/atlas/atlas-stream-processing/manage-stream-processor/#view-statistics-of-a-stream-processor)
     * for more information.
     */
    public /*out*/ readonly stats!: pulumi.Output<string>;

    /**
     * Create a StreamProcessor resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: StreamProcessorArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: StreamProcessorArgs | StreamProcessorState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as StreamProcessorState | undefined;
            resourceInputs["instanceName"] = state ? state.instanceName : undefined;
            resourceInputs["options"] = state ? state.options : undefined;
            resourceInputs["pipeline"] = state ? state.pipeline : undefined;
            resourceInputs["processorName"] = state ? state.processorName : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["state"] = state ? state.state : undefined;
            resourceInputs["stats"] = state ? state.stats : undefined;
        } else {
            const args = argsOrState as StreamProcessorArgs | undefined;
            if ((!args || args.instanceName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'instanceName'");
            }
            if ((!args || args.pipeline === undefined) && !opts.urn) {
                throw new Error("Missing required property 'pipeline'");
            }
            if ((!args || args.processorName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'processorName'");
            }
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            resourceInputs["instanceName"] = args ? args.instanceName : undefined;
            resourceInputs["options"] = args ? args.options : undefined;
            resourceInputs["pipeline"] = args ? args.pipeline : undefined;
            resourceInputs["processorName"] = args ? args.processorName : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["state"] = args ? args.state : undefined;
            resourceInputs["stats"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(StreamProcessor.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering StreamProcessor resources.
 */
export interface StreamProcessorState {
    /**
     * Human-readable label that identifies the stream instance.
     */
    instanceName?: pulumi.Input<string>;
    /**
     * Optional configuration for the stream processor.
     */
    options?: pulumi.Input<inputs.StreamProcessorOptions>;
    /**
     * Stream aggregation pipeline you want to apply to your streaming data. [MongoDB Atlas Docs](https://www.mongodb.com/docs/atlas/atlas-stream-processing/stream-aggregation/#std-label-stream-aggregation) contain more information. Using jsonencode is recommended when setting this attribute. For more details see the [Aggregation Pipelines Documentation](https://www.mongodb.com/docs/atlas/atlas-stream-processing/stream-aggregation/)
     */
    pipeline?: pulumi.Input<string>;
    /**
     * Human-readable label that identifies the stream processor.
     */
    processorName?: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     */
    projectId?: pulumi.Input<string>;
    /**
     * The state of the stream processor. Commonly occurring states are 'CREATED', 'STARTED', 'STOPPED' and 'FAILED'. Used to
     * start or stop the Stream Processor. Valid values are `CREATED`, `STARTED` or `STOPPED`. When a Stream Processor is
     * created without specifying the state, it will default to `CREATED` state. **NOTE** When creating a stream processor,
     * setting the state to STARTED can automatically start the stream processor.
     */
    state?: pulumi.Input<string>;
    /**
     * The stats associated with the stream processor. Refer to the [MongoDB Atlas
     * Docs](https://www.mongodb.com/docs/atlas/atlas-stream-processing/manage-stream-processor/#view-statistics-of-a-stream-processor)
     * for more information.
     */
    stats?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a StreamProcessor resource.
 */
export interface StreamProcessorArgs {
    /**
     * Human-readable label that identifies the stream instance.
     */
    instanceName: pulumi.Input<string>;
    /**
     * Optional configuration for the stream processor.
     */
    options?: pulumi.Input<inputs.StreamProcessorOptions>;
    /**
     * Stream aggregation pipeline you want to apply to your streaming data. [MongoDB Atlas Docs](https://www.mongodb.com/docs/atlas/atlas-stream-processing/stream-aggregation/#std-label-stream-aggregation) contain more information. Using jsonencode is recommended when setting this attribute. For more details see the [Aggregation Pipelines Documentation](https://www.mongodb.com/docs/atlas/atlas-stream-processing/stream-aggregation/)
     */
    pipeline: pulumi.Input<string>;
    /**
     * Human-readable label that identifies the stream processor.
     */
    processorName: pulumi.Input<string>;
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     */
    projectId: pulumi.Input<string>;
    /**
     * The state of the stream processor. Commonly occurring states are 'CREATED', 'STARTED', 'STOPPED' and 'FAILED'. Used to
     * start or stop the Stream Processor. Valid values are `CREATED`, `STARTED` or `STOPPED`. When a Stream Processor is
     * created without specifying the state, it will default to `CREATED` state. **NOTE** When creating a stream processor,
     * setting the state to STARTED can automatically start the stream processor.
     */
    state?: pulumi.Input<string>;
}
