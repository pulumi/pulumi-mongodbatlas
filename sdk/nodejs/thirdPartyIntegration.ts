// *** WARNING: this file was generated by pulumi-language-nodejs. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import * as utilities from "./utilities";

/**
 * ## # Resource: mongodbatlas.ThirdPartyIntegration
 *
 * `mongodbatlas.ThirdPartyIntegration` Provides a Third-Party Integration Settings for the given type.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
 *
 * > **NOTE:** Slack integrations now use the OAuth2 verification method and must be initially configured, or updated from a legacy integration, through the Atlas third-party service integrations page. Legacy tokens will soon no longer be supported.[Read more about slack setup](https://docs.atlas.mongodb.com/tutorial/third-party-service-integrations/)
 *
 * > **IMPORTANT** Each project can only have one configuration per {INTEGRATION-TYPE}.
 *
 * > **IMPORTANT:** All arguments including the secrets will be stored in the raw state as plain-text. Read more about sensitive data in state.
 *
 * ## Example Usage
 *
 * ```typescript
 * import * as pulumi from "@pulumi/pulumi";
 * import * as mongodbatlas from "@pulumi/mongodbatlas";
 *
 * const testDatadog = new mongodbatlas.ThirdPartyIntegration("test_datadog", {
 *     projectId: "<PROJECT-ID>",
 *     type: "DATADOG",
 *     apiKey: "<API-KEY>",
 *     region: "<REGION>",
 * });
 * ```
 *
 * ## Import
 *
 * Third-Party Integration Settings can be imported using project ID and the integration type, in the format `project_id`-`type`, e.g.
 *
 * ```sh
 * $ pulumi import mongodbatlas:index/thirdPartyIntegration:ThirdPartyIntegration test_datadog 1112222b3bf99403840e8934-DATADOG
 * ```
 * See [MongoDB Atlas API](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Third-Party-Integrations/operation/createThirdPartyIntegration) Documentation for more information.
 */
export class ThirdPartyIntegration extends pulumi.CustomResource {
    /**
     * Get an existing ThirdPartyIntegration resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: ThirdPartyIntegrationState, opts?: pulumi.CustomResourceOptions): ThirdPartyIntegration {
        return new ThirdPartyIntegration(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/thirdPartyIntegration:ThirdPartyIntegration';

    /**
     * Returns true if the given object is an instance of ThirdPartyIntegration.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is ThirdPartyIntegration {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === ThirdPartyIntegration.__pulumiType;
    }

    declare public readonly apiKey: pulumi.Output<string>;
    declare public readonly channelName: pulumi.Output<string>;
    declare public readonly enabled: pulumi.Output<boolean>;
    declare public readonly microsoftTeamsWebhookUrl: pulumi.Output<string>;
    declare public readonly password: pulumi.Output<string>;
    /**
     * The unique ID for the project to get all Third-Party service integrations
     */
    declare public readonly projectId: pulumi.Output<string>;
    declare public readonly region: pulumi.Output<string>;
    declare public readonly routingKey: pulumi.Output<string>;
    declare public readonly secret: pulumi.Output<string | undefined>;
    declare public readonly sendCollectionLatencyMetrics: pulumi.Output<boolean>;
    declare public readonly sendDatabaseMetrics: pulumi.Output<boolean>;
    declare public readonly sendUserProvidedResourceTags: pulumi.Output<boolean>;
    declare public readonly serviceDiscovery: pulumi.Output<string>;
    declare public readonly serviceKey: pulumi.Output<string>;
    declare public readonly teamName: pulumi.Output<string>;
    /**
     * Third-Party Integration Settings type 
     * * PAGER_DUTY
     * * DATADOG
     * * OPS_GENIE
     * * VICTOR_OPS
     * * WEBHOOK
     * * MICROSOFT_TEAMS
     * * PROMETHEUS
     *
     *
     * * `PAGER_DUTY`
     */
    declare public readonly type: pulumi.Output<string>;
    declare public readonly url: pulumi.Output<string>;
    declare public readonly userName: pulumi.Output<string>;

    /**
     * Create a ThirdPartyIntegration resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: ThirdPartyIntegrationArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: ThirdPartyIntegrationArgs | ThirdPartyIntegrationState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as ThirdPartyIntegrationState | undefined;
            resourceInputs["apiKey"] = state?.apiKey;
            resourceInputs["channelName"] = state?.channelName;
            resourceInputs["enabled"] = state?.enabled;
            resourceInputs["microsoftTeamsWebhookUrl"] = state?.microsoftTeamsWebhookUrl;
            resourceInputs["password"] = state?.password;
            resourceInputs["projectId"] = state?.projectId;
            resourceInputs["region"] = state?.region;
            resourceInputs["routingKey"] = state?.routingKey;
            resourceInputs["secret"] = state?.secret;
            resourceInputs["sendCollectionLatencyMetrics"] = state?.sendCollectionLatencyMetrics;
            resourceInputs["sendDatabaseMetrics"] = state?.sendDatabaseMetrics;
            resourceInputs["sendUserProvidedResourceTags"] = state?.sendUserProvidedResourceTags;
            resourceInputs["serviceDiscovery"] = state?.serviceDiscovery;
            resourceInputs["serviceKey"] = state?.serviceKey;
            resourceInputs["teamName"] = state?.teamName;
            resourceInputs["type"] = state?.type;
            resourceInputs["url"] = state?.url;
            resourceInputs["userName"] = state?.userName;
        } else {
            const args = argsOrState as ThirdPartyIntegrationArgs | undefined;
            if (args?.projectId === undefined && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if (args?.type === undefined && !opts.urn) {
                throw new Error("Missing required property 'type'");
            }
            resourceInputs["apiKey"] = args?.apiKey ? pulumi.secret(args.apiKey) : undefined;
            resourceInputs["channelName"] = args?.channelName;
            resourceInputs["enabled"] = args?.enabled;
            resourceInputs["microsoftTeamsWebhookUrl"] = args?.microsoftTeamsWebhookUrl ? pulumi.secret(args.microsoftTeamsWebhookUrl) : undefined;
            resourceInputs["password"] = args?.password ? pulumi.secret(args.password) : undefined;
            resourceInputs["projectId"] = args?.projectId;
            resourceInputs["region"] = args?.region;
            resourceInputs["routingKey"] = args?.routingKey ? pulumi.secret(args.routingKey) : undefined;
            resourceInputs["secret"] = args?.secret ? pulumi.secret(args.secret) : undefined;
            resourceInputs["sendCollectionLatencyMetrics"] = args?.sendCollectionLatencyMetrics;
            resourceInputs["sendDatabaseMetrics"] = args?.sendDatabaseMetrics;
            resourceInputs["sendUserProvidedResourceTags"] = args?.sendUserProvidedResourceTags;
            resourceInputs["serviceDiscovery"] = args?.serviceDiscovery ? pulumi.secret(args.serviceDiscovery) : undefined;
            resourceInputs["serviceKey"] = args?.serviceKey ? pulumi.secret(args.serviceKey) : undefined;
            resourceInputs["teamName"] = args?.teamName;
            resourceInputs["type"] = args?.type;
            resourceInputs["url"] = args?.url;
            resourceInputs["userName"] = args?.userName ? pulumi.secret(args.userName) : undefined;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        const secretOpts = { additionalSecretOutputs: ["apiKey", "microsoftTeamsWebhookUrl", "password", "routingKey", "secret", "serviceDiscovery", "serviceKey", "userName"] };
        opts = pulumi.mergeOptions(opts, secretOpts);
        super(ThirdPartyIntegration.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering ThirdPartyIntegration resources.
 */
export interface ThirdPartyIntegrationState {
    apiKey?: pulumi.Input<string>;
    channelName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    microsoftTeamsWebhookUrl?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    /**
     * The unique ID for the project to get all Third-Party service integrations
     */
    projectId?: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routingKey?: pulumi.Input<string>;
    secret?: pulumi.Input<string>;
    sendCollectionLatencyMetrics?: pulumi.Input<boolean>;
    sendDatabaseMetrics?: pulumi.Input<boolean>;
    sendUserProvidedResourceTags?: pulumi.Input<boolean>;
    serviceDiscovery?: pulumi.Input<string>;
    serviceKey?: pulumi.Input<string>;
    teamName?: pulumi.Input<string>;
    /**
     * Third-Party Integration Settings type 
     * * PAGER_DUTY
     * * DATADOG
     * * OPS_GENIE
     * * VICTOR_OPS
     * * WEBHOOK
     * * MICROSOFT_TEAMS
     * * PROMETHEUS
     *
     *
     * * `PAGER_DUTY`
     */
    type?: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a ThirdPartyIntegration resource.
 */
export interface ThirdPartyIntegrationArgs {
    apiKey?: pulumi.Input<string>;
    channelName?: pulumi.Input<string>;
    enabled?: pulumi.Input<boolean>;
    microsoftTeamsWebhookUrl?: pulumi.Input<string>;
    password?: pulumi.Input<string>;
    /**
     * The unique ID for the project to get all Third-Party service integrations
     */
    projectId: pulumi.Input<string>;
    region?: pulumi.Input<string>;
    routingKey?: pulumi.Input<string>;
    secret?: pulumi.Input<string>;
    sendCollectionLatencyMetrics?: pulumi.Input<boolean>;
    sendDatabaseMetrics?: pulumi.Input<boolean>;
    sendUserProvidedResourceTags?: pulumi.Input<boolean>;
    serviceDiscovery?: pulumi.Input<string>;
    serviceKey?: pulumi.Input<string>;
    teamName?: pulumi.Input<string>;
    /**
     * Third-Party Integration Settings type 
     * * PAGER_DUTY
     * * DATADOG
     * * OPS_GENIE
     * * VICTOR_OPS
     * * WEBHOOK
     * * MICROSOFT_TEAMS
     * * PROMETHEUS
     *
     *
     * * `PAGER_DUTY`
     */
    type: pulumi.Input<string>;
    url?: pulumi.Input<string>;
    userName?: pulumi.Input<string>;
}
