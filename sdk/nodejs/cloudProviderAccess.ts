// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * ## Import
 *
 * The Cloud Provider Access resource can be imported using project ID and the provider name and mongodbatlas role id, in the format `project_id`-`provider_name`-`role_id`, e.g.
 *
 * ```sh
 *  $ pulumi import mongodbatlas:index/cloudProviderAccess:CloudProviderAccess my_role 1112222b3bf99403840e8934-AWS-5fc17d476f7a33224f5b224e
 * ```
 */
export class CloudProviderAccess extends pulumi.CustomResource {
    /**
     * Get an existing CloudProviderAccess resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state Any extra arguments used during the lookup.
     * @param opts Optional settings to control the behavior of the CustomResource.
     */
    public static get(name: string, id: pulumi.Input<pulumi.ID>, state?: CloudProviderAccessState, opts?: pulumi.CustomResourceOptions): CloudProviderAccess {
        return new CloudProviderAccess(name, <any>state, { ...opts, id: id });
    }

    /** @internal */
    public static readonly __pulumiType = 'mongodbatlas:index/cloudProviderAccess:CloudProviderAccess';

    /**
     * Returns true if the given object is an instance of CloudProviderAccess.  This is designed to work even
     * when multiple copies of the Pulumi SDK have been loaded into the same process.
     */
    public static isInstance(obj: any): obj is CloudProviderAccess {
        if (obj === undefined || obj === null) {
            return false;
        }
        return obj['__pulumiType'] === CloudProviderAccess.__pulumiType;
    }

    /**
     * Unique external ID Atlas uses when assuming the IAM role in your AWS account.
     */
    public /*out*/ readonly atlasAssumedRoleExternalId!: pulumi.Output<string>;
    /**
     * ARN associated with the Atlas AWS account used to assume IAM roles in your AWS account.
     */
    public /*out*/ readonly atlasAwsAccountArn!: pulumi.Output<string>;
    /**
     * Date on which this role was authorized.
     */
    public /*out*/ readonly authorizedDate!: pulumi.Output<string>;
    /**
     * Date on which this role was created.
     */
    public /*out*/ readonly createdDate!: pulumi.Output<string>;
    /**
     * Atlas features this AWS IAM role is linked to.
     */
    public /*out*/ readonly featureUsages!: pulumi.Output<outputs.CloudProviderAccessFeatureUsage[]>;
    /**
     * ARN of the IAM Role that Atlas assumes when accessing resources in your AWS account. This value is required after the creation (register of the role) as part of [Set Up Unified AWS Access](https://docs.atlas.mongodb.com/security/set-up-unified-aws-access/#set-up-unified-aws-access).
     */
    public readonly iamAssumedRoleArn!: pulumi.Output<string | undefined>;
    /**
     * The unique ID for the project
     */
    public readonly projectId!: pulumi.Output<string>;
    /**
     * The cloud provider for which to create a new role. Currently only AWS is supported.
     */
    public readonly providerName!: pulumi.Output<string>;
    /**
     * Unique ID of this role returned by mongodb atlas api
     */
    public /*out*/ readonly roleId!: pulumi.Output<string>;

    /**
     * Create a CloudProviderAccess resource with the given unique name, arguments, and options.
     *
     * @param name The _unique_ name of the resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param opts A bag of options that control this resource's behavior.
     */
    constructor(name: string, args: CloudProviderAccessArgs, opts?: pulumi.CustomResourceOptions)
    constructor(name: string, argsOrState?: CloudProviderAccessArgs | CloudProviderAccessState, opts?: pulumi.CustomResourceOptions) {
        let resourceInputs: pulumi.Inputs = {};
        opts = opts || {};
        if (opts.id) {
            const state = argsOrState as CloudProviderAccessState | undefined;
            resourceInputs["atlasAssumedRoleExternalId"] = state ? state.atlasAssumedRoleExternalId : undefined;
            resourceInputs["atlasAwsAccountArn"] = state ? state.atlasAwsAccountArn : undefined;
            resourceInputs["authorizedDate"] = state ? state.authorizedDate : undefined;
            resourceInputs["createdDate"] = state ? state.createdDate : undefined;
            resourceInputs["featureUsages"] = state ? state.featureUsages : undefined;
            resourceInputs["iamAssumedRoleArn"] = state ? state.iamAssumedRoleArn : undefined;
            resourceInputs["projectId"] = state ? state.projectId : undefined;
            resourceInputs["providerName"] = state ? state.providerName : undefined;
            resourceInputs["roleId"] = state ? state.roleId : undefined;
        } else {
            const args = argsOrState as CloudProviderAccessArgs | undefined;
            if ((!args || args.projectId === undefined) && !opts.urn) {
                throw new Error("Missing required property 'projectId'");
            }
            if ((!args || args.providerName === undefined) && !opts.urn) {
                throw new Error("Missing required property 'providerName'");
            }
            resourceInputs["iamAssumedRoleArn"] = args ? args.iamAssumedRoleArn : undefined;
            resourceInputs["projectId"] = args ? args.projectId : undefined;
            resourceInputs["providerName"] = args ? args.providerName : undefined;
            resourceInputs["atlasAssumedRoleExternalId"] = undefined /*out*/;
            resourceInputs["atlasAwsAccountArn"] = undefined /*out*/;
            resourceInputs["authorizedDate"] = undefined /*out*/;
            resourceInputs["createdDate"] = undefined /*out*/;
            resourceInputs["featureUsages"] = undefined /*out*/;
            resourceInputs["roleId"] = undefined /*out*/;
        }
        opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
        super(CloudProviderAccess.__pulumiType, name, resourceInputs, opts);
    }
}

/**
 * Input properties used for looking up and filtering CloudProviderAccess resources.
 */
export interface CloudProviderAccessState {
    /**
     * Unique external ID Atlas uses when assuming the IAM role in your AWS account.
     */
    atlasAssumedRoleExternalId?: pulumi.Input<string>;
    /**
     * ARN associated with the Atlas AWS account used to assume IAM roles in your AWS account.
     */
    atlasAwsAccountArn?: pulumi.Input<string>;
    /**
     * Date on which this role was authorized.
     */
    authorizedDate?: pulumi.Input<string>;
    /**
     * Date on which this role was created.
     */
    createdDate?: pulumi.Input<string>;
    /**
     * Atlas features this AWS IAM role is linked to.
     */
    featureUsages?: pulumi.Input<pulumi.Input<inputs.CloudProviderAccessFeatureUsage>[]>;
    /**
     * ARN of the IAM Role that Atlas assumes when accessing resources in your AWS account. This value is required after the creation (register of the role) as part of [Set Up Unified AWS Access](https://docs.atlas.mongodb.com/security/set-up-unified-aws-access/#set-up-unified-aws-access).
     */
    iamAssumedRoleArn?: pulumi.Input<string>;
    /**
     * The unique ID for the project
     */
    projectId?: pulumi.Input<string>;
    /**
     * The cloud provider for which to create a new role. Currently only AWS is supported.
     */
    providerName?: pulumi.Input<string>;
    /**
     * Unique ID of this role returned by mongodb atlas api
     */
    roleId?: pulumi.Input<string>;
}

/**
 * The set of arguments for constructing a CloudProviderAccess resource.
 */
export interface CloudProviderAccessArgs {
    /**
     * ARN of the IAM Role that Atlas assumes when accessing resources in your AWS account. This value is required after the creation (register of the role) as part of [Set Up Unified AWS Access](https://docs.atlas.mongodb.com/security/set-up-unified-aws-access/#set-up-unified-aws-access).
     */
    iamAssumedRoleArn?: pulumi.Input<string>;
    /**
     * The unique ID for the project
     */
    projectId: pulumi.Input<string>;
    /**
     * The cloud provider for which to create a new role. Currently only AWS is supported.
     */
    providerName: pulumi.Input<string>;
}
