// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

import * as pulumi from "@pulumi/pulumi";
import { input as inputs, output as outputs } from "./types";
import * as utilities from "./utilities";

/**
 * `mongodbatlas.LdapConfiguration` describes a LDAP Configuration.
 *
 * > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
 */
export function getLdapConfiguration(args: GetLdapConfigurationArgs, opts?: pulumi.InvokeOptions): Promise<GetLdapConfigurationResult> {
    if (!opts) {
        opts = {}
    }

    opts = pulumi.mergeOptions(utilities.resourceOptsDefaults(), opts);
    return pulumi.runtime.invoke("mongodbatlas:index/getLdapConfiguration:getLdapConfiguration", {
        "projectId": args.projectId,
    }, opts);
}

/**
 * A collection of arguments for invoking getLdapConfiguration.
 */
export interface GetLdapConfigurationArgs {
    /**
     * Identifier for the Atlas project associated with the LDAP over TLS/SSL configuration.
     */
    projectId: string;
}

/**
 * A collection of values returned by getLdapConfiguration.
 */
export interface GetLdapConfigurationResult {
    /**
     * Specifies whether user authentication with LDAP is enabled.
     */
    readonly authenticationEnabled: boolean;
    /**
     * Specifies whether user authorization with LDAP is enabled.
     */
    readonly authorizationEnabled: boolean;
    /**
     * An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs.
     */
    readonly authzQueryTemplate: string;
    /**
     * The password used to authenticate the `bindUsername`.
     */
    readonly bindPassword: string;
    /**
     * The user DN that Atlas uses to connect to the LDAP server.
     */
    readonly bindUsername: string;
    /**
     * CA certificate used to verify the identify of the LDAP server.
     */
    readonly caCertificate: string;
    /**
     * (Required) The hostname or IP address of the LDAP server.
     */
    readonly hostname: string;
    /**
     * The provider-assigned unique ID for this managed resource.
     */
    readonly id: string;
    /**
     * The port to which the LDAP server listens for client connections.
     */
    readonly port: number;
    readonly projectId: string;
    /**
     * Maps an LDAP username for authentication to an LDAP Distinguished Name (DN).
     * * `user_to_dn_mapping.0.match` - A regular expression to match against a provided LDAP username.
     * * `user_to_dn_mapping.0.substitution` - An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name.
     * * `user_to_dn_mapping.0.ldap_query` - An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516.
     */
    readonly userToDnMappings: outputs.GetLdapConfigurationUserToDnMapping[];
}

export function getLdapConfigurationOutput(args: GetLdapConfigurationOutputArgs, opts?: pulumi.InvokeOptions): pulumi.Output<GetLdapConfigurationResult> {
    return pulumi.output(args).apply(a => getLdapConfiguration(a, opts))
}

/**
 * A collection of arguments for invoking getLdapConfiguration.
 */
export interface GetLdapConfigurationOutputArgs {
    /**
     * Identifier for the Atlas project associated with the LDAP over TLS/SSL configuration.
     */
    projectId: pulumi.Input<string>;
}
