// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// ## # Resource: mongodbatlas.AlertConfiguration
    /// 
    /// `mongodbatlas.AlertConfiguration` provides an Alert Configuration resource to define the conditions that trigger an alert and the methods of notification within a MongoDB Atlas project.
    /// 
    /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Mongodbatlas.AlertConfiguration("test", new()
    ///     {
    ///         ProjectId = "&lt;PROJECT-ID&gt;",
    ///         EventType = "OUTSIDE_METRIC_THRESHOLD",
    ///         Enabled = true,
    ///         Notifications = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AlertConfigurationNotificationArgs
    ///             {
    ///                 TypeName = "GROUP",
    ///                 IntervalMin = 5,
    ///                 DelayMin = 0,
    ///                 SmsEnabled = false,
    ///                 EmailEnabled = true,
    ///                 Roles = new[]
    ///                 {
    ///                     "GROUP_CLUSTER_MANAGER",
    ///                 },
    ///             },
    ///         },
    ///         Matchers = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AlertConfigurationMatcherArgs
    ///             {
    ///                 FieldName = "HOSTNAME_AND_PORT",
    ///                 Operator = "EQUALS",
    ///                 Value = "SECONDARY",
    ///             },
    ///         },
    ///         MetricThresholdConfig = new Mongodbatlas.Inputs.AlertConfigurationMetricThresholdConfigArgs
    ///         {
    ///             MetricName = "ASSERT_REGULAR",
    ///             Operator = "LESS_THAN",
    ///             Threshold = 99,
    ///             Units = "RAW",
    ///             Mode = "AVERAGE",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// &gt; **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Mongodbatlas.AlertConfiguration("test", new()
    ///     {
    ///         ProjectId = "&lt;PROJECT-ID&gt;",
    ///         EventType = "REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
    ///         Enabled = true,
    ///         Notifications = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AlertConfigurationNotificationArgs
    ///             {
    ///                 TypeName = "GROUP",
    ///                 IntervalMin = 5,
    ///                 DelayMin = 0,
    ///                 SmsEnabled = false,
    ///                 EmailEnabled = true,
    ///                 Roles = new[]
    ///                 {
    ///                     "GROUP_CLUSTER_MANAGER",
    ///                 },
    ///             },
    ///         },
    ///         Matchers = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AlertConfigurationMatcherArgs
    ///             {
    ///                 FieldName = "CLUSTER_NAME",
    ///                 Operator = "EQUALS",
    ///                 Value = "my-cluster",
    ///             },
    ///         },
    ///         ThresholdConfig = new Mongodbatlas.Inputs.AlertConfigurationThresholdConfigArgs
    ///         {
    ///             Operator = "LESS_THAN",
    ///             Threshold = 1,
    ///             Units = "HOURS",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Create an alert with two notifications using Email and SMS
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Mongodbatlas.AlertConfiguration("test", new()
    ///     {
    ///         ProjectId = "PROJECT ID",
    ///         EventType = "OUTSIDE_METRIC_THRESHOLD",
    ///         Enabled = true,
    ///         Notifications = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AlertConfigurationNotificationArgs
    ///             {
    ///                 TypeName = "GROUP",
    ///                 IntervalMin = 5,
    ///                 DelayMin = 0,
    ///                 SmsEnabled = false,
    ///                 EmailEnabled = true,
    ///                 Roles = new[]
    ///                 {
    ///                     "GROUP_DATA_ACCESS_READ_ONLY",
    ///                     "GROUP_CLUSTER_MANAGER",
    ///                     "GROUP_DATA_ACCESS_ADMIN",
    ///                 },
    ///             },
    ///             new Mongodbatlas.Inputs.AlertConfigurationNotificationArgs
    ///             {
    ///                 TypeName = "ORG",
    ///                 IntervalMin = 5,
    ///                 DelayMin = 0,
    ///                 SmsEnabled = true,
    ///                 EmailEnabled = false,
    ///             },
    ///         },
    ///         Matchers = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AlertConfigurationMatcherArgs
    ///             {
    ///                 FieldName = "HOSTNAME_AND_PORT",
    ///                 Operator = "EQUALS",
    ///                 Value = "SECONDARY",
    ///             },
    ///         },
    ///         MetricThresholdConfig = new Mongodbatlas.Inputs.AlertConfigurationMetricThresholdConfigArgs
    ///         {
    ///             MetricName = "ASSERT_REGULAR",
    ///             Operator = "LESS_THAN",
    ///             Threshold = 99,
    ///             Units = "RAW",
    ///             Mode = "AVERAGE",
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Create third party notification using credentials from existing third party integration
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = Mongodbatlas.GetThirdPartyIntegration.Invoke(new()
    ///     {
    ///         ProjectId = "PROJECT ID",
    ///         Type = "PAGER_DUTY",
    ///     });
    /// 
    ///     var testAlertConfiguration = new Mongodbatlas.AlertConfiguration("test", new()
    ///     {
    ///         ProjectId = "PROJECT ID",
    ///         Enabled = true,
    ///         EventType = "USERS_WITHOUT_MULTI_FACTOR_AUTH",
    ///         Notifications = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AlertConfigurationNotificationArgs
    ///             {
    ///                 TypeName = "PAGER_DUTY",
    ///                 IntegrationId = test.Apply(getThirdPartyIntegrationResult =&gt; getThirdPartyIntegrationResult.Id),
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Alert Configuration can be imported using the `project_id-alert_configuration_id`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import mongodbatlas:index/alertConfiguration:AlertConfiguration test 5d0f1f74cf09a29120e123cd-5d0f1f74cf09a29120e1fscg
    /// ```
    /// 
    /// **NOTE**: Third-party notifications will not contain their respective credentials as these are sensitive attributes. If you wish to perform updates on these notifications without providing the original credentials, the corresponding `notifier_id` attribute must be provided instead.
    /// 
    /// For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/alert-configurations/)
    /// </summary>
    [MongodbatlasResourceType("mongodbatlas:index/alertConfiguration:AlertConfiguration")]
    public partial class AlertConfiguration : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Unique identifier for the alert configuration.
        /// </summary>
        [Output("alertConfigurationId")]
        public Output<string> AlertConfigurationId { get; private set; } = null!;

        /// <summary>
        /// Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
        /// </summary>
        [Output("created")]
        public Output<string> Created { get; private set; } = null!;

        /// <summary>
        /// It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The type of event that will trigger an alert.
        /// 
        /// &gt; ***IMPORTANT:*** Event Type has many possible values. Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Alert-Configurations/operation/createAlertConfiguration) and checking the latest eventTypeName options.
        /// 
        /// 
        /// &gt; **NOTE:** If `event_type` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metric_threshold_config` field must also be configured.
        /// </summary>
        [Output("eventType")]
        public Output<string> EventType { get; private set; } = null!;

        [Output("matchers")]
        public Output<ImmutableArray<Outputs.AlertConfigurationMatcher>> Matchers { get; private set; } = null!;

        [Output("metricThresholdConfig")]
        public Output<Outputs.AlertConfigurationMetricThresholdConfig?> MetricThresholdConfig { get; private set; } = null!;

        [Output("notifications")]
        public Output<ImmutableArray<Outputs.AlertConfigurationNotification>> Notifications { get; private set; } = null!;

        /// <summary>
        /// The ID of the project where the alert configuration will create.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        [Output("thresholdConfig")]
        public Output<Outputs.AlertConfigurationThresholdConfig?> ThresholdConfig { get; private set; } = null!;

        /// <summary>
        /// Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
        /// </summary>
        [Output("updated")]
        public Output<string> Updated { get; private set; } = null!;


        /// <summary>
        /// Create a AlertConfiguration resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AlertConfiguration(string name, AlertConfigurationArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/alertConfiguration:AlertConfiguration", name, args ?? new AlertConfigurationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AlertConfiguration(string name, Input<string> id, AlertConfigurationState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/alertConfiguration:AlertConfiguration", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AlertConfiguration resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AlertConfiguration Get(string name, Input<string> id, AlertConfigurationState? state = null, CustomResourceOptions? options = null)
        {
            return new AlertConfiguration(name, id, state, options);
        }
    }

    public sealed class AlertConfigurationArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The type of event that will trigger an alert.
        /// 
        /// &gt; ***IMPORTANT:*** Event Type has many possible values. Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Alert-Configurations/operation/createAlertConfiguration) and checking the latest eventTypeName options.
        /// 
        /// 
        /// &gt; **NOTE:** If `event_type` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metric_threshold_config` field must also be configured.
        /// </summary>
        [Input("eventType", required: true)]
        public Input<string> EventType { get; set; } = null!;

        [Input("matchers")]
        private InputList<Inputs.AlertConfigurationMatcherArgs>? _matchers;
        public InputList<Inputs.AlertConfigurationMatcherArgs> Matchers
        {
            get => _matchers ?? (_matchers = new InputList<Inputs.AlertConfigurationMatcherArgs>());
            set => _matchers = value;
        }

        [Input("metricThresholdConfig")]
        public Input<Inputs.AlertConfigurationMetricThresholdConfigArgs>? MetricThresholdConfig { get; set; }

        [Input("notifications")]
        private InputList<Inputs.AlertConfigurationNotificationArgs>? _notifications;
        public InputList<Inputs.AlertConfigurationNotificationArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.AlertConfigurationNotificationArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// The ID of the project where the alert configuration will create.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("thresholdConfig")]
        public Input<Inputs.AlertConfigurationThresholdConfigArgs>? ThresholdConfig { get; set; }

        public AlertConfigurationArgs()
        {
        }
        public static new AlertConfigurationArgs Empty => new AlertConfigurationArgs();
    }

    public sealed class AlertConfigurationState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique identifier for the alert configuration.
        /// </summary>
        [Input("alertConfigurationId")]
        public Input<string>? AlertConfigurationId { get; set; }

        /// <summary>
        /// Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
        /// </summary>
        [Input("created")]
        public Input<string>? Created { get; set; }

        /// <summary>
        /// It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The type of event that will trigger an alert.
        /// 
        /// &gt; ***IMPORTANT:*** Event Type has many possible values. Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Alert-Configurations/operation/createAlertConfiguration) and checking the latest eventTypeName options.
        /// 
        /// 
        /// &gt; **NOTE:** If `event_type` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metric_threshold_config` field must also be configured.
        /// </summary>
        [Input("eventType")]
        public Input<string>? EventType { get; set; }

        [Input("matchers")]
        private InputList<Inputs.AlertConfigurationMatcherGetArgs>? _matchers;
        public InputList<Inputs.AlertConfigurationMatcherGetArgs> Matchers
        {
            get => _matchers ?? (_matchers = new InputList<Inputs.AlertConfigurationMatcherGetArgs>());
            set => _matchers = value;
        }

        [Input("metricThresholdConfig")]
        public Input<Inputs.AlertConfigurationMetricThresholdConfigGetArgs>? MetricThresholdConfig { get; set; }

        [Input("notifications")]
        private InputList<Inputs.AlertConfigurationNotificationGetArgs>? _notifications;
        public InputList<Inputs.AlertConfigurationNotificationGetArgs> Notifications
        {
            get => _notifications ?? (_notifications = new InputList<Inputs.AlertConfigurationNotificationGetArgs>());
            set => _notifications = value;
        }

        /// <summary>
        /// The ID of the project where the alert configuration will create.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("thresholdConfig")]
        public Input<Inputs.AlertConfigurationThresholdConfigGetArgs>? ThresholdConfig { get; set; }

        /// <summary>
        /// Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
        /// </summary>
        [Input("updated")]
        public Input<string>? Updated { get; set; }

        public AlertConfigurationState()
        {
        }
        public static new AlertConfigurationState Empty => new AlertConfigurationState();
    }
}
