// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetStreamPrivatelinkEndpoints
    {
        /// <summary>
        /// ## # Data Source: mongodbatlas.getStreamPrivatelinkEndpoints
        /// 
        /// `mongodbatlas.getStreamPrivatelinkEndpoints` describes a Privatelink Endpoint for Streams.
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// 
        /// ### AWS S3 Privatelink
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // S3 bucket for stream data
        ///     var streamBucket = new Aws.Index.S3Bucket("stream_bucket", new()
        ///     {
        ///         Bucket = s3BucketName,
        ///         ForceDestroy = true,
        ///     });
        /// 
        ///     var streamBucketVersioning = new Aws.Index.S3BucketVersioning("stream_bucket_versioning", new()
        ///     {
        ///         Bucket = streamBucket.Id,
        ///         VersioningConfiguration = new[]
        ///         {
        ///             
        ///             {
        ///                 { "status", "Enabled" },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var streamBucketEncryption = new Aws.Index.S3BucketServerSideEncryptionConfiguration("stream_bucket_encryption", new()
        ///     {
        ///         Bucket = streamBucket.Id,
        ///         Rule = new[]
        ///         {
        ///             
        ///             {
        ///                 { "applyServerSideEncryptionByDefault", new[]
        ///                 {
        ///                     
        ///                     {
        ///                         { "sseAlgorithm", "AES256" },
        ///                     },
        ///                 } },
        ///             },
        ///         },
        ///     });
        /// 
        ///     // PrivateLink for S3
        ///     var @this = new Mongodbatlas.StreamPrivatelinkEndpoint("this", new()
        ///     {
        ///         ProjectId = projectId,
        ///         ProviderName = "AWS",
        ///         Vendor = "S3",
        ///         Region = region,
        ///         ServiceEndpointId = serviceEndpointId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["privatelinkEndpointId"] = @this.Id,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamPrivatelinkEndpointsResult> InvokeAsync(GetStreamPrivatelinkEndpointsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamPrivatelinkEndpointsResult>("mongodbatlas:index/getStreamPrivatelinkEndpoints:getStreamPrivatelinkEndpoints", args ?? new GetStreamPrivatelinkEndpointsArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.getStreamPrivatelinkEndpoints
        /// 
        /// `mongodbatlas.getStreamPrivatelinkEndpoints` describes a Privatelink Endpoint for Streams.
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// 
        /// ### AWS S3 Privatelink
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // S3 bucket for stream data
        ///     var streamBucket = new Aws.Index.S3Bucket("stream_bucket", new()
        ///     {
        ///         Bucket = s3BucketName,
        ///         ForceDestroy = true,
        ///     });
        /// 
        ///     var streamBucketVersioning = new Aws.Index.S3BucketVersioning("stream_bucket_versioning", new()
        ///     {
        ///         Bucket = streamBucket.Id,
        ///         VersioningConfiguration = new[]
        ///         {
        ///             
        ///             {
        ///                 { "status", "Enabled" },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var streamBucketEncryption = new Aws.Index.S3BucketServerSideEncryptionConfiguration("stream_bucket_encryption", new()
        ///     {
        ///         Bucket = streamBucket.Id,
        ///         Rule = new[]
        ///         {
        ///             
        ///             {
        ///                 { "applyServerSideEncryptionByDefault", new[]
        ///                 {
        ///                     
        ///                     {
        ///                         { "sseAlgorithm", "AES256" },
        ///                     },
        ///                 } },
        ///             },
        ///         },
        ///     });
        /// 
        ///     // PrivateLink for S3
        ///     var @this = new Mongodbatlas.StreamPrivatelinkEndpoint("this", new()
        ///     {
        ///         ProjectId = projectId,
        ///         ProviderName = "AWS",
        ///         Vendor = "S3",
        ///         Region = region,
        ///         ServiceEndpointId = serviceEndpointId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["privatelinkEndpointId"] = @this.Id,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamPrivatelinkEndpointsResult> Invoke(GetStreamPrivatelinkEndpointsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamPrivatelinkEndpointsResult>("mongodbatlas:index/getStreamPrivatelinkEndpoints:getStreamPrivatelinkEndpoints", args ?? new GetStreamPrivatelinkEndpointsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.getStreamPrivatelinkEndpoints
        /// 
        /// `mongodbatlas.getStreamPrivatelinkEndpoints` describes a Privatelink Endpoint for Streams.
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// 
        /// ### AWS S3 Privatelink
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // S3 bucket for stream data
        ///     var streamBucket = new Aws.Index.S3Bucket("stream_bucket", new()
        ///     {
        ///         Bucket = s3BucketName,
        ///         ForceDestroy = true,
        ///     });
        /// 
        ///     var streamBucketVersioning = new Aws.Index.S3BucketVersioning("stream_bucket_versioning", new()
        ///     {
        ///         Bucket = streamBucket.Id,
        ///         VersioningConfiguration = new[]
        ///         {
        ///             
        ///             {
        ///                 { "status", "Enabled" },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var streamBucketEncryption = new Aws.Index.S3BucketServerSideEncryptionConfiguration("stream_bucket_encryption", new()
        ///     {
        ///         Bucket = streamBucket.Id,
        ///         Rule = new[]
        ///         {
        ///             
        ///             {
        ///                 { "applyServerSideEncryptionByDefault", new[]
        ///                 {
        ///                     
        ///                     {
        ///                         { "sseAlgorithm", "AES256" },
        ///                     },
        ///                 } },
        ///             },
        ///         },
        ///     });
        /// 
        ///     // PrivateLink for S3
        ///     var @this = new Mongodbatlas.StreamPrivatelinkEndpoint("this", new()
        ///     {
        ///         ProjectId = projectId,
        ///         ProviderName = "AWS",
        ///         Vendor = "S3",
        ///         Region = region,
        ///         ServiceEndpointId = serviceEndpointId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["privatelinkEndpointId"] = @this.Id,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamPrivatelinkEndpointsResult> Invoke(GetStreamPrivatelinkEndpointsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamPrivatelinkEndpointsResult>("mongodbatlas:index/getStreamPrivatelinkEndpoints:getStreamPrivatelinkEndpoints", args ?? new GetStreamPrivatelinkEndpointsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamPrivatelinkEndpointsArgs : global::Pulumi.InvokeArgs
    {
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetStreamPrivatelinkEndpointsArgs()
        {
        }
        public static new GetStreamPrivatelinkEndpointsArgs Empty => new GetStreamPrivatelinkEndpointsArgs();
    }

    public sealed class GetStreamPrivatelinkEndpointsInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetStreamPrivatelinkEndpointsInvokeArgs()
        {
        }
        public static new GetStreamPrivatelinkEndpointsInvokeArgs Empty => new GetStreamPrivatelinkEndpointsInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamPrivatelinkEndpointsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ProjectId;
        public readonly ImmutableArray<Outputs.GetStreamPrivatelinkEndpointsResultResult> Results;

        [OutputConstructor]
        private GetStreamPrivatelinkEndpointsResult(
            string id,

            string projectId,

            ImmutableArray<Outputs.GetStreamPrivatelinkEndpointsResultResult> results)
        {
            Id = id;
            ProjectId = projectId;
            Results = results;
        }
    }
}
