// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetAdvancedClusters
    {
        /// <summary>
        /// `mongodbatlas.Cluster` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
        /// 
        /// &gt; **IMPORTANT:**
        /// &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
        /// &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleCluster = new Mongodbatlas.Cluster("exampleCluster", new Mongodbatlas.ClusterArgs
        ///         {
        ///             ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
        ///             ClusterType = "REPLICASET",
        ///             ReplicationSpecs = 
        ///             {
        ///                 new Mongodbatlas.Inputs.ClusterReplicationSpecArgs
        ///                 {
        ///                     RegionConfigs = 
        ///                     {
        ///                         
        ///                         {
        ///                             { "electableSpecs", 
        ///                             {
        ///                                 
        ///                                 {
        ///                                     { "instanceSize", "M5" },
        ///                                 },
        ///                             } },
        ///                             { "providerName", "TENANT" },
        ///                             { "backingProviderName", "AWS" },
        ///                             { "regionName", "US_EAST_1" },
        ///                             { "priority", 7 },
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         });
        ///         var exampleClusters = Mongodbatlas.GetClusters.Invoke(new Mongodbatlas.GetClustersInvokeArgs
        ///         {
        ///             ProjectId = exampleCluster.ProjectId,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetAdvancedClustersResult> InvokeAsync(GetAdvancedClustersArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetAdvancedClustersResult>("mongodbatlas:index/getAdvancedClusters:getAdvancedClusters", args ?? new GetAdvancedClustersArgs(), options.WithDefaults());

        /// <summary>
        /// `mongodbatlas.Cluster` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
        /// 
        /// &gt; **IMPORTANT:**
        /// &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
        /// &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var exampleCluster = new Mongodbatlas.Cluster("exampleCluster", new Mongodbatlas.ClusterArgs
        ///         {
        ///             ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
        ///             ClusterType = "REPLICASET",
        ///             ReplicationSpecs = 
        ///             {
        ///                 new Mongodbatlas.Inputs.ClusterReplicationSpecArgs
        ///                 {
        ///                     RegionConfigs = 
        ///                     {
        ///                         
        ///                         {
        ///                             { "electableSpecs", 
        ///                             {
        ///                                 
        ///                                 {
        ///                                     { "instanceSize", "M5" },
        ///                                 },
        ///                             } },
        ///                             { "providerName", "TENANT" },
        ///                             { "backingProviderName", "AWS" },
        ///                             { "regionName", "US_EAST_1" },
        ///                             { "priority", 7 },
        ///                         },
        ///                     },
        ///                 },
        ///             },
        ///         });
        ///         var exampleClusters = Mongodbatlas.GetClusters.Invoke(new Mongodbatlas.GetClustersInvokeArgs
        ///         {
        ///             ProjectId = exampleCluster.ProjectId,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetAdvancedClustersResult> Invoke(GetAdvancedClustersInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetAdvancedClustersResult>("mongodbatlas:index/getAdvancedClusters:getAdvancedClusters", args ?? new GetAdvancedClustersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAdvancedClustersArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the project to get the clusters.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetAdvancedClustersArgs()
        {
        }
    }

    public sealed class GetAdvancedClustersInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the project to get the clusters.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetAdvancedClustersInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetAdvancedClustersResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ProjectId;
        /// <summary>
        /// A list where each represents a Cluster. See below for more details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAdvancedClustersResultResult> Results;

        [OutputConstructor]
        private GetAdvancedClustersResult(
            string id,

            string projectId,

            ImmutableArray<Outputs.GetAdvancedClustersResultResult> results)
        {
            Id = id;
            ProjectId = projectId;
            Results = results;
        }
    }
}
