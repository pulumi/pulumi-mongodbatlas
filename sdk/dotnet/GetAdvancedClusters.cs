// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetAdvancedClusters
    {
        /// <summary>
        /// ## # Data Source: mongodbatlas.getAdvancedClusters
        /// 
        /// `mongodbatlas.getAdvancedClusters` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
        /// 
        /// &gt; **IMPORTANT:**
        /// &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
        /// &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
        /// 
        /// &gt; **NOTE:** This data source also includes Flex clusters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAdvancedCluster = new Mongodbatlas.AdvancedCluster("example", new()
        ///     {
        ///         ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
        ///         Name = "cluster-test",
        ///         ClusterType = "REPLICASET",
        ///         ReplicationSpecs = new[]
        ///         {
        ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
        ///             {
        ///                 RegionConfigs = new[]
        ///                 {
        ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
        ///                     {
        ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
        ///                         {
        ///                             InstanceSize = "M0",
        ///                         },
        ///                         ProviderName = "TENANT",
        ///                         BackingProviderName = "AWS",
        ///                         RegionName = "US_EAST_1",
        ///                         Priority = 7,
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var example = Mongodbatlas.GetAdvancedClusters.Invoke(new()
        ///     {
        ///         ProjectId = exampleAdvancedCluster.ProjectId,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// **NOTE:** There can only be one M0 cluster per project.
        /// 
        /// ## Example using latest sharding configurations with independent shard scaling in the cluster
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Mongodbatlas.AdvancedCluster("example", new()
        ///     {
        ///         ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
        ///         Name = "cluster-test",
        ///         BackupEnabled = false,
        ///         ClusterType = "SHARDED",
        ///         ReplicationSpecs = new[]
        ///         {
        ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
        ///             {
        ///                 RegionConfigs = new[]
        ///                 {
        ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
        ///                     {
        ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
        ///                         {
        ///                             InstanceSize = "M30",
        ///                             DiskIops = 3000,
        ///                             NodeCount = 3,
        ///                         },
        ///                         ProviderName = "AWS",
        ///                         Priority = 7,
        ///                         RegionName = "EU_WEST_1",
        ///                     },
        ///                 },
        ///             },
        ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
        ///             {
        ///                 RegionConfigs = new[]
        ///                 {
        ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
        ///                     {
        ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
        ///                         {
        ///                             InstanceSize = "M40",
        ///                             DiskIops = 3000,
        ///                             NodeCount = 3,
        ///                         },
        ///                         ProviderName = "AWS",
        ///                         Priority = 7,
        ///                         RegionName = "EU_WEST_1",
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var example_asym = Mongodbatlas.GetAdvancedCluster.Invoke(new()
        ///     {
        ///         ProjectId = example.ProjectId,
        ///         Name = example.Name,
        ///         UseReplicationSpecPerShard = true,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Example using Flex cluster
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example_flex = new Mongodbatlas.AdvancedCluster("example-flex", new()
        ///     {
        ///         ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
        ///         Name = "flex-cluster",
        ///         ClusterType = "REPLICASET",
        ///         ReplicationSpecs = new[]
        ///         {
        ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
        ///             {
        ///                 RegionConfigs = new[]
        ///                 {
        ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
        ///                     {
        ///                         ProviderName = "FLEX",
        ///                         BackingProviderName = "AWS",
        ///                         RegionName = "US_EAST_1",
        ///                         Priority = 7,
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var example = Mongodbatlas.GetAdvancedClusters.Invoke(new()
        ///     {
        ///         ProjectId = example_flex.ProjectId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetAdvancedClustersResult> InvokeAsync(GetAdvancedClustersArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetAdvancedClustersResult>("mongodbatlas:index/getAdvancedClusters:getAdvancedClusters", args ?? new GetAdvancedClustersArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.getAdvancedClusters
        /// 
        /// `mongodbatlas.getAdvancedClusters` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
        /// 
        /// &gt; **IMPORTANT:**
        /// &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
        /// &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
        /// 
        /// &gt; **NOTE:** This data source also includes Flex clusters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAdvancedCluster = new Mongodbatlas.AdvancedCluster("example", new()
        ///     {
        ///         ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
        ///         Name = "cluster-test",
        ///         ClusterType = "REPLICASET",
        ///         ReplicationSpecs = new[]
        ///         {
        ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
        ///             {
        ///                 RegionConfigs = new[]
        ///                 {
        ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
        ///                     {
        ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
        ///                         {
        ///                             InstanceSize = "M0",
        ///                         },
        ///                         ProviderName = "TENANT",
        ///                         BackingProviderName = "AWS",
        ///                         RegionName = "US_EAST_1",
        ///                         Priority = 7,
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var example = Mongodbatlas.GetAdvancedClusters.Invoke(new()
        ///     {
        ///         ProjectId = exampleAdvancedCluster.ProjectId,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// **NOTE:** There can only be one M0 cluster per project.
        /// 
        /// ## Example using latest sharding configurations with independent shard scaling in the cluster
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Mongodbatlas.AdvancedCluster("example", new()
        ///     {
        ///         ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
        ///         Name = "cluster-test",
        ///         BackupEnabled = false,
        ///         ClusterType = "SHARDED",
        ///         ReplicationSpecs = new[]
        ///         {
        ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
        ///             {
        ///                 RegionConfigs = new[]
        ///                 {
        ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
        ///                     {
        ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
        ///                         {
        ///                             InstanceSize = "M30",
        ///                             DiskIops = 3000,
        ///                             NodeCount = 3,
        ///                         },
        ///                         ProviderName = "AWS",
        ///                         Priority = 7,
        ///                         RegionName = "EU_WEST_1",
        ///                     },
        ///                 },
        ///             },
        ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
        ///             {
        ///                 RegionConfigs = new[]
        ///                 {
        ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
        ///                     {
        ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
        ///                         {
        ///                             InstanceSize = "M40",
        ///                             DiskIops = 3000,
        ///                             NodeCount = 3,
        ///                         },
        ///                         ProviderName = "AWS",
        ///                         Priority = 7,
        ///                         RegionName = "EU_WEST_1",
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var example_asym = Mongodbatlas.GetAdvancedCluster.Invoke(new()
        ///     {
        ///         ProjectId = example.ProjectId,
        ///         Name = example.Name,
        ///         UseReplicationSpecPerShard = true,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Example using Flex cluster
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example_flex = new Mongodbatlas.AdvancedCluster("example-flex", new()
        ///     {
        ///         ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
        ///         Name = "flex-cluster",
        ///         ClusterType = "REPLICASET",
        ///         ReplicationSpecs = new[]
        ///         {
        ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
        ///             {
        ///                 RegionConfigs = new[]
        ///                 {
        ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
        ///                     {
        ///                         ProviderName = "FLEX",
        ///                         BackingProviderName = "AWS",
        ///                         RegionName = "US_EAST_1",
        ///                         Priority = 7,
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var example = Mongodbatlas.GetAdvancedClusters.Invoke(new()
        ///     {
        ///         ProjectId = example_flex.ProjectId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAdvancedClustersResult> Invoke(GetAdvancedClustersInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetAdvancedClustersResult>("mongodbatlas:index/getAdvancedClusters:getAdvancedClusters", args ?? new GetAdvancedClustersInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.getAdvancedClusters
        /// 
        /// `mongodbatlas.getAdvancedClusters` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
        /// 
        /// &gt; **IMPORTANT:**
        /// &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
        /// &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
        /// 
        /// &gt; **NOTE:** This data source also includes Flex clusters.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var exampleAdvancedCluster = new Mongodbatlas.AdvancedCluster("example", new()
        ///     {
        ///         ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
        ///         Name = "cluster-test",
        ///         ClusterType = "REPLICASET",
        ///         ReplicationSpecs = new[]
        ///         {
        ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
        ///             {
        ///                 RegionConfigs = new[]
        ///                 {
        ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
        ///                     {
        ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
        ///                         {
        ///                             InstanceSize = "M0",
        ///                         },
        ///                         ProviderName = "TENANT",
        ///                         BackingProviderName = "AWS",
        ///                         RegionName = "US_EAST_1",
        ///                         Priority = 7,
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var example = Mongodbatlas.GetAdvancedClusters.Invoke(new()
        ///     {
        ///         ProjectId = exampleAdvancedCluster.ProjectId,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// **NOTE:** There can only be one M0 cluster per project.
        /// 
        /// ## Example using latest sharding configurations with independent shard scaling in the cluster
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Mongodbatlas.AdvancedCluster("example", new()
        ///     {
        ///         ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
        ///         Name = "cluster-test",
        ///         BackupEnabled = false,
        ///         ClusterType = "SHARDED",
        ///         ReplicationSpecs = new[]
        ///         {
        ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
        ///             {
        ///                 RegionConfigs = new[]
        ///                 {
        ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
        ///                     {
        ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
        ///                         {
        ///                             InstanceSize = "M30",
        ///                             DiskIops = 3000,
        ///                             NodeCount = 3,
        ///                         },
        ///                         ProviderName = "AWS",
        ///                         Priority = 7,
        ///                         RegionName = "EU_WEST_1",
        ///                     },
        ///                 },
        ///             },
        ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
        ///             {
        ///                 RegionConfigs = new[]
        ///                 {
        ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
        ///                     {
        ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
        ///                         {
        ///                             InstanceSize = "M40",
        ///                             DiskIops = 3000,
        ///                             NodeCount = 3,
        ///                         },
        ///                         ProviderName = "AWS",
        ///                         Priority = 7,
        ///                         RegionName = "EU_WEST_1",
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var example_asym = Mongodbatlas.GetAdvancedCluster.Invoke(new()
        ///     {
        ///         ProjectId = example.ProjectId,
        ///         Name = example.Name,
        ///         UseReplicationSpecPerShard = true,
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// ## Example using Flex cluster
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example_flex = new Mongodbatlas.AdvancedCluster("example-flex", new()
        ///     {
        ///         ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
        ///         Name = "flex-cluster",
        ///         ClusterType = "REPLICASET",
        ///         ReplicationSpecs = new[]
        ///         {
        ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
        ///             {
        ///                 RegionConfigs = new[]
        ///                 {
        ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
        ///                     {
        ///                         ProviderName = "FLEX",
        ///                         BackingProviderName = "AWS",
        ///                         RegionName = "US_EAST_1",
        ///                         Priority = 7,
        ///                     },
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var example = Mongodbatlas.GetAdvancedClusters.Invoke(new()
        ///     {
        ///         ProjectId = example_flex.ProjectId,
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetAdvancedClustersResult> Invoke(GetAdvancedClustersInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetAdvancedClustersResult>("mongodbatlas:index/getAdvancedClusters:getAdvancedClusters", args ?? new GetAdvancedClustersInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetAdvancedClustersArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the project to get the clusters.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// Set this field to true to allow the data source to use the latest schema representing each shard with an individual `replication_specs` object. This enables representing clusters with independent shard scaling. **Note:** If not set to true, this data source return all clusters except clusters with asymmetric shards.
        /// </summary>
        [Input("useReplicationSpecPerShard")]
        public bool? UseReplicationSpecPerShard { get; set; }

        public GetAdvancedClustersArgs()
        {
        }
        public static new GetAdvancedClustersArgs Empty => new GetAdvancedClustersArgs();
    }

    public sealed class GetAdvancedClustersInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the project to get the clusters.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Set this field to true to allow the data source to use the latest schema representing each shard with an individual `replication_specs` object. This enables representing clusters with independent shard scaling. **Note:** If not set to true, this data source return all clusters except clusters with asymmetric shards.
        /// </summary>
        [Input("useReplicationSpecPerShard")]
        public Input<bool>? UseReplicationSpecPerShard { get; set; }

        public GetAdvancedClustersInvokeArgs()
        {
        }
        public static new GetAdvancedClustersInvokeArgs Empty => new GetAdvancedClustersInvokeArgs();
    }


    [OutputType]
    public sealed class GetAdvancedClustersResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ProjectId;
        /// <summary>
        /// A list where each represents a Cluster. See below for more details.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAdvancedClustersResultResult> Results;
        public readonly bool? UseReplicationSpecPerShard;

        [OutputConstructor]
        private GetAdvancedClustersResult(
            string id,

            string projectId,

            ImmutableArray<Outputs.GetAdvancedClustersResultResult> results,

            bool? useReplicationSpecPerShard)
        {
            Id = id;
            ProjectId = projectId;
            Results = results;
            UseReplicationSpecPerShard = useReplicationSpecPerShard;
        }
    }
}
