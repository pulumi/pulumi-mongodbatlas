// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetCloudBackupSnapshotRestoreJobs
    {
        /// <summary>
        /// `mongodbatlas.getCloudBackupSnapshotRestoreJobs` provides a Cloud Backup Snapshot Restore Jobs datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testCloudBackupSnapshot = new Mongodbatlas.CloudBackupSnapshot("testCloudBackupSnapshot", new Mongodbatlas.CloudBackupSnapshotArgs
        ///         {
        ///             ProjectId = "5cf5a45a9ccf6400e60981b6",
        ///             ClusterName = "MyCluster",
        ///             Description = "MyDescription",
        ///             RetentionInDays = 1,
        ///         });
        ///         var testCloudBackupSnapshotRestoreJob = new Mongodbatlas.CloudBackupSnapshotRestoreJob("testCloudBackupSnapshotRestoreJob", new Mongodbatlas.CloudBackupSnapshotRestoreJobArgs
        ///         {
        ///             ProjectId = "5cf5a45a9ccf6400e60981b6",
        ///             ClusterName = "MyCluster",
        ///             SnapshotId = testCloudBackupSnapshot.Id,
        ///             DeliveryTypeConfig = new Mongodbatlas.Inputs.CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs
        ///             {
        ///                 Automated = true,
        ///                 TargetClusterName = "MyCluster",
        ///                 TargetProjectId = "5cf5a45a9ccf6400e60981b6",
        ///             },
        ///         });
        ///         var testCloudBackupSnapshotRestoreJobs = Output.Tuple(testCloudBackupSnapshotRestoreJob.ProjectId, testCloudBackupSnapshotRestoreJob.ClusterName).Apply(values =&gt;
        ///         {
        ///             var projectId = values.Item1;
        ///             var clusterName = values.Item2;
        ///             return Mongodbatlas.GetCloudBackupSnapshotRestoreJobs.Invoke(new Mongodbatlas.GetCloudBackupSnapshotRestoreJobsInvokeArgs
        ///             {
        ///                 ProjectId = projectId,
        ///                 ClusterName = clusterName,
        ///                 PageNum = 1,
        ///                 ItemsPerPage = 5,
        ///             });
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetCloudBackupSnapshotRestoreJobsResult> InvokeAsync(GetCloudBackupSnapshotRestoreJobsArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCloudBackupSnapshotRestoreJobsResult>("mongodbatlas:index/getCloudBackupSnapshotRestoreJobs:getCloudBackupSnapshotRestoreJobs", args ?? new GetCloudBackupSnapshotRestoreJobsArgs(), options.WithDefaults());

        /// <summary>
        /// `mongodbatlas.getCloudBackupSnapshotRestoreJobs` provides a Cloud Backup Snapshot Restore Jobs datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testCloudBackupSnapshot = new Mongodbatlas.CloudBackupSnapshot("testCloudBackupSnapshot", new Mongodbatlas.CloudBackupSnapshotArgs
        ///         {
        ///             ProjectId = "5cf5a45a9ccf6400e60981b6",
        ///             ClusterName = "MyCluster",
        ///             Description = "MyDescription",
        ///             RetentionInDays = 1,
        ///         });
        ///         var testCloudBackupSnapshotRestoreJob = new Mongodbatlas.CloudBackupSnapshotRestoreJob("testCloudBackupSnapshotRestoreJob", new Mongodbatlas.CloudBackupSnapshotRestoreJobArgs
        ///         {
        ///             ProjectId = "5cf5a45a9ccf6400e60981b6",
        ///             ClusterName = "MyCluster",
        ///             SnapshotId = testCloudBackupSnapshot.Id,
        ///             DeliveryTypeConfig = new Mongodbatlas.Inputs.CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs
        ///             {
        ///                 Automated = true,
        ///                 TargetClusterName = "MyCluster",
        ///                 TargetProjectId = "5cf5a45a9ccf6400e60981b6",
        ///             },
        ///         });
        ///         var testCloudBackupSnapshotRestoreJobs = Output.Tuple(testCloudBackupSnapshotRestoreJob.ProjectId, testCloudBackupSnapshotRestoreJob.ClusterName).Apply(values =&gt;
        ///         {
        ///             var projectId = values.Item1;
        ///             var clusterName = values.Item2;
        ///             return Mongodbatlas.GetCloudBackupSnapshotRestoreJobs.Invoke(new Mongodbatlas.GetCloudBackupSnapshotRestoreJobsInvokeArgs
        ///             {
        ///                 ProjectId = projectId,
        ///                 ClusterName = clusterName,
        ///                 PageNum = 1,
        ///                 ItemsPerPage = 5,
        ///             });
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetCloudBackupSnapshotRestoreJobsResult> Invoke(GetCloudBackupSnapshotRestoreJobsInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetCloudBackupSnapshotRestoreJobsResult>("mongodbatlas:index/getCloudBackupSnapshotRestoreJobs:getCloudBackupSnapshotRestoreJobs", args ?? new GetCloudBackupSnapshotRestoreJobsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetCloudBackupSnapshotRestoreJobsArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Atlas cluster for which you want to retrieve restore jobs.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// Number of items to return per page, up to a maximum of 500. Defaults to `100`.
        /// </summary>
        [Input("itemsPerPage")]
        public int? ItemsPerPage { get; set; }

        /// <summary>
        /// The page to return. Defaults to `1`.
        /// </summary>
        [Input("pageNum")]
        public int? PageNum { get; set; }

        /// <summary>
        /// The unique identifier of the project for the Atlas cluster.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetCloudBackupSnapshotRestoreJobsArgs()
        {
        }
    }

    public sealed class GetCloudBackupSnapshotRestoreJobsInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Atlas cluster for which you want to retrieve restore jobs.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// Number of items to return per page, up to a maximum of 500. Defaults to `100`.
        /// </summary>
        [Input("itemsPerPage")]
        public Input<int>? ItemsPerPage { get; set; }

        /// <summary>
        /// The page to return. Defaults to `1`.
        /// </summary>
        [Input("pageNum")]
        public Input<int>? PageNum { get; set; }

        /// <summary>
        /// The unique identifier of the project for the Atlas cluster.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetCloudBackupSnapshotRestoreJobsInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCloudBackupSnapshotRestoreJobsResult
    {
        public readonly string ClusterName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly int? ItemsPerPage;
        public readonly int? PageNum;
        public readonly string ProjectId;
        /// <summary>
        /// Includes cloudProviderSnapshotRestoreJob object for each item detailed in the results array section.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetCloudBackupSnapshotRestoreJobsResultResult> Results;
        public readonly int TotalCount;

        [OutputConstructor]
        private GetCloudBackupSnapshotRestoreJobsResult(
            string clusterName,

            string id,

            int? itemsPerPage,

            int? pageNum,

            string projectId,

            ImmutableArray<Outputs.GetCloudBackupSnapshotRestoreJobsResultResult> results,

            int totalCount)
        {
            ClusterName = clusterName;
            Id = id;
            ItemsPerPage = itemsPerPage;
            PageNum = pageNum;
            ProjectId = projectId;
            Results = results;
            TotalCount = totalCount;
        }
    }
}
