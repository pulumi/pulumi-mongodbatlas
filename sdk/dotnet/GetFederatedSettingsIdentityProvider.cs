// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetFederatedSettingsIdentityProvider
    {
        /// <summary>
        /// `mongodbatlas.FederatedSettingsIdentityProvider` provides a federated settings identity provider data source. Atlas federated settings identity provider provides federated settings outputs for the configured identity provider.
        /// 
        /// &gt; **NOTE:** OIDC Workforce IdP is currently in preview. To learn more about OIDC and existing limitations see the [OIDC Authentication Documentation](https://www.mongodb.com/docs/atlas/security-oidc/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var identityProvider = new Mongodbatlas.FederatedSettingsIdentityProvider("identity_provider", new()
        ///     {
        ///         FederationSettingsId = "627a9687f7f7f7f774de306f14",
        ///         Name = "mongodb_federation_test",
        ///         AssociatedDomains = new[]
        ///         {
        ///             "yourdomain.com",
        ///         },
        ///         SsoDebugEnabled = true,
        ///         Status = "ACTIVE",
        ///         SsoUrl = "https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml",
        ///         IssuerUri = "http://www.okta.com/exk17f7f7f7f7p50h8",
        ///         RequestBinding = "HTTP-POST",
        ///         ResponseSignatureAlgorithm = "SHA-256",
        ///     });
        /// 
        ///     var identityProviderDs = Mongodbatlas.GetFederatedSettingsIdentityProvider.Invoke(new()
        ///     {
        ///         FederationSettingsId = identityProvider.Id,
        ///         IdentityProviderId = "0oad4fas87jL5Xnk12971234",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetFederatedSettingsIdentityProviderResult> InvokeAsync(GetFederatedSettingsIdentityProviderArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFederatedSettingsIdentityProviderResult>("mongodbatlas:index/getFederatedSettingsIdentityProvider:getFederatedSettingsIdentityProvider", args ?? new GetFederatedSettingsIdentityProviderArgs(), options.WithDefaults());

        /// <summary>
        /// `mongodbatlas.FederatedSettingsIdentityProvider` provides a federated settings identity provider data source. Atlas federated settings identity provider provides federated settings outputs for the configured identity provider.
        /// 
        /// &gt; **NOTE:** OIDC Workforce IdP is currently in preview. To learn more about OIDC and existing limitations see the [OIDC Authentication Documentation](https://www.mongodb.com/docs/atlas/security-oidc/)
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var identityProvider = new Mongodbatlas.FederatedSettingsIdentityProvider("identity_provider", new()
        ///     {
        ///         FederationSettingsId = "627a9687f7f7f7f774de306f14",
        ///         Name = "mongodb_federation_test",
        ///         AssociatedDomains = new[]
        ///         {
        ///             "yourdomain.com",
        ///         },
        ///         SsoDebugEnabled = true,
        ///         Status = "ACTIVE",
        ///         SsoUrl = "https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml",
        ///         IssuerUri = "http://www.okta.com/exk17f7f7f7f7p50h8",
        ///         RequestBinding = "HTTP-POST",
        ///         ResponseSignatureAlgorithm = "SHA-256",
        ///     });
        /// 
        ///     var identityProviderDs = Mongodbatlas.GetFederatedSettingsIdentityProvider.Invoke(new()
        ///     {
        ///         FederationSettingsId = identityProvider.Id,
        ///         IdentityProviderId = "0oad4fas87jL5Xnk12971234",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetFederatedSettingsIdentityProviderResult> Invoke(GetFederatedSettingsIdentityProviderInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFederatedSettingsIdentityProviderResult>("mongodbatlas:index/getFederatedSettingsIdentityProvider:getFederatedSettingsIdentityProvider", args ?? new GetFederatedSettingsIdentityProviderInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFederatedSettingsIdentityProviderArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
        /// </summary>
        [Input("federationSettingsId", required: true)]
        public string FederationSettingsId { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the IdP.
        /// </summary>
        [Input("identityProviderId", required: true)]
        public string IdentityProviderId { get; set; } = null!;

        public GetFederatedSettingsIdentityProviderArgs()
        {
        }
        public static new GetFederatedSettingsIdentityProviderArgs Empty => new GetFederatedSettingsIdentityProviderArgs();
    }

    public sealed class GetFederatedSettingsIdentityProviderInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
        /// </summary>
        [Input("federationSettingsId", required: true)]
        public Input<string> FederationSettingsId { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the IdP.
        /// </summary>
        [Input("identityProviderId", required: true)]
        public Input<string> IdentityProviderId { get; set; } = null!;

        public GetFederatedSettingsIdentityProviderInvokeArgs()
        {
        }
        public static new GetFederatedSettingsIdentityProviderInvokeArgs Empty => new GetFederatedSettingsIdentityProviderInvokeArgs();
    }


    [OutputType]
    public sealed class GetFederatedSettingsIdentityProviderResult
    {
        /// <summary>
        /// Assertion consumer service URL to which the IdP sends the SAML response.
        /// </summary>
        public readonly string AcsUrl;
        /// <summary>
        /// List that contains the configured domains from which users can log in for this IdP.
        /// </summary>
        public readonly ImmutableArray<string> AssociatedDomains;
        /// <summary>
        /// List that contains the organizations from which users can log in for this IdP.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFederatedSettingsIdentityProviderAssociatedOrgResult> AssociatedOrgs;
        /// <summary>
        /// Identifier of the intended recipient of the token.
        /// </summary>
        public readonly string Audience;
        /// <summary>
        /// Identifier for the intended audience of the SAML Assertion.
        /// </summary>
        public readonly string AudienceUri;
        /// <summary>
        /// Indicates whether authorization is granted based on group membership or user ID. Valid values are `GROUP` or `USER`.
        /// </summary>
        public readonly string AuthorizationType;
        /// <summary>
        /// Client identifier that is assigned to an application by the Identity Provider.
        /// </summary>
        public readonly string ClientId;
        /// <summary>
        /// The description of the identity provider.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// Human-readable label that identifies the IdP.
        /// </summary>
        public readonly string DisplayName;
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
        /// </summary>
        public readonly string FederationSettingsId;
        /// <summary>
        /// Identifier of the claim which contains IdP Group IDs in the token.
        /// </summary>
        public readonly string GroupsClaim;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IdentityProviderId;
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the IdP
        /// </summary>
        public readonly string IdpId;
        /// <summary>
        /// Type of the identity provider. Valid values are `WORKFORCE` or `WORKLOAD`.
        /// </summary>
        public readonly string IdpType;
        /// <summary>
        /// Identifier for the issuer of the SAML Assertion.
        /// </summary>
        public readonly string IssuerUri;
        /// <summary>
        /// Unique 20-hexadecimal digit string that identifies the IdP.
        /// </summary>
        public readonly string OktaIdpId;
        public readonly ImmutableArray<Outputs.GetFederatedSettingsIdentityProviderPemFileInfoResult> PemFileInfos;
        /// <summary>
        /// The protocol of the identity provider. Valid values are `SAML` or `OIDC`.
        /// </summary>
        public readonly string Protocol;
        /// <summary>
        /// SAML Authentication Request Protocol binding used to send the AuthNRequest. Atlas supports the following binding values:
        /// - HTTP POST
        /// - HTTP REDIRECT
        /// </summary>
        public readonly string RequestBinding;
        /// <summary>
        /// Scopes that MongoDB applications will request from the authorization endpoint.
        /// </summary>
        public readonly ImmutableArray<string> RequestedScopes;
        /// <summary>
        /// Algorithm used to encrypt the IdP signature. Atlas supports the following signature algorithm values:
        /// - SHA-1
        /// - SHA-256
        /// </summary>
        public readonly string ResponseSignatureAlgorithm;
        /// <summary>
        /// Flag that indicates whether the IdP has enabled Bypass SAML Mode. Enabling this mode generates a URL that allows you bypass SAML and login to your organizations at any point. You can authenticate with this special URL only when Bypass Mode is enabled. Set this parameter to true during testing. This keeps you from getting locked out of MongoDB.
        /// </summary>
        public readonly bool SsoDebugEnabled;
        /// <summary>
        /// URL of the receiver of the SAML AuthNRequest.
        /// </summary>
        public readonly string SsoUrl;
        /// <summary>
        /// Label that indicates whether the identity provider is active. The IdP is Inactive until you map at least one domain to the IdP.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Identifier of the claim which contains the user ID in the token.
        /// </summary>
        public readonly string UserClaim;

        [OutputConstructor]
        private GetFederatedSettingsIdentityProviderResult(
            string acsUrl,

            ImmutableArray<string> associatedDomains,

            ImmutableArray<Outputs.GetFederatedSettingsIdentityProviderAssociatedOrgResult> associatedOrgs,

            string audience,

            string audienceUri,

            string authorizationType,

            string clientId,

            string description,

            string displayName,

            string federationSettingsId,

            string groupsClaim,

            string id,

            string identityProviderId,

            string idpId,

            string idpType,

            string issuerUri,

            string oktaIdpId,

            ImmutableArray<Outputs.GetFederatedSettingsIdentityProviderPemFileInfoResult> pemFileInfos,

            string protocol,

            string requestBinding,

            ImmutableArray<string> requestedScopes,

            string responseSignatureAlgorithm,

            bool ssoDebugEnabled,

            string ssoUrl,

            string status,

            string userClaim)
        {
            AcsUrl = acsUrl;
            AssociatedDomains = associatedDomains;
            AssociatedOrgs = associatedOrgs;
            Audience = audience;
            AudienceUri = audienceUri;
            AuthorizationType = authorizationType;
            ClientId = clientId;
            Description = description;
            DisplayName = displayName;
            FederationSettingsId = federationSettingsId;
            GroupsClaim = groupsClaim;
            Id = id;
            IdentityProviderId = identityProviderId;
            IdpId = idpId;
            IdpType = idpType;
            IssuerUri = issuerUri;
            OktaIdpId = oktaIdpId;
            PemFileInfos = pemFileInfos;
            Protocol = protocol;
            RequestBinding = requestBinding;
            RequestedScopes = requestedScopes;
            ResponseSignatureAlgorithm = responseSignatureAlgorithm;
            SsoDebugEnabled = ssoDebugEnabled;
            SsoUrl = ssoUrl;
            Status = status;
            UserClaim = userClaim;
        }
    }
}
