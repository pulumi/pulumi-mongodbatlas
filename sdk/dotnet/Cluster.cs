// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// `mongodbatlas.Cluster` provides a Cluster resource. The resource lets you create, edit and delete clusters. The resource requires your Project ID.
    /// 
    /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
    /// 
    /// &gt; **IMPORTANT:**
    /// &lt;br&gt; &amp;#8226; Free tier cluster creation (M0) is not supported via API or by this Provider.
    /// &lt;br&gt; &amp;#8226; Shared tier clusters (M2, M5) cannot be upgraded to higher tiers via API or by this Provider.
    /// &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
    /// &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
    /// 
    /// ## Example Usage
    /// ### Example AWS cluster
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var cluster_test = new Mongodbatlas.Cluster("cluster-test", new Mongodbatlas.ClusterArgs
    ///         {
    ///             AutoScalingDiskGbEnabled = true,
    ///             DiskSizeGb = 100,
    ///             MongoDbMajorVersion = "4.2",
    ///             NumShards = 1,
    ///             ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
    ///             ProviderBackupEnabled = true,
    ///             ProviderDiskIops = 300,
    ///             ProviderEncryptEbsVolume = true,
    ///             ProviderInstanceSizeName = "M40",
    ///             ProviderName = "AWS",
    ///             ProviderRegionName = "US_EAST_1",
    ///             ProviderVolumeType = "STANDARD",
    ///             ReplicationFactor = 3,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Example Azure cluster.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Mongodbatlas.Cluster("test", new Mongodbatlas.ClusterArgs
    ///         {
    ///             AutoScalingDiskGbEnabled = true,
    ///             MongoDbMajorVersion = "4.2",
    ///             NumShards = 1,
    ///             ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
    ///             ProviderBackupEnabled = true,
    ///             ProviderDiskTypeName = "P6",
    ///             ProviderInstanceSizeName = "M30",
    ///             ProviderName = "AZURE",
    ///             ProviderRegionName = "US_EAST_2",
    ///             ReplicationFactor = 3,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Example GCP cluster
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Mongodbatlas.Cluster("test", new Mongodbatlas.ClusterArgs
    ///         {
    ///             AutoScalingDiskGbEnabled = true,
    ///             DiskSizeGb = 40,
    ///             MongoDbMajorVersion = "4.2",
    ///             NumShards = 1,
    ///             ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
    ///             ProviderBackupEnabled = true,
    ///             ProviderInstanceSizeName = "M30",
    ///             ProviderName = "GCP",
    ///             ProviderRegionName = "US_EAST_4",
    ///             ReplicationFactor = 3,
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Example Multi Region cluster
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var cluster_test = new Mongodbatlas.Cluster("cluster-test", new Mongodbatlas.ClusterArgs
    ///         {
    ///             ClusterType = "REPLICASET",
    ///             DiskSizeGb = 100,
    ///             NumShards = 1,
    ///             ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
    ///             ProviderBackupEnabled = true,
    ///             ProviderDiskIops = 300,
    ///             ProviderInstanceSizeName = "M10",
    ///             ProviderName = "AWS",
    ///             ProviderVolumeType = "STANDARD",
    ///             ReplicationSpecs = 
    ///             {
    ///                 new Mongodbatlas.Inputs.ClusterReplicationSpecArgs
    ///                 {
    ///                     NumShards = 1,
    ///                     RegionsConfigs = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.ClusterReplicationSpecRegionsConfigArgs
    ///                         {
    ///                             ElectableNodes = 3,
    ///                             Priority = 7,
    ///                             ReadOnlyNodes = 0,
    ///                             RegionName = "US_EAST_1",
    ///                         },
    ///                         new Mongodbatlas.Inputs.ClusterReplicationSpecRegionsConfigArgs
    ///                         {
    ///                             ElectableNodes = 2,
    ///                             Priority = 6,
    ///                             ReadOnlyNodes = 0,
    ///                             RegionName = "US_EAST_2",
    ///                         },
    ///                         new Mongodbatlas.Inputs.ClusterReplicationSpecRegionsConfigArgs
    ///                         {
    ///                             ElectableNodes = 2,
    ///                             Priority = 5,
    ///                             ReadOnlyNodes = 2,
    ///                             RegionName = "US_WEST_1",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Example Global cluster
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var cluster_test = new Mongodbatlas.Cluster("cluster-test", new Mongodbatlas.ClusterArgs
    ///         {
    ///             ClusterType = "GEOSHARDED",
    ///             DiskSizeGb = 80,
    ///             NumShards = 1,
    ///             ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
    ///             ProviderBackupEnabled = true,
    ///             ProviderDiskIops = 240,
    ///             ProviderInstanceSizeName = "M30",
    ///             ProviderName = "AWS",
    ///             ProviderVolumeType = "STANDARD",
    ///             ReplicationSpecs = 
    ///             {
    ///                 new Mongodbatlas.Inputs.ClusterReplicationSpecArgs
    ///                 {
    ///                     NumShards = 2,
    ///                     RegionsConfigs = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.ClusterReplicationSpecRegionsConfigArgs
    ///                         {
    ///                             ElectableNodes = 3,
    ///                             Priority = 7,
    ///                             ReadOnlyNodes = 0,
    ///                             RegionName = "US_EAST_1",
    ///                         },
    ///                     },
    ///                     ZoneName = "Zone 1",
    ///                 },
    ///                 new Mongodbatlas.Inputs.ClusterReplicationSpecArgs
    ///                 {
    ///                     NumShards = 2,
    ///                     RegionsConfigs = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.ClusterReplicationSpecRegionsConfigArgs
    ///                         {
    ///                             ElectableNodes = 3,
    ///                             Priority = 7,
    ///                             ReadOnlyNodes = 0,
    ///                             RegionName = "EU_CENTRAL_1",
    ///                         },
    ///                     },
    ///                     ZoneName = "Zone 2",
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Example AWS Shared Tier cluster
    /// ```csharp
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var cluster_test = new Mongodbatlas.Cluster("cluster-test", new Mongodbatlas.ClusterArgs
    ///         {
    ///             AutoScalingDiskGbEnabled = false,
    ///             BackingProviderName = "AWS",
    ///             DiskSizeGb = 2,
    ///             MongoDbMajorVersion = "4.2",
    ///             ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
    ///             ProviderInstanceSizeName = "M2",
    ///             ProviderName = "TENANT",
    ///             ProviderRegionName = "US_EAST_1",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class Cluster : Pulumi.CustomResource
    {
        [Output("advancedConfiguration")]
        public Output<Outputs.ClusterAdvancedConfiguration> AdvancedConfiguration { get; private set; } = null!;

        /// <summary>
        /// Specifies whether cluster tier auto-scaling is enabled. The default is false.
        /// - Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.
        /// - Set to `false` to disable cluster tier auto-scaling.
        /// </summary>
        [Output("autoScalingComputeEnabled")]
        public Output<bool> AutoScalingComputeEnabled { get; private set; } = null!;

        /// <summary>
        /// Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.
        /// - If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`
        /// </summary>
        [Output("autoScalingComputeScaleDownEnabled")]
        public Output<bool> AutoScalingComputeScaleDownEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies whether disk auto-scaling is enabled. The default is true.
        /// - Set to `true` to enable disk auto-scaling.
        /// - Set to `false` to disable disk auto-scaling.
        /// </summary>
        [Output("autoScalingDiskGbEnabled")]
        public Output<bool?> AutoScalingDiskGbEnabled { get; private set; } = null!;

        /// <summary>
        /// Cloud service provider on which the server for a multi-tenant cluster is provisioned.
        /// </summary>
        [Output("backingProviderName")]
        public Output<string> BackingProviderName { get; private set; } = null!;

        /// <summary>
        /// Legacy Backup - Set to true to enable Atlas legacy backups for the cluster.
        /// **Important** - MongoDB deprecated the Legacy Backup feature. Clusters that use Legacy Backup can continue to use it. MongoDB recommends using [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/).
        /// * Any net new Atlas clusters of any type do not support this parameter. These clusters must use Cloud Backup, `provider_backup_enabled`, to enable Cloud Backup.  If you create a new Atlas cluster and set `backup_enabled` to true, the Provider will respond with an error.  This change doesn’t affect existing clusters that use legacy backups.
        /// * Set to false to disable legacy backups for the cluster. Atlas deletes any stored snapshots.
        /// * The default value is false.  M10 and above only.
        /// </summary>
        [Output("backupEnabled")]
        public Output<bool?> BackupEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
        /// </summary>
        [Output("biConnector")]
        public Output<Outputs.ClusterBiConnector> BiConnector { get; private set; } = null!;

        /// <summary>
        /// The cluster ID.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
        /// </summary>
        [Output("clusterType")]
        public Output<string> ClusterType { get; private set; } = null!;

        /// <summary>
        /// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
        /// </summary>
        [Output("connectionStrings")]
        public Output<Outputs.ClusterConnectionStrings> ConnectionStrings { get; private set; } = null!;

        /// <summary>
        /// The Network Peering Container ID. The id of the container either created programmatically by the user before any clusters existed in the project or when the first cluster in the region (AWS/Azure) or project (GCP) was created.
        /// </summary>
        [Output("containerId")]
        public Output<string> ContainerId { get; private set; } = null!;

        /// <summary>
        /// Capacity, in gigabytes, of the host’s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
        /// * The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.
        /// * Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.
        /// * Cannot be used with clusters with local NVMe SSDs
        /// * Cannot be used with Azure clusters
        /// </summary>
        [Output("diskSizeGb")]
        public Output<double> DiskSizeGb { get; private set; } = null!;

        /// <summary>
        /// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
        /// </summary>
        [Output("encryptionAtRestProvider")]
        public Output<string> EncryptionAtRestProvider { get; private set; } = null!;

        /// <summary>
        /// Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<Outputs.ClusterLabel>> Labels { get; private set; } = null!;

        /// <summary>
        /// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `provider_instance_size_name` is either M2 or M5.
        /// </summary>
        [Output("mongoDbMajorVersion")]
        public Output<string> MongoDbMajorVersion { get; private set; } = null!;

        /// <summary>
        /// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
        /// </summary>
        [Output("mongoDbVersion")]
        public Output<string> MongoDbVersion { get; private set; } = null!;

        /// <summary>
        /// Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.
        /// </summary>
        [Output("mongoUri")]
        public Output<string> MongoUri { get; private set; } = null!;

        /// <summary>
        /// Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.
        /// </summary>
        [Output("mongoUriUpdated")]
        public Output<string> MongoUriUpdated { get; private set; } = null!;

        /// <summary>
        /// connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.
        /// </summary>
        [Output("mongoUriWithOptions")]
        public Output<string> MongoUriWithOptions { get; private set; } = null!;

        /// <summary>
        /// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Number of shards to deploy in the specified zone, minimum 1.
        /// </summary>
        [Output("numShards")]
        public Output<int?> NumShards { get; private set; } = null!;

        /// <summary>
        /// Flag that indicates whether the cluster is paused or not.
        /// </summary>
        [Output("paused")]
        public Output<bool> Paused { get; private set; } = null!;

        /// <summary>
        /// - Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, provider_backup_enabled must also be set to true.
        /// </summary>
        [Output("pitEnabled")]
        public Output<bool> PitEnabled { get; private set; } = null!;

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.
        /// </summary>
        [Output("providerAutoScalingComputeMaxInstanceSize")]
        public Output<string> ProviderAutoScalingComputeMaxInstanceSize { get; private set; } = null!;

        /// <summary>
        /// Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.
        /// </summary>
        [Output("providerAutoScalingComputeMinInstanceSize")]
        public Output<string> ProviderAutoScalingComputeMinInstanceSize { get; private set; } = null!;

        /// <summary>
        /// Flag indicating if the cluster uses Cloud Backup for backups.
        /// </summary>
        [Output("providerBackupEnabled")]
        public Output<bool?> ProviderBackupEnabled { get; private set; } = null!;

        /// <summary>
        /// The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `provider_instance_size_name` and `disk_size_gb`.
        /// </summary>
        [Output("providerDiskIops")]
        public Output<int> ProviderDiskIops { get; private set; } = null!;

        /// <summary>
        /// Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
        /// </summary>
        [Output("providerDiskTypeName")]
        public Output<string> ProviderDiskTypeName { get; private set; } = null!;

        /// <summary>
        /// If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the cluster.  **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
        /// </summary>
        [Output("providerEncryptEbsVolume")]
        public Output<bool> ProviderEncryptEbsVolume { get; private set; } = null!;

        /// <summary>
        /// Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources. 
        /// **Note** free tier (M0) creation is not supported by the Atlas API and hence not supported by this provider.)
        /// </summary>
        [Output("providerInstanceSizeName")]
        public Output<string> ProviderInstanceSizeName { get; private set; } = null!;

        /// <summary>
        /// Cloud service provider on which the servers are provisioned.
        /// </summary>
        [Output("providerName")]
        public Output<string> ProviderName { get; private set; } = null!;

        /// <summary>
        /// Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
        /// Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
        /// </summary>
        [Output("providerRegionName")]
        public Output<string> ProviderRegionName { get; private set; } = null!;

        /// <summary>
        /// The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.
        /// </summary>
        [Output("providerVolumeType")]
        public Output<string> ProviderVolumeType { get; private set; } = null!;

        /// <summary>
        /// Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
        /// </summary>
        [Output("replicationFactor")]
        public Output<int> ReplicationFactor { get; private set; } = null!;

        /// <summary>
        /// Configuration for cluster regions.  See Replication Spec below for more details.
        /// </summary>
        [Output("replicationSpecs")]
        public Output<ImmutableArray<Outputs.ClusterReplicationSpec>> ReplicationSpecs { get; private set; } = null!;

        /// <summary>
        /// current snapshot schedule and retention settings for the cluster.
        /// </summary>
        [Output("snapshotBackupPolicies")]
        public Output<ImmutableArray<Outputs.ClusterSnapshotBackupPolicy>> SnapshotBackupPolicies { get; private set; } = null!;

        /// <summary>
        /// Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.
        /// </summary>
        [Output("srvAddress")]
        public Output<string> SrvAddress { get; private set; } = null!;

        /// <summary>
        /// Current state of the cluster. The possible states are:
        /// - IDLE
        /// - CREATING
        /// - UPDATING
        /// - DELETING
        /// - DELETED
        /// - REPAIRING
        /// </summary>
        [Output("stateName")]
        public Output<string> StateName { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : Pulumi.ResourceArgs
    {
        [Input("advancedConfiguration")]
        public Input<Inputs.ClusterAdvancedConfigurationArgs>? AdvancedConfiguration { get; set; }

        /// <summary>
        /// Specifies whether cluster tier auto-scaling is enabled. The default is false.
        /// - Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.
        /// - Set to `false` to disable cluster tier auto-scaling.
        /// </summary>
        [Input("autoScalingComputeEnabled")]
        public Input<bool>? AutoScalingComputeEnabled { get; set; }

        /// <summary>
        /// Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.
        /// - If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`
        /// </summary>
        [Input("autoScalingComputeScaleDownEnabled")]
        public Input<bool>? AutoScalingComputeScaleDownEnabled { get; set; }

        /// <summary>
        /// Specifies whether disk auto-scaling is enabled. The default is true.
        /// - Set to `true` to enable disk auto-scaling.
        /// - Set to `false` to disable disk auto-scaling.
        /// </summary>
        [Input("autoScalingDiskGbEnabled")]
        public Input<bool>? AutoScalingDiskGbEnabled { get; set; }

        /// <summary>
        /// Cloud service provider on which the server for a multi-tenant cluster is provisioned.
        /// </summary>
        [Input("backingProviderName")]
        public Input<string>? BackingProviderName { get; set; }

        /// <summary>
        /// Legacy Backup - Set to true to enable Atlas legacy backups for the cluster.
        /// **Important** - MongoDB deprecated the Legacy Backup feature. Clusters that use Legacy Backup can continue to use it. MongoDB recommends using [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/).
        /// * Any net new Atlas clusters of any type do not support this parameter. These clusters must use Cloud Backup, `provider_backup_enabled`, to enable Cloud Backup.  If you create a new Atlas cluster and set `backup_enabled` to true, the Provider will respond with an error.  This change doesn’t affect existing clusters that use legacy backups.
        /// * Set to false to disable legacy backups for the cluster. Atlas deletes any stored snapshots.
        /// * The default value is false.  M10 and above only.
        /// </summary>
        [Input("backupEnabled")]
        public Input<bool>? BackupEnabled { get; set; }

        /// <summary>
        /// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
        /// </summary>
        [Input("biConnector")]
        public Input<Inputs.ClusterBiConnectorArgs>? BiConnector { get; set; }

        /// <summary>
        /// Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// Capacity, in gigabytes, of the host’s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
        /// * The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.
        /// * Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.
        /// * Cannot be used with clusters with local NVMe SSDs
        /// * Cannot be used with Azure clusters
        /// </summary>
        [Input("diskSizeGb")]
        public Input<double>? DiskSizeGb { get; set; }

        /// <summary>
        /// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
        /// </summary>
        [Input("encryptionAtRestProvider")]
        public Input<string>? EncryptionAtRestProvider { get; set; }

        [Input("labels")]
        private InputList<Inputs.ClusterLabelArgs>? _labels;

        /// <summary>
        /// Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.
        /// </summary>
        public InputList<Inputs.ClusterLabelArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.ClusterLabelArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `provider_instance_size_name` is either M2 or M5.
        /// </summary>
        [Input("mongoDbMajorVersion")]
        public Input<string>? MongoDbMajorVersion { get; set; }

        /// <summary>
        /// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Number of shards to deploy in the specified zone, minimum 1.
        /// </summary>
        [Input("numShards")]
        public Input<int>? NumShards { get; set; }

        /// <summary>
        /// - Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, provider_backup_enabled must also be set to true.
        /// </summary>
        [Input("pitEnabled")]
        public Input<bool>? PitEnabled { get; set; }

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.
        /// </summary>
        [Input("providerAutoScalingComputeMaxInstanceSize")]
        public Input<string>? ProviderAutoScalingComputeMaxInstanceSize { get; set; }

        /// <summary>
        /// Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.
        /// </summary>
        [Input("providerAutoScalingComputeMinInstanceSize")]
        public Input<string>? ProviderAutoScalingComputeMinInstanceSize { get; set; }

        /// <summary>
        /// Flag indicating if the cluster uses Cloud Backup for backups.
        /// </summary>
        [Input("providerBackupEnabled")]
        public Input<bool>? ProviderBackupEnabled { get; set; }

        /// <summary>
        /// The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `provider_instance_size_name` and `disk_size_gb`.
        /// </summary>
        [Input("providerDiskIops")]
        public Input<int>? ProviderDiskIops { get; set; }

        /// <summary>
        /// Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
        /// </summary>
        [Input("providerDiskTypeName")]
        public Input<string>? ProviderDiskTypeName { get; set; }

        /// <summary>
        /// If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the cluster.  **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
        /// </summary>
        [Input("providerEncryptEbsVolume")]
        public Input<bool>? ProviderEncryptEbsVolume { get; set; }

        /// <summary>
        /// Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources. 
        /// **Note** free tier (M0) creation is not supported by the Atlas API and hence not supported by this provider.)
        /// </summary>
        [Input("providerInstanceSizeName", required: true)]
        public Input<string> ProviderInstanceSizeName { get; set; } = null!;

        /// <summary>
        /// Cloud service provider on which the servers are provisioned.
        /// </summary>
        [Input("providerName", required: true)]
        public Input<string> ProviderName { get; set; } = null!;

        /// <summary>
        /// Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
        /// Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
        /// </summary>
        [Input("providerRegionName")]
        public Input<string>? ProviderRegionName { get; set; }

        /// <summary>
        /// The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.
        /// </summary>
        [Input("providerVolumeType")]
        public Input<string>? ProviderVolumeType { get; set; }

        /// <summary>
        /// Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
        /// </summary>
        [Input("replicationFactor")]
        public Input<int>? ReplicationFactor { get; set; }

        [Input("replicationSpecs")]
        private InputList<Inputs.ClusterReplicationSpecArgs>? _replicationSpecs;

        /// <summary>
        /// Configuration for cluster regions.  See Replication Spec below for more details.
        /// </summary>
        public InputList<Inputs.ClusterReplicationSpecArgs> ReplicationSpecs
        {
            get => _replicationSpecs ?? (_replicationSpecs = new InputList<Inputs.ClusterReplicationSpecArgs>());
            set => _replicationSpecs = value;
        }

        public ClusterArgs()
        {
        }
    }

    public sealed class ClusterState : Pulumi.ResourceArgs
    {
        [Input("advancedConfiguration")]
        public Input<Inputs.ClusterAdvancedConfigurationGetArgs>? AdvancedConfiguration { get; set; }

        /// <summary>
        /// Specifies whether cluster tier auto-scaling is enabled. The default is false.
        /// - Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.
        /// - Set to `false` to disable cluster tier auto-scaling.
        /// </summary>
        [Input("autoScalingComputeEnabled")]
        public Input<bool>? AutoScalingComputeEnabled { get; set; }

        /// <summary>
        /// Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.
        /// - If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`
        /// </summary>
        [Input("autoScalingComputeScaleDownEnabled")]
        public Input<bool>? AutoScalingComputeScaleDownEnabled { get; set; }

        /// <summary>
        /// Specifies whether disk auto-scaling is enabled. The default is true.
        /// - Set to `true` to enable disk auto-scaling.
        /// - Set to `false` to disable disk auto-scaling.
        /// </summary>
        [Input("autoScalingDiskGbEnabled")]
        public Input<bool>? AutoScalingDiskGbEnabled { get; set; }

        /// <summary>
        /// Cloud service provider on which the server for a multi-tenant cluster is provisioned.
        /// </summary>
        [Input("backingProviderName")]
        public Input<string>? BackingProviderName { get; set; }

        /// <summary>
        /// Legacy Backup - Set to true to enable Atlas legacy backups for the cluster.
        /// **Important** - MongoDB deprecated the Legacy Backup feature. Clusters that use Legacy Backup can continue to use it. MongoDB recommends using [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/).
        /// * Any net new Atlas clusters of any type do not support this parameter. These clusters must use Cloud Backup, `provider_backup_enabled`, to enable Cloud Backup.  If you create a new Atlas cluster and set `backup_enabled` to true, the Provider will respond with an error.  This change doesn’t affect existing clusters that use legacy backups.
        /// * Set to false to disable legacy backups for the cluster. Atlas deletes any stored snapshots.
        /// * The default value is false.  M10 and above only.
        /// </summary>
        [Input("backupEnabled")]
        public Input<bool>? BackupEnabled { get; set; }

        /// <summary>
        /// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
        /// </summary>
        [Input("biConnector")]
        public Input<Inputs.ClusterBiConnectorGetArgs>? BiConnector { get; set; }

        /// <summary>
        /// The cluster ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
        /// </summary>
        [Input("connectionStrings")]
        public Input<Inputs.ClusterConnectionStringsGetArgs>? ConnectionStrings { get; set; }

        /// <summary>
        /// The Network Peering Container ID. The id of the container either created programmatically by the user before any clusters existed in the project or when the first cluster in the region (AWS/Azure) or project (GCP) was created.
        /// </summary>
        [Input("containerId")]
        public Input<string>? ContainerId { get; set; }

        /// <summary>
        /// Capacity, in gigabytes, of the host’s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
        /// * The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.
        /// * Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.
        /// * Cannot be used with clusters with local NVMe SSDs
        /// * Cannot be used with Azure clusters
        /// </summary>
        [Input("diskSizeGb")]
        public Input<double>? DiskSizeGb { get; set; }

        /// <summary>
        /// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
        /// </summary>
        [Input("encryptionAtRestProvider")]
        public Input<string>? EncryptionAtRestProvider { get; set; }

        [Input("labels")]
        private InputList<Inputs.ClusterLabelGetArgs>? _labels;

        /// <summary>
        /// Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.
        /// </summary>
        public InputList<Inputs.ClusterLabelGetArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.ClusterLabelGetArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `provider_instance_size_name` is either M2 or M5.
        /// </summary>
        [Input("mongoDbMajorVersion")]
        public Input<string>? MongoDbMajorVersion { get; set; }

        /// <summary>
        /// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
        /// </summary>
        [Input("mongoDbVersion")]
        public Input<string>? MongoDbVersion { get; set; }

        /// <summary>
        /// Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.
        /// </summary>
        [Input("mongoUri")]
        public Input<string>? MongoUri { get; set; }

        /// <summary>
        /// Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.
        /// </summary>
        [Input("mongoUriUpdated")]
        public Input<string>? MongoUriUpdated { get; set; }

        /// <summary>
        /// connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.
        /// </summary>
        [Input("mongoUriWithOptions")]
        public Input<string>? MongoUriWithOptions { get; set; }

        /// <summary>
        /// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Number of shards to deploy in the specified zone, minimum 1.
        /// </summary>
        [Input("numShards")]
        public Input<int>? NumShards { get; set; }

        /// <summary>
        /// Flag that indicates whether the cluster is paused or not.
        /// </summary>
        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// - Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, provider_backup_enabled must also be set to true.
        /// </summary>
        [Input("pitEnabled")]
        public Input<bool>? PitEnabled { get; set; }

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.
        /// </summary>
        [Input("providerAutoScalingComputeMaxInstanceSize")]
        public Input<string>? ProviderAutoScalingComputeMaxInstanceSize { get; set; }

        /// <summary>
        /// Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.
        /// </summary>
        [Input("providerAutoScalingComputeMinInstanceSize")]
        public Input<string>? ProviderAutoScalingComputeMinInstanceSize { get; set; }

        /// <summary>
        /// Flag indicating if the cluster uses Cloud Backup for backups.
        /// </summary>
        [Input("providerBackupEnabled")]
        public Input<bool>? ProviderBackupEnabled { get; set; }

        /// <summary>
        /// The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `provider_instance_size_name` and `disk_size_gb`.
        /// </summary>
        [Input("providerDiskIops")]
        public Input<int>? ProviderDiskIops { get; set; }

        /// <summary>
        /// Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
        /// </summary>
        [Input("providerDiskTypeName")]
        public Input<string>? ProviderDiskTypeName { get; set; }

        /// <summary>
        /// If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the cluster.  **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
        /// </summary>
        [Input("providerEncryptEbsVolume")]
        public Input<bool>? ProviderEncryptEbsVolume { get; set; }

        /// <summary>
        /// Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources. 
        /// **Note** free tier (M0) creation is not supported by the Atlas API and hence not supported by this provider.)
        /// </summary>
        [Input("providerInstanceSizeName")]
        public Input<string>? ProviderInstanceSizeName { get; set; }

        /// <summary>
        /// Cloud service provider on which the servers are provisioned.
        /// </summary>
        [Input("providerName")]
        public Input<string>? ProviderName { get; set; }

        /// <summary>
        /// Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
        /// Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
        /// </summary>
        [Input("providerRegionName")]
        public Input<string>? ProviderRegionName { get; set; }

        /// <summary>
        /// The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.
        /// </summary>
        [Input("providerVolumeType")]
        public Input<string>? ProviderVolumeType { get; set; }

        /// <summary>
        /// Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
        /// </summary>
        [Input("replicationFactor")]
        public Input<int>? ReplicationFactor { get; set; }

        [Input("replicationSpecs")]
        private InputList<Inputs.ClusterReplicationSpecGetArgs>? _replicationSpecs;

        /// <summary>
        /// Configuration for cluster regions.  See Replication Spec below for more details.
        /// </summary>
        public InputList<Inputs.ClusterReplicationSpecGetArgs> ReplicationSpecs
        {
            get => _replicationSpecs ?? (_replicationSpecs = new InputList<Inputs.ClusterReplicationSpecGetArgs>());
            set => _replicationSpecs = value;
        }

        [Input("snapshotBackupPolicies")]
        private InputList<Inputs.ClusterSnapshotBackupPolicyGetArgs>? _snapshotBackupPolicies;

        /// <summary>
        /// current snapshot schedule and retention settings for the cluster.
        /// </summary>
        public InputList<Inputs.ClusterSnapshotBackupPolicyGetArgs> SnapshotBackupPolicies
        {
            get => _snapshotBackupPolicies ?? (_snapshotBackupPolicies = new InputList<Inputs.ClusterSnapshotBackupPolicyGetArgs>());
            set => _snapshotBackupPolicies = value;
        }

        /// <summary>
        /// Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.
        /// </summary>
        [Input("srvAddress")]
        public Input<string>? SrvAddress { get; set; }

        /// <summary>
        /// Current state of the cluster. The possible states are:
        /// - IDLE
        /// - CREATING
        /// - UPDATING
        /// - DELETING
        /// - DELETED
        /// - REPAIRING
        /// </summary>
        [Input("stateName")]
        public Input<string>? StateName { get; set; }

        public ClusterState()
        {
        }
    }
}
