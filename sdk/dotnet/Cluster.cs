// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// ## Import
    /// 
    /// Clusters can be imported using project ID and cluster name, in the format `PROJECTID-CLUSTERNAME`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import mongodbatlas:index/cluster:Cluster my_cluster 1112222b3bf99403840e8934-Cluster0
    /// ```
    /// 
    ///  See detailed information for arguments and attributes[MongoDB API Clusters](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/)
    /// </summary>
    [MongodbatlasResourceType("mongodbatlas:index/cluster:Cluster")]
    public partial class Cluster : global::Pulumi.CustomResource
    {
        [Output("advancedConfiguration")]
        public Output<Outputs.ClusterAdvancedConfiguration> AdvancedConfiguration { get; private set; } = null!;

        /// <summary>
        /// Specifies whether cluster tier auto-scaling is enabled. The default is false.
        /// - Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.
        /// - Set to `false` to disable cluster tier auto-scaling.
        /// </summary>
        [Output("autoScalingComputeEnabled")]
        public Output<bool> AutoScalingComputeEnabled { get; private set; } = null!;

        /// <summary>
        /// Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.
        /// - If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`
        /// </summary>
        [Output("autoScalingComputeScaleDownEnabled")]
        public Output<bool> AutoScalingComputeScaleDownEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies whether disk auto-scaling is enabled. The default is true.
        /// - Set to `true` to enable disk auto-scaling.
        /// - Set to `false` to disable disk auto-scaling.
        /// </summary>
        [Output("autoScalingDiskGbEnabled")]
        public Output<bool?> AutoScalingDiskGbEnabled { get; private set; } = null!;

        /// <summary>
        /// Cloud service provider on which the server for a multi-tenant cluster is provisioned.
        /// </summary>
        [Output("backingProviderName")]
        public Output<string> BackingProviderName { get; private set; } = null!;

        /// <summary>
        /// Clusters running MongoDB FCV 4.2 or later and any new Atlas clusters of any type do not support this parameter
        /// </summary>
        [Output("backupEnabled")]
        public Output<bool?> BackupEnabled { get; private set; } = null!;

        /// <summary>
        /// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details. **DEPRECATED** Use `bi_connector_config` instead.
        /// </summary>
        [Output("biConnector")]
        public Output<ImmutableDictionary<string, string>?> BiConnector { get; private set; } = null!;

        /// <summary>
        /// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
        /// </summary>
        [Output("biConnectorConfig")]
        public Output<Outputs.ClusterBiConnectorConfig> BiConnectorConfig { get; private set; } = null!;

        /// <summary>
        /// Flag indicating if the cluster uses Cloud Backup for backups.
        /// </summary>
        [Output("cloudBackup")]
        public Output<bool?> CloudBackup { get; private set; } = null!;

        /// <summary>
        /// The cluster ID.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
        /// </summary>
        [Output("clusterType")]
        public Output<string> ClusterType { get; private set; } = null!;

        /// <summary>
        /// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
        /// </summary>
        [Output("connectionStrings")]
        public Output<ImmutableArray<Outputs.ClusterConnectionString>> ConnectionStrings { get; private set; } = null!;

        /// <summary>
        /// The Container ID is the id of the container created when the first cluster in the region (AWS/Azure) or project (GCP) was created.
        /// </summary>
        [Output("containerId")]
        public Output<string> ContainerId { get; private set; } = null!;

        /// <summary>
        /// Capacity, in gigabytes, of the hostâ€™s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
        /// * The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.
        /// * Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.
        /// * Cannot be used with clusters with local NVMe SSDs
        /// * Cannot be used with Azure clusters
        /// </summary>
        [Output("diskSizeGb")]
        public Output<double> DiskSizeGb { get; private set; } = null!;

        /// <summary>
        /// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
        /// </summary>
        [Output("encryptionAtRestProvider")]
        public Output<string> EncryptionAtRestProvider { get; private set; } = null!;

        [Output("labels")]
        public Output<ImmutableArray<Outputs.ClusterLabel>> Labels { get; private set; } = null!;

        /// <summary>
        /// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.2`, `4.4`, `5.0`, or `6.0`. If omitted, Atlas deploys a cluster that runs MongoDB 5.0. If `provider_instance_size_name`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 5.0. Atlas always deploys the cluster with the latest stable release of the specified version. See [Release Notes](https://www.mongodb.com/docs/upcoming/release-notes/) for latest Current Stable Release.
        /// </summary>
        [Output("mongoDbMajorVersion")]
        public Output<string> MongoDbMajorVersion { get; private set; } = null!;

        /// <summary>
        /// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
        /// </summary>
        [Output("mongoDbVersion")]
        public Output<string> MongoDbVersion { get; private set; } = null!;

        /// <summary>
        /// Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.
        /// </summary>
        [Output("mongoUri")]
        public Output<string> MongoUri { get; private set; } = null!;

        /// <summary>
        /// Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.
        /// </summary>
        [Output("mongoUriUpdated")]
        public Output<string> MongoUriUpdated { get; private set; } = null!;

        /// <summary>
        /// connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.
        /// </summary>
        [Output("mongoUriWithOptions")]
        public Output<string> MongoUriWithOptions { get; private set; } = null!;

        /// <summary>
        /// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Selects whether the cluster is a replica set or a sharded cluster. If you use the replicationSpecs parameter, you must set num_shards.
        /// </summary>
        [Output("numShards")]
        public Output<int?> NumShards { get; private set; } = null!;

        [Output("paused")]
        public Output<bool?> Paused { get; private set; } = null!;

        /// <summary>
        /// Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, cloud_backup must also be set to true.
        /// </summary>
        [Output("pitEnabled")]
        public Output<bool> PitEnabled { get; private set; } = null!;

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.
        /// </summary>
        [Output("providerAutoScalingComputeMaxInstanceSize")]
        public Output<string> ProviderAutoScalingComputeMaxInstanceSize { get; private set; } = null!;

        /// <summary>
        /// Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.
        /// </summary>
        [Output("providerAutoScalingComputeMinInstanceSize")]
        public Output<string> ProviderAutoScalingComputeMinInstanceSize { get; private set; } = null!;

        /// <summary>
        /// Flag indicating if the cluster uses Cloud Backup for backups. **Deprecated** use `cloud_backup` instead.
        /// </summary>
        [Output("providerBackupEnabled")]
        public Output<bool?> ProviderBackupEnabled { get; private set; } = null!;

        /// <summary>
        /// The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `provider_instance_size_name` and `disk_size_gb`.  This setting requires that `provider_instance_size_name` to be M30 or greater and cannot be used with clusters with local NVMe SSDs.  The default value for `provider_disk_iops` is the same as the cluster tier's Standard IOPS value, as viewable in the Atlas console.  It is used in cases where a higher number of IOPS is needed and possible.  If a value is submitted that is lower or equal to the default IOPS value for the cluster tier Atlas ignores the requested value and uses the default.  More details available under the providerSettings.diskIOPS parameter: [MongoDB API Clusters](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/)
        /// * You do not need to configure IOPS for a STANDARD disk configuration but only for a PROVISIONED configuration.
        /// </summary>
        [Output("providerDiskIops")]
        public Output<int> ProviderDiskIops { get; private set; } = null!;

        /// <summary>
        /// Azure disk type of the serverâ€™s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P15 - 256GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
        /// </summary>
        [Output("providerDiskTypeName")]
        public Output<string> ProviderDiskTypeName { get; private set; } = null!;

        /// <summary>
        /// **(Deprecated) The Flag is always true.** Flag that indicates whether the Amazon EBS encryption feature encrypts the host's root volume for both data at rest within the volume and for data moving between the volume and the cluster. Note: This setting is always enabled for clusters with local NVMe SSDs. **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default.**.
        /// </summary>
        [Output("providerEncryptEbsVolume")]
        public Output<bool> ProviderEncryptEbsVolume { get; private set; } = null!;

        [Output("providerEncryptEbsVolumeFlag")]
        public Output<bool> ProviderEncryptEbsVolumeFlag { get; private set; } = null!;

        /// <summary>
        /// Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources.
        /// </summary>
        [Output("providerInstanceSizeName")]
        public Output<string> ProviderInstanceSizeName { get; private set; } = null!;

        /// <summary>
        /// Cloud service provider on which the servers are provisioned.
        /// </summary>
        [Output("providerName")]
        public Output<string> ProviderName { get; private set; } = null!;

        /// <summary>
        /// Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
        /// Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
        /// </summary>
        [Output("providerRegionName")]
        public Output<string> ProviderRegionName { get; private set; } = null!;

        /// <summary>
        /// The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` is ONLY required if setting IOPS higher than the default instance IOPS.
        /// </summary>
        [Output("providerVolumeType")]
        public Output<string> ProviderVolumeType { get; private set; } = null!;

        /// <summary>
        /// Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
        /// </summary>
        [Output("replicationFactor")]
        public Output<int> ReplicationFactor { get; private set; } = null!;

        /// <summary>
        /// Configuration for cluster regions.  See Replication Spec below for more details.
        /// </summary>
        [Output("replicationSpecs")]
        public Output<ImmutableArray<Outputs.ClusterReplicationSpec>> ReplicationSpecs { get; private set; } = null!;

        /// <summary>
        /// current snapshot schedule and retention settings for the cluster.
        /// </summary>
        [Output("snapshotBackupPolicies")]
        public Output<ImmutableArray<Outputs.ClusterSnapshotBackupPolicy>> SnapshotBackupPolicies { get; private set; } = null!;

        /// <summary>
        /// Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.
        /// </summary>
        [Output("srvAddress")]
        public Output<string> SrvAddress { get; private set; } = null!;

        /// <summary>
        /// Current state of the cluster. The possible states are:
        /// - IDLE
        /// - CREATING
        /// - UPDATING
        /// - DELETING
        /// - DELETED
        /// - REPAIRING
        /// </summary>
        [Output("stateName")]
        public Output<string> StateName { get; private set; } = null!;

        /// <summary>
        /// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
        /// </summary>
        [Output("terminationProtectionEnabled")]
        public Output<bool> TerminationProtectionEnabled { get; private set; } = null!;

        /// <summary>
        /// Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
        /// </summary>
        [Output("versionReleaseSystem")]
        public Output<string?> VersionReleaseSystem { get; private set; } = null!;


        /// <summary>
        /// Create a Cluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Cluster(string name, ClusterArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/cluster:Cluster", name, args ?? new ClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private Cluster(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/cluster:Cluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing Cluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static Cluster Get(string name, Input<string> id, ClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new Cluster(name, id, state, options);
        }
    }

    public sealed class ClusterArgs : global::Pulumi.ResourceArgs
    {
        [Input("advancedConfiguration")]
        public Input<Inputs.ClusterAdvancedConfigurationArgs>? AdvancedConfiguration { get; set; }

        /// <summary>
        /// Specifies whether cluster tier auto-scaling is enabled. The default is false.
        /// - Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.
        /// - Set to `false` to disable cluster tier auto-scaling.
        /// </summary>
        [Input("autoScalingComputeEnabled")]
        public Input<bool>? AutoScalingComputeEnabled { get; set; }

        /// <summary>
        /// Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.
        /// - If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`
        /// </summary>
        [Input("autoScalingComputeScaleDownEnabled")]
        public Input<bool>? AutoScalingComputeScaleDownEnabled { get; set; }

        /// <summary>
        /// Specifies whether disk auto-scaling is enabled. The default is true.
        /// - Set to `true` to enable disk auto-scaling.
        /// - Set to `false` to disable disk auto-scaling.
        /// </summary>
        [Input("autoScalingDiskGbEnabled")]
        public Input<bool>? AutoScalingDiskGbEnabled { get; set; }

        /// <summary>
        /// Cloud service provider on which the server for a multi-tenant cluster is provisioned.
        /// </summary>
        [Input("backingProviderName")]
        public Input<string>? BackingProviderName { get; set; }

        /// <summary>
        /// Clusters running MongoDB FCV 4.2 or later and any new Atlas clusters of any type do not support this parameter
        /// </summary>
        [Input("backupEnabled")]
        public Input<bool>? BackupEnabled { get; set; }

        [Input("biConnector")]
        private InputMap<string>? _biConnector;

        /// <summary>
        /// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details. **DEPRECATED** Use `bi_connector_config` instead.
        /// </summary>
        [Obsolete(@"use bi_connector_config instead")]
        public InputMap<string> BiConnector
        {
            get => _biConnector ?? (_biConnector = new InputMap<string>());
            set => _biConnector = value;
        }

        /// <summary>
        /// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
        /// </summary>
        [Input("biConnectorConfig")]
        public Input<Inputs.ClusterBiConnectorConfigArgs>? BiConnectorConfig { get; set; }

        /// <summary>
        /// Flag indicating if the cluster uses Cloud Backup for backups.
        /// </summary>
        [Input("cloudBackup")]
        public Input<bool>? CloudBackup { get; set; }

        /// <summary>
        /// Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// Capacity, in gigabytes, of the hostâ€™s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
        /// * The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.
        /// * Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.
        /// * Cannot be used with clusters with local NVMe SSDs
        /// * Cannot be used with Azure clusters
        /// </summary>
        [Input("diskSizeGb")]
        public Input<double>? DiskSizeGb { get; set; }

        /// <summary>
        /// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
        /// </summary>
        [Input("encryptionAtRestProvider")]
        public Input<string>? EncryptionAtRestProvider { get; set; }

        [Input("labels")]
        private InputList<Inputs.ClusterLabelArgs>? _labels;
        public InputList<Inputs.ClusterLabelArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.ClusterLabelArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.2`, `4.4`, `5.0`, or `6.0`. If omitted, Atlas deploys a cluster that runs MongoDB 5.0. If `provider_instance_size_name`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 5.0. Atlas always deploys the cluster with the latest stable release of the specified version. See [Release Notes](https://www.mongodb.com/docs/upcoming/release-notes/) for latest Current Stable Release.
        /// </summary>
        [Input("mongoDbMajorVersion")]
        public Input<string>? MongoDbMajorVersion { get; set; }

        /// <summary>
        /// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Selects whether the cluster is a replica set or a sharded cluster. If you use the replicationSpecs parameter, you must set num_shards.
        /// </summary>
        [Input("numShards")]
        public Input<int>? NumShards { get; set; }

        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, cloud_backup must also be set to true.
        /// </summary>
        [Input("pitEnabled")]
        public Input<bool>? PitEnabled { get; set; }

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.
        /// </summary>
        [Input("providerAutoScalingComputeMaxInstanceSize")]
        public Input<string>? ProviderAutoScalingComputeMaxInstanceSize { get; set; }

        /// <summary>
        /// Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.
        /// </summary>
        [Input("providerAutoScalingComputeMinInstanceSize")]
        public Input<string>? ProviderAutoScalingComputeMinInstanceSize { get; set; }

        /// <summary>
        /// Flag indicating if the cluster uses Cloud Backup for backups. **Deprecated** use `cloud_backup` instead.
        /// </summary>
        [Input("providerBackupEnabled")]
        public Input<bool>? ProviderBackupEnabled { get; set; }

        /// <summary>
        /// The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `provider_instance_size_name` and `disk_size_gb`.  This setting requires that `provider_instance_size_name` to be M30 or greater and cannot be used with clusters with local NVMe SSDs.  The default value for `provider_disk_iops` is the same as the cluster tier's Standard IOPS value, as viewable in the Atlas console.  It is used in cases where a higher number of IOPS is needed and possible.  If a value is submitted that is lower or equal to the default IOPS value for the cluster tier Atlas ignores the requested value and uses the default.  More details available under the providerSettings.diskIOPS parameter: [MongoDB API Clusters](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/)
        /// * You do not need to configure IOPS for a STANDARD disk configuration but only for a PROVISIONED configuration.
        /// </summary>
        [Input("providerDiskIops")]
        public Input<int>? ProviderDiskIops { get; set; }

        /// <summary>
        /// Azure disk type of the serverâ€™s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P15 - 256GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
        /// </summary>
        [Input("providerDiskTypeName")]
        public Input<string>? ProviderDiskTypeName { get; set; }

        /// <summary>
        /// **(Deprecated) The Flag is always true.** Flag that indicates whether the Amazon EBS encryption feature encrypts the host's root volume for both data at rest within the volume and for data moving between the volume and the cluster. Note: This setting is always enabled for clusters with local NVMe SSDs. **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default.**.
        /// </summary>
        [Input("providerEncryptEbsVolume")]
        public Input<bool>? ProviderEncryptEbsVolume { get; set; }

        /// <summary>
        /// Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources.
        /// </summary>
        [Input("providerInstanceSizeName", required: true)]
        public Input<string> ProviderInstanceSizeName { get; set; } = null!;

        /// <summary>
        /// Cloud service provider on which the servers are provisioned.
        /// </summary>
        [Input("providerName", required: true)]
        public Input<string> ProviderName { get; set; } = null!;

        /// <summary>
        /// Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
        /// Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
        /// </summary>
        [Input("providerRegionName")]
        public Input<string>? ProviderRegionName { get; set; }

        /// <summary>
        /// The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` is ONLY required if setting IOPS higher than the default instance IOPS.
        /// </summary>
        [Input("providerVolumeType")]
        public Input<string>? ProviderVolumeType { get; set; }

        /// <summary>
        /// Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
        /// </summary>
        [Input("replicationFactor")]
        public Input<int>? ReplicationFactor { get; set; }

        [Input("replicationSpecs")]
        private InputList<Inputs.ClusterReplicationSpecArgs>? _replicationSpecs;

        /// <summary>
        /// Configuration for cluster regions.  See Replication Spec below for more details.
        /// </summary>
        public InputList<Inputs.ClusterReplicationSpecArgs> ReplicationSpecs
        {
            get => _replicationSpecs ?? (_replicationSpecs = new InputList<Inputs.ClusterReplicationSpecArgs>());
            set => _replicationSpecs = value;
        }

        /// <summary>
        /// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
        /// </summary>
        [Input("terminationProtectionEnabled")]
        public Input<bool>? TerminationProtectionEnabled { get; set; }

        /// <summary>
        /// Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
        /// </summary>
        [Input("versionReleaseSystem")]
        public Input<string>? VersionReleaseSystem { get; set; }

        public ClusterArgs()
        {
        }
        public static new ClusterArgs Empty => new ClusterArgs();
    }

    public sealed class ClusterState : global::Pulumi.ResourceArgs
    {
        [Input("advancedConfiguration")]
        public Input<Inputs.ClusterAdvancedConfigurationGetArgs>? AdvancedConfiguration { get; set; }

        /// <summary>
        /// Specifies whether cluster tier auto-scaling is enabled. The default is false.
        /// - Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.
        /// - Set to `false` to disable cluster tier auto-scaling.
        /// </summary>
        [Input("autoScalingComputeEnabled")]
        public Input<bool>? AutoScalingComputeEnabled { get; set; }

        /// <summary>
        /// Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.
        /// - If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`
        /// </summary>
        [Input("autoScalingComputeScaleDownEnabled")]
        public Input<bool>? AutoScalingComputeScaleDownEnabled { get; set; }

        /// <summary>
        /// Specifies whether disk auto-scaling is enabled. The default is true.
        /// - Set to `true` to enable disk auto-scaling.
        /// - Set to `false` to disable disk auto-scaling.
        /// </summary>
        [Input("autoScalingDiskGbEnabled")]
        public Input<bool>? AutoScalingDiskGbEnabled { get; set; }

        /// <summary>
        /// Cloud service provider on which the server for a multi-tenant cluster is provisioned.
        /// </summary>
        [Input("backingProviderName")]
        public Input<string>? BackingProviderName { get; set; }

        /// <summary>
        /// Clusters running MongoDB FCV 4.2 or later and any new Atlas clusters of any type do not support this parameter
        /// </summary>
        [Input("backupEnabled")]
        public Input<bool>? BackupEnabled { get; set; }

        [Input("biConnector")]
        private InputMap<string>? _biConnector;

        /// <summary>
        /// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details. **DEPRECATED** Use `bi_connector_config` instead.
        /// </summary>
        [Obsolete(@"use bi_connector_config instead")]
        public InputMap<string> BiConnector
        {
            get => _biConnector ?? (_biConnector = new InputMap<string>());
            set => _biConnector = value;
        }

        /// <summary>
        /// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
        /// </summary>
        [Input("biConnectorConfig")]
        public Input<Inputs.ClusterBiConnectorConfigGetArgs>? BiConnectorConfig { get; set; }

        /// <summary>
        /// Flag indicating if the cluster uses Cloud Backup for backups.
        /// </summary>
        [Input("cloudBackup")]
        public Input<bool>? CloudBackup { get; set; }

        /// <summary>
        /// The cluster ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.ClusterConnectionStringGetArgs>? _connectionStrings;

        /// <summary>
        /// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
        /// </summary>
        public InputList<Inputs.ClusterConnectionStringGetArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.ClusterConnectionStringGetArgs>());
            set => _connectionStrings = value;
        }

        /// <summary>
        /// The Container ID is the id of the container created when the first cluster in the region (AWS/Azure) or project (GCP) was created.
        /// </summary>
        [Input("containerId")]
        public Input<string>? ContainerId { get; set; }

        /// <summary>
        /// Capacity, in gigabytes, of the hostâ€™s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
        /// * The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.
        /// * Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.
        /// * Cannot be used with clusters with local NVMe SSDs
        /// * Cannot be used with Azure clusters
        /// </summary>
        [Input("diskSizeGb")]
        public Input<double>? DiskSizeGb { get; set; }

        /// <summary>
        /// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
        /// </summary>
        [Input("encryptionAtRestProvider")]
        public Input<string>? EncryptionAtRestProvider { get; set; }

        [Input("labels")]
        private InputList<Inputs.ClusterLabelGetArgs>? _labels;
        public InputList<Inputs.ClusterLabelGetArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.ClusterLabelGetArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.2`, `4.4`, `5.0`, or `6.0`. If omitted, Atlas deploys a cluster that runs MongoDB 5.0. If `provider_instance_size_name`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 5.0. Atlas always deploys the cluster with the latest stable release of the specified version. See [Release Notes](https://www.mongodb.com/docs/upcoming/release-notes/) for latest Current Stable Release.
        /// </summary>
        [Input("mongoDbMajorVersion")]
        public Input<string>? MongoDbMajorVersion { get; set; }

        /// <summary>
        /// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
        /// </summary>
        [Input("mongoDbVersion")]
        public Input<string>? MongoDbVersion { get; set; }

        /// <summary>
        /// Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.
        /// </summary>
        [Input("mongoUri")]
        public Input<string>? MongoUri { get; set; }

        /// <summary>
        /// Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.
        /// </summary>
        [Input("mongoUriUpdated")]
        public Input<string>? MongoUriUpdated { get; set; }

        /// <summary>
        /// connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.
        /// </summary>
        [Input("mongoUriWithOptions")]
        public Input<string>? MongoUriWithOptions { get; set; }

        /// <summary>
        /// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Selects whether the cluster is a replica set or a sharded cluster. If you use the replicationSpecs parameter, you must set num_shards.
        /// </summary>
        [Input("numShards")]
        public Input<int>? NumShards { get; set; }

        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, cloud_backup must also be set to true.
        /// </summary>
        [Input("pitEnabled")]
        public Input<bool>? PitEnabled { get; set; }

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.
        /// </summary>
        [Input("providerAutoScalingComputeMaxInstanceSize")]
        public Input<string>? ProviderAutoScalingComputeMaxInstanceSize { get; set; }

        /// <summary>
        /// Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.
        /// </summary>
        [Input("providerAutoScalingComputeMinInstanceSize")]
        public Input<string>? ProviderAutoScalingComputeMinInstanceSize { get; set; }

        /// <summary>
        /// Flag indicating if the cluster uses Cloud Backup for backups. **Deprecated** use `cloud_backup` instead.
        /// </summary>
        [Input("providerBackupEnabled")]
        public Input<bool>? ProviderBackupEnabled { get; set; }

        /// <summary>
        /// The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `provider_instance_size_name` and `disk_size_gb`.  This setting requires that `provider_instance_size_name` to be M30 or greater and cannot be used with clusters with local NVMe SSDs.  The default value for `provider_disk_iops` is the same as the cluster tier's Standard IOPS value, as viewable in the Atlas console.  It is used in cases where a higher number of IOPS is needed and possible.  If a value is submitted that is lower or equal to the default IOPS value for the cluster tier Atlas ignores the requested value and uses the default.  More details available under the providerSettings.diskIOPS parameter: [MongoDB API Clusters](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/)
        /// * You do not need to configure IOPS for a STANDARD disk configuration but only for a PROVISIONED configuration.
        /// </summary>
        [Input("providerDiskIops")]
        public Input<int>? ProviderDiskIops { get; set; }

        /// <summary>
        /// Azure disk type of the serverâ€™s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P15 - 256GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
        /// </summary>
        [Input("providerDiskTypeName")]
        public Input<string>? ProviderDiskTypeName { get; set; }

        /// <summary>
        /// **(Deprecated) The Flag is always true.** Flag that indicates whether the Amazon EBS encryption feature encrypts the host's root volume for both data at rest within the volume and for data moving between the volume and the cluster. Note: This setting is always enabled for clusters with local NVMe SSDs. **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default.**.
        /// </summary>
        [Input("providerEncryptEbsVolume")]
        public Input<bool>? ProviderEncryptEbsVolume { get; set; }

        [Input("providerEncryptEbsVolumeFlag")]
        public Input<bool>? ProviderEncryptEbsVolumeFlag { get; set; }

        /// <summary>
        /// Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources.
        /// </summary>
        [Input("providerInstanceSizeName")]
        public Input<string>? ProviderInstanceSizeName { get; set; }

        /// <summary>
        /// Cloud service provider on which the servers are provisioned.
        /// </summary>
        [Input("providerName")]
        public Input<string>? ProviderName { get; set; }

        /// <summary>
        /// Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
        /// Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
        /// </summary>
        [Input("providerRegionName")]
        public Input<string>? ProviderRegionName { get; set; }

        /// <summary>
        /// The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` is ONLY required if setting IOPS higher than the default instance IOPS.
        /// </summary>
        [Input("providerVolumeType")]
        public Input<string>? ProviderVolumeType { get; set; }

        /// <summary>
        /// Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
        /// </summary>
        [Input("replicationFactor")]
        public Input<int>? ReplicationFactor { get; set; }

        [Input("replicationSpecs")]
        private InputList<Inputs.ClusterReplicationSpecGetArgs>? _replicationSpecs;

        /// <summary>
        /// Configuration for cluster regions.  See Replication Spec below for more details.
        /// </summary>
        public InputList<Inputs.ClusterReplicationSpecGetArgs> ReplicationSpecs
        {
            get => _replicationSpecs ?? (_replicationSpecs = new InputList<Inputs.ClusterReplicationSpecGetArgs>());
            set => _replicationSpecs = value;
        }

        [Input("snapshotBackupPolicies")]
        private InputList<Inputs.ClusterSnapshotBackupPolicyGetArgs>? _snapshotBackupPolicies;

        /// <summary>
        /// current snapshot schedule and retention settings for the cluster.
        /// </summary>
        public InputList<Inputs.ClusterSnapshotBackupPolicyGetArgs> SnapshotBackupPolicies
        {
            get => _snapshotBackupPolicies ?? (_snapshotBackupPolicies = new InputList<Inputs.ClusterSnapshotBackupPolicyGetArgs>());
            set => _snapshotBackupPolicies = value;
        }

        /// <summary>
        /// Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.
        /// </summary>
        [Input("srvAddress")]
        public Input<string>? SrvAddress { get; set; }

        /// <summary>
        /// Current state of the cluster. The possible states are:
        /// - IDLE
        /// - CREATING
        /// - UPDATING
        /// - DELETING
        /// - DELETED
        /// - REPAIRING
        /// </summary>
        [Input("stateName")]
        public Input<string>? StateName { get; set; }

        /// <summary>
        /// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
        /// </summary>
        [Input("terminationProtectionEnabled")]
        public Input<bool>? TerminationProtectionEnabled { get; set; }

        /// <summary>
        /// Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
        /// </summary>
        [Input("versionReleaseSystem")]
        public Input<string>? VersionReleaseSystem { get; set; }

        public ClusterState()
        {
        }
        public static new ClusterState Empty => new ClusterState();
    }
}
