// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetStreamProcessors
    {
        /// <summary>
        /// ## # Data Source: mongodbatlas.getStreamProcessors
        /// 
        /// `mongodbatlas.getStreamProcessors` returns all stream processors in a stream instance.
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Mongodbatlas.StreamInstance("example", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = "InstanceName",
        ///         DataProcessRegion = new Mongodbatlas.Inputs.StreamInstanceDataProcessRegionArgs
        ///         {
        ///             Region = "VIRGINIA_USA",
        ///             CloudProvider = "AWS",
        ///         },
        ///     });
        /// 
        ///     var example_sample = new Mongodbatlas.StreamConnection("example-sample", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ConnectionName = "sample_stream_solar",
        ///         Type = "Sample",
        ///     });
        /// 
        ///     var example_cluster = new Mongodbatlas.StreamConnection("example-cluster", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ConnectionName = "ClusterConnection",
        ///         Type = "Cluster",
        ///         ClusterName = clusterName,
        ///         DbRoleToExecute = new Mongodbatlas.Inputs.StreamConnectionDbRoleToExecuteArgs
        ///         {
        ///             Role = "atlasAdmin",
        ///             Type = "BUILT_IN",
        ///         },
        ///     });
        /// 
        ///     var example_kafka = new Mongodbatlas.StreamConnection("example-kafka", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ConnectionName = "KafkaPlaintextConnection",
        ///         Type = "Kafka",
        ///         Authentication = new Mongodbatlas.Inputs.StreamConnectionAuthenticationArgs
        ///         {
        ///             Mechanism = "PLAIN",
        ///             Username = kafkaUsername,
        ///             Password = kafkaPassword,
        ///         },
        ///         BootstrapServers = "localhost:9092,localhost:9092",
        ///         Config = 
        ///         {
        ///             { "auto.offset.reset", "earliest" },
        ///         },
        ///         Security = new Mongodbatlas.Inputs.StreamConnectionSecurityArgs
        ///         {
        ///             Protocol = "PLAINTEXT",
        ///         },
        ///     });
        /// 
        ///     var stream_processor_sample_example = new Mongodbatlas.StreamProcessor("stream-processor-sample-example", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ProcessorName = "sampleProcessorName",
        ///         Pipeline = JsonSerializer.Serialize(new[]
        ///         {
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$source"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_sample.ConnectionName,
        ///                 },
        ///             },
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$emit"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_cluster.ConnectionName,
        ///                     ["db"] = "sample",
        ///                     ["coll"] = "solar",
        ///                     ["timeseries"] = new Dictionary&lt;string, object?&gt;
        ///                     {
        ///                         ["timeField"] = "_ts",
        ///                     },
        ///                 },
        ///             },
        ///         }),
        ///         State = "STARTED",
        ///     });
        /// 
        ///     var stream_processor_cluster_to_kafka_example = new Mongodbatlas.StreamProcessor("stream-processor-cluster-to-kafka-example", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ProcessorName = "clusterProcessorName",
        ///         Pipeline = JsonSerializer.Serialize(new[]
        ///         {
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$source"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_cluster.ConnectionName,
        ///                 },
        ///             },
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$emit"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_kafka.ConnectionName,
        ///                     ["topic"] = "topic_from_cluster",
        ///                 },
        ///             },
        ///         }),
        ///         State = "CREATED",
        ///     });
        /// 
        ///     var stream_processor_kafka_to_cluster_example = new Mongodbatlas.StreamProcessor("stream-processor-kafka-to-cluster-example", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ProcessorName = "kafkaProcessorName",
        ///         Pipeline = JsonSerializer.Serialize(new[]
        ///         {
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$source"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_kafka.ConnectionName,
        ///                     ["topic"] = "topic_source",
        ///                 },
        ///             },
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$emit"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_cluster.ConnectionName,
        ///                     ["db"] = "kafka",
        ///                     ["coll"] = "topic_source",
        ///                     ["timeseries"] = new Dictionary&lt;string, object?&gt;
        ///                     {
        ///                         ["timeField"] = "ts",
        ///                     },
        ///                 },
        ///             },
        ///         }),
        ///         State = "CREATED",
        ///         Options = new Mongodbatlas.Inputs.StreamProcessorOptionsArgs
        ///         {
        ///             Dlq = new Mongodbatlas.Inputs.StreamProcessorOptionsDlqArgs
        ///             {
        ///                 Coll = "exampleColumn",
        ///                 ConnectionName = mongodbatlasStreamConnection.Example_cluster.ConnectionName,
        ///                 Db = "exampleDb",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var example_stream_processors = Mongodbatlas.GetStreamProcessors.Invoke(new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///     });
        /// 
        ///     var example_stream_processor = Mongodbatlas.GetStreamProcessor.Invoke(new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ProcessorName = stream_processor_sample_example.ProcessorName,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["streamProcessorsState"] = example_stream_processor.Apply(example_stream_processor =&gt; example_stream_processor.Apply(getStreamProcessorResult =&gt; getStreamProcessorResult.State)),
        ///         ["streamProcessorsResults"] = example_stream_processors.Apply(example_stream_processors =&gt; example_stream_processors.Apply(getStreamProcessorsResult =&gt; getStreamProcessorsResult.Results)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamProcessorsResult> InvokeAsync(GetStreamProcessorsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamProcessorsResult>("mongodbatlas:index/getStreamProcessors:getStreamProcessors", args ?? new GetStreamProcessorsArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.getStreamProcessors
        /// 
        /// `mongodbatlas.getStreamProcessors` returns all stream processors in a stream instance.
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Mongodbatlas.StreamInstance("example", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = "InstanceName",
        ///         DataProcessRegion = new Mongodbatlas.Inputs.StreamInstanceDataProcessRegionArgs
        ///         {
        ///             Region = "VIRGINIA_USA",
        ///             CloudProvider = "AWS",
        ///         },
        ///     });
        /// 
        ///     var example_sample = new Mongodbatlas.StreamConnection("example-sample", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ConnectionName = "sample_stream_solar",
        ///         Type = "Sample",
        ///     });
        /// 
        ///     var example_cluster = new Mongodbatlas.StreamConnection("example-cluster", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ConnectionName = "ClusterConnection",
        ///         Type = "Cluster",
        ///         ClusterName = clusterName,
        ///         DbRoleToExecute = new Mongodbatlas.Inputs.StreamConnectionDbRoleToExecuteArgs
        ///         {
        ///             Role = "atlasAdmin",
        ///             Type = "BUILT_IN",
        ///         },
        ///     });
        /// 
        ///     var example_kafka = new Mongodbatlas.StreamConnection("example-kafka", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ConnectionName = "KafkaPlaintextConnection",
        ///         Type = "Kafka",
        ///         Authentication = new Mongodbatlas.Inputs.StreamConnectionAuthenticationArgs
        ///         {
        ///             Mechanism = "PLAIN",
        ///             Username = kafkaUsername,
        ///             Password = kafkaPassword,
        ///         },
        ///         BootstrapServers = "localhost:9092,localhost:9092",
        ///         Config = 
        ///         {
        ///             { "auto.offset.reset", "earliest" },
        ///         },
        ///         Security = new Mongodbatlas.Inputs.StreamConnectionSecurityArgs
        ///         {
        ///             Protocol = "PLAINTEXT",
        ///         },
        ///     });
        /// 
        ///     var stream_processor_sample_example = new Mongodbatlas.StreamProcessor("stream-processor-sample-example", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ProcessorName = "sampleProcessorName",
        ///         Pipeline = JsonSerializer.Serialize(new[]
        ///         {
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$source"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_sample.ConnectionName,
        ///                 },
        ///             },
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$emit"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_cluster.ConnectionName,
        ///                     ["db"] = "sample",
        ///                     ["coll"] = "solar",
        ///                     ["timeseries"] = new Dictionary&lt;string, object?&gt;
        ///                     {
        ///                         ["timeField"] = "_ts",
        ///                     },
        ///                 },
        ///             },
        ///         }),
        ///         State = "STARTED",
        ///     });
        /// 
        ///     var stream_processor_cluster_to_kafka_example = new Mongodbatlas.StreamProcessor("stream-processor-cluster-to-kafka-example", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ProcessorName = "clusterProcessorName",
        ///         Pipeline = JsonSerializer.Serialize(new[]
        ///         {
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$source"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_cluster.ConnectionName,
        ///                 },
        ///             },
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$emit"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_kafka.ConnectionName,
        ///                     ["topic"] = "topic_from_cluster",
        ///                 },
        ///             },
        ///         }),
        ///         State = "CREATED",
        ///     });
        /// 
        ///     var stream_processor_kafka_to_cluster_example = new Mongodbatlas.StreamProcessor("stream-processor-kafka-to-cluster-example", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ProcessorName = "kafkaProcessorName",
        ///         Pipeline = JsonSerializer.Serialize(new[]
        ///         {
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$source"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_kafka.ConnectionName,
        ///                     ["topic"] = "topic_source",
        ///                 },
        ///             },
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$emit"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_cluster.ConnectionName,
        ///                     ["db"] = "kafka",
        ///                     ["coll"] = "topic_source",
        ///                     ["timeseries"] = new Dictionary&lt;string, object?&gt;
        ///                     {
        ///                         ["timeField"] = "ts",
        ///                     },
        ///                 },
        ///             },
        ///         }),
        ///         State = "CREATED",
        ///         Options = new Mongodbatlas.Inputs.StreamProcessorOptionsArgs
        ///         {
        ///             Dlq = new Mongodbatlas.Inputs.StreamProcessorOptionsDlqArgs
        ///             {
        ///                 Coll = "exampleColumn",
        ///                 ConnectionName = mongodbatlasStreamConnection.Example_cluster.ConnectionName,
        ///                 Db = "exampleDb",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var example_stream_processors = Mongodbatlas.GetStreamProcessors.Invoke(new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///     });
        /// 
        ///     var example_stream_processor = Mongodbatlas.GetStreamProcessor.Invoke(new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ProcessorName = stream_processor_sample_example.ProcessorName,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["streamProcessorsState"] = example_stream_processor.Apply(example_stream_processor =&gt; example_stream_processor.Apply(getStreamProcessorResult =&gt; getStreamProcessorResult.State)),
        ///         ["streamProcessorsResults"] = example_stream_processors.Apply(example_stream_processors =&gt; example_stream_processors.Apply(getStreamProcessorsResult =&gt; getStreamProcessorsResult.Results)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamProcessorsResult> Invoke(GetStreamProcessorsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamProcessorsResult>("mongodbatlas:index/getStreamProcessors:getStreamProcessors", args ?? new GetStreamProcessorsInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.getStreamProcessors
        /// 
        /// `mongodbatlas.getStreamProcessors` returns all stream processors in a stream instance.
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using System.Text.Json;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var example = new Mongodbatlas.StreamInstance("example", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = "InstanceName",
        ///         DataProcessRegion = new Mongodbatlas.Inputs.StreamInstanceDataProcessRegionArgs
        ///         {
        ///             Region = "VIRGINIA_USA",
        ///             CloudProvider = "AWS",
        ///         },
        ///     });
        /// 
        ///     var example_sample = new Mongodbatlas.StreamConnection("example-sample", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ConnectionName = "sample_stream_solar",
        ///         Type = "Sample",
        ///     });
        /// 
        ///     var example_cluster = new Mongodbatlas.StreamConnection("example-cluster", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ConnectionName = "ClusterConnection",
        ///         Type = "Cluster",
        ///         ClusterName = clusterName,
        ///         DbRoleToExecute = new Mongodbatlas.Inputs.StreamConnectionDbRoleToExecuteArgs
        ///         {
        ///             Role = "atlasAdmin",
        ///             Type = "BUILT_IN",
        ///         },
        ///     });
        /// 
        ///     var example_kafka = new Mongodbatlas.StreamConnection("example-kafka", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ConnectionName = "KafkaPlaintextConnection",
        ///         Type = "Kafka",
        ///         Authentication = new Mongodbatlas.Inputs.StreamConnectionAuthenticationArgs
        ///         {
        ///             Mechanism = "PLAIN",
        ///             Username = kafkaUsername,
        ///             Password = kafkaPassword,
        ///         },
        ///         BootstrapServers = "localhost:9092,localhost:9092",
        ///         Config = 
        ///         {
        ///             { "auto.offset.reset", "earliest" },
        ///         },
        ///         Security = new Mongodbatlas.Inputs.StreamConnectionSecurityArgs
        ///         {
        ///             Protocol = "PLAINTEXT",
        ///         },
        ///     });
        /// 
        ///     var stream_processor_sample_example = new Mongodbatlas.StreamProcessor("stream-processor-sample-example", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ProcessorName = "sampleProcessorName",
        ///         Pipeline = JsonSerializer.Serialize(new[]
        ///         {
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$source"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_sample.ConnectionName,
        ///                 },
        ///             },
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$emit"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_cluster.ConnectionName,
        ///                     ["db"] = "sample",
        ///                     ["coll"] = "solar",
        ///                     ["timeseries"] = new Dictionary&lt;string, object?&gt;
        ///                     {
        ///                         ["timeField"] = "_ts",
        ///                     },
        ///                 },
        ///             },
        ///         }),
        ///         State = "STARTED",
        ///     });
        /// 
        ///     var stream_processor_cluster_to_kafka_example = new Mongodbatlas.StreamProcessor("stream-processor-cluster-to-kafka-example", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ProcessorName = "clusterProcessorName",
        ///         Pipeline = JsonSerializer.Serialize(new[]
        ///         {
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$source"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_cluster.ConnectionName,
        ///                 },
        ///             },
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$emit"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_kafka.ConnectionName,
        ///                     ["topic"] = "topic_from_cluster",
        ///                 },
        ///             },
        ///         }),
        ///         State = "CREATED",
        ///     });
        /// 
        ///     var stream_processor_kafka_to_cluster_example = new Mongodbatlas.StreamProcessor("stream-processor-kafka-to-cluster-example", new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ProcessorName = "kafkaProcessorName",
        ///         Pipeline = JsonSerializer.Serialize(new[]
        ///         {
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$source"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_kafka.ConnectionName,
        ///                     ["topic"] = "topic_source",
        ///                 },
        ///             },
        ///             new Dictionary&lt;string, object?&gt;
        ///             {
        ///                 ["$emit"] = new Dictionary&lt;string, object?&gt;
        ///                 {
        ///                     ["connectionName"] = mongodbatlasStreamConnection.Example_cluster.ConnectionName,
        ///                     ["db"] = "kafka",
        ///                     ["coll"] = "topic_source",
        ///                     ["timeseries"] = new Dictionary&lt;string, object?&gt;
        ///                     {
        ///                         ["timeField"] = "ts",
        ///                     },
        ///                 },
        ///             },
        ///         }),
        ///         State = "CREATED",
        ///         Options = new Mongodbatlas.Inputs.StreamProcessorOptionsArgs
        ///         {
        ///             Dlq = new Mongodbatlas.Inputs.StreamProcessorOptionsDlqArgs
        ///             {
        ///                 Coll = "exampleColumn",
        ///                 ConnectionName = mongodbatlasStreamConnection.Example_cluster.ConnectionName,
        ///                 Db = "exampleDb",
        ///             },
        ///         },
        ///     });
        /// 
        ///     var example_stream_processors = Mongodbatlas.GetStreamProcessors.Invoke(new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///     });
        /// 
        ///     var example_stream_processor = Mongodbatlas.GetStreamProcessor.Invoke(new()
        ///     {
        ///         ProjectId = projectId,
        ///         InstanceName = example.InstanceName,
        ///         ProcessorName = stream_processor_sample_example.ProcessorName,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["streamProcessorsState"] = example_stream_processor.Apply(example_stream_processor =&gt; example_stream_processor.Apply(getStreamProcessorResult =&gt; getStreamProcessorResult.State)),
        ///         ["streamProcessorsResults"] = example_stream_processors.Apply(example_stream_processors =&gt; example_stream_processors.Apply(getStreamProcessorsResult =&gt; getStreamProcessorsResult.Results)),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamProcessorsResult> Invoke(GetStreamProcessorsInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamProcessorsResult>("mongodbatlas:index/getStreamProcessors:getStreamProcessors", args ?? new GetStreamProcessorsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamProcessorsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Human-readable label that identifies the stream instance.
        /// </summary>
        [Input("instanceName", required: true)]
        public string InstanceName { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetStreamProcessorsArgs()
        {
        }
        public static new GetStreamProcessorsArgs Empty => new GetStreamProcessorsArgs();
    }

    public sealed class GetStreamProcessorsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Human-readable label that identifies the stream instance.
        /// </summary>
        [Input("instanceName", required: true)]
        public Input<string> InstanceName { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetStreamProcessorsInvokeArgs()
        {
        }
        public static new GetStreamProcessorsInvokeArgs Empty => new GetStreamProcessorsInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamProcessorsResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Human-readable label that identifies the stream instance.
        /// </summary>
        public readonly string InstanceName;
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        /// </summary>
        public readonly string ProjectId;
        public readonly ImmutableArray<Outputs.GetStreamProcessorsResultResult> Results;

        [OutputConstructor]
        private GetStreamProcessorsResult(
            string id,

            string instanceName,

            string projectId,

            ImmutableArray<Outputs.GetStreamProcessorsResultResult> results)
        {
            Id = id;
            InstanceName = instanceName;
            ProjectId = projectId;
            Results = results;
        }
    }
}
