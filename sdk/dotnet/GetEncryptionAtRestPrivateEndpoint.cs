// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetEncryptionAtRestPrivateEndpoint
    {
        /// <summary>
        /// ## # Data Source: mongodbatlas.EncryptionAtRestPrivateEndpoint
        /// 
        /// `mongodbatlas.EncryptionAtRestPrivateEndpoint` describes a private endpoint used for encryption at rest using customer-managed keys.
        /// 
        /// &gt; **IMPORTANT** The Encryption at Rest using Azure Key Vault over Private Endpoints feature is available by request. To request this functionality for your Atlas deployments, contact your Account Manager. 
        /// To learn more about existing limitations, see [Manage Customer Keys with Azure Key Vault Over Private Endpoints](https://www.mongodb.com/docs/atlas/security/azure-kms-over-private-endpoint/#manage-customer-keys-with-azure-key-vault-over-private-endpoints).
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// 
        /// &gt; **NOTE:** Only Azure Key Vault with Azure Private Link is supported at this time.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var single = Mongodbatlas.GetEncryptionAtRestPrivateEndpoint.Invoke(new()
        ///     {
        ///         ProjectId = atlasProjectId,
        ///         CloudProvider = "AZURE",
        ///         Id = endpoint.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["endpointConnectionName"] = single.Apply(getEncryptionAtRestPrivateEndpointResult =&gt; getEncryptionAtRestPrivateEndpointResult.PrivateEndpointConnectionName),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetEncryptionAtRestPrivateEndpointResult> InvokeAsync(GetEncryptionAtRestPrivateEndpointArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetEncryptionAtRestPrivateEndpointResult>("mongodbatlas:index/getEncryptionAtRestPrivateEndpoint:getEncryptionAtRestPrivateEndpoint", args ?? new GetEncryptionAtRestPrivateEndpointArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.EncryptionAtRestPrivateEndpoint
        /// 
        /// `mongodbatlas.EncryptionAtRestPrivateEndpoint` describes a private endpoint used for encryption at rest using customer-managed keys.
        /// 
        /// &gt; **IMPORTANT** The Encryption at Rest using Azure Key Vault over Private Endpoints feature is available by request. To request this functionality for your Atlas deployments, contact your Account Manager. 
        /// To learn more about existing limitations, see [Manage Customer Keys with Azure Key Vault Over Private Endpoints](https://www.mongodb.com/docs/atlas/security/azure-kms-over-private-endpoint/#manage-customer-keys-with-azure-key-vault-over-private-endpoints).
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// 
        /// &gt; **NOTE:** Only Azure Key Vault with Azure Private Link is supported at this time.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var single = Mongodbatlas.GetEncryptionAtRestPrivateEndpoint.Invoke(new()
        ///     {
        ///         ProjectId = atlasProjectId,
        ///         CloudProvider = "AZURE",
        ///         Id = endpoint.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["endpointConnectionName"] = single.Apply(getEncryptionAtRestPrivateEndpointResult =&gt; getEncryptionAtRestPrivateEndpointResult.PrivateEndpointConnectionName),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetEncryptionAtRestPrivateEndpointResult> Invoke(GetEncryptionAtRestPrivateEndpointInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetEncryptionAtRestPrivateEndpointResult>("mongodbatlas:index/getEncryptionAtRestPrivateEndpoint:getEncryptionAtRestPrivateEndpoint", args ?? new GetEncryptionAtRestPrivateEndpointInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.EncryptionAtRestPrivateEndpoint
        /// 
        /// `mongodbatlas.EncryptionAtRestPrivateEndpoint` describes a private endpoint used for encryption at rest using customer-managed keys.
        /// 
        /// &gt; **IMPORTANT** The Encryption at Rest using Azure Key Vault over Private Endpoints feature is available by request. To request this functionality for your Atlas deployments, contact your Account Manager. 
        /// To learn more about existing limitations, see [Manage Customer Keys with Azure Key Vault Over Private Endpoints](https://www.mongodb.com/docs/atlas/security/azure-kms-over-private-endpoint/#manage-customer-keys-with-azure-key-vault-over-private-endpoints).
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// 
        /// &gt; **NOTE:** Only Azure Key Vault with Azure Private Link is supported at this time.
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var single = Mongodbatlas.GetEncryptionAtRestPrivateEndpoint.Invoke(new()
        ///     {
        ///         ProjectId = atlasProjectId,
        ///         CloudProvider = "AZURE",
        ///         Id = endpoint.Id,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["endpointConnectionName"] = single.Apply(getEncryptionAtRestPrivateEndpointResult =&gt; getEncryptionAtRestPrivateEndpointResult.PrivateEndpointConnectionName),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetEncryptionAtRestPrivateEndpointResult> Invoke(GetEncryptionAtRestPrivateEndpointInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetEncryptionAtRestPrivateEndpointResult>("mongodbatlas:index/getEncryptionAtRestPrivateEndpoint:getEncryptionAtRestPrivateEndpoint", args ?? new GetEncryptionAtRestPrivateEndpointInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetEncryptionAtRestPrivateEndpointArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Label that identifies the cloud provider for the Encryption At Rest private endpoint.
        /// </summary>
        [Input("cloudProvider", required: true)]
        public string CloudProvider { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the Private Endpoint Service.
        /// </summary>
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetEncryptionAtRestPrivateEndpointArgs()
        {
        }
        public static new GetEncryptionAtRestPrivateEndpointArgs Empty => new GetEncryptionAtRestPrivateEndpointArgs();
    }

    public sealed class GetEncryptionAtRestPrivateEndpointInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Label that identifies the cloud provider for the Encryption At Rest private endpoint.
        /// </summary>
        [Input("cloudProvider", required: true)]
        public Input<string> CloudProvider { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the Private Endpoint Service.
        /// </summary>
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetEncryptionAtRestPrivateEndpointInvokeArgs()
        {
        }
        public static new GetEncryptionAtRestPrivateEndpointInvokeArgs Empty => new GetEncryptionAtRestPrivateEndpointInvokeArgs();
    }


    [OutputType]
    public sealed class GetEncryptionAtRestPrivateEndpointResult
    {
        /// <summary>
        /// Label that identifies the cloud provider for the Encryption At Rest private endpoint.
        /// </summary>
        public readonly string CloudProvider;
        /// <summary>
        /// Error message for failures associated with the Encryption At Rest private endpoint.
        /// </summary>
        public readonly string ErrorMessage;
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the Private Endpoint Service.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Connection name of the Azure Private Endpoint.
        /// </summary>
        public readonly string PrivateEndpointConnectionName;
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// Cloud provider region in which the Encryption At Rest private endpoint is located.
        /// </summary>
        public readonly string RegionName;
        /// <summary>
        /// State of the Encryption At Rest private endpoint.
        /// </summary>
        public readonly string Status;

        [OutputConstructor]
        private GetEncryptionAtRestPrivateEndpointResult(
            string cloudProvider,

            string errorMessage,

            string id,

            string privateEndpointConnectionName,

            string projectId,

            string regionName,

            string status)
        {
            CloudProvider = cloudProvider;
            ErrorMessage = errorMessage;
            Id = id;
            PrivateEndpointConnectionName = privateEndpointConnectionName;
            ProjectId = projectId;
            RegionName = regionName;
            Status = status;
        }
    }
}
