// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetSearchIndex
    {
        /// <summary>
        /// `mongodbatlas.SearchIndex` describe a single search indexes. This represents a single search index that have been created.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Mongodbatlas.GetSearchIndex.InvokeAsync(new Mongodbatlas.GetSearchIndexArgs
        ///         {
        ///             ClusterName = "&lt;CLUSTER_NAME&gt;",
        ///             IndexId = "&lt;INDEX_ID",
        ///             ProjectId = "&lt;PROJECT_ID&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetSearchIndexResult> InvokeAsync(GetSearchIndexArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetSearchIndexResult>("mongodbatlas:index/getSearchIndex:getSearchIndex", args ?? new GetSearchIndexArgs(), options.WithDefaults());

        /// <summary>
        /// `mongodbatlas.SearchIndex` describe a single search indexes. This represents a single search index that have been created.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var test = Output.Create(Mongodbatlas.GetSearchIndex.InvokeAsync(new Mongodbatlas.GetSearchIndexArgs
        ///         {
        ///             ClusterName = "&lt;CLUSTER_NAME&gt;",
        ///             IndexId = "&lt;INDEX_ID",
        ///             ProjectId = "&lt;PROJECT_ID&gt;",
        ///         }));
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetSearchIndexResult> Invoke(GetSearchIndexInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetSearchIndexResult>("mongodbatlas:index/getSearchIndex:getSearchIndex", args ?? new GetSearchIndexInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetSearchIndexArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index.
        /// </summary>
        [Input("analyzer")]
        public string? Analyzer { get; set; }

        /// <summary>
        /// [Custom analyzers](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-custom-analyzers) to use in this index (this is an array of objects).
        /// </summary>
        [Input("analyzers")]
        public string? Analyzers { get; set; }

        /// <summary>
        /// The name of the cluster containing the collection with one or more Atlas Search indexes.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        /// <summary>
        /// Name of the collection the index is on.
        /// </summary>
        [Input("collectionName")]
        public string? CollectionName { get; set; }

        /// <summary>
        /// Name of the database the collection is in.
        /// </summary>
        [Input("database")]
        public string? Database { get; set; }

        /// <summary>
        /// The unique identifier of the Atlas Search index. Use the `mongodbatlas.getSearchIndexes`datasource to find the IDs of all Atlas Search indexes.
        /// </summary>
        [Input("indexId", required: true)]
        public string IndexId { get; set; } = null!;

        /// <summary>
        /// Flag indicating whether the index uses dynamic or static mappings.
        /// </summary>
        [Input("mappingsDynamic")]
        public bool? MappingsDynamic { get; set; }

        /// <summary>
        /// Object containing one or more field specifications.
        /// </summary>
        [Input("mappingsFields")]
        public string? MappingsFields { get; set; }

        /// <summary>
        /// Name of the index.
        /// </summary>
        [Input("name")]
        public string? Name { get; set; }

        /// <summary>
        /// The unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when searching the index.
        /// </summary>
        [Input("searchAnalyzer")]
        public string? SearchAnalyzer { get; set; }

        [Input("status")]
        public string? Status { get; set; }

        public GetSearchIndexArgs()
        {
        }
    }

    public sealed class GetSearchIndexInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index.
        /// </summary>
        [Input("analyzer")]
        public Input<string>? Analyzer { get; set; }

        /// <summary>
        /// [Custom analyzers](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-custom-analyzers) to use in this index (this is an array of objects).
        /// </summary>
        [Input("analyzers")]
        public Input<string>? Analyzers { get; set; }

        /// <summary>
        /// The name of the cluster containing the collection with one or more Atlas Search indexes.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// Name of the collection the index is on.
        /// </summary>
        [Input("collectionName")]
        public Input<string>? CollectionName { get; set; }

        /// <summary>
        /// Name of the database the collection is in.
        /// </summary>
        [Input("database")]
        public Input<string>? Database { get; set; }

        /// <summary>
        /// The unique identifier of the Atlas Search index. Use the `mongodbatlas.getSearchIndexes`datasource to find the IDs of all Atlas Search indexes.
        /// </summary>
        [Input("indexId", required: true)]
        public Input<string> IndexId { get; set; } = null!;

        /// <summary>
        /// Flag indicating whether the index uses dynamic or static mappings.
        /// </summary>
        [Input("mappingsDynamic")]
        public Input<bool>? MappingsDynamic { get; set; }

        /// <summary>
        /// Object containing one or more field specifications.
        /// </summary>
        [Input("mappingsFields")]
        public Input<string>? MappingsFields { get; set; }

        /// <summary>
        /// Name of the index.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when searching the index.
        /// </summary>
        [Input("searchAnalyzer")]
        public Input<string>? SearchAnalyzer { get; set; }

        [Input("status")]
        public Input<string>? Status { get; set; }

        public GetSearchIndexInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetSearchIndexResult
    {
        /// <summary>
        /// [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index.
        /// </summary>
        public readonly string? Analyzer;
        /// <summary>
        /// [Custom analyzers](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-custom-analyzers) to use in this index (this is an array of objects).
        /// </summary>
        public readonly string? Analyzers;
        public readonly string ClusterName;
        /// <summary>
        /// Name of the collection the index is on.
        /// </summary>
        public readonly string? CollectionName;
        /// <summary>
        /// Name of the database the collection is in.
        /// </summary>
        public readonly string? Database;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string IndexId;
        /// <summary>
        /// Flag indicating whether the index uses dynamic or static mappings.
        /// </summary>
        public readonly bool? MappingsDynamic;
        /// <summary>
        /// Object containing one or more field specifications.
        /// </summary>
        public readonly string? MappingsFields;
        /// <summary>
        /// Name of the index.
        /// </summary>
        public readonly string? Name;
        public readonly string ProjectId;
        /// <summary>
        /// [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when searching the index.
        /// </summary>
        public readonly string? SearchAnalyzer;
        public readonly string Status;
        /// <summary>
        /// Synonyms mapping definition to use in this index.
        /// * `synonyms.#.name` - Name of the [synonym mapping definition](https://docs.atlas.mongodb.com/reference/atlas-search/synonyms/#std-label-synonyms-ref).
        /// * `synonyms.#.source_collection` - Name of the source MongoDB collection for the synonyms.
        /// * `synonyms.#.analyzer` - Name of the [analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use with this synonym mapping.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetSearchIndexSynonymResult> Synonyms;

        [OutputConstructor]
        private GetSearchIndexResult(
            string? analyzer,

            string? analyzers,

            string clusterName,

            string? collectionName,

            string? database,

            string id,

            string indexId,

            bool? mappingsDynamic,

            string? mappingsFields,

            string? name,

            string projectId,

            string? searchAnalyzer,

            string status,

            ImmutableArray<Outputs.GetSearchIndexSynonymResult> synonyms)
        {
            Analyzer = analyzer;
            Analyzers = analyzers;
            ClusterName = clusterName;
            CollectionName = collectionName;
            Database = database;
            Id = id;
            IndexId = indexId;
            MappingsDynamic = mappingsDynamic;
            MappingsFields = mappingsFields;
            Name = name;
            ProjectId = projectId;
            SearchAnalyzer = searchAnalyzer;
            Status = status;
            Synonyms = synonyms;
        }
    }
}
