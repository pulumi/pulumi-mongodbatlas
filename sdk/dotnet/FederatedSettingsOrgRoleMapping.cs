// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// `mongodbatlas.FederatedSettingsOrgRoleMapping` provides an Role Mapping resource. This allows organization role mapping to be created.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var orgGroupRoleMappingImport = new Mongodbatlas.FederatedSettingsOrgRoleMapping("orgGroupRoleMappingImport", new()
    ///     {
    ///         ExternalGroupName = "myGrouptest",
    ///         FederationSettingsId = "627a9687f7f7f7f774de306f14",
    ///         OrgId = "627a9683e7f7f7ff7fe306f14",
    ///         RoleAssignments = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs
    ///             {
    ///                 OrgId = "627a9683e7f7f7ff7fe306f14",
    ///                 Roles = new[]
    ///                 {
    ///                     "ORG_MEMBER",
    ///                     "ORG_GROUP_CREATOR",
    ///                     "ORG_BILLING_ADMIN",
    ///                 },
    ///             },
    ///             new Mongodbatlas.Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs
    ///             {
    ///                 GroupId = "628aa20d7f7f7f7f7098b81b8",
    ///                 Roles = new[]
    ///                 {
    ///                     "GROUP_OWNER",
    ///                     "GROUP_DATA_ACCESS_ADMIN",
    ///                     "GROUP_SEARCH_INDEX_EDITOR",
    ///                     "GROUP_DATA_ACCESS_READ_ONLY",
    ///                 },
    ///             },
    ///             new Mongodbatlas.Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs
    ///             {
    ///                 GroupId = "628aa20d7f7f7f7f7078b81b8",
    ///                 Roles = new[]
    ///                 {
    ///                     "GROUP_OWNER",
    ///                     "GROUP_DATA_ACCESS_ADMIN",
    ///                     "GROUP_SEARCH_INDEX_EDITOR",
    ///                     "GROUP_DATA_ACCESS_READ_ONLY",
    ///                     "GROUP_DATA_ACCESS_READ_WRITE",
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// FederatedSettingsOrgRoleMapping can be imported using federation_settings_id-org_id-role_mapping_id, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import mongodbatlas:index/federatedSettingsOrgRoleMapping:FederatedSettingsOrgRoleMapping org_group_role_mapping_import 6287a663c7f7f7f71c441c6c-627a96837f7f7f7e306f14-628ae97f7f7468ea3727
    /// ```
    ///  For more information see[MongoDB Atlas API Reference.](https://www.mongodb.com/docs/atlas/reference/api/federation-configuration/)
    /// </summary>
    [MongodbatlasResourceType("mongodbatlas:index/federatedSettingsOrgRoleMapping:FederatedSettingsOrgRoleMapping")]
    public partial class FederatedSettingsOrgRoleMapping : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Unique human-readable label that identifies the identity provider group to which this role mapping applies.
        /// </summary>
        [Output("externalGroupName")]
        public Output<string> ExternalGroupName { get; private set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
        /// </summary>
        [Output("federationSettingsId")]
        public Output<string> FederationSettingsId { get; private set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
        /// </summary>
        [Output("orgId")]
        public Output<string> OrgId { get; private set; } = null!;

        /// <summary>
        /// Atlas roles and the unique identifiers of the groups and organizations associated with each role.
        /// </summary>
        [Output("roleAssignments")]
        public Output<ImmutableArray<Outputs.FederatedSettingsOrgRoleMappingRoleAssignment>> RoleAssignments { get; private set; } = null!;


        /// <summary>
        /// Create a FederatedSettingsOrgRoleMapping resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FederatedSettingsOrgRoleMapping(string name, FederatedSettingsOrgRoleMappingArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/federatedSettingsOrgRoleMapping:FederatedSettingsOrgRoleMapping", name, args ?? new FederatedSettingsOrgRoleMappingArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FederatedSettingsOrgRoleMapping(string name, Input<string> id, FederatedSettingsOrgRoleMappingState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/federatedSettingsOrgRoleMapping:FederatedSettingsOrgRoleMapping", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FederatedSettingsOrgRoleMapping resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FederatedSettingsOrgRoleMapping Get(string name, Input<string> id, FederatedSettingsOrgRoleMappingState? state = null, CustomResourceOptions? options = null)
        {
            return new FederatedSettingsOrgRoleMapping(name, id, state, options);
        }
    }

    public sealed class FederatedSettingsOrgRoleMappingArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique human-readable label that identifies the identity provider group to which this role mapping applies.
        /// </summary>
        [Input("externalGroupName", required: true)]
        public Input<string> ExternalGroupName { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
        /// </summary>
        [Input("federationSettingsId", required: true)]
        public Input<string> FederationSettingsId { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        [Input("roleAssignments", required: true)]
        private InputList<Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs>? _roleAssignments;

        /// <summary>
        /// Atlas roles and the unique identifiers of the groups and organizations associated with each role.
        /// </summary>
        public InputList<Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs> RoleAssignments
        {
            get => _roleAssignments ?? (_roleAssignments = new InputList<Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs>());
            set => _roleAssignments = value;
        }

        public FederatedSettingsOrgRoleMappingArgs()
        {
        }
        public static new FederatedSettingsOrgRoleMappingArgs Empty => new FederatedSettingsOrgRoleMappingArgs();
    }

    public sealed class FederatedSettingsOrgRoleMappingState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique human-readable label that identifies the identity provider group to which this role mapping applies.
        /// </summary>
        [Input("externalGroupName")]
        public Input<string>? ExternalGroupName { get; set; }

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
        /// </summary>
        [Input("federationSettingsId")]
        public Input<string>? FederationSettingsId { get; set; }

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
        /// </summary>
        [Input("orgId")]
        public Input<string>? OrgId { get; set; }

        [Input("roleAssignments")]
        private InputList<Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentGetArgs>? _roleAssignments;

        /// <summary>
        /// Atlas roles and the unique identifiers of the groups and organizations associated with each role.
        /// </summary>
        public InputList<Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentGetArgs> RoleAssignments
        {
            get => _roleAssignments ?? (_roleAssignments = new InputList<Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentGetArgs>());
            set => _roleAssignments = value;
        }

        public FederatedSettingsOrgRoleMappingState()
        {
        }
        public static new FederatedSettingsOrgRoleMappingState Empty => new FederatedSettingsOrgRoleMappingState();
    }
}
