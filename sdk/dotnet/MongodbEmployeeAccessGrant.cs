// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// ## # Resource: mongodbatlas.MongodbEmployeeAccessGrant
    /// 
    /// `mongodbatlas.MongodbEmployeeAccessGrant` provides a MongoDB Employee Access Grant resource. The resource lets you create, delete, update and import a MongoDB employee access grant.
    /// 
    /// ## Example Usage
    /// 
    /// ### S
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example = new Mongodbatlas.MongodbEmployeeAccessGrant("example", new()
    ///     {
    ///         ProjectId = projectId,
    ///         ClusterName = clusterName,
    ///         GrantType = "CLUSTER_INFRASTRUCTURE_AND_APP_SERVICES_SYNC_DATA",
    ///         ExpirationTime = "2025-01-01T12:00:00Z",
    ///     });
    /// 
    ///     var dsExample = Mongodbatlas.GetMongodbEmployeeAccessGrant.Invoke(new()
    ///     {
    ///         ProjectId = projectId,
    ///         ClusterName = clusterName,
    ///     });
    /// 
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["grantType"] = dsExample.Apply(getMongodbEmployeeAccessGrantResult =&gt; getMongodbEmployeeAccessGrantResult.GrantType),
    ///         ["expirationTime"] = dsExample.Apply(getMongodbEmployeeAccessGrantResult =&gt; getMongodbEmployeeAccessGrantResult.ExpirationTime),
    ///     };
    /// });
    /// ```
    /// </summary>
    [MongodbatlasResourceType("mongodbatlas:index/mongodbEmployeeAccessGrant:MongodbEmployeeAccessGrant")]
    public partial class MongodbEmployeeAccessGrant : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Human-readable label that identifies this cluster.
        /// </summary>
        [Output("clusterName")]
        public Output<string> ClusterName { get; private set; } = null!;

        /// <summary>
        /// Expiration date for the employee access grant.
        /// </summary>
        [Output("expirationTime")]
        public Output<string> ExpirationTime { get; private set; } = null!;

        /// <summary>
        /// Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
        /// </summary>
        [Output("grantType")]
        public Output<string> GrantType { get; private set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a MongodbEmployeeAccessGrant resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public MongodbEmployeeAccessGrant(string name, MongodbEmployeeAccessGrantArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/mongodbEmployeeAccessGrant:MongodbEmployeeAccessGrant", name, args ?? new MongodbEmployeeAccessGrantArgs(), MakeResourceOptions(options, ""))
        {
        }

        private MongodbEmployeeAccessGrant(string name, Input<string> id, MongodbEmployeeAccessGrantState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/mongodbEmployeeAccessGrant:MongodbEmployeeAccessGrant", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing MongodbEmployeeAccessGrant resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static MongodbEmployeeAccessGrant Get(string name, Input<string> id, MongodbEmployeeAccessGrantState? state = null, CustomResourceOptions? options = null)
        {
            return new MongodbEmployeeAccessGrant(name, id, state, options);
        }
    }

    public sealed class MongodbEmployeeAccessGrantArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Human-readable label that identifies this cluster.
        /// </summary>
        [Input("clusterName", required: true)]
        public Input<string> ClusterName { get; set; } = null!;

        /// <summary>
        /// Expiration date for the employee access grant.
        /// </summary>
        [Input("expirationTime", required: true)]
        public Input<string> ExpirationTime { get; set; } = null!;

        /// <summary>
        /// Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
        /// </summary>
        [Input("grantType", required: true)]
        public Input<string> GrantType { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public MongodbEmployeeAccessGrantArgs()
        {
        }
        public static new MongodbEmployeeAccessGrantArgs Empty => new MongodbEmployeeAccessGrantArgs();
    }

    public sealed class MongodbEmployeeAccessGrantState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Human-readable label that identifies this cluster.
        /// </summary>
        [Input("clusterName")]
        public Input<string>? ClusterName { get; set; }

        /// <summary>
        /// Expiration date for the employee access grant.
        /// </summary>
        [Input("expirationTime")]
        public Input<string>? ExpirationTime { get; set; }

        /// <summary>
        /// Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
        /// </summary>
        [Input("grantType")]
        public Input<string>? GrantType { get; set; }

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public MongodbEmployeeAccessGrantState()
        {
        }
        public static new MongodbEmployeeAccessGrantState Empty => new MongodbEmployeeAccessGrantState();
    }
}
