// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// `mongodbatlas.FederatedSettingsIdentityProvider` provides an Atlas federated settings identity provider resource provides a subset of settings to be maintained post import of the existing resource.
    /// 
    /// &gt; **NOTE:** OIDC Workforce IdP is currently in preview. To learn more about OIDC and existing limitations see the [OIDC Authentication Documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
    /// ## Example Usage
    /// 
    /// &gt; **IMPORTANT** You **MUST** import this resource before you can manage it with this provider.
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var identityProvider = new Mongodbatlas.FederatedSettingsIdentityProvider("identity_provider", new()
    ///     {
    ///         FederationSettingsId = "627a9687f7f7f7f774de306f14",
    ///         Name = "mongodb_federation_test",
    ///         AssociatedDomains = new[]
    ///         {
    ///             "yourdomain.com",
    ///         },
    ///         SsoDebugEnabled = true,
    ///         Status = "ACTIVE",
    ///         SsoUrl = "https://mysso.oktapreview.com/app/mysso_terraformtestsso/exk17q7f7f7f7f50h8/sso/saml",
    ///         IssuerUri = "http://www.okta.com/exk17q7f7f7f7fp50h8",
    ///         RequestBinding = "HTTP-POST",
    ///         ResponseSignatureAlgorithm = "SHA-256",
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// Identity Provider __must__ be imported before using federation_settings_id-idp_id, e.g.
    /// 
    /// ```sh
    /// $ pulumi import mongodbatlas:index/federatedSettingsIdentityProvider:FederatedSettingsIdentityProvider identity_provider 6287a663c660f52b1c441c6c-0oad4fas87jL5Xnk1297
    /// ```
    /// __WARNING:__ Starting from terraform provider version 1.16.0, to import the resource a 24-hexadecimal digit string that identifies the IdP (`idp_id`) will have to be used instead of `okta_idp_id`. See more [here](../guides/1.15.0-upgrade-guide.html.markdown)
    /// 
    /// For more information see: [MongoDB Atlas API Reference.](https://www.mongodb.com/docs/atlas/reference/api/federation-configuration/)
    /// </summary>
    [MongodbatlasResourceType("mongodbatlas:index/federatedSettingsIdentityProvider:FederatedSettingsIdentityProvider")]
    public partial class FederatedSettingsIdentityProvider : global::Pulumi.CustomResource
    {
        /// <summary>
        /// List that contains the domains associated with the identity provider.
        /// </summary>
        [Output("associatedDomains")]
        public Output<ImmutableArray<string>> AssociatedDomains { get; private set; } = null!;

        /// <summary>
        /// Identifier of the intended recipient of the token used in OIDC IdP.
        /// </summary>
        [Output("audienceClaims")]
        public Output<ImmutableArray<string>> AudienceClaims { get; private set; } = null!;

        /// <summary>
        /// Client identifier that is assigned to an application by the OIDC Identity Provider.
        /// </summary>
        [Output("clientId")]
        public Output<string?> ClientId { get; private set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
        /// </summary>
        [Output("federationSettingsId")]
        public Output<string> FederationSettingsId { get; private set; } = null!;

        /// <summary>
        /// Identifier of the claim which contains OIDC IdP Group IDs in the token.
        /// </summary>
        [Output("groupsClaim")]
        public Output<string?> GroupsClaim { get; private set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the IdP.
        /// </summary>
        [Output("idpId")]
        public Output<string> IdpId { get; private set; } = null!;

        /// <summary>
        /// Unique string that identifies the issuer of the IdP.
        /// </summary>
        [Output("issuerUri")]
        public Output<string> IssuerUri { get; private set; } = null!;

        /// <summary>
        /// Human-readable label that identifies the identity provider.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        /// <summary>
        /// Unique 20-hexadecimal digit string that identifies the IdP.
        /// </summary>
        [Output("oktaIdpId")]
        public Output<string> OktaIdpId { get; private set; } = null!;

        /// <summary>
        /// The protocol of the identity provider. Either `SAML` or `OIDC`.
        /// </summary>
        [Output("protocol")]
        public Output<string> Protocol { get; private set; } = null!;

        /// <summary>
        /// SAML Authentication Request Protocol HTTP method binding (`POST` or `REDIRECT`) that Federated Authentication uses to send the authentication request. Atlas supports the following binding values:
        /// - HTTP POST
        /// - HTTP REDIRECT
        /// </summary>
        [Output("requestBinding")]
        public Output<string?> RequestBinding { get; private set; } = null!;

        /// <summary>
        /// Scopes that MongoDB applications will request from the authorization endpoint used for OIDC IdPs.
        /// </summary>
        [Output("requestedScopes")]
        public Output<ImmutableArray<string>> RequestedScopes { get; private set; } = null!;

        /// <summary>
        /// Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.  Valid values include `SHA-1 `and `SHA-256`.
        /// </summary>
        [Output("responseSignatureAlgorithm")]
        public Output<string?> ResponseSignatureAlgorithm { get; private set; } = null!;

        /// <summary>
        /// Flag that indicates whether the identity provider has SSO debug enabled.
        /// </summary>
        [Output("ssoDebugEnabled")]
        public Output<bool?> SsoDebugEnabled { get; private set; } = null!;

        /// <summary>
        /// Unique string that identifies the intended audience of the SAML assertion.
        /// </summary>
        [Output("ssoUrl")]
        public Output<string?> SsoUrl { get; private set; } = null!;

        /// <summary>
        /// String enum that indicates whether the identity provider is active or not. Accepted values are ACTIVE or INACTIVE.
        /// </summary>
        [Output("status")]
        public Output<string?> Status { get; private set; } = null!;

        /// <summary>
        /// Identifier of the claim which contains the user ID in the token used for OIDC IdPs.
        /// </summary>
        [Output("userClaim")]
        public Output<string?> UserClaim { get; private set; } = null!;


        /// <summary>
        /// Create a FederatedSettingsIdentityProvider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public FederatedSettingsIdentityProvider(string name, FederatedSettingsIdentityProviderArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/federatedSettingsIdentityProvider:FederatedSettingsIdentityProvider", name, args ?? new FederatedSettingsIdentityProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private FederatedSettingsIdentityProvider(string name, Input<string> id, FederatedSettingsIdentityProviderState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/federatedSettingsIdentityProvider:FederatedSettingsIdentityProvider", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing FederatedSettingsIdentityProvider resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static FederatedSettingsIdentityProvider Get(string name, Input<string> id, FederatedSettingsIdentityProviderState? state = null, CustomResourceOptions? options = null)
        {
            return new FederatedSettingsIdentityProvider(name, id, state, options);
        }
    }

    public sealed class FederatedSettingsIdentityProviderArgs : global::Pulumi.ResourceArgs
    {
        [Input("associatedDomains")]
        private InputList<string>? _associatedDomains;

        /// <summary>
        /// List that contains the domains associated with the identity provider.
        /// </summary>
        public InputList<string> AssociatedDomains
        {
            get => _associatedDomains ?? (_associatedDomains = new InputList<string>());
            set => _associatedDomains = value;
        }

        [Input("audienceClaims")]
        private InputList<string>? _audienceClaims;

        /// <summary>
        /// Identifier of the intended recipient of the token used in OIDC IdP.
        /// </summary>
        public InputList<string> AudienceClaims
        {
            get => _audienceClaims ?? (_audienceClaims = new InputList<string>());
            set => _audienceClaims = value;
        }

        /// <summary>
        /// Client identifier that is assigned to an application by the OIDC Identity Provider.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
        /// </summary>
        [Input("federationSettingsId", required: true)]
        public Input<string> FederationSettingsId { get; set; } = null!;

        /// <summary>
        /// Identifier of the claim which contains OIDC IdP Group IDs in the token.
        /// </summary>
        [Input("groupsClaim")]
        public Input<string>? GroupsClaim { get; set; }

        /// <summary>
        /// Unique string that identifies the issuer of the IdP.
        /// </summary>
        [Input("issuerUri", required: true)]
        public Input<string> IssuerUri { get; set; } = null!;

        /// <summary>
        /// Human-readable label that identifies the identity provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// The protocol of the identity provider. Either `SAML` or `OIDC`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// SAML Authentication Request Protocol HTTP method binding (`POST` or `REDIRECT`) that Federated Authentication uses to send the authentication request. Atlas supports the following binding values:
        /// - HTTP POST
        /// - HTTP REDIRECT
        /// </summary>
        [Input("requestBinding")]
        public Input<string>? RequestBinding { get; set; }

        [Input("requestedScopes")]
        private InputList<string>? _requestedScopes;

        /// <summary>
        /// Scopes that MongoDB applications will request from the authorization endpoint used for OIDC IdPs.
        /// </summary>
        public InputList<string> RequestedScopes
        {
            get => _requestedScopes ?? (_requestedScopes = new InputList<string>());
            set => _requestedScopes = value;
        }

        /// <summary>
        /// Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.  Valid values include `SHA-1 `and `SHA-256`.
        /// </summary>
        [Input("responseSignatureAlgorithm")]
        public Input<string>? ResponseSignatureAlgorithm { get; set; }

        /// <summary>
        /// Flag that indicates whether the identity provider has SSO debug enabled.
        /// </summary>
        [Input("ssoDebugEnabled")]
        public Input<bool>? SsoDebugEnabled { get; set; }

        /// <summary>
        /// Unique string that identifies the intended audience of the SAML assertion.
        /// </summary>
        [Input("ssoUrl")]
        public Input<string>? SsoUrl { get; set; }

        /// <summary>
        /// String enum that indicates whether the identity provider is active or not. Accepted values are ACTIVE or INACTIVE.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Identifier of the claim which contains the user ID in the token used for OIDC IdPs.
        /// </summary>
        [Input("userClaim")]
        public Input<string>? UserClaim { get; set; }

        public FederatedSettingsIdentityProviderArgs()
        {
        }
        public static new FederatedSettingsIdentityProviderArgs Empty => new FederatedSettingsIdentityProviderArgs();
    }

    public sealed class FederatedSettingsIdentityProviderState : global::Pulumi.ResourceArgs
    {
        [Input("associatedDomains")]
        private InputList<string>? _associatedDomains;

        /// <summary>
        /// List that contains the domains associated with the identity provider.
        /// </summary>
        public InputList<string> AssociatedDomains
        {
            get => _associatedDomains ?? (_associatedDomains = new InputList<string>());
            set => _associatedDomains = value;
        }

        [Input("audienceClaims")]
        private InputList<string>? _audienceClaims;

        /// <summary>
        /// Identifier of the intended recipient of the token used in OIDC IdP.
        /// </summary>
        public InputList<string> AudienceClaims
        {
            get => _audienceClaims ?? (_audienceClaims = new InputList<string>());
            set => _audienceClaims = value;
        }

        /// <summary>
        /// Client identifier that is assigned to an application by the OIDC Identity Provider.
        /// </summary>
        [Input("clientId")]
        public Input<string>? ClientId { get; set; }

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
        /// </summary>
        [Input("federationSettingsId")]
        public Input<string>? FederationSettingsId { get; set; }

        /// <summary>
        /// Identifier of the claim which contains OIDC IdP Group IDs in the token.
        /// </summary>
        [Input("groupsClaim")]
        public Input<string>? GroupsClaim { get; set; }

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the IdP.
        /// </summary>
        [Input("idpId")]
        public Input<string>? IdpId { get; set; }

        /// <summary>
        /// Unique string that identifies the issuer of the IdP.
        /// </summary>
        [Input("issuerUri")]
        public Input<string>? IssuerUri { get; set; }

        /// <summary>
        /// Human-readable label that identifies the identity provider.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        /// <summary>
        /// Unique 20-hexadecimal digit string that identifies the IdP.
        /// </summary>
        [Input("oktaIdpId")]
        public Input<string>? OktaIdpId { get; set; }

        /// <summary>
        /// The protocol of the identity provider. Either `SAML` or `OIDC`.
        /// </summary>
        [Input("protocol")]
        public Input<string>? Protocol { get; set; }

        /// <summary>
        /// SAML Authentication Request Protocol HTTP method binding (`POST` or `REDIRECT`) that Federated Authentication uses to send the authentication request. Atlas supports the following binding values:
        /// - HTTP POST
        /// - HTTP REDIRECT
        /// </summary>
        [Input("requestBinding")]
        public Input<string>? RequestBinding { get; set; }

        [Input("requestedScopes")]
        private InputList<string>? _requestedScopes;

        /// <summary>
        /// Scopes that MongoDB applications will request from the authorization endpoint used for OIDC IdPs.
        /// </summary>
        public InputList<string> RequestedScopes
        {
            get => _requestedScopes ?? (_requestedScopes = new InputList<string>());
            set => _requestedScopes = value;
        }

        /// <summary>
        /// Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.  Valid values include `SHA-1 `and `SHA-256`.
        /// </summary>
        [Input("responseSignatureAlgorithm")]
        public Input<string>? ResponseSignatureAlgorithm { get; set; }

        /// <summary>
        /// Flag that indicates whether the identity provider has SSO debug enabled.
        /// </summary>
        [Input("ssoDebugEnabled")]
        public Input<bool>? SsoDebugEnabled { get; set; }

        /// <summary>
        /// Unique string that identifies the intended audience of the SAML assertion.
        /// </summary>
        [Input("ssoUrl")]
        public Input<string>? SsoUrl { get; set; }

        /// <summary>
        /// String enum that indicates whether the identity provider is active or not. Accepted values are ACTIVE or INACTIVE.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        /// <summary>
        /// Identifier of the claim which contains the user ID in the token used for OIDC IdPs.
        /// </summary>
        [Input("userClaim")]
        public Input<string>? UserClaim { get; set; }

        public FederatedSettingsIdentityProviderState()
        {
        }
        public static new FederatedSettingsIdentityProviderState Empty => new FederatedSettingsIdentityProviderState();
    }
}
