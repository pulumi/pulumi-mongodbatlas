// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// `mongodbatlas.AdvancedCluster` provides an Advanced Cluster resource. The resource lets you create, edit and delete advanced clusters. The resource requires your Project ID.
    /// 
    /// More information on considerations for using advanced clusters please see [Considerations](https://docs.atlas.mongodb.com/reference/api/cluster-advanced/create-one-cluster-advanced/#considerations)
    /// 
    /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
    /// 
    /// &gt; **NOTE:** A network container is created for a advanced cluster to reside in if one does not yet exist in the project.  To  use this automatically created container with another resource, such as peering, the `container_id` is exported after creation.
    /// 
    /// ## Example Usage
    /// ### Example single provider and single region
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Mongodbatlas.AdvancedCluster("test", new Mongodbatlas.AdvancedClusterArgs
    ///         {
    ///             ClusterType = "REPLICASET",
    ///             ProjectId = "PROJECT ID",
    ///             ReplicationSpecs = 
    ///             {
    ///                 new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///                 {
    ///                     RegionConfigs = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                         {
    ///                             AnalyticsSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigAnalyticsSpecsArgs
    ///                             {
    ///                                 InstanceSize = "M10",
    ///                                 NodeCount = 1,
    ///                             },
    ///                             ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                             {
    ///                                 InstanceSize = "M10",
    ///                                 NodeCount = 3,
    ///                             },
    ///                             Priority = 1,
    ///                             ProviderName = "AWS",
    ///                             RegionName = "US_EAST_1",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Example Tenant Cluster
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Mongodbatlas.AdvancedCluster("test", new Mongodbatlas.AdvancedClusterArgs
    ///         {
    ///             ClusterType = "REPLICASET",
    ///             ProjectId = "PROJECT ID",
    ///             ReplicationSpecs = 
    ///             {
    ///                 new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///                 {
    ///                     RegionConfigs = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                         {
    ///                             BackingProviderName = "AWS",
    ///                             ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                             {
    ///                                 InstanceSize = "M5",
    ///                             },
    ///                             Priority = 1,
    ///                             ProviderName = "TENANT",
    ///                             RegionName = "US_EAST_1",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### Example Multicloud.
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var test = new Mongodbatlas.AdvancedCluster("test", new Mongodbatlas.AdvancedClusterArgs
    ///         {
    ///             ClusterType = "REPLICASET",
    ///             ProjectId = "PROJECT ID",
    ///             ReplicationSpecs = 
    ///             {
    ///                 new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///                 {
    ///                     RegionConfigs = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                         {
    ///                             AnalyticsSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigAnalyticsSpecsArgs
    ///                             {
    ///                                 InstanceSize = "M10",
    ///                                 NodeCount = 1,
    ///                             },
    ///                             ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                             {
    ///                                 InstanceSize = "M10",
    ///                                 NodeCount = 3,
    ///                             },
    ///                             Priority = 1,
    ///                             ProviderName = "AWS",
    ///                             RegionName = "US_EAST_1",
    ///                         },
    ///                         new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                         {
    ///                             ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                             {
    ///                                 InstanceSize = "M10",
    ///                                 NodeCount = 2,
    ///                             },
    ///                             Priority = 6,
    ///                             ProviderName = "GCP",
    ///                             RegionName = "NORTH_AMERICA_NORTHEAST_1",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// 
    /// ## Import
    /// 
    /// Clusters can be imported using project ID and cluster name, in the format `PROJECTID-CLUSTERNAME`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import mongodbatlas:index/advancedCluster:AdvancedCluster my_cluster 1112222b3bf99403840e8934-Cluster0
    /// ```
    /// 
    ///  See detailed information for arguments and attributes[MongoDB API Advanced Clusters](https://docs.atlas.mongodb.com/reference/api/cluster-advanced/create-one-cluster-advanced/)
    /// </summary>
    [MongodbatlasResourceType("mongodbatlas:index/advancedCluster:AdvancedCluster")]
    public partial class AdvancedCluster : Pulumi.CustomResource
    {
        [Output("advancedConfiguration")]
        public Output<Outputs.AdvancedClusterAdvancedConfiguration> AdvancedConfiguration { get; private set; } = null!;

        /// <summary>
        /// Flag that indicates whether the cluster can perform backups.
        /// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
        /// </summary>
        [Output("backupEnabled")]
        public Output<bool> BackupEnabled { get; private set; } = null!;

        /// <summary>
        /// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
        /// </summary>
        [Output("biConnector")]
        public Output<Outputs.AdvancedClusterBiConnector> BiConnector { get; private set; } = null!;

        /// <summary>
        /// The cluster ID.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Type of the cluster that you want to create.
        /// Accepted values include:
        /// </summary>
        [Output("clusterType")]
        public Output<string> ClusterType { get; private set; } = null!;

        /// <summary>
        /// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
        /// </summary>
        [Output("connectionStrings")]
        public Output<ImmutableArray<Outputs.AdvancedClusterConnectionString>> ConnectionStrings { get; private set; } = null!;

        [Output("createDate")]
        public Output<string> CreateDate { get; private set; } = null!;

        /// <summary>
        /// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
        /// </summary>
        [Output("diskSizeGb")]
        public Output<double> DiskSizeGb { get; private set; } = null!;

        /// <summary>
        /// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backup_enabled` is false or omitted.
        /// </summary>
        [Output("encryptionAtRestProvider")]
        public Output<string> EncryptionAtRestProvider { get; private set; } = null!;

        /// <summary>
        /// Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<Outputs.AdvancedClusterLabel>> Labels { get; private set; } = null!;

        /// <summary>
        /// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.0`, `4.2`, `4.4`, or `5.0`. If omitted, Atlas deploys a cluster that runs MongoDB 4.4. If `replication_specs#.region_configs#.&lt;type&gt;Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `version_release_system` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `version_release_system`: `LTS`.
        /// </summary>
        [Output("mongoDbMajorVersion")]
        public Output<string> MongoDbMajorVersion { get; private set; } = null!;

        /// <summary>
        /// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
        /// </summary>
        [Output("mongoDbVersion")]
        public Output<string> MongoDbVersion { get; private set; } = null!;

        /// <summary>
        /// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("paused")]
        public Output<bool?> Paused { get; private set; } = null!;

        /// <summary>
        /// - Flag that indicates if the cluster uses Continuous Cloud Backup.
        /// </summary>
        [Output("pitEnabled")]
        public Output<bool> PitEnabled { get; private set; } = null!;

        /// <summary>
        /// Unique ID for the project to create the database user.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Configuration for cluster regions and the hardware provisioned in them. See below
        /// </summary>
        [Output("replicationSpecs")]
        public Output<ImmutableArray<Outputs.AdvancedClusterReplicationSpec>> ReplicationSpecs { get; private set; } = null!;

        /// <summary>
        /// - Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
        /// </summary>
        [Output("rootCertType")]
        public Output<string> RootCertType { get; private set; } = null!;

        /// <summary>
        /// Current state of the cluster. The possible states are:
        /// - IDLE
        /// - CREATING
        /// - UPDATING
        /// - DELETING
        /// - DELETED
        /// - REPAIRING
        /// </summary>
        [Output("stateName")]
        public Output<string> StateName { get; private set; } = null!;

        /// <summary>
        /// - Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
        /// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
        /// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
        /// </summary>
        [Output("versionReleaseSystem")]
        public Output<string?> VersionReleaseSystem { get; private set; } = null!;


        /// <summary>
        /// Create a AdvancedCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AdvancedCluster(string name, AdvancedClusterArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/advancedCluster:AdvancedCluster", name, args ?? new AdvancedClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AdvancedCluster(string name, Input<string> id, AdvancedClusterState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/advancedCluster:AdvancedCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AdvancedCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AdvancedCluster Get(string name, Input<string> id, AdvancedClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new AdvancedCluster(name, id, state, options);
        }
    }

    public sealed class AdvancedClusterArgs : Pulumi.ResourceArgs
    {
        [Input("advancedConfiguration")]
        public Input<Inputs.AdvancedClusterAdvancedConfigurationArgs>? AdvancedConfiguration { get; set; }

        /// <summary>
        /// Flag that indicates whether the cluster can perform backups.
        /// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
        /// </summary>
        [Input("backupEnabled")]
        public Input<bool>? BackupEnabled { get; set; }

        /// <summary>
        /// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
        /// </summary>
        [Input("biConnector")]
        public Input<Inputs.AdvancedClusterBiConnectorArgs>? BiConnector { get; set; }

        /// <summary>
        /// Type of the cluster that you want to create.
        /// Accepted values include:
        /// </summary>
        [Input("clusterType", required: true)]
        public Input<string> ClusterType { get; set; } = null!;

        /// <summary>
        /// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<double>? DiskSizeGb { get; set; }

        /// <summary>
        /// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backup_enabled` is false or omitted.
        /// </summary>
        [Input("encryptionAtRestProvider")]
        public Input<string>? EncryptionAtRestProvider { get; set; }

        [Input("labels")]
        private InputList<Inputs.AdvancedClusterLabelArgs>? _labels;

        /// <summary>
        /// Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
        /// </summary>
        public InputList<Inputs.AdvancedClusterLabelArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.AdvancedClusterLabelArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.0`, `4.2`, `4.4`, or `5.0`. If omitted, Atlas deploys a cluster that runs MongoDB 4.4. If `replication_specs#.region_configs#.&lt;type&gt;Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `version_release_system` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `version_release_system`: `LTS`.
        /// </summary>
        [Input("mongoDbMajorVersion")]
        public Input<string>? MongoDbMajorVersion { get; set; }

        /// <summary>
        /// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// - Flag that indicates if the cluster uses Continuous Cloud Backup.
        /// </summary>
        [Input("pitEnabled")]
        public Input<bool>? PitEnabled { get; set; }

        /// <summary>
        /// Unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("replicationSpecs", required: true)]
        private InputList<Inputs.AdvancedClusterReplicationSpecArgs>? _replicationSpecs;

        /// <summary>
        /// Configuration for cluster regions and the hardware provisioned in them. See below
        /// </summary>
        public InputList<Inputs.AdvancedClusterReplicationSpecArgs> ReplicationSpecs
        {
            get => _replicationSpecs ?? (_replicationSpecs = new InputList<Inputs.AdvancedClusterReplicationSpecArgs>());
            set => _replicationSpecs = value;
        }

        /// <summary>
        /// - Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
        /// </summary>
        [Input("rootCertType")]
        public Input<string>? RootCertType { get; set; }

        /// <summary>
        /// - Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
        /// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
        /// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
        /// </summary>
        [Input("versionReleaseSystem")]
        public Input<string>? VersionReleaseSystem { get; set; }

        public AdvancedClusterArgs()
        {
        }
    }

    public sealed class AdvancedClusterState : Pulumi.ResourceArgs
    {
        [Input("advancedConfiguration")]
        public Input<Inputs.AdvancedClusterAdvancedConfigurationGetArgs>? AdvancedConfiguration { get; set; }

        /// <summary>
        /// Flag that indicates whether the cluster can perform backups.
        /// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
        /// </summary>
        [Input("backupEnabled")]
        public Input<bool>? BackupEnabled { get; set; }

        /// <summary>
        /// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
        /// </summary>
        [Input("biConnector")]
        public Input<Inputs.AdvancedClusterBiConnectorGetArgs>? BiConnector { get; set; }

        /// <summary>
        /// The cluster ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Type of the cluster that you want to create.
        /// Accepted values include:
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.AdvancedClusterConnectionStringGetArgs>? _connectionStrings;

        /// <summary>
        /// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
        /// </summary>
        public InputList<Inputs.AdvancedClusterConnectionStringGetArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.AdvancedClusterConnectionStringGetArgs>());
            set => _connectionStrings = value;
        }

        [Input("createDate")]
        public Input<string>? CreateDate { get; set; }

        /// <summary>
        /// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<double>? DiskSizeGb { get; set; }

        /// <summary>
        /// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backup_enabled` is false or omitted.
        /// </summary>
        [Input("encryptionAtRestProvider")]
        public Input<string>? EncryptionAtRestProvider { get; set; }

        [Input("labels")]
        private InputList<Inputs.AdvancedClusterLabelGetArgs>? _labels;

        /// <summary>
        /// Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
        /// </summary>
        public InputList<Inputs.AdvancedClusterLabelGetArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.AdvancedClusterLabelGetArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.0`, `4.2`, `4.4`, or `5.0`. If omitted, Atlas deploys a cluster that runs MongoDB 4.4. If `replication_specs#.region_configs#.&lt;type&gt;Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `version_release_system` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `version_release_system`: `LTS`.
        /// </summary>
        [Input("mongoDbMajorVersion")]
        public Input<string>? MongoDbMajorVersion { get; set; }

        /// <summary>
        /// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
        /// </summary>
        [Input("mongoDbVersion")]
        public Input<string>? MongoDbVersion { get; set; }

        /// <summary>
        /// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// - Flag that indicates if the cluster uses Continuous Cloud Backup.
        /// </summary>
        [Input("pitEnabled")]
        public Input<bool>? PitEnabled { get; set; }

        /// <summary>
        /// Unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("replicationSpecs")]
        private InputList<Inputs.AdvancedClusterReplicationSpecGetArgs>? _replicationSpecs;

        /// <summary>
        /// Configuration for cluster regions and the hardware provisioned in them. See below
        /// </summary>
        public InputList<Inputs.AdvancedClusterReplicationSpecGetArgs> ReplicationSpecs
        {
            get => _replicationSpecs ?? (_replicationSpecs = new InputList<Inputs.AdvancedClusterReplicationSpecGetArgs>());
            set => _replicationSpecs = value;
        }

        /// <summary>
        /// - Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
        /// </summary>
        [Input("rootCertType")]
        public Input<string>? RootCertType { get; set; }

        /// <summary>
        /// Current state of the cluster. The possible states are:
        /// - IDLE
        /// - CREATING
        /// - UPDATING
        /// - DELETING
        /// - DELETED
        /// - REPAIRING
        /// </summary>
        [Input("stateName")]
        public Input<string>? StateName { get; set; }

        /// <summary>
        /// - Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
        /// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
        /// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
        /// </summary>
        [Input("versionReleaseSystem")]
        public Input<string>? VersionReleaseSystem { get; set; }

        public AdvancedClusterState()
        {
        }
    }
}
