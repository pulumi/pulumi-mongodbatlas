// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// ## Example Usage
    /// 
    /// ### Example single provider and single region
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Mongodbatlas.AdvancedCluster("test", new()
    ///     {
    ///         ProjectId = "PROJECT ID",
    ///         Name = "NAME OF CLUSTER",
    ///         ClusterType = "REPLICASET",
    ///         ReplicationSpecs = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M10",
    ///                             NodeCount = 3,
    ///                         },
    ///                         AnalyticsSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigAnalyticsSpecsArgs
    ///                         {
    ///                             InstanceSize = "M10",
    ///                             NodeCount = 1,
    ///                         },
    ///                         ProviderName = "AWS",
    ///                         Priority = 7,
    ///                         RegionName = "US_EAST_1",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example Tenant Cluster
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Mongodbatlas.AdvancedCluster("test", new()
    ///     {
    ///         ProjectId = "PROJECT ID",
    ///         Name = "NAME OF CLUSTER",
    ///         ClusterType = "REPLICASET",
    ///         ReplicationSpecs = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M0",
    ///                         },
    ///                         ProviderName = "TENANT",
    ///                         BackingProviderName = "AWS",
    ///                         RegionName = "US_EAST_1",
    ///                         Priority = 7,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// **NOTE:** There can only be one M0 cluster per project.
    /// 
    /// **NOTE**: Upgrading the tenant cluster to a Flex cluster or a dedicated cluster is supported. When upgrading to a Flex cluster, change the `provider_name` from "TENANT" to "FLEX". See Example Tenant Cluster Upgrade to Flex below. When upgrading to a dedicated cluster, change the `provider_name` to your preferred provider (AWS, GCP or Azure) and remove the variable `backing_provider_name`.  See the Example Tenant Cluster Upgrade below. You can upgrade a tenant cluster only to a single provider on an M10-tier cluster or greater.
    /// 
    /// When upgrading from the tenant, *only* the upgrade changes will be applied. This helps avoid a corrupt state file in the event that the upgrade succeeds but subsequent updates fail within the same `pulumi up`. To apply additional cluster changes, run a secondary `pulumi up` after the upgrade succeeds.
    /// 
    /// ### Example Tenant Cluster Upgrade
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Mongodbatlas.AdvancedCluster("test", new()
    ///     {
    ///         ProjectId = "PROJECT ID",
    ///         Name = "NAME OF CLUSTER",
    ///         ClusterType = "REPLICASET",
    ///         ReplicationSpecs = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M10",
    ///                         },
    ///                         ProviderName = "AWS",
    ///                         RegionName = "US_EAST_1",
    ///                         Priority = 7,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example Tenant Cluster Upgrade to Flex
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example_flex = new Mongodbatlas.AdvancedCluster("example-flex", new()
    ///     {
    ///         ProjectId = "PROJECT ID",
    ///         Name = "NAME OF CLUSTER",
    ///         ClusterType = "REPLICASET",
    ///         ReplicationSpecs = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ProviderName = "FLEX",
    ///                         BackingProviderName = "AWS",
    ///                         RegionName = "US_EAST_1",
    ///                         Priority = 7,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example Flex Cluster
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var example_flex = new Mongodbatlas.AdvancedCluster("example-flex", new()
    ///     {
    ///         ProjectId = "PROJECT ID",
    ///         Name = "NAME OF CLUSTER",
    ///         ClusterType = "REPLICASET",
    ///         ReplicationSpecs = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ProviderName = "FLEX",
    ///                         BackingProviderName = "AWS",
    ///                         RegionName = "US_EAST_1",
    ///                         Priority = 7,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// **NOTE**: Upgrading the Flex cluster is supported. When upgrading from a Flex cluster, change the `provider_name` from "TENANT" to your preferred provider (AWS, GCP or Azure) and remove the variable `backing_provider_name`.  See the Example Flex Cluster Upgrade below. You can upgrade a Flex cluster only to a single provider on an M10-tier cluster or greater.
    /// 
    /// When upgrading from a flex cluster, *only* the upgrade changes will be applied. This helps avoid a corrupt state file in the event that the upgrade succeeds but subsequent updates fail within the same `pulumi up`. To apply additional cluster changes, run a secondary `pulumi up` after the upgrade succeeds.
    /// 
    /// ### Example Flex Cluster Upgrade
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Mongodbatlas.AdvancedCluster("test", new()
    ///     {
    ///         ProjectId = "PROJECT ID",
    ///         Name = "NAME OF CLUSTER",
    ///         ClusterType = "REPLICASET",
    ///         ReplicationSpecs = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M10",
    ///                         },
    ///                         ProviderName = "AWS",
    ///                         RegionName = "US_EAST_1",
    ///                         Priority = 7,
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example Multi-Cloud Cluster
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Mongodbatlas.AdvancedCluster("test", new()
    ///     {
    ///         ProjectId = "PROJECT ID",
    ///         Name = "NAME OF CLUSTER",
    ///         ClusterType = "REPLICASET",
    ///         ReplicationSpecs = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M10",
    ///                             NodeCount = 3,
    ///                         },
    ///                         AnalyticsSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigAnalyticsSpecsArgs
    ///                         {
    ///                             InstanceSize = "M10",
    ///                             NodeCount = 1,
    ///                         },
    ///                         ProviderName = "AWS",
    ///                         Priority = 7,
    ///                         RegionName = "US_EAST_1",
    ///                     },
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M10",
    ///                             NodeCount = 2,
    ///                         },
    ///                         ProviderName = "GCP",
    ///                         Priority = 6,
    ///                         RegionName = "NORTH_AMERICA_NORTHEAST_1",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// ### Example of a Multi Cloud Sharded Cluster with 2 shards
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cluster = new Mongodbatlas.AdvancedCluster("cluster", new()
    ///     {
    ///         ProjectId = project.Id,
    ///         Name = clusterName,
    ///         ClusterType = "SHARDED",
    ///         BackupEnabled = true,
    ///         ReplicationSpecs = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M30",
    ///                             NodeCount = 3,
    ///                         },
    ///                         ProviderName = "AWS",
    ///                         Priority = 7,
    ///                         RegionName = "US_EAST_1",
    ///                     },
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M30",
    ///                             NodeCount = 2,
    ///                         },
    ///                         ProviderName = "AZURE",
    ///                         Priority = 6,
    ///                         RegionName = "US_EAST_2",
    ///                     },
    ///                 },
    ///             },
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M30",
    ///                             NodeCount = 3,
    ///                         },
    ///                         ProviderName = "AWS",
    ///                         Priority = 7,
    ///                         RegionName = "US_EAST_1",
    ///                     },
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M30",
    ///                             NodeCount = 2,
    ///                         },
    ///                         ProviderName = "AZURE",
    ///                         Priority = 6,
    ///                         RegionName = "US_EAST_2",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         AdvancedConfiguration = new Mongodbatlas.Inputs.AdvancedClusterAdvancedConfigurationArgs
    ///         {
    ///             JavascriptEnabled = true,
    ///             OplogSizeMb = 991,
    ///             SampleRefreshIntervalBiConnector = 300,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example of a Global Cluster with 2 zones
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var cluster = new Mongodbatlas.AdvancedCluster("cluster", new()
    ///     {
    ///         ProjectId = project.Id,
    ///         Name = clusterName,
    ///         ClusterType = "GEOSHARDED",
    ///         BackupEnabled = true,
    ///         ReplicationSpecs = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 ZoneName = "zone n1",
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M30",
    ///                             NodeCount = 3,
    ///                         },
    ///                         ProviderName = "AWS",
    ///                         Priority = 7,
    ///                         RegionName = "US_EAST_1",
    ///                     },
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M30",
    ///                             NodeCount = 2,
    ///                         },
    ///                         ProviderName = "AZURE",
    ///                         Priority = 6,
    ///                         RegionName = "US_EAST_2",
    ///                     },
    ///                 },
    ///             },
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 ZoneName = "zone n1",
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M30",
    ///                             NodeCount = 3,
    ///                         },
    ///                         ProviderName = "AWS",
    ///                         Priority = 7,
    ///                         RegionName = "US_EAST_1",
    ///                     },
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M30",
    ///                             NodeCount = 2,
    ///                         },
    ///                         ProviderName = "AZURE",
    ///                         Priority = 6,
    ///                         RegionName = "US_EAST_2",
    ///                     },
    ///                 },
    ///             },
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 ZoneName = "zone n2",
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M30",
    ///                             NodeCount = 3,
    ///                         },
    ///                         ProviderName = "AWS",
    ///                         Priority = 7,
    ///                         RegionName = "EU_WEST_1",
    ///                     },
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M30",
    ///                             NodeCount = 2,
    ///                         },
    ///                         ProviderName = "AZURE",
    ///                         Priority = 6,
    ///                         RegionName = "EUROPE_NORTH",
    ///                     },
    ///                 },
    ///             },
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 ZoneName = "zone n2",
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M30",
    ///                             NodeCount = 3,
    ///                         },
    ///                         ProviderName = "AWS",
    ///                         Priority = 7,
    ///                         RegionName = "EU_WEST_1",
    ///                     },
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M30",
    ///                             NodeCount = 2,
    ///                         },
    ///                         ProviderName = "AZURE",
    ///                         Priority = 6,
    ///                         RegionName = "EUROPE_NORTH",
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///         AdvancedConfiguration = new Mongodbatlas.Inputs.AdvancedClusterAdvancedConfigurationArgs
    ///         {
    ///             JavascriptEnabled = true,
    ///             OplogSizeMb = 999,
    ///             SampleRefreshIntervalBiConnector = 300,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ### Example - Return a Connection String
    /// Standard
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["standard"] = cluster.ConnectionStrings[0].Standard,
    ///     };
    /// });
    /// ```
    /// Standard srv
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     return new Dictionary&lt;string, object?&gt;
    ///     {
    ///         ["standardSrv"] = cluster.ConnectionStrings[0].StandardSrv,
    ///     };
    /// });
    /// ```
    /// Private with Network peering and Custom DNS AWS enabled
    /// ## Import
    /// 
    /// Clusters can be imported using project ID and cluster name, in the format `PROJECTID-CLUSTERNAME`, e.g.
    /// 
    /// ```sh
    /// $ pulumi import mongodbatlas:index/advancedCluster:AdvancedCluster my_cluster 1112222b3bf99403840e8934-Cluster0
    /// ```
    /// See detailed information for arguments and attributes: [MongoDB API Advanced Clusters](https://docs.atlas.mongodb.com/reference/api/cluster-advanced/create-one-cluster-advanced/)
    /// 
    /// ~&gt; __IMPORTANT:__
    /// \n\n &amp;#8226; When a cluster is imported, the resulting schema structure will always return the new schema including `replication_specs` per independent shards of the cluster.
    /// \n\n &amp;#8226;  Note: The first time `pulumi up` command is run __after__ updating the configuration of an imported cluster, you may receive a `500 Internal Server Error (Error code: "SERVICE_UNAVAILABLE")` error. This is a known temporary issue. If you encounter this, please re-run `pulumi up` and this time the update should succeed.
    /// </summary>
    [MongodbatlasResourceType("mongodbatlas:index/advancedCluster:AdvancedCluster")]
    public partial class AdvancedCluster : global::Pulumi.CustomResource
    {
        /// <summary>
        /// If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `accept_data_risks_and_force_replica_set_reconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
        /// </summary>
        [Output("acceptDataRisksAndForceReplicaSetReconfig")]
        public Output<string?> AcceptDataRisksAndForceReplicaSetReconfig { get; private set; } = null!;

        [Output("advancedConfiguration")]
        public Output<Outputs.AdvancedClusterAdvancedConfiguration> AdvancedConfiguration { get; private set; } = null!;

        /// <summary>
        /// Flag that indicates whether the cluster can perform backups.
        /// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
        /// 
        /// Backup uses:
        /// [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
        /// [Flex Cluster Backups](https://www.mongodb.com/docs/atlas/backup/cloud-backup/flex-cluster-backup/) for flex clusters.
        /// If "`backup_enabled`" : `false`, the cluster doesn't use Atlas backups.
        /// 
        /// This parameter defaults to false.
        /// </summary>
        [Output("backupEnabled")]
        public Output<bool> BackupEnabled { get; private set; } = null!;

        /// <summary>
        /// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
        /// </summary>
        [Output("biConnectorConfig")]
        public Output<Outputs.AdvancedClusterBiConnectorConfig> BiConnectorConfig { get; private set; } = null!;

        /// <summary>
        /// The cluster ID.
        /// </summary>
        [Output("clusterId")]
        public Output<string> ClusterId { get; private set; } = null!;

        /// <summary>
        /// Type of the cluster that you want to create.
        /// Accepted values include:
        /// - `REPLICASET` Replica set
        /// - `SHARDED`	Sharded cluster
        /// - `GEOSHARDED` Global Cluster
        /// </summary>
        [Output("clusterType")]
        public Output<string> ClusterType { get; private set; } = null!;

        /// <summary>
        /// Config Server Management Mode for creating or updating a sharded cluster. Valid values are `ATLAS_MANAGED` (default) and `FIXED_TO_DEDICATED`. When configured as `ATLAS_MANAGED`, Atlas may automatically switch the cluster's config server type for optimal performance and savings. When configured as `FIXED_TO_DEDICATED`, the cluster will always use a dedicated config server. To learn more, see the [Sharded Cluster Config Servers documentation](https://dochub.mongodb.org/docs/manual/core/sharded-cluster-config-servers/).
        /// </summary>
        [Output("configServerManagementMode")]
        public Output<string> ConfigServerManagementMode { get; private set; } = null!;

        /// <summary>
        /// Describes a sharded cluster's config server type. Valid values are `DEDICATED` and `EMBEDDED`. To learn more, see the [Sharded Cluster Config Servers documentation](https://dochub.mongodb.org/docs/manual/core/sharded-cluster-config-servers/).
        /// </summary>
        [Output("configServerType")]
        public Output<string> ConfigServerType { get; private set; } = null!;

        /// <summary>
        /// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
        /// </summary>
        [Output("connectionStrings")]
        public Output<ImmutableArray<Outputs.AdvancedClusterConnectionString>> ConnectionStrings { get; private set; } = null!;

        [Output("createDate")]
        public Output<string> CreateDate { get; private set; } = null!;

        /// <summary>
        /// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_config.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
        /// </summary>
        [Output("diskSizeGb")]
        public Output<double> DiskSizeGb { get; private set; } = null!;

        /// <summary>
        /// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backup_enabled` is false or omitted.
        /// </summary>
        [Output("encryptionAtRestProvider")]
        public Output<string> EncryptionAtRestProvider { get; private set; } = null!;

        /// <summary>
        /// Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you're an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more info [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
        /// </summary>
        [Output("globalClusterSelfManagedSharding")]
        public Output<bool> GlobalClusterSelfManagedSharding { get; private set; } = null!;

        /// <summary>
        /// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
        /// </summary>
        [Output("labels")]
        public Output<ImmutableArray<Outputs.AdvancedClusterLabel>> Labels { get; private set; } = null!;

        /// <summary>
        /// Version of the cluster to deploy. Atlas supports all the MongoDB versions that have **not** reached [End of Live](https://www.mongodb.com/legal/support-policy/lifecycles) for M10+ clusters. If omitted, Atlas deploys the cluster with the default version. For more details, see [documentation](https://www.mongodb.com/docs/atlas/reference/faq/database/#which-versions-of-mongodb-do-service-clusters-use-). Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `version_release_system` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `version_release_system`: `LTS`.
        /// </summary>
        [Output("mongoDbMajorVersion")]
        public Output<string> MongoDbMajorVersion { get; private set; } = null!;

        /// <summary>
        /// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
        /// </summary>
        [Output("mongoDbVersion")]
        public Output<string> MongoDbVersion { get; private set; } = null!;

        /// <summary>
        /// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
        /// </summary>
        [Output("name")]
        public Output<string> Name { get; private set; } = null!;

        [Output("paused")]
        public Output<bool> Paused { get; private set; } = null!;

        /// <summary>
        /// Pins the Feature Compatibility Version (FCV) to the current MongoDB version with a provided expiration date. To unpin the FCV the `pinned_fcv` attribute must be removed. This operation can take several minutes as the request processes through the MongoDB data plane. Once FCV is unpinned it will not be possible to downgrade the `mongo_db_major_version`. It is advised that updates to `pinned_fcv` are done isolated from other cluster changes. If a plan contains multiple changes, the FCV change will be applied first. If FCV is unpinned past the expiration date the `pinned_fcv` attribute must be removed. The following [knowledge hub article](https://kb.corp.mongodb.com/article/000021785/) and [FCV documentation](https://www.mongodb.com/docs/atlas/tutorial/major-version-change/#manage-feature-compatibility--fcv--during-upgrades) can be referenced for more details. See below.
        /// </summary>
        [Output("pinnedFcv")]
        public Output<Outputs.AdvancedClusterPinnedFcv?> PinnedFcv { get; private set; } = null!;

        /// <summary>
        /// Flag that indicates if the cluster uses Continuous Cloud Backup.
        /// </summary>
        [Output("pitEnabled")]
        public Output<bool> PitEnabled { get; private set; } = null!;

        /// <summary>
        /// Unique ID for the project to create the database user.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Flag that enables or disables log redaction, see the [manual](https://www.mongodb.com/docs/manual/administration/monitoring/#log-redaction) for more info. Use this in conjunction with Encryption at Rest and TLS/SSL (Transport Encryption) to assist compliance with regulatory requirements. **Note**: Changing this setting on a cluster will trigger a rolling restart as soon as the cluster is updated.
        /// </summary>
        [Output("redactClientLogData")]
        public Output<bool> RedactClientLogData { get; private set; } = null!;

        /// <summary>
        /// Replica set scaling mode for your cluster. Valid values are `WORKLOAD_TYPE`, `SEQUENTIAL` and `NODE_TYPE`. By default, Atlas scales under `WORKLOAD_TYPE`. This mode allows Atlas to scale your analytics nodes in parallel to your operational nodes. When configured as `SEQUENTIAL`, Atlas scales all nodes sequentially. This mode is intended for steady-state workloads and applications performing latency-sensitive secondary reads. When configured as `NODE_TYPE`, Atlas scales your electable nodes in parallel with your read-only and analytics nodes. This mode is intended for large, dynamic workloads requiring frequent and timely cluster tier scaling. This is the fastest scaling strategy, but it might impact latency of workloads when performing extensive secondary reads. [Modify the Replica Set Scaling Mode](https://dochub.mongodb.org/core/scale-nodes)
        /// </summary>
        [Output("replicaSetScalingStrategy")]
        public Output<string> ReplicaSetScalingStrategy { get; private set; } = null!;

        /// <summary>
        /// List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each replication_spec `num_shards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. See below
        /// </summary>
        [Output("replicationSpecs")]
        public Output<ImmutableArray<Outputs.AdvancedClusterReplicationSpec>> ReplicationSpecs { get; private set; } = null!;

        /// <summary>
        /// Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
        /// </summary>
        [Output("retainBackupsEnabled")]
        public Output<bool?> RetainBackupsEnabled { get; private set; } = null!;

        /// <summary>
        /// Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
        /// </summary>
        [Output("rootCertType")]
        public Output<string> RootCertType { get; private set; } = null!;

        /// <summary>
        /// Current state of the cluster. The possible states are:
        /// - IDLE
        /// - CREATING
        /// - UPDATING
        /// - DELETING
        /// - DELETED
        /// - REPAIRING
        /// * `replication_specs.#.container_id` - A key-value map of the Network Peering Container ID(s) for the configuration specified in `region_configs`. The Container ID is the id of the container created when the first cluster in the region (AWS/Azure) or project (GCP) was created.  The syntax is `"providerName:regionName" = "containerId"`. Example `AWS:US_EAST_1" = "61e0797dde08fb498ca11a71`.
        /// </summary>
        [Output("stateName")]
        public Output<string> StateName { get; private set; } = null!;

        /// <summary>
        /// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
        /// </summary>
        [Output("tags")]
        public Output<ImmutableArray<Outputs.AdvancedClusterTag>> Tags { get; private set; } = null!;

        /// <summary>
        /// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
        /// </summary>
        [Output("terminationProtectionEnabled")]
        public Output<bool> TerminationProtectionEnabled { get; private set; } = null!;

        /// <summary>
        /// Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
        /// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
        /// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
        /// </summary>
        [Output("versionReleaseSystem")]
        public Output<string> VersionReleaseSystem { get; private set; } = null!;


        /// <summary>
        /// Create a AdvancedCluster resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public AdvancedCluster(string name, AdvancedClusterArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/advancedCluster:AdvancedCluster", name, args ?? new AdvancedClusterArgs(), MakeResourceOptions(options, ""))
        {
        }

        private AdvancedCluster(string name, Input<string> id, AdvancedClusterState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/advancedCluster:AdvancedCluster", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing AdvancedCluster resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static AdvancedCluster Get(string name, Input<string> id, AdvancedClusterState? state = null, CustomResourceOptions? options = null)
        {
            return new AdvancedCluster(name, id, state, options);
        }
    }

    public sealed class AdvancedClusterArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `accept_data_risks_and_force_replica_set_reconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
        /// </summary>
        [Input("acceptDataRisksAndForceReplicaSetReconfig")]
        public Input<string>? AcceptDataRisksAndForceReplicaSetReconfig { get; set; }

        [Input("advancedConfiguration")]
        public Input<Inputs.AdvancedClusterAdvancedConfigurationArgs>? AdvancedConfiguration { get; set; }

        /// <summary>
        /// Flag that indicates whether the cluster can perform backups.
        /// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
        /// 
        /// Backup uses:
        /// [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
        /// [Flex Cluster Backups](https://www.mongodb.com/docs/atlas/backup/cloud-backup/flex-cluster-backup/) for flex clusters.
        /// If "`backup_enabled`" : `false`, the cluster doesn't use Atlas backups.
        /// 
        /// This parameter defaults to false.
        /// </summary>
        [Input("backupEnabled")]
        public Input<bool>? BackupEnabled { get; set; }

        /// <summary>
        /// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
        /// </summary>
        [Input("biConnectorConfig")]
        public Input<Inputs.AdvancedClusterBiConnectorConfigArgs>? BiConnectorConfig { get; set; }

        /// <summary>
        /// Type of the cluster that you want to create.
        /// Accepted values include:
        /// - `REPLICASET` Replica set
        /// - `SHARDED`	Sharded cluster
        /// - `GEOSHARDED` Global Cluster
        /// </summary>
        [Input("clusterType", required: true)]
        public Input<string> ClusterType { get; set; } = null!;

        /// <summary>
        /// Config Server Management Mode for creating or updating a sharded cluster. Valid values are `ATLAS_MANAGED` (default) and `FIXED_TO_DEDICATED`. When configured as `ATLAS_MANAGED`, Atlas may automatically switch the cluster's config server type for optimal performance and savings. When configured as `FIXED_TO_DEDICATED`, the cluster will always use a dedicated config server. To learn more, see the [Sharded Cluster Config Servers documentation](https://dochub.mongodb.org/docs/manual/core/sharded-cluster-config-servers/).
        /// </summary>
        [Input("configServerManagementMode")]
        public Input<string>? ConfigServerManagementMode { get; set; }

        /// <summary>
        /// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_config.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<double>? DiskSizeGb { get; set; }

        /// <summary>
        /// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backup_enabled` is false or omitted.
        /// </summary>
        [Input("encryptionAtRestProvider")]
        public Input<string>? EncryptionAtRestProvider { get; set; }

        /// <summary>
        /// Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you're an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more info [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
        /// </summary>
        [Input("globalClusterSelfManagedSharding")]
        public Input<bool>? GlobalClusterSelfManagedSharding { get; set; }

        [Input("labels")]
        private InputList<Inputs.AdvancedClusterLabelArgs>? _labels;

        /// <summary>
        /// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
        /// </summary>
        public InputList<Inputs.AdvancedClusterLabelArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.AdvancedClusterLabelArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Version of the cluster to deploy. Atlas supports all the MongoDB versions that have **not** reached [End of Live](https://www.mongodb.com/legal/support-policy/lifecycles) for M10+ clusters. If omitted, Atlas deploys the cluster with the default version. For more details, see [documentation](https://www.mongodb.com/docs/atlas/reference/faq/database/#which-versions-of-mongodb-do-service-clusters-use-). Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `version_release_system` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `version_release_system`: `LTS`.
        /// </summary>
        [Input("mongoDbMajorVersion")]
        public Input<string>? MongoDbMajorVersion { get; set; }

        /// <summary>
        /// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// Pins the Feature Compatibility Version (FCV) to the current MongoDB version with a provided expiration date. To unpin the FCV the `pinned_fcv` attribute must be removed. This operation can take several minutes as the request processes through the MongoDB data plane. Once FCV is unpinned it will not be possible to downgrade the `mongo_db_major_version`. It is advised that updates to `pinned_fcv` are done isolated from other cluster changes. If a plan contains multiple changes, the FCV change will be applied first. If FCV is unpinned past the expiration date the `pinned_fcv` attribute must be removed. The following [knowledge hub article](https://kb.corp.mongodb.com/article/000021785/) and [FCV documentation](https://www.mongodb.com/docs/atlas/tutorial/major-version-change/#manage-feature-compatibility--fcv--during-upgrades) can be referenced for more details. See below.
        /// </summary>
        [Input("pinnedFcv")]
        public Input<Inputs.AdvancedClusterPinnedFcvArgs>? PinnedFcv { get; set; }

        /// <summary>
        /// Flag that indicates if the cluster uses Continuous Cloud Backup.
        /// </summary>
        [Input("pitEnabled")]
        public Input<bool>? PitEnabled { get; set; }

        /// <summary>
        /// Unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Flag that enables or disables log redaction, see the [manual](https://www.mongodb.com/docs/manual/administration/monitoring/#log-redaction) for more info. Use this in conjunction with Encryption at Rest and TLS/SSL (Transport Encryption) to assist compliance with regulatory requirements. **Note**: Changing this setting on a cluster will trigger a rolling restart as soon as the cluster is updated.
        /// </summary>
        [Input("redactClientLogData")]
        public Input<bool>? RedactClientLogData { get; set; }

        /// <summary>
        /// Replica set scaling mode for your cluster. Valid values are `WORKLOAD_TYPE`, `SEQUENTIAL` and `NODE_TYPE`. By default, Atlas scales under `WORKLOAD_TYPE`. This mode allows Atlas to scale your analytics nodes in parallel to your operational nodes. When configured as `SEQUENTIAL`, Atlas scales all nodes sequentially. This mode is intended for steady-state workloads and applications performing latency-sensitive secondary reads. When configured as `NODE_TYPE`, Atlas scales your electable nodes in parallel with your read-only and analytics nodes. This mode is intended for large, dynamic workloads requiring frequent and timely cluster tier scaling. This is the fastest scaling strategy, but it might impact latency of workloads when performing extensive secondary reads. [Modify the Replica Set Scaling Mode](https://dochub.mongodb.org/core/scale-nodes)
        /// </summary>
        [Input("replicaSetScalingStrategy")]
        public Input<string>? ReplicaSetScalingStrategy { get; set; }

        [Input("replicationSpecs", required: true)]
        private InputList<Inputs.AdvancedClusterReplicationSpecArgs>? _replicationSpecs;

        /// <summary>
        /// List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each replication_spec `num_shards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. See below
        /// </summary>
        public InputList<Inputs.AdvancedClusterReplicationSpecArgs> ReplicationSpecs
        {
            get => _replicationSpecs ?? (_replicationSpecs = new InputList<Inputs.AdvancedClusterReplicationSpecArgs>());
            set => _replicationSpecs = value;
        }

        /// <summary>
        /// Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
        /// </summary>
        [Input("retainBackupsEnabled")]
        public Input<bool>? RetainBackupsEnabled { get; set; }

        /// <summary>
        /// Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
        /// </summary>
        [Input("rootCertType")]
        public Input<string>? RootCertType { get; set; }

        [Input("tags")]
        private InputList<Inputs.AdvancedClusterTagArgs>? _tags;

        /// <summary>
        /// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
        /// </summary>
        public InputList<Inputs.AdvancedClusterTagArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AdvancedClusterTagArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
        /// </summary>
        [Input("terminationProtectionEnabled")]
        public Input<bool>? TerminationProtectionEnabled { get; set; }

        /// <summary>
        /// Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
        /// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
        /// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
        /// </summary>
        [Input("versionReleaseSystem")]
        public Input<string>? VersionReleaseSystem { get; set; }

        public AdvancedClusterArgs()
        {
        }
        public static new AdvancedClusterArgs Empty => new AdvancedClusterArgs();
    }

    public sealed class AdvancedClusterState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `accept_data_risks_and_force_replica_set_reconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
        /// </summary>
        [Input("acceptDataRisksAndForceReplicaSetReconfig")]
        public Input<string>? AcceptDataRisksAndForceReplicaSetReconfig { get; set; }

        [Input("advancedConfiguration")]
        public Input<Inputs.AdvancedClusterAdvancedConfigurationGetArgs>? AdvancedConfiguration { get; set; }

        /// <summary>
        /// Flag that indicates whether the cluster can perform backups.
        /// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
        /// 
        /// Backup uses:
        /// [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
        /// [Flex Cluster Backups](https://www.mongodb.com/docs/atlas/backup/cloud-backup/flex-cluster-backup/) for flex clusters.
        /// If "`backup_enabled`" : `false`, the cluster doesn't use Atlas backups.
        /// 
        /// This parameter defaults to false.
        /// </summary>
        [Input("backupEnabled")]
        public Input<bool>? BackupEnabled { get; set; }

        /// <summary>
        /// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
        /// </summary>
        [Input("biConnectorConfig")]
        public Input<Inputs.AdvancedClusterBiConnectorConfigGetArgs>? BiConnectorConfig { get; set; }

        /// <summary>
        /// The cluster ID.
        /// </summary>
        [Input("clusterId")]
        public Input<string>? ClusterId { get; set; }

        /// <summary>
        /// Type of the cluster that you want to create.
        /// Accepted values include:
        /// - `REPLICASET` Replica set
        /// - `SHARDED`	Sharded cluster
        /// - `GEOSHARDED` Global Cluster
        /// </summary>
        [Input("clusterType")]
        public Input<string>? ClusterType { get; set; }

        /// <summary>
        /// Config Server Management Mode for creating or updating a sharded cluster. Valid values are `ATLAS_MANAGED` (default) and `FIXED_TO_DEDICATED`. When configured as `ATLAS_MANAGED`, Atlas may automatically switch the cluster's config server type for optimal performance and savings. When configured as `FIXED_TO_DEDICATED`, the cluster will always use a dedicated config server. To learn more, see the [Sharded Cluster Config Servers documentation](https://dochub.mongodb.org/docs/manual/core/sharded-cluster-config-servers/).
        /// </summary>
        [Input("configServerManagementMode")]
        public Input<string>? ConfigServerManagementMode { get; set; }

        /// <summary>
        /// Describes a sharded cluster's config server type. Valid values are `DEDICATED` and `EMBEDDED`. To learn more, see the [Sharded Cluster Config Servers documentation](https://dochub.mongodb.org/docs/manual/core/sharded-cluster-config-servers/).
        /// </summary>
        [Input("configServerType")]
        public Input<string>? ConfigServerType { get; set; }

        [Input("connectionStrings")]
        private InputList<Inputs.AdvancedClusterConnectionStringGetArgs>? _connectionStrings;

        /// <summary>
        /// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
        /// </summary>
        public InputList<Inputs.AdvancedClusterConnectionStringGetArgs> ConnectionStrings
        {
            get => _connectionStrings ?? (_connectionStrings = new InputList<Inputs.AdvancedClusterConnectionStringGetArgs>());
            set => _connectionStrings = value;
        }

        [Input("createDate")]
        public Input<string>? CreateDate { get; set; }

        /// <summary>
        /// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_config.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
        /// </summary>
        [Input("diskSizeGb")]
        public Input<double>? DiskSizeGb { get; set; }

        /// <summary>
        /// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backup_enabled` is false or omitted.
        /// </summary>
        [Input("encryptionAtRestProvider")]
        public Input<string>? EncryptionAtRestProvider { get; set; }

        /// <summary>
        /// Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you're an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more info [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
        /// </summary>
        [Input("globalClusterSelfManagedSharding")]
        public Input<bool>? GlobalClusterSelfManagedSharding { get; set; }

        [Input("labels")]
        private InputList<Inputs.AdvancedClusterLabelGetArgs>? _labels;

        /// <summary>
        /// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
        /// </summary>
        public InputList<Inputs.AdvancedClusterLabelGetArgs> Labels
        {
            get => _labels ?? (_labels = new InputList<Inputs.AdvancedClusterLabelGetArgs>());
            set => _labels = value;
        }

        /// <summary>
        /// Version of the cluster to deploy. Atlas supports all the MongoDB versions that have **not** reached [End of Live](https://www.mongodb.com/legal/support-policy/lifecycles) for M10+ clusters. If omitted, Atlas deploys the cluster with the default version. For more details, see [documentation](https://www.mongodb.com/docs/atlas/reference/faq/database/#which-versions-of-mongodb-do-service-clusters-use-). Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `version_release_system` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `version_release_system`: `LTS`.
        /// </summary>
        [Input("mongoDbMajorVersion")]
        public Input<string>? MongoDbMajorVersion { get; set; }

        /// <summary>
        /// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
        /// </summary>
        [Input("mongoDbVersion")]
        public Input<string>? MongoDbVersion { get; set; }

        /// <summary>
        /// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
        /// </summary>
        [Input("name")]
        public Input<string>? Name { get; set; }

        [Input("paused")]
        public Input<bool>? Paused { get; set; }

        /// <summary>
        /// Pins the Feature Compatibility Version (FCV) to the current MongoDB version with a provided expiration date. To unpin the FCV the `pinned_fcv` attribute must be removed. This operation can take several minutes as the request processes through the MongoDB data plane. Once FCV is unpinned it will not be possible to downgrade the `mongo_db_major_version`. It is advised that updates to `pinned_fcv` are done isolated from other cluster changes. If a plan contains multiple changes, the FCV change will be applied first. If FCV is unpinned past the expiration date the `pinned_fcv` attribute must be removed. The following [knowledge hub article](https://kb.corp.mongodb.com/article/000021785/) and [FCV documentation](https://www.mongodb.com/docs/atlas/tutorial/major-version-change/#manage-feature-compatibility--fcv--during-upgrades) can be referenced for more details. See below.
        /// </summary>
        [Input("pinnedFcv")]
        public Input<Inputs.AdvancedClusterPinnedFcvGetArgs>? PinnedFcv { get; set; }

        /// <summary>
        /// Flag that indicates if the cluster uses Continuous Cloud Backup.
        /// </summary>
        [Input("pitEnabled")]
        public Input<bool>? PitEnabled { get; set; }

        /// <summary>
        /// Unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Flag that enables or disables log redaction, see the [manual](https://www.mongodb.com/docs/manual/administration/monitoring/#log-redaction) for more info. Use this in conjunction with Encryption at Rest and TLS/SSL (Transport Encryption) to assist compliance with regulatory requirements. **Note**: Changing this setting on a cluster will trigger a rolling restart as soon as the cluster is updated.
        /// </summary>
        [Input("redactClientLogData")]
        public Input<bool>? RedactClientLogData { get; set; }

        /// <summary>
        /// Replica set scaling mode for your cluster. Valid values are `WORKLOAD_TYPE`, `SEQUENTIAL` and `NODE_TYPE`. By default, Atlas scales under `WORKLOAD_TYPE`. This mode allows Atlas to scale your analytics nodes in parallel to your operational nodes. When configured as `SEQUENTIAL`, Atlas scales all nodes sequentially. This mode is intended for steady-state workloads and applications performing latency-sensitive secondary reads. When configured as `NODE_TYPE`, Atlas scales your electable nodes in parallel with your read-only and analytics nodes. This mode is intended for large, dynamic workloads requiring frequent and timely cluster tier scaling. This is the fastest scaling strategy, but it might impact latency of workloads when performing extensive secondary reads. [Modify the Replica Set Scaling Mode](https://dochub.mongodb.org/core/scale-nodes)
        /// </summary>
        [Input("replicaSetScalingStrategy")]
        public Input<string>? ReplicaSetScalingStrategy { get; set; }

        [Input("replicationSpecs")]
        private InputList<Inputs.AdvancedClusterReplicationSpecGetArgs>? _replicationSpecs;

        /// <summary>
        /// List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each replication_spec `num_shards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. See below
        /// </summary>
        public InputList<Inputs.AdvancedClusterReplicationSpecGetArgs> ReplicationSpecs
        {
            get => _replicationSpecs ?? (_replicationSpecs = new InputList<Inputs.AdvancedClusterReplicationSpecGetArgs>());
            set => _replicationSpecs = value;
        }

        /// <summary>
        /// Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
        /// </summary>
        [Input("retainBackupsEnabled")]
        public Input<bool>? RetainBackupsEnabled { get; set; }

        /// <summary>
        /// Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
        /// </summary>
        [Input("rootCertType")]
        public Input<string>? RootCertType { get; set; }

        /// <summary>
        /// Current state of the cluster. The possible states are:
        /// - IDLE
        /// - CREATING
        /// - UPDATING
        /// - DELETING
        /// - DELETED
        /// - REPAIRING
        /// * `replication_specs.#.container_id` - A key-value map of the Network Peering Container ID(s) for the configuration specified in `region_configs`. The Container ID is the id of the container created when the first cluster in the region (AWS/Azure) or project (GCP) was created.  The syntax is `"providerName:regionName" = "containerId"`. Example `AWS:US_EAST_1" = "61e0797dde08fb498ca11a71`.
        /// </summary>
        [Input("stateName")]
        public Input<string>? StateName { get; set; }

        [Input("tags")]
        private InputList<Inputs.AdvancedClusterTagGetArgs>? _tags;

        /// <summary>
        /// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
        /// </summary>
        public InputList<Inputs.AdvancedClusterTagGetArgs> Tags
        {
            get => _tags ?? (_tags = new InputList<Inputs.AdvancedClusterTagGetArgs>());
            set => _tags = value;
        }

        /// <summary>
        /// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
        /// </summary>
        [Input("terminationProtectionEnabled")]
        public Input<bool>? TerminationProtectionEnabled { get; set; }

        /// <summary>
        /// Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
        /// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
        /// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
        /// </summary>
        [Input("versionReleaseSystem")]
        public Input<string>? VersionReleaseSystem { get; set; }

        public AdvancedClusterState()
        {
        }
        public static new AdvancedClusterState Empty => new AdvancedClusterState();
    }
}
