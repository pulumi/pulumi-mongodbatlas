// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetProjectIpAddresses
    {
        /// <summary>
        /// ## # Data Source: mongodbatlas.getProjectIpAddresses
        /// 
        /// `mongodbatlas.getProjectIpAddresses` returns the IP addresses in a project categorized by services.
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Mongodbatlas.GetProjectIpAddresses.Invoke(new()
        ///     {
        ///         ProjectId = projectId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["projectServices"] = test.Apply(getProjectIpAddressesResult =&gt; getProjectIpAddressesResult.Services),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetProjectIpAddressesResult> InvokeAsync(GetProjectIpAddressesArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetProjectIpAddressesResult>("mongodbatlas:index/getProjectIpAddresses:getProjectIpAddresses", args ?? new GetProjectIpAddressesArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.getProjectIpAddresses
        /// 
        /// `mongodbatlas.getProjectIpAddresses` returns the IP addresses in a project categorized by services.
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Mongodbatlas.GetProjectIpAddresses.Invoke(new()
        ///     {
        ///         ProjectId = projectId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["projectServices"] = test.Apply(getProjectIpAddressesResult =&gt; getProjectIpAddressesResult.Services),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectIpAddressesResult> Invoke(GetProjectIpAddressesInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectIpAddressesResult>("mongodbatlas:index/getProjectIpAddresses:getProjectIpAddresses", args ?? new GetProjectIpAddressesInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.getProjectIpAddresses
        /// 
        /// `mongodbatlas.getProjectIpAddresses` returns the IP addresses in a project categorized by services.
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Mongodbatlas.GetProjectIpAddresses.Invoke(new()
        ///     {
        ///         ProjectId = projectId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["projectServices"] = test.Apply(getProjectIpAddressesResult =&gt; getProjectIpAddressesResult.Services),
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetProjectIpAddressesResult> Invoke(GetProjectIpAddressesInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetProjectIpAddressesResult>("mongodbatlas:index/getProjectIpAddresses:getProjectIpAddresses", args ?? new GetProjectIpAddressesInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetProjectIpAddressesArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetProjectIpAddressesArgs()
        {
        }
        public static new GetProjectIpAddressesArgs Empty => new GetProjectIpAddressesArgs();
    }

    public sealed class GetProjectIpAddressesInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetProjectIpAddressesInvokeArgs()
        {
        }
        public static new GetProjectIpAddressesInvokeArgs Empty => new GetProjectIpAddressesInvokeArgs();
    }


    [OutputType]
    public sealed class GetProjectIpAddressesResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// List of IP addresses in a project categorized by services.
        /// </summary>
        public readonly Outputs.GetProjectIpAddressesServicesResult Services;

        [OutputConstructor]
        private GetProjectIpAddressesResult(
            string id,

            string projectId,

            Outputs.GetProjectIpAddressesServicesResult services)
        {
            Id = id;
            ProjectId = projectId;
            Services = services;
        }
    }
}
