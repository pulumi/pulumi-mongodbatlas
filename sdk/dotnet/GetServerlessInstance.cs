// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetServerlessInstance
    {
        public static Task<GetServerlessInstanceResult> InvokeAsync(GetServerlessInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerlessInstanceResult>("mongodbatlas:index/getServerlessInstance:getServerlessInstance", args ?? new GetServerlessInstanceArgs(), options.WithDefaults());

        public static Output<GetServerlessInstanceResult> Invoke(GetServerlessInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerlessInstanceResult>("mongodbatlas:index/getServerlessInstance:getServerlessInstance", args ?? new GetServerlessInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerlessInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Flag that indicates whether the serverless instance uses Serverless Continuous Backup.
        /// </summary>
        [Input("continuousBackupEnabled")]
        public bool? ContinuousBackupEnabled { get; set; }

        [Input("links")]
        private List<Inputs.GetServerlessInstanceLinkArgs>? _links;
        public List<Inputs.GetServerlessInstanceLinkArgs> Links
        {
            get => _links ?? (_links = new List<Inputs.GetServerlessInstanceLinkArgs>());
            set => _links = value;
        }

        /// <summary>
        /// Human-readable label that identifies your serverless instance.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the project that contains your serverless instance.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// Stage of deployment of this serverless instance when the resource made its request.
        /// </summary>
        [Input("stateName")]
        public string? StateName { get; set; }

        public GetServerlessInstanceArgs()
        {
        }
        public static new GetServerlessInstanceArgs Empty => new GetServerlessInstanceArgs();
    }

    public sealed class GetServerlessInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Flag that indicates whether the serverless instance uses Serverless Continuous Backup.
        /// </summary>
        [Input("continuousBackupEnabled")]
        public Input<bool>? ContinuousBackupEnabled { get; set; }

        [Input("links")]
        private InputList<Inputs.GetServerlessInstanceLinkInputArgs>? _links;
        public InputList<Inputs.GetServerlessInstanceLinkInputArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.GetServerlessInstanceLinkInputArgs>());
            set => _links = value;
        }

        /// <summary>
        /// Human-readable label that identifies your serverless instance.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the project that contains your serverless instance.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Stage of deployment of this serverless instance when the resource made its request.
        /// </summary>
        [Input("stateName")]
        public Input<string>? StateName { get; set; }

        public GetServerlessInstanceInvokeArgs()
        {
        }
        public static new GetServerlessInstanceInvokeArgs Empty => new GetServerlessInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerlessInstanceResult
    {
        /// <summary>
        /// List of Serverless Private Endpoint Connections
        /// </summary>
        public readonly ImmutableArray<string> ConnectionStringsPrivateEndpointSrvs;
        /// <summary>
        /// Public `mongodb+srv://` connection string that you can use to connect to this serverless instance.
        /// </summary>
        public readonly string ConnectionStringsStandardSrv;
        /// <summary>
        /// Flag that indicates whether the serverless instance uses Serverless Continuous Backup.
        /// </summary>
        public readonly bool ContinuousBackupEnabled;
        public readonly string CreateDate;
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the serverless instance.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetServerlessInstanceLinkResult> Links;
        /// <summary>
        /// Version of MongoDB that the serverless instance runs, in `&lt;major version&gt;`.`&lt;minor version&gt;` format.
        /// </summary>
        public readonly string MongoDbVersion;
        public readonly string Name;
        public readonly string ProjectId;
        /// <summary>
        /// Cloud service provider on which MongoDB Cloud provisioned the serverless instance.
        /// </summary>
        public readonly string ProviderSettingsBackingProviderName;
        /// <summary>
        /// Cloud service provider that applies to the provisioned the serverless instance.
        /// </summary>
        public readonly string ProviderSettingsProviderName;
        /// <summary>
        /// Human-readable label that identifies the physical location of your MongoDB serverless instance. The region you choose can affect network latency for clients accessing your databases.
        /// </summary>
        public readonly string ProviderSettingsRegionName;
        /// <summary>
        /// Stage of deployment of this serverless instance when the resource made its request.
        /// </summary>
        public readonly string StateName;
        /// <summary>
        /// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
        /// </summary>
        public readonly bool TerminationProtectionEnabled;

        [OutputConstructor]
        private GetServerlessInstanceResult(
            ImmutableArray<string> connectionStringsPrivateEndpointSrvs,

            string connectionStringsStandardSrv,

            bool continuousBackupEnabled,

            string createDate,

            string id,

            ImmutableArray<Outputs.GetServerlessInstanceLinkResult> links,

            string mongoDbVersion,

            string name,

            string projectId,

            string providerSettingsBackingProviderName,

            string providerSettingsProviderName,

            string providerSettingsRegionName,

            string stateName,

            bool terminationProtectionEnabled)
        {
            ConnectionStringsPrivateEndpointSrvs = connectionStringsPrivateEndpointSrvs;
            ConnectionStringsStandardSrv = connectionStringsStandardSrv;
            ContinuousBackupEnabled = continuousBackupEnabled;
            CreateDate = createDate;
            Id = id;
            Links = links;
            MongoDbVersion = mongoDbVersion;
            Name = name;
            ProjectId = projectId;
            ProviderSettingsBackingProviderName = providerSettingsBackingProviderName;
            ProviderSettingsProviderName = providerSettingsProviderName;
            ProviderSettingsRegionName = providerSettingsRegionName;
            StateName = stateName;
            TerminationProtectionEnabled = terminationProtectionEnabled;
        }
    }
}
