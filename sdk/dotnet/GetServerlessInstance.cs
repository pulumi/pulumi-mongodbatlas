// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetServerlessInstance
    {
        /// <summary>
        /// # Data Source: mongodbatlas.ServerlessInstance
        /// 
        /// `mongodbatlas.ServerlessInstance` describes a single serverless instance. This represents a single serverless instance that have been created.
        /// &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
        /// &gt; For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTwo = Mongodbatlas.GetServerlessInstance.Invoke(new()
        ///     {
        ///         Name = "&lt;SERVERLESS_INSTANCE_NAME&gt;",
        ///         ProjectId = "&lt;PROJECT_ID &gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// **NOTE:**  `mongodbatlas.ServerlessInstance` and `mongodbatlas.PrivatelinkEndpointServiceServerless` resources have a circular dependency in some respects.That is, the `serverless_instance` must exist before the `privatelink_endpoint_service` can be created,and the `privatelink_endpoint_service` must exist before the `serverless_instance` gets its respective `connection_strings_private_endpoint_srv` values.
        /// 
        /// Because of this, the `serverless_instance` data source has particular value as a source of the `connection_strings_private_endpoint_srv`.When using the data_source in-tandem with the afforementioned resources, we can create and retrieve the `connection_strings_private_endpoint_srv` in a single `pulumi up`.
        /// 
        /// Follow this example to setup private connection to a serverless instance using aws vpc and get the connection strings in a single `pulumi up`
        /// </summary>
        public static Task<GetServerlessInstanceResult> InvokeAsync(GetServerlessInstanceArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetServerlessInstanceResult>("mongodbatlas:index/getServerlessInstance:getServerlessInstance", args ?? new GetServerlessInstanceArgs(), options.WithDefaults());

        /// <summary>
        /// # Data Source: mongodbatlas.ServerlessInstance
        /// 
        /// `mongodbatlas.ServerlessInstance` describes a single serverless instance. This represents a single serverless instance that have been created.
        /// &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
        /// &gt; For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// 
        /// ## Example Usage
        /// 
        /// ### Basic
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var testTwo = Mongodbatlas.GetServerlessInstance.Invoke(new()
        ///     {
        ///         Name = "&lt;SERVERLESS_INSTANCE_NAME&gt;",
        ///         ProjectId = "&lt;PROJECT_ID &gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// 
        /// **NOTE:**  `mongodbatlas.ServerlessInstance` and `mongodbatlas.PrivatelinkEndpointServiceServerless` resources have a circular dependency in some respects.That is, the `serverless_instance` must exist before the `privatelink_endpoint_service` can be created,and the `privatelink_endpoint_service` must exist before the `serverless_instance` gets its respective `connection_strings_private_endpoint_srv` values.
        /// 
        /// Because of this, the `serverless_instance` data source has particular value as a source of the `connection_strings_private_endpoint_srv`.When using the data_source in-tandem with the afforementioned resources, we can create and retrieve the `connection_strings_private_endpoint_srv` in a single `pulumi up`.
        /// 
        /// Follow this example to setup private connection to a serverless instance using aws vpc and get the connection strings in a single `pulumi up`
        /// </summary>
        public static Output<GetServerlessInstanceResult> Invoke(GetServerlessInstanceInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetServerlessInstanceResult>("mongodbatlas:index/getServerlessInstance:getServerlessInstance", args ?? new GetServerlessInstanceInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetServerlessInstanceArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Flag that indicates whether the serverless instance uses [Serverless Auto Indexing](https://www.mongodb.com/docs/atlas/performance-advisor/auto-index-serverless/).
        /// </summary>
        [Input("autoIndexing")]
        public bool? AutoIndexing { get; set; }

        /// <summary>
        /// Flag that indicates whether the serverless instance uses Serverless Continuous Backup.
        /// </summary>
        [Input("continuousBackupEnabled")]
        public bool? ContinuousBackupEnabled { get; set; }

        [Input("links")]
        private List<Inputs.GetServerlessInstanceLinkArgs>? _links;
        public List<Inputs.GetServerlessInstanceLinkArgs> Links
        {
            get => _links ?? (_links = new List<Inputs.GetServerlessInstanceLinkArgs>());
            set => _links = value;
        }

        /// <summary>
        /// Human-readable label that identifies your serverless instance.
        /// </summary>
        [Input("name", required: true)]
        public string Name { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the project that contains your serverless instance.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// Stage of deployment of this serverless instance when the resource made its request.
        /// </summary>
        [Input("stateName")]
        public string? StateName { get; set; }

        public GetServerlessInstanceArgs()
        {
        }
        public static new GetServerlessInstanceArgs Empty => new GetServerlessInstanceArgs();
    }

    public sealed class GetServerlessInstanceInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Flag that indicates whether the serverless instance uses [Serverless Auto Indexing](https://www.mongodb.com/docs/atlas/performance-advisor/auto-index-serverless/).
        /// </summary>
        [Input("autoIndexing")]
        public Input<bool>? AutoIndexing { get; set; }

        /// <summary>
        /// Flag that indicates whether the serverless instance uses Serverless Continuous Backup.
        /// </summary>
        [Input("continuousBackupEnabled")]
        public Input<bool>? ContinuousBackupEnabled { get; set; }

        [Input("links")]
        private InputList<Inputs.GetServerlessInstanceLinkInputArgs>? _links;
        public InputList<Inputs.GetServerlessInstanceLinkInputArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.GetServerlessInstanceLinkInputArgs>());
            set => _links = value;
        }

        /// <summary>
        /// Human-readable label that identifies your serverless instance.
        /// </summary>
        [Input("name", required: true)]
        public Input<string> Name { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the project that contains your serverless instance.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Stage of deployment of this serverless instance when the resource made its request.
        /// </summary>
        [Input("stateName")]
        public Input<string>? StateName { get; set; }

        public GetServerlessInstanceInvokeArgs()
        {
        }
        public static new GetServerlessInstanceInvokeArgs Empty => new GetServerlessInstanceInvokeArgs();
    }


    [OutputType]
    public sealed class GetServerlessInstanceResult
    {
        /// <summary>
        /// Flag that indicates whether the serverless instance uses [Serverless Auto Indexing](https://www.mongodb.com/docs/atlas/performance-advisor/auto-index-serverless/).
        /// </summary>
        public readonly bool AutoIndexing;
        /// <summary>
        /// List of Serverless Private Endpoint Connections
        /// </summary>
        public readonly ImmutableArray<string> ConnectionStringsPrivateEndpointSrvs;
        /// <summary>
        /// Public `mongodb+srv://` connection string that you can use to connect to this serverless instance.
        /// </summary>
        public readonly string ConnectionStringsStandardSrv;
        /// <summary>
        /// Flag that indicates whether the serverless instance uses Serverless Continuous Backup.
        /// </summary>
        public readonly bool ContinuousBackupEnabled;
        public readonly string CreateDate;
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the serverless instance.
        /// </summary>
        public readonly string Id;
        public readonly ImmutableArray<Outputs.GetServerlessInstanceLinkResult> Links;
        /// <summary>
        /// Version of MongoDB that the serverless instance runs, in `&lt;major version&gt;`.`&lt;minor version&gt;` format.
        /// </summary>
        public readonly string MongoDbVersion;
        public readonly string Name;
        public readonly string ProjectId;
        /// <summary>
        /// Cloud service provider on which MongoDB Cloud provisioned the serverless instance.
        /// </summary>
        public readonly string ProviderSettingsBackingProviderName;
        /// <summary>
        /// Cloud service provider that applies to the provisioned the serverless instance.
        /// </summary>
        public readonly string ProviderSettingsProviderName;
        /// <summary>
        /// Human-readable label that identifies the physical location of your MongoDB serverless instance. The region you choose can affect network latency for clients accessing your databases.
        /// </summary>
        public readonly string ProviderSettingsRegionName;
        /// <summary>
        /// Stage of deployment of this serverless instance when the resource made its request.
        /// </summary>
        public readonly string StateName;
        /// <summary>
        /// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetServerlessInstanceTagResult> Tags;
        /// <summary>
        /// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
        /// </summary>
        public readonly bool TerminationProtectionEnabled;

        [OutputConstructor]
        private GetServerlessInstanceResult(
            bool autoIndexing,

            ImmutableArray<string> connectionStringsPrivateEndpointSrvs,

            string connectionStringsStandardSrv,

            bool continuousBackupEnabled,

            string createDate,

            string id,

            ImmutableArray<Outputs.GetServerlessInstanceLinkResult> links,

            string mongoDbVersion,

            string name,

            string projectId,

            string providerSettingsBackingProviderName,

            string providerSettingsProviderName,

            string providerSettingsRegionName,

            string stateName,

            ImmutableArray<Outputs.GetServerlessInstanceTagResult> tags,

            bool terminationProtectionEnabled)
        {
            AutoIndexing = autoIndexing;
            ConnectionStringsPrivateEndpointSrvs = connectionStringsPrivateEndpointSrvs;
            ConnectionStringsStandardSrv = connectionStringsStandardSrv;
            ContinuousBackupEnabled = continuousBackupEnabled;
            CreateDate = createDate;
            Id = id;
            Links = links;
            MongoDbVersion = mongoDbVersion;
            Name = name;
            ProjectId = projectId;
            ProviderSettingsBackingProviderName = providerSettingsBackingProviderName;
            ProviderSettingsProviderName = providerSettingsProviderName;
            ProviderSettingsRegionName = providerSettingsRegionName;
            StateName = stateName;
            Tags = tags;
            TerminationProtectionEnabled = terminationProtectionEnabled;
        }
    }
}
