// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// The provider type for the mongodbatlas package. By default, resources use package-wide configuration
    /// settings, however an explicit `Provider` instance may be created and passed during resource
    /// construction to achieve fine-grained programmatic control over provider settings. See the
    /// [documentation](https://www.pulumi.com/docs/reference/programming-model/#providers) for more information.
    /// </summary>
    [MongodbatlasResourceType("pulumi:providers:mongodbatlas")]
    public partial class Provider : global::Pulumi.ProviderResource
    {
        /// <summary>
        /// AWS API Access Key.
        /// </summary>
        [Output("awsAccessKeyId")]
        public Output<string?> AwsAccessKeyId { get; private set; } = null!;

        /// <summary>
        /// AWS API Access Secret Key.
        /// </summary>
        [Output("awsSecretAccessKey")]
        public Output<string?> AwsSecretAccessKey { get; private set; } = null!;

        /// <summary>
        /// AWS Security Token Service provided session token.
        /// </summary>
        [Output("awsSessionToken")]
        public Output<string?> AwsSessionToken { get; private set; } = null!;

        /// <summary>
        /// MongoDB Atlas Base URL
        /// </summary>
        [Output("baseUrl")]
        public Output<string?> BaseUrl { get; private set; } = null!;

        /// <summary>
        /// MongoDB Atlas Programmatic Private Key
        /// </summary>
        [Output("privateKey")]
        public Output<string?> PrivateKey { get; private set; } = null!;

        /// <summary>
        /// MongoDB Atlas Programmatic Public Key
        /// </summary>
        [Output("publicKey")]
        public Output<string?> PublicKey { get; private set; } = null!;

        /// <summary>
        /// MongoDB Realm Base URL
        /// </summary>
        [Output("realmBaseUrl")]
        public Output<string?> RealmBaseUrl { get; private set; } = null!;

        /// <summary>
        /// Region where secret is stored as part of AWS Secret Manager.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// Name of secret stored in AWS Secret Manager.
        /// </summary>
        [Output("secretName")]
        public Output<string?> SecretName { get; private set; } = null!;

        /// <summary>
        /// AWS Security Token Service endpoint. Required for cross-AWS region or cross-AWS account secrets.
        /// </summary>
        [Output("stsEndpoint")]
        public Output<string?> StsEndpoint { get; private set; } = null!;


        /// <summary>
        /// Create a Provider resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public Provider(string name, ProviderArgs? args = null, CustomResourceOptions? options = null)
            : base("mongodbatlas", name, args ?? new ProviderArgs(), MakeResourceOptions(options, ""))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
                AdditionalSecretOutputs =
                {
                    "privateKey",
                },
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }

        /// <summary>
        /// This function returns a Terraform config object with terraform-namecased keys,to be used with the Terraform Module Provider.
        /// </summary>
        public global::Pulumi.Output<ProviderTerraformConfigResult> TerraformConfig()
            => global::Pulumi.Deployment.Instance.Call<ProviderTerraformConfigResult>("pulumi:providers:mongodbatlas/terraformConfig", CallArgs.Empty, this);
    }

    public sealed class ProviderArgs : global::Pulumi.ResourceArgs
    {
        [Input("assumeRole", json: true)]
        public Input<Inputs.ProviderAssumeRoleArgs>? AssumeRole { get; set; }

        /// <summary>
        /// AWS API Access Key.
        /// </summary>
        [Input("awsAccessKeyId")]
        public Input<string>? AwsAccessKeyId { get; set; }

        /// <summary>
        /// AWS API Access Secret Key.
        /// </summary>
        [Input("awsSecretAccessKey")]
        public Input<string>? AwsSecretAccessKey { get; set; }

        /// <summary>
        /// AWS Security Token Service provided session token.
        /// </summary>
        [Input("awsSessionToken")]
        public Input<string>? AwsSessionToken { get; set; }

        /// <summary>
        /// MongoDB Atlas Base URL
        /// </summary>
        [Input("baseUrl")]
        public Input<string>? BaseUrl { get; set; }

        /// <summary>
        /// MongoDB Atlas Base URL default to gov
        /// </summary>
        [Input("isMongodbgovCloud", json: true)]
        public Input<bool>? IsMongodbgovCloud { get; set; }

        [Input("privateKey")]
        private Input<string>? _privateKey;

        /// <summary>
        /// MongoDB Atlas Programmatic Private Key
        /// </summary>
        public Input<string>? PrivateKey
        {
            get => _privateKey;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _privateKey = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// MongoDB Atlas Programmatic Public Key
        /// </summary>
        [Input("publicKey")]
        public Input<string>? PublicKey { get; set; }

        /// <summary>
        /// MongoDB Realm Base URL
        /// </summary>
        [Input("realmBaseUrl")]
        public Input<string>? RealmBaseUrl { get; set; }

        /// <summary>
        /// Region where secret is stored as part of AWS Secret Manager.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Name of secret stored in AWS Secret Manager.
        /// </summary>
        [Input("secretName")]
        public Input<string>? SecretName { get; set; }

        /// <summary>
        /// AWS Security Token Service endpoint. Required for cross-AWS region or cross-AWS account secrets.
        /// </summary>
        [Input("stsEndpoint")]
        public Input<string>? StsEndpoint { get; set; }

        public ProviderArgs()
        {
        }
        public static new ProviderArgs Empty => new ProviderArgs();
    }

    /// <summary>
    /// The results of the <see cref="Provider.TerraformConfig"/> method.
    /// </summary>
    [OutputType]
    public sealed class ProviderTerraformConfigResult
    {
        public readonly ImmutableDictionary<string, object> Result;

        [OutputConstructor]
        private ProviderTerraformConfigResult(ImmutableDictionary<string, object> result)
        {
            Result = result;
        }
    }
}
