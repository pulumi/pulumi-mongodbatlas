// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// ## # Resource: mongodbatlas.StreamPrivatelinkEndpoint
    /// 
    /// `mongodbatlas.StreamPrivatelinkEndpoint` describes a Privatelink Endpoint for Streams.
    /// 
    /// ## Example Usage
    /// </summary>
    [MongodbatlasResourceType("mongodbatlas:index/streamPrivatelinkEndpoint:StreamPrivatelinkEndpoint")]
    public partial class StreamPrivatelinkEndpoint : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Domain name of Privatelink connected cluster.
        /// </summary>
        [Output("dnsDomain")]
        public Output<string?> DnsDomain { get; private set; } = null!;

        /// <summary>
        /// Sub-Domain name of Confluent cluster. These are typically your availability zones.
        /// </summary>
        [Output("dnsSubDomains")]
        public Output<ImmutableArray<string>> DnsSubDomains { get; private set; } = null!;

        /// <summary>
        /// Interface endpoint ID that is created from the specified service endpoint ID.
        /// </summary>
        [Output("interfaceEndpointId")]
        public Output<string> InterfaceEndpointId { get; private set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Provider where the Kafka cluster is deployed.
        /// </summary>
        [Output("providerName")]
        public Output<string> ProviderName { get; private set; } = null!;

        /// <summary>
        /// Domain name of Confluent cluster.
        /// </summary>
        [Output("region")]
        public Output<string?> Region { get; private set; } = null!;

        /// <summary>
        /// Service Endpoint ID.
        /// </summary>
        [Output("serviceEndpointId")]
        public Output<string?> ServiceEndpointId { get; private set; } = null!;

        /// <summary>
        /// Status of the connection.
        /// </summary>
        [Output("state")]
        public Output<string> State { get; private set; } = null!;

        /// <summary>
        /// Vendor who manages the Kafka cluster.
        /// </summary>
        [Output("vendor")]
        public Output<string> Vendor { get; private set; } = null!;


        /// <summary>
        /// Create a StreamPrivatelinkEndpoint resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public StreamPrivatelinkEndpoint(string name, StreamPrivatelinkEndpointArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/streamPrivatelinkEndpoint:StreamPrivatelinkEndpoint", name, args ?? new StreamPrivatelinkEndpointArgs(), MakeResourceOptions(options, ""))
        {
        }

        private StreamPrivatelinkEndpoint(string name, Input<string> id, StreamPrivatelinkEndpointState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/streamPrivatelinkEndpoint:StreamPrivatelinkEndpoint", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing StreamPrivatelinkEndpoint resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static StreamPrivatelinkEndpoint Get(string name, Input<string> id, StreamPrivatelinkEndpointState? state = null, CustomResourceOptions? options = null)
        {
            return new StreamPrivatelinkEndpoint(name, id, state, options);
        }
    }

    public sealed class StreamPrivatelinkEndpointArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Domain name of Privatelink connected cluster.
        /// </summary>
        [Input("dnsDomain")]
        public Input<string>? DnsDomain { get; set; }

        [Input("dnsSubDomains")]
        private InputList<string>? _dnsSubDomains;

        /// <summary>
        /// Sub-Domain name of Confluent cluster. These are typically your availability zones.
        /// </summary>
        public InputList<string> DnsSubDomains
        {
            get => _dnsSubDomains ?? (_dnsSubDomains = new InputList<string>());
            set => _dnsSubDomains = value;
        }

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Provider where the Kafka cluster is deployed.
        /// </summary>
        [Input("providerName", required: true)]
        public Input<string> ProviderName { get; set; } = null!;

        /// <summary>
        /// Domain name of Confluent cluster.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Service Endpoint ID.
        /// </summary>
        [Input("serviceEndpointId")]
        public Input<string>? ServiceEndpointId { get; set; }

        /// <summary>
        /// Vendor who manages the Kafka cluster.
        /// </summary>
        [Input("vendor", required: true)]
        public Input<string> Vendor { get; set; } = null!;

        public StreamPrivatelinkEndpointArgs()
        {
        }
        public static new StreamPrivatelinkEndpointArgs Empty => new StreamPrivatelinkEndpointArgs();
    }

    public sealed class StreamPrivatelinkEndpointState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Domain name of Privatelink connected cluster.
        /// </summary>
        [Input("dnsDomain")]
        public Input<string>? DnsDomain { get; set; }

        [Input("dnsSubDomains")]
        private InputList<string>? _dnsSubDomains;

        /// <summary>
        /// Sub-Domain name of Confluent cluster. These are typically your availability zones.
        /// </summary>
        public InputList<string> DnsSubDomains
        {
            get => _dnsSubDomains ?? (_dnsSubDomains = new InputList<string>());
            set => _dnsSubDomains = value;
        }

        /// <summary>
        /// Interface endpoint ID that is created from the specified service endpoint ID.
        /// </summary>
        [Input("interfaceEndpointId")]
        public Input<string>? InterfaceEndpointId { get; set; }

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Provider where the Kafka cluster is deployed.
        /// </summary>
        [Input("providerName")]
        public Input<string>? ProviderName { get; set; }

        /// <summary>
        /// Domain name of Confluent cluster.
        /// </summary>
        [Input("region")]
        public Input<string>? Region { get; set; }

        /// <summary>
        /// Service Endpoint ID.
        /// </summary>
        [Input("serviceEndpointId")]
        public Input<string>? ServiceEndpointId { get; set; }

        /// <summary>
        /// Status of the connection.
        /// </summary>
        [Input("state")]
        public Input<string>? State { get; set; }

        /// <summary>
        /// Vendor who manages the Kafka cluster.
        /// </summary>
        [Input("vendor")]
        public Input<string>? Vendor { get; set; }

        public StreamPrivatelinkEndpointState()
        {
        }
        public static new StreamPrivatelinkEndpointState Empty => new StreamPrivatelinkEndpointState();
    }
}
