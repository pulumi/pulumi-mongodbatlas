// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// ## Import
    /// 
    /// The Cloud Provider Access resource can be imported using project ID and the provider name and mongodbatlas role id, in the format `project_id`-`provider_name`-`role_id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import mongodbatlas:index/cloudProviderAccessSetup:CloudProviderAccessSetup my_role 1112222b3bf99403840e8934-AWS-5fc17d476f7a33224f5b224e
    /// ```
    /// </summary>
    [MongodbatlasResourceType("mongodbatlas:index/cloudProviderAccessSetup:CloudProviderAccessSetup")]
    public partial class CloudProviderAccessSetup : Pulumi.CustomResource
    {
        /// <summary>
        /// aws related arn roles
        /// </summary>
        [Output("aws")]
        public Output<ImmutableDictionary<string, string>> Aws { get; private set; } = null!;

        [Output("awsConfigs")]
        public Output<ImmutableArray<Outputs.CloudProviderAccessSetupAwsConfig>> AwsConfigs { get; private set; } = null!;

        /// <summary>
        /// Date on which this role was created.
        /// </summary>
        [Output("createdDate")]
        public Output<string> CreatedDate { get; private set; } = null!;

        /// <summary>
        /// The unique ID for the project
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The cloud provider for which to create a new role. Currently only AWS is supported.
        /// </summary>
        [Output("providerName")]
        public Output<string> ProviderName { get; private set; } = null!;

        /// <summary>
        /// Unique ID of this role returned by mongodb atlas api
        /// </summary>
        [Output("roleId")]
        public Output<string> RoleId { get; private set; } = null!;


        /// <summary>
        /// Create a CloudProviderAccessSetup resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudProviderAccessSetup(string name, CloudProviderAccessSetupArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/cloudProviderAccessSetup:CloudProviderAccessSetup", name, args ?? new CloudProviderAccessSetupArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudProviderAccessSetup(string name, Input<string> id, CloudProviderAccessSetupState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/cloudProviderAccessSetup:CloudProviderAccessSetup", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudProviderAccessSetup resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudProviderAccessSetup Get(string name, Input<string> id, CloudProviderAccessSetupState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudProviderAccessSetup(name, id, state, options);
        }
    }

    public sealed class CloudProviderAccessSetupArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// The unique ID for the project
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// The cloud provider for which to create a new role. Currently only AWS is supported.
        /// </summary>
        [Input("providerName", required: true)]
        public Input<string> ProviderName { get; set; } = null!;

        public CloudProviderAccessSetupArgs()
        {
        }
    }

    public sealed class CloudProviderAccessSetupState : Pulumi.ResourceArgs
    {
        [Input("aws")]
        private InputMap<string>? _aws;

        /// <summary>
        /// aws related arn roles
        /// </summary>
        [Obsolete(@"use aws_config instead")]
        public InputMap<string> Aws
        {
            get => _aws ?? (_aws = new InputMap<string>());
            set => _aws = value;
        }

        [Input("awsConfigs")]
        private InputList<Inputs.CloudProviderAccessSetupAwsConfigGetArgs>? _awsConfigs;
        public InputList<Inputs.CloudProviderAccessSetupAwsConfigGetArgs> AwsConfigs
        {
            get => _awsConfigs ?? (_awsConfigs = new InputList<Inputs.CloudProviderAccessSetupAwsConfigGetArgs>());
            set => _awsConfigs = value;
        }

        /// <summary>
        /// Date on which this role was created.
        /// </summary>
        [Input("createdDate")]
        public Input<string>? CreatedDate { get; set; }

        /// <summary>
        /// The unique ID for the project
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The cloud provider for which to create a new role. Currently only AWS is supported.
        /// </summary>
        [Input("providerName")]
        public Input<string>? ProviderName { get; set; }

        /// <summary>
        /// Unique ID of this role returned by mongodb atlas api
        /// </summary>
        [Input("roleId")]
        public Input<string>? RoleId { get; set; }

        public CloudProviderAccessSetupState()
        {
        }
    }
}
