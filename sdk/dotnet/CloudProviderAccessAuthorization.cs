// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// ## Import
    /// 
    /// The Cloud Provider Access resource can be imported using project ID and the provider name and mongodbatlas role id, in the format `project_id`-`provider_name`-`role_id`, e.g.
    /// 
    /// ```sh
    ///  $ pulumi import mongodbatlas:index/cloudProviderAccessAuthorization:CloudProviderAccessAuthorization my_role 1112222b3bf99403840e8934-AWS-5fc17d476f7a33224f5b224e
    /// ```
    /// </summary>
    [MongodbatlasResourceType("mongodbatlas:index/cloudProviderAccessAuthorization:CloudProviderAccessAuthorization")]
    public partial class CloudProviderAccessAuthorization : Pulumi.CustomResource
    {
        /// <summary>
        /// Date on which this role was authorized.
        /// </summary>
        [Output("authorizedDate")]
        public Output<string> AuthorizedDate { get; private set; } = null!;

        /// <summary>
        /// aws related arn roles
        /// </summary>
        [Output("aws")]
        public Output<Outputs.CloudProviderAccessAuthorizationAws?> Aws { get; private set; } = null!;

        /// <summary>
        /// Atlas features this AWS IAM role is linked to.
        /// </summary>
        [Output("featureUsages")]
        public Output<ImmutableArray<Outputs.CloudProviderAccessAuthorizationFeatureUsage>> FeatureUsages { get; private set; } = null!;

        /// <summary>
        /// The unique ID for the project
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Unique ID of this role returned by mongodb atlas api
        /// </summary>
        [Output("roleId")]
        public Output<string> RoleId { get; private set; } = null!;


        /// <summary>
        /// Create a CloudProviderAccessAuthorization resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CloudProviderAccessAuthorization(string name, CloudProviderAccessAuthorizationArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/cloudProviderAccessAuthorization:CloudProviderAccessAuthorization", name, args ?? new CloudProviderAccessAuthorizationArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CloudProviderAccessAuthorization(string name, Input<string> id, CloudProviderAccessAuthorizationState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/cloudProviderAccessAuthorization:CloudProviderAccessAuthorization", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CloudProviderAccessAuthorization resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CloudProviderAccessAuthorization Get(string name, Input<string> id, CloudProviderAccessAuthorizationState? state = null, CustomResourceOptions? options = null)
        {
            return new CloudProviderAccessAuthorization(name, id, state, options);
        }
    }

    public sealed class CloudProviderAccessAuthorizationArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// aws related arn roles
        /// </summary>
        [Input("aws")]
        public Input<Inputs.CloudProviderAccessAuthorizationAwsArgs>? Aws { get; set; }

        /// <summary>
        /// The unique ID for the project
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Unique ID of this role returned by mongodb atlas api
        /// </summary>
        [Input("roleId", required: true)]
        public Input<string> RoleId { get; set; } = null!;

        public CloudProviderAccessAuthorizationArgs()
        {
        }
    }

    public sealed class CloudProviderAccessAuthorizationState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Date on which this role was authorized.
        /// </summary>
        [Input("authorizedDate")]
        public Input<string>? AuthorizedDate { get; set; }

        /// <summary>
        /// aws related arn roles
        /// </summary>
        [Input("aws")]
        public Input<Inputs.CloudProviderAccessAuthorizationAwsGetArgs>? Aws { get; set; }

        [Input("featureUsages")]
        private InputList<Inputs.CloudProviderAccessAuthorizationFeatureUsageGetArgs>? _featureUsages;

        /// <summary>
        /// Atlas features this AWS IAM role is linked to.
        /// </summary>
        public InputList<Inputs.CloudProviderAccessAuthorizationFeatureUsageGetArgs> FeatureUsages
        {
            get => _featureUsages ?? (_featureUsages = new InputList<Inputs.CloudProviderAccessAuthorizationFeatureUsageGetArgs>());
            set => _featureUsages = value;
        }

        /// <summary>
        /// The unique ID for the project
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Unique ID of this role returned by mongodb atlas api
        /// </summary>
        [Input("roleId")]
        public Input<string>? RoleId { get; set; }

        public CloudProviderAccessAuthorizationState()
        {
        }
    }
}
