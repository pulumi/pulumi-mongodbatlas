// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas.Outputs
{

    [OutputType]
    public sealed class GetAlertConfigurationsResultResult
    {
        /// <summary>
        /// The ID of the alert configuration
        /// </summary>
        public readonly string AlertConfigurationId;
        /// <summary>
        /// Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
        /// </summary>
        public readonly string Created;
        /// <summary>
        /// If set to true, the alert configuration is enabled. If enabled is not exported it is set to false.
        /// </summary>
        public readonly bool Enabled;
        /// <summary>
        /// The type of event that will trigger an alert.
        /// </summary>
        public readonly string EventType;
        /// <summary>
        /// Rules to apply when matching an object against this alert configuration
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertConfigurationsResultMatcherResult> Matchers;
        public readonly ImmutableDictionary<string, string> MetricThreshold;
        /// <summary>
        /// The threshold that causes an alert to be triggered. Required if `event_type_name` : `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertConfigurationsResultMetricThresholdConfigResult> MetricThresholdConfigs;
        public readonly ImmutableArray<Outputs.GetAlertConfigurationsResultNotificationResult> Notifications;
        /// <summary>
        /// Requested output string format for the alert configuration
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertConfigurationsResultOutputResult> Outputs;
        /// <summary>
        /// The unique ID for the project to get the alert configurations.
        /// </summary>
        public readonly string ProjectId;
        public readonly ImmutableDictionary<string, string> Threshold;
        /// <summary>
        /// Threshold that triggers an alert. Required if `event_type_name` is any value other than `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetAlertConfigurationsResultThresholdConfigResult> ThresholdConfigs;
        /// <summary>
        /// Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
        /// </summary>
        public readonly string Updated;

        [OutputConstructor]
        private GetAlertConfigurationsResultResult(
            string alertConfigurationId,

            string created,

            bool enabled,

            string eventType,

            ImmutableArray<Outputs.GetAlertConfigurationsResultMatcherResult> matchers,

            ImmutableDictionary<string, string> metricThreshold,

            ImmutableArray<Outputs.GetAlertConfigurationsResultMetricThresholdConfigResult> metricThresholdConfigs,

            ImmutableArray<Outputs.GetAlertConfigurationsResultNotificationResult> notifications,

            ImmutableArray<Outputs.GetAlertConfigurationsResultOutputResult> outputs,

            string projectId,

            ImmutableDictionary<string, string> threshold,

            ImmutableArray<Outputs.GetAlertConfigurationsResultThresholdConfigResult> thresholdConfigs,

            string updated)
        {
            AlertConfigurationId = alertConfigurationId;
            Created = created;
            Enabled = enabled;
            EventType = eventType;
            Matchers = matchers;
            MetricThreshold = metricThreshold;
            MetricThresholdConfigs = metricThresholdConfigs;
            Notifications = notifications;
            Outputs = outputs;
            ProjectId = projectId;
            Threshold = threshold;
            ThresholdConfigs = thresholdConfigs;
            Updated = updated;
        }
    }
}
