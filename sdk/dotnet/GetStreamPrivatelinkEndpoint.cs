// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetStreamPrivatelinkEndpoint
    {
        /// <summary>
        /// ## # Data Source: mongodbatlas.StreamPrivatelinkEndpoint
        /// 
        /// `mongodbatlas.StreamPrivatelinkEndpoint` describes a Privatelink Endpoint for Streams.
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// 
        /// ### AWS S3 Privatelink
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // S3 bucket for stream data
        ///     var streamBucket = new Aws.Index.S3Bucket("stream_bucket", new()
        ///     {
        ///         Bucket = s3BucketName,
        ///         ForceDestroy = true,
        ///     });
        /// 
        ///     var streamBucketVersioning = new Aws.Index.S3BucketVersioning("stream_bucket_versioning", new()
        ///     {
        ///         Bucket = streamBucket.Id,
        ///         VersioningConfiguration = new[]
        ///         {
        ///             
        ///             {
        ///                 { "status", "Enabled" },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var streamBucketEncryption = new Aws.Index.S3BucketServerSideEncryptionConfiguration("stream_bucket_encryption", new()
        ///     {
        ///         Bucket = streamBucket.Id,
        ///         Rule = new[]
        ///         {
        ///             
        ///             {
        ///                 { "applyServerSideEncryptionByDefault", new[]
        ///                 {
        ///                     
        ///                     {
        ///                         { "sseAlgorithm", "AES256" },
        ///                     },
        ///                 } },
        ///             },
        ///         },
        ///     });
        /// 
        ///     // PrivateLink for S3
        ///     var @this = new Mongodbatlas.StreamPrivatelinkEndpoint("this", new()
        ///     {
        ///         ProjectId = projectId,
        ///         ProviderName = "AWS",
        ///         Vendor = "S3",
        ///         Region = region,
        ///         ServiceEndpointId = serviceEndpointId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["privatelinkEndpointId"] = @this.Id,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamPrivatelinkEndpointResult> InvokeAsync(GetStreamPrivatelinkEndpointArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamPrivatelinkEndpointResult>("mongodbatlas:index/getStreamPrivatelinkEndpoint:getStreamPrivatelinkEndpoint", args ?? new GetStreamPrivatelinkEndpointArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.StreamPrivatelinkEndpoint
        /// 
        /// `mongodbatlas.StreamPrivatelinkEndpoint` describes a Privatelink Endpoint for Streams.
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// 
        /// ### AWS S3 Privatelink
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // S3 bucket for stream data
        ///     var streamBucket = new Aws.Index.S3Bucket("stream_bucket", new()
        ///     {
        ///         Bucket = s3BucketName,
        ///         ForceDestroy = true,
        ///     });
        /// 
        ///     var streamBucketVersioning = new Aws.Index.S3BucketVersioning("stream_bucket_versioning", new()
        ///     {
        ///         Bucket = streamBucket.Id,
        ///         VersioningConfiguration = new[]
        ///         {
        ///             
        ///             {
        ///                 { "status", "Enabled" },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var streamBucketEncryption = new Aws.Index.S3BucketServerSideEncryptionConfiguration("stream_bucket_encryption", new()
        ///     {
        ///         Bucket = streamBucket.Id,
        ///         Rule = new[]
        ///         {
        ///             
        ///             {
        ///                 { "applyServerSideEncryptionByDefault", new[]
        ///                 {
        ///                     
        ///                     {
        ///                         { "sseAlgorithm", "AES256" },
        ///                     },
        ///                 } },
        ///             },
        ///         },
        ///     });
        /// 
        ///     // PrivateLink for S3
        ///     var @this = new Mongodbatlas.StreamPrivatelinkEndpoint("this", new()
        ///     {
        ///         ProjectId = projectId,
        ///         ProviderName = "AWS",
        ///         Vendor = "S3",
        ///         Region = region,
        ///         ServiceEndpointId = serviceEndpointId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["privatelinkEndpointId"] = @this.Id,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamPrivatelinkEndpointResult> Invoke(GetStreamPrivatelinkEndpointInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamPrivatelinkEndpointResult>("mongodbatlas:index/getStreamPrivatelinkEndpoint:getStreamPrivatelinkEndpoint", args ?? new GetStreamPrivatelinkEndpointInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.StreamPrivatelinkEndpoint
        /// 
        /// `mongodbatlas.StreamPrivatelinkEndpoint` describes a Privatelink Endpoint for Streams.
        /// 
        /// ## Example Usage
        /// 
        /// ### S
        /// 
        /// ### AWS S3 Privatelink
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Aws = Pulumi.Aws;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     // S3 bucket for stream data
        ///     var streamBucket = new Aws.Index.S3Bucket("stream_bucket", new()
        ///     {
        ///         Bucket = s3BucketName,
        ///         ForceDestroy = true,
        ///     });
        /// 
        ///     var streamBucketVersioning = new Aws.Index.S3BucketVersioning("stream_bucket_versioning", new()
        ///     {
        ///         Bucket = streamBucket.Id,
        ///         VersioningConfiguration = new[]
        ///         {
        ///             
        ///             {
        ///                 { "status", "Enabled" },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var streamBucketEncryption = new Aws.Index.S3BucketServerSideEncryptionConfiguration("stream_bucket_encryption", new()
        ///     {
        ///         Bucket = streamBucket.Id,
        ///         Rule = new[]
        ///         {
        ///             
        ///             {
        ///                 { "applyServerSideEncryptionByDefault", new[]
        ///                 {
        ///                     
        ///                     {
        ///                         { "sseAlgorithm", "AES256" },
        ///                     },
        ///                 } },
        ///             },
        ///         },
        ///     });
        /// 
        ///     // PrivateLink for S3
        ///     var @this = new Mongodbatlas.StreamPrivatelinkEndpoint("this", new()
        ///     {
        ///         ProjectId = projectId,
        ///         ProviderName = "AWS",
        ///         Vendor = "S3",
        ///         Region = region,
        ///         ServiceEndpointId = serviceEndpointId,
        ///     });
        /// 
        ///     return new Dictionary&lt;string, object?&gt;
        ///     {
        ///         ["privatelinkEndpointId"] = @this.Id,
        ///     };
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamPrivatelinkEndpointResult> Invoke(GetStreamPrivatelinkEndpointInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamPrivatelinkEndpointResult>("mongodbatlas:index/getStreamPrivatelinkEndpoint:getStreamPrivatelinkEndpoint", args ?? new GetStreamPrivatelinkEndpointInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamPrivatelinkEndpointArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public string Id { get; set; } = null!;

        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetStreamPrivatelinkEndpointArgs()
        {
        }
        public static new GetStreamPrivatelinkEndpointArgs Empty => new GetStreamPrivatelinkEndpointArgs();
    }

    public sealed class GetStreamPrivatelinkEndpointInvokeArgs : global::Pulumi.InvokeArgs
    {
        [Input("id", required: true)]
        public Input<string> Id { get; set; } = null!;

        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetStreamPrivatelinkEndpointInvokeArgs()
        {
        }
        public static new GetStreamPrivatelinkEndpointInvokeArgs Empty => new GetStreamPrivatelinkEndpointInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamPrivatelinkEndpointResult
    {
        public readonly string Arn;
        public readonly string DnsDomain;
        public readonly ImmutableArray<string> DnsSubDomains;
        public readonly string ErrorMessage;
        public readonly string Id;
        public readonly string InterfaceEndpointId;
        public readonly string InterfaceEndpointName;
        public readonly string ProjectId;
        public readonly string ProviderAccountId;
        public readonly string ProviderName;
        public readonly string Region;
        public readonly string ServiceEndpointId;
        public readonly string State;
        public readonly string Vendor;

        [OutputConstructor]
        private GetStreamPrivatelinkEndpointResult(
            string arn,

            string dnsDomain,

            ImmutableArray<string> dnsSubDomains,

            string errorMessage,

            string id,

            string interfaceEndpointId,

            string interfaceEndpointName,

            string projectId,

            string providerAccountId,

            string providerName,

            string region,

            string serviceEndpointId,

            string state,

            string vendor)
        {
            Arn = arn;
            DnsDomain = dnsDomain;
            DnsSubDomains = dnsSubDomains;
            ErrorMessage = errorMessage;
            Id = id;
            InterfaceEndpointId = interfaceEndpointId;
            InterfaceEndpointName = interfaceEndpointName;
            ProjectId = projectId;
            ProviderAccountId = providerAccountId;
            ProviderName = providerName;
            Region = region;
            ServiceEndpointId = serviceEndpointId;
            State = state;
            Vendor = vendor;
        }
    }
}
