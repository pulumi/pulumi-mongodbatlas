// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas.Inputs
{

    public sealed class EncryptionAtRestAzureKeyVaultConfigGetArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// The Azure environment where the Azure account credentials reside. Valid values are the following: AZURE, AZURE_CHINA, AZURE_GERMANY
        /// </summary>
        [Input("azureEnvironment")]
        public Input<string>? AzureEnvironment { get; set; }

        [Input("clientId")]
        private Input<string>? _clientId;

        /// <summary>
        /// The client ID, also known as the application ID, for an Azure application associated with the Azure AD tenant.
        /// </summary>
        public Input<string>? ClientId
        {
            get => _clientId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Specifies whether Encryption at Rest is enabled for an Atlas project. To disable Encryption at Rest, pass only this parameter with a value of false. When you disable Encryption at Rest, Atlas also removes the configuration details.
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        [Input("keyIdentifier")]
        private Input<string>? _keyIdentifier;

        /// <summary>
        /// The unique identifier of a key in an Azure Key Vault.
        /// </summary>
        public Input<string>? KeyIdentifier
        {
            get => _keyIdentifier;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyIdentifier = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// The name of an Azure Key Vault containing your key.
        /// </summary>
        [Input("keyVaultName")]
        public Input<string>? KeyVaultName { get; set; }

        /// <summary>
        /// The name of the Azure Resource group that contains an Azure Key Vault.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// The secret associated with the Azure Key Vault specified by azureKeyVault.tenantID.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("subscriptionId")]
        private Input<string>? _subscriptionId;

        /// <summary>
        /// The unique identifier associated with an Azure subscription.
        /// </summary>
        public Input<string>? SubscriptionId
        {
            get => _subscriptionId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _subscriptionId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tenantId")]
        private Input<string>? _tenantId;

        /// <summary>
        /// The unique identifier for an Azure AD tenant within an Azure subscription.
        /// </summary>
        public Input<string>? TenantId
        {
            get => _tenantId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tenantId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        public EncryptionAtRestAzureKeyVaultConfigGetArgs()
        {
        }
        public static new EncryptionAtRestAzureKeyVaultConfigGetArgs Empty => new EncryptionAtRestAzureKeyVaultConfigGetArgs();
    }
}
