// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas.Inputs
{

    public sealed class EncryptionAtRestAzureKeyVaultConfigArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Azure environment in which your account credentials reside.
        /// </summary>
        [Input("azureEnvironment")]
        public Input<string>? AzureEnvironment { get; set; }

        [Input("clientId")]
        private Input<string>? _clientId;

        /// <summary>
        /// Unique 36-hexadecimal character string that identifies an Azure application associated with your Azure Active Directory tenant.
        /// </summary>
        public Input<string>? ClientId
        {
            get => _clientId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _clientId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Flag that indicates whether someone enabled encryption at rest for the specified  project. To disable encryption at rest using customer key management and remove the configuration details, pass only this parameter with a value of `false`.
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        [Input("keyIdentifier")]
        private Input<string>? _keyIdentifier;

        /// <summary>
        /// Web address with a unique key that identifies for your Azure Key Vault.
        /// </summary>
        public Input<string>? KeyIdentifier
        {
            get => _keyIdentifier;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _keyIdentifier = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Unique string that identifies the Azure Key Vault that contains your key.
        /// </summary>
        [Input("keyVaultName")]
        public Input<string>? KeyVaultName { get; set; }

        /// <summary>
        /// Enable connection to your Azure Key Vault over private networking.
        /// </summary>
        [Input("requirePrivateNetworking")]
        public Input<bool>? RequirePrivateNetworking { get; set; }

        /// <summary>
        /// Name of the Azure resource group that contains your Azure Key Vault.
        /// </summary>
        [Input("resourceGroupName")]
        public Input<string>? ResourceGroupName { get; set; }

        [Input("secret")]
        private Input<string>? _secret;

        /// <summary>
        /// Private data that you need secured and that belongs to the specified Azure Key Vault (AKV) tenant (**azureKeyVault.tenantID**). This data can include any type of sensitive data such as passwords, database connection strings, API keys, and the like. AKV stores this information as encrypted binary data.
        /// </summary>
        public Input<string>? Secret
        {
            get => _secret;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _secret = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("subscriptionId")]
        private Input<string>? _subscriptionId;

        /// <summary>
        /// Unique 36-hexadecimal character string that identifies your Azure subscription.
        /// </summary>
        public Input<string>? SubscriptionId
        {
            get => _subscriptionId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _subscriptionId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        [Input("tenantId")]
        private Input<string>? _tenantId;

        /// <summary>
        /// Unique 36-hexadecimal character string that identifies the Azure Active Directory tenant within your Azure subscription.
        /// </summary>
        public Input<string>? TenantId
        {
            get => _tenantId;
            set
            {
                var emptySecret = Output.CreateSecret(0);
                _tenantId = Output.Tuple<Input<string>?, int>(value, emptySecret).Apply(t => t.Item1);
            }
        }

        /// <summary>
        /// Flag that indicates whether the Azure encryption key can encrypt and decrypt data.
        /// </summary>
        [Input("valid")]
        public Input<bool>? Valid { get; set; }

        public EncryptionAtRestAzureKeyVaultConfigArgs()
        {
        }
        public static new EncryptionAtRestAzureKeyVaultConfigArgs Empty => new EncryptionAtRestAzureKeyVaultConfigArgs();
    }
}
