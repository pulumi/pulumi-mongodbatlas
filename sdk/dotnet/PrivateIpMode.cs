// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// `mongodbatlas.PrivateIpMode` provides a Private IP Mode resource. This allows one to disable Connect via Peering Only mode for a MongoDB Atlas Project.
    /// 
    /// &gt; **Deprecated Feature**: &lt;br&gt; This feature has been deprecated. Use [Split Horizon connection strings](https://dochub.mongodb.org/core/atlas-horizon-faq) to connect to your cluster. These connection strings allow you to connect using both VPC/VNet Peering and whitelisted public IP addresses. To learn more about support for Split Horizon, see [this FAQ](https://dochub.mongodb.org/core/atlas-horizon-faq). You need this endpoint to [disable Peering Only](https://docs.atlas.mongodb.com/reference/faq/connection-changes/#disable-peering-mode).
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var myPrivateIpMode = new Mongodbatlas.PrivateIpMode("myPrivateIpMode", new Mongodbatlas.PrivateIpModeArgs
    ///         {
    ///             Enabled = false,
    ///             ProjectId = "&lt;YOUR PROJECT ID&gt;",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class PrivateIpMode : Pulumi.CustomResource
    {
        /// <summary>
        /// Indicates whether Connect via Peering Only mode is enabled or disabled for an Atlas project
        /// </summary>
        [Output("enabled")]
        public Output<bool> Enabled { get; private set; } = null!;

        /// <summary>
        /// The unique ID for the project to enable Only Private IP Mode.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;


        /// <summary>
        /// Create a PrivateIpMode resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public PrivateIpMode(string name, PrivateIpModeArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/privateIpMode:PrivateIpMode", name, args ?? new PrivateIpModeArgs(), MakeResourceOptions(options, ""))
        {
        }

        private PrivateIpMode(string name, Input<string> id, PrivateIpModeState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/privateIpMode:PrivateIpMode", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing PrivateIpMode resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static PrivateIpMode Get(string name, Input<string> id, PrivateIpModeState? state = null, CustomResourceOptions? options = null)
        {
            return new PrivateIpMode(name, id, state, options);
        }
    }

    public sealed class PrivateIpModeArgs : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether Connect via Peering Only mode is enabled or disabled for an Atlas project
        /// </summary>
        [Input("enabled", required: true)]
        public Input<bool> Enabled { get; set; } = null!;

        /// <summary>
        /// The unique ID for the project to enable Only Private IP Mode.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public PrivateIpModeArgs()
        {
        }
    }

    public sealed class PrivateIpModeState : Pulumi.ResourceArgs
    {
        /// <summary>
        /// Indicates whether Connect via Peering Only mode is enabled or disabled for an Atlas project
        /// </summary>
        [Input("enabled")]
        public Input<bool>? Enabled { get; set; }

        /// <summary>
        /// The unique ID for the project to enable Only Private IP Mode.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        public PrivateIpModeState()
        {
        }
    }
}
