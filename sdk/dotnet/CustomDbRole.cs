// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// `mongodbatlas.CustomDbRole` provides a Custom DB Role resource. The customDBRoles resource lets you retrieve, create and modify the custom MongoDB roles in your cluster. Use custom MongoDB roles to specify custom sets of actions which cannot be described by the built-in Atlas database user privileges.
    /// 
    /// &gt; **IMPORTANT** Custom roles cannot use actions unavailable to any cluster version in your project. Custom roles are defined at the project level, and must be compatible with each MongoDB version used by your projectâ€™s clusters. If you have a cluster in your project with MongoDB 3.4, you cannot create a custom role that uses actions introduced in MongoDB 3.6, such as useUUID.
    /// 
    /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var testRole = new Mongodbatlas.CustomDbRole("testRole", new Mongodbatlas.CustomDbRoleArgs
    ///         {
    ///             Actions = 
    ///             {
    ///                 new Mongodbatlas.Inputs.CustomDbRoleActionArgs
    ///                 {
    ///                     Action = "UPDATE",
    ///                     Resources = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs
    ///                         {
    ///                             CollectionName = "",
    ///                             DatabaseName = "anyDatabase",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Mongodbatlas.Inputs.CustomDbRoleActionArgs
    ///                 {
    ///                     Action = "INSERT",
    ///                     Resources = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs
    ///                         {
    ///                             CollectionName = "",
    ///                             DatabaseName = "anyDatabase",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Mongodbatlas.Inputs.CustomDbRoleActionArgs
    ///                 {
    ///                     Action = "REMOVE",
    ///                     Resources = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs
    ///                         {
    ///                             CollectionName = "",
    ///                             DatabaseName = "anyDatabase",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             ProjectId = "&lt;PROJECT-ID&gt;",
    ///             RoleName = "myCustomRole",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// ### With Inherited Roles
    /// 
    /// ```csharp
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// class MyStack : Stack
    /// {
    ///     public MyStack()
    ///     {
    ///         var inheritedRoleOne = new Mongodbatlas.CustomDbRole("inheritedRoleOne", new Mongodbatlas.CustomDbRoleArgs
    ///         {
    ///             Actions = 
    ///             {
    ///                 new Mongodbatlas.Inputs.CustomDbRoleActionArgs
    ///                 {
    ///                     Action = "INSERT",
    ///                     Resources = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs
    ///                         {
    ///                             CollectionName = "",
    ///                             DatabaseName = "anyDatabase",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             ProjectId = "&lt;PROJECT-ID&gt;",
    ///             RoleName = "insertRole",
    ///         });
    ///         var inheritedRoleTwo = new Mongodbatlas.CustomDbRole("inheritedRoleTwo", new Mongodbatlas.CustomDbRoleArgs
    ///         {
    ///             Actions = 
    ///             {
    ///                 new Mongodbatlas.Inputs.CustomDbRoleActionArgs
    ///                 {
    ///                     Action = "SERVER_STATUS",
    ///                     Resources = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs
    ///                         {
    ///                             Cluster = true,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             ProjectId = inheritedRoleOne.ProjectId,
    ///             RoleName = "statusServerRole",
    ///         });
    ///         var testRole = new Mongodbatlas.CustomDbRole("testRole", new Mongodbatlas.CustomDbRoleArgs
    ///         {
    ///             Actions = 
    ///             {
    ///                 new Mongodbatlas.Inputs.CustomDbRoleActionArgs
    ///                 {
    ///                     Action = "UPDATE",
    ///                     Resources = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs
    ///                         {
    ///                             CollectionName = "",
    ///                             DatabaseName = "anyDatabase",
    ///                         },
    ///                     },
    ///                 },
    ///                 new Mongodbatlas.Inputs.CustomDbRoleActionArgs
    ///                 {
    ///                     Action = "REMOVE",
    ///                     Resources = 
    ///                     {
    ///                         new Mongodbatlas.Inputs.CustomDbRoleActionResourceArgs
    ///                         {
    ///                             CollectionName = "",
    ///                             DatabaseName = "anyDatabase",
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///             InheritedRoles = 
    ///             {
    ///                 new Mongodbatlas.Inputs.CustomDbRoleInheritedRoleArgs
    ///                 {
    ///                     DatabaseName = "admin",
    ///                     RoleName = inheritedRoleOne.RoleName,
    ///                 },
    ///                 new Mongodbatlas.Inputs.CustomDbRoleInheritedRoleArgs
    ///                 {
    ///                     DatabaseName = "admin",
    ///                     RoleName = inheritedRoleTwo.RoleName,
    ///                 },
    ///             },
    ///             ProjectId = inheritedRoleOne.ProjectId,
    ///             RoleName = "myCustomRole",
    ///         });
    ///     }
    /// 
    /// }
    /// ```
    /// </summary>
    public partial class CustomDbRole : Pulumi.CustomResource
    {
        [Output("actions")]
        public Output<ImmutableArray<Outputs.CustomDbRoleAction>> Actions { get; private set; } = null!;

        [Output("inheritedRoles")]
        public Output<ImmutableArray<Outputs.CustomDbRoleInheritedRole>> InheritedRoles { get; private set; } = null!;

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Name of the inherited role. This can either be another custom role or a built-in role.
        /// </summary>
        [Output("roleName")]
        public Output<string> RoleName { get; private set; } = null!;


        /// <summary>
        /// Create a CustomDbRole resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public CustomDbRole(string name, CustomDbRoleArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/customDbRole:CustomDbRole", name, args ?? new CustomDbRoleArgs(), MakeResourceOptions(options, ""))
        {
        }

        private CustomDbRole(string name, Input<string> id, CustomDbRoleState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/customDbRole:CustomDbRole", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing CustomDbRole resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static CustomDbRole Get(string name, Input<string> id, CustomDbRoleState? state = null, CustomResourceOptions? options = null)
        {
            return new CustomDbRole(name, id, state, options);
        }
    }

    public sealed class CustomDbRoleArgs : Pulumi.ResourceArgs
    {
        [Input("actions", required: true)]
        private InputList<Inputs.CustomDbRoleActionArgs>? _actions;
        public InputList<Inputs.CustomDbRoleActionArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.CustomDbRoleActionArgs>());
            set => _actions = value;
        }

        [Input("inheritedRoles")]
        private InputList<Inputs.CustomDbRoleInheritedRoleArgs>? _inheritedRoles;
        public InputList<Inputs.CustomDbRoleInheritedRoleArgs> InheritedRoles
        {
            get => _inheritedRoles ?? (_inheritedRoles = new InputList<Inputs.CustomDbRoleInheritedRoleArgs>());
            set => _inheritedRoles = value;
        }

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Name of the inherited role. This can either be another custom role or a built-in role.
        /// </summary>
        [Input("roleName", required: true)]
        public Input<string> RoleName { get; set; } = null!;

        public CustomDbRoleArgs()
        {
        }
    }

    public sealed class CustomDbRoleState : Pulumi.ResourceArgs
    {
        [Input("actions")]
        private InputList<Inputs.CustomDbRoleActionGetArgs>? _actions;
        public InputList<Inputs.CustomDbRoleActionGetArgs> Actions
        {
            get => _actions ?? (_actions = new InputList<Inputs.CustomDbRoleActionGetArgs>());
            set => _actions = value;
        }

        [Input("inheritedRoles")]
        private InputList<Inputs.CustomDbRoleInheritedRoleGetArgs>? _inheritedRoles;
        public InputList<Inputs.CustomDbRoleInheritedRoleGetArgs> InheritedRoles
        {
            get => _inheritedRoles ?? (_inheritedRoles = new InputList<Inputs.CustomDbRoleInheritedRoleGetArgs>());
            set => _inheritedRoles = value;
        }

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// Name of the inherited role. This can either be another custom role or a built-in role.
        /// </summary>
        [Input("roleName")]
        public Input<string>? RoleName { get; set; }

        public CustomDbRoleState()
        {
        }
    }
}
