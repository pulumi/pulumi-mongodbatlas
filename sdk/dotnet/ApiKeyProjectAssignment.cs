// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// ## # Resource: mongodbatlas.ApiKeyProjectAssignment
    /// 
    /// `mongodbatlas.ApiKeyProjectAssignment` provides an API Key Project Assignment resource. The resource lets you create, edit, and delete Organization API keys assignments to projects.
    /// 
    /// ## Example Usage
    /// 
    /// ### S
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var @this = new Mongodbatlas.ApiKey("this", new()
    ///     {
    ///         OrgId = orgId,
    ///         Description = "Test API Key",
    ///         RoleNames = new[]
    ///         {
    ///             "ORG_READ_ONLY",
    ///         },
    ///     });
    /// 
    ///     var firstProject = new Mongodbatlas.Project("first_project", new()
    ///     {
    ///         Name = "First Project",
    ///         OrgId = orgId,
    ///     });
    /// 
    ///     var secondProject = new Mongodbatlas.Project("second_project", new()
    ///     {
    ///         Name = "Second Project",
    ///         OrgId = orgId,
    ///     });
    /// 
    ///     var firstAssignment = new Mongodbatlas.ApiKeyProjectAssignment("first_assignment", new()
    ///     {
    ///         ProjectId = firstProject.Id,
    ///         ApiKeyId = @this.ApiKeyId,
    ///         Roles = new[]
    ///         {
    ///             "GROUP_OWNER",
    ///         },
    ///     });
    /// 
    ///     var secondAssignment = new Mongodbatlas.ApiKeyProjectAssignment("second_assignment", new()
    ///     {
    ///         ProjectId = secondProject.Id,
    ///         ApiKeyId = @this.ApiKeyId,
    ///         Roles = new[]
    ///         {
    ///             "GROUP_OWNER",
    ///         },
    ///     });
    /// 
    ///     // Add IP Access List Entry to Programmatic API Key 
    ///     var thisAccessListApiKey = new Mongodbatlas.AccessListApiKey("this", new()
    ///     {
    ///         OrgId = orgId,
    ///         CidrBlock = "0.0.0.0/1",
    ///         ApiKeyId = @this.ApiKeyId,
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// API Key Project Assignment resource can be imported using the project ID and API key ID, in the format `{PROJECT_ID}/{API_KEY_ID}`, e.g.
    /// 
    /// For more information see: [MongoDB Atlas API - Programmatic API Keys Project Assignment](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/group/endpoint-programmatic-api-keys) Documentation.
    /// </summary>
    [MongodbatlasResourceType("mongodbatlas:index/apiKeyProjectAssignment:ApiKeyProjectAssignment")]
    public partial class ApiKeyProjectAssignment : global::Pulumi.CustomResource
    {
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
        /// </summary>
        [Output("apiKeyId")]
        public Output<string> ApiKeyId { get; private set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB
        /// Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
        /// </summary>
        [Output("roles")]
        public Output<ImmutableArray<string>> Roles { get; private set; } = null!;


        /// <summary>
        /// Create a ApiKeyProjectAssignment resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public ApiKeyProjectAssignment(string name, ApiKeyProjectAssignmentArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/apiKeyProjectAssignment:ApiKeyProjectAssignment", name, args ?? new ApiKeyProjectAssignmentArgs(), MakeResourceOptions(options, ""))
        {
        }

        private ApiKeyProjectAssignment(string name, Input<string> id, ApiKeyProjectAssignmentState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/apiKeyProjectAssignment:ApiKeyProjectAssignment", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing ApiKeyProjectAssignment resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static ApiKeyProjectAssignment Get(string name, Input<string> id, ApiKeyProjectAssignmentState? state = null, CustomResourceOptions? options = null)
        {
            return new ApiKeyProjectAssignment(name, id, state, options);
        }
    }

    public sealed class ApiKeyProjectAssignmentArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
        /// </summary>
        [Input("apiKeyId", required: true)]
        public Input<string> ApiKeyId { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        [Input("roles", required: true)]
        private InputList<string>? _roles;

        /// <summary>
        /// Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB
        /// Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
        /// </summary>
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        public ApiKeyProjectAssignmentArgs()
        {
        }
        public static new ApiKeyProjectAssignmentArgs Empty => new ApiKeyProjectAssignmentArgs();
    }

    public sealed class ApiKeyProjectAssignmentState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
        /// </summary>
        [Input("apiKeyId")]
        public Input<string>? ApiKeyId { get; set; }

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        [Input("roles")]
        private InputList<string>? _roles;

        /// <summary>
        /// Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB
        /// Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
        /// </summary>
        public InputList<string> Roles
        {
            get => _roles ?? (_roles = new InputList<string>());
            set => _roles = value;
        }

        public ApiKeyProjectAssignmentState()
        {
        }
        public static new ApiKeyProjectAssignmentState Empty => new ApiKeyProjectAssignmentState();
    }
}
