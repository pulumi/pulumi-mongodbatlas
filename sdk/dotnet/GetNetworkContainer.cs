// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetNetworkContainer
    {
        /// <summary>
        /// `mongodbatlas.NetworkContainer` describes a Network Peering Container. The resource requires your Project ID and container ID.
        /// 
        /// &gt; **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNetworkContainerResult> InvokeAsync(GetNetworkContainerArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNetworkContainerResult>("mongodbatlas:index/getNetworkContainer:getNetworkContainer", args ?? new GetNetworkContainerArgs(), options.WithVersion());
    }


    public sealed class GetNetworkContainerArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The Network Peering Container ID.
        /// </summary>
        [Input("containerId", required: true)]
        public string ContainerId { get; set; } = null!;

        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetNetworkContainerArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNetworkContainerResult
    {
        /// <summary>
        /// CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
        /// </summary>
        public readonly string AtlasCidrBlock;
        /// <summary>
        /// Unique identifer of the Azure subscription in which the VNet resides.
        /// </summary>
        public readonly string AzureSubscriptionId;
        public readonly string ContainerId;
        /// <summary>
        /// Unique identifier of the GCP project in which the Network Peering connection resides.
        /// </summary>
        public readonly string GcpProjectId;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Name of the Network Peering connection in the Atlas project.
        /// </summary>
        public readonly string NetworkName;
        public readonly string ProjectId;
        /// <summary>
        /// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
        /// </summary>
        public readonly string ProviderName;
        /// <summary>
        /// Indicates whether the project has Network Peering connections deployed in the container.
        /// </summary>
        public readonly bool Provisioned;
        /// <summary>
        /// The Atlas Azure region name for where this container will exist.
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// The Atlas AWS region name for where this container will exist.
        /// </summary>
        public readonly string RegionName;
        /// <summary>
        /// The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.
        /// </summary>
        public readonly string VnetName;
        /// <summary>
        /// Unique identifier of the projectâ€™s VPC.
        /// </summary>
        public readonly string VpcId;

        [OutputConstructor]
        private GetNetworkContainerResult(
            string atlasCidrBlock,

            string azureSubscriptionId,

            string containerId,

            string gcpProjectId,

            string id,

            string networkName,

            string projectId,

            string providerName,

            bool provisioned,

            string region,

            string regionName,

            string vnetName,

            string vpcId)
        {
            AtlasCidrBlock = atlasCidrBlock;
            AzureSubscriptionId = azureSubscriptionId;
            ContainerId = containerId;
            GcpProjectId = gcpProjectId;
            Id = id;
            NetworkName = networkName;
            ProjectId = projectId;
            ProviderName = providerName;
            Provisioned = provisioned;
            Region = region;
            RegionName = regionName;
            VnetName = vnetName;
            VpcId = vpcId;
        }
    }
}
