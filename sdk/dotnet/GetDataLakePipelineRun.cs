// *** WARNING: this file was generated by pulumi-language-dotnet. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetDataLakePipelineRun
    {
        /// <summary>
        /// **WARNING:** Data Lake is deprecated. To learn more, see &lt;https://dochub.mongodb.org/core/data-lake-deprecation&gt;
        /// 
        /// `mongodbatlas.getDataLakePipelineRun` describes a Data Lake Pipeline Run.
        /// 
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Task<GetDataLakePipelineRunResult> InvokeAsync(GetDataLakePipelineRunArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetDataLakePipelineRunResult>("mongodbatlas:index/getDataLakePipelineRun:getDataLakePipelineRun", args ?? new GetDataLakePipelineRunArgs(), options.WithDefaults());

        /// <summary>
        /// **WARNING:** Data Lake is deprecated. To learn more, see &lt;https://dochub.mongodb.org/core/data-lake-deprecation&gt;
        /// 
        /// `mongodbatlas.getDataLakePipelineRun` describes a Data Lake Pipeline Run.
        /// 
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetDataLakePipelineRunResult> Invoke(GetDataLakePipelineRunInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataLakePipelineRunResult>("mongodbatlas:index/getDataLakePipelineRun:getDataLakePipelineRun", args ?? new GetDataLakePipelineRunInvokeArgs(), options.WithDefaults());

        /// <summary>
        /// **WARNING:** Data Lake is deprecated. To learn more, see &lt;https://dochub.mongodb.org/core/data-lake-deprecation&gt;
        /// 
        /// `mongodbatlas.getDataLakePipelineRun` describes a Data Lake Pipeline Run.
        /// 
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// 
        /// ## Example Usage
        /// </summary>
        public static Output<GetDataLakePipelineRunResult> Invoke(GetDataLakePipelineRunInvokeArgs args, InvokeOutputOptions options)
            => global::Pulumi.Deployment.Instance.Invoke<GetDataLakePipelineRunResult>("mongodbatlas:index/getDataLakePipelineRun:getDataLakePipelineRun", args ?? new GetDataLakePipelineRunInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetDataLakePipelineRunArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Human-readable label that identifies the Data Lake Pipeline.
        /// </summary>
        [Input("pipelineName", required: true)]
        public string PipelineName { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal character string that identifies a Data Lake Pipeline run.
        /// </summary>
        [Input("pipelineRunId", required: true)]
        public string PipelineRunId { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetDataLakePipelineRunArgs()
        {
        }
        public static new GetDataLakePipelineRunArgs Empty => new GetDataLakePipelineRunArgs();
    }

    public sealed class GetDataLakePipelineRunInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Human-readable label that identifies the Data Lake Pipeline.
        /// </summary>
        [Input("pipelineName", required: true)]
        public Input<string> PipelineName { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal character string that identifies a Data Lake Pipeline run.
        /// </summary>
        [Input("pipelineRunId", required: true)]
        public Input<string> PipelineRunId { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetDataLakePipelineRunInvokeArgs()
        {
        }
        public static new GetDataLakePipelineRunInvokeArgs Empty => new GetDataLakePipelineRunInvokeArgs();
    }


    [OutputType]
    public sealed class GetDataLakePipelineRunResult
    {
        /// <summary>
        /// Backup schedule interval of the Data Lake Pipeline.
        /// </summary>
        public readonly string BackupFrequencyType;
        /// <summary>
        /// Timestamp that indicates when the pipeline run was created.
        /// </summary>
        public readonly string CreatedDate;
        /// <summary>
        /// Human-readable label that identifies the dataset that Atlas generates during this pipeline run.
        /// </summary>
        public readonly string DatasetName;
        /// <summary>
        /// Unique 24-hexadecimal character string that identifies a Data Lake Pipeline run.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique 24-hexadecimal character string that identifies a Data Lake Pipeline run.
        /// </summary>
        public readonly string LastUpdatedDate;
        /// <summary>
        /// Processing phase of the Data Lake Pipeline.
        /// </summary>
        public readonly string Phase;
        /// <summary>
        /// Unique 24-hexadecimal character string that identifies a Data Lake Pipeline.
        /// </summary>
        public readonly string PipelineId;
        public readonly string PipelineName;
        public readonly string PipelineRunId;
        public readonly string ProjectId;
        /// <summary>
        /// Unique 24-hexadecimal character string that identifies the snapshot of a cluster.
        /// </summary>
        public readonly string SnapshotId;
        /// <summary>
        /// State of the pipeline run.
        /// </summary>
        public readonly string State;
        /// <summary>
        /// Runtime statistics for this Data Lake Pipeline run.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetDataLakePipelineRunStatResult> Stats;

        [OutputConstructor]
        private GetDataLakePipelineRunResult(
            string backupFrequencyType,

            string createdDate,

            string datasetName,

            string id,

            string lastUpdatedDate,

            string phase,

            string pipelineId,

            string pipelineName,

            string pipelineRunId,

            string projectId,

            string snapshotId,

            string state,

            ImmutableArray<Outputs.GetDataLakePipelineRunStatResult> stats)
        {
            BackupFrequencyType = backupFrequencyType;
            CreatedDate = createdDate;
            DatasetName = datasetName;
            Id = id;
            LastUpdatedDate = lastUpdatedDate;
            Phase = phase;
            PipelineId = pipelineId;
            PipelineName = pipelineName;
            PipelineRunId = pipelineRunId;
            ProjectId = projectId;
            SnapshotId = snapshotId;
            State = state;
            Stats = stats;
        }
    }
}
