// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetStreamConnections
    {
        /// <summary>
        /// ## # Data Source: mongodbatlas.getStreamConnections
        /// 
        /// `mongodbatlas.getStreamConnections` describes all connections of a stream instance for the specified project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Mongodbatlas.GetStreamConnections.Invoke(new()
        ///     {
        ///         ProjectId = "&lt;PROJECT_ID&gt;",
        ///         InstanceName = "&lt;INSTANCE_NAME&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Task<GetStreamConnectionsResult> InvokeAsync(GetStreamConnectionsArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetStreamConnectionsResult>("mongodbatlas:index/getStreamConnections:getStreamConnections", args ?? new GetStreamConnectionsArgs(), options.WithDefaults());

        /// <summary>
        /// ## # Data Source: mongodbatlas.getStreamConnections
        /// 
        /// `mongodbatlas.getStreamConnections` describes all connections of a stream instance for the specified project.
        /// 
        /// ## Example Usage
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using System.Linq;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var test = Mongodbatlas.GetStreamConnections.Invoke(new()
        ///     {
        ///         ProjectId = "&lt;PROJECT_ID&gt;",
        ///         InstanceName = "&lt;INSTANCE_NAME&gt;",
        ///     });
        /// 
        /// });
        /// ```
        /// </summary>
        public static Output<GetStreamConnectionsResult> Invoke(GetStreamConnectionsInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetStreamConnectionsResult>("mongodbatlas:index/getStreamConnections:getStreamConnections", args ?? new GetStreamConnectionsInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetStreamConnectionsArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Human-readable label that identifies the stream instance.
        /// </summary>
        [Input("instanceName", required: true)]
        public string InstanceName { get; set; } = null!;

        /// <summary>
        /// Number of items that the response returns per page, up to a maximum of `500`. Defaults to `100`.
        /// </summary>
        [Input("itemsPerPage")]
        public int? ItemsPerPage { get; set; }

        /// <summary>
        /// Number of the page that displays the current set of the total objects that the response returns. Defaults to `1`.
        /// </summary>
        [Input("pageNum")]
        public int? PageNum { get; set; }

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        public GetStreamConnectionsArgs()
        {
        }
        public static new GetStreamConnectionsArgs Empty => new GetStreamConnectionsArgs();
    }

    public sealed class GetStreamConnectionsInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Human-readable label that identifies the stream instance.
        /// </summary>
        [Input("instanceName", required: true)]
        public Input<string> InstanceName { get; set; } = null!;

        /// <summary>
        /// Number of items that the response returns per page, up to a maximum of `500`. Defaults to `100`.
        /// </summary>
        [Input("itemsPerPage")]
        public Input<int>? ItemsPerPage { get; set; }

        /// <summary>
        /// Number of the page that displays the current set of the total objects that the response returns. Defaults to `1`.
        /// </summary>
        [Input("pageNum")]
        public Input<int>? PageNum { get; set; }

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public GetStreamConnectionsInvokeArgs()
        {
        }
        public static new GetStreamConnectionsInvokeArgs Empty => new GetStreamConnectionsInvokeArgs();
    }


    [OutputType]
    public sealed class GetStreamConnectionsResult
    {
        public readonly string Id;
        /// <summary>
        /// Human-readable label that identifies the stream instance.
        /// </summary>
        public readonly string InstanceName;
        public readonly int? ItemsPerPage;
        public readonly int? PageNum;
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies your project.
        /// </summary>
        public readonly string ProjectId;
        /// <summary>
        /// A list where each element contains a stream connection.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetStreamConnectionsResultResult> Results;
        /// <summary>
        /// Count of the total number of items in the result set. The count might be greater than the number of objects in the results array if the entire result set is paginated.
        /// </summary>
        public readonly int TotalCount;

        [OutputConstructor]
        private GetStreamConnectionsResult(
            string id,

            string instanceName,

            int? itemsPerPage,

            int? pageNum,

            string projectId,

            ImmutableArray<Outputs.GetStreamConnectionsResultResult> results,

            int totalCount)
        {
            Id = id;
            InstanceName = instanceName;
            ItemsPerPage = itemsPerPage;
            PageNum = pageNum;
            ProjectId = projectId;
            Results = results;
            TotalCount = totalCount;
        }
    }
}
