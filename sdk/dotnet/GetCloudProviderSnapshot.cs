// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetCloudProviderSnapshot
    {
        /// <summary>
        /// `mongodbatlas.CloudProviderSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the clusterâ€™s cloud service.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// </summary>
        public static Task<GetCloudProviderSnapshotResult> InvokeAsync(GetCloudProviderSnapshotArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetCloudProviderSnapshotResult>("mongodbatlas:index/getCloudProviderSnapshot:getCloudProviderSnapshot", args ?? new GetCloudProviderSnapshotArgs(), options.WithVersion());
    }


    public sealed class GetCloudProviderSnapshotArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The name of the Atlas cluster that contains the snapshot you want to retrieve.
        /// </summary>
        [Input("clusterName", required: true)]
        public string ClusterName { get; set; } = null!;

        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// The unique identifier of the snapshot you want to retrieve.
        /// </summary>
        [Input("snapshotId", required: true)]
        public string SnapshotId { get; set; } = null!;

        public GetCloudProviderSnapshotArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetCloudProviderSnapshotResult
    {
        public readonly string ClusterName;
        /// <summary>
        /// UTC ISO 8601 formatted point in time when Atlas took the snapshot.
        /// </summary>
        public readonly string CreatedAt;
        /// <summary>
        /// UDescription of the snapshot. Only present for on-demand snapshots.
        /// </summary>
        public readonly string Description;
        /// <summary>
        /// UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
        /// </summary>
        public readonly string ExpiresAt;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
        /// </summary>
        public readonly string MasterKeyUuid;
        /// <summary>
        /// Version of the MongoDB server.
        /// </summary>
        public readonly string MongodVersion;
        public readonly string ProjectId;
        public readonly string SnapshotId;
        /// <summary>
        /// Specified the type of snapshot. Valid values are onDemand and scheduled.
        /// </summary>
        public readonly string SnapshotType;
        /// <summary>
        /// Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.
        /// </summary>
        public readonly string Status;
        /// <summary>
        /// Specifies the size of the snapshot in bytes.
        /// </summary>
        public readonly int StorageSizeBytes;
        /// <summary>
        /// Specifies the type of cluster: replicaSet or shardedCluster.
        /// </summary>
        public readonly string Type;

        [OutputConstructor]
        private GetCloudProviderSnapshotResult(
            string clusterName,

            string createdAt,

            string description,

            string expiresAt,

            string id,

            string masterKeyUuid,

            string mongodVersion,

            string projectId,

            string snapshotId,

            string snapshotType,

            string status,

            int storageSizeBytes,

            string type)
        {
            ClusterName = clusterName;
            CreatedAt = createdAt;
            Description = description;
            ExpiresAt = expiresAt;
            Id = id;
            MasterKeyUuid = masterKeyUuid;
            MongodVersion = mongodVersion;
            ProjectId = projectId;
            SnapshotId = snapshotId;
            SnapshotType = snapshotType;
            Status = status;
            StorageSizeBytes = storageSizeBytes;
            Type = type;
        }
    }
}
