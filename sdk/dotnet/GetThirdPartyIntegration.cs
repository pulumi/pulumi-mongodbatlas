// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetThirdPartyIntegration
    {
        /// <summary>
        /// `mongodbatlas.ThirdPartyIntegration` describe a Third-Party Integration Settings for the given type.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testFlowdock = new Mongodbatlas.ThirdPartyIntegration("testFlowdock", new Mongodbatlas.ThirdPartyIntegrationArgs
        ///         {
        ///             ProjectId = "&lt;PROJECT-ID&gt;",
        ///             Type = "FLOWDOCK",
        ///             FlowName = "&lt;FLOW-NAME&gt;",
        ///             ApiToken = "&lt;API-TOKEN&gt;",
        ///             OrgName = "&lt;ORG-NAME&gt;",
        ///         });
        ///         var test = Mongodbatlas.GetThirdPartyIntegration.Invoke(new Mongodbatlas.GetThirdPartyIntegrationInvokeArgs
        ///         {
        ///             ProjectId = testFlowdock.ProjectId,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetThirdPartyIntegrationResult> InvokeAsync(GetThirdPartyIntegrationArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetThirdPartyIntegrationResult>("mongodbatlas:index/getThirdPartyIntegration:getThirdPartyIntegration", args ?? new GetThirdPartyIntegrationArgs(), options.WithDefaults());

        /// <summary>
        /// `mongodbatlas.ThirdPartyIntegration` describe a Third-Party Integration Settings for the given type.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testFlowdock = new Mongodbatlas.ThirdPartyIntegration("testFlowdock", new Mongodbatlas.ThirdPartyIntegrationArgs
        ///         {
        ///             ProjectId = "&lt;PROJECT-ID&gt;",
        ///             Type = "FLOWDOCK",
        ///             FlowName = "&lt;FLOW-NAME&gt;",
        ///             ApiToken = "&lt;API-TOKEN&gt;",
        ///             OrgName = "&lt;ORG-NAME&gt;",
        ///         });
        ///         var test = Mongodbatlas.GetThirdPartyIntegration.Invoke(new Mongodbatlas.GetThirdPartyIntegrationInvokeArgs
        ///         {
        ///             ProjectId = testFlowdock.ProjectId,
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetThirdPartyIntegrationResult> Invoke(GetThirdPartyIntegrationInvokeArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.Invoke<GetThirdPartyIntegrationResult>("mongodbatlas:index/getThirdPartyIntegration:getThirdPartyIntegration", args ?? new GetThirdPartyIntegrationInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetThirdPartyIntegrationArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the project to get all Third-Party service integrations
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// Third-Party service integration type
        /// * PAGER_DUTY
        /// * DATADOG
        /// * NEW_RELIC
        /// * OPS_GENIE
        /// * VICTOR_OPS
        /// * FLOWDOCK
        /// * WEBHOOK
        /// </summary>
        [Input("type", required: true)]
        public string Type { get; set; } = null!;

        public GetThirdPartyIntegrationArgs()
        {
        }
    }

    public sealed class GetThirdPartyIntegrationInvokeArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the project to get all Third-Party service integrations
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        /// <summary>
        /// Third-Party service integration type
        /// * PAGER_DUTY
        /// * DATADOG
        /// * NEW_RELIC
        /// * OPS_GENIE
        /// * VICTOR_OPS
        /// * FLOWDOCK
        /// * WEBHOOK
        /// </summary>
        [Input("type", required: true)]
        public Input<string> Type { get; set; } = null!;

        public GetThirdPartyIntegrationInvokeArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetThirdPartyIntegrationResult
    {
        /// <summary>
        /// Unique identifier of your New Relic account.
        /// </summary>
        public readonly string AccountId;
        /// <summary>
        /// Your API Key.
        /// </summary>
        public readonly string ApiKey;
        /// <summary>
        /// Your API Token.
        /// </summary>
        public readonly string ApiToken;
        public readonly string ChannelName;
        /// <summary>
        /// Your Flowdock Flow name.
        /// </summary>
        public readonly string FlowName;
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        /// <summary>
        /// Your License Key.
        /// </summary>
        public readonly string LicenseKey;
        /// <summary>
        /// Your Flowdock organization name.
        /// * `WEBHOOK`
        /// </summary>
        public readonly string OrgName;
        public readonly string ProjectId;
        /// <summary>
        /// Your Insights Query Key.
        /// * `OPS_GENIE`
        /// </summary>
        public readonly string ReadToken;
        /// <summary>
        /// Indicates which API URL to use, either US or EU. Opsgenie will use US by default.
        /// * `VICTOR_OPS`
        /// </summary>
        public readonly string Region;
        /// <summary>
        /// An optional field for your Routing Key.
        /// * `FLOWDOCK`
        /// </summary>
        public readonly string RoutingKey;
        /// <summary>
        /// An optional field for your webhook secret.
        /// </summary>
        public readonly string Secret;
        /// <summary>
        /// Your Service Key.
        /// * `DATADOG`
        /// </summary>
        public readonly string ServiceKey;
        public readonly string TeamName;
        /// <summary>
        /// Property equal to its own integration type
        /// </summary>
        public readonly string Type;
        /// <summary>
        /// Your webhook URL.
        /// </summary>
        public readonly string Url;
        /// <summary>
        /// Your Insights Insert Key.
        /// </summary>
        public readonly string WriteToken;

        [OutputConstructor]
        private GetThirdPartyIntegrationResult(
            string accountId,

            string apiKey,

            string apiToken,

            string channelName,

            string flowName,

            string id,

            string licenseKey,

            string orgName,

            string projectId,

            string readToken,

            string region,

            string routingKey,

            string secret,

            string serviceKey,

            string teamName,

            string type,

            string url,

            string writeToken)
        {
            AccountId = accountId;
            ApiKey = apiKey;
            ApiToken = apiToken;
            ChannelName = channelName;
            FlowName = flowName;
            Id = id;
            LicenseKey = licenseKey;
            OrgName = orgName;
            ProjectId = projectId;
            ReadToken = readToken;
            Region = region;
            RoutingKey = routingKey;
            Secret = secret;
            ServiceKey = serviceKey;
            TeamName = teamName;
            Type = type;
            Url = url;
            WriteToken = writeToken;
        }
    }
}
