// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetNetworkContainers
    {
        /// <summary>
        /// `mongodbatlas.getNetworkContainers` describes all Network Peering Containers. The data source requires your Project ID.
        /// 
        /// &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// ### Basic Example.
        /// 
        /// ```csharp
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// class MyStack : Stack
        /// {
        ///     public MyStack()
        ///     {
        ///         var testNetworkContainer = new Mongodbatlas.NetworkContainer("testNetworkContainer", new Mongodbatlas.NetworkContainerArgs
        ///         {
        ///             ProjectId = "&lt;YOUR-PROJECT-ID&gt;",
        ///             AtlasCidrBlock = "10.8.0.0/21",
        ///             ProviderName = "AWS",
        ///             RegionName = "US_EAST_1",
        ///         });
        ///         var testNetworkContainers = Output.Tuple(testNetworkContainer.ProjectId, testNetworkContainer.ProviderName).Apply(values =&gt;
        ///         {
        ///             var projectId = values.Item1;
        ///             var providerName = values.Item2;
        ///             return Mongodbatlas.GetNetworkContainers.InvokeAsync(new Mongodbatlas.GetNetworkContainersArgs
        ///             {
        ///                 ProjectId = projectId,
        ///                 ProviderName = providerName,
        ///             });
        ///         });
        ///     }
        /// 
        /// }
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetNetworkContainersResult> InvokeAsync(GetNetworkContainersArgs args, InvokeOptions? options = null)
            => Pulumi.Deployment.Instance.InvokeAsync<GetNetworkContainersResult>("mongodbatlas:index/getNetworkContainers:getNetworkContainers", args ?? new GetNetworkContainersArgs(), options.WithVersion());
    }


    public sealed class GetNetworkContainersArgs : Pulumi.InvokeArgs
    {
        /// <summary>
        /// The unique ID for the project to create the database user.
        /// </summary>
        [Input("projectId", required: true)]
        public string ProjectId { get; set; } = null!;

        /// <summary>
        /// Cloud provider for this Network peering container. Accepted values are AWS, GCP, and Azure.
        /// </summary>
        [Input("providerName", required: true)]
        public string ProviderName { get; set; } = null!;

        public GetNetworkContainersArgs()
        {
        }
    }


    [OutputType]
    public sealed class GetNetworkContainersResult
    {
        /// <summary>
        /// The provider-assigned unique ID for this managed resource.
        /// </summary>
        public readonly string Id;
        public readonly string ProjectId;
        /// <summary>
        /// Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
        /// </summary>
        public readonly string ProviderName;
        /// <summary>
        /// A list where each represents a Network Peering Container.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetNetworkContainersResultResult> Results;

        [OutputConstructor]
        private GetNetworkContainersResult(
            string id,

            string projectId,

            string providerName,

            ImmutableArray<Outputs.GetNetworkContainersResultResult> results)
        {
            Id = id;
            ProjectId = projectId;
            ProviderName = providerName;
            Results = results;
        }
    }
}
