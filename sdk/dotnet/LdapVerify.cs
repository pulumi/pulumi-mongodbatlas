// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    /// <summary>
    /// # Resource: mongodbatlas.LdapVerify
    /// 
    /// `mongodbatlas.LdapVerify` provides an LDAP Verify resource. This allows a a verification of an LDAP configuration over TLS for an Atlas project. Atlas retains only the most recent request for each project.
    /// 
    /// ## Example Usage
    /// 
    /// ```csharp
    /// using System.Collections.Generic;
    /// using System.Linq;
    /// using Pulumi;
    /// using Mongodbatlas = Pulumi.Mongodbatlas;
    /// 
    /// return await Deployment.RunAsync(() =&gt; 
    /// {
    ///     var test = new Mongodbatlas.Project("test", new()
    ///     {
    ///         Name = "NAME OF THE PROJECT",
    ///         OrgId = "ORG ID",
    ///     });
    /// 
    ///     var testAdvancedCluster = new Mongodbatlas.AdvancedCluster("test", new()
    ///     {
    ///         ProjectId = test.Id,
    ///         Name = "NAME OF THE CLUSTER",
    ///         ClusterType = "REPLICASET",
    ///         BackupEnabled = true,
    ///         ReplicationSpecs = new[]
    ///         {
    ///             new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecArgs
    ///             {
    ///                 RegionConfigs = new[]
    ///                 {
    ///                     new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigArgs
    ///                     {
    ///                         Priority = 7,
    ///                         ProviderName = "AWS",
    ///                         RegionName = "US_EAST_1",
    ///                         ElectableSpecs = new Mongodbatlas.Inputs.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs
    ///                         {
    ///                             InstanceSize = "M10",
    ///                             NodeCount = 3,
    ///                         },
    ///                     },
    ///                 },
    ///             },
    ///         },
    ///     });
    /// 
    ///     var testLdapVerify = new Mongodbatlas.LdapVerify("test", new()
    ///     {
    ///         ProjectId = test.Id,
    ///         Hostname = "HOSTNAME",
    ///         Port = 636,
    ///         BindUsername = "USERNAME",
    ///         BindPassword = "PASSWORD",
    ///     }, new CustomResourceOptions
    ///     {
    ///         DependsOn =
    ///         {
    ///             testAdvancedCluster,
    ///         },
    ///     });
    /// 
    /// });
    /// ```
    /// 
    /// ## Import
    /// 
    /// LDAP Configuration must be imported using project ID and request ID, e.g.
    /// 
    /// ```sh
    /// $ pulumi import mongodbatlas:index/ldapVerify:LdapVerify test 5d09d6a59ccf6445652a444a-5d09d6a59ccf6445652a444a
    /// ```
    /// For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
    /// </summary>
    [MongodbatlasResourceType("mongodbatlas:index/ldapVerify:LdapVerify")]
    public partial class LdapVerify : global::Pulumi.CustomResource
    {
        /// <summary>
        /// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
        /// </summary>
        [Output("authzQueryTemplate")]
        public Output<string> AuthzQueryTemplate { get; private set; } = null!;

        /// <summary>
        /// The password used to authenticate the `bind_username`.
        /// </summary>
        [Output("bindPassword")]
        public Output<string> BindPassword { get; private set; } = null!;

        /// <summary>
        /// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
        /// </summary>
        [Output("bindUsername")]
        public Output<string> BindUsername { get; private set; } = null!;

        /// <summary>
        /// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
        /// </summary>
        [Output("caCertificate")]
        public Output<string> CaCertificate { get; private set; } = null!;

        /// <summary>
        /// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
        /// </summary>
        [Output("hostname")]
        public Output<string> Hostname { get; private set; } = null!;

        /// <summary>
        /// One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
        /// </summary>
        [Output("links")]
        public Output<ImmutableArray<Outputs.LdapVerifyLink>> Links { get; private set; } = null!;

        /// <summary>
        /// The port to which the LDAP server listens for client connections. Default: `636`
        /// </summary>
        [Output("port")]
        public Output<int> Port { get; private set; } = null!;

        /// <summary>
        /// The unique ID for the project to configure LDAP.
        /// </summary>
        [Output("projectId")]
        public Output<string> ProjectId { get; private set; } = null!;

        /// <summary>
        /// The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
        /// </summary>
        [Output("requestId")]
        public Output<string> RequestId { get; private set; } = null!;

        /// <summary>
        /// The current status of the LDAP over TLS/SSL configuration. One of the following values: `PENDING`, `SUCCESS`, and `FAILED`.
        /// </summary>
        [Output("status")]
        public Output<string> Status { get; private set; } = null!;

        /// <summary>
        /// Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details. The array contains a document for each test that Atlas runs. Atlas stops running tests after the first failure. The following return values can be seen here: [Values](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
        /// </summary>
        [Output("validations")]
        public Output<ImmutableArray<Outputs.LdapVerifyValidation>> Validations { get; private set; } = null!;


        /// <summary>
        /// Create a LdapVerify resource with the given unique name, arguments, and options.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resource</param>
        /// <param name="args">The arguments used to populate this resource's properties</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public LdapVerify(string name, LdapVerifyArgs args, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/ldapVerify:LdapVerify", name, args ?? new LdapVerifyArgs(), MakeResourceOptions(options, ""))
        {
        }

        private LdapVerify(string name, Input<string> id, LdapVerifyState? state = null, CustomResourceOptions? options = null)
            : base("mongodbatlas:index/ldapVerify:LdapVerify", name, state, MakeResourceOptions(options, id))
        {
        }

        private static CustomResourceOptions MakeResourceOptions(CustomResourceOptions? options, Input<string>? id)
        {
            var defaultOptions = new CustomResourceOptions
            {
                Version = Utilities.Version,
            };
            var merged = CustomResourceOptions.Merge(defaultOptions, options);
            // Override the ID if one was specified for consistency with other language SDKs.
            merged.Id = id ?? merged.Id;
            return merged;
        }
        /// <summary>
        /// Get an existing LdapVerify resource's state with the given name, ID, and optional extra
        /// properties used to qualify the lookup.
        /// </summary>
        ///
        /// <param name="name">The unique name of the resulting resource.</param>
        /// <param name="id">The unique provider ID of the resource to lookup.</param>
        /// <param name="state">Any extra arguments used during the lookup.</param>
        /// <param name="options">A bag of options that control this resource's behavior</param>
        public static LdapVerify Get(string name, Input<string> id, LdapVerifyState? state = null, CustomResourceOptions? options = null)
        {
            return new LdapVerify(name, id, state, options);
        }
    }

    public sealed class LdapVerifyArgs : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
        /// </summary>
        [Input("authzQueryTemplate")]
        public Input<string>? AuthzQueryTemplate { get; set; }

        /// <summary>
        /// The password used to authenticate the `bind_username`.
        /// </summary>
        [Input("bindPassword", required: true)]
        public Input<string> BindPassword { get; set; } = null!;

        /// <summary>
        /// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
        /// </summary>
        [Input("bindUsername", required: true)]
        public Input<string> BindUsername { get; set; } = null!;

        /// <summary>
        /// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
        /// </summary>
        [Input("caCertificate")]
        public Input<string>? CaCertificate { get; set; }

        /// <summary>
        /// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
        /// </summary>
        [Input("hostname", required: true)]
        public Input<string> Hostname { get; set; } = null!;

        /// <summary>
        /// The port to which the LDAP server listens for client connections. Default: `636`
        /// </summary>
        [Input("port", required: true)]
        public Input<int> Port { get; set; } = null!;

        /// <summary>
        /// The unique ID for the project to configure LDAP.
        /// </summary>
        [Input("projectId", required: true)]
        public Input<string> ProjectId { get; set; } = null!;

        public LdapVerifyArgs()
        {
        }
        public static new LdapVerifyArgs Empty => new LdapVerifyArgs();
    }

    public sealed class LdapVerifyState : global::Pulumi.ResourceArgs
    {
        /// <summary>
        /// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
        /// </summary>
        [Input("authzQueryTemplate")]
        public Input<string>? AuthzQueryTemplate { get; set; }

        /// <summary>
        /// The password used to authenticate the `bind_username`.
        /// </summary>
        [Input("bindPassword")]
        public Input<string>? BindPassword { get; set; }

        /// <summary>
        /// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
        /// </summary>
        [Input("bindUsername")]
        public Input<string>? BindUsername { get; set; }

        /// <summary>
        /// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
        /// </summary>
        [Input("caCertificate")]
        public Input<string>? CaCertificate { get; set; }

        /// <summary>
        /// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
        /// </summary>
        [Input("hostname")]
        public Input<string>? Hostname { get; set; }

        [Input("links")]
        private InputList<Inputs.LdapVerifyLinkGetArgs>? _links;

        /// <summary>
        /// One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
        /// </summary>
        public InputList<Inputs.LdapVerifyLinkGetArgs> Links
        {
            get => _links ?? (_links = new InputList<Inputs.LdapVerifyLinkGetArgs>());
            set => _links = value;
        }

        /// <summary>
        /// The port to which the LDAP server listens for client connections. Default: `636`
        /// </summary>
        [Input("port")]
        public Input<int>? Port { get; set; }

        /// <summary>
        /// The unique ID for the project to configure LDAP.
        /// </summary>
        [Input("projectId")]
        public Input<string>? ProjectId { get; set; }

        /// <summary>
        /// The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
        /// </summary>
        [Input("requestId")]
        public Input<string>? RequestId { get; set; }

        /// <summary>
        /// The current status of the LDAP over TLS/SSL configuration. One of the following values: `PENDING`, `SUCCESS`, and `FAILED`.
        /// </summary>
        [Input("status")]
        public Input<string>? Status { get; set; }

        [Input("validations")]
        private InputList<Inputs.LdapVerifyValidationGetArgs>? _validations;

        /// <summary>
        /// Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details. The array contains a document for each test that Atlas runs. Atlas stops running tests after the first failure. The following return values can be seen here: [Values](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
        /// </summary>
        public InputList<Inputs.LdapVerifyValidationGetArgs> Validations
        {
            get => _validations ?? (_validations = new InputList<Inputs.LdapVerifyValidationGetArgs>());
            set => _validations = value;
        }

        public LdapVerifyState()
        {
        }
        public static new LdapVerifyState Empty => new LdapVerifyState();
    }
}
