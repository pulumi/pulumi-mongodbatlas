// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

using System;
using System.Collections.Generic;
using System.Collections.Immutable;
using System.Threading.Tasks;
using Pulumi.Serialization;

namespace Pulumi.Mongodbatlas
{
    public static class GetFederatedSettingsOrgRoleMapping
    {
        /// <summary>
        /// `mongodbatlas.FederatedSettingsOrgRoleMapping` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var orgGroupRoleMappingImport = new Mongodbatlas.FederatedSettingsOrgRoleMapping("orgGroupRoleMappingImport", new()
        ///     {
        ///         FederationSettingsId = data.Mongodbatlas_federated_settings.Federated_settings.Id,
        ///         OrgId = "627a9683e7f7f7ff7fe306f14",
        ///         ExternalGroupName = "myGrouptest",
        ///         RoleAssignments = new[]
        ///         {
        ///             new Mongodbatlas.Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs
        ///             {
        ///                 OrgId = "627a9683e7f7f7ff7fe306f14",
        ///                 Roles = new[]
        ///                 {
        ///                     "ORG_MEMBER",
        ///                     "ORG_GROUP_CREATOR",
        ///                     "ORG_BILLING_ADMIN",
        ///                 },
        ///             },
        ///             new Mongodbatlas.Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs
        ///             {
        ///                 GroupId = "628aa20db7f7f7f98b81b8",
        ///                 Roles = new[]
        ///                 {
        ///                     "GROUP_OWNER",
        ///                     "GROUP_DATA_ACCESS_ADMIN",
        ///                     "GROUP_SEARCH_INDEX_EDITOR",
        ///                     "GROUP_DATA_ACCESS_READ_ONLY",
        ///                 },
        ///             },
        ///             new Mongodbatlas.Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs
        ///             {
        ///                 GroupId = "62b477f7f7f7f5e741489c",
        ///                 Roles = new[]
        ///                 {
        ///                     "GROUP_OWNER",
        ///                     "GROUP_DATA_ACCESS_ADMIN",
        ///                     "GROUP_SEARCH_INDEX_EDITOR",
        ///                     "GROUP_DATA_ACCESS_READ_ONLY",
        ///                     "GROUP_DATA_ACCESS_READ_WRITE",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var roleMapping = Mongodbatlas.GetFederatedSettingsOrgRoleMapping.Invoke(new()
        ///     {
        ///         FederationSettingsId = orgGroupRoleMappingImport.Id,
        ///         OrgId = "627a9683e7f7f7ff7fe306f14",
        ///         RoleMappingId = "627a9673e7f7f7ff7fe306f14",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Task<GetFederatedSettingsOrgRoleMappingResult> InvokeAsync(GetFederatedSettingsOrgRoleMappingArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.InvokeAsync<GetFederatedSettingsOrgRoleMappingResult>("mongodbatlas:index/getFederatedSettingsOrgRoleMapping:getFederatedSettingsOrgRoleMapping", args ?? new GetFederatedSettingsOrgRoleMappingArgs(), options.WithDefaults());

        /// <summary>
        /// `mongodbatlas.FederatedSettingsOrgRoleMapping` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
        /// 
        /// 
        /// {{% examples %}}
        /// ## Example Usage
        /// {{% example %}}
        /// 
        /// ```csharp
        /// using System.Collections.Generic;
        /// using Pulumi;
        /// using Mongodbatlas = Pulumi.Mongodbatlas;
        /// 
        /// return await Deployment.RunAsync(() =&gt; 
        /// {
        ///     var orgGroupRoleMappingImport = new Mongodbatlas.FederatedSettingsOrgRoleMapping("orgGroupRoleMappingImport", new()
        ///     {
        ///         FederationSettingsId = data.Mongodbatlas_federated_settings.Federated_settings.Id,
        ///         OrgId = "627a9683e7f7f7ff7fe306f14",
        ///         ExternalGroupName = "myGrouptest",
        ///         RoleAssignments = new[]
        ///         {
        ///             new Mongodbatlas.Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs
        ///             {
        ///                 OrgId = "627a9683e7f7f7ff7fe306f14",
        ///                 Roles = new[]
        ///                 {
        ///                     "ORG_MEMBER",
        ///                     "ORG_GROUP_CREATOR",
        ///                     "ORG_BILLING_ADMIN",
        ///                 },
        ///             },
        ///             new Mongodbatlas.Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs
        ///             {
        ///                 GroupId = "628aa20db7f7f7f98b81b8",
        ///                 Roles = new[]
        ///                 {
        ///                     "GROUP_OWNER",
        ///                     "GROUP_DATA_ACCESS_ADMIN",
        ///                     "GROUP_SEARCH_INDEX_EDITOR",
        ///                     "GROUP_DATA_ACCESS_READ_ONLY",
        ///                 },
        ///             },
        ///             new Mongodbatlas.Inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs
        ///             {
        ///                 GroupId = "62b477f7f7f7f5e741489c",
        ///                 Roles = new[]
        ///                 {
        ///                     "GROUP_OWNER",
        ///                     "GROUP_DATA_ACCESS_ADMIN",
        ///                     "GROUP_SEARCH_INDEX_EDITOR",
        ///                     "GROUP_DATA_ACCESS_READ_ONLY",
        ///                     "GROUP_DATA_ACCESS_READ_WRITE",
        ///                 },
        ///             },
        ///         },
        ///     });
        /// 
        ///     var roleMapping = Mongodbatlas.GetFederatedSettingsOrgRoleMapping.Invoke(new()
        ///     {
        ///         FederationSettingsId = orgGroupRoleMappingImport.Id,
        ///         OrgId = "627a9683e7f7f7ff7fe306f14",
        ///         RoleMappingId = "627a9673e7f7f7ff7fe306f14",
        ///     });
        /// 
        /// });
        /// ```
        /// {{% /example %}}
        /// {{% /examples %}}
        /// </summary>
        public static Output<GetFederatedSettingsOrgRoleMappingResult> Invoke(GetFederatedSettingsOrgRoleMappingInvokeArgs args, InvokeOptions? options = null)
            => global::Pulumi.Deployment.Instance.Invoke<GetFederatedSettingsOrgRoleMappingResult>("mongodbatlas:index/getFederatedSettingsOrgRoleMapping:getFederatedSettingsOrgRoleMapping", args ?? new GetFederatedSettingsOrgRoleMappingInvokeArgs(), options.WithDefaults());
    }


    public sealed class GetFederatedSettingsOrgRoleMappingArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
        /// </summary>
        [Input("federationSettingsId", required: true)]
        public string FederationSettingsId { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
        /// </summary>
        [Input("orgId", required: true)]
        public string OrgId { get; set; } = null!;

        [Input("roleMappingId", required: true)]
        public string RoleMappingId { get; set; } = null!;

        public GetFederatedSettingsOrgRoleMappingArgs()
        {
        }
        public static new GetFederatedSettingsOrgRoleMappingArgs Empty => new GetFederatedSettingsOrgRoleMappingArgs();
    }

    public sealed class GetFederatedSettingsOrgRoleMappingInvokeArgs : global::Pulumi.InvokeArgs
    {
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
        /// </summary>
        [Input("federationSettingsId", required: true)]
        public Input<string> FederationSettingsId { get; set; } = null!;

        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
        /// </summary>
        [Input("orgId", required: true)]
        public Input<string> OrgId { get; set; } = null!;

        [Input("roleMappingId", required: true)]
        public Input<string> RoleMappingId { get; set; } = null!;

        public GetFederatedSettingsOrgRoleMappingInvokeArgs()
        {
        }
        public static new GetFederatedSettingsOrgRoleMappingInvokeArgs Empty => new GetFederatedSettingsOrgRoleMappingInvokeArgs();
    }


    [OutputType]
    public sealed class GetFederatedSettingsOrgRoleMappingResult
    {
        /// <summary>
        /// Unique human-readable label that identifies the identity provider group to which this role mapping applies.
        /// </summary>
        public readonly string ExternalGroupName;
        public readonly string FederationSettingsId;
        /// <summary>
        /// Unique 24-hexadecimal digit string that identifies this role mapping.
        /// </summary>
        public readonly string Id;
        public readonly string OrgId;
        /// <summary>
        /// Atlas roles and the unique identifiers of the groups and organizations associated with each role.
        /// </summary>
        public readonly ImmutableArray<Outputs.GetFederatedSettingsOrgRoleMappingRoleAssignmentResult> RoleAssignments;
        public readonly string RoleMappingId;

        [OutputConstructor]
        private GetFederatedSettingsOrgRoleMappingResult(
            string externalGroupName,

            string federationSettingsId,

            string id,

            string orgId,

            ImmutableArray<Outputs.GetFederatedSettingsOrgRoleMappingRoleAssignmentResult> roleAssignments,

            string roleMappingId)
        {
            ExternalGroupName = externalGroupName;
            FederationSettingsId = federationSettingsId;
            Id = id;
            OrgId = orgId;
            RoleAssignments = roleAssignments;
            RoleMappingId = roleMappingId;
        }
    }
}
