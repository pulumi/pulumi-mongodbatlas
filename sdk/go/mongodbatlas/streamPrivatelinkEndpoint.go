// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: StreamPrivatelinkEndpoint
//
// `StreamPrivatelinkEndpoint` describes a Privatelink Endpoint for Streams.
//
// ## Example Usage
type StreamPrivatelinkEndpoint struct {
	pulumi.CustomResourceState

	// Domain name of Privatelink connected cluster.
	DnsDomain pulumi.StringPtrOutput `pulumi:"dnsDomain"`
	// Sub-Domain name of Confluent cluster. These are typically your availability zones.
	DnsSubDomains pulumi.StringArrayOutput `pulumi:"dnsSubDomains"`
	// Interface endpoint ID that is created from the specified service endpoint ID.
	InterfaceEndpointId pulumi.StringOutput `pulumi:"interfaceEndpointId"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Provider where the Kafka cluster is deployed.
	ProviderName pulumi.StringOutput `pulumi:"providerName"`
	// Domain name of Confluent cluster.
	Region pulumi.StringPtrOutput `pulumi:"region"`
	// Service Endpoint ID.
	ServiceEndpointId pulumi.StringPtrOutput `pulumi:"serviceEndpointId"`
	// Status of the connection.
	State pulumi.StringOutput `pulumi:"state"`
	// Vendor who manages the Kafka cluster.
	Vendor pulumi.StringOutput `pulumi:"vendor"`
}

// NewStreamPrivatelinkEndpoint registers a new resource with the given unique name, arguments, and options.
func NewStreamPrivatelinkEndpoint(ctx *pulumi.Context,
	name string, args *StreamPrivatelinkEndpointArgs, opts ...pulumi.ResourceOption) (*StreamPrivatelinkEndpoint, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ProviderName == nil {
		return nil, errors.New("invalid value for required argument 'ProviderName'")
	}
	if args.Vendor == nil {
		return nil, errors.New("invalid value for required argument 'Vendor'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamPrivatelinkEndpoint
	err := ctx.RegisterResource("mongodbatlas:index/streamPrivatelinkEndpoint:StreamPrivatelinkEndpoint", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamPrivatelinkEndpoint gets an existing StreamPrivatelinkEndpoint resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamPrivatelinkEndpoint(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamPrivatelinkEndpointState, opts ...pulumi.ResourceOption) (*StreamPrivatelinkEndpoint, error) {
	var resource StreamPrivatelinkEndpoint
	err := ctx.ReadResource("mongodbatlas:index/streamPrivatelinkEndpoint:StreamPrivatelinkEndpoint", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamPrivatelinkEndpoint resources.
type streamPrivatelinkEndpointState struct {
	// Domain name of Privatelink connected cluster.
	DnsDomain *string `pulumi:"dnsDomain"`
	// Sub-Domain name of Confluent cluster. These are typically your availability zones.
	DnsSubDomains []string `pulumi:"dnsSubDomains"`
	// Interface endpoint ID that is created from the specified service endpoint ID.
	InterfaceEndpointId *string `pulumi:"interfaceEndpointId"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId *string `pulumi:"projectId"`
	// Provider where the Kafka cluster is deployed.
	ProviderName *string `pulumi:"providerName"`
	// Domain name of Confluent cluster.
	Region *string `pulumi:"region"`
	// Service Endpoint ID.
	ServiceEndpointId *string `pulumi:"serviceEndpointId"`
	// Status of the connection.
	State *string `pulumi:"state"`
	// Vendor who manages the Kafka cluster.
	Vendor *string `pulumi:"vendor"`
}

type StreamPrivatelinkEndpointState struct {
	// Domain name of Privatelink connected cluster.
	DnsDomain pulumi.StringPtrInput
	// Sub-Domain name of Confluent cluster. These are typically your availability zones.
	DnsSubDomains pulumi.StringArrayInput
	// Interface endpoint ID that is created from the specified service endpoint ID.
	InterfaceEndpointId pulumi.StringPtrInput
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId pulumi.StringPtrInput
	// Provider where the Kafka cluster is deployed.
	ProviderName pulumi.StringPtrInput
	// Domain name of Confluent cluster.
	Region pulumi.StringPtrInput
	// Service Endpoint ID.
	ServiceEndpointId pulumi.StringPtrInput
	// Status of the connection.
	State pulumi.StringPtrInput
	// Vendor who manages the Kafka cluster.
	Vendor pulumi.StringPtrInput
}

func (StreamPrivatelinkEndpointState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamPrivatelinkEndpointState)(nil)).Elem()
}

type streamPrivatelinkEndpointArgs struct {
	// Domain name of Privatelink connected cluster.
	DnsDomain *string `pulumi:"dnsDomain"`
	// Sub-Domain name of Confluent cluster. These are typically your availability zones.
	DnsSubDomains []string `pulumi:"dnsSubDomains"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId string `pulumi:"projectId"`
	// Provider where the Kafka cluster is deployed.
	ProviderName string `pulumi:"providerName"`
	// Domain name of Confluent cluster.
	Region *string `pulumi:"region"`
	// Service Endpoint ID.
	ServiceEndpointId *string `pulumi:"serviceEndpointId"`
	// Vendor who manages the Kafka cluster.
	Vendor string `pulumi:"vendor"`
}

// The set of arguments for constructing a StreamPrivatelinkEndpoint resource.
type StreamPrivatelinkEndpointArgs struct {
	// Domain name of Privatelink connected cluster.
	DnsDomain pulumi.StringPtrInput
	// Sub-Domain name of Confluent cluster. These are typically your availability zones.
	DnsSubDomains pulumi.StringArrayInput
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId pulumi.StringInput
	// Provider where the Kafka cluster is deployed.
	ProviderName pulumi.StringInput
	// Domain name of Confluent cluster.
	Region pulumi.StringPtrInput
	// Service Endpoint ID.
	ServiceEndpointId pulumi.StringPtrInput
	// Vendor who manages the Kafka cluster.
	Vendor pulumi.StringInput
}

func (StreamPrivatelinkEndpointArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamPrivatelinkEndpointArgs)(nil)).Elem()
}

type StreamPrivatelinkEndpointInput interface {
	pulumi.Input

	ToStreamPrivatelinkEndpointOutput() StreamPrivatelinkEndpointOutput
	ToStreamPrivatelinkEndpointOutputWithContext(ctx context.Context) StreamPrivatelinkEndpointOutput
}

func (*StreamPrivatelinkEndpoint) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamPrivatelinkEndpoint)(nil)).Elem()
}

func (i *StreamPrivatelinkEndpoint) ToStreamPrivatelinkEndpointOutput() StreamPrivatelinkEndpointOutput {
	return i.ToStreamPrivatelinkEndpointOutputWithContext(context.Background())
}

func (i *StreamPrivatelinkEndpoint) ToStreamPrivatelinkEndpointOutputWithContext(ctx context.Context) StreamPrivatelinkEndpointOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamPrivatelinkEndpointOutput)
}

// StreamPrivatelinkEndpointArrayInput is an input type that accepts StreamPrivatelinkEndpointArray and StreamPrivatelinkEndpointArrayOutput values.
// You can construct a concrete instance of `StreamPrivatelinkEndpointArrayInput` via:
//
//	StreamPrivatelinkEndpointArray{ StreamPrivatelinkEndpointArgs{...} }
type StreamPrivatelinkEndpointArrayInput interface {
	pulumi.Input

	ToStreamPrivatelinkEndpointArrayOutput() StreamPrivatelinkEndpointArrayOutput
	ToStreamPrivatelinkEndpointArrayOutputWithContext(context.Context) StreamPrivatelinkEndpointArrayOutput
}

type StreamPrivatelinkEndpointArray []StreamPrivatelinkEndpointInput

func (StreamPrivatelinkEndpointArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamPrivatelinkEndpoint)(nil)).Elem()
}

func (i StreamPrivatelinkEndpointArray) ToStreamPrivatelinkEndpointArrayOutput() StreamPrivatelinkEndpointArrayOutput {
	return i.ToStreamPrivatelinkEndpointArrayOutputWithContext(context.Background())
}

func (i StreamPrivatelinkEndpointArray) ToStreamPrivatelinkEndpointArrayOutputWithContext(ctx context.Context) StreamPrivatelinkEndpointArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamPrivatelinkEndpointArrayOutput)
}

// StreamPrivatelinkEndpointMapInput is an input type that accepts StreamPrivatelinkEndpointMap and StreamPrivatelinkEndpointMapOutput values.
// You can construct a concrete instance of `StreamPrivatelinkEndpointMapInput` via:
//
//	StreamPrivatelinkEndpointMap{ "key": StreamPrivatelinkEndpointArgs{...} }
type StreamPrivatelinkEndpointMapInput interface {
	pulumi.Input

	ToStreamPrivatelinkEndpointMapOutput() StreamPrivatelinkEndpointMapOutput
	ToStreamPrivatelinkEndpointMapOutputWithContext(context.Context) StreamPrivatelinkEndpointMapOutput
}

type StreamPrivatelinkEndpointMap map[string]StreamPrivatelinkEndpointInput

func (StreamPrivatelinkEndpointMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamPrivatelinkEndpoint)(nil)).Elem()
}

func (i StreamPrivatelinkEndpointMap) ToStreamPrivatelinkEndpointMapOutput() StreamPrivatelinkEndpointMapOutput {
	return i.ToStreamPrivatelinkEndpointMapOutputWithContext(context.Background())
}

func (i StreamPrivatelinkEndpointMap) ToStreamPrivatelinkEndpointMapOutputWithContext(ctx context.Context) StreamPrivatelinkEndpointMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamPrivatelinkEndpointMapOutput)
}

type StreamPrivatelinkEndpointOutput struct{ *pulumi.OutputState }

func (StreamPrivatelinkEndpointOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamPrivatelinkEndpoint)(nil)).Elem()
}

func (o StreamPrivatelinkEndpointOutput) ToStreamPrivatelinkEndpointOutput() StreamPrivatelinkEndpointOutput {
	return o
}

func (o StreamPrivatelinkEndpointOutput) ToStreamPrivatelinkEndpointOutputWithContext(ctx context.Context) StreamPrivatelinkEndpointOutput {
	return o
}

// Domain name of Privatelink connected cluster.
func (o StreamPrivatelinkEndpointOutput) DnsDomain() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamPrivatelinkEndpoint) pulumi.StringPtrOutput { return v.DnsDomain }).(pulumi.StringPtrOutput)
}

// Sub-Domain name of Confluent cluster. These are typically your availability zones.
func (o StreamPrivatelinkEndpointOutput) DnsSubDomains() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StreamPrivatelinkEndpoint) pulumi.StringArrayOutput { return v.DnsSubDomains }).(pulumi.StringArrayOutput)
}

// Interface endpoint ID that is created from the specified service endpoint ID.
func (o StreamPrivatelinkEndpointOutput) InterfaceEndpointId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamPrivatelinkEndpoint) pulumi.StringOutput { return v.InterfaceEndpointId }).(pulumi.StringOutput)
}

// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
func (o StreamPrivatelinkEndpointOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamPrivatelinkEndpoint) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Provider where the Kafka cluster is deployed.
func (o StreamPrivatelinkEndpointOutput) ProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamPrivatelinkEndpoint) pulumi.StringOutput { return v.ProviderName }).(pulumi.StringOutput)
}

// Domain name of Confluent cluster.
func (o StreamPrivatelinkEndpointOutput) Region() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamPrivatelinkEndpoint) pulumi.StringPtrOutput { return v.Region }).(pulumi.StringPtrOutput)
}

// Service Endpoint ID.
func (o StreamPrivatelinkEndpointOutput) ServiceEndpointId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamPrivatelinkEndpoint) pulumi.StringPtrOutput { return v.ServiceEndpointId }).(pulumi.StringPtrOutput)
}

// Status of the connection.
func (o StreamPrivatelinkEndpointOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamPrivatelinkEndpoint) pulumi.StringOutput { return v.State }).(pulumi.StringOutput)
}

// Vendor who manages the Kafka cluster.
func (o StreamPrivatelinkEndpointOutput) Vendor() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamPrivatelinkEndpoint) pulumi.StringOutput { return v.Vendor }).(pulumi.StringOutput)
}

type StreamPrivatelinkEndpointArrayOutput struct{ *pulumi.OutputState }

func (StreamPrivatelinkEndpointArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamPrivatelinkEndpoint)(nil)).Elem()
}

func (o StreamPrivatelinkEndpointArrayOutput) ToStreamPrivatelinkEndpointArrayOutput() StreamPrivatelinkEndpointArrayOutput {
	return o
}

func (o StreamPrivatelinkEndpointArrayOutput) ToStreamPrivatelinkEndpointArrayOutputWithContext(ctx context.Context) StreamPrivatelinkEndpointArrayOutput {
	return o
}

func (o StreamPrivatelinkEndpointArrayOutput) Index(i pulumi.IntInput) StreamPrivatelinkEndpointOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamPrivatelinkEndpoint {
		return vs[0].([]*StreamPrivatelinkEndpoint)[vs[1].(int)]
	}).(StreamPrivatelinkEndpointOutput)
}

type StreamPrivatelinkEndpointMapOutput struct{ *pulumi.OutputState }

func (StreamPrivatelinkEndpointMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamPrivatelinkEndpoint)(nil)).Elem()
}

func (o StreamPrivatelinkEndpointMapOutput) ToStreamPrivatelinkEndpointMapOutput() StreamPrivatelinkEndpointMapOutput {
	return o
}

func (o StreamPrivatelinkEndpointMapOutput) ToStreamPrivatelinkEndpointMapOutputWithContext(ctx context.Context) StreamPrivatelinkEndpointMapOutput {
	return o
}

func (o StreamPrivatelinkEndpointMapOutput) MapIndex(k pulumi.StringInput) StreamPrivatelinkEndpointOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamPrivatelinkEndpoint {
		return vs[0].(map[string]*StreamPrivatelinkEndpoint)[vs[1].(string)]
	}).(StreamPrivatelinkEndpointOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamPrivatelinkEndpointInput)(nil)).Elem(), &StreamPrivatelinkEndpoint{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamPrivatelinkEndpointArrayInput)(nil)).Elem(), StreamPrivatelinkEndpointArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamPrivatelinkEndpointMapInput)(nil)).Elem(), StreamPrivatelinkEndpointMap{})
	pulumi.RegisterOutputType(StreamPrivatelinkEndpointOutput{})
	pulumi.RegisterOutputType(StreamPrivatelinkEndpointArrayOutput{})
	pulumi.RegisterOutputType(StreamPrivatelinkEndpointMapOutput{})
}
