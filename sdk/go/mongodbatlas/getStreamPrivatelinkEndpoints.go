// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Data Source: getStreamPrivatelinkEndpoints
//
// `getStreamPrivatelinkEndpoints` describes a Privatelink Endpoint for Streams.
//
// ## Example Usage
//
// ### S
//
// ### AWS S3 Privatelink
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-aws/sdk/v4/go/aws"
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			// S3 bucket for stream data
//			streamBucket, err := aws.NewS3Bucket(ctx, "stream_bucket", &aws.S3BucketArgs{
//				Bucket:       s3BucketName,
//				ForceDestroy: true,
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aws.NewS3BucketVersioning(ctx, "stream_bucket_versioning", &aws.S3BucketVersioningArgs{
//				Bucket: streamBucket.Id,
//				VersioningConfiguration: []map[string]interface{}{
//					map[string]interface{}{
//						"status": "Enabled",
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = aws.NewS3BucketServerSideEncryptionConfiguration(ctx, "stream_bucket_encryption", &aws.S3BucketServerSideEncryptionConfigurationArgs{
//				Bucket: streamBucket.Id,
//				Rule: []map[string]interface{}{
//					map[string]interface{}{
//						"applyServerSideEncryptionByDefault": []map[string]interface{}{
//							map[string]interface{}{
//								"sseAlgorithm": "AES256",
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// PrivateLink for S3
//			this, err := mongodbatlas.NewStreamPrivatelinkEndpoint(ctx, "this", &mongodbatlas.StreamPrivatelinkEndpointArgs{
//				ProjectId:         pulumi.Any(projectId),
//				ProviderName:      pulumi.String("AWS"),
//				Vendor:            pulumi.String("S3"),
//				Region:            pulumi.Any(region),
//				ServiceEndpointId: pulumi.Any(serviceEndpointId),
//			})
//			if err != nil {
//				return err
//			}
//			ctx.Export("privatelinkEndpointId", this.ID())
//			return nil
//		})
//	}
//
// ```
func LookupStreamPrivatelinkEndpoints(ctx *pulumi.Context, args *LookupStreamPrivatelinkEndpointsArgs, opts ...pulumi.InvokeOption) (*LookupStreamPrivatelinkEndpointsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupStreamPrivatelinkEndpointsResult
	err := ctx.Invoke("mongodbatlas:index/getStreamPrivatelinkEndpoints:getStreamPrivatelinkEndpoints", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getStreamPrivatelinkEndpoints.
type LookupStreamPrivatelinkEndpointsArgs struct {
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getStreamPrivatelinkEndpoints.
type LookupStreamPrivatelinkEndpointsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id        string                                `pulumi:"id"`
	ProjectId string                                `pulumi:"projectId"`
	Results   []GetStreamPrivatelinkEndpointsResult `pulumi:"results"`
}

func LookupStreamPrivatelinkEndpointsOutput(ctx *pulumi.Context, args LookupStreamPrivatelinkEndpointsOutputArgs, opts ...pulumi.InvokeOption) LookupStreamPrivatelinkEndpointsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupStreamPrivatelinkEndpointsResultOutput, error) {
			args := v.(LookupStreamPrivatelinkEndpointsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("mongodbatlas:index/getStreamPrivatelinkEndpoints:getStreamPrivatelinkEndpoints", args, LookupStreamPrivatelinkEndpointsResultOutput{}, options).(LookupStreamPrivatelinkEndpointsResultOutput), nil
		}).(LookupStreamPrivatelinkEndpointsResultOutput)
}

// A collection of arguments for invoking getStreamPrivatelinkEndpoints.
type LookupStreamPrivatelinkEndpointsOutputArgs struct {
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupStreamPrivatelinkEndpointsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamPrivatelinkEndpointsArgs)(nil)).Elem()
}

// A collection of values returned by getStreamPrivatelinkEndpoints.
type LookupStreamPrivatelinkEndpointsResultOutput struct{ *pulumi.OutputState }

func (LookupStreamPrivatelinkEndpointsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupStreamPrivatelinkEndpointsResult)(nil)).Elem()
}

func (o LookupStreamPrivatelinkEndpointsResultOutput) ToLookupStreamPrivatelinkEndpointsResultOutput() LookupStreamPrivatelinkEndpointsResultOutput {
	return o
}

func (o LookupStreamPrivatelinkEndpointsResultOutput) ToLookupStreamPrivatelinkEndpointsResultOutputWithContext(ctx context.Context) LookupStreamPrivatelinkEndpointsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupStreamPrivatelinkEndpointsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamPrivatelinkEndpointsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupStreamPrivatelinkEndpointsResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupStreamPrivatelinkEndpointsResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupStreamPrivatelinkEndpointsResultOutput) Results() GetStreamPrivatelinkEndpointsResultArrayOutput {
	return o.ApplyT(func(v LookupStreamPrivatelinkEndpointsResult) []GetStreamPrivatelinkEndpointsResult { return v.Results }).(GetStreamPrivatelinkEndpointsResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupStreamPrivatelinkEndpointsResultOutput{})
}
