// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `getNetworkPeerings` describes all Network Peering Connections.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
//
// ## Example Usage
// ### Basic Example (AWS).
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testNetworkPeering, err := mongodbatlas.NewNetworkPeering(ctx, "testNetworkPeering", &mongodbatlas.NetworkPeeringArgs{
// 			AccepterRegionName:  pulumi.String("us-east-1"),
// 			ProjectId:           pulumi.String("<YOUR-PROJEC-ID>"),
// 			ContainerId:         pulumi.String("507f1f77bcf86cd799439011"),
// 			ProviderName:        pulumi.String("AWS"),
// 			RouteTableCidrBlock: pulumi.String("192.168.0.0/24"),
// 			VpcId:               pulumi.String("vpc-abc123abc123"),
// 			AwsAccountId:        pulumi.String("abc123abc123"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_ = mongodbatlas.LookupNetworkPeeringsOutput(ctx, GetNetworkPeeringsOutputArgs{
// 			ProjectId: testNetworkPeering.ProjectId,
// 		}, nil)
// 		return nil
// 	})
// }
// ```
func LookupNetworkPeerings(ctx *pulumi.Context, args *LookupNetworkPeeringsArgs, opts ...pulumi.InvokeOption) (*LookupNetworkPeeringsResult, error) {
	var rv LookupNetworkPeeringsResult
	err := ctx.Invoke("mongodbatlas:index/getNetworkPeerings:getNetworkPeerings", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getNetworkPeerings.
type LookupNetworkPeeringsArgs struct {
	// The unique ID for the project to create the database user.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getNetworkPeerings.
type LookupNetworkPeeringsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ProjectId string `pulumi:"projectId"`
	// A list where each represents a Network Peering Connection.
	Results []GetNetworkPeeringsResult `pulumi:"results"`
}

func LookupNetworkPeeringsOutput(ctx *pulumi.Context, args LookupNetworkPeeringsOutputArgs, opts ...pulumi.InvokeOption) LookupNetworkPeeringsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupNetworkPeeringsResult, error) {
			args := v.(LookupNetworkPeeringsArgs)
			r, err := LookupNetworkPeerings(ctx, &args, opts...)
			var s LookupNetworkPeeringsResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupNetworkPeeringsResultOutput)
}

// A collection of arguments for invoking getNetworkPeerings.
type LookupNetworkPeeringsOutputArgs struct {
	// The unique ID for the project to create the database user.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupNetworkPeeringsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkPeeringsArgs)(nil)).Elem()
}

// A collection of values returned by getNetworkPeerings.
type LookupNetworkPeeringsResultOutput struct{ *pulumi.OutputState }

func (LookupNetworkPeeringsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupNetworkPeeringsResult)(nil)).Elem()
}

func (o LookupNetworkPeeringsResultOutput) ToLookupNetworkPeeringsResultOutput() LookupNetworkPeeringsResultOutput {
	return o
}

func (o LookupNetworkPeeringsResultOutput) ToLookupNetworkPeeringsResultOutputWithContext(ctx context.Context) LookupNetworkPeeringsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupNetworkPeeringsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPeeringsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupNetworkPeeringsResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupNetworkPeeringsResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// A list where each represents a Network Peering Connection.
func (o LookupNetworkPeeringsResultOutput) Results() GetNetworkPeeringsResultArrayOutput {
	return o.ApplyT(func(v LookupNetworkPeeringsResult) []GetNetworkPeeringsResult { return v.Results }).(GetNetworkPeeringsResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupNetworkPeeringsResultOutput{})
}
