// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testProject, err := mongodbatlas.NewProject(ctx, "testProject", &mongodbatlas.ProjectArgs{
// 			OrgId: pulumi.String("ORG ID"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mongodbatlas.NewLdapConfiguration(ctx, "testLdapConfiguration", &mongodbatlas.LdapConfigurationArgs{
// 			ProjectId:             testProject.ID(),
// 			AuthenticationEnabled: pulumi.Bool(true),
// 			Hostname:              pulumi.String("HOSTNAME"),
// 			Port:                  pulumi.Int(636),
// 			BindUsername:          pulumi.String("USERNAME"),
// 			BindPassword:          pulumi.String("PASSWORD"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### LDAP With User To DN Mapping
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testProject, err := mongodbatlas.NewProject(ctx, "testProject", &mongodbatlas.ProjectArgs{
// 			OrgId: pulumi.String("ORG ID"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mongodbatlas.NewLdapConfiguration(ctx, "testLdapConfiguration", &mongodbatlas.LdapConfigurationArgs{
// 			ProjectId:             testProject.ID(),
// 			AuthenticationEnabled: pulumi.Bool(true),
// 			Hostname:              pulumi.String("HOSTNAME"),
// 			Port:                  pulumi.Int(636),
// 			BindUsername:          pulumi.String("USERNAME"),
// 			BindPassword:          pulumi.String("PASSWORD"),
// 			CaCertificate:         pulumi.String("CA CERTIFICATE"),
// 			AuthzQueryTemplate:    pulumi.String("{USER}?memberOf?base"),
// 			UserToDnMappings: LdapConfigurationUserToDnMappingArray{
// 				&LdapConfigurationUserToDnMappingArgs{
// 					Match:     pulumi.String("(.+)"),
// 					LdapQuery: pulumi.String("DC=example,DC=com??sub?(userPrincipalName={0})"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// LDAP Configuration must be imported using project ID, e.g.
//
// ```sh
//  $ pulumi import mongodbatlas:index/ldapConfiguration:LdapConfiguration test 5d09d6a59ccf6445652a444a
// ```
//
//  For more information see[MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-save)
type LdapConfiguration struct {
	pulumi.CustomResourceState

	// Specifies whether user authentication with LDAP is enabled.
	AuthenticationEnabled pulumi.BoolOutput `pulumi:"authenticationEnabled"`
	// Specifies whether user authorization with LDAP is enabled. You cannot enable user authorization with LDAP without first enabling user authentication with LDAP.
	AuthorizationEnabled pulumi.BoolOutput `pulumi:"authorizationEnabled"`
	// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
	AuthzQueryTemplate pulumi.StringOutput `pulumi:"authzQueryTemplate"`
	// The password used to authenticate the `bindUsername`.
	BindPassword pulumi.StringOutput `pulumi:"bindPassword"`
	// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
	BindUsername pulumi.StringOutput `pulumi:"bindUsername"`
	// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
	CaCertificate pulumi.StringOutput `pulumi:"caCertificate"`
	// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// The port to which the LDAP server listens for client connections. Default: `636`
	Port pulumi.IntPtrOutput `pulumi:"port"`
	// The unique ID for the project to configure LDAP.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Maps an LDAP username for authentication to an LDAP Distinguished Name (DN). Each document contains a `match` regular expression and either a `substitution` or `ldapQuery` template used to transform the LDAP username extracted from the regular expression. Atlas steps through the each document in the array in the given order, checking the authentication username against the `match` filter. If a match is found, Atlas applies the transformation and uses the output to authenticate the user. Atlas does not check the remaining documents in the array. For more details and examples see the [MongoDB Atlas API Reference](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-save/).
	// * `user_to_dn_mapping.0.match` - (Optional) A regular expression to match against a provided LDAP username. Each parenthesis-enclosed section represents a regular expression capture group used by the `substitution` or `ldapQuery` template.
	// * `user_to_dn_mapping.0.substitution` - (Optional) An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name. Each bracket-enclosed numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
	// * `user_to_dn_mapping.0.ldap_query` - (Optional) An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516. Each numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
	UserToDnMappings LdapConfigurationUserToDnMappingArrayOutput `pulumi:"userToDnMappings"`
}

// NewLdapConfiguration registers a new resource with the given unique name, arguments, and options.
func NewLdapConfiguration(ctx *pulumi.Context,
	name string, args *LdapConfigurationArgs, opts ...pulumi.ResourceOption) (*LdapConfiguration, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AuthenticationEnabled == nil {
		return nil, errors.New("invalid value for required argument 'AuthenticationEnabled'")
	}
	if args.BindPassword == nil {
		return nil, errors.New("invalid value for required argument 'BindPassword'")
	}
	if args.BindUsername == nil {
		return nil, errors.New("invalid value for required argument 'BindUsername'")
	}
	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	var resource LdapConfiguration
	err := ctx.RegisterResource("mongodbatlas:index/ldapConfiguration:LdapConfiguration", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLdapConfiguration gets an existing LdapConfiguration resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLdapConfiguration(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LdapConfigurationState, opts ...pulumi.ResourceOption) (*LdapConfiguration, error) {
	var resource LdapConfiguration
	err := ctx.ReadResource("mongodbatlas:index/ldapConfiguration:LdapConfiguration", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LdapConfiguration resources.
type ldapConfigurationState struct {
	// Specifies whether user authentication with LDAP is enabled.
	AuthenticationEnabled *bool `pulumi:"authenticationEnabled"`
	// Specifies whether user authorization with LDAP is enabled. You cannot enable user authorization with LDAP without first enabling user authentication with LDAP.
	AuthorizationEnabled *bool `pulumi:"authorizationEnabled"`
	// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
	AuthzQueryTemplate *string `pulumi:"authzQueryTemplate"`
	// The password used to authenticate the `bindUsername`.
	BindPassword *string `pulumi:"bindPassword"`
	// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
	BindUsername *string `pulumi:"bindUsername"`
	// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
	CaCertificate *string `pulumi:"caCertificate"`
	// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
	Hostname *string `pulumi:"hostname"`
	// The port to which the LDAP server listens for client connections. Default: `636`
	Port *int `pulumi:"port"`
	// The unique ID for the project to configure LDAP.
	ProjectId *string `pulumi:"projectId"`
	// Maps an LDAP username for authentication to an LDAP Distinguished Name (DN). Each document contains a `match` regular expression and either a `substitution` or `ldapQuery` template used to transform the LDAP username extracted from the regular expression. Atlas steps through the each document in the array in the given order, checking the authentication username against the `match` filter. If a match is found, Atlas applies the transformation and uses the output to authenticate the user. Atlas does not check the remaining documents in the array. For more details and examples see the [MongoDB Atlas API Reference](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-save/).
	// * `user_to_dn_mapping.0.match` - (Optional) A regular expression to match against a provided LDAP username. Each parenthesis-enclosed section represents a regular expression capture group used by the `substitution` or `ldapQuery` template.
	// * `user_to_dn_mapping.0.substitution` - (Optional) An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name. Each bracket-enclosed numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
	// * `user_to_dn_mapping.0.ldap_query` - (Optional) An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516. Each numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
	UserToDnMappings []LdapConfigurationUserToDnMapping `pulumi:"userToDnMappings"`
}

type LdapConfigurationState struct {
	// Specifies whether user authentication with LDAP is enabled.
	AuthenticationEnabled pulumi.BoolPtrInput
	// Specifies whether user authorization with LDAP is enabled. You cannot enable user authorization with LDAP without first enabling user authentication with LDAP.
	AuthorizationEnabled pulumi.BoolPtrInput
	// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
	AuthzQueryTemplate pulumi.StringPtrInput
	// The password used to authenticate the `bindUsername`.
	BindPassword pulumi.StringPtrInput
	// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
	BindUsername pulumi.StringPtrInput
	// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
	CaCertificate pulumi.StringPtrInput
	// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
	Hostname pulumi.StringPtrInput
	// The port to which the LDAP server listens for client connections. Default: `636`
	Port pulumi.IntPtrInput
	// The unique ID for the project to configure LDAP.
	ProjectId pulumi.StringPtrInput
	// Maps an LDAP username for authentication to an LDAP Distinguished Name (DN). Each document contains a `match` regular expression and either a `substitution` or `ldapQuery` template used to transform the LDAP username extracted from the regular expression. Atlas steps through the each document in the array in the given order, checking the authentication username against the `match` filter. If a match is found, Atlas applies the transformation and uses the output to authenticate the user. Atlas does not check the remaining documents in the array. For more details and examples see the [MongoDB Atlas API Reference](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-save/).
	// * `user_to_dn_mapping.0.match` - (Optional) A regular expression to match against a provided LDAP username. Each parenthesis-enclosed section represents a regular expression capture group used by the `substitution` or `ldapQuery` template.
	// * `user_to_dn_mapping.0.substitution` - (Optional) An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name. Each bracket-enclosed numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
	// * `user_to_dn_mapping.0.ldap_query` - (Optional) An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516. Each numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
	UserToDnMappings LdapConfigurationUserToDnMappingArrayInput
}

func (LdapConfigurationState) ElementType() reflect.Type {
	return reflect.TypeOf((*ldapConfigurationState)(nil)).Elem()
}

type ldapConfigurationArgs struct {
	// Specifies whether user authentication with LDAP is enabled.
	AuthenticationEnabled bool `pulumi:"authenticationEnabled"`
	// Specifies whether user authorization with LDAP is enabled. You cannot enable user authorization with LDAP without first enabling user authentication with LDAP.
	AuthorizationEnabled *bool `pulumi:"authorizationEnabled"`
	// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
	AuthzQueryTemplate *string `pulumi:"authzQueryTemplate"`
	// The password used to authenticate the `bindUsername`.
	BindPassword string `pulumi:"bindPassword"`
	// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
	BindUsername string `pulumi:"bindUsername"`
	// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
	CaCertificate *string `pulumi:"caCertificate"`
	// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
	Hostname string `pulumi:"hostname"`
	// The port to which the LDAP server listens for client connections. Default: `636`
	Port *int `pulumi:"port"`
	// The unique ID for the project to configure LDAP.
	ProjectId string `pulumi:"projectId"`
	// Maps an LDAP username for authentication to an LDAP Distinguished Name (DN). Each document contains a `match` regular expression and either a `substitution` or `ldapQuery` template used to transform the LDAP username extracted from the regular expression. Atlas steps through the each document in the array in the given order, checking the authentication username against the `match` filter. If a match is found, Atlas applies the transformation and uses the output to authenticate the user. Atlas does not check the remaining documents in the array. For more details and examples see the [MongoDB Atlas API Reference](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-save/).
	// * `user_to_dn_mapping.0.match` - (Optional) A regular expression to match against a provided LDAP username. Each parenthesis-enclosed section represents a regular expression capture group used by the `substitution` or `ldapQuery` template.
	// * `user_to_dn_mapping.0.substitution` - (Optional) An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name. Each bracket-enclosed numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
	// * `user_to_dn_mapping.0.ldap_query` - (Optional) An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516. Each numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
	UserToDnMappings []LdapConfigurationUserToDnMapping `pulumi:"userToDnMappings"`
}

// The set of arguments for constructing a LdapConfiguration resource.
type LdapConfigurationArgs struct {
	// Specifies whether user authentication with LDAP is enabled.
	AuthenticationEnabled pulumi.BoolInput
	// Specifies whether user authorization with LDAP is enabled. You cannot enable user authorization with LDAP without first enabling user authentication with LDAP.
	AuthorizationEnabled pulumi.BoolPtrInput
	// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
	AuthzQueryTemplate pulumi.StringPtrInput
	// The password used to authenticate the `bindUsername`.
	BindPassword pulumi.StringInput
	// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
	BindUsername pulumi.StringInput
	// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
	CaCertificate pulumi.StringPtrInput
	// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
	Hostname pulumi.StringInput
	// The port to which the LDAP server listens for client connections. Default: `636`
	Port pulumi.IntPtrInput
	// The unique ID for the project to configure LDAP.
	ProjectId pulumi.StringInput
	// Maps an LDAP username for authentication to an LDAP Distinguished Name (DN). Each document contains a `match` regular expression and either a `substitution` or `ldapQuery` template used to transform the LDAP username extracted from the regular expression. Atlas steps through the each document in the array in the given order, checking the authentication username against the `match` filter. If a match is found, Atlas applies the transformation and uses the output to authenticate the user. Atlas does not check the remaining documents in the array. For more details and examples see the [MongoDB Atlas API Reference](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-save/).
	// * `user_to_dn_mapping.0.match` - (Optional) A regular expression to match against a provided LDAP username. Each parenthesis-enclosed section represents a regular expression capture group used by the `substitution` or `ldapQuery` template.
	// * `user_to_dn_mapping.0.substitution` - (Optional) An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name. Each bracket-enclosed numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
	// * `user_to_dn_mapping.0.ldap_query` - (Optional) An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516. Each numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
	UserToDnMappings LdapConfigurationUserToDnMappingArrayInput
}

func (LdapConfigurationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ldapConfigurationArgs)(nil)).Elem()
}

type LdapConfigurationInput interface {
	pulumi.Input

	ToLdapConfigurationOutput() LdapConfigurationOutput
	ToLdapConfigurationOutputWithContext(ctx context.Context) LdapConfigurationOutput
}

func (*LdapConfiguration) ElementType() reflect.Type {
	return reflect.TypeOf((**LdapConfiguration)(nil)).Elem()
}

func (i *LdapConfiguration) ToLdapConfigurationOutput() LdapConfigurationOutput {
	return i.ToLdapConfigurationOutputWithContext(context.Background())
}

func (i *LdapConfiguration) ToLdapConfigurationOutputWithContext(ctx context.Context) LdapConfigurationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapConfigurationOutput)
}

// LdapConfigurationArrayInput is an input type that accepts LdapConfigurationArray and LdapConfigurationArrayOutput values.
// You can construct a concrete instance of `LdapConfigurationArrayInput` via:
//
//          LdapConfigurationArray{ LdapConfigurationArgs{...} }
type LdapConfigurationArrayInput interface {
	pulumi.Input

	ToLdapConfigurationArrayOutput() LdapConfigurationArrayOutput
	ToLdapConfigurationArrayOutputWithContext(context.Context) LdapConfigurationArrayOutput
}

type LdapConfigurationArray []LdapConfigurationInput

func (LdapConfigurationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LdapConfiguration)(nil)).Elem()
}

func (i LdapConfigurationArray) ToLdapConfigurationArrayOutput() LdapConfigurationArrayOutput {
	return i.ToLdapConfigurationArrayOutputWithContext(context.Background())
}

func (i LdapConfigurationArray) ToLdapConfigurationArrayOutputWithContext(ctx context.Context) LdapConfigurationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapConfigurationArrayOutput)
}

// LdapConfigurationMapInput is an input type that accepts LdapConfigurationMap and LdapConfigurationMapOutput values.
// You can construct a concrete instance of `LdapConfigurationMapInput` via:
//
//          LdapConfigurationMap{ "key": LdapConfigurationArgs{...} }
type LdapConfigurationMapInput interface {
	pulumi.Input

	ToLdapConfigurationMapOutput() LdapConfigurationMapOutput
	ToLdapConfigurationMapOutputWithContext(context.Context) LdapConfigurationMapOutput
}

type LdapConfigurationMap map[string]LdapConfigurationInput

func (LdapConfigurationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LdapConfiguration)(nil)).Elem()
}

func (i LdapConfigurationMap) ToLdapConfigurationMapOutput() LdapConfigurationMapOutput {
	return i.ToLdapConfigurationMapOutputWithContext(context.Background())
}

func (i LdapConfigurationMap) ToLdapConfigurationMapOutputWithContext(ctx context.Context) LdapConfigurationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapConfigurationMapOutput)
}

type LdapConfigurationOutput struct{ *pulumi.OutputState }

func (LdapConfigurationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LdapConfiguration)(nil)).Elem()
}

func (o LdapConfigurationOutput) ToLdapConfigurationOutput() LdapConfigurationOutput {
	return o
}

func (o LdapConfigurationOutput) ToLdapConfigurationOutputWithContext(ctx context.Context) LdapConfigurationOutput {
	return o
}

type LdapConfigurationArrayOutput struct{ *pulumi.OutputState }

func (LdapConfigurationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LdapConfiguration)(nil)).Elem()
}

func (o LdapConfigurationArrayOutput) ToLdapConfigurationArrayOutput() LdapConfigurationArrayOutput {
	return o
}

func (o LdapConfigurationArrayOutput) ToLdapConfigurationArrayOutputWithContext(ctx context.Context) LdapConfigurationArrayOutput {
	return o
}

func (o LdapConfigurationArrayOutput) Index(i pulumi.IntInput) LdapConfigurationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LdapConfiguration {
		return vs[0].([]*LdapConfiguration)[vs[1].(int)]
	}).(LdapConfigurationOutput)
}

type LdapConfigurationMapOutput struct{ *pulumi.OutputState }

func (LdapConfigurationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LdapConfiguration)(nil)).Elem()
}

func (o LdapConfigurationMapOutput) ToLdapConfigurationMapOutput() LdapConfigurationMapOutput {
	return o
}

func (o LdapConfigurationMapOutput) ToLdapConfigurationMapOutputWithContext(ctx context.Context) LdapConfigurationMapOutput {
	return o
}

func (o LdapConfigurationMapOutput) MapIndex(k pulumi.StringInput) LdapConfigurationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LdapConfiguration {
		return vs[0].(map[string]*LdapConfiguration)[vs[1].(string)]
	}).(LdapConfigurationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LdapConfigurationInput)(nil)).Elem(), &LdapConfiguration{})
	pulumi.RegisterInputType(reflect.TypeOf((*LdapConfigurationArrayInput)(nil)).Elem(), LdapConfigurationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LdapConfigurationMapInput)(nil)).Elem(), LdapConfigurationMap{})
	pulumi.RegisterOutputType(LdapConfigurationOutput{})
	pulumi.RegisterOutputType(LdapConfigurationArrayOutput{})
	pulumi.RegisterOutputType(LdapConfigurationMapOutput{})
}
