// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `getDataLakes` describe all Data Lakes.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.LookupDataLakes(ctx, &GetDataLakesArgs{
// 			ProjectId: "PROJECT ID",
// 		}, nil)
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
func LookupDataLakes(ctx *pulumi.Context, args *LookupDataLakesArgs, opts ...pulumi.InvokeOption) (*LookupDataLakesResult, error) {
	var rv LookupDataLakesResult
	err := ctx.Invoke("mongodbatlas:index/getDataLakes:getDataLakes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDataLakes.
type LookupDataLakesArgs struct {
	// The unique ID for the project to get all data lakes.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getDataLakes.
type LookupDataLakesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ProjectId string `pulumi:"projectId"`
	// A list where each represents a Data lake.
	Results []GetDataLakesResult `pulumi:"results"`
}

func LookupDataLakesOutput(ctx *pulumi.Context, args LookupDataLakesOutputArgs, opts ...pulumi.InvokeOption) LookupDataLakesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDataLakesResult, error) {
			args := v.(LookupDataLakesArgs)
			r, err := LookupDataLakes(ctx, &args, opts...)
			var s LookupDataLakesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDataLakesResultOutput)
}

// A collection of arguments for invoking getDataLakes.
type LookupDataLakesOutputArgs struct {
	// The unique ID for the project to get all data lakes.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupDataLakesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataLakesArgs)(nil)).Elem()
}

// A collection of values returned by getDataLakes.
type LookupDataLakesResultOutput struct{ *pulumi.OutputState }

func (LookupDataLakesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataLakesResult)(nil)).Elem()
}

func (o LookupDataLakesResultOutput) ToLookupDataLakesResultOutput() LookupDataLakesResultOutput {
	return o
}

func (o LookupDataLakesResultOutput) ToLookupDataLakesResultOutputWithContext(ctx context.Context) LookupDataLakesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDataLakesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDataLakesResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakesResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// A list where each represents a Data lake.
func (o LookupDataLakesResultOutput) Results() GetDataLakesResultArrayOutput {
	return o.ApplyT(func(v LookupDataLakesResult) []GetDataLakesResult { return v.Results }).(GetDataLakesResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDataLakesResultOutput{})
}
