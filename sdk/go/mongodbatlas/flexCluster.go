// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: FlexCluster
//
// `FlexCluster` provides a Flex Cluster resource. The resource lets you create, update, delete and import a flex cluster.
//
// **RECOMMENDATION:** We recommend using the `AdvancedCluster` resource instead of the `FlexCluster` resource to create and manage Flex clusters. The `AdvancedCluster` resource not only supports Flex clusters, but also supports tenant and dedicated clusters, providing easier migration between different cluster types. For more information, see the Advanced Cluster resource.
//
// ## Example Usage
//
// ## Import
//
// You can import the Flex Cluster resource by using the Project ID and Flex Cluster name, in the format `PROJECT_ID-FLEX_CLUSTER_NAME`. For example:
//
// For more information see: [MongoDB Atlas API - Flex Cluster](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Flex-Clusters/operation/createFlexcluster) Documentation.
type FlexCluster struct {
	pulumi.CustomResourceState

	// Flex backup configuration
	BackupSettings FlexClusterBackupSettingsOutput `pulumi:"backupSettings"`
	// Flex cluster topology.
	ClusterType pulumi.StringOutput `pulumi:"clusterType"`
	// Collection of Uniform Resource Locators that point to the MongoDB database.
	ConnectionStrings FlexClusterConnectionStringsOutput `pulumi:"connectionStrings"`
	// Date and time when MongoDB Cloud created this instance. This parameter expresses its value in ISO 8601 format in UTC.
	CreateDate pulumi.StringOutput `pulumi:"createDate"`
	// Version of MongoDB that the instance runs.
	MongoDbVersion pulumi.StringOutput `pulumi:"mongoDbVersion"`
	// Human-readable label that identifies the instance.
	Name pulumi.StringOutput `pulumi:"name"`
	// Unique 24-hexadecimal character string that identifies the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
	ProviderSettings FlexClusterProviderSettingsOutput `pulumi:"providerSettings"`
	// Human-readable label that indicates the current operating condition of this instance.
	StateName pulumi.StringOutput `pulumi:"stateName"`
	// Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
	Tags pulumi.StringMapOutput `pulumi:"tags"`
	// Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won't delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled pulumi.BoolOutput `pulumi:"terminationProtectionEnabled"`
	// Method by which the cluster maintains the MongoDB versions.
	VersionReleaseSystem pulumi.StringOutput `pulumi:"versionReleaseSystem"`
}

// NewFlexCluster registers a new resource with the given unique name, arguments, and options.
func NewFlexCluster(ctx *pulumi.Context,
	name string, args *FlexClusterArgs, opts ...pulumi.ResourceOption) (*FlexCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ProviderSettings == nil {
		return nil, errors.New("invalid value for required argument 'ProviderSettings'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FlexCluster
	err := ctx.RegisterResource("mongodbatlas:index/flexCluster:FlexCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFlexCluster gets an existing FlexCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFlexCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FlexClusterState, opts ...pulumi.ResourceOption) (*FlexCluster, error) {
	var resource FlexCluster
	err := ctx.ReadResource("mongodbatlas:index/flexCluster:FlexCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FlexCluster resources.
type flexClusterState struct {
	// Flex backup configuration
	BackupSettings *FlexClusterBackupSettings `pulumi:"backupSettings"`
	// Flex cluster topology.
	ClusterType *string `pulumi:"clusterType"`
	// Collection of Uniform Resource Locators that point to the MongoDB database.
	ConnectionStrings *FlexClusterConnectionStrings `pulumi:"connectionStrings"`
	// Date and time when MongoDB Cloud created this instance. This parameter expresses its value in ISO 8601 format in UTC.
	CreateDate *string `pulumi:"createDate"`
	// Version of MongoDB that the instance runs.
	MongoDbVersion *string `pulumi:"mongoDbVersion"`
	// Human-readable label that identifies the instance.
	Name *string `pulumi:"name"`
	// Unique 24-hexadecimal character string that identifies the project.
	ProjectId *string `pulumi:"projectId"`
	// Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
	ProviderSettings *FlexClusterProviderSettings `pulumi:"providerSettings"`
	// Human-readable label that indicates the current operating condition of this instance.
	StateName *string `pulumi:"stateName"`
	// Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
	Tags map[string]string `pulumi:"tags"`
	// Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won't delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled *bool `pulumi:"terminationProtectionEnabled"`
	// Method by which the cluster maintains the MongoDB versions.
	VersionReleaseSystem *string `pulumi:"versionReleaseSystem"`
}

type FlexClusterState struct {
	// Flex backup configuration
	BackupSettings FlexClusterBackupSettingsPtrInput
	// Flex cluster topology.
	ClusterType pulumi.StringPtrInput
	// Collection of Uniform Resource Locators that point to the MongoDB database.
	ConnectionStrings FlexClusterConnectionStringsPtrInput
	// Date and time when MongoDB Cloud created this instance. This parameter expresses its value in ISO 8601 format in UTC.
	CreateDate pulumi.StringPtrInput
	// Version of MongoDB that the instance runs.
	MongoDbVersion pulumi.StringPtrInput
	// Human-readable label that identifies the instance.
	Name pulumi.StringPtrInput
	// Unique 24-hexadecimal character string that identifies the project.
	ProjectId pulumi.StringPtrInput
	// Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
	ProviderSettings FlexClusterProviderSettingsPtrInput
	// Human-readable label that indicates the current operating condition of this instance.
	StateName pulumi.StringPtrInput
	// Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
	Tags pulumi.StringMapInput
	// Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won't delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled pulumi.BoolPtrInput
	// Method by which the cluster maintains the MongoDB versions.
	VersionReleaseSystem pulumi.StringPtrInput
}

func (FlexClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*flexClusterState)(nil)).Elem()
}

type flexClusterArgs struct {
	// Human-readable label that identifies the instance.
	Name *string `pulumi:"name"`
	// Unique 24-hexadecimal character string that identifies the project.
	ProjectId string `pulumi:"projectId"`
	// Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
	ProviderSettings FlexClusterProviderSettings `pulumi:"providerSettings"`
	// Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
	Tags map[string]string `pulumi:"tags"`
	// Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won't delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled *bool `pulumi:"terminationProtectionEnabled"`
}

// The set of arguments for constructing a FlexCluster resource.
type FlexClusterArgs struct {
	// Human-readable label that identifies the instance.
	Name pulumi.StringPtrInput
	// Unique 24-hexadecimal character string that identifies the project.
	ProjectId pulumi.StringInput
	// Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
	ProviderSettings FlexClusterProviderSettingsInput
	// Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
	Tags pulumi.StringMapInput
	// Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won't delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled pulumi.BoolPtrInput
}

func (FlexClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*flexClusterArgs)(nil)).Elem()
}

type FlexClusterInput interface {
	pulumi.Input

	ToFlexClusterOutput() FlexClusterOutput
	ToFlexClusterOutputWithContext(ctx context.Context) FlexClusterOutput
}

func (*FlexCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexCluster)(nil)).Elem()
}

func (i *FlexCluster) ToFlexClusterOutput() FlexClusterOutput {
	return i.ToFlexClusterOutputWithContext(context.Background())
}

func (i *FlexCluster) ToFlexClusterOutputWithContext(ctx context.Context) FlexClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexClusterOutput)
}

// FlexClusterArrayInput is an input type that accepts FlexClusterArray and FlexClusterArrayOutput values.
// You can construct a concrete instance of `FlexClusterArrayInput` via:
//
//	FlexClusterArray{ FlexClusterArgs{...} }
type FlexClusterArrayInput interface {
	pulumi.Input

	ToFlexClusterArrayOutput() FlexClusterArrayOutput
	ToFlexClusterArrayOutputWithContext(context.Context) FlexClusterArrayOutput
}

type FlexClusterArray []FlexClusterInput

func (FlexClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexCluster)(nil)).Elem()
}

func (i FlexClusterArray) ToFlexClusterArrayOutput() FlexClusterArrayOutput {
	return i.ToFlexClusterArrayOutputWithContext(context.Background())
}

func (i FlexClusterArray) ToFlexClusterArrayOutputWithContext(ctx context.Context) FlexClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexClusterArrayOutput)
}

// FlexClusterMapInput is an input type that accepts FlexClusterMap and FlexClusterMapOutput values.
// You can construct a concrete instance of `FlexClusterMapInput` via:
//
//	FlexClusterMap{ "key": FlexClusterArgs{...} }
type FlexClusterMapInput interface {
	pulumi.Input

	ToFlexClusterMapOutput() FlexClusterMapOutput
	ToFlexClusterMapOutputWithContext(context.Context) FlexClusterMapOutput
}

type FlexClusterMap map[string]FlexClusterInput

func (FlexClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexCluster)(nil)).Elem()
}

func (i FlexClusterMap) ToFlexClusterMapOutput() FlexClusterMapOutput {
	return i.ToFlexClusterMapOutputWithContext(context.Background())
}

func (i FlexClusterMap) ToFlexClusterMapOutputWithContext(ctx context.Context) FlexClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FlexClusterMapOutput)
}

type FlexClusterOutput struct{ *pulumi.OutputState }

func (FlexClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FlexCluster)(nil)).Elem()
}

func (o FlexClusterOutput) ToFlexClusterOutput() FlexClusterOutput {
	return o
}

func (o FlexClusterOutput) ToFlexClusterOutputWithContext(ctx context.Context) FlexClusterOutput {
	return o
}

// Flex backup configuration
func (o FlexClusterOutput) BackupSettings() FlexClusterBackupSettingsOutput {
	return o.ApplyT(func(v *FlexCluster) FlexClusterBackupSettingsOutput { return v.BackupSettings }).(FlexClusterBackupSettingsOutput)
}

// Flex cluster topology.
func (o FlexClusterOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexCluster) pulumi.StringOutput { return v.ClusterType }).(pulumi.StringOutput)
}

// Collection of Uniform Resource Locators that point to the MongoDB database.
func (o FlexClusterOutput) ConnectionStrings() FlexClusterConnectionStringsOutput {
	return o.ApplyT(func(v *FlexCluster) FlexClusterConnectionStringsOutput { return v.ConnectionStrings }).(FlexClusterConnectionStringsOutput)
}

// Date and time when MongoDB Cloud created this instance. This parameter expresses its value in ISO 8601 format in UTC.
func (o FlexClusterOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexCluster) pulumi.StringOutput { return v.CreateDate }).(pulumi.StringOutput)
}

// Version of MongoDB that the instance runs.
func (o FlexClusterOutput) MongoDbVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexCluster) pulumi.StringOutput { return v.MongoDbVersion }).(pulumi.StringOutput)
}

// Human-readable label that identifies the instance.
func (o FlexClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// Unique 24-hexadecimal character string that identifies the project.
func (o FlexClusterOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexCluster) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
func (o FlexClusterOutput) ProviderSettings() FlexClusterProviderSettingsOutput {
	return o.ApplyT(func(v *FlexCluster) FlexClusterProviderSettingsOutput { return v.ProviderSettings }).(FlexClusterProviderSettingsOutput)
}

// Human-readable label that indicates the current operating condition of this instance.
func (o FlexClusterOutput) StateName() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexCluster) pulumi.StringOutput { return v.StateName }).(pulumi.StringOutput)
}

// Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
func (o FlexClusterOutput) Tags() pulumi.StringMapOutput {
	return o.ApplyT(func(v *FlexCluster) pulumi.StringMapOutput { return v.Tags }).(pulumi.StringMapOutput)
}

// Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won't delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
func (o FlexClusterOutput) TerminationProtectionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *FlexCluster) pulumi.BoolOutput { return v.TerminationProtectionEnabled }).(pulumi.BoolOutput)
}

// Method by which the cluster maintains the MongoDB versions.
func (o FlexClusterOutput) VersionReleaseSystem() pulumi.StringOutput {
	return o.ApplyT(func(v *FlexCluster) pulumi.StringOutput { return v.VersionReleaseSystem }).(pulumi.StringOutput)
}

type FlexClusterArrayOutput struct{ *pulumi.OutputState }

func (FlexClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FlexCluster)(nil)).Elem()
}

func (o FlexClusterArrayOutput) ToFlexClusterArrayOutput() FlexClusterArrayOutput {
	return o
}

func (o FlexClusterArrayOutput) ToFlexClusterArrayOutputWithContext(ctx context.Context) FlexClusterArrayOutput {
	return o
}

func (o FlexClusterArrayOutput) Index(i pulumi.IntInput) FlexClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FlexCluster {
		return vs[0].([]*FlexCluster)[vs[1].(int)]
	}).(FlexClusterOutput)
}

type FlexClusterMapOutput struct{ *pulumi.OutputState }

func (FlexClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FlexCluster)(nil)).Elem()
}

func (o FlexClusterMapOutput) ToFlexClusterMapOutput() FlexClusterMapOutput {
	return o
}

func (o FlexClusterMapOutput) ToFlexClusterMapOutputWithContext(ctx context.Context) FlexClusterMapOutput {
	return o
}

func (o FlexClusterMapOutput) MapIndex(k pulumi.StringInput) FlexClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FlexCluster {
		return vs[0].(map[string]*FlexCluster)[vs[1].(string)]
	}).(FlexClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FlexClusterInput)(nil)).Elem(), &FlexCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexClusterArrayInput)(nil)).Elem(), FlexClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FlexClusterMapInput)(nil)).Elem(), FlexClusterMap{})
	pulumi.RegisterOutputType(FlexClusterOutput{})
	pulumi.RegisterOutputType(FlexClusterArrayOutput{})
	pulumi.RegisterOutputType(FlexClusterMapOutput{})
}
