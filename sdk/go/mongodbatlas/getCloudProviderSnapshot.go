// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// **WARNING:** This datasource is deprecated, use `CloudBackupSnapshot`
//
// `CloudProviderSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the clusterâ€™s cloud service.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
func LookupCloudProviderSnapshot(ctx *pulumi.Context, args *LookupCloudProviderSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupCloudProviderSnapshotResult, error) {
	var rv LookupCloudProviderSnapshotResult
	err := ctx.Invoke("mongodbatlas:index/getCloudProviderSnapshot:getCloudProviderSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCloudProviderSnapshot.
type LookupCloudProviderSnapshotArgs struct {
	// The name of the Atlas cluster that contains the snapshot you want to retrieve.
	ClusterName string `pulumi:"clusterName"`
	ProjectId   string `pulumi:"projectId"`
	// The unique identifier of the snapshot you want to retrieve.
	SnapshotId string `pulumi:"snapshotId"`
}

// A collection of values returned by getCloudProviderSnapshot.
type LookupCloudProviderSnapshotResult struct {
	ClusterName string `pulumi:"clusterName"`
	// UTC ISO 8601 formatted point in time when Atlas took the snapshot.
	CreatedAt string `pulumi:"createdAt"`
	// UDescription of the snapshot. Only present for on-demand snapshots.
	Description string `pulumi:"description"`
	// UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
	ExpiresAt string `pulumi:"expiresAt"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
	MasterKeyUuid string `pulumi:"masterKeyUuid"`
	// Version of the MongoDB server.
	MongodVersion string `pulumi:"mongodVersion"`
	ProjectId     string `pulumi:"projectId"`
	SnapshotId    string `pulumi:"snapshotId"`
	// Specified the type of snapshot. Valid values are onDemand and scheduled.
	SnapshotType string `pulumi:"snapshotType"`
	// Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.
	Status string `pulumi:"status"`
	// Specifies the size of the snapshot in bytes.
	StorageSizeBytes int `pulumi:"storageSizeBytes"`
	// Specifies the type of cluster: replicaSet or shardedCluster.
	Type string `pulumi:"type"`
}

func LookupCloudProviderSnapshotOutput(ctx *pulumi.Context, args LookupCloudProviderSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupCloudProviderSnapshotResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCloudProviderSnapshotResult, error) {
			args := v.(LookupCloudProviderSnapshotArgs)
			r, err := LookupCloudProviderSnapshot(ctx, &args, opts...)
			return *r, err
		}).(LookupCloudProviderSnapshotResultOutput)
}

// A collection of arguments for invoking getCloudProviderSnapshot.
type LookupCloudProviderSnapshotOutputArgs struct {
	// The name of the Atlas cluster that contains the snapshot you want to retrieve.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	ProjectId   pulumi.StringInput `pulumi:"projectId"`
	// The unique identifier of the snapshot you want to retrieve.
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
}

func (LookupCloudProviderSnapshotOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudProviderSnapshotArgs)(nil)).Elem()
}

// A collection of values returned by getCloudProviderSnapshot.
type LookupCloudProviderSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupCloudProviderSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudProviderSnapshotResult)(nil)).Elem()
}

func (o LookupCloudProviderSnapshotResultOutput) ToLookupCloudProviderSnapshotResultOutput() LookupCloudProviderSnapshotResultOutput {
	return o
}

func (o LookupCloudProviderSnapshotResultOutput) ToLookupCloudProviderSnapshotResultOutputWithContext(ctx context.Context) LookupCloudProviderSnapshotResultOutput {
	return o
}

func (o LookupCloudProviderSnapshotResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) string { return v.ClusterName }).(pulumi.StringOutput)
}

// UTC ISO 8601 formatted point in time when Atlas took the snapshot.
func (o LookupCloudProviderSnapshotResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// UDescription of the snapshot. Only present for on-demand snapshots.
func (o LookupCloudProviderSnapshotResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) string { return v.Description }).(pulumi.StringOutput)
}

// UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
func (o LookupCloudProviderSnapshotResultOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCloudProviderSnapshotResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
func (o LookupCloudProviderSnapshotResultOutput) MasterKeyUuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) string { return v.MasterKeyUuid }).(pulumi.StringOutput)
}

// Version of the MongoDB server.
func (o LookupCloudProviderSnapshotResultOutput) MongodVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) string { return v.MongodVersion }).(pulumi.StringOutput)
}

func (o LookupCloudProviderSnapshotResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupCloudProviderSnapshotResultOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// Specified the type of snapshot. Valid values are onDemand and scheduled.
func (o LookupCloudProviderSnapshotResultOutput) SnapshotType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) string { return v.SnapshotType }).(pulumi.StringOutput)
}

// Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.
func (o LookupCloudProviderSnapshotResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) string { return v.Status }).(pulumi.StringOutput)
}

// Specifies the size of the snapshot in bytes.
func (o LookupCloudProviderSnapshotResultOutput) StorageSizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) int { return v.StorageSizeBytes }).(pulumi.IntOutput)
}

// Specifies the type of cluster: replicaSet or shardedCluster.
func (o LookupCloudProviderSnapshotResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderSnapshotResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCloudProviderSnapshotResultOutput{})
}
