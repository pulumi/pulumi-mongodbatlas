// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `PrivateEndpointRegionalMode` provides a Private Endpoint Regional Mode resource. This represents a regionalized private endpoint setting for a Project. Enable it to allow region specific private endpoints.
//
// > **IMPORTANT:**You must have one of the following roles to successfully handle the resource:
//   - Organization Owner
//   - Project Owner
//
// > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
//
// > **WARNING:**Your [connection strings](https://www.mongodb.com/docs/atlas/reference/faq/connection-changes/#std-label-connstring-privatelink) to existing multi-region and global sharded clusters change when you enable this setting.  You must update your applications to use the new connection strings. This might cause downtime.
//
// ## Additional Reference
//
// In addition to the example shown above, keep in mind:
// * `mongodbatlas_cluster.cluster-atlas.depends_on` - Make your cluster dependent on the project's `PrivateEndpointRegionalMode` as well as any relevant `PrivateLinkEndpointService` resources.  See an example.
// * `mongodbatlas_cluster.cluster-atlas.connection_strings` will differ based on the value of `mongodbatlas_private_endpoint_regional_mode.test.enabled`.
// * For more information on usage with GCP, see our Privatelink Endpoint Service documentation: Example with GCP
// * For more information on usage with Azure, see our Privatelink Endpoint Service documentation: Examples with Azure
//
// ## Import
//
// Private Endpoint Regional Mode can be imported using project id in format `{project_id}`, e.g.
//
// ```sh
//
//	$ pulumi import mongodbatlas:index/privateEndpointRegionalMode:PrivateEndpointRegionalMode test 1112222b3bf99403840e8934
//
// ```
//
//	See detailed information for arguments and attributes__Private Endpoints__ [Get Regional Mode](https://www.mongodb.com/docs/atlas/reference/api/private-endpoints-get-regional-mode/) | [Update Regional Mode](https://www.mongodb.com/docs/atlas/reference/api/private-endpoints-update-regional-mode/)
type PrivateEndpointRegionalMode struct {
	pulumi.CustomResourceState

	// Flag that indicates whether the regionalized private endpoint setting is enabled for the project.   Set this value to true to create more than one private endpoint in a cloud provider region to connect to multi-region and global Atlas sharded clusters. You can enable this setting only if your Atlas project contains no replica sets. You can't disable this setting if you have:
	// * More than one private endpoint in more than one region, or
	// * More than one private endpoint in one region and one private endpoint in one or more regions.
	//   You can create only sharded clusters when you enable the regionalized private endpoint setting. You can't create replica sets.
	Enabled pulumi.BoolOutput `pulumi:"enabled"`
	// Unique identifier for the project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewPrivateEndpointRegionalMode registers a new resource with the given unique name, arguments, and options.
func NewPrivateEndpointRegionalMode(ctx *pulumi.Context,
	name string, args *PrivateEndpointRegionalModeArgs, opts ...pulumi.ResourceOption) (*PrivateEndpointRegionalMode, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource PrivateEndpointRegionalMode
	err := ctx.RegisterResource("mongodbatlas:index/privateEndpointRegionalMode:PrivateEndpointRegionalMode", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetPrivateEndpointRegionalMode gets an existing PrivateEndpointRegionalMode resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetPrivateEndpointRegionalMode(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *PrivateEndpointRegionalModeState, opts ...pulumi.ResourceOption) (*PrivateEndpointRegionalMode, error) {
	var resource PrivateEndpointRegionalMode
	err := ctx.ReadResource("mongodbatlas:index/privateEndpointRegionalMode:PrivateEndpointRegionalMode", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering PrivateEndpointRegionalMode resources.
type privateEndpointRegionalModeState struct {
	// Flag that indicates whether the regionalized private endpoint setting is enabled for the project.   Set this value to true to create more than one private endpoint in a cloud provider region to connect to multi-region and global Atlas sharded clusters. You can enable this setting only if your Atlas project contains no replica sets. You can't disable this setting if you have:
	// * More than one private endpoint in more than one region, or
	// * More than one private endpoint in one region and one private endpoint in one or more regions.
	//   You can create only sharded clusters when you enable the regionalized private endpoint setting. You can't create replica sets.
	Enabled *bool `pulumi:"enabled"`
	// Unique identifier for the project.
	ProjectId *string `pulumi:"projectId"`
}

type PrivateEndpointRegionalModeState struct {
	// Flag that indicates whether the regionalized private endpoint setting is enabled for the project.   Set this value to true to create more than one private endpoint in a cloud provider region to connect to multi-region and global Atlas sharded clusters. You can enable this setting only if your Atlas project contains no replica sets. You can't disable this setting if you have:
	// * More than one private endpoint in more than one region, or
	// * More than one private endpoint in one region and one private endpoint in one or more regions.
	//   You can create only sharded clusters when you enable the regionalized private endpoint setting. You can't create replica sets.
	Enabled pulumi.BoolPtrInput
	// Unique identifier for the project.
	ProjectId pulumi.StringPtrInput
}

func (PrivateEndpointRegionalModeState) ElementType() reflect.Type {
	return reflect.TypeOf((*privateEndpointRegionalModeState)(nil)).Elem()
}

type privateEndpointRegionalModeArgs struct {
	// Flag that indicates whether the regionalized private endpoint setting is enabled for the project.   Set this value to true to create more than one private endpoint in a cloud provider region to connect to multi-region and global Atlas sharded clusters. You can enable this setting only if your Atlas project contains no replica sets. You can't disable this setting if you have:
	// * More than one private endpoint in more than one region, or
	// * More than one private endpoint in one region and one private endpoint in one or more regions.
	//   You can create only sharded clusters when you enable the regionalized private endpoint setting. You can't create replica sets.
	Enabled *bool `pulumi:"enabled"`
	// Unique identifier for the project.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a PrivateEndpointRegionalMode resource.
type PrivateEndpointRegionalModeArgs struct {
	// Flag that indicates whether the regionalized private endpoint setting is enabled for the project.   Set this value to true to create more than one private endpoint in a cloud provider region to connect to multi-region and global Atlas sharded clusters. You can enable this setting only if your Atlas project contains no replica sets. You can't disable this setting if you have:
	// * More than one private endpoint in more than one region, or
	// * More than one private endpoint in one region and one private endpoint in one or more regions.
	//   You can create only sharded clusters when you enable the regionalized private endpoint setting. You can't create replica sets.
	Enabled pulumi.BoolPtrInput
	// Unique identifier for the project.
	ProjectId pulumi.StringInput
}

func (PrivateEndpointRegionalModeArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*privateEndpointRegionalModeArgs)(nil)).Elem()
}

type PrivateEndpointRegionalModeInput interface {
	pulumi.Input

	ToPrivateEndpointRegionalModeOutput() PrivateEndpointRegionalModeOutput
	ToPrivateEndpointRegionalModeOutputWithContext(ctx context.Context) PrivateEndpointRegionalModeOutput
}

func (*PrivateEndpointRegionalMode) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointRegionalMode)(nil)).Elem()
}

func (i *PrivateEndpointRegionalMode) ToPrivateEndpointRegionalModeOutput() PrivateEndpointRegionalModeOutput {
	return i.ToPrivateEndpointRegionalModeOutputWithContext(context.Background())
}

func (i *PrivateEndpointRegionalMode) ToPrivateEndpointRegionalModeOutputWithContext(ctx context.Context) PrivateEndpointRegionalModeOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointRegionalModeOutput)
}

// PrivateEndpointRegionalModeArrayInput is an input type that accepts PrivateEndpointRegionalModeArray and PrivateEndpointRegionalModeArrayOutput values.
// You can construct a concrete instance of `PrivateEndpointRegionalModeArrayInput` via:
//
//	PrivateEndpointRegionalModeArray{ PrivateEndpointRegionalModeArgs{...} }
type PrivateEndpointRegionalModeArrayInput interface {
	pulumi.Input

	ToPrivateEndpointRegionalModeArrayOutput() PrivateEndpointRegionalModeArrayOutput
	ToPrivateEndpointRegionalModeArrayOutputWithContext(context.Context) PrivateEndpointRegionalModeArrayOutput
}

type PrivateEndpointRegionalModeArray []PrivateEndpointRegionalModeInput

func (PrivateEndpointRegionalModeArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateEndpointRegionalMode)(nil)).Elem()
}

func (i PrivateEndpointRegionalModeArray) ToPrivateEndpointRegionalModeArrayOutput() PrivateEndpointRegionalModeArrayOutput {
	return i.ToPrivateEndpointRegionalModeArrayOutputWithContext(context.Background())
}

func (i PrivateEndpointRegionalModeArray) ToPrivateEndpointRegionalModeArrayOutputWithContext(ctx context.Context) PrivateEndpointRegionalModeArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointRegionalModeArrayOutput)
}

// PrivateEndpointRegionalModeMapInput is an input type that accepts PrivateEndpointRegionalModeMap and PrivateEndpointRegionalModeMapOutput values.
// You can construct a concrete instance of `PrivateEndpointRegionalModeMapInput` via:
//
//	PrivateEndpointRegionalModeMap{ "key": PrivateEndpointRegionalModeArgs{...} }
type PrivateEndpointRegionalModeMapInput interface {
	pulumi.Input

	ToPrivateEndpointRegionalModeMapOutput() PrivateEndpointRegionalModeMapOutput
	ToPrivateEndpointRegionalModeMapOutputWithContext(context.Context) PrivateEndpointRegionalModeMapOutput
}

type PrivateEndpointRegionalModeMap map[string]PrivateEndpointRegionalModeInput

func (PrivateEndpointRegionalModeMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateEndpointRegionalMode)(nil)).Elem()
}

func (i PrivateEndpointRegionalModeMap) ToPrivateEndpointRegionalModeMapOutput() PrivateEndpointRegionalModeMapOutput {
	return i.ToPrivateEndpointRegionalModeMapOutputWithContext(context.Background())
}

func (i PrivateEndpointRegionalModeMap) ToPrivateEndpointRegionalModeMapOutputWithContext(ctx context.Context) PrivateEndpointRegionalModeMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(PrivateEndpointRegionalModeMapOutput)
}

type PrivateEndpointRegionalModeOutput struct{ *pulumi.OutputState }

func (PrivateEndpointRegionalModeOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**PrivateEndpointRegionalMode)(nil)).Elem()
}

func (o PrivateEndpointRegionalModeOutput) ToPrivateEndpointRegionalModeOutput() PrivateEndpointRegionalModeOutput {
	return o
}

func (o PrivateEndpointRegionalModeOutput) ToPrivateEndpointRegionalModeOutputWithContext(ctx context.Context) PrivateEndpointRegionalModeOutput {
	return o
}

// Flag that indicates whether the regionalized private endpoint setting is enabled for the project.   Set this value to true to create more than one private endpoint in a cloud provider region to connect to multi-region and global Atlas sharded clusters. You can enable this setting only if your Atlas project contains no replica sets. You can't disable this setting if you have:
//   - More than one private endpoint in more than one region, or
//   - More than one private endpoint in one region and one private endpoint in one or more regions.
//     You can create only sharded clusters when you enable the regionalized private endpoint setting. You can't create replica sets.
func (o PrivateEndpointRegionalModeOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *PrivateEndpointRegionalMode) pulumi.BoolOutput { return v.Enabled }).(pulumi.BoolOutput)
}

// Unique identifier for the project.
func (o PrivateEndpointRegionalModeOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *PrivateEndpointRegionalMode) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type PrivateEndpointRegionalModeArrayOutput struct{ *pulumi.OutputState }

func (PrivateEndpointRegionalModeArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*PrivateEndpointRegionalMode)(nil)).Elem()
}

func (o PrivateEndpointRegionalModeArrayOutput) ToPrivateEndpointRegionalModeArrayOutput() PrivateEndpointRegionalModeArrayOutput {
	return o
}

func (o PrivateEndpointRegionalModeArrayOutput) ToPrivateEndpointRegionalModeArrayOutputWithContext(ctx context.Context) PrivateEndpointRegionalModeArrayOutput {
	return o
}

func (o PrivateEndpointRegionalModeArrayOutput) Index(i pulumi.IntInput) PrivateEndpointRegionalModeOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *PrivateEndpointRegionalMode {
		return vs[0].([]*PrivateEndpointRegionalMode)[vs[1].(int)]
	}).(PrivateEndpointRegionalModeOutput)
}

type PrivateEndpointRegionalModeMapOutput struct{ *pulumi.OutputState }

func (PrivateEndpointRegionalModeMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*PrivateEndpointRegionalMode)(nil)).Elem()
}

func (o PrivateEndpointRegionalModeMapOutput) ToPrivateEndpointRegionalModeMapOutput() PrivateEndpointRegionalModeMapOutput {
	return o
}

func (o PrivateEndpointRegionalModeMapOutput) ToPrivateEndpointRegionalModeMapOutputWithContext(ctx context.Context) PrivateEndpointRegionalModeMapOutput {
	return o
}

func (o PrivateEndpointRegionalModeMapOutput) MapIndex(k pulumi.StringInput) PrivateEndpointRegionalModeOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *PrivateEndpointRegionalMode {
		return vs[0].(map[string]*PrivateEndpointRegionalMode)[vs[1].(string)]
	}).(PrivateEndpointRegionalModeOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateEndpointRegionalModeInput)(nil)).Elem(), &PrivateEndpointRegionalMode{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateEndpointRegionalModeArrayInput)(nil)).Elem(), PrivateEndpointRegionalModeArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*PrivateEndpointRegionalModeMapInput)(nil)).Elem(), PrivateEndpointRegionalModeMap{})
	pulumi.RegisterOutputType(PrivateEndpointRegionalModeOutput{})
	pulumi.RegisterOutputType(PrivateEndpointRegionalModeArrayOutput{})
	pulumi.RegisterOutputType(PrivateEndpointRegionalModeMapOutput{})
}
