// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: MongodbEmployeeAccessGrant
//
// `MongodbEmployeeAccessGrant` provides a MongoDB Employee Access Grant resource. The resource lets you create, delete, update and import a MongoDB employee access grant.
//
// ## Example Usage
//
// ### S
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewMongodbEmployeeAccessGrant(ctx, "example", &mongodbatlas.MongodbEmployeeAccessGrantArgs{
//				ProjectId:      pulumi.Any(projectId),
//				ClusterName:    pulumi.Any(clusterName),
//				GrantType:      pulumi.String("CLUSTER_INFRASTRUCTURE_AND_APP_SERVICES_SYNC_DATA"),
//				ExpirationTime: pulumi.String("2025-01-01T12:00:00Z"),
//			})
//			if err != nil {
//				return err
//			}
//			dsExample, err := mongodbatlas.LookupMongodbEmployeeAccessGrant(ctx, &mongodbatlas.LookupMongodbEmployeeAccessGrantArgs{
//				ProjectId:   projectId,
//				ClusterName: clusterName,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("grantType", dsExample.GrantType)
//			ctx.Export("expirationTime", dsExample.ExpirationTime)
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// The resource can be imported using project ID and cluster name, in the format `PROJECTID-CLUSTERNAME`, e.g.
//
// For more information see: [MongoDB Employee Access Grant API doc](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Clusters/operation/grantMongoDBEmployeeAccess).
type MongodbEmployeeAccessGrant struct {
	pulumi.CustomResourceState

	// Human-readable label that identifies this cluster.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Expiration date for the employee access grant.
	ExpirationTime pulumi.StringOutput `pulumi:"expirationTime"`
	// Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
	GrantType pulumi.StringOutput `pulumi:"grantType"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
}

// NewMongodbEmployeeAccessGrant registers a new resource with the given unique name, arguments, and options.
func NewMongodbEmployeeAccessGrant(ctx *pulumi.Context,
	name string, args *MongodbEmployeeAccessGrantArgs, opts ...pulumi.ResourceOption) (*MongodbEmployeeAccessGrant, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.ExpirationTime == nil {
		return nil, errors.New("invalid value for required argument 'ExpirationTime'")
	}
	if args.GrantType == nil {
		return nil, errors.New("invalid value for required argument 'GrantType'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource MongodbEmployeeAccessGrant
	err := ctx.RegisterResource("mongodbatlas:index/mongodbEmployeeAccessGrant:MongodbEmployeeAccessGrant", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetMongodbEmployeeAccessGrant gets an existing MongodbEmployeeAccessGrant resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetMongodbEmployeeAccessGrant(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *MongodbEmployeeAccessGrantState, opts ...pulumi.ResourceOption) (*MongodbEmployeeAccessGrant, error) {
	var resource MongodbEmployeeAccessGrant
	err := ctx.ReadResource("mongodbatlas:index/mongodbEmployeeAccessGrant:MongodbEmployeeAccessGrant", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering MongodbEmployeeAccessGrant resources.
type mongodbEmployeeAccessGrantState struct {
	// Human-readable label that identifies this cluster.
	ClusterName *string `pulumi:"clusterName"`
	// Expiration date for the employee access grant.
	ExpirationTime *string `pulumi:"expirationTime"`
	// Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
	GrantType *string `pulumi:"grantType"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId *string `pulumi:"projectId"`
}

type MongodbEmployeeAccessGrantState struct {
	// Human-readable label that identifies this cluster.
	ClusterName pulumi.StringPtrInput
	// Expiration date for the employee access grant.
	ExpirationTime pulumi.StringPtrInput
	// Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
	GrantType pulumi.StringPtrInput
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId pulumi.StringPtrInput
}

func (MongodbEmployeeAccessGrantState) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbEmployeeAccessGrantState)(nil)).Elem()
}

type mongodbEmployeeAccessGrantArgs struct {
	// Human-readable label that identifies this cluster.
	ClusterName string `pulumi:"clusterName"`
	// Expiration date for the employee access grant.
	ExpirationTime string `pulumi:"expirationTime"`
	// Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
	GrantType string `pulumi:"grantType"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a MongodbEmployeeAccessGrant resource.
type MongodbEmployeeAccessGrantArgs struct {
	// Human-readable label that identifies this cluster.
	ClusterName pulumi.StringInput
	// Expiration date for the employee access grant.
	ExpirationTime pulumi.StringInput
	// Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
	GrantType pulumi.StringInput
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId pulumi.StringInput
}

func (MongodbEmployeeAccessGrantArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*mongodbEmployeeAccessGrantArgs)(nil)).Elem()
}

type MongodbEmployeeAccessGrantInput interface {
	pulumi.Input

	ToMongodbEmployeeAccessGrantOutput() MongodbEmployeeAccessGrantOutput
	ToMongodbEmployeeAccessGrantOutputWithContext(ctx context.Context) MongodbEmployeeAccessGrantOutput
}

func (*MongodbEmployeeAccessGrant) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbEmployeeAccessGrant)(nil)).Elem()
}

func (i *MongodbEmployeeAccessGrant) ToMongodbEmployeeAccessGrantOutput() MongodbEmployeeAccessGrantOutput {
	return i.ToMongodbEmployeeAccessGrantOutputWithContext(context.Background())
}

func (i *MongodbEmployeeAccessGrant) ToMongodbEmployeeAccessGrantOutputWithContext(ctx context.Context) MongodbEmployeeAccessGrantOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbEmployeeAccessGrantOutput)
}

// MongodbEmployeeAccessGrantArrayInput is an input type that accepts MongodbEmployeeAccessGrantArray and MongodbEmployeeAccessGrantArrayOutput values.
// You can construct a concrete instance of `MongodbEmployeeAccessGrantArrayInput` via:
//
//	MongodbEmployeeAccessGrantArray{ MongodbEmployeeAccessGrantArgs{...} }
type MongodbEmployeeAccessGrantArrayInput interface {
	pulumi.Input

	ToMongodbEmployeeAccessGrantArrayOutput() MongodbEmployeeAccessGrantArrayOutput
	ToMongodbEmployeeAccessGrantArrayOutputWithContext(context.Context) MongodbEmployeeAccessGrantArrayOutput
}

type MongodbEmployeeAccessGrantArray []MongodbEmployeeAccessGrantInput

func (MongodbEmployeeAccessGrantArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbEmployeeAccessGrant)(nil)).Elem()
}

func (i MongodbEmployeeAccessGrantArray) ToMongodbEmployeeAccessGrantArrayOutput() MongodbEmployeeAccessGrantArrayOutput {
	return i.ToMongodbEmployeeAccessGrantArrayOutputWithContext(context.Background())
}

func (i MongodbEmployeeAccessGrantArray) ToMongodbEmployeeAccessGrantArrayOutputWithContext(ctx context.Context) MongodbEmployeeAccessGrantArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbEmployeeAccessGrantArrayOutput)
}

// MongodbEmployeeAccessGrantMapInput is an input type that accepts MongodbEmployeeAccessGrantMap and MongodbEmployeeAccessGrantMapOutput values.
// You can construct a concrete instance of `MongodbEmployeeAccessGrantMapInput` via:
//
//	MongodbEmployeeAccessGrantMap{ "key": MongodbEmployeeAccessGrantArgs{...} }
type MongodbEmployeeAccessGrantMapInput interface {
	pulumi.Input

	ToMongodbEmployeeAccessGrantMapOutput() MongodbEmployeeAccessGrantMapOutput
	ToMongodbEmployeeAccessGrantMapOutputWithContext(context.Context) MongodbEmployeeAccessGrantMapOutput
}

type MongodbEmployeeAccessGrantMap map[string]MongodbEmployeeAccessGrantInput

func (MongodbEmployeeAccessGrantMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbEmployeeAccessGrant)(nil)).Elem()
}

func (i MongodbEmployeeAccessGrantMap) ToMongodbEmployeeAccessGrantMapOutput() MongodbEmployeeAccessGrantMapOutput {
	return i.ToMongodbEmployeeAccessGrantMapOutputWithContext(context.Background())
}

func (i MongodbEmployeeAccessGrantMap) ToMongodbEmployeeAccessGrantMapOutputWithContext(ctx context.Context) MongodbEmployeeAccessGrantMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(MongodbEmployeeAccessGrantMapOutput)
}

type MongodbEmployeeAccessGrantOutput struct{ *pulumi.OutputState }

func (MongodbEmployeeAccessGrantOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**MongodbEmployeeAccessGrant)(nil)).Elem()
}

func (o MongodbEmployeeAccessGrantOutput) ToMongodbEmployeeAccessGrantOutput() MongodbEmployeeAccessGrantOutput {
	return o
}

func (o MongodbEmployeeAccessGrantOutput) ToMongodbEmployeeAccessGrantOutputWithContext(ctx context.Context) MongodbEmployeeAccessGrantOutput {
	return o
}

// Human-readable label that identifies this cluster.
func (o MongodbEmployeeAccessGrantOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbEmployeeAccessGrant) pulumi.StringOutput { return v.ClusterName }).(pulumi.StringOutput)
}

// Expiration date for the employee access grant.
func (o MongodbEmployeeAccessGrantOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbEmployeeAccessGrant) pulumi.StringOutput { return v.ExpirationTime }).(pulumi.StringOutput)
}

// Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
func (o MongodbEmployeeAccessGrantOutput) GrantType() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbEmployeeAccessGrant) pulumi.StringOutput { return v.GrantType }).(pulumi.StringOutput)
}

// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
func (o MongodbEmployeeAccessGrantOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *MongodbEmployeeAccessGrant) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

type MongodbEmployeeAccessGrantArrayOutput struct{ *pulumi.OutputState }

func (MongodbEmployeeAccessGrantArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*MongodbEmployeeAccessGrant)(nil)).Elem()
}

func (o MongodbEmployeeAccessGrantArrayOutput) ToMongodbEmployeeAccessGrantArrayOutput() MongodbEmployeeAccessGrantArrayOutput {
	return o
}

func (o MongodbEmployeeAccessGrantArrayOutput) ToMongodbEmployeeAccessGrantArrayOutputWithContext(ctx context.Context) MongodbEmployeeAccessGrantArrayOutput {
	return o
}

func (o MongodbEmployeeAccessGrantArrayOutput) Index(i pulumi.IntInput) MongodbEmployeeAccessGrantOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *MongodbEmployeeAccessGrant {
		return vs[0].([]*MongodbEmployeeAccessGrant)[vs[1].(int)]
	}).(MongodbEmployeeAccessGrantOutput)
}

type MongodbEmployeeAccessGrantMapOutput struct{ *pulumi.OutputState }

func (MongodbEmployeeAccessGrantMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*MongodbEmployeeAccessGrant)(nil)).Elem()
}

func (o MongodbEmployeeAccessGrantMapOutput) ToMongodbEmployeeAccessGrantMapOutput() MongodbEmployeeAccessGrantMapOutput {
	return o
}

func (o MongodbEmployeeAccessGrantMapOutput) ToMongodbEmployeeAccessGrantMapOutputWithContext(ctx context.Context) MongodbEmployeeAccessGrantMapOutput {
	return o
}

func (o MongodbEmployeeAccessGrantMapOutput) MapIndex(k pulumi.StringInput) MongodbEmployeeAccessGrantOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *MongodbEmployeeAccessGrant {
		return vs[0].(map[string]*MongodbEmployeeAccessGrant)[vs[1].(string)]
	}).(MongodbEmployeeAccessGrantOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbEmployeeAccessGrantInput)(nil)).Elem(), &MongodbEmployeeAccessGrant{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbEmployeeAccessGrantArrayInput)(nil)).Elem(), MongodbEmployeeAccessGrantArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*MongodbEmployeeAccessGrantMapInput)(nil)).Elem(), MongodbEmployeeAccessGrantMap{})
	pulumi.RegisterOutputType(MongodbEmployeeAccessGrantOutput{})
	pulumi.RegisterOutputType(MongodbEmployeeAccessGrantArrayOutput{})
	pulumi.RegisterOutputType(MongodbEmployeeAccessGrantMapOutput{})
}
