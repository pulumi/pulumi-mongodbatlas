// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## --
//
// layout: "mongodbatlas"
// page_title: "MongoDB Atlas: advancedCluster"
// sidebar_current: "docs-mongodbatlas-datasource-advanced-cluster"
// description: |-
//     Describe an Advanced Cluster.
// ---
//
// # AdvancedCluster
//
// `AdvancedCluster` describes an Advanced Cluster. The data source requires your Project ID.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
//
// > **IMPORTANT:**
// <br> &#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
// <br> &#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
func LookupAdvancedCluster(ctx *pulumi.Context, args *LookupAdvancedClusterArgs, opts ...pulumi.InvokeOption) (*LookupAdvancedClusterResult, error) {
	var rv LookupAdvancedClusterResult
	err := ctx.Invoke("mongodbatlas:index/getAdvancedCluster:getAdvancedCluster", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAdvancedCluster.
type LookupAdvancedClusterArgs struct {
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
	Name string `pulumi:"name"`
	// Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled *bool `pulumi:"pitEnabled"`
	// The unique ID for the project to create the database user.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getAdvancedCluster.
type LookupAdvancedClusterResult struct {
	// Get the advanced configuration options. See Advanced Configuration below for more details.
	AdvancedConfigurations []GetAdvancedClusterAdvancedConfiguration `pulumi:"advancedConfigurations"`
	BackupEnabled          bool                                      `pulumi:"backupEnabled"`
	// Configuration settings applied to BI Connector for Atlas on this cluster. See below.
	BiConnectors []GetAdvancedClusterBiConnector `pulumi:"biConnectors"`
	// Type of the cluster that you want to create.
	ClusterType string `pulumi:"clusterType"`
	// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
	ConnectionStrings []GetAdvancedClusterConnectionString `pulumi:"connectionStrings"`
	CreateDate        string                               `pulumi:"createDate"`
	// Capacity, in gigabytes, of the host's root volume.
	DiskSizeGb float64 `pulumi:"diskSizeGb"`
	// Possible values are AWS, GCP, AZURE or NONE.
	EncryptionAtRestProvider string `pulumi:"encryptionAtRestProvider"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
	Labels []GetAdvancedClusterLabel `pulumi:"labels"`
	// Version of the cluster to deploy.
	MongoDbMajorVersion string `pulumi:"mongoDbMajorVersion"`
	// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
	MongoDbVersion string `pulumi:"mongoDbVersion"`
	Name           string `pulumi:"name"`
	// Flag that indicates whether the cluster is paused or not.
	Paused bool `pulumi:"paused"`
	// Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled bool   `pulumi:"pitEnabled"`
	ProjectId  string `pulumi:"projectId"`
	// Configuration for cluster regions and the hardware provisioned in them. See below
	ReplicationSpecs []GetAdvancedClusterReplicationSpec `pulumi:"replicationSpecs"`
	// Certificate Authority that MongoDB Atlas clusters use.
	RootCertType string `pulumi:"rootCertType"`
	// Current state of the cluster. The possible states are:
	StateName string `pulumi:"stateName"`
	// Release cadence that Atlas uses for this cluster.
	VersionReleaseSystem string `pulumi:"versionReleaseSystem"`
}

func LookupAdvancedClusterOutput(ctx *pulumi.Context, args LookupAdvancedClusterOutputArgs, opts ...pulumi.InvokeOption) LookupAdvancedClusterResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAdvancedClusterResult, error) {
			args := v.(LookupAdvancedClusterArgs)
			r, err := LookupAdvancedCluster(ctx, &args, opts...)
			return *r, err
		}).(LookupAdvancedClusterResultOutput)
}

// A collection of arguments for invoking getAdvancedCluster.
type LookupAdvancedClusterOutputArgs struct {
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
	Name pulumi.StringInput `pulumi:"name"`
	// Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled pulumi.BoolPtrInput `pulumi:"pitEnabled"`
	// The unique ID for the project to create the database user.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupAdvancedClusterOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAdvancedClusterArgs)(nil)).Elem()
}

// A collection of values returned by getAdvancedCluster.
type LookupAdvancedClusterResultOutput struct{ *pulumi.OutputState }

func (LookupAdvancedClusterResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAdvancedClusterResult)(nil)).Elem()
}

func (o LookupAdvancedClusterResultOutput) ToLookupAdvancedClusterResultOutput() LookupAdvancedClusterResultOutput {
	return o
}

func (o LookupAdvancedClusterResultOutput) ToLookupAdvancedClusterResultOutputWithContext(ctx context.Context) LookupAdvancedClusterResultOutput {
	return o
}

// Get the advanced configuration options. See Advanced Configuration below for more details.
func (o LookupAdvancedClusterResultOutput) AdvancedConfigurations() GetAdvancedClusterAdvancedConfigurationArrayOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) []GetAdvancedClusterAdvancedConfiguration {
		return v.AdvancedConfigurations
	}).(GetAdvancedClusterAdvancedConfigurationArrayOutput)
}

func (o LookupAdvancedClusterResultOutput) BackupEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) bool { return v.BackupEnabled }).(pulumi.BoolOutput)
}

// Configuration settings applied to BI Connector for Atlas on this cluster. See below.
func (o LookupAdvancedClusterResultOutput) BiConnectors() GetAdvancedClusterBiConnectorArrayOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) []GetAdvancedClusterBiConnector { return v.BiConnectors }).(GetAdvancedClusterBiConnectorArrayOutput)
}

// Type of the cluster that you want to create.
func (o LookupAdvancedClusterResultOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) string { return v.ClusterType }).(pulumi.StringOutput)
}

// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
func (o LookupAdvancedClusterResultOutput) ConnectionStrings() GetAdvancedClusterConnectionStringArrayOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) []GetAdvancedClusterConnectionString { return v.ConnectionStrings }).(GetAdvancedClusterConnectionStringArrayOutput)
}

func (o LookupAdvancedClusterResultOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) string { return v.CreateDate }).(pulumi.StringOutput)
}

// Capacity, in gigabytes, of the host's root volume.
func (o LookupAdvancedClusterResultOutput) DiskSizeGb() pulumi.Float64Output {
	return o.ApplyT(func(v LookupAdvancedClusterResult) float64 { return v.DiskSizeGb }).(pulumi.Float64Output)
}

// Possible values are AWS, GCP, AZURE or NONE.
func (o LookupAdvancedClusterResultOutput) EncryptionAtRestProvider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) string { return v.EncryptionAtRestProvider }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupAdvancedClusterResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) string { return v.Id }).(pulumi.StringOutput)
}

// Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
func (o LookupAdvancedClusterResultOutput) Labels() GetAdvancedClusterLabelArrayOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) []GetAdvancedClusterLabel { return v.Labels }).(GetAdvancedClusterLabelArrayOutput)
}

// Version of the cluster to deploy.
func (o LookupAdvancedClusterResultOutput) MongoDbMajorVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) string { return v.MongoDbMajorVersion }).(pulumi.StringOutput)
}

// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
func (o LookupAdvancedClusterResultOutput) MongoDbVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) string { return v.MongoDbVersion }).(pulumi.StringOutput)
}

func (o LookupAdvancedClusterResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) string { return v.Name }).(pulumi.StringOutput)
}

// Flag that indicates whether the cluster is paused or not.
func (o LookupAdvancedClusterResultOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) bool { return v.Paused }).(pulumi.BoolOutput)
}

// Flag that indicates if the cluster uses Continuous Cloud Backup.
func (o LookupAdvancedClusterResultOutput) PitEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) bool { return v.PitEnabled }).(pulumi.BoolOutput)
}

func (o LookupAdvancedClusterResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Configuration for cluster regions and the hardware provisioned in them. See below
func (o LookupAdvancedClusterResultOutput) ReplicationSpecs() GetAdvancedClusterReplicationSpecArrayOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) []GetAdvancedClusterReplicationSpec { return v.ReplicationSpecs }).(GetAdvancedClusterReplicationSpecArrayOutput)
}

// Certificate Authority that MongoDB Atlas clusters use.
func (o LookupAdvancedClusterResultOutput) RootCertType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) string { return v.RootCertType }).(pulumi.StringOutput)
}

// Current state of the cluster. The possible states are:
func (o LookupAdvancedClusterResultOutput) StateName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) string { return v.StateName }).(pulumi.StringOutput)
}

// Release cadence that Atlas uses for this cluster.
func (o LookupAdvancedClusterResultOutput) VersionReleaseSystem() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAdvancedClusterResult) string { return v.VersionReleaseSystem }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAdvancedClusterResultOutput{})
}
