// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Data Source: MongodbEmployeeAccessGrant
//
// `MongodbEmployeeAccessGrant` describes a MongoDB employee access grant.
//
// ## Example Usage
//
// ### S
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewMongodbEmployeeAccessGrant(ctx, "example", &mongodbatlas.MongodbEmployeeAccessGrantArgs{
//				ProjectId:      pulumi.Any(projectId),
//				ClusterName:    pulumi.Any(clusterName),
//				GrantType:      pulumi.String("CLUSTER_INFRASTRUCTURE_AND_APP_SERVICES_SYNC_DATA"),
//				ExpirationTime: pulumi.String("2025-01-01T12:00:00Z"),
//			})
//			if err != nil {
//				return err
//			}
//			dsExample, err := mongodbatlas.LookupMongodbEmployeeAccessGrant(ctx, &mongodbatlas.LookupMongodbEmployeeAccessGrantArgs{
//				ProjectId:   projectId,
//				ClusterName: clusterName,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			ctx.Export("grantType", dsExample.GrantType)
//			ctx.Export("expirationTime", dsExample.ExpirationTime)
//			return nil
//		})
//	}
//
// ```
func LookupMongodbEmployeeAccessGrant(ctx *pulumi.Context, args *LookupMongodbEmployeeAccessGrantArgs, opts ...pulumi.InvokeOption) (*LookupMongodbEmployeeAccessGrantResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupMongodbEmployeeAccessGrantResult
	err := ctx.Invoke("mongodbatlas:index/getMongodbEmployeeAccessGrant:getMongodbEmployeeAccessGrant", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getMongodbEmployeeAccessGrant.
type LookupMongodbEmployeeAccessGrantArgs struct {
	// Human-readable label that identifies this cluster.
	ClusterName string `pulumi:"clusterName"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getMongodbEmployeeAccessGrant.
type LookupMongodbEmployeeAccessGrantResult struct {
	// Human-readable label that identifies this cluster.
	ClusterName    string `pulumi:"clusterName"`
	ExpirationTime string `pulumi:"expirationTime"`
	GrantType      string `pulumi:"grantType"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId string `pulumi:"projectId"`
}

func LookupMongodbEmployeeAccessGrantOutput(ctx *pulumi.Context, args LookupMongodbEmployeeAccessGrantOutputArgs, opts ...pulumi.InvokeOption) LookupMongodbEmployeeAccessGrantResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupMongodbEmployeeAccessGrantResultOutput, error) {
			args := v.(LookupMongodbEmployeeAccessGrantArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("mongodbatlas:index/getMongodbEmployeeAccessGrant:getMongodbEmployeeAccessGrant", args, LookupMongodbEmployeeAccessGrantResultOutput{}, options).(LookupMongodbEmployeeAccessGrantResultOutput), nil
		}).(LookupMongodbEmployeeAccessGrantResultOutput)
}

// A collection of arguments for invoking getMongodbEmployeeAccessGrant.
type LookupMongodbEmployeeAccessGrantOutputArgs struct {
	// Human-readable label that identifies this cluster.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupMongodbEmployeeAccessGrantOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMongodbEmployeeAccessGrantArgs)(nil)).Elem()
}

// A collection of values returned by getMongodbEmployeeAccessGrant.
type LookupMongodbEmployeeAccessGrantResultOutput struct{ *pulumi.OutputState }

func (LookupMongodbEmployeeAccessGrantResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupMongodbEmployeeAccessGrantResult)(nil)).Elem()
}

func (o LookupMongodbEmployeeAccessGrantResultOutput) ToLookupMongodbEmployeeAccessGrantResultOutput() LookupMongodbEmployeeAccessGrantResultOutput {
	return o
}

func (o LookupMongodbEmployeeAccessGrantResultOutput) ToLookupMongodbEmployeeAccessGrantResultOutputWithContext(ctx context.Context) LookupMongodbEmployeeAccessGrantResultOutput {
	return o
}

// Human-readable label that identifies this cluster.
func (o LookupMongodbEmployeeAccessGrantResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbEmployeeAccessGrantResult) string { return v.ClusterName }).(pulumi.StringOutput)
}

func (o LookupMongodbEmployeeAccessGrantResultOutput) ExpirationTime() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbEmployeeAccessGrantResult) string { return v.ExpirationTime }).(pulumi.StringOutput)
}

func (o LookupMongodbEmployeeAccessGrantResultOutput) GrantType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbEmployeeAccessGrantResult) string { return v.GrantType }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupMongodbEmployeeAccessGrantResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbEmployeeAccessGrantResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
func (o LookupMongodbEmployeeAccessGrantResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupMongodbEmployeeAccessGrantResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupMongodbEmployeeAccessGrantResultOutput{})
}
