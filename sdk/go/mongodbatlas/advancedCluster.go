// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: AdvancedCluster
//
// `AdvancedCluster` provides an Advanced Cluster resource. The resource lets you create, edit and delete advanced clusters. The resource requires your Project ID.
//
// More information on considerations for using advanced clusters please see [Considerations](https://docs.atlas.mongodb.com/reference/api/cluster-advanced/create-one-cluster-advanced/#considerations)
//
// > **IMPORTANT:**
// <br> &#8226; The primary difference between `Cluster` is that `AdvancedCluster` supports multi-cloud clusters.  We recommend new users start with the `AdvancedCluster` resource.
//
// > **NOTE:** If Backup Compliance Policy is enabled for the project for which this backup schedule is defined, you cannot modify the backup schedule for an individual cluster below the minimum requirements set in the Backup Compliance Policy.  See [Backup Compliance Policy Prohibited Actions and Considerations](https://www.mongodb.com/docs/atlas/backup/cloud-backup/backup-compliance-policy/#configure-a-backup-compliance-policy).
//
// <br> &#8226; Upgrading the shared tier is supported. Any change from a shared tier cluster (a tenant) to a different instance size will be considered a tenant upgrade. When upgrading from the shared tier, change the `providerName` from "TENANT" to your preferred provider (AWS, GCP or Azure) and remove the variable `backingProviderName`.  See the Example Tenant Cluster Upgrade below.   Note you can upgrade a shared tier cluster only to a single provider on an M10-tier cluster or greater.\
// <br> &#8226; **IMPORTANT NOTE** When upgrading from the shared tier, *only* the upgrade changes will be applied. This helps avoid a corrupt state file in the event that the upgrade succeeds but subsequent updates fail within the same `pulumi up`. To apply additional cluster changes, run a secondary `pulumi up` after the upgrade succeeds.
// > **NOTE:** Groups and projects are synonymous terms. You might find groupId in the official documentation.
//
// > **NOTE:** A network container is created for each provider/region combination on the advanced cluster. This can be referenced via a computed attribute for use with other resources. Refer to the `replication_specs.#.container_id` attribute in the Attributes Reference for more information.
//
// > **NOTE:** To enable Cluster Extended Storage Sizes use the `isExtendedStorageSizesEnabled` parameter in the Project resource.
//
// > **NOTE:** The Low-CPU instance clusters are prefixed with `R`, for example `R40`. For complete list of Low-CPU instance clusters see Cluster Configuration Options under each Cloud Provider (https://www.mongodb.com/docs/atlas/reference/cloud-providers/).
//
// ## Example Usage
//
// ### Example single provider and single region
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewAdvancedCluster(ctx, "test", &mongodbatlas.AdvancedClusterArgs{
//				ProjectId:   pulumi.String("PROJECT ID"),
//				Name:        pulumi.String("NAME OF CLUSTER"),
//				ClusterType: pulumi.String("REPLICASET"),
//				ReplicationSpecs: mongodbatlas.AdvancedClusterReplicationSpecArray{
//					&mongodbatlas.AdvancedClusterReplicationSpecArgs{
//						RegionConfigs: mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArray{
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(3),
//								},
//								AnalyticsSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigAnalyticsSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(1),
//								},
//								ProviderName: pulumi.String("AWS"),
//								Priority:     pulumi.Int(7),
//								RegionName:   pulumi.String("US_EAST_1"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example Tenant Cluster
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewAdvancedCluster(ctx, "test", &mongodbatlas.AdvancedClusterArgs{
//				ProjectId:   pulumi.String("PROJECT ID"),
//				Name:        pulumi.String("NAME OF CLUSTER"),
//				ClusterType: pulumi.String("REPLICASET"),
//				ReplicationSpecs: mongodbatlas.AdvancedClusterReplicationSpecArray{
//					&mongodbatlas.AdvancedClusterReplicationSpecArgs{
//						RegionConfigs: mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArray{
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M5"),
//								},
//								ProviderName:        pulumi.String("TENANT"),
//								BackingProviderName: pulumi.String("AWS"),
//								RegionName:          pulumi.String("US_EAST_1"),
//								Priority:            pulumi.Int(7),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example Tenant Cluster Upgrade
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewAdvancedCluster(ctx, "test", &mongodbatlas.AdvancedClusterArgs{
//				ProjectId:   pulumi.String("PROJECT ID"),
//				Name:        pulumi.String("NAME OF CLUSTER"),
//				ClusterType: pulumi.String("REPLICASET"),
//				ReplicationSpecs: mongodbatlas.AdvancedClusterReplicationSpecArray{
//					&mongodbatlas.AdvancedClusterReplicationSpecArgs{
//						RegionConfigs: mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArray{
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//								},
//								ProviderName: pulumi.String("AWS"),
//								RegionName:   pulumi.String("US_EAST_1"),
//								Priority:     pulumi.Int(7),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example Multi-Cloud Cluster
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewAdvancedCluster(ctx, "test", &mongodbatlas.AdvancedClusterArgs{
//				ProjectId:   pulumi.String("PROJECT ID"),
//				Name:        pulumi.String("NAME OF CLUSTER"),
//				ClusterType: pulumi.String("REPLICASET"),
//				ReplicationSpecs: mongodbatlas.AdvancedClusterReplicationSpecArray{
//					&mongodbatlas.AdvancedClusterReplicationSpecArgs{
//						RegionConfigs: mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArray{
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(3),
//								},
//								AnalyticsSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigAnalyticsSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(1),
//								},
//								ProviderName: pulumi.String("AWS"),
//								Priority:     pulumi.Int(7),
//								RegionName:   pulumi.String("US_EAST_1"),
//							},
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(2),
//								},
//								ProviderName: pulumi.String("GCP"),
//								Priority:     pulumi.Int(6),
//								RegionName:   pulumi.String("NORTH_AMERICA_NORTHEAST_1"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// ### Example of a Multi Cloud Sharded Cluster with 2 shards
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewAdvancedCluster(ctx, "cluster", &mongodbatlas.AdvancedClusterArgs{
//				ProjectId:     pulumi.Any(project.Id),
//				Name:          pulumi.Any(clusterName),
//				ClusterType:   pulumi.String("SHARDED"),
//				BackupEnabled: pulumi.Bool(true),
//				ReplicationSpecs: mongodbatlas.AdvancedClusterReplicationSpecArray{
//					&mongodbatlas.AdvancedClusterReplicationSpecArgs{
//						RegionConfigs: mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArray{
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(3),
//								},
//								ProviderName: pulumi.String("AWS"),
//								Priority:     pulumi.Int(7),
//								RegionName:   pulumi.String("US_EAST_1"),
//							},
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(2),
//								},
//								ProviderName: pulumi.String("AZURE"),
//								Priority:     pulumi.Int(6),
//								RegionName:   pulumi.String("US_EAST_2"),
//							},
//						},
//					},
//					&mongodbatlas.AdvancedClusterReplicationSpecArgs{
//						RegionConfigs: mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArray{
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(3),
//								},
//								ProviderName: pulumi.String("AWS"),
//								Priority:     pulumi.Int(7),
//								RegionName:   pulumi.String("US_EAST_1"),
//							},
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(2),
//								},
//								ProviderName: pulumi.String("AZURE"),
//								Priority:     pulumi.Int(6),
//								RegionName:   pulumi.String("US_EAST_2"),
//							},
//						},
//					},
//				},
//				AdvancedConfiguration: &mongodbatlas.AdvancedClusterAdvancedConfigurationArgs{
//					JavascriptEnabled:                pulumi.Bool(true),
//					OplogSizeMb:                      pulumi.Int(991),
//					SampleRefreshIntervalBiConnector: pulumi.Int(300),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example of a Global Cluster with 2 zones
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewAdvancedCluster(ctx, "cluster", &mongodbatlas.AdvancedClusterArgs{
//				ProjectId:     pulumi.Any(project.Id),
//				Name:          pulumi.Any(clusterName),
//				ClusterType:   pulumi.String("GEOSHARDED"),
//				BackupEnabled: pulumi.Bool(true),
//				ReplicationSpecs: mongodbatlas.AdvancedClusterReplicationSpecArray{
//					&mongodbatlas.AdvancedClusterReplicationSpecArgs{
//						ZoneName: pulumi.String("zone n1"),
//						RegionConfigs: mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArray{
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(3),
//								},
//								ProviderName: pulumi.String("AWS"),
//								Priority:     pulumi.Int(7),
//								RegionName:   pulumi.String("US_EAST_1"),
//							},
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(2),
//								},
//								ProviderName: pulumi.String("AZURE"),
//								Priority:     pulumi.Int(6),
//								RegionName:   pulumi.String("US_EAST_2"),
//							},
//						},
//					},
//					&mongodbatlas.AdvancedClusterReplicationSpecArgs{
//						ZoneName: pulumi.String("zone n1"),
//						RegionConfigs: mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArray{
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(3),
//								},
//								ProviderName: pulumi.String("AWS"),
//								Priority:     pulumi.Int(7),
//								RegionName:   pulumi.String("US_EAST_1"),
//							},
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(2),
//								},
//								ProviderName: pulumi.String("AZURE"),
//								Priority:     pulumi.Int(6),
//								RegionName:   pulumi.String("US_EAST_2"),
//							},
//						},
//					},
//					&mongodbatlas.AdvancedClusterReplicationSpecArgs{
//						ZoneName: pulumi.String("zone n2"),
//						RegionConfigs: mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArray{
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(3),
//								},
//								ProviderName: pulumi.String("AWS"),
//								Priority:     pulumi.Int(7),
//								RegionName:   pulumi.String("EU_WEST_1"),
//							},
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(2),
//								},
//								ProviderName: pulumi.String("AZURE"),
//								Priority:     pulumi.Int(6),
//								RegionName:   pulumi.String("EUROPE_NORTH"),
//							},
//						},
//					},
//					&mongodbatlas.AdvancedClusterReplicationSpecArgs{
//						ZoneName: pulumi.String("zone n2"),
//						RegionConfigs: mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArray{
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(3),
//								},
//								ProviderName: pulumi.String("AWS"),
//								Priority:     pulumi.Int(7),
//								RegionName:   pulumi.String("EU_WEST_1"),
//							},
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(2),
//								},
//								ProviderName: pulumi.String("AZURE"),
//								Priority:     pulumi.Int(6),
//								RegionName:   pulumi.String("EUROPE_NORTH"),
//							},
//						},
//					},
//				},
//				AdvancedConfiguration: &mongodbatlas.AdvancedClusterAdvancedConfigurationArgs{
//					JavascriptEnabled:                pulumi.Bool(true),
//					OplogSizeMb:                      pulumi.Int(999),
//					SampleRefreshIntervalBiConnector: pulumi.Int(300),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example - Return a Connection String
// Standard
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ctx.Export("standard", cluster.ConnectionStrings[0].Standard)
//			return nil
//		})
//	}
//
// ```
// Standard srv
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			ctx.Export("standardSrv", cluster.ConnectionStrings[0].StandardSrv)
//			return nil
//		})
//	}
//
// ```
// Private with Network peering and Custom DNS AWS enabled
// ## Import
//
// Clusters can be imported using project ID and cluster name, in the format `PROJECTID-CLUSTERNAME`, e.g.
//
// ```sh
// $ pulumi import mongodbatlas:index/advancedCluster:AdvancedCluster my_cluster 1112222b3bf99403840e8934-Cluster0
// ```
// See detailed information for arguments and attributes: [MongoDB API Advanced Clusters](https://docs.atlas.mongodb.com/reference/api/cluster-advanced/create-one-cluster-advanced/)
//
// ~> __IMPORTANT:__
// \n\n &#8226; When a cluster is imported, the resulting schema structure will always return the new schema including `replication_specs` per independent shards of the cluster.
// \n\n &#8226;  Note: The first time `pulumi up` command is run __after__ updating the configuration of an imported cluster, you may receive a `500 Internal Server Error (Error code: "SERVICE_UNAVAILABLE")` error. This is a known temporary issue. If you encounter this, please re-run `pulumi up` and this time the update should succeed.
type AdvancedCluster struct {
	pulumi.CustomResourceState

	// If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
	AcceptDataRisksAndForceReplicaSetReconfig pulumi.StringPtrOutput                     `pulumi:"acceptDataRisksAndForceReplicaSetReconfig"`
	AdvancedConfiguration                     AdvancedClusterAdvancedConfigurationOutput `pulumi:"advancedConfiguration"`
	// Flag that indicates whether the cluster can perform backups.
	// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
	//
	// Backup uses:
	// [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
	// [Shared Cluster Backups](https://docs.atlas.mongodb.com/backup/shared-tier/overview/#std-label-m2-m5-snapshots) for tenant clusters.
	// If "`backupEnabled`" : `false`, the cluster doesn't use Atlas backups.
	//
	// This parameter defaults to false.
	BackupEnabled pulumi.BoolOutput `pulumi:"backupEnabled"`
	// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
	BiConnectorConfig AdvancedClusterBiConnectorConfigOutput `pulumi:"biConnectorConfig"`
	// The cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Type of the cluster that you want to create.
	// Accepted values include:
	// - `REPLICASET` Replica set
	// - `SHARDED`	Sharded cluster
	// - `GEOSHARDED` Global Cluster
	ClusterType pulumi.StringOutput `pulumi:"clusterType"`
	// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
	ConnectionStrings AdvancedClusterConnectionStringArrayOutput `pulumi:"connectionStrings"`
	CreateDate        pulumi.StringOutput                        `pulumi:"createDate"`
	// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_config.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
	//
	// Deprecated: This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide.html.markdown
	DiskSizeGb pulumi.Float64Output `pulumi:"diskSizeGb"`
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
	EncryptionAtRestProvider pulumi.StringOutput `pulumi:"encryptionAtRestProvider"`
	// Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you're an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more info [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
	GlobalClusterSelfManagedSharding pulumi.BoolOutput `pulumi:"globalClusterSelfManagedSharding"`
	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
	//
	// Deprecated: This parameter is deprecated and will be removed by September 2024. Please transition to tags.
	Labels AdvancedClusterLabelArrayOutput `pulumi:"labels"`
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.4`, `5.0`, `6.0` or `7.0`. If omitted, Atlas deploys a cluster that runs MongoDB 7.0. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
	MongoDbMajorVersion pulumi.StringOutput `pulumi:"mongoDbMajorVersion"`
	// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
	MongoDbVersion pulumi.StringOutput `pulumi:"mongoDbVersion"`
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
	Name   pulumi.StringOutput `pulumi:"name"`
	Paused pulumi.BoolOutput   `pulumi:"paused"`
	// Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled pulumi.BoolOutput `pulumi:"pitEnabled"`
	// Unique ID for the project to create the database user.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each replicationSpec `numShards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. See below
	ReplicationSpecs AdvancedClusterReplicationSpecArrayOutput `pulumi:"replicationSpecs"`
	// Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
	RetainBackupsEnabled pulumi.BoolPtrOutput `pulumi:"retainBackupsEnabled"`
	// Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
	RootCertType pulumi.StringOutput `pulumi:"rootCertType"`
	// Current state of the cluster. The possible states are:
	// - IDLE
	// - CREATING
	// - UPDATING
	// - DELETING
	// - DELETED
	// - REPAIRING
	// * `replication_specs.#.container_id` - A key-value map of the Network Peering Container ID(s) for the configuration specified in `regionConfigs`. The Container ID is the id of the container created when the first cluster in the region (AWS/Azure) or project (GCP) was created.  The syntax is `"providerName:regionName" = "containerId"`. Example `AWS:US_EAST_1" = "61e0797dde08fb498ca11a71`.
	StateName pulumi.StringOutput `pulumi:"stateName"`
	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
	Tags AdvancedClusterTagArrayOutput `pulumi:"tags"`
	// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled pulumi.BoolOutput `pulumi:"terminationProtectionEnabled"`
	// Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
	// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
	// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
	VersionReleaseSystem pulumi.StringOutput `pulumi:"versionReleaseSystem"`
}

// NewAdvancedCluster registers a new resource with the given unique name, arguments, and options.
func NewAdvancedCluster(ctx *pulumi.Context,
	name string, args *AdvancedClusterArgs, opts ...pulumi.ResourceOption) (*AdvancedCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterType == nil {
		return nil, errors.New("invalid value for required argument 'ClusterType'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ReplicationSpecs == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationSpecs'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource AdvancedCluster
	err := ctx.RegisterResource("mongodbatlas:index/advancedCluster:AdvancedCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdvancedCluster gets an existing AdvancedCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdvancedCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdvancedClusterState, opts ...pulumi.ResourceOption) (*AdvancedCluster, error) {
	var resource AdvancedCluster
	err := ctx.ReadResource("mongodbatlas:index/advancedCluster:AdvancedCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdvancedCluster resources.
type advancedClusterState struct {
	// If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
	AcceptDataRisksAndForceReplicaSetReconfig *string                               `pulumi:"acceptDataRisksAndForceReplicaSetReconfig"`
	AdvancedConfiguration                     *AdvancedClusterAdvancedConfiguration `pulumi:"advancedConfiguration"`
	// Flag that indicates whether the cluster can perform backups.
	// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
	//
	// Backup uses:
	// [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
	// [Shared Cluster Backups](https://docs.atlas.mongodb.com/backup/shared-tier/overview/#std-label-m2-m5-snapshots) for tenant clusters.
	// If "`backupEnabled`" : `false`, the cluster doesn't use Atlas backups.
	//
	// This parameter defaults to false.
	BackupEnabled *bool `pulumi:"backupEnabled"`
	// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
	BiConnectorConfig *AdvancedClusterBiConnectorConfig `pulumi:"biConnectorConfig"`
	// The cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Type of the cluster that you want to create.
	// Accepted values include:
	// - `REPLICASET` Replica set
	// - `SHARDED`	Sharded cluster
	// - `GEOSHARDED` Global Cluster
	ClusterType *string `pulumi:"clusterType"`
	// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
	ConnectionStrings []AdvancedClusterConnectionString `pulumi:"connectionStrings"`
	CreateDate        *string                           `pulumi:"createDate"`
	// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_config.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
	//
	// Deprecated: This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide.html.markdown
	DiskSizeGb *float64 `pulumi:"diskSizeGb"`
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
	EncryptionAtRestProvider *string `pulumi:"encryptionAtRestProvider"`
	// Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you're an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more info [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
	GlobalClusterSelfManagedSharding *bool `pulumi:"globalClusterSelfManagedSharding"`
	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
	//
	// Deprecated: This parameter is deprecated and will be removed by September 2024. Please transition to tags.
	Labels []AdvancedClusterLabel `pulumi:"labels"`
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.4`, `5.0`, `6.0` or `7.0`. If omitted, Atlas deploys a cluster that runs MongoDB 7.0. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
	MongoDbMajorVersion *string `pulumi:"mongoDbMajorVersion"`
	// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
	MongoDbVersion *string `pulumi:"mongoDbVersion"`
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
	Name   *string `pulumi:"name"`
	Paused *bool   `pulumi:"paused"`
	// Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled *bool `pulumi:"pitEnabled"`
	// Unique ID for the project to create the database user.
	ProjectId *string `pulumi:"projectId"`
	// List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each replicationSpec `numShards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. See below
	ReplicationSpecs []AdvancedClusterReplicationSpec `pulumi:"replicationSpecs"`
	// Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
	RetainBackupsEnabled *bool `pulumi:"retainBackupsEnabled"`
	// Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
	RootCertType *string `pulumi:"rootCertType"`
	// Current state of the cluster. The possible states are:
	// - IDLE
	// - CREATING
	// - UPDATING
	// - DELETING
	// - DELETED
	// - REPAIRING
	// * `replication_specs.#.container_id` - A key-value map of the Network Peering Container ID(s) for the configuration specified in `regionConfigs`. The Container ID is the id of the container created when the first cluster in the region (AWS/Azure) or project (GCP) was created.  The syntax is `"providerName:regionName" = "containerId"`. Example `AWS:US_EAST_1" = "61e0797dde08fb498ca11a71`.
	StateName *string `pulumi:"stateName"`
	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
	Tags []AdvancedClusterTag `pulumi:"tags"`
	// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled *bool `pulumi:"terminationProtectionEnabled"`
	// Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
	// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
	// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
	VersionReleaseSystem *string `pulumi:"versionReleaseSystem"`
}

type AdvancedClusterState struct {
	// If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
	AcceptDataRisksAndForceReplicaSetReconfig pulumi.StringPtrInput
	AdvancedConfiguration                     AdvancedClusterAdvancedConfigurationPtrInput
	// Flag that indicates whether the cluster can perform backups.
	// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
	//
	// Backup uses:
	// [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
	// [Shared Cluster Backups](https://docs.atlas.mongodb.com/backup/shared-tier/overview/#std-label-m2-m5-snapshots) for tenant clusters.
	// If "`backupEnabled`" : `false`, the cluster doesn't use Atlas backups.
	//
	// This parameter defaults to false.
	BackupEnabled pulumi.BoolPtrInput
	// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
	BiConnectorConfig AdvancedClusterBiConnectorConfigPtrInput
	// The cluster ID.
	ClusterId pulumi.StringPtrInput
	// Type of the cluster that you want to create.
	// Accepted values include:
	// - `REPLICASET` Replica set
	// - `SHARDED`	Sharded cluster
	// - `GEOSHARDED` Global Cluster
	ClusterType pulumi.StringPtrInput
	// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
	ConnectionStrings AdvancedClusterConnectionStringArrayInput
	CreateDate        pulumi.StringPtrInput
	// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_config.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
	//
	// Deprecated: This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide.html.markdown
	DiskSizeGb pulumi.Float64PtrInput
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
	EncryptionAtRestProvider pulumi.StringPtrInput
	// Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you're an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more info [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
	GlobalClusterSelfManagedSharding pulumi.BoolPtrInput
	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
	//
	// Deprecated: This parameter is deprecated and will be removed by September 2024. Please transition to tags.
	Labels AdvancedClusterLabelArrayInput
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.4`, `5.0`, `6.0` or `7.0`. If omitted, Atlas deploys a cluster that runs MongoDB 7.0. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
	MongoDbMajorVersion pulumi.StringPtrInput
	// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
	MongoDbVersion pulumi.StringPtrInput
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
	Name   pulumi.StringPtrInput
	Paused pulumi.BoolPtrInput
	// Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled pulumi.BoolPtrInput
	// Unique ID for the project to create the database user.
	ProjectId pulumi.StringPtrInput
	// List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each replicationSpec `numShards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. See below
	ReplicationSpecs AdvancedClusterReplicationSpecArrayInput
	// Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
	RetainBackupsEnabled pulumi.BoolPtrInput
	// Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
	RootCertType pulumi.StringPtrInput
	// Current state of the cluster. The possible states are:
	// - IDLE
	// - CREATING
	// - UPDATING
	// - DELETING
	// - DELETED
	// - REPAIRING
	// * `replication_specs.#.container_id` - A key-value map of the Network Peering Container ID(s) for the configuration specified in `regionConfigs`. The Container ID is the id of the container created when the first cluster in the region (AWS/Azure) or project (GCP) was created.  The syntax is `"providerName:regionName" = "containerId"`. Example `AWS:US_EAST_1" = "61e0797dde08fb498ca11a71`.
	StateName pulumi.StringPtrInput
	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
	Tags AdvancedClusterTagArrayInput
	// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled pulumi.BoolPtrInput
	// Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
	// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
	// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
	VersionReleaseSystem pulumi.StringPtrInput
}

func (AdvancedClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*advancedClusterState)(nil)).Elem()
}

type advancedClusterArgs struct {
	// If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
	AcceptDataRisksAndForceReplicaSetReconfig *string                               `pulumi:"acceptDataRisksAndForceReplicaSetReconfig"`
	AdvancedConfiguration                     *AdvancedClusterAdvancedConfiguration `pulumi:"advancedConfiguration"`
	// Flag that indicates whether the cluster can perform backups.
	// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
	//
	// Backup uses:
	// [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
	// [Shared Cluster Backups](https://docs.atlas.mongodb.com/backup/shared-tier/overview/#std-label-m2-m5-snapshots) for tenant clusters.
	// If "`backupEnabled`" : `false`, the cluster doesn't use Atlas backups.
	//
	// This parameter defaults to false.
	BackupEnabled *bool `pulumi:"backupEnabled"`
	// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
	BiConnectorConfig *AdvancedClusterBiConnectorConfig `pulumi:"biConnectorConfig"`
	// Type of the cluster that you want to create.
	// Accepted values include:
	// - `REPLICASET` Replica set
	// - `SHARDED`	Sharded cluster
	// - `GEOSHARDED` Global Cluster
	ClusterType string `pulumi:"clusterType"`
	// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_config.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
	//
	// Deprecated: This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide.html.markdown
	DiskSizeGb *float64 `pulumi:"diskSizeGb"`
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
	EncryptionAtRestProvider *string `pulumi:"encryptionAtRestProvider"`
	// Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you're an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more info [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
	GlobalClusterSelfManagedSharding *bool `pulumi:"globalClusterSelfManagedSharding"`
	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
	//
	// Deprecated: This parameter is deprecated and will be removed by September 2024. Please transition to tags.
	Labels []AdvancedClusterLabel `pulumi:"labels"`
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.4`, `5.0`, `6.0` or `7.0`. If omitted, Atlas deploys a cluster that runs MongoDB 7.0. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
	MongoDbMajorVersion *string `pulumi:"mongoDbMajorVersion"`
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
	Name   *string `pulumi:"name"`
	Paused *bool   `pulumi:"paused"`
	// Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled *bool `pulumi:"pitEnabled"`
	// Unique ID for the project to create the database user.
	ProjectId string `pulumi:"projectId"`
	// List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each replicationSpec `numShards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. See below
	ReplicationSpecs []AdvancedClusterReplicationSpec `pulumi:"replicationSpecs"`
	// Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
	RetainBackupsEnabled *bool `pulumi:"retainBackupsEnabled"`
	// Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
	RootCertType *string `pulumi:"rootCertType"`
	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
	Tags []AdvancedClusterTag `pulumi:"tags"`
	// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled *bool `pulumi:"terminationProtectionEnabled"`
	// Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
	// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
	// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
	VersionReleaseSystem *string `pulumi:"versionReleaseSystem"`
}

// The set of arguments for constructing a AdvancedCluster resource.
type AdvancedClusterArgs struct {
	// If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
	AcceptDataRisksAndForceReplicaSetReconfig pulumi.StringPtrInput
	AdvancedConfiguration                     AdvancedClusterAdvancedConfigurationPtrInput
	// Flag that indicates whether the cluster can perform backups.
	// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
	//
	// Backup uses:
	// [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
	// [Shared Cluster Backups](https://docs.atlas.mongodb.com/backup/shared-tier/overview/#std-label-m2-m5-snapshots) for tenant clusters.
	// If "`backupEnabled`" : `false`, the cluster doesn't use Atlas backups.
	//
	// This parameter defaults to false.
	BackupEnabled pulumi.BoolPtrInput
	// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
	BiConnectorConfig AdvancedClusterBiConnectorConfigPtrInput
	// Type of the cluster that you want to create.
	// Accepted values include:
	// - `REPLICASET` Replica set
	// - `SHARDED`	Sharded cluster
	// - `GEOSHARDED` Global Cluster
	ClusterType pulumi.StringInput
	// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_config.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
	//
	// Deprecated: This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide.html.markdown
	DiskSizeGb pulumi.Float64PtrInput
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
	EncryptionAtRestProvider pulumi.StringPtrInput
	// Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you're an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more info [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
	GlobalClusterSelfManagedSharding pulumi.BoolPtrInput
	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
	//
	// Deprecated: This parameter is deprecated and will be removed by September 2024. Please transition to tags.
	Labels AdvancedClusterLabelArrayInput
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.4`, `5.0`, `6.0` or `7.0`. If omitted, Atlas deploys a cluster that runs MongoDB 7.0. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
	MongoDbMajorVersion pulumi.StringPtrInput
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
	Name   pulumi.StringPtrInput
	Paused pulumi.BoolPtrInput
	// Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled pulumi.BoolPtrInput
	// Unique ID for the project to create the database user.
	ProjectId pulumi.StringInput
	// List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each replicationSpec `numShards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. See below
	ReplicationSpecs AdvancedClusterReplicationSpecArrayInput
	// Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
	RetainBackupsEnabled pulumi.BoolPtrInput
	// Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
	RootCertType pulumi.StringPtrInput
	// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
	Tags AdvancedClusterTagArrayInput
	// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
	TerminationProtectionEnabled pulumi.BoolPtrInput
	// Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
	// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
	// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
	VersionReleaseSystem pulumi.StringPtrInput
}

func (AdvancedClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*advancedClusterArgs)(nil)).Elem()
}

type AdvancedClusterInput interface {
	pulumi.Input

	ToAdvancedClusterOutput() AdvancedClusterOutput
	ToAdvancedClusterOutputWithContext(ctx context.Context) AdvancedClusterOutput
}

func (*AdvancedCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedCluster)(nil)).Elem()
}

func (i *AdvancedCluster) ToAdvancedClusterOutput() AdvancedClusterOutput {
	return i.ToAdvancedClusterOutputWithContext(context.Background())
}

func (i *AdvancedCluster) ToAdvancedClusterOutputWithContext(ctx context.Context) AdvancedClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedClusterOutput)
}

// AdvancedClusterArrayInput is an input type that accepts AdvancedClusterArray and AdvancedClusterArrayOutput values.
// You can construct a concrete instance of `AdvancedClusterArrayInput` via:
//
//	AdvancedClusterArray{ AdvancedClusterArgs{...} }
type AdvancedClusterArrayInput interface {
	pulumi.Input

	ToAdvancedClusterArrayOutput() AdvancedClusterArrayOutput
	ToAdvancedClusterArrayOutputWithContext(context.Context) AdvancedClusterArrayOutput
}

type AdvancedClusterArray []AdvancedClusterInput

func (AdvancedClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdvancedCluster)(nil)).Elem()
}

func (i AdvancedClusterArray) ToAdvancedClusterArrayOutput() AdvancedClusterArrayOutput {
	return i.ToAdvancedClusterArrayOutputWithContext(context.Background())
}

func (i AdvancedClusterArray) ToAdvancedClusterArrayOutputWithContext(ctx context.Context) AdvancedClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedClusterArrayOutput)
}

// AdvancedClusterMapInput is an input type that accepts AdvancedClusterMap and AdvancedClusterMapOutput values.
// You can construct a concrete instance of `AdvancedClusterMapInput` via:
//
//	AdvancedClusterMap{ "key": AdvancedClusterArgs{...} }
type AdvancedClusterMapInput interface {
	pulumi.Input

	ToAdvancedClusterMapOutput() AdvancedClusterMapOutput
	ToAdvancedClusterMapOutputWithContext(context.Context) AdvancedClusterMapOutput
}

type AdvancedClusterMap map[string]AdvancedClusterInput

func (AdvancedClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdvancedCluster)(nil)).Elem()
}

func (i AdvancedClusterMap) ToAdvancedClusterMapOutput() AdvancedClusterMapOutput {
	return i.ToAdvancedClusterMapOutputWithContext(context.Background())
}

func (i AdvancedClusterMap) ToAdvancedClusterMapOutputWithContext(ctx context.Context) AdvancedClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedClusterMapOutput)
}

type AdvancedClusterOutput struct{ *pulumi.OutputState }

func (AdvancedClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedCluster)(nil)).Elem()
}

func (o AdvancedClusterOutput) ToAdvancedClusterOutput() AdvancedClusterOutput {
	return o
}

func (o AdvancedClusterOutput) ToAdvancedClusterOutputWithContext(ctx context.Context) AdvancedClusterOutput {
	return o
}

// If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
func (o AdvancedClusterOutput) AcceptDataRisksAndForceReplicaSetReconfig() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.StringPtrOutput { return v.AcceptDataRisksAndForceReplicaSetReconfig }).(pulumi.StringPtrOutput)
}

func (o AdvancedClusterOutput) AdvancedConfiguration() AdvancedClusterAdvancedConfigurationOutput {
	return o.ApplyT(func(v *AdvancedCluster) AdvancedClusterAdvancedConfigurationOutput { return v.AdvancedConfiguration }).(AdvancedClusterAdvancedConfigurationOutput)
}

// Flag that indicates whether the cluster can perform backups.
// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
//
// Backup uses:
// [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
// [Shared Cluster Backups](https://docs.atlas.mongodb.com/backup/shared-tier/overview/#std-label-m2-m5-snapshots) for tenant clusters.
// If "`backupEnabled`" : `false`, the cluster doesn't use Atlas backups.
//
// This parameter defaults to false.
func (o AdvancedClusterOutput) BackupEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.BoolOutput { return v.BackupEnabled }).(pulumi.BoolOutput)
}

// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
func (o AdvancedClusterOutput) BiConnectorConfig() AdvancedClusterBiConnectorConfigOutput {
	return o.ApplyT(func(v *AdvancedCluster) AdvancedClusterBiConnectorConfigOutput { return v.BiConnectorConfig }).(AdvancedClusterBiConnectorConfigOutput)
}

// The cluster ID.
func (o AdvancedClusterOutput) ClusterId() pulumi.StringOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.StringOutput { return v.ClusterId }).(pulumi.StringOutput)
}

// Type of the cluster that you want to create.
// Accepted values include:
// - `REPLICASET` Replica set
// - `SHARDED`	Sharded cluster
// - `GEOSHARDED` Global Cluster
func (o AdvancedClusterOutput) ClusterType() pulumi.StringOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.StringOutput { return v.ClusterType }).(pulumi.StringOutput)
}

// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
func (o AdvancedClusterOutput) ConnectionStrings() AdvancedClusterConnectionStringArrayOutput {
	return o.ApplyT(func(v *AdvancedCluster) AdvancedClusterConnectionStringArrayOutput { return v.ConnectionStrings }).(AdvancedClusterConnectionStringArrayOutput)
}

func (o AdvancedClusterOutput) CreateDate() pulumi.StringOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.StringOutput { return v.CreateDate }).(pulumi.StringOutput)
}

// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_config.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
//
// Deprecated: This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide.html.markdown
func (o AdvancedClusterOutput) DiskSizeGb() pulumi.Float64Output {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.Float64Output { return v.DiskSizeGb }).(pulumi.Float64Output)
}

// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
func (o AdvancedClusterOutput) EncryptionAtRestProvider() pulumi.StringOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.StringOutput { return v.EncryptionAtRestProvider }).(pulumi.StringOutput)
}

// Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you're an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more info [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
func (o AdvancedClusterOutput) GlobalClusterSelfManagedSharding() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.BoolOutput { return v.GlobalClusterSelfManagedSharding }).(pulumi.BoolOutput)
}

// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
//
// Deprecated: This parameter is deprecated and will be removed by September 2024. Please transition to tags.
func (o AdvancedClusterOutput) Labels() AdvancedClusterLabelArrayOutput {
	return o.ApplyT(func(v *AdvancedCluster) AdvancedClusterLabelArrayOutput { return v.Labels }).(AdvancedClusterLabelArrayOutput)
}

// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.4`, `5.0`, `6.0` or `7.0`. If omitted, Atlas deploys a cluster that runs MongoDB 7.0. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
func (o AdvancedClusterOutput) MongoDbMajorVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.StringOutput { return v.MongoDbMajorVersion }).(pulumi.StringOutput)
}

// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
func (o AdvancedClusterOutput) MongoDbVersion() pulumi.StringOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.StringOutput { return v.MongoDbVersion }).(pulumi.StringOutput)
}

// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
func (o AdvancedClusterOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

func (o AdvancedClusterOutput) Paused() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.BoolOutput { return v.Paused }).(pulumi.BoolOutput)
}

// Flag that indicates if the cluster uses Continuous Cloud Backup.
func (o AdvancedClusterOutput) PitEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.BoolOutput { return v.PitEnabled }).(pulumi.BoolOutput)
}

// Unique ID for the project to create the database user.
func (o AdvancedClusterOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each replicationSpec `numShards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. See below
func (o AdvancedClusterOutput) ReplicationSpecs() AdvancedClusterReplicationSpecArrayOutput {
	return o.ApplyT(func(v *AdvancedCluster) AdvancedClusterReplicationSpecArrayOutput { return v.ReplicationSpecs }).(AdvancedClusterReplicationSpecArrayOutput)
}

// Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
func (o AdvancedClusterOutput) RetainBackupsEnabled() pulumi.BoolPtrOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.BoolPtrOutput { return v.RetainBackupsEnabled }).(pulumi.BoolPtrOutput)
}

// Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
func (o AdvancedClusterOutput) RootCertType() pulumi.StringOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.StringOutput { return v.RootCertType }).(pulumi.StringOutput)
}

// Current state of the cluster. The possible states are:
// - IDLE
// - CREATING
// - UPDATING
// - DELETING
// - DELETED
// - REPAIRING
// * `replication_specs.#.container_id` - A key-value map of the Network Peering Container ID(s) for the configuration specified in `regionConfigs`. The Container ID is the id of the container created when the first cluster in the region (AWS/Azure) or project (GCP) was created.  The syntax is `"providerName:regionName" = "containerId"`. Example `AWS:US_EAST_1" = "61e0797dde08fb498ca11a71`.
func (o AdvancedClusterOutput) StateName() pulumi.StringOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.StringOutput { return v.StateName }).(pulumi.StringOutput)
}

// Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
func (o AdvancedClusterOutput) Tags() AdvancedClusterTagArrayOutput {
	return o.ApplyT(func(v *AdvancedCluster) AdvancedClusterTagArrayOutput { return v.Tags }).(AdvancedClusterTagArrayOutput)
}

// Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won't delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
func (o AdvancedClusterOutput) TerminationProtectionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.BoolOutput { return v.TerminationProtectionEnabled }).(pulumi.BoolOutput)
}

// Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
func (o AdvancedClusterOutput) VersionReleaseSystem() pulumi.StringOutput {
	return o.ApplyT(func(v *AdvancedCluster) pulumi.StringOutput { return v.VersionReleaseSystem }).(pulumi.StringOutput)
}

type AdvancedClusterArrayOutput struct{ *pulumi.OutputState }

func (AdvancedClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdvancedCluster)(nil)).Elem()
}

func (o AdvancedClusterArrayOutput) ToAdvancedClusterArrayOutput() AdvancedClusterArrayOutput {
	return o
}

func (o AdvancedClusterArrayOutput) ToAdvancedClusterArrayOutputWithContext(ctx context.Context) AdvancedClusterArrayOutput {
	return o
}

func (o AdvancedClusterArrayOutput) Index(i pulumi.IntInput) AdvancedClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdvancedCluster {
		return vs[0].([]*AdvancedCluster)[vs[1].(int)]
	}).(AdvancedClusterOutput)
}

type AdvancedClusterMapOutput struct{ *pulumi.OutputState }

func (AdvancedClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdvancedCluster)(nil)).Elem()
}

func (o AdvancedClusterMapOutput) ToAdvancedClusterMapOutput() AdvancedClusterMapOutput {
	return o
}

func (o AdvancedClusterMapOutput) ToAdvancedClusterMapOutputWithContext(ctx context.Context) AdvancedClusterMapOutput {
	return o
}

func (o AdvancedClusterMapOutput) MapIndex(k pulumi.StringInput) AdvancedClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdvancedCluster {
		return vs[0].(map[string]*AdvancedCluster)[vs[1].(string)]
	}).(AdvancedClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedClusterInput)(nil)).Elem(), &AdvancedCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedClusterArrayInput)(nil)).Elem(), AdvancedClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedClusterMapInput)(nil)).Elem(), AdvancedClusterMap{})
	pulumi.RegisterOutputType(AdvancedClusterOutput{})
	pulumi.RegisterOutputType(AdvancedClusterArrayOutput{})
	pulumi.RegisterOutputType(AdvancedClusterMapOutput{})
}
