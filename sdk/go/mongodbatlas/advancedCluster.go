// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AdvancedCluster` provides an Advanced Cluster resource. The resource lets you create, edit and delete advanced clusters. The resource requires your Project ID.
//
// More information on considerations for using advanced clusters please see [Considerations](https://docs.atlas.mongodb.com/reference/api/cluster-advanced/create-one-cluster-advanced/#considerations)
//
// > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
//
// > **NOTE:** A network container is created for a advanced cluster to reside in if one does not yet exist in the project.  To  use this automatically created container with another resource, such as peering, the `containerId` is exported after creation.
//
// ## Example Usage
// ### Example single provider and single region
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.NewAdvancedCluster(ctx, "test", &mongodbatlas.AdvancedClusterArgs{
// 			ClusterType: pulumi.String("REPLICASET"),
// 			ProjectId:   pulumi.String("PROJECT ID"),
// 			ReplicationSpecs: AdvancedClusterReplicationSpecArray{
// 				&AdvancedClusterReplicationSpecArgs{
// 					RegionConfigs: AdvancedClusterReplicationSpecRegionConfigArray{
// 						&AdvancedClusterReplicationSpecRegionConfigArgs{
// 							AnalyticsSpecs: &AdvancedClusterReplicationSpecRegionConfigAnalyticsSpecsArgs{
// 								InstanceSize: pulumi.String("M10"),
// 								NodeCount:    pulumi.Int(1),
// 							},
// 							ElectableSpecs: &AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
// 								InstanceSize: pulumi.String("M10"),
// 								NodeCount:    pulumi.Int(3),
// 							},
// 							Priority:     pulumi.Int(1),
// 							ProviderName: pulumi.String("AWS"),
// 							RegionName:   pulumi.String("US_EAST_1"),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Example Tenant Cluster
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.NewAdvancedCluster(ctx, "test", &mongodbatlas.AdvancedClusterArgs{
// 			ClusterType: pulumi.String("REPLICASET"),
// 			ProjectId:   pulumi.String("PROJECT ID"),
// 			ReplicationSpecs: AdvancedClusterReplicationSpecArray{
// 				&AdvancedClusterReplicationSpecArgs{
// 					RegionConfigs: AdvancedClusterReplicationSpecRegionConfigArray{
// 						&AdvancedClusterReplicationSpecRegionConfigArgs{
// 							BackingProviderName: pulumi.String("AWS"),
// 							ElectableSpecs: &AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
// 								InstanceSize: pulumi.String("M5"),
// 							},
// 							Priority:     pulumi.Int(1),
// 							ProviderName: pulumi.String("TENANT"),
// 							RegionName:   pulumi.String("US_EAST_1"),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Example Multicloud.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.NewAdvancedCluster(ctx, "test", &mongodbatlas.AdvancedClusterArgs{
// 			ClusterType: pulumi.String("REPLICASET"),
// 			ProjectId:   pulumi.String("PROJECT ID"),
// 			ReplicationSpecs: AdvancedClusterReplicationSpecArray{
// 				&AdvancedClusterReplicationSpecArgs{
// 					RegionConfigs: AdvancedClusterReplicationSpecRegionConfigArray{
// 						&AdvancedClusterReplicationSpecRegionConfigArgs{
// 							AnalyticsSpecs: &AdvancedClusterReplicationSpecRegionConfigAnalyticsSpecsArgs{
// 								InstanceSize: pulumi.String("M10"),
// 								NodeCount:    pulumi.Int(1),
// 							},
// 							ElectableSpecs: &AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
// 								InstanceSize: pulumi.String("M10"),
// 								NodeCount:    pulumi.Int(3),
// 							},
// 							Priority:     pulumi.Int(1),
// 							ProviderName: pulumi.String("AWS"),
// 							RegionName:   pulumi.String("US_EAST_1"),
// 						},
// 						&AdvancedClusterReplicationSpecRegionConfigArgs{
// 							ElectableSpecs: &AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
// 								InstanceSize: pulumi.String("M10"),
// 								NodeCount:    pulumi.Int(2),
// 							},
// 							Priority:     pulumi.Int(6),
// 							ProviderName: pulumi.String("GCP"),
// 							RegionName:   pulumi.String("NORTH_AMERICA_NORTHEAST_1"),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Clusters can be imported using project ID and cluster name, in the format `PROJECTID-CLUSTERNAME`, e.g.
//
// ```sh
//  $ pulumi import mongodbatlas:index/advancedCluster:AdvancedCluster my_cluster 1112222b3bf99403840e8934-Cluster0
// ```
//
//  See detailed information for arguments and attributes[MongoDB API Advanced Clusters](https://docs.atlas.mongodb.com/reference/api/cluster-advanced/create-one-cluster-advanced/)
type AdvancedCluster struct {
	pulumi.CustomResourceState

	AdvancedConfiguration AdvancedClusterAdvancedConfigurationOutput `pulumi:"advancedConfiguration"`
	// Flag that indicates whether the cluster can perform backups.
	// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
	BackupEnabled pulumi.BoolOutput `pulumi:"backupEnabled"`
	// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
	BiConnector AdvancedClusterBiConnectorOutput `pulumi:"biConnector"`
	// The cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Type of the cluster that you want to create.
	// Accepted values include:
	ClusterType pulumi.StringOutput `pulumi:"clusterType"`
	// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
	ConnectionStrings AdvancedClusterConnectionStringArrayOutput `pulumi:"connectionStrings"`
	CreateDate        pulumi.StringOutput                        `pulumi:"createDate"`
	// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
	DiskSizeGb pulumi.Float64Output `pulumi:"diskSizeGb"`
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
	EncryptionAtRestProvider pulumi.StringOutput `pulumi:"encryptionAtRestProvider"`
	// Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
	Labels AdvancedClusterLabelArrayOutput `pulumi:"labels"`
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.0`, `4.2`, `4.4`, or `5.0`. If omitted, Atlas deploys a cluster that runs MongoDB 4.4. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
	MongoDbMajorVersion pulumi.StringOutput `pulumi:"mongoDbMajorVersion"`
	// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
	MongoDbVersion pulumi.StringOutput `pulumi:"mongoDbVersion"`
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
	Name   pulumi.StringOutput  `pulumi:"name"`
	Paused pulumi.BoolPtrOutput `pulumi:"paused"`
	// - Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled pulumi.BoolOutput `pulumi:"pitEnabled"`
	// Unique ID for the project to create the database user.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Configuration for cluster regions and the hardware provisioned in them. See below
	ReplicationSpecs AdvancedClusterReplicationSpecArrayOutput `pulumi:"replicationSpecs"`
	// - Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
	RootCertType pulumi.StringOutput `pulumi:"rootCertType"`
	// Current state of the cluster. The possible states are:
	// - IDLE
	// - CREATING
	// - UPDATING
	// - DELETING
	// - DELETED
	// - REPAIRING
	StateName pulumi.StringOutput `pulumi:"stateName"`
	// - Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
	// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
	// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
	VersionReleaseSystem pulumi.StringPtrOutput `pulumi:"versionReleaseSystem"`
}

// NewAdvancedCluster registers a new resource with the given unique name, arguments, and options.
func NewAdvancedCluster(ctx *pulumi.Context,
	name string, args *AdvancedClusterArgs, opts ...pulumi.ResourceOption) (*AdvancedCluster, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterType == nil {
		return nil, errors.New("invalid value for required argument 'ClusterType'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.ReplicationSpecs == nil {
		return nil, errors.New("invalid value for required argument 'ReplicationSpecs'")
	}
	var resource AdvancedCluster
	err := ctx.RegisterResource("mongodbatlas:index/advancedCluster:AdvancedCluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetAdvancedCluster gets an existing AdvancedCluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetAdvancedCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *AdvancedClusterState, opts ...pulumi.ResourceOption) (*AdvancedCluster, error) {
	var resource AdvancedCluster
	err := ctx.ReadResource("mongodbatlas:index/advancedCluster:AdvancedCluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering AdvancedCluster resources.
type advancedClusterState struct {
	AdvancedConfiguration *AdvancedClusterAdvancedConfiguration `pulumi:"advancedConfiguration"`
	// Flag that indicates whether the cluster can perform backups.
	// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
	BackupEnabled *bool `pulumi:"backupEnabled"`
	// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
	BiConnector *AdvancedClusterBiConnector `pulumi:"biConnector"`
	// The cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Type of the cluster that you want to create.
	// Accepted values include:
	ClusterType *string `pulumi:"clusterType"`
	// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
	ConnectionStrings []AdvancedClusterConnectionString `pulumi:"connectionStrings"`
	CreateDate        *string                           `pulumi:"createDate"`
	// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
	DiskSizeGb *float64 `pulumi:"diskSizeGb"`
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
	EncryptionAtRestProvider *string `pulumi:"encryptionAtRestProvider"`
	// Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
	Labels []AdvancedClusterLabel `pulumi:"labels"`
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.0`, `4.2`, `4.4`, or `5.0`. If omitted, Atlas deploys a cluster that runs MongoDB 4.4. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
	MongoDbMajorVersion *string `pulumi:"mongoDbMajorVersion"`
	// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
	MongoDbVersion *string `pulumi:"mongoDbVersion"`
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
	Name   *string `pulumi:"name"`
	Paused *bool   `pulumi:"paused"`
	// - Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled *bool `pulumi:"pitEnabled"`
	// Unique ID for the project to create the database user.
	ProjectId *string `pulumi:"projectId"`
	// Configuration for cluster regions and the hardware provisioned in them. See below
	ReplicationSpecs []AdvancedClusterReplicationSpec `pulumi:"replicationSpecs"`
	// - Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
	RootCertType *string `pulumi:"rootCertType"`
	// Current state of the cluster. The possible states are:
	// - IDLE
	// - CREATING
	// - UPDATING
	// - DELETING
	// - DELETED
	// - REPAIRING
	StateName *string `pulumi:"stateName"`
	// - Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
	// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
	// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
	VersionReleaseSystem *string `pulumi:"versionReleaseSystem"`
}

type AdvancedClusterState struct {
	AdvancedConfiguration AdvancedClusterAdvancedConfigurationPtrInput
	// Flag that indicates whether the cluster can perform backups.
	// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
	BackupEnabled pulumi.BoolPtrInput
	// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
	BiConnector AdvancedClusterBiConnectorPtrInput
	// The cluster ID.
	ClusterId pulumi.StringPtrInput
	// Type of the cluster that you want to create.
	// Accepted values include:
	ClusterType pulumi.StringPtrInput
	// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
	ConnectionStrings AdvancedClusterConnectionStringArrayInput
	CreateDate        pulumi.StringPtrInput
	// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
	DiskSizeGb pulumi.Float64PtrInput
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
	EncryptionAtRestProvider pulumi.StringPtrInput
	// Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
	Labels AdvancedClusterLabelArrayInput
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.0`, `4.2`, `4.4`, or `5.0`. If omitted, Atlas deploys a cluster that runs MongoDB 4.4. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
	MongoDbMajorVersion pulumi.StringPtrInput
	// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
	MongoDbVersion pulumi.StringPtrInput
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
	Name   pulumi.StringPtrInput
	Paused pulumi.BoolPtrInput
	// - Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled pulumi.BoolPtrInput
	// Unique ID for the project to create the database user.
	ProjectId pulumi.StringPtrInput
	// Configuration for cluster regions and the hardware provisioned in them. See below
	ReplicationSpecs AdvancedClusterReplicationSpecArrayInput
	// - Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
	RootCertType pulumi.StringPtrInput
	// Current state of the cluster. The possible states are:
	// - IDLE
	// - CREATING
	// - UPDATING
	// - DELETING
	// - DELETED
	// - REPAIRING
	StateName pulumi.StringPtrInput
	// - Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
	// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
	// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
	VersionReleaseSystem pulumi.StringPtrInput
}

func (AdvancedClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*advancedClusterState)(nil)).Elem()
}

type advancedClusterArgs struct {
	AdvancedConfiguration *AdvancedClusterAdvancedConfiguration `pulumi:"advancedConfiguration"`
	// Flag that indicates whether the cluster can perform backups.
	// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
	BackupEnabled *bool `pulumi:"backupEnabled"`
	// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
	BiConnector *AdvancedClusterBiConnector `pulumi:"biConnector"`
	// Type of the cluster that you want to create.
	// Accepted values include:
	ClusterType string `pulumi:"clusterType"`
	// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
	DiskSizeGb *float64 `pulumi:"diskSizeGb"`
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
	EncryptionAtRestProvider *string `pulumi:"encryptionAtRestProvider"`
	// Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
	Labels []AdvancedClusterLabel `pulumi:"labels"`
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.0`, `4.2`, `4.4`, or `5.0`. If omitted, Atlas deploys a cluster that runs MongoDB 4.4. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
	MongoDbMajorVersion *string `pulumi:"mongoDbMajorVersion"`
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
	Name   *string `pulumi:"name"`
	Paused *bool   `pulumi:"paused"`
	// - Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled *bool `pulumi:"pitEnabled"`
	// Unique ID for the project to create the database user.
	ProjectId string `pulumi:"projectId"`
	// Configuration for cluster regions and the hardware provisioned in them. See below
	ReplicationSpecs []AdvancedClusterReplicationSpec `pulumi:"replicationSpecs"`
	// - Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
	RootCertType *string `pulumi:"rootCertType"`
	// - Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
	// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
	// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
	VersionReleaseSystem *string `pulumi:"versionReleaseSystem"`
}

// The set of arguments for constructing a AdvancedCluster resource.
type AdvancedClusterArgs struct {
	AdvancedConfiguration AdvancedClusterAdvancedConfigurationPtrInput
	// Flag that indicates whether the cluster can perform backups.
	// If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
	BackupEnabled pulumi.BoolPtrInput
	// Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
	BiConnector AdvancedClusterBiConnectorPtrInput
	// Type of the cluster that you want to create.
	// Accepted values include:
	ClusterType pulumi.StringInput
	// Capacity, in gigabytes, of the host's root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can't set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
	DiskSizeGb pulumi.Float64PtrInput
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.<type>Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
	EncryptionAtRestProvider pulumi.StringPtrInput
	// Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
	Labels AdvancedClusterLabelArrayInput
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.0`, `4.2`, `4.4`, or `5.0`. If omitted, Atlas deploys a cluster that runs MongoDB 4.4. If `replication_specs#.region_configs#.<type>Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
	MongoDbMajorVersion pulumi.StringPtrInput
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
	Name   pulumi.StringPtrInput
	Paused pulumi.BoolPtrInput
	// - Flag that indicates if the cluster uses Continuous Cloud Backup.
	PitEnabled pulumi.BoolPtrInput
	// Unique ID for the project to create the database user.
	ProjectId pulumi.StringInput
	// Configuration for cluster regions and the hardware provisioned in them. See below
	ReplicationSpecs AdvancedClusterReplicationSpecArrayInput
	// - Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
	RootCertType pulumi.StringPtrInput
	// - Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
	// - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
	// - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn't update your cluster to newer rapid or major MongoDB releases as they become available.
	VersionReleaseSystem pulumi.StringPtrInput
}

func (AdvancedClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*advancedClusterArgs)(nil)).Elem()
}

type AdvancedClusterInput interface {
	pulumi.Input

	ToAdvancedClusterOutput() AdvancedClusterOutput
	ToAdvancedClusterOutputWithContext(ctx context.Context) AdvancedClusterOutput
}

func (*AdvancedCluster) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedCluster)(nil)).Elem()
}

func (i *AdvancedCluster) ToAdvancedClusterOutput() AdvancedClusterOutput {
	return i.ToAdvancedClusterOutputWithContext(context.Background())
}

func (i *AdvancedCluster) ToAdvancedClusterOutputWithContext(ctx context.Context) AdvancedClusterOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedClusterOutput)
}

// AdvancedClusterArrayInput is an input type that accepts AdvancedClusterArray and AdvancedClusterArrayOutput values.
// You can construct a concrete instance of `AdvancedClusterArrayInput` via:
//
//          AdvancedClusterArray{ AdvancedClusterArgs{...} }
type AdvancedClusterArrayInput interface {
	pulumi.Input

	ToAdvancedClusterArrayOutput() AdvancedClusterArrayOutput
	ToAdvancedClusterArrayOutputWithContext(context.Context) AdvancedClusterArrayOutput
}

type AdvancedClusterArray []AdvancedClusterInput

func (AdvancedClusterArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdvancedCluster)(nil)).Elem()
}

func (i AdvancedClusterArray) ToAdvancedClusterArrayOutput() AdvancedClusterArrayOutput {
	return i.ToAdvancedClusterArrayOutputWithContext(context.Background())
}

func (i AdvancedClusterArray) ToAdvancedClusterArrayOutputWithContext(ctx context.Context) AdvancedClusterArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedClusterArrayOutput)
}

// AdvancedClusterMapInput is an input type that accepts AdvancedClusterMap and AdvancedClusterMapOutput values.
// You can construct a concrete instance of `AdvancedClusterMapInput` via:
//
//          AdvancedClusterMap{ "key": AdvancedClusterArgs{...} }
type AdvancedClusterMapInput interface {
	pulumi.Input

	ToAdvancedClusterMapOutput() AdvancedClusterMapOutput
	ToAdvancedClusterMapOutputWithContext(context.Context) AdvancedClusterMapOutput
}

type AdvancedClusterMap map[string]AdvancedClusterInput

func (AdvancedClusterMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdvancedCluster)(nil)).Elem()
}

func (i AdvancedClusterMap) ToAdvancedClusterMapOutput() AdvancedClusterMapOutput {
	return i.ToAdvancedClusterMapOutputWithContext(context.Background())
}

func (i AdvancedClusterMap) ToAdvancedClusterMapOutputWithContext(ctx context.Context) AdvancedClusterMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(AdvancedClusterMapOutput)
}

type AdvancedClusterOutput struct{ *pulumi.OutputState }

func (AdvancedClusterOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**AdvancedCluster)(nil)).Elem()
}

func (o AdvancedClusterOutput) ToAdvancedClusterOutput() AdvancedClusterOutput {
	return o
}

func (o AdvancedClusterOutput) ToAdvancedClusterOutputWithContext(ctx context.Context) AdvancedClusterOutput {
	return o
}

type AdvancedClusterArrayOutput struct{ *pulumi.OutputState }

func (AdvancedClusterArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*AdvancedCluster)(nil)).Elem()
}

func (o AdvancedClusterArrayOutput) ToAdvancedClusterArrayOutput() AdvancedClusterArrayOutput {
	return o
}

func (o AdvancedClusterArrayOutput) ToAdvancedClusterArrayOutputWithContext(ctx context.Context) AdvancedClusterArrayOutput {
	return o
}

func (o AdvancedClusterArrayOutput) Index(i pulumi.IntInput) AdvancedClusterOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *AdvancedCluster {
		return vs[0].([]*AdvancedCluster)[vs[1].(int)]
	}).(AdvancedClusterOutput)
}

type AdvancedClusterMapOutput struct{ *pulumi.OutputState }

func (AdvancedClusterMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*AdvancedCluster)(nil)).Elem()
}

func (o AdvancedClusterMapOutput) ToAdvancedClusterMapOutput() AdvancedClusterMapOutput {
	return o
}

func (o AdvancedClusterMapOutput) ToAdvancedClusterMapOutputWithContext(ctx context.Context) AdvancedClusterMapOutput {
	return o
}

func (o AdvancedClusterMapOutput) MapIndex(k pulumi.StringInput) AdvancedClusterOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *AdvancedCluster {
		return vs[0].(map[string]*AdvancedCluster)[vs[1].(string)]
	}).(AdvancedClusterOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedClusterInput)(nil)).Elem(), &AdvancedCluster{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedClusterArrayInput)(nil)).Elem(), AdvancedClusterArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*AdvancedClusterMapInput)(nil)).Elem(), AdvancedClusterMap{})
	pulumi.RegisterOutputType(AdvancedClusterOutput{})
	pulumi.RegisterOutputType(AdvancedClusterArrayOutput{})
	pulumi.RegisterOutputType(AdvancedClusterMapOutput{})
}
