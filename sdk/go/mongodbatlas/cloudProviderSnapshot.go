// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// **WARNING:** This resource is deprecated, use `CloudBackupSnapshot`
//
// `CloudProviderSnapshot` provides a resource to take a cloud backup snapshot on demand.
// On-demand snapshots happen immediately, unlike scheduled snapshots which occur at regular intervals. If there is already an on-demand snapshot with a status of queued or inProgress, you must wait until Atlas has completed the on-demand snapshot before taking another.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		myCluster, err := mongodbatlas.NewCluster(ctx, "myCluster", &mongodbatlas.ClusterArgs{
// 			ProjectId:                pulumi.String("5cf5a45a9ccf6400e60981b6"),
// 			DiskSizeGb:               pulumi.Float64(5),
// 			ProviderName:             pulumi.String("AWS"),
// 			ProviderRegionName:       pulumi.String("EU_WEST_2"),
// 			ProviderInstanceSizeName: pulumi.String("M10"),
// 			CloudBackup:              pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		testCloudProviderSnapshot, err := mongodbatlas.NewCloudProviderSnapshot(ctx, "testCloudProviderSnapshot", &mongodbatlas.CloudProviderSnapshotArgs{
// 			ProjectId:       myCluster.ProjectId,
// 			ClusterName:     myCluster.Name,
// 			Description:     pulumi.String("myDescription"),
// 			RetentionInDays: pulumi.Int(1),
// 			Timeout:         pulumi.String("10m"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mongodbatlas.NewCloudProviderSnapshotRestoreJob(ctx, "testCloudProviderSnapshotRestoreJob", &mongodbatlas.CloudProviderSnapshotRestoreJobArgs{
// 			ProjectId:   testCloudProviderSnapshot.ProjectId,
// 			ClusterName: testCloudProviderSnapshot.ClusterName,
// 			SnapshotId:  testCloudProviderSnapshot.SnapshotId,
// 			DeliveryType: pulumi.StringMap{
// 				pulumi.String{
// 					Download: true,
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Cloud Backup Snapshot entries can be imported using project project_id, cluster_name and snapshot_id (Unique identifier of the snapshot), in the format `PROJECTID-CLUSTERNAME-SNAPSHOTID`, e.g.
//
// ```sh
//  $ pulumi import mongodbatlas:index/cloudProviderSnapshot:CloudProviderSnapshot test 5d0f1f73cf09a29120e173cf-MyClusterTest-5d116d82014b764445b2f9b5
// ```
//
//  For more information see[MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/cloud-backup/backup/backups/)
type CloudProviderSnapshot struct {
	pulumi.CustomResourceState

	// The name of the Atlas cluster that contains the snapshots you want to retrieve.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// UTC ISO 8601 formatted point in time when Atlas took the snapshot.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Description of the on-demand snapshot.
	Description pulumi.StringOutput `pulumi:"description"`
	// UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
	ExpiresAt pulumi.StringOutput `pulumi:"expiresAt"`
	// Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
	MasterKeyUuid pulumi.StringOutput `pulumi:"masterKeyUuid"`
	// Version of the MongoDB server.
	MongodVersion pulumi.StringOutput `pulumi:"mongodVersion"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
	RetentionInDays pulumi.IntOutput `pulumi:"retentionInDays"`
	// Unique identifier of the snapshot.
	SnapshotId pulumi.StringOutput `pulumi:"snapshotId"`
	// Specified the type of snapshot. Valid values are onDemand and scheduled.
	SnapshotType pulumi.StringOutput `pulumi:"snapshotType"`
	// Current status of the snapshot. One of the following values will be returned: queued, inProgress, completed, failed.
	Status pulumi.StringOutput `pulumi:"status"`
	// Specifies the size of the snapshot in bytes.
	StorageSizeBytes pulumi.IntOutput `pulumi:"storageSizeBytes"`
	// The duration of time to wait to finish the on-demand snapshot. The timeout value is definded by a signed sequence of decimal numbers with an time unit suffix such as: `1h45m`, `300s`, `10m`, .... The valid time units are:  `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Default value for the timeout is `10m`
	Timeout pulumi.StringPtrOutput `pulumi:"timeout"`
	// Specifies the type of cluster: replicaSet or shardedCluster.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewCloudProviderSnapshot registers a new resource with the given unique name, arguments, and options.
func NewCloudProviderSnapshot(ctx *pulumi.Context,
	name string, args *CloudProviderSnapshotArgs, opts ...pulumi.ResourceOption) (*CloudProviderSnapshot, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.Description == nil {
		return nil, errors.New("invalid value for required argument 'Description'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.RetentionInDays == nil {
		return nil, errors.New("invalid value for required argument 'RetentionInDays'")
	}
	var resource CloudProviderSnapshot
	err := ctx.RegisterResource("mongodbatlas:index/cloudProviderSnapshot:CloudProviderSnapshot", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProviderSnapshot gets an existing CloudProviderSnapshot resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProviderSnapshot(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProviderSnapshotState, opts ...pulumi.ResourceOption) (*CloudProviderSnapshot, error) {
	var resource CloudProviderSnapshot
	err := ctx.ReadResource("mongodbatlas:index/cloudProviderSnapshot:CloudProviderSnapshot", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProviderSnapshot resources.
type cloudProviderSnapshotState struct {
	// The name of the Atlas cluster that contains the snapshots you want to retrieve.
	ClusterName *string `pulumi:"clusterName"`
	// UTC ISO 8601 formatted point in time when Atlas took the snapshot.
	CreatedAt *string `pulumi:"createdAt"`
	// Description of the on-demand snapshot.
	Description *string `pulumi:"description"`
	// UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
	ExpiresAt *string `pulumi:"expiresAt"`
	// Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
	MasterKeyUuid *string `pulumi:"masterKeyUuid"`
	// Version of the MongoDB server.
	MongodVersion *string `pulumi:"mongodVersion"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId *string `pulumi:"projectId"`
	// The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
	RetentionInDays *int `pulumi:"retentionInDays"`
	// Unique identifier of the snapshot.
	SnapshotId *string `pulumi:"snapshotId"`
	// Specified the type of snapshot. Valid values are onDemand and scheduled.
	SnapshotType *string `pulumi:"snapshotType"`
	// Current status of the snapshot. One of the following values will be returned: queued, inProgress, completed, failed.
	Status *string `pulumi:"status"`
	// Specifies the size of the snapshot in bytes.
	StorageSizeBytes *int `pulumi:"storageSizeBytes"`
	// The duration of time to wait to finish the on-demand snapshot. The timeout value is definded by a signed sequence of decimal numbers with an time unit suffix such as: `1h45m`, `300s`, `10m`, .... The valid time units are:  `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Default value for the timeout is `10m`
	Timeout *string `pulumi:"timeout"`
	// Specifies the type of cluster: replicaSet or shardedCluster.
	Type *string `pulumi:"type"`
}

type CloudProviderSnapshotState struct {
	// The name of the Atlas cluster that contains the snapshots you want to retrieve.
	ClusterName pulumi.StringPtrInput
	// UTC ISO 8601 formatted point in time when Atlas took the snapshot.
	CreatedAt pulumi.StringPtrInput
	// Description of the on-demand snapshot.
	Description pulumi.StringPtrInput
	// UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
	ExpiresAt pulumi.StringPtrInput
	// Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
	MasterKeyUuid pulumi.StringPtrInput
	// Version of the MongoDB server.
	MongodVersion pulumi.StringPtrInput
	// The unique identifier of the project for the Atlas cluster.
	ProjectId pulumi.StringPtrInput
	// The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
	RetentionInDays pulumi.IntPtrInput
	// Unique identifier of the snapshot.
	SnapshotId pulumi.StringPtrInput
	// Specified the type of snapshot. Valid values are onDemand and scheduled.
	SnapshotType pulumi.StringPtrInput
	// Current status of the snapshot. One of the following values will be returned: queued, inProgress, completed, failed.
	Status pulumi.StringPtrInput
	// Specifies the size of the snapshot in bytes.
	StorageSizeBytes pulumi.IntPtrInput
	// The duration of time to wait to finish the on-demand snapshot. The timeout value is definded by a signed sequence of decimal numbers with an time unit suffix such as: `1h45m`, `300s`, `10m`, .... The valid time units are:  `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Default value for the timeout is `10m`
	Timeout pulumi.StringPtrInput
	// Specifies the type of cluster: replicaSet or shardedCluster.
	Type pulumi.StringPtrInput
}

func (CloudProviderSnapshotState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProviderSnapshotState)(nil)).Elem()
}

type cloudProviderSnapshotArgs struct {
	// The name of the Atlas cluster that contains the snapshots you want to retrieve.
	ClusterName string `pulumi:"clusterName"`
	// Description of the on-demand snapshot.
	Description string `pulumi:"description"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId string `pulumi:"projectId"`
	// The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
	RetentionInDays int `pulumi:"retentionInDays"`
	// The duration of time to wait to finish the on-demand snapshot. The timeout value is definded by a signed sequence of decimal numbers with an time unit suffix such as: `1h45m`, `300s`, `10m`, .... The valid time units are:  `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Default value for the timeout is `10m`
	Timeout *string `pulumi:"timeout"`
}

// The set of arguments for constructing a CloudProviderSnapshot resource.
type CloudProviderSnapshotArgs struct {
	// The name of the Atlas cluster that contains the snapshots you want to retrieve.
	ClusterName pulumi.StringInput
	// Description of the on-demand snapshot.
	Description pulumi.StringInput
	// The unique identifier of the project for the Atlas cluster.
	ProjectId pulumi.StringInput
	// The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
	RetentionInDays pulumi.IntInput
	// The duration of time to wait to finish the on-demand snapshot. The timeout value is definded by a signed sequence of decimal numbers with an time unit suffix such as: `1h45m`, `300s`, `10m`, .... The valid time units are:  `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Default value for the timeout is `10m`
	Timeout pulumi.StringPtrInput
}

func (CloudProviderSnapshotArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProviderSnapshotArgs)(nil)).Elem()
}

type CloudProviderSnapshotInput interface {
	pulumi.Input

	ToCloudProviderSnapshotOutput() CloudProviderSnapshotOutput
	ToCloudProviderSnapshotOutputWithContext(ctx context.Context) CloudProviderSnapshotOutput
}

func (*CloudProviderSnapshot) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderSnapshot)(nil)).Elem()
}

func (i *CloudProviderSnapshot) ToCloudProviderSnapshotOutput() CloudProviderSnapshotOutput {
	return i.ToCloudProviderSnapshotOutputWithContext(context.Background())
}

func (i *CloudProviderSnapshot) ToCloudProviderSnapshotOutputWithContext(ctx context.Context) CloudProviderSnapshotOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderSnapshotOutput)
}

// CloudProviderSnapshotArrayInput is an input type that accepts CloudProviderSnapshotArray and CloudProviderSnapshotArrayOutput values.
// You can construct a concrete instance of `CloudProviderSnapshotArrayInput` via:
//
//          CloudProviderSnapshotArray{ CloudProviderSnapshotArgs{...} }
type CloudProviderSnapshotArrayInput interface {
	pulumi.Input

	ToCloudProviderSnapshotArrayOutput() CloudProviderSnapshotArrayOutput
	ToCloudProviderSnapshotArrayOutputWithContext(context.Context) CloudProviderSnapshotArrayOutput
}

type CloudProviderSnapshotArray []CloudProviderSnapshotInput

func (CloudProviderSnapshotArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProviderSnapshot)(nil)).Elem()
}

func (i CloudProviderSnapshotArray) ToCloudProviderSnapshotArrayOutput() CloudProviderSnapshotArrayOutput {
	return i.ToCloudProviderSnapshotArrayOutputWithContext(context.Background())
}

func (i CloudProviderSnapshotArray) ToCloudProviderSnapshotArrayOutputWithContext(ctx context.Context) CloudProviderSnapshotArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderSnapshotArrayOutput)
}

// CloudProviderSnapshotMapInput is an input type that accepts CloudProviderSnapshotMap and CloudProviderSnapshotMapOutput values.
// You can construct a concrete instance of `CloudProviderSnapshotMapInput` via:
//
//          CloudProviderSnapshotMap{ "key": CloudProviderSnapshotArgs{...} }
type CloudProviderSnapshotMapInput interface {
	pulumi.Input

	ToCloudProviderSnapshotMapOutput() CloudProviderSnapshotMapOutput
	ToCloudProviderSnapshotMapOutputWithContext(context.Context) CloudProviderSnapshotMapOutput
}

type CloudProviderSnapshotMap map[string]CloudProviderSnapshotInput

func (CloudProviderSnapshotMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProviderSnapshot)(nil)).Elem()
}

func (i CloudProviderSnapshotMap) ToCloudProviderSnapshotMapOutput() CloudProviderSnapshotMapOutput {
	return i.ToCloudProviderSnapshotMapOutputWithContext(context.Background())
}

func (i CloudProviderSnapshotMap) ToCloudProviderSnapshotMapOutputWithContext(ctx context.Context) CloudProviderSnapshotMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderSnapshotMapOutput)
}

type CloudProviderSnapshotOutput struct{ *pulumi.OutputState }

func (CloudProviderSnapshotOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderSnapshot)(nil)).Elem()
}

func (o CloudProviderSnapshotOutput) ToCloudProviderSnapshotOutput() CloudProviderSnapshotOutput {
	return o
}

func (o CloudProviderSnapshotOutput) ToCloudProviderSnapshotOutputWithContext(ctx context.Context) CloudProviderSnapshotOutput {
	return o
}

type CloudProviderSnapshotArrayOutput struct{ *pulumi.OutputState }

func (CloudProviderSnapshotArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProviderSnapshot)(nil)).Elem()
}

func (o CloudProviderSnapshotArrayOutput) ToCloudProviderSnapshotArrayOutput() CloudProviderSnapshotArrayOutput {
	return o
}

func (o CloudProviderSnapshotArrayOutput) ToCloudProviderSnapshotArrayOutputWithContext(ctx context.Context) CloudProviderSnapshotArrayOutput {
	return o
}

func (o CloudProviderSnapshotArrayOutput) Index(i pulumi.IntInput) CloudProviderSnapshotOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudProviderSnapshot {
		return vs[0].([]*CloudProviderSnapshot)[vs[1].(int)]
	}).(CloudProviderSnapshotOutput)
}

type CloudProviderSnapshotMapOutput struct{ *pulumi.OutputState }

func (CloudProviderSnapshotMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProviderSnapshot)(nil)).Elem()
}

func (o CloudProviderSnapshotMapOutput) ToCloudProviderSnapshotMapOutput() CloudProviderSnapshotMapOutput {
	return o
}

func (o CloudProviderSnapshotMapOutput) ToCloudProviderSnapshotMapOutputWithContext(ctx context.Context) CloudProviderSnapshotMapOutput {
	return o
}

func (o CloudProviderSnapshotMapOutput) MapIndex(k pulumi.StringInput) CloudProviderSnapshotOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudProviderSnapshot {
		return vs[0].(map[string]*CloudProviderSnapshot)[vs[1].(string)]
	}).(CloudProviderSnapshotOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProviderSnapshotInput)(nil)).Elem(), &CloudProviderSnapshot{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProviderSnapshotArrayInput)(nil)).Elem(), CloudProviderSnapshotArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProviderSnapshotMapInput)(nil)).Elem(), CloudProviderSnapshotMap{})
	pulumi.RegisterOutputType(CloudProviderSnapshotOutput{})
	pulumi.RegisterOutputType(CloudProviderSnapshotArrayOutput{})
	pulumi.RegisterOutputType(CloudProviderSnapshotMapOutput{})
}
