// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Data Source: getApiKeyProjectAssignments
//
// `getApiKeyProjectAssignments` provides an API Key Project Assignments data source. The data source lets you list all API key project assignments for an organization.
//
// ## Example Usage
//
// ### S
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			this, err := mongodbatlas.NewApiKey(ctx, "this", &mongodbatlas.ApiKeyArgs{
//				OrgId:       pulumi.Any(orgId),
//				Description: pulumi.String("Test API Key"),
//				RoleNames: pulumi.StringArray{
//					pulumi.String("ORG_READ_ONLY"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			firstProject, err := mongodbatlas.NewProject(ctx, "first_project", &mongodbatlas.ProjectArgs{
//				Name:  pulumi.String("First Project"),
//				OrgId: pulumi.Any(orgId),
//			})
//			if err != nil {
//				return err
//			}
//			secondProject, err := mongodbatlas.NewProject(ctx, "second_project", &mongodbatlas.ProjectArgs{
//				Name:  pulumi.String("Second Project"),
//				OrgId: pulumi.Any(orgId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mongodbatlas.NewApiKeyProjectAssignment(ctx, "first_assignment", &mongodbatlas.ApiKeyProjectAssignmentArgs{
//				ProjectId: firstProject.ID(),
//				ApiKeyId:  this.ApiKeyId,
//				Roles: pulumi.StringArray{
//					pulumi.String("GROUP_OWNER"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mongodbatlas.NewApiKeyProjectAssignment(ctx, "second_assignment", &mongodbatlas.ApiKeyProjectAssignmentArgs{
//				ProjectId: secondProject.ID(),
//				ApiKeyId:  this.ApiKeyId,
//				Roles: pulumi.StringArray{
//					pulumi.String("GROUP_OWNER"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Add IP Access List Entry to Programmatic API Key
//			_, err = mongodbatlas.NewAccessListApiKey(ctx, "this", &mongodbatlas.AccessListApiKeyArgs{
//				OrgId:     pulumi.Any(orgId),
//				CidrBlock: pulumi.String("0.0.0.0/1"),
//				ApiKeyId:  this.ApiKeyId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupApiKeyProjectAssignments(ctx *pulumi.Context, args *LookupApiKeyProjectAssignmentsArgs, opts ...pulumi.InvokeOption) (*LookupApiKeyProjectAssignmentsResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupApiKeyProjectAssignmentsResult
	err := ctx.Invoke("mongodbatlas:index/getApiKeyProjectAssignments:getApiKeyProjectAssignments", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApiKeyProjectAssignments.
type LookupApiKeyProjectAssignmentsArgs struct {
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getApiKeyProjectAssignments.
type LookupApiKeyProjectAssignmentsResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId string                              `pulumi:"projectId"`
	Results   []GetApiKeyProjectAssignmentsResult `pulumi:"results"`
}

func LookupApiKeyProjectAssignmentsOutput(ctx *pulumi.Context, args LookupApiKeyProjectAssignmentsOutputArgs, opts ...pulumi.InvokeOption) LookupApiKeyProjectAssignmentsResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupApiKeyProjectAssignmentsResultOutput, error) {
			args := v.(LookupApiKeyProjectAssignmentsArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("mongodbatlas:index/getApiKeyProjectAssignments:getApiKeyProjectAssignments", args, LookupApiKeyProjectAssignmentsResultOutput{}, options).(LookupApiKeyProjectAssignmentsResultOutput), nil
		}).(LookupApiKeyProjectAssignmentsResultOutput)
}

// A collection of arguments for invoking getApiKeyProjectAssignments.
type LookupApiKeyProjectAssignmentsOutputArgs struct {
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupApiKeyProjectAssignmentsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiKeyProjectAssignmentsArgs)(nil)).Elem()
}

// A collection of values returned by getApiKeyProjectAssignments.
type LookupApiKeyProjectAssignmentsResultOutput struct{ *pulumi.OutputState }

func (LookupApiKeyProjectAssignmentsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiKeyProjectAssignmentsResult)(nil)).Elem()
}

func (o LookupApiKeyProjectAssignmentsResultOutput) ToLookupApiKeyProjectAssignmentsResultOutput() LookupApiKeyProjectAssignmentsResultOutput {
	return o
}

func (o LookupApiKeyProjectAssignmentsResultOutput) ToLookupApiKeyProjectAssignmentsResultOutputWithContext(ctx context.Context) LookupApiKeyProjectAssignmentsResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupApiKeyProjectAssignmentsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiKeyProjectAssignmentsResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
func (o LookupApiKeyProjectAssignmentsResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiKeyProjectAssignmentsResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupApiKeyProjectAssignmentsResultOutput) Results() GetApiKeyProjectAssignmentsResultArrayOutput {
	return o.ApplyT(func(v LookupApiKeyProjectAssignmentsResult) []GetApiKeyProjectAssignmentsResult { return v.Results }).(GetApiKeyProjectAssignmentsResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApiKeyProjectAssignmentsResultOutput{})
}
