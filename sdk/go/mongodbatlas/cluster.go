// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `Cluster` provides a Cluster resource. The resource lets you create, edit and delete clusters. The resource requires your Project ID.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
//
// > **IMPORTANT:**
// <br> &#8226; Free tier cluster creation (M0) is not supported via API or by this Provider.
// <br> &#8226; Shared tier clusters (M2, M5) cannot be upgraded to higher tiers via API or by this Provider.
// <br> &#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
// <br> &#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
//
// ## Example Usage
// ### Example AWS cluster
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.NewCluster(ctx, "cluster_test", &mongodbatlas.ClusterArgs{
// 			AutoScalingDiskGbEnabled: pulumi.Bool(true),
// 			DiskSizeGb:               pulumi.Float64(100),
// 			MongoDbMajorVersion:      pulumi.String("4.2"),
// 			NumShards:                pulumi.Int(1),
// 			ProjectId:                pulumi.String("<YOUR-PROJECT-ID>"),
// 			ProviderBackupEnabled:    pulumi.Bool(true),
// 			ProviderDiskIops:         pulumi.Int(300),
// 			ProviderEncryptEbsVolume: pulumi.Bool(true),
// 			ProviderInstanceSizeName: pulumi.String("M40"),
// 			ProviderName:             pulumi.String("AWS"),
// 			ProviderRegionName:       pulumi.String("US_EAST_1"),
// 			ProviderVolumeType:       pulumi.String("STANDARD"),
// 			ReplicationFactor:        pulumi.Int(3),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Example Azure cluster.
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.NewCluster(ctx, "test", &mongodbatlas.ClusterArgs{
// 			AutoScalingDiskGbEnabled: pulumi.Bool(true),
// 			MongoDbMajorVersion:      pulumi.String("4.2"),
// 			NumShards:                pulumi.Int(1),
// 			ProjectId:                pulumi.String("<YOUR-PROJECT-ID>"),
// 			ProviderBackupEnabled:    pulumi.Bool(true),
// 			ProviderDiskTypeName:     pulumi.String("P6"),
// 			ProviderInstanceSizeName: pulumi.String("M30"),
// 			ProviderName:             pulumi.String("AZURE"),
// 			ProviderRegionName:       pulumi.String("US_EAST_2"),
// 			ReplicationFactor:        pulumi.Int(3),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Example GCP cluster
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.NewCluster(ctx, "test", &mongodbatlas.ClusterArgs{
// 			AutoScalingDiskGbEnabled: pulumi.Bool(true),
// 			DiskSizeGb:               pulumi.Float64(40),
// 			MongoDbMajorVersion:      pulumi.String("4.2"),
// 			NumShards:                pulumi.Int(1),
// 			ProjectId:                pulumi.String("<YOUR-PROJECT-ID>"),
// 			ProviderBackupEnabled:    pulumi.Bool(true),
// 			ProviderInstanceSizeName: pulumi.String("M30"),
// 			ProviderName:             pulumi.String("GCP"),
// 			ProviderRegionName:       pulumi.String("US_EAST_4"),
// 			ReplicationFactor:        pulumi.Int(3),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Example Multi Region cluster
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.NewCluster(ctx, "cluster_test", &mongodbatlas.ClusterArgs{
// 			ClusterType:              pulumi.String("REPLICASET"),
// 			DiskSizeGb:               pulumi.Float64(100),
// 			NumShards:                pulumi.Int(1),
// 			ProjectId:                pulumi.String("<YOUR-PROJECT-ID>"),
// 			ProviderBackupEnabled:    pulumi.Bool(true),
// 			ProviderDiskIops:         pulumi.Int(300),
// 			ProviderInstanceSizeName: pulumi.String("M10"),
// 			ProviderName:             pulumi.String("AWS"),
// 			ProviderVolumeType:       pulumi.String("STANDARD"),
// 			ReplicationSpecs: mongodbatlas.ClusterReplicationSpecArray{
// 				&mongodbatlas.ClusterReplicationSpecArgs{
// 					NumShards: pulumi.Int(1),
// 					RegionsConfigs: mongodbatlas.ClusterReplicationSpecRegionsConfigArray{
// 						&mongodbatlas.ClusterReplicationSpecRegionsConfigArgs{
// 							ElectableNodes: pulumi.Int(3),
// 							Priority:       pulumi.Int(7),
// 							ReadOnlyNodes:  pulumi.Int(0),
// 							RegionName:     pulumi.String("US_EAST_1"),
// 						},
// 						&mongodbatlas.ClusterReplicationSpecRegionsConfigArgs{
// 							ElectableNodes: pulumi.Int(2),
// 							Priority:       pulumi.Int(6),
// 							ReadOnlyNodes:  pulumi.Int(0),
// 							RegionName:     pulumi.String("US_EAST_2"),
// 						},
// 						&mongodbatlas.ClusterReplicationSpecRegionsConfigArgs{
// 							ElectableNodes: pulumi.Int(2),
// 							Priority:       pulumi.Int(5),
// 							ReadOnlyNodes:  pulumi.Int(2),
// 							RegionName:     pulumi.String("US_WEST_1"),
// 						},
// 					},
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Example Global cluster
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.NewCluster(ctx, "cluster_test", &mongodbatlas.ClusterArgs{
// 			ClusterType:              pulumi.String("GEOSHARDED"),
// 			DiskSizeGb:               pulumi.Float64(80),
// 			NumShards:                pulumi.Int(1),
// 			ProjectId:                pulumi.String("<YOUR-PROJECT-ID>"),
// 			ProviderBackupEnabled:    pulumi.Bool(true),
// 			ProviderDiskIops:         pulumi.Int(240),
// 			ProviderInstanceSizeName: pulumi.String("M30"),
// 			ProviderName:             pulumi.String("AWS"),
// 			ProviderVolumeType:       pulumi.String("STANDARD"),
// 			ReplicationSpecs: mongodbatlas.ClusterReplicationSpecArray{
// 				&mongodbatlas.ClusterReplicationSpecArgs{
// 					NumShards: pulumi.Int(2),
// 					RegionsConfigs: mongodbatlas.ClusterReplicationSpecRegionsConfigArray{
// 						&mongodbatlas.ClusterReplicationSpecRegionsConfigArgs{
// 							ElectableNodes: pulumi.Int(3),
// 							Priority:       pulumi.Int(7),
// 							ReadOnlyNodes:  pulumi.Int(0),
// 							RegionName:     pulumi.String("US_EAST_1"),
// 						},
// 					},
// 					ZoneName: pulumi.String("Zone 1"),
// 				},
// 				&mongodbatlas.ClusterReplicationSpecArgs{
// 					NumShards: pulumi.Int(2),
// 					RegionsConfigs: mongodbatlas.ClusterReplicationSpecRegionsConfigArray{
// 						&mongodbatlas.ClusterReplicationSpecRegionsConfigArgs{
// 							ElectableNodes: pulumi.Int(3),
// 							Priority:       pulumi.Int(7),
// 							ReadOnlyNodes:  pulumi.Int(0),
// 							RegionName:     pulumi.String("EU_CENTRAL_1"),
// 						},
// 					},
// 					ZoneName: pulumi.String("Zone 2"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
// ### Example AWS Shared Tier cluster
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.NewCluster(ctx, "cluster_test", &mongodbatlas.ClusterArgs{
// 			AutoScalingDiskGbEnabled: pulumi.Bool(false),
// 			BackingProviderName:      pulumi.String("AWS"),
// 			DiskSizeGb:               pulumi.Float64(2),
// 			MongoDbMajorVersion:      pulumi.String("4.2"),
// 			ProjectId:                pulumi.String("<YOUR-PROJECT-ID>"),
// 			ProviderInstanceSizeName: pulumi.String("M2"),
// 			ProviderName:             pulumi.String("TENANT"),
// 			ProviderRegionName:       pulumi.String("US_EAST_1"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type Cluster struct {
	pulumi.CustomResourceState

	AdvancedConfiguration ClusterAdvancedConfigurationOutput `pulumi:"advancedConfiguration"`
	// Specifies whether cluster tier auto-scaling is enabled. The default is false.
	// - Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.
	// - Set to `false` to disable cluster tier auto-scaling.
	AutoScalingComputeEnabled pulumi.BoolOutput `pulumi:"autoScalingComputeEnabled"`
	// Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.
	// - If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`
	AutoScalingComputeScaleDownEnabled pulumi.BoolOutput `pulumi:"autoScalingComputeScaleDownEnabled"`
	// Specifies whether disk auto-scaling is enabled. The default is true.
	// - Set to `true` to enable disk auto-scaling.
	// - Set to `false` to disable disk auto-scaling.
	AutoScalingDiskGbEnabled pulumi.BoolPtrOutput `pulumi:"autoScalingDiskGbEnabled"`
	// Cloud service provider on which the server for a multi-tenant cluster is provisioned.
	BackingProviderName pulumi.StringOutput `pulumi:"backingProviderName"`
	// Legacy Backup - Set to true to enable Atlas legacy backups for the cluster.
	// **Important** - MongoDB deprecated the Legacy Backup feature. Clusters that use Legacy Backup can continue to use it. MongoDB recommends using [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/).
	// * Any net new Atlas clusters of any type do not support this parameter. These clusters must use Cloud Backup, `providerBackupEnabled`, to enable Cloud Backup.  If you create a new Atlas cluster and set `backupEnabled` to true, the Provider will respond with an error.  This change doesn’t affect existing clusters that use legacy backups.
	// * Set to false to disable legacy backups for the cluster. Atlas deletes any stored snapshots.
	// * The default value is false.  M10 and above only.
	BackupEnabled pulumi.BoolPtrOutput `pulumi:"backupEnabled"`
	// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
	BiConnector ClusterBiConnectorOutput `pulumi:"biConnector"`
	// The cluster ID.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
	ClusterType pulumi.StringOutput `pulumi:"clusterType"`
	// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
	ConnectionStrings ClusterConnectionStringsOutput `pulumi:"connectionStrings"`
	// The Network Peering Container ID. The id of the container either created programmatically by the user before any clusters existed in the project or when the first cluster in the region (AWS/Azure) or project (GCP) was created.
	ContainerId pulumi.StringOutput `pulumi:"containerId"`
	// Capacity, in gigabytes, of the host’s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
	// * The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.
	// * Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.
	// * Cannot be used with clusters with local NVMe SSDs
	// * Cannot be used with Azure clusters
	DiskSizeGb pulumi.Float64Output `pulumi:"diskSizeGb"`
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
	EncryptionAtRestProvider pulumi.StringOutput `pulumi:"encryptionAtRestProvider"`
	// Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.
	Labels ClusterLabelArrayOutput `pulumi:"labels"`
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `providerInstanceSizeName` is either M2 or M5.
	MongoDbMajorVersion pulumi.StringOutput `pulumi:"mongoDbMajorVersion"`
	// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
	MongoDbVersion pulumi.StringOutput `pulumi:"mongoDbVersion"`
	// Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.
	MongoUri pulumi.StringOutput `pulumi:"mongoUri"`
	// Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.
	MongoUriUpdated pulumi.StringOutput `pulumi:"mongoUriUpdated"`
	// connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.
	MongoUriWithOptions pulumi.StringOutput `pulumi:"mongoUriWithOptions"`
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
	Name pulumi.StringOutput `pulumi:"name"`
	// Number of shards to deploy in the specified zone, minimum 1.
	NumShards pulumi.IntPtrOutput `pulumi:"numShards"`
	// Flag that indicates whether the cluster is paused or not.
	Paused pulumi.BoolOutput `pulumi:"paused"`
	// - Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, providerBackupEnabled must also be set to true.
	PitEnabled pulumi.BoolOutput `pulumi:"pitEnabled"`
	// The unique ID for the project to create the database user.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.
	ProviderAutoScalingComputeMaxInstanceSize pulumi.StringOutput `pulumi:"providerAutoScalingComputeMaxInstanceSize"`
	// Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.
	ProviderAutoScalingComputeMinInstanceSize pulumi.StringOutput `pulumi:"providerAutoScalingComputeMinInstanceSize"`
	// Flag indicating if the cluster uses Cloud Backup for backups.
	ProviderBackupEnabled pulumi.BoolPtrOutput `pulumi:"providerBackupEnabled"`
	// The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `providerInstanceSizeName` and `diskSizeGb`.
	ProviderDiskIops pulumi.IntOutput `pulumi:"providerDiskIops"`
	// Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
	ProviderDiskTypeName pulumi.StringOutput `pulumi:"providerDiskTypeName"`
	// If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the cluster.  **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
	ProviderEncryptEbsVolume pulumi.BoolOutput `pulumi:"providerEncryptEbsVolume"`
	// Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources.
	// **Note** free tier (M0) creation is not supported by the Atlas API and hence not supported by this provider.)
	ProviderInstanceSizeName pulumi.StringOutput `pulumi:"providerInstanceSizeName"`
	// Cloud service provider on which the servers are provisioned.
	ProviderName pulumi.StringOutput `pulumi:"providerName"`
	// Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
	// Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
	ProviderRegionName pulumi.StringOutput `pulumi:"providerRegionName"`
	// The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.
	ProviderVolumeType pulumi.StringOutput `pulumi:"providerVolumeType"`
	// Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
	ReplicationFactor pulumi.IntOutput `pulumi:"replicationFactor"`
	// Configuration for cluster regions.  See Replication Spec below for more details.
	ReplicationSpecs ClusterReplicationSpecArrayOutput `pulumi:"replicationSpecs"`
	// current snapshot schedule and retention settings for the cluster.
	SnapshotBackupPolicies ClusterSnapshotBackupPolicyArrayOutput `pulumi:"snapshotBackupPolicies"`
	// Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.
	SrvAddress pulumi.StringOutput `pulumi:"srvAddress"`
	// Current state of the cluster. The possible states are:
	// - IDLE
	// - CREATING
	// - UPDATING
	// - DELETING
	// - DELETED
	// - REPAIRING
	StateName pulumi.StringOutput `pulumi:"stateName"`
}

// NewCluster registers a new resource with the given unique name, arguments, and options.
func NewCluster(ctx *pulumi.Context,
	name string, args *ClusterArgs, opts ...pulumi.ResourceOption) (*Cluster, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.ProviderInstanceSizeName == nil {
		return nil, errors.New("missing required argument 'ProviderInstanceSizeName'")
	}
	if args == nil || args.ProviderName == nil {
		return nil, errors.New("missing required argument 'ProviderName'")
	}
	if args == nil {
		args = &ClusterArgs{}
	}
	var resource Cluster
	err := ctx.RegisterResource("mongodbatlas:index/cluster:Cluster", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCluster gets an existing Cluster resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCluster(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ClusterState, opts ...pulumi.ResourceOption) (*Cluster, error) {
	var resource Cluster
	err := ctx.ReadResource("mongodbatlas:index/cluster:Cluster", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering Cluster resources.
type clusterState struct {
	AdvancedConfiguration *ClusterAdvancedConfiguration `pulumi:"advancedConfiguration"`
	// Specifies whether cluster tier auto-scaling is enabled. The default is false.
	// - Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.
	// - Set to `false` to disable cluster tier auto-scaling.
	AutoScalingComputeEnabled *bool `pulumi:"autoScalingComputeEnabled"`
	// Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.
	// - If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`
	AutoScalingComputeScaleDownEnabled *bool `pulumi:"autoScalingComputeScaleDownEnabled"`
	// Specifies whether disk auto-scaling is enabled. The default is true.
	// - Set to `true` to enable disk auto-scaling.
	// - Set to `false` to disable disk auto-scaling.
	AutoScalingDiskGbEnabled *bool `pulumi:"autoScalingDiskGbEnabled"`
	// Cloud service provider on which the server for a multi-tenant cluster is provisioned.
	BackingProviderName *string `pulumi:"backingProviderName"`
	// Legacy Backup - Set to true to enable Atlas legacy backups for the cluster.
	// **Important** - MongoDB deprecated the Legacy Backup feature. Clusters that use Legacy Backup can continue to use it. MongoDB recommends using [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/).
	// * Any net new Atlas clusters of any type do not support this parameter. These clusters must use Cloud Backup, `providerBackupEnabled`, to enable Cloud Backup.  If you create a new Atlas cluster and set `backupEnabled` to true, the Provider will respond with an error.  This change doesn’t affect existing clusters that use legacy backups.
	// * Set to false to disable legacy backups for the cluster. Atlas deletes any stored snapshots.
	// * The default value is false.  M10 and above only.
	BackupEnabled *bool `pulumi:"backupEnabled"`
	// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
	BiConnector *ClusterBiConnector `pulumi:"biConnector"`
	// The cluster ID.
	ClusterId *string `pulumi:"clusterId"`
	// Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
	ClusterType *string `pulumi:"clusterType"`
	// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
	ConnectionStrings *ClusterConnectionStrings `pulumi:"connectionStrings"`
	// The Network Peering Container ID. The id of the container either created programmatically by the user before any clusters existed in the project or when the first cluster in the region (AWS/Azure) or project (GCP) was created.
	ContainerId *string `pulumi:"containerId"`
	// Capacity, in gigabytes, of the host’s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
	// * The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.
	// * Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.
	// * Cannot be used with clusters with local NVMe SSDs
	// * Cannot be used with Azure clusters
	DiskSizeGb *float64 `pulumi:"diskSizeGb"`
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
	EncryptionAtRestProvider *string `pulumi:"encryptionAtRestProvider"`
	// Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.
	Labels []ClusterLabel `pulumi:"labels"`
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `providerInstanceSizeName` is either M2 or M5.
	MongoDbMajorVersion *string `pulumi:"mongoDbMajorVersion"`
	// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
	MongoDbVersion *string `pulumi:"mongoDbVersion"`
	// Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.
	MongoUri *string `pulumi:"mongoUri"`
	// Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.
	MongoUriUpdated *string `pulumi:"mongoUriUpdated"`
	// connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.
	MongoUriWithOptions *string `pulumi:"mongoUriWithOptions"`
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
	Name *string `pulumi:"name"`
	// Number of shards to deploy in the specified zone, minimum 1.
	NumShards *int `pulumi:"numShards"`
	// Flag that indicates whether the cluster is paused or not.
	Paused *bool `pulumi:"paused"`
	// - Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, providerBackupEnabled must also be set to true.
	PitEnabled *bool `pulumi:"pitEnabled"`
	// The unique ID for the project to create the database user.
	ProjectId *string `pulumi:"projectId"`
	// Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.
	ProviderAutoScalingComputeMaxInstanceSize *string `pulumi:"providerAutoScalingComputeMaxInstanceSize"`
	// Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.
	ProviderAutoScalingComputeMinInstanceSize *string `pulumi:"providerAutoScalingComputeMinInstanceSize"`
	// Flag indicating if the cluster uses Cloud Backup for backups.
	ProviderBackupEnabled *bool `pulumi:"providerBackupEnabled"`
	// The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `providerInstanceSizeName` and `diskSizeGb`.
	ProviderDiskIops *int `pulumi:"providerDiskIops"`
	// Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
	ProviderDiskTypeName *string `pulumi:"providerDiskTypeName"`
	// If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the cluster.  **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
	ProviderEncryptEbsVolume *bool `pulumi:"providerEncryptEbsVolume"`
	// Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources.
	// **Note** free tier (M0) creation is not supported by the Atlas API and hence not supported by this provider.)
	ProviderInstanceSizeName *string `pulumi:"providerInstanceSizeName"`
	// Cloud service provider on which the servers are provisioned.
	ProviderName *string `pulumi:"providerName"`
	// Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
	// Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
	ProviderRegionName *string `pulumi:"providerRegionName"`
	// The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.
	ProviderVolumeType *string `pulumi:"providerVolumeType"`
	// Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
	ReplicationFactor *int `pulumi:"replicationFactor"`
	// Configuration for cluster regions.  See Replication Spec below for more details.
	ReplicationSpecs []ClusterReplicationSpec `pulumi:"replicationSpecs"`
	// current snapshot schedule and retention settings for the cluster.
	SnapshotBackupPolicies []ClusterSnapshotBackupPolicy `pulumi:"snapshotBackupPolicies"`
	// Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.
	SrvAddress *string `pulumi:"srvAddress"`
	// Current state of the cluster. The possible states are:
	// - IDLE
	// - CREATING
	// - UPDATING
	// - DELETING
	// - DELETED
	// - REPAIRING
	StateName *string `pulumi:"stateName"`
}

type ClusterState struct {
	AdvancedConfiguration ClusterAdvancedConfigurationPtrInput
	// Specifies whether cluster tier auto-scaling is enabled. The default is false.
	// - Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.
	// - Set to `false` to disable cluster tier auto-scaling.
	AutoScalingComputeEnabled pulumi.BoolPtrInput
	// Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.
	// - If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`
	AutoScalingComputeScaleDownEnabled pulumi.BoolPtrInput
	// Specifies whether disk auto-scaling is enabled. The default is true.
	// - Set to `true` to enable disk auto-scaling.
	// - Set to `false` to disable disk auto-scaling.
	AutoScalingDiskGbEnabled pulumi.BoolPtrInput
	// Cloud service provider on which the server for a multi-tenant cluster is provisioned.
	BackingProviderName pulumi.StringPtrInput
	// Legacy Backup - Set to true to enable Atlas legacy backups for the cluster.
	// **Important** - MongoDB deprecated the Legacy Backup feature. Clusters that use Legacy Backup can continue to use it. MongoDB recommends using [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/).
	// * Any net new Atlas clusters of any type do not support this parameter. These clusters must use Cloud Backup, `providerBackupEnabled`, to enable Cloud Backup.  If you create a new Atlas cluster and set `backupEnabled` to true, the Provider will respond with an error.  This change doesn’t affect existing clusters that use legacy backups.
	// * Set to false to disable legacy backups for the cluster. Atlas deletes any stored snapshots.
	// * The default value is false.  M10 and above only.
	BackupEnabled pulumi.BoolPtrInput
	// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
	BiConnector ClusterBiConnectorPtrInput
	// The cluster ID.
	ClusterId pulumi.StringPtrInput
	// Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
	ClusterType pulumi.StringPtrInput
	// Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
	ConnectionStrings ClusterConnectionStringsPtrInput
	// The Network Peering Container ID. The id of the container either created programmatically by the user before any clusters existed in the project or when the first cluster in the region (AWS/Azure) or project (GCP) was created.
	ContainerId pulumi.StringPtrInput
	// Capacity, in gigabytes, of the host’s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
	// * The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.
	// * Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.
	// * Cannot be used with clusters with local NVMe SSDs
	// * Cannot be used with Azure clusters
	DiskSizeGb pulumi.Float64PtrInput
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
	EncryptionAtRestProvider pulumi.StringPtrInput
	// Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.
	Labels ClusterLabelArrayInput
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `providerInstanceSizeName` is either M2 or M5.
	MongoDbMajorVersion pulumi.StringPtrInput
	// Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
	MongoDbVersion pulumi.StringPtrInput
	// Base connection string for the cluster. Atlas only displays this field after the cluster is operational, not while it builds the cluster.
	MongoUri pulumi.StringPtrInput
	// Lists when the connection string was last updated. The connection string changes, for example, if you change a replica set to a sharded cluster.
	MongoUriUpdated pulumi.StringPtrInput
	// connection string for connecting to the Atlas cluster. Includes the replicaSet, ssl, and authSource query parameters in the connection string with values appropriate for the cluster.
	MongoUriWithOptions pulumi.StringPtrInput
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
	Name pulumi.StringPtrInput
	// Number of shards to deploy in the specified zone, minimum 1.
	NumShards pulumi.IntPtrInput
	// Flag that indicates whether the cluster is paused or not.
	Paused pulumi.BoolPtrInput
	// - Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, providerBackupEnabled must also be set to true.
	PitEnabled pulumi.BoolPtrInput
	// The unique ID for the project to create the database user.
	ProjectId pulumi.StringPtrInput
	// Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.
	ProviderAutoScalingComputeMaxInstanceSize pulumi.StringPtrInput
	// Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.
	ProviderAutoScalingComputeMinInstanceSize pulumi.StringPtrInput
	// Flag indicating if the cluster uses Cloud Backup for backups.
	ProviderBackupEnabled pulumi.BoolPtrInput
	// The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `providerInstanceSizeName` and `diskSizeGb`.
	ProviderDiskIops pulumi.IntPtrInput
	// Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
	ProviderDiskTypeName pulumi.StringPtrInput
	// If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the cluster.  **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
	ProviderEncryptEbsVolume pulumi.BoolPtrInput
	// Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources.
	// **Note** free tier (M0) creation is not supported by the Atlas API and hence not supported by this provider.)
	ProviderInstanceSizeName pulumi.StringPtrInput
	// Cloud service provider on which the servers are provisioned.
	ProviderName pulumi.StringPtrInput
	// Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
	// Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
	ProviderRegionName pulumi.StringPtrInput
	// The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.
	ProviderVolumeType pulumi.StringPtrInput
	// Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
	ReplicationFactor pulumi.IntPtrInput
	// Configuration for cluster regions.  See Replication Spec below for more details.
	ReplicationSpecs ClusterReplicationSpecArrayInput
	// current snapshot schedule and retention settings for the cluster.
	SnapshotBackupPolicies ClusterSnapshotBackupPolicyArrayInput
	// Connection string for connecting to the Atlas cluster. The +srv modifier forces the connection to use TLS/SSL. See the mongoURI for additional options.
	SrvAddress pulumi.StringPtrInput
	// Current state of the cluster. The possible states are:
	// - IDLE
	// - CREATING
	// - UPDATING
	// - DELETING
	// - DELETED
	// - REPAIRING
	StateName pulumi.StringPtrInput
}

func (ClusterState) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterState)(nil)).Elem()
}

type clusterArgs struct {
	AdvancedConfiguration *ClusterAdvancedConfiguration `pulumi:"advancedConfiguration"`
	// Specifies whether cluster tier auto-scaling is enabled. The default is false.
	// - Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.
	// - Set to `false` to disable cluster tier auto-scaling.
	AutoScalingComputeEnabled *bool `pulumi:"autoScalingComputeEnabled"`
	// Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.
	// - If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`
	AutoScalingComputeScaleDownEnabled *bool `pulumi:"autoScalingComputeScaleDownEnabled"`
	// Specifies whether disk auto-scaling is enabled. The default is true.
	// - Set to `true` to enable disk auto-scaling.
	// - Set to `false` to disable disk auto-scaling.
	AutoScalingDiskGbEnabled *bool `pulumi:"autoScalingDiskGbEnabled"`
	// Cloud service provider on which the server for a multi-tenant cluster is provisioned.
	BackingProviderName *string `pulumi:"backingProviderName"`
	// Legacy Backup - Set to true to enable Atlas legacy backups for the cluster.
	// **Important** - MongoDB deprecated the Legacy Backup feature. Clusters that use Legacy Backup can continue to use it. MongoDB recommends using [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/).
	// * Any net new Atlas clusters of any type do not support this parameter. These clusters must use Cloud Backup, `providerBackupEnabled`, to enable Cloud Backup.  If you create a new Atlas cluster and set `backupEnabled` to true, the Provider will respond with an error.  This change doesn’t affect existing clusters that use legacy backups.
	// * Set to false to disable legacy backups for the cluster. Atlas deletes any stored snapshots.
	// * The default value is false.  M10 and above only.
	BackupEnabled *bool `pulumi:"backupEnabled"`
	// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
	BiConnector *ClusterBiConnector `pulumi:"biConnector"`
	// Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
	ClusterType *string `pulumi:"clusterType"`
	// Capacity, in gigabytes, of the host’s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
	// * The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.
	// * Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.
	// * Cannot be used with clusters with local NVMe SSDs
	// * Cannot be used with Azure clusters
	DiskSizeGb *float64 `pulumi:"diskSizeGb"`
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
	EncryptionAtRestProvider *string `pulumi:"encryptionAtRestProvider"`
	// Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.
	Labels []ClusterLabel `pulumi:"labels"`
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `providerInstanceSizeName` is either M2 or M5.
	MongoDbMajorVersion *string `pulumi:"mongoDbMajorVersion"`
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
	Name *string `pulumi:"name"`
	// Number of shards to deploy in the specified zone, minimum 1.
	NumShards *int `pulumi:"numShards"`
	// - Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, providerBackupEnabled must also be set to true.
	PitEnabled *bool `pulumi:"pitEnabled"`
	// The unique ID for the project to create the database user.
	ProjectId string `pulumi:"projectId"`
	// Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.
	ProviderAutoScalingComputeMaxInstanceSize *string `pulumi:"providerAutoScalingComputeMaxInstanceSize"`
	// Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.
	ProviderAutoScalingComputeMinInstanceSize *string `pulumi:"providerAutoScalingComputeMinInstanceSize"`
	// Flag indicating if the cluster uses Cloud Backup for backups.
	ProviderBackupEnabled *bool `pulumi:"providerBackupEnabled"`
	// The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `providerInstanceSizeName` and `diskSizeGb`.
	ProviderDiskIops *int `pulumi:"providerDiskIops"`
	// Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
	ProviderDiskTypeName *string `pulumi:"providerDiskTypeName"`
	// If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the cluster.  **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
	ProviderEncryptEbsVolume *bool `pulumi:"providerEncryptEbsVolume"`
	// Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources.
	// **Note** free tier (M0) creation is not supported by the Atlas API and hence not supported by this provider.)
	ProviderInstanceSizeName string `pulumi:"providerInstanceSizeName"`
	// Cloud service provider on which the servers are provisioned.
	ProviderName string `pulumi:"providerName"`
	// Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
	// Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
	ProviderRegionName *string `pulumi:"providerRegionName"`
	// The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.
	ProviderVolumeType *string `pulumi:"providerVolumeType"`
	// Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
	ReplicationFactor *int `pulumi:"replicationFactor"`
	// Configuration for cluster regions.  See Replication Spec below for more details.
	ReplicationSpecs []ClusterReplicationSpec `pulumi:"replicationSpecs"`
}

// The set of arguments for constructing a Cluster resource.
type ClusterArgs struct {
	AdvancedConfiguration ClusterAdvancedConfigurationPtrInput
	// Specifies whether cluster tier auto-scaling is enabled. The default is false.
	// - Set to `true` to enable cluster tier auto-scaling. If enabled, you must specify a value for `providerSettings.autoScaling.compute.maxInstanceSize`.
	// - Set to `false` to disable cluster tier auto-scaling.
	AutoScalingComputeEnabled pulumi.BoolPtrInput
	// Set to `true` to enable the cluster tier to scale down. This option is only available if `autoScaling.compute.enabled` is `true`.
	// - If this option is enabled, you must specify a value for `providerSettings.autoScaling.compute.minInstanceSize`
	AutoScalingComputeScaleDownEnabled pulumi.BoolPtrInput
	// Specifies whether disk auto-scaling is enabled. The default is true.
	// - Set to `true` to enable disk auto-scaling.
	// - Set to `false` to disable disk auto-scaling.
	AutoScalingDiskGbEnabled pulumi.BoolPtrInput
	// Cloud service provider on which the server for a multi-tenant cluster is provisioned.
	BackingProviderName pulumi.StringPtrInput
	// Legacy Backup - Set to true to enable Atlas legacy backups for the cluster.
	// **Important** - MongoDB deprecated the Legacy Backup feature. Clusters that use Legacy Backup can continue to use it. MongoDB recommends using [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/).
	// * Any net new Atlas clusters of any type do not support this parameter. These clusters must use Cloud Backup, `providerBackupEnabled`, to enable Cloud Backup.  If you create a new Atlas cluster and set `backupEnabled` to true, the Provider will respond with an error.  This change doesn’t affect existing clusters that use legacy backups.
	// * Set to false to disable legacy backups for the cluster. Atlas deletes any stored snapshots.
	// * The default value is false.  M10 and above only.
	BackupEnabled pulumi.BoolPtrInput
	// Specifies BI Connector for Atlas configuration on this cluster. BI Connector for Atlas is only available for M10+ clusters. See BI Connector below for more details.
	BiConnector ClusterBiConnectorPtrInput
	// Specifies the type of the cluster that you want to modify. You cannot convert a sharded cluster deployment to a replica set deployment.
	ClusterType pulumi.StringPtrInput
	// Capacity, in gigabytes, of the host’s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive integer.
	// * The minimum disk size for dedicated clusters is 10GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value.
	// * Note: The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider upgrading your cluster to a higher tier.
	// * Cannot be used with clusters with local NVMe SSDs
	// * Cannot be used with Azure clusters
	DiskSizeGb pulumi.Float64PtrInput
	// Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-aws-kms/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For complete documentation on configuring Encryption at Rest, see Encryption at Rest using Customer Key Management. Requires M10 or greater. and for legacy backups, backup_enabled, to be false or omitted. **Note: Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
	EncryptionAtRestProvider pulumi.StringPtrInput
	// Array containing key-value pairs that tag and categorize the cluster. Each key and value has a maximum length of 255 characters. You cannot set the key `Infrastructure Tool`, it is used for internal purposes to track aggregate usage.
	Labels ClusterLabelArrayInput
	// Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `3.6`, `4.0`, or `4.2`. You must set this value to `4.2` if `providerInstanceSizeName` is either M2 or M5.
	MongoDbMajorVersion pulumi.StringPtrInput
	// Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed.
	Name pulumi.StringPtrInput
	// Number of shards to deploy in the specified zone, minimum 1.
	NumShards pulumi.IntPtrInput
	// - Flag that indicates if the cluster uses Continuous Cloud Backup. If set to true, providerBackupEnabled must also be set to true.
	PitEnabled pulumi.BoolPtrInput
	// The unique ID for the project to create the database user.
	ProjectId pulumi.StringInput
	// Maximum instance size to which your cluster can automatically scale (e.g., M40). Required if `autoScaling.compute.enabled` is `true`.
	ProviderAutoScalingComputeMaxInstanceSize pulumi.StringPtrInput
	// Minimum instance size to which your cluster can automatically scale (e.g., M10). Required if `autoScaling.compute.scaleDownEnabled` is `true`.
	ProviderAutoScalingComputeMinInstanceSize pulumi.StringPtrInput
	// Flag indicating if the cluster uses Cloud Backup for backups.
	ProviderBackupEnabled pulumi.BoolPtrInput
	// The maximum input/output operations per second (IOPS) the system can perform. The possible values depend on the selected `providerInstanceSizeName` and `diskSizeGb`.
	ProviderDiskIops pulumi.IntPtrInput
	// Azure disk type of the server’s root volume. If omitted, Atlas uses the default disk type for the selected providerSettings.instanceSizeName.  Example disk types and associated storage sizes: P4 - 32GB, P6 - 64GB, P10 - 128GB, P20 - 512GB, P30 - 1024GB, P40 - 2048GB, P50 - 4095GB.  More information and the most update to date disk types/storage sizes can be located at https://docs.atlas.mongodb.com/reference/api/clusters-create-one/.
	ProviderDiskTypeName pulumi.StringPtrInput
	// If enabled, the Amazon EBS encryption feature encrypts the server’s root volume for both data at rest within the volume and for data moving between the volume and the cluster.  **Atlas encrypts all cluster storage and snapshot volumes, securing all cluster data on disk: a concept known as encryption at rest, by default**.
	ProviderEncryptEbsVolume pulumi.BoolPtrInput
	// Atlas provides different instance sizes, each with a default storage capacity and RAM size. The instance size you select is used for all the data-bearing servers in your cluster. See [Create a Cluster](https://docs.atlas.mongodb.com/reference/api/clusters-create-one/) `providerSettings.instanceSizeName` for valid values and default resources.
	// **Note** free tier (M0) creation is not supported by the Atlas API and hence not supported by this provider.)
	ProviderInstanceSizeName pulumi.StringInput
	// Cloud service provider on which the servers are provisioned.
	ProviderName pulumi.StringInput
	// Physical location of your MongoDB cluster. The region you choose can affect network latency for clients accessing your databases.  Requires the **Atlas region name**, see the reference list for [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/), [GCP](https://docs.atlas.mongodb.com/reference/google-gcp/), [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
	// Do not specify this field when creating a multi-region cluster using the replicationSpec document or a Global Cluster with the replicationSpecs array.
	ProviderRegionName pulumi.StringPtrInput
	// The type of the volume. The possible values are: `STANDARD` and `PROVISIONED`.  `PROVISIONED` required if setting IOPS higher than the default instance IOPS.
	ProviderVolumeType pulumi.StringPtrInput
	// Number of replica set members. Each member keeps a copy of your databases, providing high availability and data redundancy. The possible values are 3, 5, or 7. The default value is 3.
	ReplicationFactor pulumi.IntPtrInput
	// Configuration for cluster regions.  See Replication Spec below for more details.
	ReplicationSpecs ClusterReplicationSpecArrayInput
}

func (ClusterArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*clusterArgs)(nil)).Elem()
}
