// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `DataLake` describe a Data Lake.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
func LookupDataLake(ctx *pulumi.Context, args *LookupDataLakeArgs, opts ...pulumi.InvokeOption) (*LookupDataLakeResult, error) {
	var rv LookupDataLakeResult
	err := ctx.Invoke("mongodbatlas:index/getDataLake:getDataLake", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getDataLake.
type LookupDataLakeArgs struct {
	// Name of the data lake.
	Name string `pulumi:"name"`
	// The unique ID for the project to create a data lake.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getDataLake.
type LookupDataLakeResult struct {
	// AWS provider of the cloud service where Data Lake can access the S3 Bucket.
	// * `aws.0.role_id` - Unique identifier of the role that Data Lake can use to access the data stores.
	// * `aws.0.test_s3_bucket` - Name of the S3 data bucket that the provided role ID is authorized to access.
	// * `aws.0.role_id` - Unique identifier of the role that Data Lake can use to access the data stores.
	// * `aws.0.test_s3_bucket` - Name of the S3 data bucket that the provided role ID is authorized to access.
	// * `aws.0.iam_assumed_role_arn` - Amazon Resource Name (ARN) of the IAM Role that Data Lake assumes when accessing S3 Bucket data stores.
	Aws []GetDataLakeAw `pulumi:"aws"`
	// The cloud provider region to which Atlas Data Lake routes client connections for data processing.
	// * `data_process_region.0.cloud_provider` - Name of the cloud service provider.
	// * `data_process_region.0.region` -Name of the region to which Data Lake routes client connections for data processing.
	DataProcessRegions []GetDataLakeDataProcessRegion `pulumi:"dataProcessRegions"`
	// The list of hostnames assigned to the Atlas Data Lake. Each string in the array is a hostname assigned to the Atlas Data Lake.
	Hostnames []string `pulumi:"hostnames"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	Name      string `pulumi:"name"`
	ProjectId string `pulumi:"projectId"`
	// Current state of the Atlas Data Lake:
	State string `pulumi:"state"`
	// Configuration details for mapping each data store to queryable databases and collections.
	// * `storage_databases.#.name` - Name of the database to which Data Lake maps the data contained in the data store.
	// * `storage_databases.#.collections` -     Array of objects where each object represents a collection and data sources that map to a [stores](https://docs.mongodb.com/datalake/reference/format/data-lake-configuration#mongodb-datalakeconf-datalakeconf.stores) data store.
	// * `storage_databases.#.collections.#.name` - Name of the collection.
	// * `storage_databases.#.collections.#.data_sources` -     Array of objects where each object represents a stores data store to map with the collection.
	// * `storage_databases.#.collections.#.data_sources.#.store_name` -     Name of a data store to map to the `<collection>`.
	// * `storage_databases.#.collections.#.data_sources.#.default_format` - Default format that Data Lake assumes if it encounters a file without an extension while searching the storeName.
	// * `storage_databases.#.collections.#.data_sources.#.path` - Controls how Atlas Data Lake searches for and parses files in the storeName before mapping them to the `<collection>`.
	// * `storage_databases.#.views` -     Array of objects where each object represents an [aggregation pipeline](https://docs.mongodb.com/manual/core/aggregation-pipeline/#id1) on a collection.
	// * `storage_databases.#.views.#.name` - Name of the view.
	// * `storage_databases.#.views.#.source` -  Name of the source collection for the view.
	// * `storage_databases.#.views.#.pipeline`- Aggregation pipeline stage(s) to apply to the source collection.
	StorageDatabases []GetDataLakeStorageDatabase `pulumi:"storageDatabases"`
	// Each object in the array represents a data store. Data Lake uses the storage.databases configuration details to map data in each data store to queryable databases and collections.
	// * `storage_stores.#.name` - Name of the data store.
	// * `storage_stores.#.provider` - Defines where the data is stored.
	// * `storage_stores.#.region` - Name of the AWS region in which the S3 bucket is hosted.
	// * `storage_stores.#.bucket` - Name of the AWS S3 bucket.
	// * `storage_stores.#.prefix` - Prefix Data Lake applies when searching for files in the S3 bucket .
	// * `storage_stores.#.delimiter` - The delimiter that separates `storage_databases.#.collections.#.data_sources.#.path` segments in the data store.
	// * `storage_stores.#.include_tags` - Determines whether or not to use S3 tags on the files in the given path as additional partition attributes.
	StorageStores []GetDataLakeStorageStore `pulumi:"storageStores"`
}

func LookupDataLakeOutput(ctx *pulumi.Context, args LookupDataLakeOutputArgs, opts ...pulumi.InvokeOption) LookupDataLakeResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupDataLakeResult, error) {
			args := v.(LookupDataLakeArgs)
			r, err := LookupDataLake(ctx, &args, opts...)
			var s LookupDataLakeResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupDataLakeResultOutput)
}

// A collection of arguments for invoking getDataLake.
type LookupDataLakeOutputArgs struct {
	// Name of the data lake.
	Name pulumi.StringInput `pulumi:"name"`
	// The unique ID for the project to create a data lake.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupDataLakeOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataLakeArgs)(nil)).Elem()
}

// A collection of values returned by getDataLake.
type LookupDataLakeResultOutput struct{ *pulumi.OutputState }

func (LookupDataLakeResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupDataLakeResult)(nil)).Elem()
}

func (o LookupDataLakeResultOutput) ToLookupDataLakeResultOutput() LookupDataLakeResultOutput {
	return o
}

func (o LookupDataLakeResultOutput) ToLookupDataLakeResultOutputWithContext(ctx context.Context) LookupDataLakeResultOutput {
	return o
}

// AWS provider of the cloud service where Data Lake can access the S3 Bucket.
// * `aws.0.role_id` - Unique identifier of the role that Data Lake can use to access the data stores.
// * `aws.0.test_s3_bucket` - Name of the S3 data bucket that the provided role ID is authorized to access.
// * `aws.0.role_id` - Unique identifier of the role that Data Lake can use to access the data stores.
// * `aws.0.test_s3_bucket` - Name of the S3 data bucket that the provided role ID is authorized to access.
// * `aws.0.iam_assumed_role_arn` - Amazon Resource Name (ARN) of the IAM Role that Data Lake assumes when accessing S3 Bucket data stores.
func (o LookupDataLakeResultOutput) Aws() GetDataLakeAwArrayOutput {
	return o.ApplyT(func(v LookupDataLakeResult) []GetDataLakeAw { return v.Aws }).(GetDataLakeAwArrayOutput)
}

// The cloud provider region to which Atlas Data Lake routes client connections for data processing.
// * `data_process_region.0.cloud_provider` - Name of the cloud service provider.
// * `data_process_region.0.region` -Name of the region to which Data Lake routes client connections for data processing.
func (o LookupDataLakeResultOutput) DataProcessRegions() GetDataLakeDataProcessRegionArrayOutput {
	return o.ApplyT(func(v LookupDataLakeResult) []GetDataLakeDataProcessRegion { return v.DataProcessRegions }).(GetDataLakeDataProcessRegionArrayOutput)
}

// The list of hostnames assigned to the Atlas Data Lake. Each string in the array is a hostname assigned to the Atlas Data Lake.
func (o LookupDataLakeResultOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupDataLakeResult) []string { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupDataLakeResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakeResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupDataLakeResultOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakeResult) string { return v.Name }).(pulumi.StringOutput)
}

func (o LookupDataLakeResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakeResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Current state of the Atlas Data Lake:
func (o LookupDataLakeResultOutput) State() pulumi.StringOutput {
	return o.ApplyT(func(v LookupDataLakeResult) string { return v.State }).(pulumi.StringOutput)
}

// Configuration details for mapping each data store to queryable databases and collections.
// * `storage_databases.#.name` - Name of the database to which Data Lake maps the data contained in the data store.
// * `storage_databases.#.collections` -     Array of objects where each object represents a collection and data sources that map to a [stores](https://docs.mongodb.com/datalake/reference/format/data-lake-configuration#mongodb-datalakeconf-datalakeconf.stores) data store.
// * `storage_databases.#.collections.#.name` - Name of the collection.
// * `storage_databases.#.collections.#.data_sources` -     Array of objects where each object represents a stores data store to map with the collection.
// * `storage_databases.#.collections.#.data_sources.#.store_name` -     Name of a data store to map to the `<collection>`.
// * `storage_databases.#.collections.#.data_sources.#.default_format` - Default format that Data Lake assumes if it encounters a file without an extension while searching the storeName.
// * `storage_databases.#.collections.#.data_sources.#.path` - Controls how Atlas Data Lake searches for and parses files in the storeName before mapping them to the `<collection>`.
// * `storage_databases.#.views` -     Array of objects where each object represents an [aggregation pipeline](https://docs.mongodb.com/manual/core/aggregation-pipeline/#id1) on a collection.
// * `storage_databases.#.views.#.name` - Name of the view.
// * `storage_databases.#.views.#.source` -  Name of the source collection for the view.
// * `storage_databases.#.views.#.pipeline`- Aggregation pipeline stage(s) to apply to the source collection.
func (o LookupDataLakeResultOutput) StorageDatabases() GetDataLakeStorageDatabaseArrayOutput {
	return o.ApplyT(func(v LookupDataLakeResult) []GetDataLakeStorageDatabase { return v.StorageDatabases }).(GetDataLakeStorageDatabaseArrayOutput)
}

// Each object in the array represents a data store. Data Lake uses the storage.databases configuration details to map data in each data store to queryable databases and collections.
// * `storage_stores.#.name` - Name of the data store.
// * `storage_stores.#.provider` - Defines where the data is stored.
// * `storage_stores.#.region` - Name of the AWS region in which the S3 bucket is hosted.
// * `storage_stores.#.bucket` - Name of the AWS S3 bucket.
// * `storage_stores.#.prefix` - Prefix Data Lake applies when searching for files in the S3 bucket .
// * `storage_stores.#.delimiter` - The delimiter that separates `storage_databases.#.collections.#.data_sources.#.path` segments in the data store.
// * `storage_stores.#.include_tags` - Determines whether or not to use S3 tags on the files in the given path as additional partition attributes.
func (o LookupDataLakeResultOutput) StorageStores() GetDataLakeStorageStoreArrayOutput {
	return o.ApplyT(func(v LookupDataLakeResult) []GetDataLakeStorageStore { return v.StorageStores }).(GetDataLakeStorageStoreArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupDataLakeResultOutput{})
}
