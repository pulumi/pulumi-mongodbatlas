// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `CloudProviderAccess` allows you to get a single role for a provider access role setup, currently only AWS is supported.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testRole, err := mongodbatlas.NewCloudProviderAccessSetup(ctx, "testRole", &mongodbatlas.CloudProviderAccessSetupArgs{
// 			ProjectId:    pulumi.String("<PROJECT-ID>"),
// 			ProviderName: pulumi.String("AWS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_ = mongodbatlas.LookupCloudProviderAccessSetupOutput(ctx, GetCloudProviderAccessSetupOutputArgs{
// 			ProjectId:    testRole.ProjectId,
// 			ProviderName: testRole.ProviderName,
// 			RoleId:       testRole.RoleId,
// 		}, nil)
// 		return nil
// 	})
// }
// ```
func LookupCloudProviderAccessSetup(ctx *pulumi.Context, args *LookupCloudProviderAccessSetupArgs, opts ...pulumi.InvokeOption) (*LookupCloudProviderAccessSetupResult, error) {
	var rv LookupCloudProviderAccessSetupResult
	err := ctx.Invoke("mongodbatlas:index/getCloudProviderAccessSetup:getCloudProviderAccessSetup", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCloudProviderAccessSetup.
type LookupCloudProviderAccessSetupArgs struct {
	// The unique ID for the project to get all Cloud Provider Access
	ProjectId string `pulumi:"projectId"`
	// cloud provider name, currently only AWS is supported
	ProviderName string `pulumi:"providerName"`
	// unique role id among all the aws roles provided by mongodb atlas
	RoleId string `pulumi:"roleId"`
}

// A collection of values returned by getCloudProviderAccessSetup.
type LookupCloudProviderAccessSetupResult struct {
	// aws related role information
	Aws        map[string]string                      `pulumi:"aws"`
	AwsConfigs []GetCloudProviderAccessSetupAwsConfig `pulumi:"awsConfigs"`
	// Date on which this role was created.
	CreatedDate string `pulumi:"createdDate"`
	// The provider-assigned unique ID for this managed resource.
	Id           string `pulumi:"id"`
	ProjectId    string `pulumi:"projectId"`
	ProviderName string `pulumi:"providerName"`
	RoleId       string `pulumi:"roleId"`
}

func LookupCloudProviderAccessSetupOutput(ctx *pulumi.Context, args LookupCloudProviderAccessSetupOutputArgs, opts ...pulumi.InvokeOption) LookupCloudProviderAccessSetupResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCloudProviderAccessSetupResult, error) {
			args := v.(LookupCloudProviderAccessSetupArgs)
			r, err := LookupCloudProviderAccessSetup(ctx, &args, opts...)
			var s LookupCloudProviderAccessSetupResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCloudProviderAccessSetupResultOutput)
}

// A collection of arguments for invoking getCloudProviderAccessSetup.
type LookupCloudProviderAccessSetupOutputArgs struct {
	// The unique ID for the project to get all Cloud Provider Access
	ProjectId pulumi.StringInput `pulumi:"projectId"`
	// cloud provider name, currently only AWS is supported
	ProviderName pulumi.StringInput `pulumi:"providerName"`
	// unique role id among all the aws roles provided by mongodb atlas
	RoleId pulumi.StringInput `pulumi:"roleId"`
}

func (LookupCloudProviderAccessSetupOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudProviderAccessSetupArgs)(nil)).Elem()
}

// A collection of values returned by getCloudProviderAccessSetup.
type LookupCloudProviderAccessSetupResultOutput struct{ *pulumi.OutputState }

func (LookupCloudProviderAccessSetupResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudProviderAccessSetupResult)(nil)).Elem()
}

func (o LookupCloudProviderAccessSetupResultOutput) ToLookupCloudProviderAccessSetupResultOutput() LookupCloudProviderAccessSetupResultOutput {
	return o
}

func (o LookupCloudProviderAccessSetupResultOutput) ToLookupCloudProviderAccessSetupResultOutputWithContext(ctx context.Context) LookupCloudProviderAccessSetupResultOutput {
	return o
}

// aws related role information
func (o LookupCloudProviderAccessSetupResultOutput) Aws() pulumi.StringMapOutput {
	return o.ApplyT(func(v LookupCloudProviderAccessSetupResult) map[string]string { return v.Aws }).(pulumi.StringMapOutput)
}

func (o LookupCloudProviderAccessSetupResultOutput) AwsConfigs() GetCloudProviderAccessSetupAwsConfigArrayOutput {
	return o.ApplyT(func(v LookupCloudProviderAccessSetupResult) []GetCloudProviderAccessSetupAwsConfig {
		return v.AwsConfigs
	}).(GetCloudProviderAccessSetupAwsConfigArrayOutput)
}

// Date on which this role was created.
func (o LookupCloudProviderAccessSetupResultOutput) CreatedDate() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderAccessSetupResult) string { return v.CreatedDate }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCloudProviderAccessSetupResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderAccessSetupResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCloudProviderAccessSetupResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderAccessSetupResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupCloudProviderAccessSetupResultOutput) ProviderName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderAccessSetupResult) string { return v.ProviderName }).(pulumi.StringOutput)
}

func (o LookupCloudProviderAccessSetupResultOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudProviderAccessSetupResult) string { return v.RoleId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCloudProviderAccessSetupResultOutput{})
}
