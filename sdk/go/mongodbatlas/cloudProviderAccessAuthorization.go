// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumix"
)

type CloudProviderAccessAuthorization struct {
	pulumi.CustomResourceState

	AuthorizedDate pulumi.StringOutput                                     `pulumi:"authorizedDate"`
	Aws            CloudProviderAccessAuthorizationAwsPtrOutput            `pulumi:"aws"`
	Azure          CloudProviderAccessAuthorizationAzurePtrOutput          `pulumi:"azure"`
	FeatureUsages  CloudProviderAccessAuthorizationFeatureUsageArrayOutput `pulumi:"featureUsages"`
	ProjectId      pulumi.StringOutput                                     `pulumi:"projectId"`
	RoleId         pulumi.StringOutput                                     `pulumi:"roleId"`
}

// NewCloudProviderAccessAuthorization registers a new resource with the given unique name, arguments, and options.
func NewCloudProviderAccessAuthorization(ctx *pulumi.Context,
	name string, args *CloudProviderAccessAuthorizationArgs, opts ...pulumi.ResourceOption) (*CloudProviderAccessAuthorization, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.RoleId == nil {
		return nil, errors.New("invalid value for required argument 'RoleId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource CloudProviderAccessAuthorization
	err := ctx.RegisterResource("mongodbatlas:index/cloudProviderAccessAuthorization:CloudProviderAccessAuthorization", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProviderAccessAuthorization gets an existing CloudProviderAccessAuthorization resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProviderAccessAuthorization(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProviderAccessAuthorizationState, opts ...pulumi.ResourceOption) (*CloudProviderAccessAuthorization, error) {
	var resource CloudProviderAccessAuthorization
	err := ctx.ReadResource("mongodbatlas:index/cloudProviderAccessAuthorization:CloudProviderAccessAuthorization", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProviderAccessAuthorization resources.
type cloudProviderAccessAuthorizationState struct {
	AuthorizedDate *string                                        `pulumi:"authorizedDate"`
	Aws            *CloudProviderAccessAuthorizationAws           `pulumi:"aws"`
	Azure          *CloudProviderAccessAuthorizationAzure         `pulumi:"azure"`
	FeatureUsages  []CloudProviderAccessAuthorizationFeatureUsage `pulumi:"featureUsages"`
	ProjectId      *string                                        `pulumi:"projectId"`
	RoleId         *string                                        `pulumi:"roleId"`
}

type CloudProviderAccessAuthorizationState struct {
	AuthorizedDate pulumi.StringPtrInput
	Aws            CloudProviderAccessAuthorizationAwsPtrInput
	Azure          CloudProviderAccessAuthorizationAzurePtrInput
	FeatureUsages  CloudProviderAccessAuthorizationFeatureUsageArrayInput
	ProjectId      pulumi.StringPtrInput
	RoleId         pulumi.StringPtrInput
}

func (CloudProviderAccessAuthorizationState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProviderAccessAuthorizationState)(nil)).Elem()
}

type cloudProviderAccessAuthorizationArgs struct {
	Aws       *CloudProviderAccessAuthorizationAws   `pulumi:"aws"`
	Azure     *CloudProviderAccessAuthorizationAzure `pulumi:"azure"`
	ProjectId string                                 `pulumi:"projectId"`
	RoleId    string                                 `pulumi:"roleId"`
}

// The set of arguments for constructing a CloudProviderAccessAuthorization resource.
type CloudProviderAccessAuthorizationArgs struct {
	Aws       CloudProviderAccessAuthorizationAwsPtrInput
	Azure     CloudProviderAccessAuthorizationAzurePtrInput
	ProjectId pulumi.StringInput
	RoleId    pulumi.StringInput
}

func (CloudProviderAccessAuthorizationArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProviderAccessAuthorizationArgs)(nil)).Elem()
}

type CloudProviderAccessAuthorizationInput interface {
	pulumi.Input

	ToCloudProviderAccessAuthorizationOutput() CloudProviderAccessAuthorizationOutput
	ToCloudProviderAccessAuthorizationOutputWithContext(ctx context.Context) CloudProviderAccessAuthorizationOutput
}

func (*CloudProviderAccessAuthorization) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderAccessAuthorization)(nil)).Elem()
}

func (i *CloudProviderAccessAuthorization) ToCloudProviderAccessAuthorizationOutput() CloudProviderAccessAuthorizationOutput {
	return i.ToCloudProviderAccessAuthorizationOutputWithContext(context.Background())
}

func (i *CloudProviderAccessAuthorization) ToCloudProviderAccessAuthorizationOutputWithContext(ctx context.Context) CloudProviderAccessAuthorizationOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderAccessAuthorizationOutput)
}

func (i *CloudProviderAccessAuthorization) ToOutput(ctx context.Context) pulumix.Output[*CloudProviderAccessAuthorization] {
	return pulumix.Output[*CloudProviderAccessAuthorization]{
		OutputState: i.ToCloudProviderAccessAuthorizationOutputWithContext(ctx).OutputState,
	}
}

// CloudProviderAccessAuthorizationArrayInput is an input type that accepts CloudProviderAccessAuthorizationArray and CloudProviderAccessAuthorizationArrayOutput values.
// You can construct a concrete instance of `CloudProviderAccessAuthorizationArrayInput` via:
//
//	CloudProviderAccessAuthorizationArray{ CloudProviderAccessAuthorizationArgs{...} }
type CloudProviderAccessAuthorizationArrayInput interface {
	pulumi.Input

	ToCloudProviderAccessAuthorizationArrayOutput() CloudProviderAccessAuthorizationArrayOutput
	ToCloudProviderAccessAuthorizationArrayOutputWithContext(context.Context) CloudProviderAccessAuthorizationArrayOutput
}

type CloudProviderAccessAuthorizationArray []CloudProviderAccessAuthorizationInput

func (CloudProviderAccessAuthorizationArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProviderAccessAuthorization)(nil)).Elem()
}

func (i CloudProviderAccessAuthorizationArray) ToCloudProviderAccessAuthorizationArrayOutput() CloudProviderAccessAuthorizationArrayOutput {
	return i.ToCloudProviderAccessAuthorizationArrayOutputWithContext(context.Background())
}

func (i CloudProviderAccessAuthorizationArray) ToCloudProviderAccessAuthorizationArrayOutputWithContext(ctx context.Context) CloudProviderAccessAuthorizationArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderAccessAuthorizationArrayOutput)
}

func (i CloudProviderAccessAuthorizationArray) ToOutput(ctx context.Context) pulumix.Output[[]*CloudProviderAccessAuthorization] {
	return pulumix.Output[[]*CloudProviderAccessAuthorization]{
		OutputState: i.ToCloudProviderAccessAuthorizationArrayOutputWithContext(ctx).OutputState,
	}
}

// CloudProviderAccessAuthorizationMapInput is an input type that accepts CloudProviderAccessAuthorizationMap and CloudProviderAccessAuthorizationMapOutput values.
// You can construct a concrete instance of `CloudProviderAccessAuthorizationMapInput` via:
//
//	CloudProviderAccessAuthorizationMap{ "key": CloudProviderAccessAuthorizationArgs{...} }
type CloudProviderAccessAuthorizationMapInput interface {
	pulumi.Input

	ToCloudProviderAccessAuthorizationMapOutput() CloudProviderAccessAuthorizationMapOutput
	ToCloudProviderAccessAuthorizationMapOutputWithContext(context.Context) CloudProviderAccessAuthorizationMapOutput
}

type CloudProviderAccessAuthorizationMap map[string]CloudProviderAccessAuthorizationInput

func (CloudProviderAccessAuthorizationMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProviderAccessAuthorization)(nil)).Elem()
}

func (i CloudProviderAccessAuthorizationMap) ToCloudProviderAccessAuthorizationMapOutput() CloudProviderAccessAuthorizationMapOutput {
	return i.ToCloudProviderAccessAuthorizationMapOutputWithContext(context.Background())
}

func (i CloudProviderAccessAuthorizationMap) ToCloudProviderAccessAuthorizationMapOutputWithContext(ctx context.Context) CloudProviderAccessAuthorizationMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderAccessAuthorizationMapOutput)
}

func (i CloudProviderAccessAuthorizationMap) ToOutput(ctx context.Context) pulumix.Output[map[string]*CloudProviderAccessAuthorization] {
	return pulumix.Output[map[string]*CloudProviderAccessAuthorization]{
		OutputState: i.ToCloudProviderAccessAuthorizationMapOutputWithContext(ctx).OutputState,
	}
}

type CloudProviderAccessAuthorizationOutput struct{ *pulumi.OutputState }

func (CloudProviderAccessAuthorizationOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderAccessAuthorization)(nil)).Elem()
}

func (o CloudProviderAccessAuthorizationOutput) ToCloudProviderAccessAuthorizationOutput() CloudProviderAccessAuthorizationOutput {
	return o
}

func (o CloudProviderAccessAuthorizationOutput) ToCloudProviderAccessAuthorizationOutputWithContext(ctx context.Context) CloudProviderAccessAuthorizationOutput {
	return o
}

func (o CloudProviderAccessAuthorizationOutput) ToOutput(ctx context.Context) pulumix.Output[*CloudProviderAccessAuthorization] {
	return pulumix.Output[*CloudProviderAccessAuthorization]{
		OutputState: o.OutputState,
	}
}

func (o CloudProviderAccessAuthorizationOutput) AuthorizedDate() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProviderAccessAuthorization) pulumi.StringOutput { return v.AuthorizedDate }).(pulumi.StringOutput)
}

func (o CloudProviderAccessAuthorizationOutput) Aws() CloudProviderAccessAuthorizationAwsPtrOutput {
	return o.ApplyT(func(v *CloudProviderAccessAuthorization) CloudProviderAccessAuthorizationAwsPtrOutput { return v.Aws }).(CloudProviderAccessAuthorizationAwsPtrOutput)
}

func (o CloudProviderAccessAuthorizationOutput) Azure() CloudProviderAccessAuthorizationAzurePtrOutput {
	return o.ApplyT(func(v *CloudProviderAccessAuthorization) CloudProviderAccessAuthorizationAzurePtrOutput {
		return v.Azure
	}).(CloudProviderAccessAuthorizationAzurePtrOutput)
}

func (o CloudProviderAccessAuthorizationOutput) FeatureUsages() CloudProviderAccessAuthorizationFeatureUsageArrayOutput {
	return o.ApplyT(func(v *CloudProviderAccessAuthorization) CloudProviderAccessAuthorizationFeatureUsageArrayOutput {
		return v.FeatureUsages
	}).(CloudProviderAccessAuthorizationFeatureUsageArrayOutput)
}

func (o CloudProviderAccessAuthorizationOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProviderAccessAuthorization) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o CloudProviderAccessAuthorizationOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v *CloudProviderAccessAuthorization) pulumi.StringOutput { return v.RoleId }).(pulumi.StringOutput)
}

type CloudProviderAccessAuthorizationArrayOutput struct{ *pulumi.OutputState }

func (CloudProviderAccessAuthorizationArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProviderAccessAuthorization)(nil)).Elem()
}

func (o CloudProviderAccessAuthorizationArrayOutput) ToCloudProviderAccessAuthorizationArrayOutput() CloudProviderAccessAuthorizationArrayOutput {
	return o
}

func (o CloudProviderAccessAuthorizationArrayOutput) ToCloudProviderAccessAuthorizationArrayOutputWithContext(ctx context.Context) CloudProviderAccessAuthorizationArrayOutput {
	return o
}

func (o CloudProviderAccessAuthorizationArrayOutput) ToOutput(ctx context.Context) pulumix.Output[[]*CloudProviderAccessAuthorization] {
	return pulumix.Output[[]*CloudProviderAccessAuthorization]{
		OutputState: o.OutputState,
	}
}

func (o CloudProviderAccessAuthorizationArrayOutput) Index(i pulumi.IntInput) CloudProviderAccessAuthorizationOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudProviderAccessAuthorization {
		return vs[0].([]*CloudProviderAccessAuthorization)[vs[1].(int)]
	}).(CloudProviderAccessAuthorizationOutput)
}

type CloudProviderAccessAuthorizationMapOutput struct{ *pulumi.OutputState }

func (CloudProviderAccessAuthorizationMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProviderAccessAuthorization)(nil)).Elem()
}

func (o CloudProviderAccessAuthorizationMapOutput) ToCloudProviderAccessAuthorizationMapOutput() CloudProviderAccessAuthorizationMapOutput {
	return o
}

func (o CloudProviderAccessAuthorizationMapOutput) ToCloudProviderAccessAuthorizationMapOutputWithContext(ctx context.Context) CloudProviderAccessAuthorizationMapOutput {
	return o
}

func (o CloudProviderAccessAuthorizationMapOutput) ToOutput(ctx context.Context) pulumix.Output[map[string]*CloudProviderAccessAuthorization] {
	return pulumix.Output[map[string]*CloudProviderAccessAuthorization]{
		OutputState: o.OutputState,
	}
}

func (o CloudProviderAccessAuthorizationMapOutput) MapIndex(k pulumi.StringInput) CloudProviderAccessAuthorizationOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudProviderAccessAuthorization {
		return vs[0].(map[string]*CloudProviderAccessAuthorization)[vs[1].(string)]
	}).(CloudProviderAccessAuthorizationOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProviderAccessAuthorizationInput)(nil)).Elem(), &CloudProviderAccessAuthorization{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProviderAccessAuthorizationArrayInput)(nil)).Elem(), CloudProviderAccessAuthorizationArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProviderAccessAuthorizationMapInput)(nil)).Elem(), CloudProviderAccessAuthorizationMap{})
	pulumi.RegisterOutputType(CloudProviderAccessAuthorizationOutput{})
	pulumi.RegisterOutputType(CloudProviderAccessAuthorizationArrayOutput{})
	pulumi.RegisterOutputType(CloudProviderAccessAuthorizationMapOutput{})
}
