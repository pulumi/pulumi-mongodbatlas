// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `CloudBackupSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the clusterâ€™s cloud service.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
func LookupCloudBackupSnapshot(ctx *pulumi.Context, args *LookupCloudBackupSnapshotArgs, opts ...pulumi.InvokeOption) (*LookupCloudBackupSnapshotResult, error) {
	var rv LookupCloudBackupSnapshotResult
	err := ctx.Invoke("mongodbatlas:index/getCloudBackupSnapshot:getCloudBackupSnapshot", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCloudBackupSnapshot.
type LookupCloudBackupSnapshotArgs struct {
	// The name of the Atlas cluster that contains the snapshot you want to retrieve.
	ClusterName string `pulumi:"clusterName"`
	ProjectId   string `pulumi:"projectId"`
	// The unique identifier of the snapshot you want to retrieve.
	SnapshotId string `pulumi:"snapshotId"`
}

// A collection of values returned by getCloudBackupSnapshot.
type LookupCloudBackupSnapshotResult struct {
	// Cloud provider that stores this snapshot.
	CloudProvider string `pulumi:"cloudProvider"`
	ClusterName   string `pulumi:"clusterName"`
	// UTC ISO 8601 formatted point in time when Atlas took the snapshot.
	CreatedAt string `pulumi:"createdAt"`
	// UDescription of the snapshot. Only present for on-demand snapshots.
	Description string `pulumi:"description"`
	// UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
	ExpiresAt string `pulumi:"expiresAt"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
	MasterKeyUuid string `pulumi:"masterKeyUuid"`
	// Block of List of snapshots and the cloud provider where the snapshots are stored. See below
	Members []GetCloudBackupSnapshotMember `pulumi:"members"`
	// Version of the MongoDB server.
	MongodVersion string `pulumi:"mongodVersion"`
	ProjectId     string `pulumi:"projectId"`
	// Label given to a shard or config server from which Atlas took this snapshot.
	ReplicaSetName string `pulumi:"replicaSetName"`
	SnapshotId     string `pulumi:"snapshotId"`
	// Unique identifiers of the snapshots created for the shards and config server for a sharded cluster.
	SnapshotIds []string `pulumi:"snapshotIds"`
	// Specified the type of snapshot. Valid values are onDemand and scheduled.
	SnapshotType string `pulumi:"snapshotType"`
	// Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.
	Status string `pulumi:"status"`
	// Specifies the size of the snapshot in bytes.
	StorageSizeBytes int `pulumi:"storageSizeBytes"`
	// Specifies the type of cluster: replicaSet or shardedCluster.
	Type string `pulumi:"type"`
}

func LookupCloudBackupSnapshotOutput(ctx *pulumi.Context, args LookupCloudBackupSnapshotOutputArgs, opts ...pulumi.InvokeOption) LookupCloudBackupSnapshotResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCloudBackupSnapshotResult, error) {
			args := v.(LookupCloudBackupSnapshotArgs)
			r, err := LookupCloudBackupSnapshot(ctx, &args, opts...)
			return *r, err
		}).(LookupCloudBackupSnapshotResultOutput)
}

// A collection of arguments for invoking getCloudBackupSnapshot.
type LookupCloudBackupSnapshotOutputArgs struct {
	// The name of the Atlas cluster that contains the snapshot you want to retrieve.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	ProjectId   pulumi.StringInput `pulumi:"projectId"`
	// The unique identifier of the snapshot you want to retrieve.
	SnapshotId pulumi.StringInput `pulumi:"snapshotId"`
}

func (LookupCloudBackupSnapshotOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudBackupSnapshotArgs)(nil)).Elem()
}

// A collection of values returned by getCloudBackupSnapshot.
type LookupCloudBackupSnapshotResultOutput struct{ *pulumi.OutputState }

func (LookupCloudBackupSnapshotResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudBackupSnapshotResult)(nil)).Elem()
}

func (o LookupCloudBackupSnapshotResultOutput) ToLookupCloudBackupSnapshotResultOutput() LookupCloudBackupSnapshotResultOutput {
	return o
}

func (o LookupCloudBackupSnapshotResultOutput) ToLookupCloudBackupSnapshotResultOutputWithContext(ctx context.Context) LookupCloudBackupSnapshotResultOutput {
	return o
}

// Cloud provider that stores this snapshot.
func (o LookupCloudBackupSnapshotResultOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.CloudProvider }).(pulumi.StringOutput)
}

func (o LookupCloudBackupSnapshotResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.ClusterName }).(pulumi.StringOutput)
}

// UTC ISO 8601 formatted point in time when Atlas took the snapshot.
func (o LookupCloudBackupSnapshotResultOutput) CreatedAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.CreatedAt }).(pulumi.StringOutput)
}

// UDescription of the snapshot. Only present for on-demand snapshots.
func (o LookupCloudBackupSnapshotResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.Description }).(pulumi.StringOutput)
}

// UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
func (o LookupCloudBackupSnapshotResultOutput) ExpiresAt() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.ExpiresAt }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCloudBackupSnapshotResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
func (o LookupCloudBackupSnapshotResultOutput) MasterKeyUuid() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.MasterKeyUuid }).(pulumi.StringOutput)
}

// Block of List of snapshots and the cloud provider where the snapshots are stored. See below
func (o LookupCloudBackupSnapshotResultOutput) Members() GetCloudBackupSnapshotMemberArrayOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) []GetCloudBackupSnapshotMember { return v.Members }).(GetCloudBackupSnapshotMemberArrayOutput)
}

// Version of the MongoDB server.
func (o LookupCloudBackupSnapshotResultOutput) MongodVersion() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.MongodVersion }).(pulumi.StringOutput)
}

func (o LookupCloudBackupSnapshotResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Label given to a shard or config server from which Atlas took this snapshot.
func (o LookupCloudBackupSnapshotResultOutput) ReplicaSetName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.ReplicaSetName }).(pulumi.StringOutput)
}

func (o LookupCloudBackupSnapshotResultOutput) SnapshotId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.SnapshotId }).(pulumi.StringOutput)
}

// Unique identifiers of the snapshots created for the shards and config server for a sharded cluster.
func (o LookupCloudBackupSnapshotResultOutput) SnapshotIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) []string { return v.SnapshotIds }).(pulumi.StringArrayOutput)
}

// Specified the type of snapshot. Valid values are onDemand and scheduled.
func (o LookupCloudBackupSnapshotResultOutput) SnapshotType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.SnapshotType }).(pulumi.StringOutput)
}

// Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.
func (o LookupCloudBackupSnapshotResultOutput) Status() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.Status }).(pulumi.StringOutput)
}

// Specifies the size of the snapshot in bytes.
func (o LookupCloudBackupSnapshotResultOutput) StorageSizeBytes() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) int { return v.StorageSizeBytes }).(pulumi.IntOutput)
}

// Specifies the type of cluster: replicaSet or shardedCluster.
func (o LookupCloudBackupSnapshotResultOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotResult) string { return v.Type }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCloudBackupSnapshotResultOutput{})
}
