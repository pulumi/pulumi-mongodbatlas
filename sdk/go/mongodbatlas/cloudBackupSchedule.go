// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Cloud Backup Schedule entries can be imported using project_id and cluster_name, in the format `PROJECTID-CLUSTERNAME`, e.g.
//
// ```sh
//  $ pulumi import mongodbatlas:index/cloudBackupSchedule:CloudBackupSchedule test 5d0f1f73cf09a29120e173cf-MyClusterTest
// ```
//
//  For more information see[MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/cloud-backup/schedule/modify-one-schedule/)
type CloudBackupSchedule struct {
	pulumi.CustomResourceState

	// Unique identifier of the Atlas cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Unique identifier of the backup policy.
	IdPolicy pulumi.StringOutput `pulumi:"idPolicy"`
	// Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.
	NextSnapshot pulumi.StringOutput `pulumi:"nextSnapshot"`
	// Daily policy item
	PolicyItemDaily CloudBackupSchedulePolicyItemDailyPtrOutput `pulumi:"policyItemDaily"`
	// Hourly policy item
	PolicyItemHourly CloudBackupSchedulePolicyItemHourlyPtrOutput `pulumi:"policyItemHourly"`
	// Monthly policy item
	PolicyItemMonthly CloudBackupSchedulePolicyItemMonthlyPtrOutput `pulumi:"policyItemMonthly"`
	// Weekly policy item
	PolicyItemWeekly CloudBackupSchedulePolicyItemWeeklyPtrOutput `pulumi:"policyItemWeekly"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
	ReferenceHourOfDay pulumi.IntOutput `pulumi:"referenceHourOfDay"`
	// UTC Minutes after `referenceHourOfDay` that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
	ReferenceMinuteOfHour pulumi.IntOutput `pulumi:"referenceMinuteOfHour"`
	// Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
	RestoreWindowDays pulumi.IntOutput `pulumi:"restoreWindowDays"`
	// Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.
	UpdateSnapshots pulumi.BoolOutput `pulumi:"updateSnapshots"`
}

// NewCloudBackupSchedule registers a new resource with the given unique name, arguments, and options.
func NewCloudBackupSchedule(ctx *pulumi.Context,
	name string, args *CloudBackupScheduleArgs, opts ...pulumi.ResourceOption) (*CloudBackupSchedule, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	var resource CloudBackupSchedule
	err := ctx.RegisterResource("mongodbatlas:index/cloudBackupSchedule:CloudBackupSchedule", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudBackupSchedule gets an existing CloudBackupSchedule resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudBackupSchedule(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudBackupScheduleState, opts ...pulumi.ResourceOption) (*CloudBackupSchedule, error) {
	var resource CloudBackupSchedule
	err := ctx.ReadResource("mongodbatlas:index/cloudBackupSchedule:CloudBackupSchedule", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudBackupSchedule resources.
type cloudBackupScheduleState struct {
	// Unique identifier of the Atlas cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
	ClusterName *string `pulumi:"clusterName"`
	// Unique identifier of the backup policy.
	IdPolicy *string `pulumi:"idPolicy"`
	// Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.
	NextSnapshot *string `pulumi:"nextSnapshot"`
	// Daily policy item
	PolicyItemDaily *CloudBackupSchedulePolicyItemDaily `pulumi:"policyItemDaily"`
	// Hourly policy item
	PolicyItemHourly *CloudBackupSchedulePolicyItemHourly `pulumi:"policyItemHourly"`
	// Monthly policy item
	PolicyItemMonthly *CloudBackupSchedulePolicyItemMonthly `pulumi:"policyItemMonthly"`
	// Weekly policy item
	PolicyItemWeekly *CloudBackupSchedulePolicyItemWeekly `pulumi:"policyItemWeekly"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId *string `pulumi:"projectId"`
	// UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
	ReferenceHourOfDay *int `pulumi:"referenceHourOfDay"`
	// UTC Minutes after `referenceHourOfDay` that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
	ReferenceMinuteOfHour *int `pulumi:"referenceMinuteOfHour"`
	// Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
	RestoreWindowDays *int `pulumi:"restoreWindowDays"`
	// Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.
	UpdateSnapshots *bool `pulumi:"updateSnapshots"`
}

type CloudBackupScheduleState struct {
	// Unique identifier of the Atlas cluster.
	ClusterId pulumi.StringPtrInput
	// The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
	ClusterName pulumi.StringPtrInput
	// Unique identifier of the backup policy.
	IdPolicy pulumi.StringPtrInput
	// Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.
	NextSnapshot pulumi.StringPtrInput
	// Daily policy item
	PolicyItemDaily CloudBackupSchedulePolicyItemDailyPtrInput
	// Hourly policy item
	PolicyItemHourly CloudBackupSchedulePolicyItemHourlyPtrInput
	// Monthly policy item
	PolicyItemMonthly CloudBackupSchedulePolicyItemMonthlyPtrInput
	// Weekly policy item
	PolicyItemWeekly CloudBackupSchedulePolicyItemWeeklyPtrInput
	// The unique identifier of the project for the Atlas cluster.
	ProjectId pulumi.StringPtrInput
	// UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
	ReferenceHourOfDay pulumi.IntPtrInput
	// UTC Minutes after `referenceHourOfDay` that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
	ReferenceMinuteOfHour pulumi.IntPtrInput
	// Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
	RestoreWindowDays pulumi.IntPtrInput
	// Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.
	UpdateSnapshots pulumi.BoolPtrInput
}

func (CloudBackupScheduleState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudBackupScheduleState)(nil)).Elem()
}

type cloudBackupScheduleArgs struct {
	// The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
	ClusterName string `pulumi:"clusterName"`
	// Daily policy item
	PolicyItemDaily *CloudBackupSchedulePolicyItemDaily `pulumi:"policyItemDaily"`
	// Hourly policy item
	PolicyItemHourly *CloudBackupSchedulePolicyItemHourly `pulumi:"policyItemHourly"`
	// Monthly policy item
	PolicyItemMonthly *CloudBackupSchedulePolicyItemMonthly `pulumi:"policyItemMonthly"`
	// Weekly policy item
	PolicyItemWeekly *CloudBackupSchedulePolicyItemWeekly `pulumi:"policyItemWeekly"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId string `pulumi:"projectId"`
	// UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
	ReferenceHourOfDay *int `pulumi:"referenceHourOfDay"`
	// UTC Minutes after `referenceHourOfDay` that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
	ReferenceMinuteOfHour *int `pulumi:"referenceMinuteOfHour"`
	// Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
	RestoreWindowDays *int `pulumi:"restoreWindowDays"`
	// Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.
	UpdateSnapshots *bool `pulumi:"updateSnapshots"`
}

// The set of arguments for constructing a CloudBackupSchedule resource.
type CloudBackupScheduleArgs struct {
	// The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
	ClusterName pulumi.StringInput
	// Daily policy item
	PolicyItemDaily CloudBackupSchedulePolicyItemDailyPtrInput
	// Hourly policy item
	PolicyItemHourly CloudBackupSchedulePolicyItemHourlyPtrInput
	// Monthly policy item
	PolicyItemMonthly CloudBackupSchedulePolicyItemMonthlyPtrInput
	// Weekly policy item
	PolicyItemWeekly CloudBackupSchedulePolicyItemWeeklyPtrInput
	// The unique identifier of the project for the Atlas cluster.
	ProjectId pulumi.StringInput
	// UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
	ReferenceHourOfDay pulumi.IntPtrInput
	// UTC Minutes after `referenceHourOfDay` that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
	ReferenceMinuteOfHour pulumi.IntPtrInput
	// Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
	RestoreWindowDays pulumi.IntPtrInput
	// Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.
	UpdateSnapshots pulumi.BoolPtrInput
}

func (CloudBackupScheduleArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudBackupScheduleArgs)(nil)).Elem()
}

type CloudBackupScheduleInput interface {
	pulumi.Input

	ToCloudBackupScheduleOutput() CloudBackupScheduleOutput
	ToCloudBackupScheduleOutputWithContext(ctx context.Context) CloudBackupScheduleOutput
}

func (*CloudBackupSchedule) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudBackupSchedule)(nil)).Elem()
}

func (i *CloudBackupSchedule) ToCloudBackupScheduleOutput() CloudBackupScheduleOutput {
	return i.ToCloudBackupScheduleOutputWithContext(context.Background())
}

func (i *CloudBackupSchedule) ToCloudBackupScheduleOutputWithContext(ctx context.Context) CloudBackupScheduleOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudBackupScheduleOutput)
}

// CloudBackupScheduleArrayInput is an input type that accepts CloudBackupScheduleArray and CloudBackupScheduleArrayOutput values.
// You can construct a concrete instance of `CloudBackupScheduleArrayInput` via:
//
//          CloudBackupScheduleArray{ CloudBackupScheduleArgs{...} }
type CloudBackupScheduleArrayInput interface {
	pulumi.Input

	ToCloudBackupScheduleArrayOutput() CloudBackupScheduleArrayOutput
	ToCloudBackupScheduleArrayOutputWithContext(context.Context) CloudBackupScheduleArrayOutput
}

type CloudBackupScheduleArray []CloudBackupScheduleInput

func (CloudBackupScheduleArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudBackupSchedule)(nil)).Elem()
}

func (i CloudBackupScheduleArray) ToCloudBackupScheduleArrayOutput() CloudBackupScheduleArrayOutput {
	return i.ToCloudBackupScheduleArrayOutputWithContext(context.Background())
}

func (i CloudBackupScheduleArray) ToCloudBackupScheduleArrayOutputWithContext(ctx context.Context) CloudBackupScheduleArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudBackupScheduleArrayOutput)
}

// CloudBackupScheduleMapInput is an input type that accepts CloudBackupScheduleMap and CloudBackupScheduleMapOutput values.
// You can construct a concrete instance of `CloudBackupScheduleMapInput` via:
//
//          CloudBackupScheduleMap{ "key": CloudBackupScheduleArgs{...} }
type CloudBackupScheduleMapInput interface {
	pulumi.Input

	ToCloudBackupScheduleMapOutput() CloudBackupScheduleMapOutput
	ToCloudBackupScheduleMapOutputWithContext(context.Context) CloudBackupScheduleMapOutput
}

type CloudBackupScheduleMap map[string]CloudBackupScheduleInput

func (CloudBackupScheduleMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudBackupSchedule)(nil)).Elem()
}

func (i CloudBackupScheduleMap) ToCloudBackupScheduleMapOutput() CloudBackupScheduleMapOutput {
	return i.ToCloudBackupScheduleMapOutputWithContext(context.Background())
}

func (i CloudBackupScheduleMap) ToCloudBackupScheduleMapOutputWithContext(ctx context.Context) CloudBackupScheduleMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudBackupScheduleMapOutput)
}

type CloudBackupScheduleOutput struct{ *pulumi.OutputState }

func (CloudBackupScheduleOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudBackupSchedule)(nil)).Elem()
}

func (o CloudBackupScheduleOutput) ToCloudBackupScheduleOutput() CloudBackupScheduleOutput {
	return o
}

func (o CloudBackupScheduleOutput) ToCloudBackupScheduleOutputWithContext(ctx context.Context) CloudBackupScheduleOutput {
	return o
}

type CloudBackupScheduleArrayOutput struct{ *pulumi.OutputState }

func (CloudBackupScheduleArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudBackupSchedule)(nil)).Elem()
}

func (o CloudBackupScheduleArrayOutput) ToCloudBackupScheduleArrayOutput() CloudBackupScheduleArrayOutput {
	return o
}

func (o CloudBackupScheduleArrayOutput) ToCloudBackupScheduleArrayOutputWithContext(ctx context.Context) CloudBackupScheduleArrayOutput {
	return o
}

func (o CloudBackupScheduleArrayOutput) Index(i pulumi.IntInput) CloudBackupScheduleOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudBackupSchedule {
		return vs[0].([]*CloudBackupSchedule)[vs[1].(int)]
	}).(CloudBackupScheduleOutput)
}

type CloudBackupScheduleMapOutput struct{ *pulumi.OutputState }

func (CloudBackupScheduleMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudBackupSchedule)(nil)).Elem()
}

func (o CloudBackupScheduleMapOutput) ToCloudBackupScheduleMapOutput() CloudBackupScheduleMapOutput {
	return o
}

func (o CloudBackupScheduleMapOutput) ToCloudBackupScheduleMapOutputWithContext(ctx context.Context) CloudBackupScheduleMapOutput {
	return o
}

func (o CloudBackupScheduleMapOutput) MapIndex(k pulumi.StringInput) CloudBackupScheduleOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudBackupSchedule {
		return vs[0].(map[string]*CloudBackupSchedule)[vs[1].(string)]
	}).(CloudBackupScheduleOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudBackupScheduleInput)(nil)).Elem(), &CloudBackupSchedule{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudBackupScheduleArrayInput)(nil)).Elem(), CloudBackupScheduleArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudBackupScheduleMapInput)(nil)).Elem(), CloudBackupScheduleMap{})
	pulumi.RegisterOutputType(CloudBackupScheduleOutput{})
	pulumi.RegisterOutputType(CloudBackupScheduleArrayOutput{})
	pulumi.RegisterOutputType(CloudBackupScheduleMapOutput{})
}
