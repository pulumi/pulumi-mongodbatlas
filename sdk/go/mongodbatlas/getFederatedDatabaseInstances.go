// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `mongodbatlasFederatedDatabaseInstancess` provides a Federated Database Instance data source.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
//
// > **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
//
// ## Example Usage
func LookupFederatedDatabaseInstances(ctx *pulumi.Context, args *LookupFederatedDatabaseInstancesArgs, opts ...pulumi.InvokeOption) (*LookupFederatedDatabaseInstancesResult, error) {
	var rv LookupFederatedDatabaseInstancesResult
	err := ctx.Invoke("mongodbatlas:index/getFederatedDatabaseInstances:getFederatedDatabaseInstances", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFederatedDatabaseInstances.
type LookupFederatedDatabaseInstancesArgs struct {
	// The unique ID for the project to create a Federated Database Instance.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getFederatedDatabaseInstances.
type LookupFederatedDatabaseInstancesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ProjectId string `pulumi:"projectId"`
	// Includes Federated Database instance for each item detailed in the results array section.
	Results []GetFederatedDatabaseInstancesResult `pulumi:"results"`
}

func LookupFederatedDatabaseInstancesOutput(ctx *pulumi.Context, args LookupFederatedDatabaseInstancesOutputArgs, opts ...pulumi.InvokeOption) LookupFederatedDatabaseInstancesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupFederatedDatabaseInstancesResult, error) {
			args := v.(LookupFederatedDatabaseInstancesArgs)
			r, err := LookupFederatedDatabaseInstances(ctx, &args, opts...)
			var s LookupFederatedDatabaseInstancesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupFederatedDatabaseInstancesResultOutput)
}

// A collection of arguments for invoking getFederatedDatabaseInstances.
type LookupFederatedDatabaseInstancesOutputArgs struct {
	// The unique ID for the project to create a Federated Database Instance.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupFederatedDatabaseInstancesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFederatedDatabaseInstancesArgs)(nil)).Elem()
}

// A collection of values returned by getFederatedDatabaseInstances.
type LookupFederatedDatabaseInstancesResultOutput struct{ *pulumi.OutputState }

func (LookupFederatedDatabaseInstancesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFederatedDatabaseInstancesResult)(nil)).Elem()
}

func (o LookupFederatedDatabaseInstancesResultOutput) ToLookupFederatedDatabaseInstancesResultOutput() LookupFederatedDatabaseInstancesResultOutput {
	return o
}

func (o LookupFederatedDatabaseInstancesResultOutput) ToLookupFederatedDatabaseInstancesResultOutputWithContext(ctx context.Context) LookupFederatedDatabaseInstancesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupFederatedDatabaseInstancesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFederatedDatabaseInstancesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupFederatedDatabaseInstancesResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFederatedDatabaseInstancesResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Includes Federated Database instance for each item detailed in the results array section.
func (o LookupFederatedDatabaseInstancesResultOutput) Results() GetFederatedDatabaseInstancesResultArrayOutput {
	return o.ApplyT(func(v LookupFederatedDatabaseInstancesResult) []GetFederatedDatabaseInstancesResult { return v.Results }).(GetFederatedDatabaseInstancesResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFederatedDatabaseInstancesResultOutput{})
}
