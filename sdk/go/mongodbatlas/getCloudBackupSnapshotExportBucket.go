// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `CloudBackupSnapshotExportBucket` datasource allows you to retrieve all the buckets for the specified project.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
func LookupCloudBackupSnapshotExportBucket(ctx *pulumi.Context, args *LookupCloudBackupSnapshotExportBucketArgs, opts ...pulumi.InvokeOption) (*LookupCloudBackupSnapshotExportBucketResult, error) {
	var rv LookupCloudBackupSnapshotExportBucketResult
	err := ctx.Invoke("mongodbatlas:index/getCloudBackupSnapshotExportBucket:getCloudBackupSnapshotExportBucket", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCloudBackupSnapshotExportBucket.
type LookupCloudBackupSnapshotExportBucketArgs struct {
	// Unique identifier of the snapshot export bucket.
	ExportBucketId string `pulumi:"exportBucketId"`
	Id             string `pulumi:"id"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getCloudBackupSnapshotExportBucket.
type LookupCloudBackupSnapshotExportBucketResult struct {
	// Name of the bucket that the provided role ID is authorized to access. You must also specify the `iamRoleId`.
	BucketName string `pulumi:"bucketName"`
	// Name of the provider of the cloud service where Atlas can access the S3 bucket. Atlas only supports `AWS`.
	CloudProvider  string `pulumi:"cloudProvider"`
	ExportBucketId string `pulumi:"exportBucketId"`
	// Unique identifier of the role that Atlas can use to access the bucket. You must also specify the `bucketName`.
	IamRoleId string `pulumi:"iamRoleId"`
	Id        string `pulumi:"id"`
	ProjectId string `pulumi:"projectId"`
}

func LookupCloudBackupSnapshotExportBucketOutput(ctx *pulumi.Context, args LookupCloudBackupSnapshotExportBucketOutputArgs, opts ...pulumi.InvokeOption) LookupCloudBackupSnapshotExportBucketResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCloudBackupSnapshotExportBucketResult, error) {
			args := v.(LookupCloudBackupSnapshotExportBucketArgs)
			r, err := LookupCloudBackupSnapshotExportBucket(ctx, &args, opts...)
			var s LookupCloudBackupSnapshotExportBucketResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupCloudBackupSnapshotExportBucketResultOutput)
}

// A collection of arguments for invoking getCloudBackupSnapshotExportBucket.
type LookupCloudBackupSnapshotExportBucketOutputArgs struct {
	// Unique identifier of the snapshot export bucket.
	ExportBucketId pulumi.StringInput `pulumi:"exportBucketId"`
	Id             pulumi.StringInput `pulumi:"id"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupCloudBackupSnapshotExportBucketOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudBackupSnapshotExportBucketArgs)(nil)).Elem()
}

// A collection of values returned by getCloudBackupSnapshotExportBucket.
type LookupCloudBackupSnapshotExportBucketResultOutput struct{ *pulumi.OutputState }

func (LookupCloudBackupSnapshotExportBucketResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudBackupSnapshotExportBucketResult)(nil)).Elem()
}

func (o LookupCloudBackupSnapshotExportBucketResultOutput) ToLookupCloudBackupSnapshotExportBucketResultOutput() LookupCloudBackupSnapshotExportBucketResultOutput {
	return o
}

func (o LookupCloudBackupSnapshotExportBucketResultOutput) ToLookupCloudBackupSnapshotExportBucketResultOutputWithContext(ctx context.Context) LookupCloudBackupSnapshotExportBucketResultOutput {
	return o
}

// Name of the bucket that the provided role ID is authorized to access. You must also specify the `iamRoleId`.
func (o LookupCloudBackupSnapshotExportBucketResultOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.BucketName }).(pulumi.StringOutput)
}

// Name of the provider of the cloud service where Atlas can access the S3 bucket. Atlas only supports `AWS`.
func (o LookupCloudBackupSnapshotExportBucketResultOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.CloudProvider }).(pulumi.StringOutput)
}

func (o LookupCloudBackupSnapshotExportBucketResultOutput) ExportBucketId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.ExportBucketId }).(pulumi.StringOutput)
}

// Unique identifier of the role that Atlas can use to access the bucket. You must also specify the `bucketName`.
func (o LookupCloudBackupSnapshotExportBucketResultOutput) IamRoleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.IamRoleId }).(pulumi.StringOutput)
}

func (o LookupCloudBackupSnapshotExportBucketResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCloudBackupSnapshotExportBucketResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCloudBackupSnapshotExportBucketResultOutput{})
}
