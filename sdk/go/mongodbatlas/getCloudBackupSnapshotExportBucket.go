// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Data Source: CloudBackupSnapshotExportBucket
//
// `CloudBackupSnapshotExportBucket` datasource allows you to retrieve all the buckets for the specified project.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testCloudBackupSnapshotExportBucket, err := mongodbatlas.NewCloudBackupSnapshotExportBucket(ctx, "test", &mongodbatlas.CloudBackupSnapshotExportBucketArgs{
//				ProjectId:     pulumi.String("{PROJECT_ID}"),
//				IamRoleId:     pulumi.String("{IAM_ROLE_ID}"),
//				BucketName:    pulumi.String("example-bucket"),
//				CloudProvider: pulumi.String("AWS"),
//			})
//			if err != nil {
//				return err
//			}
//			_ = mongodbatlas.LookupCloudBackupSnapshotExportBucketOutput(ctx, mongodbatlas.GetCloudBackupSnapshotExportBucketOutputArgs{
//				ProjectId:      pulumi.String("{PROJECT_ID}"),
//				ExportBucketId: testCloudBackupSnapshotExportBucket.ExportBucketId,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
func LookupCloudBackupSnapshotExportBucket(ctx *pulumi.Context, args *LookupCloudBackupSnapshotExportBucketArgs, opts ...pulumi.InvokeOption) (*LookupCloudBackupSnapshotExportBucketResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupCloudBackupSnapshotExportBucketResult
	err := ctx.Invoke("mongodbatlas:index/getCloudBackupSnapshotExportBucket:getCloudBackupSnapshotExportBucket", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCloudBackupSnapshotExportBucket.
type LookupCloudBackupSnapshotExportBucketArgs struct {
	// Unique identifier of the snapshot export bucket.
	ExportBucketId string `pulumi:"exportBucketId"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getCloudBackupSnapshotExportBucket.
type LookupCloudBackupSnapshotExportBucketResult struct {
	// Name of the bucket that the provided role ID is authorized to access.
	BucketName string `pulumi:"bucketName"`
	// Name of the provider of the cloud service where Atlas can access the S3 bucket.
	CloudProvider  string `pulumi:"cloudProvider"`
	ExportBucketId string `pulumi:"exportBucketId"`
	// Unique identifier of the role that Atlas can use to access the bucket.
	IamRoleId string `pulumi:"iamRoleId"`
	Id        string `pulumi:"id"`
	ProjectId string `pulumi:"projectId"`
	// Unique identifier of the Azure Service Principal that Atlas can use to access the Azure Blob Storage Container.
	RoleId string `pulumi:"roleId"`
	// URL that identifies the blob Endpoint of the Azure Blob Storage Account.
	ServiceUrl string `pulumi:"serviceUrl"`
	// UUID that identifies the Azure Active Directory Tenant ID.
	//
	// Deprecated: This parameter is deprecated.
	TenantId string `pulumi:"tenantId"`
}

func LookupCloudBackupSnapshotExportBucketOutput(ctx *pulumi.Context, args LookupCloudBackupSnapshotExportBucketOutputArgs, opts ...pulumi.InvokeOption) LookupCloudBackupSnapshotExportBucketResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupCloudBackupSnapshotExportBucketResultOutput, error) {
			args := v.(LookupCloudBackupSnapshotExportBucketArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("mongodbatlas:index/getCloudBackupSnapshotExportBucket:getCloudBackupSnapshotExportBucket", args, LookupCloudBackupSnapshotExportBucketResultOutput{}, options).(LookupCloudBackupSnapshotExportBucketResultOutput), nil
		}).(LookupCloudBackupSnapshotExportBucketResultOutput)
}

// A collection of arguments for invoking getCloudBackupSnapshotExportBucket.
type LookupCloudBackupSnapshotExportBucketOutputArgs struct {
	// Unique identifier of the snapshot export bucket.
	ExportBucketId pulumi.StringInput `pulumi:"exportBucketId"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupCloudBackupSnapshotExportBucketOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudBackupSnapshotExportBucketArgs)(nil)).Elem()
}

// A collection of values returned by getCloudBackupSnapshotExportBucket.
type LookupCloudBackupSnapshotExportBucketResultOutput struct{ *pulumi.OutputState }

func (LookupCloudBackupSnapshotExportBucketResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudBackupSnapshotExportBucketResult)(nil)).Elem()
}

func (o LookupCloudBackupSnapshotExportBucketResultOutput) ToLookupCloudBackupSnapshotExportBucketResultOutput() LookupCloudBackupSnapshotExportBucketResultOutput {
	return o
}

func (o LookupCloudBackupSnapshotExportBucketResultOutput) ToLookupCloudBackupSnapshotExportBucketResultOutputWithContext(ctx context.Context) LookupCloudBackupSnapshotExportBucketResultOutput {
	return o
}

// Name of the bucket that the provided role ID is authorized to access.
func (o LookupCloudBackupSnapshotExportBucketResultOutput) BucketName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.BucketName }).(pulumi.StringOutput)
}

// Name of the provider of the cloud service where Atlas can access the S3 bucket.
func (o LookupCloudBackupSnapshotExportBucketResultOutput) CloudProvider() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.CloudProvider }).(pulumi.StringOutput)
}

func (o LookupCloudBackupSnapshotExportBucketResultOutput) ExportBucketId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.ExportBucketId }).(pulumi.StringOutput)
}

// Unique identifier of the role that Atlas can use to access the bucket.
func (o LookupCloudBackupSnapshotExportBucketResultOutput) IamRoleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.IamRoleId }).(pulumi.StringOutput)
}

func (o LookupCloudBackupSnapshotExportBucketResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCloudBackupSnapshotExportBucketResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Unique identifier of the Azure Service Principal that Atlas can use to access the Azure Blob Storage Container.
func (o LookupCloudBackupSnapshotExportBucketResultOutput) RoleId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.RoleId }).(pulumi.StringOutput)
}

// URL that identifies the blob Endpoint of the Azure Blob Storage Account.
func (o LookupCloudBackupSnapshotExportBucketResultOutput) ServiceUrl() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.ServiceUrl }).(pulumi.StringOutput)
}

// UUID that identifies the Azure Active Directory Tenant ID.
//
// Deprecated: This parameter is deprecated.
func (o LookupCloudBackupSnapshotExportBucketResultOutput) TenantId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotExportBucketResult) string { return v.TenantId }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCloudBackupSnapshotExportBucketResultOutput{})
}
