// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `CloudBackupSnapshotExportJob` resource allows you to create a cloud backup snapshot export job for the specified project.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testCloudBackupSnapshotExportBucket, err := mongodbatlas.NewCloudBackupSnapshotExportBucket(ctx, "testCloudBackupSnapshotExportBucket", &mongodbatlas.CloudBackupSnapshotExportBucketArgs{
// 			ProjectId:     pulumi.String("{PROJECT_ID}"),
// 			IamRoleId:     pulumi.String("{IAM_ROLE_ID}"),
// 			BucketName:    pulumi.String("example_bucket"),
// 			CloudProvider: pulumi.String("AWS"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mongodbatlas.NewCloudBackupSnapshotExportJob(ctx, "testCloudBackupSnapshotExportJob", &mongodbatlas.CloudBackupSnapshotExportJobArgs{
// 			ProjectId:      pulumi.String("{PROJECT_ID}"),
// 			ClusterName:    pulumi.String("{CLUSTER_NAME}"),
// 			SnapshotId:     pulumi.String("{SNAPSHOT_ID}"),
// 			ExportBucketId: testCloudBackupSnapshotExportBucket.ExportBucketId,
// 			CustomDatas: CloudBackupSnapshotExportJobCustomDataArray{
// 				&CloudBackupSnapshotExportJobCustomDataArgs{
// 					Key:   pulumi.String("exported by"),
// 					Value: pulumi.String("myName"),
// 				},
// 			},
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// Cloud Backup Snapshot Export Backup entries can be imported using project project_id, cluster_name and export_job_id (Unique identifier of the snapshot export job), in the format `PROJECTID-CLUSTERNAME-EXPORTJOBID`, e.g.
//
// ```sh
//  $ pulumi import mongodbatlas:index/cloudBackupSnapshotExportJob:CloudBackupSnapshotExportJob test 5d0f1f73cf09a29120e173cf-5d116d82014b764445b2f9b5-5d116d82014b764445b2f9b5
// ```
//
//  For more information see[MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/cloud-backup/export/create-one-export-job/)
type CloudBackupSnapshotExportJob struct {
	pulumi.CustomResourceState

	// Name of the Atlas cluster whose snapshot you want to export.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// _Returned for sharded clusters only._ Export job details for each replica set in the sharded cluster.
	Components CloudBackupSnapshotExportJobComponentArrayOutput `pulumi:"components"`
	// Timestamp in ISO 8601 date and time format in UTC when the export job was created.
	CreatedAt pulumi.StringOutput `pulumi:"createdAt"`
	// Custom data to include in the metadata file named `.complete` that Atlas uploads to the bucket when the export job finishes. Custom data can be specified as key and value pairs.
	CustomDatas CloudBackupSnapshotExportJobCustomDataArrayOutput `pulumi:"customDatas"`
	// Error message, only if the export job failed.
	ErrMsg         pulumi.StringOutput `pulumi:"errMsg"`
	ExportBucketId pulumi.StringOutput `pulumi:"exportBucketId"`
	// Unique identifier of the export job.
	// * ` prefix  ` - Full path on the cloud provider bucket to the folder where the snapshot is exported. The path is in the following format:`/exported_snapshots/{ORG-NAME}/{PROJECT-NAME}/{CLUSTER-NAME}/{SNAPSHOT-INITIATION-DATE}/{TIMESTAMP}`
	ExportJobId                     pulumi.StringOutput `pulumi:"exportJobId"`
	ExportStatusExportedCollections pulumi.IntOutput    `pulumi:"exportStatusExportedCollections"`
	ExportStatusTotalCollections    pulumi.IntOutput    `pulumi:"exportStatusTotalCollections"`
	// Timestamp in ISO 8601 date and time format in UTC when the export job completes.
	FinishedAt pulumi.StringOutput `pulumi:"finishedAt"`
	Prefix     pulumi.StringOutput `pulumi:"prefix"`
	// Unique 24-hexadecimal digit string that identifies the project which contains the Atlas cluster whose snapshot you want to export.
	ProjectId  pulumi.StringOutput `pulumi:"projectId"`
	SnapshotId pulumi.StringOutput `pulumi:"snapshotId"`
	// Status of the export job. Value can be one of the following:
	State pulumi.StringOutput `pulumi:"state"`
}

// NewCloudBackupSnapshotExportJob registers a new resource with the given unique name, arguments, and options.
func NewCloudBackupSnapshotExportJob(ctx *pulumi.Context,
	name string, args *CloudBackupSnapshotExportJobArgs, opts ...pulumi.ResourceOption) (*CloudBackupSnapshotExportJob, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.CustomDatas == nil {
		return nil, errors.New("invalid value for required argument 'CustomDatas'")
	}
	if args.ExportBucketId == nil {
		return nil, errors.New("invalid value for required argument 'ExportBucketId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.SnapshotId == nil {
		return nil, errors.New("invalid value for required argument 'SnapshotId'")
	}
	var resource CloudBackupSnapshotExportJob
	err := ctx.RegisterResource("mongodbatlas:index/cloudBackupSnapshotExportJob:CloudBackupSnapshotExportJob", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudBackupSnapshotExportJob gets an existing CloudBackupSnapshotExportJob resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudBackupSnapshotExportJob(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudBackupSnapshotExportJobState, opts ...pulumi.ResourceOption) (*CloudBackupSnapshotExportJob, error) {
	var resource CloudBackupSnapshotExportJob
	err := ctx.ReadResource("mongodbatlas:index/cloudBackupSnapshotExportJob:CloudBackupSnapshotExportJob", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudBackupSnapshotExportJob resources.
type cloudBackupSnapshotExportJobState struct {
	// Name of the Atlas cluster whose snapshot you want to export.
	ClusterName *string `pulumi:"clusterName"`
	// _Returned for sharded clusters only._ Export job details for each replica set in the sharded cluster.
	Components []CloudBackupSnapshotExportJobComponent `pulumi:"components"`
	// Timestamp in ISO 8601 date and time format in UTC when the export job was created.
	CreatedAt *string `pulumi:"createdAt"`
	// Custom data to include in the metadata file named `.complete` that Atlas uploads to the bucket when the export job finishes. Custom data can be specified as key and value pairs.
	CustomDatas []CloudBackupSnapshotExportJobCustomData `pulumi:"customDatas"`
	// Error message, only if the export job failed.
	ErrMsg         *string `pulumi:"errMsg"`
	ExportBucketId *string `pulumi:"exportBucketId"`
	// Unique identifier of the export job.
	// * ` prefix  ` - Full path on the cloud provider bucket to the folder where the snapshot is exported. The path is in the following format:`/exported_snapshots/{ORG-NAME}/{PROJECT-NAME}/{CLUSTER-NAME}/{SNAPSHOT-INITIATION-DATE}/{TIMESTAMP}`
	ExportJobId                     *string `pulumi:"exportJobId"`
	ExportStatusExportedCollections *int    `pulumi:"exportStatusExportedCollections"`
	ExportStatusTotalCollections    *int    `pulumi:"exportStatusTotalCollections"`
	// Timestamp in ISO 8601 date and time format in UTC when the export job completes.
	FinishedAt *string `pulumi:"finishedAt"`
	Prefix     *string `pulumi:"prefix"`
	// Unique 24-hexadecimal digit string that identifies the project which contains the Atlas cluster whose snapshot you want to export.
	ProjectId  *string `pulumi:"projectId"`
	SnapshotId *string `pulumi:"snapshotId"`
	// Status of the export job. Value can be one of the following:
	State *string `pulumi:"state"`
}

type CloudBackupSnapshotExportJobState struct {
	// Name of the Atlas cluster whose snapshot you want to export.
	ClusterName pulumi.StringPtrInput
	// _Returned for sharded clusters only._ Export job details for each replica set in the sharded cluster.
	Components CloudBackupSnapshotExportJobComponentArrayInput
	// Timestamp in ISO 8601 date and time format in UTC when the export job was created.
	CreatedAt pulumi.StringPtrInput
	// Custom data to include in the metadata file named `.complete` that Atlas uploads to the bucket when the export job finishes. Custom data can be specified as key and value pairs.
	CustomDatas CloudBackupSnapshotExportJobCustomDataArrayInput
	// Error message, only if the export job failed.
	ErrMsg         pulumi.StringPtrInput
	ExportBucketId pulumi.StringPtrInput
	// Unique identifier of the export job.
	// * ` prefix  ` - Full path on the cloud provider bucket to the folder where the snapshot is exported. The path is in the following format:`/exported_snapshots/{ORG-NAME}/{PROJECT-NAME}/{CLUSTER-NAME}/{SNAPSHOT-INITIATION-DATE}/{TIMESTAMP}`
	ExportJobId                     pulumi.StringPtrInput
	ExportStatusExportedCollections pulumi.IntPtrInput
	ExportStatusTotalCollections    pulumi.IntPtrInput
	// Timestamp in ISO 8601 date and time format in UTC when the export job completes.
	FinishedAt pulumi.StringPtrInput
	Prefix     pulumi.StringPtrInput
	// Unique 24-hexadecimal digit string that identifies the project which contains the Atlas cluster whose snapshot you want to export.
	ProjectId  pulumi.StringPtrInput
	SnapshotId pulumi.StringPtrInput
	// Status of the export job. Value can be one of the following:
	State pulumi.StringPtrInput
}

func (CloudBackupSnapshotExportJobState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudBackupSnapshotExportJobState)(nil)).Elem()
}

type cloudBackupSnapshotExportJobArgs struct {
	// Name of the Atlas cluster whose snapshot you want to export.
	ClusterName string `pulumi:"clusterName"`
	// Custom data to include in the metadata file named `.complete` that Atlas uploads to the bucket when the export job finishes. Custom data can be specified as key and value pairs.
	CustomDatas    []CloudBackupSnapshotExportJobCustomData `pulumi:"customDatas"`
	ExportBucketId string                                   `pulumi:"exportBucketId"`
	// Unique 24-hexadecimal digit string that identifies the project which contains the Atlas cluster whose snapshot you want to export.
	ProjectId  string `pulumi:"projectId"`
	SnapshotId string `pulumi:"snapshotId"`
}

// The set of arguments for constructing a CloudBackupSnapshotExportJob resource.
type CloudBackupSnapshotExportJobArgs struct {
	// Name of the Atlas cluster whose snapshot you want to export.
	ClusterName pulumi.StringInput
	// Custom data to include in the metadata file named `.complete` that Atlas uploads to the bucket when the export job finishes. Custom data can be specified as key and value pairs.
	CustomDatas    CloudBackupSnapshotExportJobCustomDataArrayInput
	ExportBucketId pulumi.StringInput
	// Unique 24-hexadecimal digit string that identifies the project which contains the Atlas cluster whose snapshot you want to export.
	ProjectId  pulumi.StringInput
	SnapshotId pulumi.StringInput
}

func (CloudBackupSnapshotExportJobArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudBackupSnapshotExportJobArgs)(nil)).Elem()
}

type CloudBackupSnapshotExportJobInput interface {
	pulumi.Input

	ToCloudBackupSnapshotExportJobOutput() CloudBackupSnapshotExportJobOutput
	ToCloudBackupSnapshotExportJobOutputWithContext(ctx context.Context) CloudBackupSnapshotExportJobOutput
}

func (*CloudBackupSnapshotExportJob) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudBackupSnapshotExportJob)(nil)).Elem()
}

func (i *CloudBackupSnapshotExportJob) ToCloudBackupSnapshotExportJobOutput() CloudBackupSnapshotExportJobOutput {
	return i.ToCloudBackupSnapshotExportJobOutputWithContext(context.Background())
}

func (i *CloudBackupSnapshotExportJob) ToCloudBackupSnapshotExportJobOutputWithContext(ctx context.Context) CloudBackupSnapshotExportJobOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudBackupSnapshotExportJobOutput)
}

// CloudBackupSnapshotExportJobArrayInput is an input type that accepts CloudBackupSnapshotExportJobArray and CloudBackupSnapshotExportJobArrayOutput values.
// You can construct a concrete instance of `CloudBackupSnapshotExportJobArrayInput` via:
//
//          CloudBackupSnapshotExportJobArray{ CloudBackupSnapshotExportJobArgs{...} }
type CloudBackupSnapshotExportJobArrayInput interface {
	pulumi.Input

	ToCloudBackupSnapshotExportJobArrayOutput() CloudBackupSnapshotExportJobArrayOutput
	ToCloudBackupSnapshotExportJobArrayOutputWithContext(context.Context) CloudBackupSnapshotExportJobArrayOutput
}

type CloudBackupSnapshotExportJobArray []CloudBackupSnapshotExportJobInput

func (CloudBackupSnapshotExportJobArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudBackupSnapshotExportJob)(nil)).Elem()
}

func (i CloudBackupSnapshotExportJobArray) ToCloudBackupSnapshotExportJobArrayOutput() CloudBackupSnapshotExportJobArrayOutput {
	return i.ToCloudBackupSnapshotExportJobArrayOutputWithContext(context.Background())
}

func (i CloudBackupSnapshotExportJobArray) ToCloudBackupSnapshotExportJobArrayOutputWithContext(ctx context.Context) CloudBackupSnapshotExportJobArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudBackupSnapshotExportJobArrayOutput)
}

// CloudBackupSnapshotExportJobMapInput is an input type that accepts CloudBackupSnapshotExportJobMap and CloudBackupSnapshotExportJobMapOutput values.
// You can construct a concrete instance of `CloudBackupSnapshotExportJobMapInput` via:
//
//          CloudBackupSnapshotExportJobMap{ "key": CloudBackupSnapshotExportJobArgs{...} }
type CloudBackupSnapshotExportJobMapInput interface {
	pulumi.Input

	ToCloudBackupSnapshotExportJobMapOutput() CloudBackupSnapshotExportJobMapOutput
	ToCloudBackupSnapshotExportJobMapOutputWithContext(context.Context) CloudBackupSnapshotExportJobMapOutput
}

type CloudBackupSnapshotExportJobMap map[string]CloudBackupSnapshotExportJobInput

func (CloudBackupSnapshotExportJobMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudBackupSnapshotExportJob)(nil)).Elem()
}

func (i CloudBackupSnapshotExportJobMap) ToCloudBackupSnapshotExportJobMapOutput() CloudBackupSnapshotExportJobMapOutput {
	return i.ToCloudBackupSnapshotExportJobMapOutputWithContext(context.Background())
}

func (i CloudBackupSnapshotExportJobMap) ToCloudBackupSnapshotExportJobMapOutputWithContext(ctx context.Context) CloudBackupSnapshotExportJobMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudBackupSnapshotExportJobMapOutput)
}

type CloudBackupSnapshotExportJobOutput struct{ *pulumi.OutputState }

func (CloudBackupSnapshotExportJobOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudBackupSnapshotExportJob)(nil)).Elem()
}

func (o CloudBackupSnapshotExportJobOutput) ToCloudBackupSnapshotExportJobOutput() CloudBackupSnapshotExportJobOutput {
	return o
}

func (o CloudBackupSnapshotExportJobOutput) ToCloudBackupSnapshotExportJobOutputWithContext(ctx context.Context) CloudBackupSnapshotExportJobOutput {
	return o
}

type CloudBackupSnapshotExportJobArrayOutput struct{ *pulumi.OutputState }

func (CloudBackupSnapshotExportJobArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudBackupSnapshotExportJob)(nil)).Elem()
}

func (o CloudBackupSnapshotExportJobArrayOutput) ToCloudBackupSnapshotExportJobArrayOutput() CloudBackupSnapshotExportJobArrayOutput {
	return o
}

func (o CloudBackupSnapshotExportJobArrayOutput) ToCloudBackupSnapshotExportJobArrayOutputWithContext(ctx context.Context) CloudBackupSnapshotExportJobArrayOutput {
	return o
}

func (o CloudBackupSnapshotExportJobArrayOutput) Index(i pulumi.IntInput) CloudBackupSnapshotExportJobOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudBackupSnapshotExportJob {
		return vs[0].([]*CloudBackupSnapshotExportJob)[vs[1].(int)]
	}).(CloudBackupSnapshotExportJobOutput)
}

type CloudBackupSnapshotExportJobMapOutput struct{ *pulumi.OutputState }

func (CloudBackupSnapshotExportJobMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudBackupSnapshotExportJob)(nil)).Elem()
}

func (o CloudBackupSnapshotExportJobMapOutput) ToCloudBackupSnapshotExportJobMapOutput() CloudBackupSnapshotExportJobMapOutput {
	return o
}

func (o CloudBackupSnapshotExportJobMapOutput) ToCloudBackupSnapshotExportJobMapOutputWithContext(ctx context.Context) CloudBackupSnapshotExportJobMapOutput {
	return o
}

func (o CloudBackupSnapshotExportJobMapOutput) MapIndex(k pulumi.StringInput) CloudBackupSnapshotExportJobOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudBackupSnapshotExportJob {
		return vs[0].(map[string]*CloudBackupSnapshotExportJob)[vs[1].(string)]
	}).(CloudBackupSnapshotExportJobOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudBackupSnapshotExportJobInput)(nil)).Elem(), &CloudBackupSnapshotExportJob{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudBackupSnapshotExportJobArrayInput)(nil)).Elem(), CloudBackupSnapshotExportJobArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudBackupSnapshotExportJobMapInput)(nil)).Elem(), CloudBackupSnapshotExportJobMap{})
	pulumi.RegisterOutputType(CloudBackupSnapshotExportJobOutput{})
	pulumi.RegisterOutputType(CloudBackupSnapshotExportJobArrayOutput{})
	pulumi.RegisterOutputType(CloudBackupSnapshotExportJobMapOutput{})
}
