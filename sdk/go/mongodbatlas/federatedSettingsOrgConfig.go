// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// # Resource: FederatedSettingsOrgConfig
//
// `FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
//
// ## Example Usage
//
// > **IMPORTANT** You **MUST** import this resource before you can manage it with this provider.
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewFederatedSettingsOrgConfig(ctx, "org_connection", &mongodbatlas.FederatedSettingsOrgConfigArgs{
//				FederationSettingsId: pulumi.String("627a9687f7f7f7f774de306f14"),
//				OrgId:                pulumi.String("627a9683ea7ff7f74de306f14"),
//				DataAccessIdentityProviderIds: pulumi.StringArray{
//					pulumi.String("64d613677e1ad50839cce4db"),
//				},
//				DomainRestrictionEnabled: pulumi.Bool(false),
//				DomainAllowLists: pulumi.StringArray{
//					pulumi.String("mydomain.com"),
//				},
//				PostAuthRoleGrants: pulumi.StringArray{
//					pulumi.String("ORG_MEMBER"),
//				},
//				IdentityProviderId: pulumi.String("0oaqyt9fc2ySTWnA0357"),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mongodbatlas.LookupFederatedSettingsOrgConfigs(ctx, &mongodbatlas.LookupFederatedSettingsOrgConfigsArgs{
//				FederationSettingsId: orgConnectionMongodbatlasFederatedSettingsOrgConfig.Id,
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// FederatedSettingsOrgConfig must be imported using federation_settings_id-org_id, e.g.
//
// ```sh
// $ pulumi import mongodbatlas:index/federatedSettingsOrgConfig:FederatedSettingsOrgConfig org_connection 627a9687f7f7f7f774de306f14-627a9683ea7ff7f74de306f14
// ```
// For more information see: [MongoDB Atlas API Reference.](https://www.mongodb.com/docs/atlas/reference/api/federation-configuration/)
type FederatedSettingsOrgConfig struct {
	pulumi.CustomResourceState

	// The collection of unique ids representing the identity providers that can be used for data access in this organization.
	DataAccessIdentityProviderIds pulumi.StringArrayOutput `pulumi:"dataAccessIdentityProviderIds"`
	// List that contains the approved domains from which organization users can log in.
	DomainAllowLists pulumi.StringArrayOutput `pulumi:"domainAllowLists"`
	// Flag that indicates whether domain restriction is enabled for the connected organization.
	DomainRestrictionEnabled pulumi.BoolOutput `pulumi:"domainRestrictionEnabled"`
	// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
	FederationSettingsId pulumi.StringOutput `pulumi:"federationSettingsId"`
	// Legacy 20-hexadecimal digit string that identifies the SAML access identity provider that this connected org config is associated with. Removing the attribute or providing the value `""` will detach/remove the SAML identity provider. This id can be found in two ways:
	// 1. Within the Federation Management UI in Atlas in the Identity Providers tab by clicking the info icon in the IdP ID row of a configured SAML identity provider
	// 2. `oktaIdpId` on the `FederatedSettingsIdentityProvider` resource
	IdentityProviderId pulumi.StringPtrOutput `pulumi:"identityProviderId"`
	// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
	OrgId pulumi.StringOutput `pulumi:"orgId"`
	// List that contains the default [roles](https://www.mongodb.com/docs/atlas/reference/user-roles/#std-label-organization-roles) granted to users who authenticate through the IdP in a connected organization.
	PostAuthRoleGrants pulumi.StringArrayOutput `pulumi:"postAuthRoleGrants"`
	// List that contains the users who have an email address that doesn't match any domain on the allowed list. See below
	UserConflicts FederatedSettingsOrgConfigUserConflictArrayOutput `pulumi:"userConflicts"`
}

// NewFederatedSettingsOrgConfig registers a new resource with the given unique name, arguments, and options.
func NewFederatedSettingsOrgConfig(ctx *pulumi.Context,
	name string, args *FederatedSettingsOrgConfigArgs, opts ...pulumi.ResourceOption) (*FederatedSettingsOrgConfig, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DomainRestrictionEnabled == nil {
		return nil, errors.New("invalid value for required argument 'DomainRestrictionEnabled'")
	}
	if args.FederationSettingsId == nil {
		return nil, errors.New("invalid value for required argument 'FederationSettingsId'")
	}
	if args.OrgId == nil {
		return nil, errors.New("invalid value for required argument 'OrgId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource FederatedSettingsOrgConfig
	err := ctx.RegisterResource("mongodbatlas:index/federatedSettingsOrgConfig:FederatedSettingsOrgConfig", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetFederatedSettingsOrgConfig gets an existing FederatedSettingsOrgConfig resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetFederatedSettingsOrgConfig(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *FederatedSettingsOrgConfigState, opts ...pulumi.ResourceOption) (*FederatedSettingsOrgConfig, error) {
	var resource FederatedSettingsOrgConfig
	err := ctx.ReadResource("mongodbatlas:index/federatedSettingsOrgConfig:FederatedSettingsOrgConfig", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering FederatedSettingsOrgConfig resources.
type federatedSettingsOrgConfigState struct {
	// The collection of unique ids representing the identity providers that can be used for data access in this organization.
	DataAccessIdentityProviderIds []string `pulumi:"dataAccessIdentityProviderIds"`
	// List that contains the approved domains from which organization users can log in.
	DomainAllowLists []string `pulumi:"domainAllowLists"`
	// Flag that indicates whether domain restriction is enabled for the connected organization.
	DomainRestrictionEnabled *bool `pulumi:"domainRestrictionEnabled"`
	// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
	FederationSettingsId *string `pulumi:"federationSettingsId"`
	// Legacy 20-hexadecimal digit string that identifies the SAML access identity provider that this connected org config is associated with. Removing the attribute or providing the value `""` will detach/remove the SAML identity provider. This id can be found in two ways:
	// 1. Within the Federation Management UI in Atlas in the Identity Providers tab by clicking the info icon in the IdP ID row of a configured SAML identity provider
	// 2. `oktaIdpId` on the `FederatedSettingsIdentityProvider` resource
	IdentityProviderId *string `pulumi:"identityProviderId"`
	// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
	OrgId *string `pulumi:"orgId"`
	// List that contains the default [roles](https://www.mongodb.com/docs/atlas/reference/user-roles/#std-label-organization-roles) granted to users who authenticate through the IdP in a connected organization.
	PostAuthRoleGrants []string `pulumi:"postAuthRoleGrants"`
	// List that contains the users who have an email address that doesn't match any domain on the allowed list. See below
	UserConflicts []FederatedSettingsOrgConfigUserConflict `pulumi:"userConflicts"`
}

type FederatedSettingsOrgConfigState struct {
	// The collection of unique ids representing the identity providers that can be used for data access in this organization.
	DataAccessIdentityProviderIds pulumi.StringArrayInput
	// List that contains the approved domains from which organization users can log in.
	DomainAllowLists pulumi.StringArrayInput
	// Flag that indicates whether domain restriction is enabled for the connected organization.
	DomainRestrictionEnabled pulumi.BoolPtrInput
	// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
	FederationSettingsId pulumi.StringPtrInput
	// Legacy 20-hexadecimal digit string that identifies the SAML access identity provider that this connected org config is associated with. Removing the attribute or providing the value `""` will detach/remove the SAML identity provider. This id can be found in two ways:
	// 1. Within the Federation Management UI in Atlas in the Identity Providers tab by clicking the info icon in the IdP ID row of a configured SAML identity provider
	// 2. `oktaIdpId` on the `FederatedSettingsIdentityProvider` resource
	IdentityProviderId pulumi.StringPtrInput
	// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
	OrgId pulumi.StringPtrInput
	// List that contains the default [roles](https://www.mongodb.com/docs/atlas/reference/user-roles/#std-label-organization-roles) granted to users who authenticate through the IdP in a connected organization.
	PostAuthRoleGrants pulumi.StringArrayInput
	// List that contains the users who have an email address that doesn't match any domain on the allowed list. See below
	UserConflicts FederatedSettingsOrgConfigUserConflictArrayInput
}

func (FederatedSettingsOrgConfigState) ElementType() reflect.Type {
	return reflect.TypeOf((*federatedSettingsOrgConfigState)(nil)).Elem()
}

type federatedSettingsOrgConfigArgs struct {
	// The collection of unique ids representing the identity providers that can be used for data access in this organization.
	DataAccessIdentityProviderIds []string `pulumi:"dataAccessIdentityProviderIds"`
	// List that contains the approved domains from which organization users can log in.
	DomainAllowLists []string `pulumi:"domainAllowLists"`
	// Flag that indicates whether domain restriction is enabled for the connected organization.
	DomainRestrictionEnabled bool `pulumi:"domainRestrictionEnabled"`
	// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
	FederationSettingsId string `pulumi:"federationSettingsId"`
	// Legacy 20-hexadecimal digit string that identifies the SAML access identity provider that this connected org config is associated with. Removing the attribute or providing the value `""` will detach/remove the SAML identity provider. This id can be found in two ways:
	// 1. Within the Federation Management UI in Atlas in the Identity Providers tab by clicking the info icon in the IdP ID row of a configured SAML identity provider
	// 2. `oktaIdpId` on the `FederatedSettingsIdentityProvider` resource
	IdentityProviderId *string `pulumi:"identityProviderId"`
	// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
	OrgId string `pulumi:"orgId"`
	// List that contains the default [roles](https://www.mongodb.com/docs/atlas/reference/user-roles/#std-label-organization-roles) granted to users who authenticate through the IdP in a connected organization.
	PostAuthRoleGrants []string `pulumi:"postAuthRoleGrants"`
}

// The set of arguments for constructing a FederatedSettingsOrgConfig resource.
type FederatedSettingsOrgConfigArgs struct {
	// The collection of unique ids representing the identity providers that can be used for data access in this organization.
	DataAccessIdentityProviderIds pulumi.StringArrayInput
	// List that contains the approved domains from which organization users can log in.
	DomainAllowLists pulumi.StringArrayInput
	// Flag that indicates whether domain restriction is enabled for the connected organization.
	DomainRestrictionEnabled pulumi.BoolInput
	// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
	FederationSettingsId pulumi.StringInput
	// Legacy 20-hexadecimal digit string that identifies the SAML access identity provider that this connected org config is associated with. Removing the attribute or providing the value `""` will detach/remove the SAML identity provider. This id can be found in two ways:
	// 1. Within the Federation Management UI in Atlas in the Identity Providers tab by clicking the info icon in the IdP ID row of a configured SAML identity provider
	// 2. `oktaIdpId` on the `FederatedSettingsIdentityProvider` resource
	IdentityProviderId pulumi.StringPtrInput
	// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
	OrgId pulumi.StringInput
	// List that contains the default [roles](https://www.mongodb.com/docs/atlas/reference/user-roles/#std-label-organization-roles) granted to users who authenticate through the IdP in a connected organization.
	PostAuthRoleGrants pulumi.StringArrayInput
}

func (FederatedSettingsOrgConfigArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*federatedSettingsOrgConfigArgs)(nil)).Elem()
}

type FederatedSettingsOrgConfigInput interface {
	pulumi.Input

	ToFederatedSettingsOrgConfigOutput() FederatedSettingsOrgConfigOutput
	ToFederatedSettingsOrgConfigOutputWithContext(ctx context.Context) FederatedSettingsOrgConfigOutput
}

func (*FederatedSettingsOrgConfig) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedSettingsOrgConfig)(nil)).Elem()
}

func (i *FederatedSettingsOrgConfig) ToFederatedSettingsOrgConfigOutput() FederatedSettingsOrgConfigOutput {
	return i.ToFederatedSettingsOrgConfigOutputWithContext(context.Background())
}

func (i *FederatedSettingsOrgConfig) ToFederatedSettingsOrgConfigOutputWithContext(ctx context.Context) FederatedSettingsOrgConfigOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedSettingsOrgConfigOutput)
}

// FederatedSettingsOrgConfigArrayInput is an input type that accepts FederatedSettingsOrgConfigArray and FederatedSettingsOrgConfigArrayOutput values.
// You can construct a concrete instance of `FederatedSettingsOrgConfigArrayInput` via:
//
//	FederatedSettingsOrgConfigArray{ FederatedSettingsOrgConfigArgs{...} }
type FederatedSettingsOrgConfigArrayInput interface {
	pulumi.Input

	ToFederatedSettingsOrgConfigArrayOutput() FederatedSettingsOrgConfigArrayOutput
	ToFederatedSettingsOrgConfigArrayOutputWithContext(context.Context) FederatedSettingsOrgConfigArrayOutput
}

type FederatedSettingsOrgConfigArray []FederatedSettingsOrgConfigInput

func (FederatedSettingsOrgConfigArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederatedSettingsOrgConfig)(nil)).Elem()
}

func (i FederatedSettingsOrgConfigArray) ToFederatedSettingsOrgConfigArrayOutput() FederatedSettingsOrgConfigArrayOutput {
	return i.ToFederatedSettingsOrgConfigArrayOutputWithContext(context.Background())
}

func (i FederatedSettingsOrgConfigArray) ToFederatedSettingsOrgConfigArrayOutputWithContext(ctx context.Context) FederatedSettingsOrgConfigArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedSettingsOrgConfigArrayOutput)
}

// FederatedSettingsOrgConfigMapInput is an input type that accepts FederatedSettingsOrgConfigMap and FederatedSettingsOrgConfigMapOutput values.
// You can construct a concrete instance of `FederatedSettingsOrgConfigMapInput` via:
//
//	FederatedSettingsOrgConfigMap{ "key": FederatedSettingsOrgConfigArgs{...} }
type FederatedSettingsOrgConfigMapInput interface {
	pulumi.Input

	ToFederatedSettingsOrgConfigMapOutput() FederatedSettingsOrgConfigMapOutput
	ToFederatedSettingsOrgConfigMapOutputWithContext(context.Context) FederatedSettingsOrgConfigMapOutput
}

type FederatedSettingsOrgConfigMap map[string]FederatedSettingsOrgConfigInput

func (FederatedSettingsOrgConfigMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederatedSettingsOrgConfig)(nil)).Elem()
}

func (i FederatedSettingsOrgConfigMap) ToFederatedSettingsOrgConfigMapOutput() FederatedSettingsOrgConfigMapOutput {
	return i.ToFederatedSettingsOrgConfigMapOutputWithContext(context.Background())
}

func (i FederatedSettingsOrgConfigMap) ToFederatedSettingsOrgConfigMapOutputWithContext(ctx context.Context) FederatedSettingsOrgConfigMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(FederatedSettingsOrgConfigMapOutput)
}

type FederatedSettingsOrgConfigOutput struct{ *pulumi.OutputState }

func (FederatedSettingsOrgConfigOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**FederatedSettingsOrgConfig)(nil)).Elem()
}

func (o FederatedSettingsOrgConfigOutput) ToFederatedSettingsOrgConfigOutput() FederatedSettingsOrgConfigOutput {
	return o
}

func (o FederatedSettingsOrgConfigOutput) ToFederatedSettingsOrgConfigOutputWithContext(ctx context.Context) FederatedSettingsOrgConfigOutput {
	return o
}

// The collection of unique ids representing the identity providers that can be used for data access in this organization.
func (o FederatedSettingsOrgConfigOutput) DataAccessIdentityProviderIds() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FederatedSettingsOrgConfig) pulumi.StringArrayOutput { return v.DataAccessIdentityProviderIds }).(pulumi.StringArrayOutput)
}

// List that contains the approved domains from which organization users can log in.
func (o FederatedSettingsOrgConfigOutput) DomainAllowLists() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FederatedSettingsOrgConfig) pulumi.StringArrayOutput { return v.DomainAllowLists }).(pulumi.StringArrayOutput)
}

// Flag that indicates whether domain restriction is enabled for the connected organization.
func (o FederatedSettingsOrgConfigOutput) DomainRestrictionEnabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *FederatedSettingsOrgConfig) pulumi.BoolOutput { return v.DomainRestrictionEnabled }).(pulumi.BoolOutput)
}

// Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
func (o FederatedSettingsOrgConfigOutput) FederationSettingsId() pulumi.StringOutput {
	return o.ApplyT(func(v *FederatedSettingsOrgConfig) pulumi.StringOutput { return v.FederationSettingsId }).(pulumi.StringOutput)
}

// Legacy 20-hexadecimal digit string that identifies the SAML access identity provider that this connected org config is associated with. Removing the attribute or providing the value `""` will detach/remove the SAML identity provider. This id can be found in two ways:
// 1. Within the Federation Management UI in Atlas in the Identity Providers tab by clicking the info icon in the IdP ID row of a configured SAML identity provider
// 2. `oktaIdpId` on the `FederatedSettingsIdentityProvider` resource
func (o FederatedSettingsOrgConfigOutput) IdentityProviderId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *FederatedSettingsOrgConfig) pulumi.StringPtrOutput { return v.IdentityProviderId }).(pulumi.StringPtrOutput)
}

// Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
func (o FederatedSettingsOrgConfigOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v *FederatedSettingsOrgConfig) pulumi.StringOutput { return v.OrgId }).(pulumi.StringOutput)
}

// List that contains the default [roles](https://www.mongodb.com/docs/atlas/reference/user-roles/#std-label-organization-roles) granted to users who authenticate through the IdP in a connected organization.
func (o FederatedSettingsOrgConfigOutput) PostAuthRoleGrants() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *FederatedSettingsOrgConfig) pulumi.StringArrayOutput { return v.PostAuthRoleGrants }).(pulumi.StringArrayOutput)
}

// List that contains the users who have an email address that doesn't match any domain on the allowed list. See below
func (o FederatedSettingsOrgConfigOutput) UserConflicts() FederatedSettingsOrgConfigUserConflictArrayOutput {
	return o.ApplyT(func(v *FederatedSettingsOrgConfig) FederatedSettingsOrgConfigUserConflictArrayOutput {
		return v.UserConflicts
	}).(FederatedSettingsOrgConfigUserConflictArrayOutput)
}

type FederatedSettingsOrgConfigArrayOutput struct{ *pulumi.OutputState }

func (FederatedSettingsOrgConfigArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*FederatedSettingsOrgConfig)(nil)).Elem()
}

func (o FederatedSettingsOrgConfigArrayOutput) ToFederatedSettingsOrgConfigArrayOutput() FederatedSettingsOrgConfigArrayOutput {
	return o
}

func (o FederatedSettingsOrgConfigArrayOutput) ToFederatedSettingsOrgConfigArrayOutputWithContext(ctx context.Context) FederatedSettingsOrgConfigArrayOutput {
	return o
}

func (o FederatedSettingsOrgConfigArrayOutput) Index(i pulumi.IntInput) FederatedSettingsOrgConfigOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *FederatedSettingsOrgConfig {
		return vs[0].([]*FederatedSettingsOrgConfig)[vs[1].(int)]
	}).(FederatedSettingsOrgConfigOutput)
}

type FederatedSettingsOrgConfigMapOutput struct{ *pulumi.OutputState }

func (FederatedSettingsOrgConfigMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*FederatedSettingsOrgConfig)(nil)).Elem()
}

func (o FederatedSettingsOrgConfigMapOutput) ToFederatedSettingsOrgConfigMapOutput() FederatedSettingsOrgConfigMapOutput {
	return o
}

func (o FederatedSettingsOrgConfigMapOutput) ToFederatedSettingsOrgConfigMapOutputWithContext(ctx context.Context) FederatedSettingsOrgConfigMapOutput {
	return o
}

func (o FederatedSettingsOrgConfigMapOutput) MapIndex(k pulumi.StringInput) FederatedSettingsOrgConfigOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *FederatedSettingsOrgConfig {
		return vs[0].(map[string]*FederatedSettingsOrgConfig)[vs[1].(string)]
	}).(FederatedSettingsOrgConfigOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedSettingsOrgConfigInput)(nil)).Elem(), &FederatedSettingsOrgConfig{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedSettingsOrgConfigArrayInput)(nil)).Elem(), FederatedSettingsOrgConfigArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*FederatedSettingsOrgConfigMapInput)(nil)).Elem(), FederatedSettingsOrgConfigMap{})
	pulumi.RegisterOutputType(FederatedSettingsOrgConfigOutput{})
	pulumi.RegisterOutputType(FederatedSettingsOrgConfigArrayOutput{})
	pulumi.RegisterOutputType(FederatedSettingsOrgConfigMapOutput{})
}
