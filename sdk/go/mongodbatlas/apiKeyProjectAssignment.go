// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: ApiKeyProjectAssignment
//
// `ApiKeyProjectAssignment` provides an API Key Project Assignment resource. The resource lets you create, edit, and delete Organization API keys assignments to projects.
//
// ## Example Usage
//
// ### S
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			this, err := mongodbatlas.NewApiKey(ctx, "this", &mongodbatlas.ApiKeyArgs{
//				OrgId:       pulumi.Any(orgId),
//				Description: pulumi.String("Test API Key"),
//				RoleNames: pulumi.StringArray{
//					pulumi.String("ORG_READ_ONLY"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			firstProject, err := mongodbatlas.NewProject(ctx, "first_project", &mongodbatlas.ProjectArgs{
//				Name:  pulumi.String("First Project"),
//				OrgId: pulumi.Any(orgId),
//			})
//			if err != nil {
//				return err
//			}
//			secondProject, err := mongodbatlas.NewProject(ctx, "second_project", &mongodbatlas.ProjectArgs{
//				Name:  pulumi.String("Second Project"),
//				OrgId: pulumi.Any(orgId),
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mongodbatlas.NewApiKeyProjectAssignment(ctx, "first_assignment", &mongodbatlas.ApiKeyProjectAssignmentArgs{
//				ProjectId: firstProject.ID(),
//				ApiKeyId:  this.ApiKeyId,
//				Roles: pulumi.StringArray{
//					pulumi.String("GROUP_OWNER"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_, err = mongodbatlas.NewApiKeyProjectAssignment(ctx, "second_assignment", &mongodbatlas.ApiKeyProjectAssignmentArgs{
//				ProjectId: secondProject.ID(),
//				ApiKeyId:  this.ApiKeyId,
//				Roles: pulumi.StringArray{
//					pulumi.String("GROUP_OWNER"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			// Add IP Access List Entry to Programmatic API Key
//			_, err = mongodbatlas.NewAccessListApiKey(ctx, "this", &mongodbatlas.AccessListApiKeyArgs{
//				OrgId:     pulumi.Any(orgId),
//				CidrBlock: pulumi.String("0.0.0.0/1"),
//				ApiKeyId:  this.ApiKeyId,
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// API Key Project Assignment resource can be imported using the project ID and API key ID, in the format `{PROJECT_ID}/{API_KEY_ID}`, e.g.
//
// For more information see: [MongoDB Atlas API - Programmatic API Keys Project Assignment](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/group/endpoint-programmatic-api-keys) Documentation.
type ApiKeyProjectAssignment struct {
	pulumi.CustomResourceState

	// Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
	ApiKeyId pulumi.StringOutput `pulumi:"apiKeyId"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
	Roles pulumi.StringArrayOutput `pulumi:"roles"`
}

// NewApiKeyProjectAssignment registers a new resource with the given unique name, arguments, and options.
func NewApiKeyProjectAssignment(ctx *pulumi.Context,
	name string, args *ApiKeyProjectAssignmentArgs, opts ...pulumi.ResourceOption) (*ApiKeyProjectAssignment, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ApiKeyId == nil {
		return nil, errors.New("invalid value for required argument 'ApiKeyId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Roles == nil {
		return nil, errors.New("invalid value for required argument 'Roles'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource ApiKeyProjectAssignment
	err := ctx.RegisterResource("mongodbatlas:index/apiKeyProjectAssignment:ApiKeyProjectAssignment", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetApiKeyProjectAssignment gets an existing ApiKeyProjectAssignment resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetApiKeyProjectAssignment(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *ApiKeyProjectAssignmentState, opts ...pulumi.ResourceOption) (*ApiKeyProjectAssignment, error) {
	var resource ApiKeyProjectAssignment
	err := ctx.ReadResource("mongodbatlas:index/apiKeyProjectAssignment:ApiKeyProjectAssignment", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering ApiKeyProjectAssignment resources.
type apiKeyProjectAssignmentState struct {
	// Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
	ApiKeyId *string `pulumi:"apiKeyId"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId *string `pulumi:"projectId"`
	// Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
	Roles []string `pulumi:"roles"`
}

type ApiKeyProjectAssignmentState struct {
	// Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
	ApiKeyId pulumi.StringPtrInput
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId pulumi.StringPtrInput
	// Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
	Roles pulumi.StringArrayInput
}

func (ApiKeyProjectAssignmentState) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyProjectAssignmentState)(nil)).Elem()
}

type apiKeyProjectAssignmentArgs struct {
	// Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
	ApiKeyId string `pulumi:"apiKeyId"`
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId string `pulumi:"projectId"`
	// Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
	Roles []string `pulumi:"roles"`
}

// The set of arguments for constructing a ApiKeyProjectAssignment resource.
type ApiKeyProjectAssignmentArgs struct {
	// Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
	ApiKeyId pulumi.StringInput
	// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId pulumi.StringInput
	// Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
	Roles pulumi.StringArrayInput
}

func (ApiKeyProjectAssignmentArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*apiKeyProjectAssignmentArgs)(nil)).Elem()
}

type ApiKeyProjectAssignmentInput interface {
	pulumi.Input

	ToApiKeyProjectAssignmentOutput() ApiKeyProjectAssignmentOutput
	ToApiKeyProjectAssignmentOutputWithContext(ctx context.Context) ApiKeyProjectAssignmentOutput
}

func (*ApiKeyProjectAssignment) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKeyProjectAssignment)(nil)).Elem()
}

func (i *ApiKeyProjectAssignment) ToApiKeyProjectAssignmentOutput() ApiKeyProjectAssignmentOutput {
	return i.ToApiKeyProjectAssignmentOutputWithContext(context.Background())
}

func (i *ApiKeyProjectAssignment) ToApiKeyProjectAssignmentOutputWithContext(ctx context.Context) ApiKeyProjectAssignmentOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyProjectAssignmentOutput)
}

// ApiKeyProjectAssignmentArrayInput is an input type that accepts ApiKeyProjectAssignmentArray and ApiKeyProjectAssignmentArrayOutput values.
// You can construct a concrete instance of `ApiKeyProjectAssignmentArrayInput` via:
//
//	ApiKeyProjectAssignmentArray{ ApiKeyProjectAssignmentArgs{...} }
type ApiKeyProjectAssignmentArrayInput interface {
	pulumi.Input

	ToApiKeyProjectAssignmentArrayOutput() ApiKeyProjectAssignmentArrayOutput
	ToApiKeyProjectAssignmentArrayOutputWithContext(context.Context) ApiKeyProjectAssignmentArrayOutput
}

type ApiKeyProjectAssignmentArray []ApiKeyProjectAssignmentInput

func (ApiKeyProjectAssignmentArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiKeyProjectAssignment)(nil)).Elem()
}

func (i ApiKeyProjectAssignmentArray) ToApiKeyProjectAssignmentArrayOutput() ApiKeyProjectAssignmentArrayOutput {
	return i.ToApiKeyProjectAssignmentArrayOutputWithContext(context.Background())
}

func (i ApiKeyProjectAssignmentArray) ToApiKeyProjectAssignmentArrayOutputWithContext(ctx context.Context) ApiKeyProjectAssignmentArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyProjectAssignmentArrayOutput)
}

// ApiKeyProjectAssignmentMapInput is an input type that accepts ApiKeyProjectAssignmentMap and ApiKeyProjectAssignmentMapOutput values.
// You can construct a concrete instance of `ApiKeyProjectAssignmentMapInput` via:
//
//	ApiKeyProjectAssignmentMap{ "key": ApiKeyProjectAssignmentArgs{...} }
type ApiKeyProjectAssignmentMapInput interface {
	pulumi.Input

	ToApiKeyProjectAssignmentMapOutput() ApiKeyProjectAssignmentMapOutput
	ToApiKeyProjectAssignmentMapOutputWithContext(context.Context) ApiKeyProjectAssignmentMapOutput
}

type ApiKeyProjectAssignmentMap map[string]ApiKeyProjectAssignmentInput

func (ApiKeyProjectAssignmentMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiKeyProjectAssignment)(nil)).Elem()
}

func (i ApiKeyProjectAssignmentMap) ToApiKeyProjectAssignmentMapOutput() ApiKeyProjectAssignmentMapOutput {
	return i.ToApiKeyProjectAssignmentMapOutputWithContext(context.Background())
}

func (i ApiKeyProjectAssignmentMap) ToApiKeyProjectAssignmentMapOutputWithContext(ctx context.Context) ApiKeyProjectAssignmentMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(ApiKeyProjectAssignmentMapOutput)
}

type ApiKeyProjectAssignmentOutput struct{ *pulumi.OutputState }

func (ApiKeyProjectAssignmentOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**ApiKeyProjectAssignment)(nil)).Elem()
}

func (o ApiKeyProjectAssignmentOutput) ToApiKeyProjectAssignmentOutput() ApiKeyProjectAssignmentOutput {
	return o
}

func (o ApiKeyProjectAssignmentOutput) ToApiKeyProjectAssignmentOutputWithContext(ctx context.Context) ApiKeyProjectAssignmentOutput {
	return o
}

// Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
func (o ApiKeyProjectAssignmentOutput) ApiKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKeyProjectAssignment) pulumi.StringOutput { return v.ApiKeyId }).(pulumi.StringOutput)
}

// Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
func (o ApiKeyProjectAssignmentOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *ApiKeyProjectAssignment) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
func (o ApiKeyProjectAssignmentOutput) Roles() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *ApiKeyProjectAssignment) pulumi.StringArrayOutput { return v.Roles }).(pulumi.StringArrayOutput)
}

type ApiKeyProjectAssignmentArrayOutput struct{ *pulumi.OutputState }

func (ApiKeyProjectAssignmentArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*ApiKeyProjectAssignment)(nil)).Elem()
}

func (o ApiKeyProjectAssignmentArrayOutput) ToApiKeyProjectAssignmentArrayOutput() ApiKeyProjectAssignmentArrayOutput {
	return o
}

func (o ApiKeyProjectAssignmentArrayOutput) ToApiKeyProjectAssignmentArrayOutputWithContext(ctx context.Context) ApiKeyProjectAssignmentArrayOutput {
	return o
}

func (o ApiKeyProjectAssignmentArrayOutput) Index(i pulumi.IntInput) ApiKeyProjectAssignmentOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *ApiKeyProjectAssignment {
		return vs[0].([]*ApiKeyProjectAssignment)[vs[1].(int)]
	}).(ApiKeyProjectAssignmentOutput)
}

type ApiKeyProjectAssignmentMapOutput struct{ *pulumi.OutputState }

func (ApiKeyProjectAssignmentMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*ApiKeyProjectAssignment)(nil)).Elem()
}

func (o ApiKeyProjectAssignmentMapOutput) ToApiKeyProjectAssignmentMapOutput() ApiKeyProjectAssignmentMapOutput {
	return o
}

func (o ApiKeyProjectAssignmentMapOutput) ToApiKeyProjectAssignmentMapOutputWithContext(ctx context.Context) ApiKeyProjectAssignmentMapOutput {
	return o
}

func (o ApiKeyProjectAssignmentMapOutput) MapIndex(k pulumi.StringInput) ApiKeyProjectAssignmentOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *ApiKeyProjectAssignment {
		return vs[0].(map[string]*ApiKeyProjectAssignment)[vs[1].(string)]
	}).(ApiKeyProjectAssignmentOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyProjectAssignmentInput)(nil)).Elem(), &ApiKeyProjectAssignment{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyProjectAssignmentArrayInput)(nil)).Elem(), ApiKeyProjectAssignmentArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*ApiKeyProjectAssignmentMapInput)(nil)).Elem(), ApiKeyProjectAssignmentMap{})
	pulumi.RegisterOutputType(ApiKeyProjectAssignmentOutput{})
	pulumi.RegisterOutputType(ApiKeyProjectAssignmentArrayOutput{})
	pulumi.RegisterOutputType(ApiKeyProjectAssignmentMapOutput{})
}
