// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `getServerlessInstances` describe all serverless instances. This represents serverless instances that have been created for the specified group id.
//
// > **NOTE:**  Serverless instances do not support some Atlas features at this time.
// For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
//
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.LookupServerlessInstances(ctx, &mongodbatlas.LookupServerlessInstancesArgs{
//				ProjectId: "<PROJECT_ID",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupServerlessInstances(ctx *pulumi.Context, args *LookupServerlessInstancesArgs, opts ...pulumi.InvokeOption) (*LookupServerlessInstancesResult, error) {
	var rv LookupServerlessInstancesResult
	err := ctx.Invoke("mongodbatlas:index/getServerlessInstances:getServerlessInstances", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getServerlessInstances.
type LookupServerlessInstancesArgs struct {
	// Unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getServerlessInstances.
type LookupServerlessInstancesResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ProjectId string `pulumi:"projectId"`
	// A list where each represents a search index.
	Results []GetServerlessInstancesResult `pulumi:"results"`
}

func LookupServerlessInstancesOutput(ctx *pulumi.Context, args LookupServerlessInstancesOutputArgs, opts ...pulumi.InvokeOption) LookupServerlessInstancesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupServerlessInstancesResult, error) {
			args := v.(LookupServerlessInstancesArgs)
			r, err := LookupServerlessInstances(ctx, &args, opts...)
			var s LookupServerlessInstancesResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupServerlessInstancesResultOutput)
}

// A collection of arguments for invoking getServerlessInstances.
type LookupServerlessInstancesOutputArgs struct {
	// Unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupServerlessInstancesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerlessInstancesArgs)(nil)).Elem()
}

// A collection of values returned by getServerlessInstances.
type LookupServerlessInstancesResultOutput struct{ *pulumi.OutputState }

func (LookupServerlessInstancesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupServerlessInstancesResult)(nil)).Elem()
}

func (o LookupServerlessInstancesResultOutput) ToLookupServerlessInstancesResultOutput() LookupServerlessInstancesResultOutput {
	return o
}

func (o LookupServerlessInstancesResultOutput) ToLookupServerlessInstancesResultOutputWithContext(ctx context.Context) LookupServerlessInstancesResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupServerlessInstancesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessInstancesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupServerlessInstancesResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupServerlessInstancesResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// A list where each represents a search index.
func (o LookupServerlessInstancesResultOutput) Results() GetServerlessInstancesResultArrayOutput {
	return o.ApplyT(func(v LookupServerlessInstancesResult) []GetServerlessInstancesResult { return v.Results }).(GetServerlessInstancesResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupServerlessInstancesResultOutput{})
}
