// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `LdapVerify` provides an LDAP Verify resource. This allows a a verification of an LDAP configuration over TLS for an Atlas project. Atlas retains only the most recent request for each project.
//
// ## Example Usage
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		testProject, err := mongodbatlas.NewProject(ctx, "testProject", &mongodbatlas.ProjectArgs{
// 			OrgId: pulumi.String("ORG ID"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		testCluster, err := mongodbatlas.NewCluster(ctx, "testCluster", &mongodbatlas.ClusterArgs{
// 			ProjectId:                testProject.ID(),
// 			DiskSizeGb:               pulumi.Float64(5),
// 			ProviderName:             pulumi.String("AWS"),
// 			ProviderRegionName:       pulumi.String("US_EAST_2"),
// 			ProviderInstanceSizeName: pulumi.String("M10"),
// 			CloudBackup:              pulumi.Bool(true),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		_, err = mongodbatlas.NewLdapVerify(ctx, "testLdapVerify", &mongodbatlas.LdapVerifyArgs{
// 			ProjectId:    testProject.ID(),
// 			Hostname:     pulumi.String("HOSTNAME"),
// 			Port:         pulumi.Int(636),
// 			BindUsername: pulumi.String("USERNAME"),
// 			BindPassword: pulumi.String("PASSWORD"),
// 		}, pulumi.DependsOn([]pulumi.Resource{
// 			testCluster,
// 		}))
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ## Import
//
// LDAP Configuration must be imported using project ID and request ID, e.g.
//
// ```sh
//  $ pulumi import mongodbatlas:index/ldapVerify:LdapVerify test 5d09d6a59ccf6445652a444a-5d09d6a59ccf6445652a444a
// ```
//
//  For more information see[MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
type LdapVerify struct {
	pulumi.CustomResourceState

	// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
	AuthzQueryTemplate pulumi.StringOutput `pulumi:"authzQueryTemplate"`
	// The password used to authenticate the `bindUsername`.
	BindPassword pulumi.StringOutput `pulumi:"bindPassword"`
	// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
	BindUsername pulumi.StringOutput `pulumi:"bindUsername"`
	// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
	CaCertificate pulumi.StringOutput `pulumi:"caCertificate"`
	// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
	Hostname pulumi.StringOutput `pulumi:"hostname"`
	// One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
	Links LdapVerifyLinkArrayOutput `pulumi:"links"`
	// The port to which the LDAP server listens for client connections. Default: `636`
	Port pulumi.IntOutput `pulumi:"port"`
	// The unique ID for the project to configure LDAP.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
	RequestId pulumi.StringOutput `pulumi:"requestId"`
	// The current status of the LDAP over TLS/SSL configuration. One of the following values: `PENDING`, `SUCCESS`, and `FAILED`.
	Status pulumi.StringOutput `pulumi:"status"`
	// Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details. The array contains a document for each test that Atlas runs. Atlas stops running tests after the first failure. The following return values can be seen here: [Values](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
	Validations LdapVerifyValidationArrayOutput `pulumi:"validations"`
}

// NewLdapVerify registers a new resource with the given unique name, arguments, and options.
func NewLdapVerify(ctx *pulumi.Context,
	name string, args *LdapVerifyArgs, opts ...pulumi.ResourceOption) (*LdapVerify, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.BindPassword == nil {
		return nil, errors.New("invalid value for required argument 'BindPassword'")
	}
	if args.BindUsername == nil {
		return nil, errors.New("invalid value for required argument 'BindUsername'")
	}
	if args.Hostname == nil {
		return nil, errors.New("invalid value for required argument 'Hostname'")
	}
	if args.Port == nil {
		return nil, errors.New("invalid value for required argument 'Port'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	var resource LdapVerify
	err := ctx.RegisterResource("mongodbatlas:index/ldapVerify:LdapVerify", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetLdapVerify gets an existing LdapVerify resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetLdapVerify(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *LdapVerifyState, opts ...pulumi.ResourceOption) (*LdapVerify, error) {
	var resource LdapVerify
	err := ctx.ReadResource("mongodbatlas:index/ldapVerify:LdapVerify", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering LdapVerify resources.
type ldapVerifyState struct {
	// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
	AuthzQueryTemplate *string `pulumi:"authzQueryTemplate"`
	// The password used to authenticate the `bindUsername`.
	BindPassword *string `pulumi:"bindPassword"`
	// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
	BindUsername *string `pulumi:"bindUsername"`
	// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
	CaCertificate *string `pulumi:"caCertificate"`
	// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
	Hostname *string `pulumi:"hostname"`
	// One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
	Links []LdapVerifyLink `pulumi:"links"`
	// The port to which the LDAP server listens for client connections. Default: `636`
	Port *int `pulumi:"port"`
	// The unique ID for the project to configure LDAP.
	ProjectId *string `pulumi:"projectId"`
	// The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
	RequestId *string `pulumi:"requestId"`
	// The current status of the LDAP over TLS/SSL configuration. One of the following values: `PENDING`, `SUCCESS`, and `FAILED`.
	Status *string `pulumi:"status"`
	// Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details. The array contains a document for each test that Atlas runs. Atlas stops running tests after the first failure. The following return values can be seen here: [Values](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
	Validations []LdapVerifyValidation `pulumi:"validations"`
}

type LdapVerifyState struct {
	// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
	AuthzQueryTemplate pulumi.StringPtrInput
	// The password used to authenticate the `bindUsername`.
	BindPassword pulumi.StringPtrInput
	// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
	BindUsername pulumi.StringPtrInput
	// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
	CaCertificate pulumi.StringPtrInput
	// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
	Hostname pulumi.StringPtrInput
	// One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
	Links LdapVerifyLinkArrayInput
	// The port to which the LDAP server listens for client connections. Default: `636`
	Port pulumi.IntPtrInput
	// The unique ID for the project to configure LDAP.
	ProjectId pulumi.StringPtrInput
	// The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
	RequestId pulumi.StringPtrInput
	// The current status of the LDAP over TLS/SSL configuration. One of the following values: `PENDING`, `SUCCESS`, and `FAILED`.
	Status pulumi.StringPtrInput
	// Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details. The array contains a document for each test that Atlas runs. Atlas stops running tests after the first failure. The following return values can be seen here: [Values](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
	Validations LdapVerifyValidationArrayInput
}

func (LdapVerifyState) ElementType() reflect.Type {
	return reflect.TypeOf((*ldapVerifyState)(nil)).Elem()
}

type ldapVerifyArgs struct {
	// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
	AuthzQueryTemplate *string `pulumi:"authzQueryTemplate"`
	// The password used to authenticate the `bindUsername`.
	BindPassword string `pulumi:"bindPassword"`
	// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
	BindUsername string `pulumi:"bindUsername"`
	// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
	CaCertificate *string `pulumi:"caCertificate"`
	// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
	Hostname string `pulumi:"hostname"`
	// The port to which the LDAP server listens for client connections. Default: `636`
	Port int `pulumi:"port"`
	// The unique ID for the project to configure LDAP.
	ProjectId string `pulumi:"projectId"`
}

// The set of arguments for constructing a LdapVerify resource.
type LdapVerifyArgs struct {
	// An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
	AuthzQueryTemplate pulumi.StringPtrInput
	// The password used to authenticate the `bindUsername`.
	BindPassword pulumi.StringInput
	// The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
	BindUsername pulumi.StringInput
	// CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
	CaCertificate pulumi.StringPtrInput
	// The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
	Hostname pulumi.StringInput
	// The port to which the LDAP server listens for client connections. Default: `636`
	Port pulumi.IntInput
	// The unique ID for the project to configure LDAP.
	ProjectId pulumi.StringInput
}

func (LdapVerifyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*ldapVerifyArgs)(nil)).Elem()
}

type LdapVerifyInput interface {
	pulumi.Input

	ToLdapVerifyOutput() LdapVerifyOutput
	ToLdapVerifyOutputWithContext(ctx context.Context) LdapVerifyOutput
}

func (*LdapVerify) ElementType() reflect.Type {
	return reflect.TypeOf((**LdapVerify)(nil)).Elem()
}

func (i *LdapVerify) ToLdapVerifyOutput() LdapVerifyOutput {
	return i.ToLdapVerifyOutputWithContext(context.Background())
}

func (i *LdapVerify) ToLdapVerifyOutputWithContext(ctx context.Context) LdapVerifyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapVerifyOutput)
}

// LdapVerifyArrayInput is an input type that accepts LdapVerifyArray and LdapVerifyArrayOutput values.
// You can construct a concrete instance of `LdapVerifyArrayInput` via:
//
//          LdapVerifyArray{ LdapVerifyArgs{...} }
type LdapVerifyArrayInput interface {
	pulumi.Input

	ToLdapVerifyArrayOutput() LdapVerifyArrayOutput
	ToLdapVerifyArrayOutputWithContext(context.Context) LdapVerifyArrayOutput
}

type LdapVerifyArray []LdapVerifyInput

func (LdapVerifyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LdapVerify)(nil)).Elem()
}

func (i LdapVerifyArray) ToLdapVerifyArrayOutput() LdapVerifyArrayOutput {
	return i.ToLdapVerifyArrayOutputWithContext(context.Background())
}

func (i LdapVerifyArray) ToLdapVerifyArrayOutputWithContext(ctx context.Context) LdapVerifyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapVerifyArrayOutput)
}

// LdapVerifyMapInput is an input type that accepts LdapVerifyMap and LdapVerifyMapOutput values.
// You can construct a concrete instance of `LdapVerifyMapInput` via:
//
//          LdapVerifyMap{ "key": LdapVerifyArgs{...} }
type LdapVerifyMapInput interface {
	pulumi.Input

	ToLdapVerifyMapOutput() LdapVerifyMapOutput
	ToLdapVerifyMapOutputWithContext(context.Context) LdapVerifyMapOutput
}

type LdapVerifyMap map[string]LdapVerifyInput

func (LdapVerifyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LdapVerify)(nil)).Elem()
}

func (i LdapVerifyMap) ToLdapVerifyMapOutput() LdapVerifyMapOutput {
	return i.ToLdapVerifyMapOutputWithContext(context.Background())
}

func (i LdapVerifyMap) ToLdapVerifyMapOutputWithContext(ctx context.Context) LdapVerifyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(LdapVerifyMapOutput)
}

type LdapVerifyOutput struct{ *pulumi.OutputState }

func (LdapVerifyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**LdapVerify)(nil)).Elem()
}

func (o LdapVerifyOutput) ToLdapVerifyOutput() LdapVerifyOutput {
	return o
}

func (o LdapVerifyOutput) ToLdapVerifyOutputWithContext(ctx context.Context) LdapVerifyOutput {
	return o
}

type LdapVerifyArrayOutput struct{ *pulumi.OutputState }

func (LdapVerifyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*LdapVerify)(nil)).Elem()
}

func (o LdapVerifyArrayOutput) ToLdapVerifyArrayOutput() LdapVerifyArrayOutput {
	return o
}

func (o LdapVerifyArrayOutput) ToLdapVerifyArrayOutputWithContext(ctx context.Context) LdapVerifyArrayOutput {
	return o
}

func (o LdapVerifyArrayOutput) Index(i pulumi.IntInput) LdapVerifyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *LdapVerify {
		return vs[0].([]*LdapVerify)[vs[1].(int)]
	}).(LdapVerifyOutput)
}

type LdapVerifyMapOutput struct{ *pulumi.OutputState }

func (LdapVerifyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*LdapVerify)(nil)).Elem()
}

func (o LdapVerifyMapOutput) ToLdapVerifyMapOutput() LdapVerifyMapOutput {
	return o
}

func (o LdapVerifyMapOutput) ToLdapVerifyMapOutputWithContext(ctx context.Context) LdapVerifyMapOutput {
	return o
}

func (o LdapVerifyMapOutput) MapIndex(k pulumi.StringInput) LdapVerifyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *LdapVerify {
		return vs[0].(map[string]*LdapVerify)[vs[1].(string)]
	}).(LdapVerifyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*LdapVerifyInput)(nil)).Elem(), &LdapVerify{})
	pulumi.RegisterInputType(reflect.TypeOf((*LdapVerifyArrayInput)(nil)).Elem(), LdapVerifyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*LdapVerifyMapInput)(nil)).Elem(), LdapVerifyMap{})
	pulumi.RegisterOutputType(LdapVerifyOutput{})
	pulumi.RegisterOutputType(LdapVerifyArrayOutput{})
	pulumi.RegisterOutputType(LdapVerifyMapOutput{})
}
