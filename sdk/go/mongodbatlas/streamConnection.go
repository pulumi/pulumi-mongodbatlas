// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: StreamConnection
//
// `StreamConnection` provides a Stream Connection resource. The resource lets you create, edit, and delete stream instance connections.
//
// > **IMPORTANT:** All arguments including the Kafka authentication password will be stored in the raw state as plaintext. Read more about sensitive data in state.
//
// ## Example Usage
//
// ### Example Cluster Connection
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewStreamConnection(ctx, "test", &mongodbatlas.StreamConnectionArgs{
//				ProjectId:      pulumi.Any(projectId),
//				InstanceName:   pulumi.String("InstanceName"),
//				ConnectionName: pulumi.String("ConnectionName"),
//				Type:           pulumi.String("Cluster"),
//				ClusterName:    pulumi.String("Cluster0"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example Kafka Plaintext Connection
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewStreamConnection(ctx, "test", &mongodbatlas.StreamConnectionArgs{
//				ProjectId:      pulumi.Any(projectId),
//				InstanceName:   pulumi.String("NewInstance"),
//				ConnectionName: pulumi.String("KafkaConnection"),
//				Type:           pulumi.String("Kafka"),
//				Authentication: &mongodbatlas.StreamConnectionAuthenticationArgs{
//					Mechanism: pulumi.String("SCRAM-256"),
//					Username:  pulumi.String("user"),
//					Password:  pulumi.String("somepassword"),
//				},
//				Security: &mongodbatlas.StreamConnectionSecurityArgs{
//					Protocol: pulumi.String("PLAINTEXT"),
//				},
//				Config: pulumi.StringMap{
//					"auto.offset.reset": pulumi.String("latest"),
//				},
//				BootstrapServers: pulumi.String("localhost:9091,localhost:9092"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// You can import a stream connection resource using the instance name, project ID, and connection name. The format must be `INSTANCE_NAME-PROJECT_ID-CONNECTION_NAME`. For example:
//
// ```sh
// $ pulumi import mongodbatlas:index/streamConnection:StreamConnection test "DefaultInstance-12251446ae5f3f6ec7968b13-NewConnection"
// ```
// To learn more, see: [MongoDB Atlas API - Stream Connection](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Streams/operation/createStreamConnection) Documentation.
// The Terraform Provider Examples Section also contains details on the overall support for Atlas Streams Processing in Terraform.
type StreamConnection struct {
	pulumi.CustomResourceState

	Authentication   StreamConnectionAuthenticationPtrOutput `pulumi:"authentication"`
	BootstrapServers pulumi.StringPtrOutput                  `pulumi:"bootstrapServers"`
	ClusterName      pulumi.StringPtrOutput                  `pulumi:"clusterName"`
	Config           pulumi.StringMapOutput                  `pulumi:"config"`
	// Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
	ConnectionName  pulumi.StringOutput                      `pulumi:"connectionName"`
	DbRoleToExecute StreamConnectionDbRoleToExecutePtrOutput `pulumi:"dbRoleToExecute"`
	// Human-readable label that identifies the stream instance.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId pulumi.StringOutput               `pulumi:"projectId"`
	Security  StreamConnectionSecurityPtrOutput `pulumi:"security"`
	// Type of connection. Can be either `Cluster`, `Kafka` or `Sample`.
	Type pulumi.StringOutput `pulumi:"type"`
}

// NewStreamConnection registers a new resource with the given unique name, arguments, and options.
func NewStreamConnection(ctx *pulumi.Context,
	name string, args *StreamConnectionArgs, opts ...pulumi.ResourceOption) (*StreamConnection, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ConnectionName == nil {
		return nil, errors.New("invalid value for required argument 'ConnectionName'")
	}
	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamConnection
	err := ctx.RegisterResource("mongodbatlas:index/streamConnection:StreamConnection", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamConnection gets an existing StreamConnection resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamConnection(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamConnectionState, opts ...pulumi.ResourceOption) (*StreamConnection, error) {
	var resource StreamConnection
	err := ctx.ReadResource("mongodbatlas:index/streamConnection:StreamConnection", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamConnection resources.
type streamConnectionState struct {
	Authentication   *StreamConnectionAuthentication `pulumi:"authentication"`
	BootstrapServers *string                         `pulumi:"bootstrapServers"`
	ClusterName      *string                         `pulumi:"clusterName"`
	Config           map[string]string               `pulumi:"config"`
	// Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
	ConnectionName  *string                          `pulumi:"connectionName"`
	DbRoleToExecute *StreamConnectionDbRoleToExecute `pulumi:"dbRoleToExecute"`
	// Human-readable label that identifies the stream instance.
	InstanceName *string `pulumi:"instanceName"`
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId *string                   `pulumi:"projectId"`
	Security  *StreamConnectionSecurity `pulumi:"security"`
	// Type of connection. Can be either `Cluster`, `Kafka` or `Sample`.
	Type *string `pulumi:"type"`
}

type StreamConnectionState struct {
	Authentication   StreamConnectionAuthenticationPtrInput
	BootstrapServers pulumi.StringPtrInput
	ClusterName      pulumi.StringPtrInput
	Config           pulumi.StringMapInput
	// Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
	ConnectionName  pulumi.StringPtrInput
	DbRoleToExecute StreamConnectionDbRoleToExecutePtrInput
	// Human-readable label that identifies the stream instance.
	InstanceName pulumi.StringPtrInput
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId pulumi.StringPtrInput
	Security  StreamConnectionSecurityPtrInput
	// Type of connection. Can be either `Cluster`, `Kafka` or `Sample`.
	Type pulumi.StringPtrInput
}

func (StreamConnectionState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamConnectionState)(nil)).Elem()
}

type streamConnectionArgs struct {
	Authentication   *StreamConnectionAuthentication `pulumi:"authentication"`
	BootstrapServers *string                         `pulumi:"bootstrapServers"`
	ClusterName      *string                         `pulumi:"clusterName"`
	Config           map[string]string               `pulumi:"config"`
	// Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
	ConnectionName  string                           `pulumi:"connectionName"`
	DbRoleToExecute *StreamConnectionDbRoleToExecute `pulumi:"dbRoleToExecute"`
	// Human-readable label that identifies the stream instance.
	InstanceName string `pulumi:"instanceName"`
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId string                    `pulumi:"projectId"`
	Security  *StreamConnectionSecurity `pulumi:"security"`
	// Type of connection. Can be either `Cluster`, `Kafka` or `Sample`.
	Type string `pulumi:"type"`
}

// The set of arguments for constructing a StreamConnection resource.
type StreamConnectionArgs struct {
	Authentication   StreamConnectionAuthenticationPtrInput
	BootstrapServers pulumi.StringPtrInput
	ClusterName      pulumi.StringPtrInput
	Config           pulumi.StringMapInput
	// Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
	ConnectionName  pulumi.StringInput
	DbRoleToExecute StreamConnectionDbRoleToExecutePtrInput
	// Human-readable label that identifies the stream instance.
	InstanceName pulumi.StringInput
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId pulumi.StringInput
	Security  StreamConnectionSecurityPtrInput
	// Type of connection. Can be either `Cluster`, `Kafka` or `Sample`.
	Type pulumi.StringInput
}

func (StreamConnectionArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamConnectionArgs)(nil)).Elem()
}

type StreamConnectionInput interface {
	pulumi.Input

	ToStreamConnectionOutput() StreamConnectionOutput
	ToStreamConnectionOutputWithContext(ctx context.Context) StreamConnectionOutput
}

func (*StreamConnection) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamConnection)(nil)).Elem()
}

func (i *StreamConnection) ToStreamConnectionOutput() StreamConnectionOutput {
	return i.ToStreamConnectionOutputWithContext(context.Background())
}

func (i *StreamConnection) ToStreamConnectionOutputWithContext(ctx context.Context) StreamConnectionOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamConnectionOutput)
}

// StreamConnectionArrayInput is an input type that accepts StreamConnectionArray and StreamConnectionArrayOutput values.
// You can construct a concrete instance of `StreamConnectionArrayInput` via:
//
//	StreamConnectionArray{ StreamConnectionArgs{...} }
type StreamConnectionArrayInput interface {
	pulumi.Input

	ToStreamConnectionArrayOutput() StreamConnectionArrayOutput
	ToStreamConnectionArrayOutputWithContext(context.Context) StreamConnectionArrayOutput
}

type StreamConnectionArray []StreamConnectionInput

func (StreamConnectionArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamConnection)(nil)).Elem()
}

func (i StreamConnectionArray) ToStreamConnectionArrayOutput() StreamConnectionArrayOutput {
	return i.ToStreamConnectionArrayOutputWithContext(context.Background())
}

func (i StreamConnectionArray) ToStreamConnectionArrayOutputWithContext(ctx context.Context) StreamConnectionArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamConnectionArrayOutput)
}

// StreamConnectionMapInput is an input type that accepts StreamConnectionMap and StreamConnectionMapOutput values.
// You can construct a concrete instance of `StreamConnectionMapInput` via:
//
//	StreamConnectionMap{ "key": StreamConnectionArgs{...} }
type StreamConnectionMapInput interface {
	pulumi.Input

	ToStreamConnectionMapOutput() StreamConnectionMapOutput
	ToStreamConnectionMapOutputWithContext(context.Context) StreamConnectionMapOutput
}

type StreamConnectionMap map[string]StreamConnectionInput

func (StreamConnectionMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamConnection)(nil)).Elem()
}

func (i StreamConnectionMap) ToStreamConnectionMapOutput() StreamConnectionMapOutput {
	return i.ToStreamConnectionMapOutputWithContext(context.Background())
}

func (i StreamConnectionMap) ToStreamConnectionMapOutputWithContext(ctx context.Context) StreamConnectionMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamConnectionMapOutput)
}

type StreamConnectionOutput struct{ *pulumi.OutputState }

func (StreamConnectionOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamConnection)(nil)).Elem()
}

func (o StreamConnectionOutput) ToStreamConnectionOutput() StreamConnectionOutput {
	return o
}

func (o StreamConnectionOutput) ToStreamConnectionOutputWithContext(ctx context.Context) StreamConnectionOutput {
	return o
}

func (o StreamConnectionOutput) Authentication() StreamConnectionAuthenticationPtrOutput {
	return o.ApplyT(func(v *StreamConnection) StreamConnectionAuthenticationPtrOutput { return v.Authentication }).(StreamConnectionAuthenticationPtrOutput)
}

func (o StreamConnectionOutput) BootstrapServers() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamConnection) pulumi.StringPtrOutput { return v.BootstrapServers }).(pulumi.StringPtrOutput)
}

func (o StreamConnectionOutput) ClusterName() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *StreamConnection) pulumi.StringPtrOutput { return v.ClusterName }).(pulumi.StringPtrOutput)
}

func (o StreamConnectionOutput) Config() pulumi.StringMapOutput {
	return o.ApplyT(func(v *StreamConnection) pulumi.StringMapOutput { return v.Config }).(pulumi.StringMapOutput)
}

// Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
func (o StreamConnectionOutput) ConnectionName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamConnection) pulumi.StringOutput { return v.ConnectionName }).(pulumi.StringOutput)
}

func (o StreamConnectionOutput) DbRoleToExecute() StreamConnectionDbRoleToExecutePtrOutput {
	return o.ApplyT(func(v *StreamConnection) StreamConnectionDbRoleToExecutePtrOutput { return v.DbRoleToExecute }).(StreamConnectionDbRoleToExecutePtrOutput)
}

// Human-readable label that identifies the stream instance.
func (o StreamConnectionOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamConnection) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// Unique 24-hexadecimal digit string that identifies your project.
func (o StreamConnectionOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamConnection) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

func (o StreamConnectionOutput) Security() StreamConnectionSecurityPtrOutput {
	return o.ApplyT(func(v *StreamConnection) StreamConnectionSecurityPtrOutput { return v.Security }).(StreamConnectionSecurityPtrOutput)
}

// Type of connection. Can be either `Cluster`, `Kafka` or `Sample`.
func (o StreamConnectionOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamConnection) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

type StreamConnectionArrayOutput struct{ *pulumi.OutputState }

func (StreamConnectionArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamConnection)(nil)).Elem()
}

func (o StreamConnectionArrayOutput) ToStreamConnectionArrayOutput() StreamConnectionArrayOutput {
	return o
}

func (o StreamConnectionArrayOutput) ToStreamConnectionArrayOutputWithContext(ctx context.Context) StreamConnectionArrayOutput {
	return o
}

func (o StreamConnectionArrayOutput) Index(i pulumi.IntInput) StreamConnectionOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamConnection {
		return vs[0].([]*StreamConnection)[vs[1].(int)]
	}).(StreamConnectionOutput)
}

type StreamConnectionMapOutput struct{ *pulumi.OutputState }

func (StreamConnectionMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamConnection)(nil)).Elem()
}

func (o StreamConnectionMapOutput) ToStreamConnectionMapOutput() StreamConnectionMapOutput {
	return o
}

func (o StreamConnectionMapOutput) ToStreamConnectionMapOutputWithContext(ctx context.Context) StreamConnectionMapOutput {
	return o
}

func (o StreamConnectionMapOutput) MapIndex(k pulumi.StringInput) StreamConnectionOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamConnection {
		return vs[0].(map[string]*StreamConnection)[vs[1].(string)]
	}).(StreamConnectionOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamConnectionInput)(nil)).Elem(), &StreamConnection{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamConnectionArrayInput)(nil)).Elem(), StreamConnectionArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamConnectionMapInput)(nil)).Elem(), StreamConnectionMap{})
	pulumi.RegisterOutputType(StreamConnectionOutput{})
	pulumi.RegisterOutputType(StreamConnectionArrayOutput{})
	pulumi.RegisterOutputType(StreamConnectionMapOutput{})
}
