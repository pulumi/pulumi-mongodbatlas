// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
func LookupApiKeys(ctx *pulumi.Context, args *LookupApiKeysArgs, opts ...pulumi.InvokeOption) (*LookupApiKeysResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupApiKeysResult
	err := ctx.Invoke("mongodbatlas:index/getApiKeys:getApiKeys", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getApiKeys.
type LookupApiKeysArgs struct {
	// Number of items to return per page, up to a maximum of 500. Defaults to `100`.
	ItemsPerPage *int `pulumi:"itemsPerPage"`
	// Unique identifier for the organization whose API keys you want to retrieve.
	OrgId string `pulumi:"orgId"`
	// The page to return. Defaults to `1`.
	PageNum *int `pulumi:"pageNum"`
}

// A collection of values returned by getApiKeys.
type LookupApiKeysResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id           string             `pulumi:"id"`
	ItemsPerPage *int               `pulumi:"itemsPerPage"`
	OrgId        string             `pulumi:"orgId"`
	PageNum      *int               `pulumi:"pageNum"`
	Results      []GetApiKeysResult `pulumi:"results"`
}

func LookupApiKeysOutput(ctx *pulumi.Context, args LookupApiKeysOutputArgs, opts ...pulumi.InvokeOption) LookupApiKeysResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupApiKeysResultOutput, error) {
			args := v.(LookupApiKeysArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("mongodbatlas:index/getApiKeys:getApiKeys", args, LookupApiKeysResultOutput{}, options).(LookupApiKeysResultOutput), nil
		}).(LookupApiKeysResultOutput)
}

// A collection of arguments for invoking getApiKeys.
type LookupApiKeysOutputArgs struct {
	// Number of items to return per page, up to a maximum of 500. Defaults to `100`.
	ItemsPerPage pulumi.IntPtrInput `pulumi:"itemsPerPage"`
	// Unique identifier for the organization whose API keys you want to retrieve.
	OrgId pulumi.StringInput `pulumi:"orgId"`
	// The page to return. Defaults to `1`.
	PageNum pulumi.IntPtrInput `pulumi:"pageNum"`
}

func (LookupApiKeysOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiKeysArgs)(nil)).Elem()
}

// A collection of values returned by getApiKeys.
type LookupApiKeysResultOutput struct{ *pulumi.OutputState }

func (LookupApiKeysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupApiKeysResult)(nil)).Elem()
}

func (o LookupApiKeysResultOutput) ToLookupApiKeysResultOutput() LookupApiKeysResultOutput {
	return o
}

func (o LookupApiKeysResultOutput) ToLookupApiKeysResultOutputWithContext(ctx context.Context) LookupApiKeysResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupApiKeysResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiKeysResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupApiKeysResultOutput) ItemsPerPage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupApiKeysResult) *int { return v.ItemsPerPage }).(pulumi.IntPtrOutput)
}

func (o LookupApiKeysResultOutput) OrgId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupApiKeysResult) string { return v.OrgId }).(pulumi.StringOutput)
}

func (o LookupApiKeysResultOutput) PageNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupApiKeysResult) *int { return v.PageNum }).(pulumi.IntPtrOutput)
}

func (o LookupApiKeysResultOutput) Results() GetApiKeysResultArrayOutput {
	return o.ApplyT(func(v LookupApiKeysResult) []GetApiKeysResult { return v.Results }).(GetApiKeysResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupApiKeysResultOutput{})
}
