// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// # Resource: StreamInstance
//
// `StreamInstance` provides a Stream Instance resource. The resource lets you create, edit, and delete stream instances in a project.
//
// ## Import
//
// You can import stream instance resource using the project ID and instance name, in the format `PROJECT_ID-INSTANCE_NAME`. For example:
//
// ```sh
// $ pulumi import mongodbatlas:index/streamInstance:StreamInstance test 650972848269185c55f40ca1-InstanceName
// ```
// To learn more, see: [MongoDB Atlas API - Stream Instance](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Streams/operation/createStreamInstance) Documentation.
// The Terraform Provider Examples Section also contains details on the overall support for Atlas Streams Processing in Terraform.
type StreamInstance struct {
	pulumi.CustomResourceState

	// Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
	DataProcessRegion StreamInstanceDataProcessRegionOutput `pulumi:"dataProcessRegion"`
	// List that contains the hostnames assigned to the stream instance.
	Hostnames pulumi.StringArrayOutput `pulumi:"hostnames"`
	// Human-readable label that identifies the stream instance.
	InstanceName pulumi.StringOutput `pulumi:"instanceName"`
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// Configuration options for an Atlas Stream Processing Instance. See stream config
	StreamConfig StreamInstanceStreamConfigOutput `pulumi:"streamConfig"`
}

// NewStreamInstance registers a new resource with the given unique name, arguments, and options.
func NewStreamInstance(ctx *pulumi.Context,
	name string, args *StreamInstanceArgs, opts ...pulumi.ResourceOption) (*StreamInstance, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.DataProcessRegion == nil {
		return nil, errors.New("invalid value for required argument 'DataProcessRegion'")
	}
	if args.InstanceName == nil {
		return nil, errors.New("invalid value for required argument 'InstanceName'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource StreamInstance
	err := ctx.RegisterResource("mongodbatlas:index/streamInstance:StreamInstance", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetStreamInstance gets an existing StreamInstance resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetStreamInstance(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *StreamInstanceState, opts ...pulumi.ResourceOption) (*StreamInstance, error) {
	var resource StreamInstance
	err := ctx.ReadResource("mongodbatlas:index/streamInstance:StreamInstance", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering StreamInstance resources.
type streamInstanceState struct {
	// Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
	DataProcessRegion *StreamInstanceDataProcessRegion `pulumi:"dataProcessRegion"`
	// List that contains the hostnames assigned to the stream instance.
	Hostnames []string `pulumi:"hostnames"`
	// Human-readable label that identifies the stream instance.
	InstanceName *string `pulumi:"instanceName"`
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId *string `pulumi:"projectId"`
	// Configuration options for an Atlas Stream Processing Instance. See stream config
	StreamConfig *StreamInstanceStreamConfig `pulumi:"streamConfig"`
}

type StreamInstanceState struct {
	// Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
	DataProcessRegion StreamInstanceDataProcessRegionPtrInput
	// List that contains the hostnames assigned to the stream instance.
	Hostnames pulumi.StringArrayInput
	// Human-readable label that identifies the stream instance.
	InstanceName pulumi.StringPtrInput
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId pulumi.StringPtrInput
	// Configuration options for an Atlas Stream Processing Instance. See stream config
	StreamConfig StreamInstanceStreamConfigPtrInput
}

func (StreamInstanceState) ElementType() reflect.Type {
	return reflect.TypeOf((*streamInstanceState)(nil)).Elem()
}

type streamInstanceArgs struct {
	// Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
	DataProcessRegion StreamInstanceDataProcessRegion `pulumi:"dataProcessRegion"`
	// Human-readable label that identifies the stream instance.
	InstanceName string `pulumi:"instanceName"`
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId string `pulumi:"projectId"`
	// Configuration options for an Atlas Stream Processing Instance. See stream config
	StreamConfig *StreamInstanceStreamConfig `pulumi:"streamConfig"`
}

// The set of arguments for constructing a StreamInstance resource.
type StreamInstanceArgs struct {
	// Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
	DataProcessRegion StreamInstanceDataProcessRegionInput
	// Human-readable label that identifies the stream instance.
	InstanceName pulumi.StringInput
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId pulumi.StringInput
	// Configuration options for an Atlas Stream Processing Instance. See stream config
	StreamConfig StreamInstanceStreamConfigPtrInput
}

func (StreamInstanceArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*streamInstanceArgs)(nil)).Elem()
}

type StreamInstanceInput interface {
	pulumi.Input

	ToStreamInstanceOutput() StreamInstanceOutput
	ToStreamInstanceOutputWithContext(ctx context.Context) StreamInstanceOutput
}

func (*StreamInstance) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInstance)(nil)).Elem()
}

func (i *StreamInstance) ToStreamInstanceOutput() StreamInstanceOutput {
	return i.ToStreamInstanceOutputWithContext(context.Background())
}

func (i *StreamInstance) ToStreamInstanceOutputWithContext(ctx context.Context) StreamInstanceOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInstanceOutput)
}

// StreamInstanceArrayInput is an input type that accepts StreamInstanceArray and StreamInstanceArrayOutput values.
// You can construct a concrete instance of `StreamInstanceArrayInput` via:
//
//	StreamInstanceArray{ StreamInstanceArgs{...} }
type StreamInstanceArrayInput interface {
	pulumi.Input

	ToStreamInstanceArrayOutput() StreamInstanceArrayOutput
	ToStreamInstanceArrayOutputWithContext(context.Context) StreamInstanceArrayOutput
}

type StreamInstanceArray []StreamInstanceInput

func (StreamInstanceArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamInstance)(nil)).Elem()
}

func (i StreamInstanceArray) ToStreamInstanceArrayOutput() StreamInstanceArrayOutput {
	return i.ToStreamInstanceArrayOutputWithContext(context.Background())
}

func (i StreamInstanceArray) ToStreamInstanceArrayOutputWithContext(ctx context.Context) StreamInstanceArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInstanceArrayOutput)
}

// StreamInstanceMapInput is an input type that accepts StreamInstanceMap and StreamInstanceMapOutput values.
// You can construct a concrete instance of `StreamInstanceMapInput` via:
//
//	StreamInstanceMap{ "key": StreamInstanceArgs{...} }
type StreamInstanceMapInput interface {
	pulumi.Input

	ToStreamInstanceMapOutput() StreamInstanceMapOutput
	ToStreamInstanceMapOutputWithContext(context.Context) StreamInstanceMapOutput
}

type StreamInstanceMap map[string]StreamInstanceInput

func (StreamInstanceMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamInstance)(nil)).Elem()
}

func (i StreamInstanceMap) ToStreamInstanceMapOutput() StreamInstanceMapOutput {
	return i.ToStreamInstanceMapOutputWithContext(context.Background())
}

func (i StreamInstanceMap) ToStreamInstanceMapOutputWithContext(ctx context.Context) StreamInstanceMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(StreamInstanceMapOutput)
}

type StreamInstanceOutput struct{ *pulumi.OutputState }

func (StreamInstanceOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**StreamInstance)(nil)).Elem()
}

func (o StreamInstanceOutput) ToStreamInstanceOutput() StreamInstanceOutput {
	return o
}

func (o StreamInstanceOutput) ToStreamInstanceOutputWithContext(ctx context.Context) StreamInstanceOutput {
	return o
}

// Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
func (o StreamInstanceOutput) DataProcessRegion() StreamInstanceDataProcessRegionOutput {
	return o.ApplyT(func(v *StreamInstance) StreamInstanceDataProcessRegionOutput { return v.DataProcessRegion }).(StreamInstanceDataProcessRegionOutput)
}

// List that contains the hostnames assigned to the stream instance.
func (o StreamInstanceOutput) Hostnames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *StreamInstance) pulumi.StringArrayOutput { return v.Hostnames }).(pulumi.StringArrayOutput)
}

// Human-readable label that identifies the stream instance.
func (o StreamInstanceOutput) InstanceName() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamInstance) pulumi.StringOutput { return v.InstanceName }).(pulumi.StringOutput)
}

// Unique 24-hexadecimal digit string that identifies your project.
func (o StreamInstanceOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *StreamInstance) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// Configuration options for an Atlas Stream Processing Instance. See stream config
func (o StreamInstanceOutput) StreamConfig() StreamInstanceStreamConfigOutput {
	return o.ApplyT(func(v *StreamInstance) StreamInstanceStreamConfigOutput { return v.StreamConfig }).(StreamInstanceStreamConfigOutput)
}

type StreamInstanceArrayOutput struct{ *pulumi.OutputState }

func (StreamInstanceArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*StreamInstance)(nil)).Elem()
}

func (o StreamInstanceArrayOutput) ToStreamInstanceArrayOutput() StreamInstanceArrayOutput {
	return o
}

func (o StreamInstanceArrayOutput) ToStreamInstanceArrayOutputWithContext(ctx context.Context) StreamInstanceArrayOutput {
	return o
}

func (o StreamInstanceArrayOutput) Index(i pulumi.IntInput) StreamInstanceOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *StreamInstance {
		return vs[0].([]*StreamInstance)[vs[1].(int)]
	}).(StreamInstanceOutput)
}

type StreamInstanceMapOutput struct{ *pulumi.OutputState }

func (StreamInstanceMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*StreamInstance)(nil)).Elem()
}

func (o StreamInstanceMapOutput) ToStreamInstanceMapOutput() StreamInstanceMapOutput {
	return o
}

func (o StreamInstanceMapOutput) ToStreamInstanceMapOutputWithContext(ctx context.Context) StreamInstanceMapOutput {
	return o
}

func (o StreamInstanceMapOutput) MapIndex(k pulumi.StringInput) StreamInstanceOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *StreamInstance {
		return vs[0].(map[string]*StreamInstance)[vs[1].(string)]
	}).(StreamInstanceOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInstanceInput)(nil)).Elem(), &StreamInstance{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInstanceArrayInput)(nil)).Elem(), StreamInstanceArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*StreamInstanceMapInput)(nil)).Elem(), StreamInstanceMap{})
	pulumi.RegisterOutputType(StreamInstanceOutput{})
	pulumi.RegisterOutputType(StreamInstanceArrayOutput{})
	pulumi.RegisterOutputType(StreamInstanceMapOutput{})
}
