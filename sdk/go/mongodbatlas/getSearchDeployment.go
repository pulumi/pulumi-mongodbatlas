// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Data Source: SearchDeployment
//
// `SearchDeployment` describes a search node deployment.
//
// ## Example Usage
//
// ### S
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			exampleProject, err := mongodbatlas.NewProject(ctx, "example", &mongodbatlas.ProjectArgs{
//				Name:  pulumi.String("project-name"),
//				OrgId: pulumi.Any(orgId),
//			})
//			if err != nil {
//				return err
//			}
//			exampleAdvancedCluster, err := mongodbatlas.NewAdvancedCluster(ctx, "example", &mongodbatlas.AdvancedClusterArgs{
//				ProjectId:   exampleProject.ID(),
//				Name:        pulumi.String("ClusterExample"),
//				ClusterType: pulumi.String("REPLICASET"),
//				ReplicationSpecs: mongodbatlas.AdvancedClusterReplicationSpecArray{
//					&mongodbatlas.AdvancedClusterReplicationSpecArgs{
//						RegionConfigs: mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArray{
//							&mongodbatlas.AdvancedClusterReplicationSpecRegionConfigArgs{
//								ElectableSpecs: &mongodbatlas.AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs{
//									InstanceSize: pulumi.String("M10"),
//									NodeCount:    pulumi.Int(3),
//								},
//								ProviderName: pulumi.String("AWS"),
//								Priority:     pulumi.Int(7),
//								RegionName:   pulumi.String("US_EAST_1"),
//							},
//						},
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			exampleSearchDeployment, err := mongodbatlas.NewSearchDeployment(ctx, "example", &mongodbatlas.SearchDeploymentArgs{
//				ProjectId:   exampleProject.ID(),
//				ClusterName: exampleAdvancedCluster.Name,
//				Specs: mongodbatlas.SearchDeploymentSpecArray{
//					&mongodbatlas.SearchDeploymentSpecArgs{
//						InstanceSize: pulumi.String("S20_HIGHCPU_NVME"),
//						NodeCount:    pulumi.Int(2),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			example := mongodbatlas.LookupSearchDeploymentOutput(ctx, mongodbatlas.GetSearchDeploymentOutputArgs{
//				ProjectId:   exampleSearchDeployment.ProjectId,
//				ClusterName: exampleSearchDeployment.ClusterName,
//			}, nil)
//			ctx.Export("mongodbatlasSearchDeploymentId", example.ApplyT(func(example mongodbatlas.GetSearchDeploymentResult) (*string, error) {
//				return &example.Id, nil
//			}).(pulumi.StringPtrOutput))
//			return nil
//		})
//	}
//
// ```
func LookupSearchDeployment(ctx *pulumi.Context, args *LookupSearchDeploymentArgs, opts ...pulumi.InvokeOption) (*LookupSearchDeploymentResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSearchDeploymentResult
	err := ctx.Invoke("mongodbatlas:index/getSearchDeployment:getSearchDeployment", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSearchDeployment.
type LookupSearchDeploymentArgs struct {
	// Label that identifies the cluster to return the search nodes for.
	ClusterName string `pulumi:"clusterName"`
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getSearchDeployment.
type LookupSearchDeploymentResult struct {
	// Label that identifies the cluster to return the search nodes for.
	ClusterName string `pulumi:"clusterName"`
	// Unique 24-hexadecimal digit string that identifies the search deployment.
	Id string `pulumi:"id"`
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId string `pulumi:"projectId"`
	// List of settings that configure the search nodes for your cluster. This list is currently limited to defining a single element.
	Specs []GetSearchDeploymentSpec `pulumi:"specs"`
	// Human-readable label that indicates the current operating condition of this search deployment.
	StateName string `pulumi:"stateName"`
}

func LookupSearchDeploymentOutput(ctx *pulumi.Context, args LookupSearchDeploymentOutputArgs, opts ...pulumi.InvokeOption) LookupSearchDeploymentResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupSearchDeploymentResultOutput, error) {
			args := v.(LookupSearchDeploymentArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("mongodbatlas:index/getSearchDeployment:getSearchDeployment", args, LookupSearchDeploymentResultOutput{}, options).(LookupSearchDeploymentResultOutput), nil
		}).(LookupSearchDeploymentResultOutput)
}

// A collection of arguments for invoking getSearchDeployment.
type LookupSearchDeploymentOutputArgs struct {
	// Label that identifies the cluster to return the search nodes for.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// Unique 24-hexadecimal digit string that identifies your project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupSearchDeploymentOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSearchDeploymentArgs)(nil)).Elem()
}

// A collection of values returned by getSearchDeployment.
type LookupSearchDeploymentResultOutput struct{ *pulumi.OutputState }

func (LookupSearchDeploymentResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSearchDeploymentResult)(nil)).Elem()
}

func (o LookupSearchDeploymentResultOutput) ToLookupSearchDeploymentResultOutput() LookupSearchDeploymentResultOutput {
	return o
}

func (o LookupSearchDeploymentResultOutput) ToLookupSearchDeploymentResultOutputWithContext(ctx context.Context) LookupSearchDeploymentResultOutput {
	return o
}

// Label that identifies the cluster to return the search nodes for.
func (o LookupSearchDeploymentResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSearchDeploymentResult) string { return v.ClusterName }).(pulumi.StringOutput)
}

// Unique 24-hexadecimal digit string that identifies the search deployment.
func (o LookupSearchDeploymentResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSearchDeploymentResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique 24-hexadecimal digit string that identifies your project.
func (o LookupSearchDeploymentResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSearchDeploymentResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// List of settings that configure the search nodes for your cluster. This list is currently limited to defining a single element.
func (o LookupSearchDeploymentResultOutput) Specs() GetSearchDeploymentSpecArrayOutput {
	return o.ApplyT(func(v LookupSearchDeploymentResult) []GetSearchDeploymentSpec { return v.Specs }).(GetSearchDeploymentSpecArrayOutput)
}

// Human-readable label that indicates the current operating condition of this search deployment.
func (o LookupSearchDeploymentResultOutput) StateName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSearchDeploymentResult) string { return v.StateName }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSearchDeploymentResultOutput{})
}
