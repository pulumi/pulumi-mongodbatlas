// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Data Source: getFlexClusters
//
// `getFlexClusters` returns all flex clusters in a project.
//
// **NOTE:** Flex Cluster is in Public Preview. In order to use the resource and data sources you need to set the environment variable MONGODB_ATLAS_ENABLE_PREVIEW to true.
//
// ## Example Usage
func LookupFlexClusters(ctx *pulumi.Context, args *LookupFlexClustersArgs, opts ...pulumi.InvokeOption) (*LookupFlexClustersResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupFlexClustersResult
	err := ctx.Invoke("mongodbatlas:index/getFlexClusters:getFlexClusters", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getFlexClusters.
type LookupFlexClustersArgs struct {
	// Unique 24-hexadecimal character string that identifies the project.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getFlexClusters.
type LookupFlexClustersResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Unique 24-hexadecimal character string that identifies the project.
	ProjectId string `pulumi:"projectId"`
	// List of documents that MongoDB Cloud returns for this request.
	Results []GetFlexClustersResult `pulumi:"results"`
}

func LookupFlexClustersOutput(ctx *pulumi.Context, args LookupFlexClustersOutputArgs, opts ...pulumi.InvokeOption) LookupFlexClustersResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupFlexClustersResultOutput, error) {
			args := v.(LookupFlexClustersArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("mongodbatlas:index/getFlexClusters:getFlexClusters", args, LookupFlexClustersResultOutput{}, options).(LookupFlexClustersResultOutput), nil
		}).(LookupFlexClustersResultOutput)
}

// A collection of arguments for invoking getFlexClusters.
type LookupFlexClustersOutputArgs struct {
	// Unique 24-hexadecimal character string that identifies the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupFlexClustersOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFlexClustersArgs)(nil)).Elem()
}

// A collection of values returned by getFlexClusters.
type LookupFlexClustersResultOutput struct{ *pulumi.OutputState }

func (LookupFlexClustersResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupFlexClustersResult)(nil)).Elem()
}

func (o LookupFlexClustersResultOutput) ToLookupFlexClustersResultOutput() LookupFlexClustersResultOutput {
	return o
}

func (o LookupFlexClustersResultOutput) ToLookupFlexClustersResultOutputWithContext(ctx context.Context) LookupFlexClustersResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupFlexClustersResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFlexClustersResult) string { return v.Id }).(pulumi.StringOutput)
}

// Unique 24-hexadecimal character string that identifies the project.
func (o LookupFlexClustersResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupFlexClustersResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// List of documents that MongoDB Cloud returns for this request.
func (o LookupFlexClustersResultOutput) Results() GetFlexClustersResultArrayOutput {
	return o.ApplyT(func(v LookupFlexClustersResult) []GetFlexClustersResult { return v.Results }).(GetFlexClustersResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupFlexClustersResultOutput{})
}
