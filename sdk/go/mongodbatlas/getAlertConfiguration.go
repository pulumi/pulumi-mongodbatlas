// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `AlertConfiguration` describes an Alert Configuration.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
//
// ## Example Usage
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testAlertConfiguration, err := mongodbatlas.NewAlertConfiguration(ctx, "test", &mongodbatlas.AlertConfigurationArgs{
//				ProjectId: pulumi.String("<PROJECT-ID>"),
//				EventType: pulumi.String("OUTSIDE_METRIC_THRESHOLD"),
//				Enabled:   pulumi.Bool(true),
//				Notifications: mongodbatlas.AlertConfigurationNotificationArray{
//					&mongodbatlas.AlertConfigurationNotificationArgs{
//						TypeName:     pulumi.String("GROUP"),
//						IntervalMin:  pulumi.Int(5),
//						DelayMin:     pulumi.Int(0),
//						SmsEnabled:   pulumi.Bool(false),
//						EmailEnabled: pulumi.Bool(true),
//					},
//				},
//				Matchers: mongodbatlas.AlertConfigurationMatcherArray{
//					&mongodbatlas.AlertConfigurationMatcherArgs{
//						FieldName: pulumi.String("HOSTNAME_AND_PORT"),
//						Operator:  pulumi.String("EQUALS"),
//						Value:     pulumi.String("SECONDARY"),
//					},
//				},
//				MetricThresholdConfig: &mongodbatlas.AlertConfigurationMetricThresholdConfigArgs{
//					MetricName: pulumi.String("ASSERT_REGULAR"),
//					Operator:   pulumi.String("LESS_THAN"),
//					Threshold:  pulumi.Float64(99),
//					Units:      pulumi.String("RAW"),
//					Mode:       pulumi.String("AVERAGE"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = mongodbatlas.LookupAlertConfigurationOutput(ctx, mongodbatlas.GetAlertConfigurationOutputArgs{
//				ProjectId:            testAlertConfiguration.ProjectId,
//				AlertConfigurationId: testAlertConfiguration.AlertConfigurationId,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// > **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
//
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			testAlertConfiguration, err := mongodbatlas.NewAlertConfiguration(ctx, "test", &mongodbatlas.AlertConfigurationArgs{
//				ProjectId: pulumi.String("<PROJECT-ID>"),
//				EventType: pulumi.String("REPLICATION_OPLOG_WINDOW_RUNNING_OUT"),
//				Enabled:   pulumi.Bool(true),
//				Notifications: mongodbatlas.AlertConfigurationNotificationArray{
//					&mongodbatlas.AlertConfigurationNotificationArgs{
//						TypeName:     pulumi.String("GROUP"),
//						IntervalMin:  pulumi.Int(5),
//						DelayMin:     pulumi.Int(0),
//						SmsEnabled:   pulumi.Bool(false),
//						EmailEnabled: pulumi.Bool(true),
//						Roles: pulumi.StringArray{
//							pulumi.String("GROUP_CHARTS_ADMIN"),
//							pulumi.String("GROUP_CLUSTER_MANAGER"),
//						},
//					},
//				},
//				Matchers: mongodbatlas.AlertConfigurationMatcherArray{
//					&mongodbatlas.AlertConfigurationMatcherArgs{
//						FieldName: pulumi.String("HOSTNAME_AND_PORT"),
//						Operator:  pulumi.String("EQUALS"),
//						Value:     pulumi.String("SECONDARY"),
//					},
//				},
//				ThresholdConfig: &mongodbatlas.AlertConfigurationThresholdConfigArgs{
//					Operator:  pulumi.String("LESS_THAN"),
//					Threshold: pulumi.Float64(1),
//					Units:     pulumi.String("HOURS"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			_ = mongodbatlas.LookupAlertConfigurationOutput(ctx, mongodbatlas.GetAlertConfigurationOutputArgs{
//				ProjectId:            testAlertConfiguration.ProjectId,
//				AlertConfigurationId: testAlertConfiguration.AlertConfigurationId,
//			}, nil)
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
//
// Utilize dataSource to generate resource hcl and import statement. Useful if you have a specific alertConfigurationId and are looking to manage it as is in state. To import all alerts, refer to the documentation on dataSourceMongodbatlasAlertConfigurations
// <!--Start PulumiCodeChooser -->
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.LookupAlertConfiguration(ctx, &mongodbatlas.LookupAlertConfigurationArgs{
//				ProjectId:            projectId,
//				AlertConfigurationId: alertConfigurationId,
//				Outputs: []mongodbatlas.GetAlertConfigurationOutput{
//					{
//						Type:  "resource_hcl",
//						Label: pulumi.StringRef("test"),
//					},
//					{
//						Type:  "resource_import",
//						Label: pulumi.StringRef("test"),
//					},
//				},
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
// <!--End PulumiCodeChooser -->
func LookupAlertConfiguration(ctx *pulumi.Context, args *LookupAlertConfigurationArgs, opts ...pulumi.InvokeOption) (*LookupAlertConfigurationResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupAlertConfigurationResult
	err := ctx.Invoke("mongodbatlas:index/getAlertConfiguration:getAlertConfiguration", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getAlertConfiguration.
type LookupAlertConfigurationArgs struct {
	// Unique identifier for the alert configuration.
	AlertConfigurationId string `pulumi:"alertConfigurationId"`
	// List of formatted output requested for this alert configuration
	// * `output.#.type` - (Required) If the output is requested, you must specify its type. The format is computed as `output.#.value`, the following are the supported types:
	Outputs []GetAlertConfigurationOutput `pulumi:"outputs"`
	// The ID of the project where the alert configuration will create.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getAlertConfiguration.
type LookupAlertConfigurationResult struct {
	AlertConfigurationId string `pulumi:"alertConfigurationId"`
	// Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
	Created string `pulumi:"created"`
	// If set to true, the alert configuration is enabled. If enabled is not exported it is set to false.
	Enabled bool `pulumi:"enabled"`
	// The type of event that will trigger an alert.
	EventType string `pulumi:"eventType"`
	Id        string `pulumi:"id"`
	// Rules to apply when matching an object against this alert configuration. See matchers.
	Matchers []GetAlertConfigurationMatcher `pulumi:"matchers"`
	// The threshold that causes an alert to be triggered. Required if `eventTypeName` : `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`. See metric threshold config.
	MetricThresholdConfigs []GetAlertConfigurationMetricThresholdConfig `pulumi:"metricThresholdConfigs"`
	Notifications          []GetAlertConfigurationNotification          `pulumi:"notifications"`
	Outputs                []GetAlertConfigurationOutput                `pulumi:"outputs"`
	ProjectId              string                                       `pulumi:"projectId"`
	// Threshold that triggers an alert. Required if `eventTypeName` is any value other than `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`. See threshold config.
	ThresholdConfigs []GetAlertConfigurationThresholdConfig `pulumi:"thresholdConfigs"`
	// Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
	Updated string `pulumi:"updated"`
}

func LookupAlertConfigurationOutput(ctx *pulumi.Context, args LookupAlertConfigurationOutputArgs, opts ...pulumi.InvokeOption) LookupAlertConfigurationResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupAlertConfigurationResult, error) {
			args := v.(LookupAlertConfigurationArgs)
			r, err := LookupAlertConfiguration(ctx, &args, opts...)
			var s LookupAlertConfigurationResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupAlertConfigurationResultOutput)
}

// A collection of arguments for invoking getAlertConfiguration.
type LookupAlertConfigurationOutputArgs struct {
	// Unique identifier for the alert configuration.
	AlertConfigurationId pulumi.StringInput `pulumi:"alertConfigurationId"`
	// List of formatted output requested for this alert configuration
	// * `output.#.type` - (Required) If the output is requested, you must specify its type. The format is computed as `output.#.value`, the following are the supported types:
	Outputs GetAlertConfigurationOutputArrayInput `pulumi:"outputs"`
	// The ID of the project where the alert configuration will create.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupAlertConfigurationOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlertConfigurationArgs)(nil)).Elem()
}

// A collection of values returned by getAlertConfiguration.
type LookupAlertConfigurationResultOutput struct{ *pulumi.OutputState }

func (LookupAlertConfigurationResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupAlertConfigurationResult)(nil)).Elem()
}

func (o LookupAlertConfigurationResultOutput) ToLookupAlertConfigurationResultOutput() LookupAlertConfigurationResultOutput {
	return o
}

func (o LookupAlertConfigurationResultOutput) ToLookupAlertConfigurationResultOutputWithContext(ctx context.Context) LookupAlertConfigurationResultOutput {
	return o
}

func (o LookupAlertConfigurationResultOutput) AlertConfigurationId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertConfigurationResult) string { return v.AlertConfigurationId }).(pulumi.StringOutput)
}

// Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
func (o LookupAlertConfigurationResultOutput) Created() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertConfigurationResult) string { return v.Created }).(pulumi.StringOutput)
}

// If set to true, the alert configuration is enabled. If enabled is not exported it is set to false.
func (o LookupAlertConfigurationResultOutput) Enabled() pulumi.BoolOutput {
	return o.ApplyT(func(v LookupAlertConfigurationResult) bool { return v.Enabled }).(pulumi.BoolOutput)
}

// The type of event that will trigger an alert.
func (o LookupAlertConfigurationResultOutput) EventType() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertConfigurationResult) string { return v.EventType }).(pulumi.StringOutput)
}

func (o LookupAlertConfigurationResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertConfigurationResult) string { return v.Id }).(pulumi.StringOutput)
}

// Rules to apply when matching an object against this alert configuration. See matchers.
func (o LookupAlertConfigurationResultOutput) Matchers() GetAlertConfigurationMatcherArrayOutput {
	return o.ApplyT(func(v LookupAlertConfigurationResult) []GetAlertConfigurationMatcher { return v.Matchers }).(GetAlertConfigurationMatcherArrayOutput)
}

// The threshold that causes an alert to be triggered. Required if `eventTypeName` : `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`. See metric threshold config.
func (o LookupAlertConfigurationResultOutput) MetricThresholdConfigs() GetAlertConfigurationMetricThresholdConfigArrayOutput {
	return o.ApplyT(func(v LookupAlertConfigurationResult) []GetAlertConfigurationMetricThresholdConfig {
		return v.MetricThresholdConfigs
	}).(GetAlertConfigurationMetricThresholdConfigArrayOutput)
}

func (o LookupAlertConfigurationResultOutput) Notifications() GetAlertConfigurationNotificationArrayOutput {
	return o.ApplyT(func(v LookupAlertConfigurationResult) []GetAlertConfigurationNotification { return v.Notifications }).(GetAlertConfigurationNotificationArrayOutput)
}

func (o LookupAlertConfigurationResultOutput) Outputs() GetAlertConfigurationOutputArrayOutput {
	return o.ApplyT(func(v LookupAlertConfigurationResult) []GetAlertConfigurationOutput { return v.Outputs }).(GetAlertConfigurationOutputArrayOutput)
}

func (o LookupAlertConfigurationResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertConfigurationResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Threshold that triggers an alert. Required if `eventTypeName` is any value other than `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`. See threshold config.
func (o LookupAlertConfigurationResultOutput) ThresholdConfigs() GetAlertConfigurationThresholdConfigArrayOutput {
	return o.ApplyT(func(v LookupAlertConfigurationResult) []GetAlertConfigurationThresholdConfig {
		return v.ThresholdConfigs
	}).(GetAlertConfigurationThresholdConfigArrayOutput)
}

// Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
func (o LookupAlertConfigurationResultOutput) Updated() pulumi.StringOutput {
	return o.ApplyT(func(v LookupAlertConfigurationResult) string { return v.Updated }).(pulumi.StringOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupAlertConfigurationResultOutput{})
}
