// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
)

// `DatabaseUser` provides a Database User resource. This represents a database user which will be applied to all clusters within the project.
//
// Each user has a set of roles that provide access to the project’s databases. User's roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find groupId in the official documentation.
//
// > **IMPORTANT:** All arguments including the password will be stored in the raw state as plain-text.
//
// ## Example Usage
// ### S
//
// ```go
// package main
//
// import (
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.NewDatabaseUser(ctx, "test", &mongodbatlas.DatabaseUserArgs{
// 			AuthDatabaseName: pulumi.String("admin"),
// 			Labels: mongodbatlas.DatabaseUserLabelArray{
// 				&mongodbatlas.DatabaseUserLabelArgs{
// 					Key:   pulumi.String("My Key"),
// 					Value: pulumi.String("My Value"),
// 				},
// 			},
// 			Password:  pulumi.String("test-acc-password"),
// 			ProjectId: pulumi.String("<PROJECT-ID>"),
// 			Roles: mongodbatlas.DatabaseUserRoleArray{
// 				&mongodbatlas.DatabaseUserRoleArgs{
// 					DatabaseName: pulumi.String("dbforApp"),
// 					RoleName:     pulumi.String("readWrite"),
// 				},
// 				&mongodbatlas.DatabaseUserRoleArgs{
// 					DatabaseName: pulumi.String("admin"),
// 					RoleName:     pulumi.String("readAnyDatabase"),
// 				},
// 			},
// 			Username: pulumi.String("test-acc-username"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
//
// ```go
// package main
//
// import (
// 	"fmt"
//
// 	"github.com/pulumi/pulumi-mongodbatlas/sdk/go/mongodbatlas"
// 	"github.com/pulumi/pulumi/sdk/v2/go/pulumi"
// )
//
// func main() {
// 	pulumi.Run(func(ctx *pulumi.Context) error {
// 		_, err := mongodbatlas.NewDatabaseUser(ctx, "test", &mongodbatlas.DatabaseUserArgs{
// 			AuthDatabaseName: pulumi.String(fmt.Sprintf("%v%v", "$", "external")),
// 			Labels: mongodbatlas.DatabaseUserLabelArray{
// 				&mongodbatlas.DatabaseUserLabelArgs{
// 					Key:   pulumi.String(fmt.Sprintf("%v%v", "%", "s")),
// 					Value: pulumi.String(fmt.Sprintf("%v%v", "%", "s")),
// 				},
// 			},
// 			ProjectId: pulumi.String("<PROJECT-ID>"),
// 			Roles: mongodbatlas.DatabaseUserRoleArray{
// 				&mongodbatlas.DatabaseUserRoleArgs{
// 					DatabaseName: pulumi.String("admin"),
// 					RoleName:     pulumi.String("readAnyDatabase"),
// 				},
// 			},
// 			Username: pulumi.String("test-acc-username"),
// 			X509Type: pulumi.String("MANAGED"),
// 		})
// 		if err != nil {
// 			return err
// 		}
// 		return nil
// 	})
// }
// ```
type DatabaseUser struct {
	pulumi.CustomResourceState

	// The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.
	AuthDatabaseName pulumi.StringPtrOutput `pulumi:"authDatabaseName"`
	// Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
	//
	// Deprecated: use auth_database_name instead
	DatabaseName pulumi.StringPtrOutput       `pulumi:"databaseName"`
	Labels       DatabaseUserLabelArrayOutput `pulumi:"labels"`
	// User's initial password. A value is required to create the database user, however the argument but may be removed from your configuration after user creation without impacting the user, password or management. IMPORTANT --- Passwords may show up in provider related logs and it will be stored in the state file as plain-text. Password can be changed after creation using your preferred method, e.g. via the MongoDB Atlas UI, to ensure security.  If you do change management of the password to outside of provider be sure to remove the argument from the provider configuration so it is not inadvertently updated to the original password.
	Password pulumi.StringPtrOutput `pulumi:"password"`
	// The unique ID for the project to create the database user.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
	Roles DatabaseUserRoleArrayOutput `pulumi:"roles"`
	// Username for authenticating to MongoDB.
	Username pulumi.StringOutput `pulumi:"username"`
	// X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:
	X509Type pulumi.StringPtrOutput `pulumi:"x509Type"`
}

// NewDatabaseUser registers a new resource with the given unique name, arguments, and options.
func NewDatabaseUser(ctx *pulumi.Context,
	name string, args *DatabaseUserArgs, opts ...pulumi.ResourceOption) (*DatabaseUser, error) {
	if args == nil || args.ProjectId == nil {
		return nil, errors.New("missing required argument 'ProjectId'")
	}
	if args == nil || args.Username == nil {
		return nil, errors.New("missing required argument 'Username'")
	}
	if args == nil {
		args = &DatabaseUserArgs{}
	}
	var resource DatabaseUser
	err := ctx.RegisterResource("mongodbatlas:index/databaseUser:DatabaseUser", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetDatabaseUser gets an existing DatabaseUser resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetDatabaseUser(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *DatabaseUserState, opts ...pulumi.ResourceOption) (*DatabaseUser, error) {
	var resource DatabaseUser
	err := ctx.ReadResource("mongodbatlas:index/databaseUser:DatabaseUser", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering DatabaseUser resources.
type databaseUserState struct {
	// The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.
	AuthDatabaseName *string `pulumi:"authDatabaseName"`
	// Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
	//
	// Deprecated: use auth_database_name instead
	DatabaseName *string             `pulumi:"databaseName"`
	Labels       []DatabaseUserLabel `pulumi:"labels"`
	// User's initial password. A value is required to create the database user, however the argument but may be removed from your configuration after user creation without impacting the user, password or management. IMPORTANT --- Passwords may show up in provider related logs and it will be stored in the state file as plain-text. Password can be changed after creation using your preferred method, e.g. via the MongoDB Atlas UI, to ensure security.  If you do change management of the password to outside of provider be sure to remove the argument from the provider configuration so it is not inadvertently updated to the original password.
	Password *string `pulumi:"password"`
	// The unique ID for the project to create the database user.
	ProjectId *string `pulumi:"projectId"`
	// List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
	Roles []DatabaseUserRole `pulumi:"roles"`
	// Username for authenticating to MongoDB.
	Username *string `pulumi:"username"`
	// X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:
	X509Type *string `pulumi:"x509Type"`
}

type DatabaseUserState struct {
	// The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.
	AuthDatabaseName pulumi.StringPtrInput
	// Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
	//
	// Deprecated: use auth_database_name instead
	DatabaseName pulumi.StringPtrInput
	Labels       DatabaseUserLabelArrayInput
	// User's initial password. A value is required to create the database user, however the argument but may be removed from your configuration after user creation without impacting the user, password or management. IMPORTANT --- Passwords may show up in provider related logs and it will be stored in the state file as plain-text. Password can be changed after creation using your preferred method, e.g. via the MongoDB Atlas UI, to ensure security.  If you do change management of the password to outside of provider be sure to remove the argument from the provider configuration so it is not inadvertently updated to the original password.
	Password pulumi.StringPtrInput
	// The unique ID for the project to create the database user.
	ProjectId pulumi.StringPtrInput
	// List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
	Roles DatabaseUserRoleArrayInput
	// Username for authenticating to MongoDB.
	Username pulumi.StringPtrInput
	// X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:
	X509Type pulumi.StringPtrInput
}

func (DatabaseUserState) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseUserState)(nil)).Elem()
}

type databaseUserArgs struct {
	// The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.
	AuthDatabaseName *string `pulumi:"authDatabaseName"`
	// Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
	//
	// Deprecated: use auth_database_name instead
	DatabaseName *string             `pulumi:"databaseName"`
	Labels       []DatabaseUserLabel `pulumi:"labels"`
	// User's initial password. A value is required to create the database user, however the argument but may be removed from your configuration after user creation without impacting the user, password or management. IMPORTANT --- Passwords may show up in provider related logs and it will be stored in the state file as plain-text. Password can be changed after creation using your preferred method, e.g. via the MongoDB Atlas UI, to ensure security.  If you do change management of the password to outside of provider be sure to remove the argument from the provider configuration so it is not inadvertently updated to the original password.
	Password *string `pulumi:"password"`
	// The unique ID for the project to create the database user.
	ProjectId string `pulumi:"projectId"`
	// List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
	Roles []DatabaseUserRole `pulumi:"roles"`
	// Username for authenticating to MongoDB.
	Username string `pulumi:"username"`
	// X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:
	X509Type *string `pulumi:"x509Type"`
}

// The set of arguments for constructing a DatabaseUser resource.
type DatabaseUserArgs struct {
	// The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is always the admin database.
	AuthDatabaseName pulumi.StringPtrInput
	// Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
	//
	// Deprecated: use auth_database_name instead
	DatabaseName pulumi.StringPtrInput
	Labels       DatabaseUserLabelArrayInput
	// User's initial password. A value is required to create the database user, however the argument but may be removed from your configuration after user creation without impacting the user, password or management. IMPORTANT --- Passwords may show up in provider related logs and it will be stored in the state file as plain-text. Password can be changed after creation using your preferred method, e.g. via the MongoDB Atlas UI, to ensure security.  If you do change management of the password to outside of provider be sure to remove the argument from the provider configuration so it is not inadvertently updated to the original password.
	Password pulumi.StringPtrInput
	// The unique ID for the project to create the database user.
	ProjectId pulumi.StringInput
	// List of user’s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
	Roles DatabaseUserRoleArrayInput
	// Username for authenticating to MongoDB.
	Username pulumi.StringInput
	// X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:
	X509Type pulumi.StringPtrInput
}

func (DatabaseUserArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*databaseUserArgs)(nil)).Elem()
}
