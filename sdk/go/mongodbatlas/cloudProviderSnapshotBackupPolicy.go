// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pkg/errors"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Import
//
// Cloud Backup Snapshot Policy entries can be imported using project project_id and cluster_name, in the format `PROJECTID-CLUSTERNAME`, e.g.
//
// ```sh
//  $ pulumi import mongodbatlas:index/cloudProviderSnapshotBackupPolicy:CloudProviderSnapshotBackupPolicy test 5d0f1f73cf09a29120e173cf-MyClusterTest
// ```
//
//  For more information see[MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/cloud-backup/schedule/modify-one-schedule/)
type CloudProviderSnapshotBackupPolicy struct {
	pulumi.CustomResourceState

	// Unique identifier of the Atlas cluster.
	ClusterId pulumi.StringOutput `pulumi:"clusterId"`
	// The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
	ClusterName pulumi.StringOutput `pulumi:"clusterName"`
	// Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.
	NextSnapshot pulumi.StringOutput `pulumi:"nextSnapshot"`
	// Contains a document for each backup policy item in the desired updated backup policy.
	// * `policies.#.id` - (Required) Unique identifier of the backup policy that you want to update. policies.#.id is a value obtained via the Cluster resource. providerBackupEnabled of the Cluster resource must be set to true. See the example above for how to refer to the Cluster resource for policies.#.id
	Policies CloudProviderSnapshotBackupPolicyPolicyArrayOutput `pulumi:"policies"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
	ReferenceHourOfDay pulumi.IntOutput `pulumi:"referenceHourOfDay"`
	// UTC Minutes after referenceHourOfDay that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
	ReferenceMinuteOfHour pulumi.IntOutput `pulumi:"referenceMinuteOfHour"`
	// Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
	RestoreWindowDays pulumi.IntOutput `pulumi:"restoreWindowDays"`
	// Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.
	UpdateSnapshots pulumi.BoolOutput `pulumi:"updateSnapshots"`
}

// NewCloudProviderSnapshotBackupPolicy registers a new resource with the given unique name, arguments, and options.
func NewCloudProviderSnapshotBackupPolicy(ctx *pulumi.Context,
	name string, args *CloudProviderSnapshotBackupPolicyArgs, opts ...pulumi.ResourceOption) (*CloudProviderSnapshotBackupPolicy, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.ClusterName == nil {
		return nil, errors.New("invalid value for required argument 'ClusterName'")
	}
	if args.Policies == nil {
		return nil, errors.New("invalid value for required argument 'Policies'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	var resource CloudProviderSnapshotBackupPolicy
	err := ctx.RegisterResource("mongodbatlas:index/cloudProviderSnapshotBackupPolicy:CloudProviderSnapshotBackupPolicy", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetCloudProviderSnapshotBackupPolicy gets an existing CloudProviderSnapshotBackupPolicy resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetCloudProviderSnapshotBackupPolicy(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *CloudProviderSnapshotBackupPolicyState, opts ...pulumi.ResourceOption) (*CloudProviderSnapshotBackupPolicy, error) {
	var resource CloudProviderSnapshotBackupPolicy
	err := ctx.ReadResource("mongodbatlas:index/cloudProviderSnapshotBackupPolicy:CloudProviderSnapshotBackupPolicy", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering CloudProviderSnapshotBackupPolicy resources.
type cloudProviderSnapshotBackupPolicyState struct {
	// Unique identifier of the Atlas cluster.
	ClusterId *string `pulumi:"clusterId"`
	// The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
	ClusterName *string `pulumi:"clusterName"`
	// Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.
	NextSnapshot *string `pulumi:"nextSnapshot"`
	// Contains a document for each backup policy item in the desired updated backup policy.
	// * `policies.#.id` - (Required) Unique identifier of the backup policy that you want to update. policies.#.id is a value obtained via the Cluster resource. providerBackupEnabled of the Cluster resource must be set to true. See the example above for how to refer to the Cluster resource for policies.#.id
	Policies []CloudProviderSnapshotBackupPolicyPolicy `pulumi:"policies"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId *string `pulumi:"projectId"`
	// UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
	ReferenceHourOfDay *int `pulumi:"referenceHourOfDay"`
	// UTC Minutes after referenceHourOfDay that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
	ReferenceMinuteOfHour *int `pulumi:"referenceMinuteOfHour"`
	// Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
	RestoreWindowDays *int `pulumi:"restoreWindowDays"`
	// Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.
	UpdateSnapshots *bool `pulumi:"updateSnapshots"`
}

type CloudProviderSnapshotBackupPolicyState struct {
	// Unique identifier of the Atlas cluster.
	ClusterId pulumi.StringPtrInput
	// The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
	ClusterName pulumi.StringPtrInput
	// Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.
	NextSnapshot pulumi.StringPtrInput
	// Contains a document for each backup policy item in the desired updated backup policy.
	// * `policies.#.id` - (Required) Unique identifier of the backup policy that you want to update. policies.#.id is a value obtained via the Cluster resource. providerBackupEnabled of the Cluster resource must be set to true. See the example above for how to refer to the Cluster resource for policies.#.id
	Policies CloudProviderSnapshotBackupPolicyPolicyArrayInput
	// The unique identifier of the project for the Atlas cluster.
	ProjectId pulumi.StringPtrInput
	// UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
	ReferenceHourOfDay pulumi.IntPtrInput
	// UTC Minutes after referenceHourOfDay that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
	ReferenceMinuteOfHour pulumi.IntPtrInput
	// Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
	RestoreWindowDays pulumi.IntPtrInput
	// Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.
	UpdateSnapshots pulumi.BoolPtrInput
}

func (CloudProviderSnapshotBackupPolicyState) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProviderSnapshotBackupPolicyState)(nil)).Elem()
}

type cloudProviderSnapshotBackupPolicyArgs struct {
	// The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
	ClusterName string `pulumi:"clusterName"`
	// Contains a document for each backup policy item in the desired updated backup policy.
	// * `policies.#.id` - (Required) Unique identifier of the backup policy that you want to update. policies.#.id is a value obtained via the Cluster resource. providerBackupEnabled of the Cluster resource must be set to true. See the example above for how to refer to the Cluster resource for policies.#.id
	Policies []CloudProviderSnapshotBackupPolicyPolicy `pulumi:"policies"`
	// The unique identifier of the project for the Atlas cluster.
	ProjectId string `pulumi:"projectId"`
	// UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
	ReferenceHourOfDay *int `pulumi:"referenceHourOfDay"`
	// UTC Minutes after referenceHourOfDay that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
	ReferenceMinuteOfHour *int `pulumi:"referenceMinuteOfHour"`
	// Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
	RestoreWindowDays *int `pulumi:"restoreWindowDays"`
	// Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.
	UpdateSnapshots *bool `pulumi:"updateSnapshots"`
}

// The set of arguments for constructing a CloudProviderSnapshotBackupPolicy resource.
type CloudProviderSnapshotBackupPolicyArgs struct {
	// The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
	ClusterName pulumi.StringInput
	// Contains a document for each backup policy item in the desired updated backup policy.
	// * `policies.#.id` - (Required) Unique identifier of the backup policy that you want to update. policies.#.id is a value obtained via the Cluster resource. providerBackupEnabled of the Cluster resource must be set to true. See the example above for how to refer to the Cluster resource for policies.#.id
	Policies CloudProviderSnapshotBackupPolicyPolicyArrayInput
	// The unique identifier of the project for the Atlas cluster.
	ProjectId pulumi.StringInput
	// UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
	ReferenceHourOfDay pulumi.IntPtrInput
	// UTC Minutes after referenceHourOfDay that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
	ReferenceMinuteOfHour pulumi.IntPtrInput
	// Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
	RestoreWindowDays pulumi.IntPtrInput
	// Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.
	UpdateSnapshots pulumi.BoolPtrInput
}

func (CloudProviderSnapshotBackupPolicyArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*cloudProviderSnapshotBackupPolicyArgs)(nil)).Elem()
}

type CloudProviderSnapshotBackupPolicyInput interface {
	pulumi.Input

	ToCloudProviderSnapshotBackupPolicyOutput() CloudProviderSnapshotBackupPolicyOutput
	ToCloudProviderSnapshotBackupPolicyOutputWithContext(ctx context.Context) CloudProviderSnapshotBackupPolicyOutput
}

func (*CloudProviderSnapshotBackupPolicy) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderSnapshotBackupPolicy)(nil)).Elem()
}

func (i *CloudProviderSnapshotBackupPolicy) ToCloudProviderSnapshotBackupPolicyOutput() CloudProviderSnapshotBackupPolicyOutput {
	return i.ToCloudProviderSnapshotBackupPolicyOutputWithContext(context.Background())
}

func (i *CloudProviderSnapshotBackupPolicy) ToCloudProviderSnapshotBackupPolicyOutputWithContext(ctx context.Context) CloudProviderSnapshotBackupPolicyOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderSnapshotBackupPolicyOutput)
}

// CloudProviderSnapshotBackupPolicyArrayInput is an input type that accepts CloudProviderSnapshotBackupPolicyArray and CloudProviderSnapshotBackupPolicyArrayOutput values.
// You can construct a concrete instance of `CloudProviderSnapshotBackupPolicyArrayInput` via:
//
//          CloudProviderSnapshotBackupPolicyArray{ CloudProviderSnapshotBackupPolicyArgs{...} }
type CloudProviderSnapshotBackupPolicyArrayInput interface {
	pulumi.Input

	ToCloudProviderSnapshotBackupPolicyArrayOutput() CloudProviderSnapshotBackupPolicyArrayOutput
	ToCloudProviderSnapshotBackupPolicyArrayOutputWithContext(context.Context) CloudProviderSnapshotBackupPolicyArrayOutput
}

type CloudProviderSnapshotBackupPolicyArray []CloudProviderSnapshotBackupPolicyInput

func (CloudProviderSnapshotBackupPolicyArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProviderSnapshotBackupPolicy)(nil)).Elem()
}

func (i CloudProviderSnapshotBackupPolicyArray) ToCloudProviderSnapshotBackupPolicyArrayOutput() CloudProviderSnapshotBackupPolicyArrayOutput {
	return i.ToCloudProviderSnapshotBackupPolicyArrayOutputWithContext(context.Background())
}

func (i CloudProviderSnapshotBackupPolicyArray) ToCloudProviderSnapshotBackupPolicyArrayOutputWithContext(ctx context.Context) CloudProviderSnapshotBackupPolicyArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderSnapshotBackupPolicyArrayOutput)
}

// CloudProviderSnapshotBackupPolicyMapInput is an input type that accepts CloudProviderSnapshotBackupPolicyMap and CloudProviderSnapshotBackupPolicyMapOutput values.
// You can construct a concrete instance of `CloudProviderSnapshotBackupPolicyMapInput` via:
//
//          CloudProviderSnapshotBackupPolicyMap{ "key": CloudProviderSnapshotBackupPolicyArgs{...} }
type CloudProviderSnapshotBackupPolicyMapInput interface {
	pulumi.Input

	ToCloudProviderSnapshotBackupPolicyMapOutput() CloudProviderSnapshotBackupPolicyMapOutput
	ToCloudProviderSnapshotBackupPolicyMapOutputWithContext(context.Context) CloudProviderSnapshotBackupPolicyMapOutput
}

type CloudProviderSnapshotBackupPolicyMap map[string]CloudProviderSnapshotBackupPolicyInput

func (CloudProviderSnapshotBackupPolicyMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProviderSnapshotBackupPolicy)(nil)).Elem()
}

func (i CloudProviderSnapshotBackupPolicyMap) ToCloudProviderSnapshotBackupPolicyMapOutput() CloudProviderSnapshotBackupPolicyMapOutput {
	return i.ToCloudProviderSnapshotBackupPolicyMapOutputWithContext(context.Background())
}

func (i CloudProviderSnapshotBackupPolicyMap) ToCloudProviderSnapshotBackupPolicyMapOutputWithContext(ctx context.Context) CloudProviderSnapshotBackupPolicyMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(CloudProviderSnapshotBackupPolicyMapOutput)
}

type CloudProviderSnapshotBackupPolicyOutput struct{ *pulumi.OutputState }

func (CloudProviderSnapshotBackupPolicyOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**CloudProviderSnapshotBackupPolicy)(nil)).Elem()
}

func (o CloudProviderSnapshotBackupPolicyOutput) ToCloudProviderSnapshotBackupPolicyOutput() CloudProviderSnapshotBackupPolicyOutput {
	return o
}

func (o CloudProviderSnapshotBackupPolicyOutput) ToCloudProviderSnapshotBackupPolicyOutputWithContext(ctx context.Context) CloudProviderSnapshotBackupPolicyOutput {
	return o
}

type CloudProviderSnapshotBackupPolicyArrayOutput struct{ *pulumi.OutputState }

func (CloudProviderSnapshotBackupPolicyArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*CloudProviderSnapshotBackupPolicy)(nil)).Elem()
}

func (o CloudProviderSnapshotBackupPolicyArrayOutput) ToCloudProviderSnapshotBackupPolicyArrayOutput() CloudProviderSnapshotBackupPolicyArrayOutput {
	return o
}

func (o CloudProviderSnapshotBackupPolicyArrayOutput) ToCloudProviderSnapshotBackupPolicyArrayOutputWithContext(ctx context.Context) CloudProviderSnapshotBackupPolicyArrayOutput {
	return o
}

func (o CloudProviderSnapshotBackupPolicyArrayOutput) Index(i pulumi.IntInput) CloudProviderSnapshotBackupPolicyOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *CloudProviderSnapshotBackupPolicy {
		return vs[0].([]*CloudProviderSnapshotBackupPolicy)[vs[1].(int)]
	}).(CloudProviderSnapshotBackupPolicyOutput)
}

type CloudProviderSnapshotBackupPolicyMapOutput struct{ *pulumi.OutputState }

func (CloudProviderSnapshotBackupPolicyMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*CloudProviderSnapshotBackupPolicy)(nil)).Elem()
}

func (o CloudProviderSnapshotBackupPolicyMapOutput) ToCloudProviderSnapshotBackupPolicyMapOutput() CloudProviderSnapshotBackupPolicyMapOutput {
	return o
}

func (o CloudProviderSnapshotBackupPolicyMapOutput) ToCloudProviderSnapshotBackupPolicyMapOutputWithContext(ctx context.Context) CloudProviderSnapshotBackupPolicyMapOutput {
	return o
}

func (o CloudProviderSnapshotBackupPolicyMapOutput) MapIndex(k pulumi.StringInput) CloudProviderSnapshotBackupPolicyOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *CloudProviderSnapshotBackupPolicy {
		return vs[0].(map[string]*CloudProviderSnapshotBackupPolicy)[vs[1].(string)]
	}).(CloudProviderSnapshotBackupPolicyOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProviderSnapshotBackupPolicyInput)(nil)).Elem(), &CloudProviderSnapshotBackupPolicy{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProviderSnapshotBackupPolicyArrayInput)(nil)).Elem(), CloudProviderSnapshotBackupPolicyArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*CloudProviderSnapshotBackupPolicyMapInput)(nil)).Elem(), CloudProviderSnapshotBackupPolicyMap{})
	pulumi.RegisterOutputType(CloudProviderSnapshotBackupPolicyOutput{})
	pulumi.RegisterOutputType(CloudProviderSnapshotBackupPolicyArrayOutput{})
	pulumi.RegisterOutputType(CloudProviderSnapshotBackupPolicyMapOutput{})
}
