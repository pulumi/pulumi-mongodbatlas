// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"errors"
	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Resource: EventTrigger
//
// `EventTrigger` provides a Event Trigger resource.
//
// Note: If the `appId` changes in the EventTrigger resource, it will force a replacement and delete itself from the old Atlas App Services app if it still exists then create itself in the new  Atlas App Services app. See [Atlas Triggers](https://www.mongodb.com/docs/atlas/app-services/triggers/) to learn more.
//
// ## Example Usage
//
// ### S
//
// ### Example Usage: Database Trigger with Function
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewEventTrigger(ctx, "test", &mongodbatlas.EventTriggerArgs{
//				ProjectId:  pulumi.String("PROJECT ID"),
//				AppId:      pulumi.String("APPLICATION ID"),
//				Name:       pulumi.String("NAME OF THE TRIGGER"),
//				Type:       pulumi.String("DATABASE"),
//				FunctionId: pulumi.String("FUNCTION ID"),
//				Disabled:   pulumi.Bool(false),
//				ConfigOperationTypes: pulumi.StringArray{
//					pulumi.String("INSERT"),
//					pulumi.String("UPDATE"),
//				},
//				ConfigDatabase:   pulumi.String("DATABASE NAME"),
//				ConfigCollection: pulumi.String("COLLECTION NAME"),
//				ConfigServiceId:  pulumi.String("SERVICE ID"),
//				ConfigMatch: pulumi.String(`{
//	  "updateDescription.updatedFields": {
//	    "status": "blocked"
//	  }
//	}
//
// `),
//
//				ConfigProject:            pulumi.String("{\"updateDescription.updatedFields\":{\"status\":\"blocked\"}}"),
//				ConfigFullDocument:       pulumi.Bool(false),
//				ConfigFullDocumentBefore: pulumi.Bool(false),
//				EventProcessors: &mongodbatlas.EventTriggerEventProcessorsArgs{
//					AwsEventbridge: &mongodbatlas.EventTriggerEventProcessorsAwsEventbridgeArgs{
//						ConfigAccountId: pulumi.String("AWS ACCOUNT ID"),
//						ConfigRegion:    pulumi.String("AWS REGIOn"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example Usage: Database Trigger with EventBridge
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewEventTrigger(ctx, "test", &mongodbatlas.EventTriggerArgs{
//				ProjectId: pulumi.String("PROJECT ID"),
//				AppId:     pulumi.String("APPLICATION ID"),
//				Name:      pulumi.String("NAME OF THE TRIGGER"),
//				Type:      pulumi.String("DATABASE"),
//				Disabled:  pulumi.Bool(false),
//				Unordered: pulumi.Bool(false),
//				ConfigOperationTypes: pulumi.StringArray{
//					pulumi.String("INSERT"),
//					pulumi.String("UPDATE"),
//				},
//				ConfigOperationType: pulumi.String("LOGIN"),
//				ConfigProviders: pulumi.StringArray{
//					pulumi.String("anon-user"),
//				},
//				ConfigDatabase:           pulumi.String("DATABASE NAME"),
//				ConfigCollection:         pulumi.String("COLLECTION NAME"),
//				ConfigServiceId:          pulumi.String("1"),
//				ConfigMatch:              pulumi.String("{\"updateDescription.updatedFields\":{\"status\":\"blocked\"}}"),
//				ConfigProject:            pulumi.String("{\"updateDescription.updatedFields\":{\"status\":\"blocked\"}}"),
//				ConfigFullDocument:       pulumi.Bool(false),
//				ConfigFullDocumentBefore: pulumi.Bool(false),
//				ConfigSchedule:           pulumi.String("*"),
//				EventProcessors: &mongodbatlas.EventTriggerEventProcessorsArgs{
//					AwsEventbridge: &mongodbatlas.EventTriggerEventProcessorsAwsEventbridgeArgs{
//						ConfigAccountId: pulumi.String("AWS ACCOUNT ID"),
//						ConfigRegion:    pulumi.String("AWS REGIOn"),
//					},
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example Usage: Authentication Trigger
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewEventTrigger(ctx, "test", &mongodbatlas.EventTriggerArgs{
//				ProjectId:           pulumi.String("PROJECT ID"),
//				AppId:               pulumi.String("APPLICATION ID"),
//				Name:                pulumi.String("NAME OF THE TRIGGER"),
//				Type:                pulumi.String("AUTHENTICATION"),
//				FunctionId:          pulumi.String("1"),
//				Disabled:            pulumi.Bool(false),
//				ConfigOperationType: pulumi.String("LOGIN"),
//				ConfigProviders: pulumi.StringArray{
//					pulumi.String("anon-user"),
//				},
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ### Example Usage: Scheduled Trigger
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.NewEventTrigger(ctx, "test", &mongodbatlas.EventTriggerArgs{
//				ProjectId:      pulumi.String("PROJECT ID"),
//				AppId:          pulumi.String("APPLICATION ID"),
//				Name:           pulumi.String("NAME OF THE TRIGGER"),
//				Type:           pulumi.String("SCHEDULED"),
//				FunctionId:     pulumi.String("1"),
//				Disabled:       pulumi.Bool(false),
//				ConfigSchedule: pulumi.String("*"),
//			})
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
//
// ## Import
//
// Event trigger can be imported using project ID, App ID and Trigger ID, in the format `project_id`--`app_id`-`trigger_id`, e.g.
//
// ```sh
// $ pulumi import mongodbatlas:index/eventTrigger:EventTrigger test 1112222b3bf99403840e8934--testing-example--1112222b3bf99403840e8934
// ```
// For more details on this resource see [Triggers resource](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#tag/triggers) in Atlas App Services Documentation.
type EventTrigger struct {
	pulumi.CustomResourceState

	// The ObjectID of your application.
	// * For more details on `projectId` and `appId` see: https://www.mongodb.com/docs/api/doc/atlas-app-services-admin-api-v3/#topic-project-amp-application-ids
	AppId pulumi.StringOutput `pulumi:"appId"`
	// Optional for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
	ConfigCollection pulumi.StringOutput `pulumi:"configCollection"`
	// Required for `DATABASE` type. The name of the MongoDB database to watch.
	ConfigDatabase pulumi.StringOutput `pulumi:"configDatabase"`
	// Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
	ConfigFullDocument       pulumi.BoolOutput `pulumi:"configFullDocument"`
	ConfigFullDocumentBefore pulumi.BoolOutput `pulumi:"configFullDocumentBefore"`
	// Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
	ConfigMatch pulumi.StringOutput `pulumi:"configMatch"`
	// Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
	ConfigOperationType pulumi.StringOutput `pulumi:"configOperationType"`
	// Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
	ConfigOperationTypes pulumi.StringArrayOutput `pulumi:"configOperationTypes"`
	// Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
	ConfigProject pulumi.StringOutput `pulumi:"configProject"`
	// Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
	ConfigProviders pulumi.StringArrayOutput `pulumi:"configProviders"`
	// Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
	ConfigSchedule     pulumi.StringOutput `pulumi:"configSchedule"`
	ConfigScheduleType pulumi.StringOutput `pulumi:"configScheduleType"`
	// Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
	ConfigServiceId pulumi.StringOutput `pulumi:"configServiceId"`
	// Default: `false` If `true`, the trigger is disabled.
	Disabled pulumi.BoolOutput `pulumi:"disabled"`
	// An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
	// * `event_processors.0.aws_eventbridge.config_account_id` - (Optional) AWS Account ID.
	// * `event_processors.0.aws_eventbridge.config_region` - (Optional) Region of AWS Account.
	EventProcessors EventTriggerEventProcessorsPtrOutput `pulumi:"eventProcessors"`
	// The ID of the function associated with the trigger.
	FunctionId pulumi.StringPtrOutput `pulumi:"functionId"`
	// The name of the function associated with the trigger.
	FunctionName pulumi.StringOutput `pulumi:"functionName"`
	// The name of the trigger.
	Name pulumi.StringOutput `pulumi:"name"`
	// The unique ID for the project to create the trigger.
	ProjectId pulumi.StringOutput `pulumi:"projectId"`
	// The unique ID of the trigger.
	TriggerId pulumi.StringOutput `pulumi:"triggerId"`
	// The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
	Type pulumi.StringOutput `pulumi:"type"`
	// Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
	Unordered pulumi.BoolOutput `pulumi:"unordered"`
}

// NewEventTrigger registers a new resource with the given unique name, arguments, and options.
func NewEventTrigger(ctx *pulumi.Context,
	name string, args *EventTriggerArgs, opts ...pulumi.ResourceOption) (*EventTrigger, error) {
	if args == nil {
		return nil, errors.New("missing one or more required arguments")
	}

	if args.AppId == nil {
		return nil, errors.New("invalid value for required argument 'AppId'")
	}
	if args.ProjectId == nil {
		return nil, errors.New("invalid value for required argument 'ProjectId'")
	}
	if args.Type == nil {
		return nil, errors.New("invalid value for required argument 'Type'")
	}
	opts = internal.PkgResourceDefaultOpts(opts)
	var resource EventTrigger
	err := ctx.RegisterResource("mongodbatlas:index/eventTrigger:EventTrigger", name, args, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// GetEventTrigger gets an existing EventTrigger resource's state with the given name, ID, and optional
// state properties that are used to uniquely qualify the lookup (nil if not required).
func GetEventTrigger(ctx *pulumi.Context,
	name string, id pulumi.IDInput, state *EventTriggerState, opts ...pulumi.ResourceOption) (*EventTrigger, error) {
	var resource EventTrigger
	err := ctx.ReadResource("mongodbatlas:index/eventTrigger:EventTrigger", name, id, state, &resource, opts...)
	if err != nil {
		return nil, err
	}
	return &resource, nil
}

// Input properties used for looking up and filtering EventTrigger resources.
type eventTriggerState struct {
	// The ObjectID of your application.
	// * For more details on `projectId` and `appId` see: https://www.mongodb.com/docs/api/doc/atlas-app-services-admin-api-v3/#topic-project-amp-application-ids
	AppId *string `pulumi:"appId"`
	// Optional for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
	ConfigCollection *string `pulumi:"configCollection"`
	// Required for `DATABASE` type. The name of the MongoDB database to watch.
	ConfigDatabase *string `pulumi:"configDatabase"`
	// Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
	ConfigFullDocument       *bool `pulumi:"configFullDocument"`
	ConfigFullDocumentBefore *bool `pulumi:"configFullDocumentBefore"`
	// Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
	ConfigMatch *string `pulumi:"configMatch"`
	// Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
	ConfigOperationType *string `pulumi:"configOperationType"`
	// Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
	ConfigOperationTypes []string `pulumi:"configOperationTypes"`
	// Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
	ConfigProject *string `pulumi:"configProject"`
	// Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
	ConfigProviders []string `pulumi:"configProviders"`
	// Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
	ConfigSchedule     *string `pulumi:"configSchedule"`
	ConfigScheduleType *string `pulumi:"configScheduleType"`
	// Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
	ConfigServiceId *string `pulumi:"configServiceId"`
	// Default: `false` If `true`, the trigger is disabled.
	Disabled *bool `pulumi:"disabled"`
	// An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
	// * `event_processors.0.aws_eventbridge.config_account_id` - (Optional) AWS Account ID.
	// * `event_processors.0.aws_eventbridge.config_region` - (Optional) Region of AWS Account.
	EventProcessors *EventTriggerEventProcessors `pulumi:"eventProcessors"`
	// The ID of the function associated with the trigger.
	FunctionId *string `pulumi:"functionId"`
	// The name of the function associated with the trigger.
	FunctionName *string `pulumi:"functionName"`
	// The name of the trigger.
	Name *string `pulumi:"name"`
	// The unique ID for the project to create the trigger.
	ProjectId *string `pulumi:"projectId"`
	// The unique ID of the trigger.
	TriggerId *string `pulumi:"triggerId"`
	// The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
	Type *string `pulumi:"type"`
	// Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
	Unordered *bool `pulumi:"unordered"`
}

type EventTriggerState struct {
	// The ObjectID of your application.
	// * For more details on `projectId` and `appId` see: https://www.mongodb.com/docs/api/doc/atlas-app-services-admin-api-v3/#topic-project-amp-application-ids
	AppId pulumi.StringPtrInput
	// Optional for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
	ConfigCollection pulumi.StringPtrInput
	// Required for `DATABASE` type. The name of the MongoDB database to watch.
	ConfigDatabase pulumi.StringPtrInput
	// Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
	ConfigFullDocument       pulumi.BoolPtrInput
	ConfigFullDocumentBefore pulumi.BoolPtrInput
	// Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
	ConfigMatch pulumi.StringPtrInput
	// Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
	ConfigOperationType pulumi.StringPtrInput
	// Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
	ConfigOperationTypes pulumi.StringArrayInput
	// Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
	ConfigProject pulumi.StringPtrInput
	// Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
	ConfigProviders pulumi.StringArrayInput
	// Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
	ConfigSchedule     pulumi.StringPtrInput
	ConfigScheduleType pulumi.StringPtrInput
	// Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
	ConfigServiceId pulumi.StringPtrInput
	// Default: `false` If `true`, the trigger is disabled.
	Disabled pulumi.BoolPtrInput
	// An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
	// * `event_processors.0.aws_eventbridge.config_account_id` - (Optional) AWS Account ID.
	// * `event_processors.0.aws_eventbridge.config_region` - (Optional) Region of AWS Account.
	EventProcessors EventTriggerEventProcessorsPtrInput
	// The ID of the function associated with the trigger.
	FunctionId pulumi.StringPtrInput
	// The name of the function associated with the trigger.
	FunctionName pulumi.StringPtrInput
	// The name of the trigger.
	Name pulumi.StringPtrInput
	// The unique ID for the project to create the trigger.
	ProjectId pulumi.StringPtrInput
	// The unique ID of the trigger.
	TriggerId pulumi.StringPtrInput
	// The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
	Type pulumi.StringPtrInput
	// Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
	Unordered pulumi.BoolPtrInput
}

func (EventTriggerState) ElementType() reflect.Type {
	return reflect.TypeOf((*eventTriggerState)(nil)).Elem()
}

type eventTriggerArgs struct {
	// The ObjectID of your application.
	// * For more details on `projectId` and `appId` see: https://www.mongodb.com/docs/api/doc/atlas-app-services-admin-api-v3/#topic-project-amp-application-ids
	AppId string `pulumi:"appId"`
	// Optional for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
	ConfigCollection *string `pulumi:"configCollection"`
	// Required for `DATABASE` type. The name of the MongoDB database to watch.
	ConfigDatabase *string `pulumi:"configDatabase"`
	// Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
	ConfigFullDocument       *bool `pulumi:"configFullDocument"`
	ConfigFullDocumentBefore *bool `pulumi:"configFullDocumentBefore"`
	// Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
	ConfigMatch *string `pulumi:"configMatch"`
	// Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
	ConfigOperationType *string `pulumi:"configOperationType"`
	// Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
	ConfigOperationTypes []string `pulumi:"configOperationTypes"`
	// Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
	ConfigProject *string `pulumi:"configProject"`
	// Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
	ConfigProviders []string `pulumi:"configProviders"`
	// Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
	ConfigSchedule *string `pulumi:"configSchedule"`
	// Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
	ConfigServiceId *string `pulumi:"configServiceId"`
	// Default: `false` If `true`, the trigger is disabled.
	Disabled *bool `pulumi:"disabled"`
	// An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
	// * `event_processors.0.aws_eventbridge.config_account_id` - (Optional) AWS Account ID.
	// * `event_processors.0.aws_eventbridge.config_region` - (Optional) Region of AWS Account.
	EventProcessors *EventTriggerEventProcessors `pulumi:"eventProcessors"`
	// The ID of the function associated with the trigger.
	FunctionId *string `pulumi:"functionId"`
	// The name of the trigger.
	Name *string `pulumi:"name"`
	// The unique ID for the project to create the trigger.
	ProjectId string `pulumi:"projectId"`
	// The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
	Type string `pulumi:"type"`
	// Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
	Unordered *bool `pulumi:"unordered"`
}

// The set of arguments for constructing a EventTrigger resource.
type EventTriggerArgs struct {
	// The ObjectID of your application.
	// * For more details on `projectId` and `appId` see: https://www.mongodb.com/docs/api/doc/atlas-app-services-admin-api-v3/#topic-project-amp-application-ids
	AppId pulumi.StringInput
	// Optional for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
	ConfigCollection pulumi.StringPtrInput
	// Required for `DATABASE` type. The name of the MongoDB database to watch.
	ConfigDatabase pulumi.StringPtrInput
	// Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
	ConfigFullDocument       pulumi.BoolPtrInput
	ConfigFullDocumentBefore pulumi.BoolPtrInput
	// Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
	ConfigMatch pulumi.StringPtrInput
	// Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
	ConfigOperationType pulumi.StringPtrInput
	// Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
	ConfigOperationTypes pulumi.StringArrayInput
	// Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
	ConfigProject pulumi.StringPtrInput
	// Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
	ConfigProviders pulumi.StringArrayInput
	// Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
	ConfigSchedule pulumi.StringPtrInput
	// Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
	ConfigServiceId pulumi.StringPtrInput
	// Default: `false` If `true`, the trigger is disabled.
	Disabled pulumi.BoolPtrInput
	// An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
	// * `event_processors.0.aws_eventbridge.config_account_id` - (Optional) AWS Account ID.
	// * `event_processors.0.aws_eventbridge.config_region` - (Optional) Region of AWS Account.
	EventProcessors EventTriggerEventProcessorsPtrInput
	// The ID of the function associated with the trigger.
	FunctionId pulumi.StringPtrInput
	// The name of the trigger.
	Name pulumi.StringPtrInput
	// The unique ID for the project to create the trigger.
	ProjectId pulumi.StringInput
	// The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
	Type pulumi.StringInput
	// Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
	Unordered pulumi.BoolPtrInput
}

func (EventTriggerArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*eventTriggerArgs)(nil)).Elem()
}

type EventTriggerInput interface {
	pulumi.Input

	ToEventTriggerOutput() EventTriggerOutput
	ToEventTriggerOutputWithContext(ctx context.Context) EventTriggerOutput
}

func (*EventTrigger) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTrigger)(nil)).Elem()
}

func (i *EventTrigger) ToEventTriggerOutput() EventTriggerOutput {
	return i.ToEventTriggerOutputWithContext(context.Background())
}

func (i *EventTrigger) ToEventTriggerOutputWithContext(ctx context.Context) EventTriggerOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerOutput)
}

// EventTriggerArrayInput is an input type that accepts EventTriggerArray and EventTriggerArrayOutput values.
// You can construct a concrete instance of `EventTriggerArrayInput` via:
//
//	EventTriggerArray{ EventTriggerArgs{...} }
type EventTriggerArrayInput interface {
	pulumi.Input

	ToEventTriggerArrayOutput() EventTriggerArrayOutput
	ToEventTriggerArrayOutputWithContext(context.Context) EventTriggerArrayOutput
}

type EventTriggerArray []EventTriggerInput

func (EventTriggerArray) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventTrigger)(nil)).Elem()
}

func (i EventTriggerArray) ToEventTriggerArrayOutput() EventTriggerArrayOutput {
	return i.ToEventTriggerArrayOutputWithContext(context.Background())
}

func (i EventTriggerArray) ToEventTriggerArrayOutputWithContext(ctx context.Context) EventTriggerArrayOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerArrayOutput)
}

// EventTriggerMapInput is an input type that accepts EventTriggerMap and EventTriggerMapOutput values.
// You can construct a concrete instance of `EventTriggerMapInput` via:
//
//	EventTriggerMap{ "key": EventTriggerArgs{...} }
type EventTriggerMapInput interface {
	pulumi.Input

	ToEventTriggerMapOutput() EventTriggerMapOutput
	ToEventTriggerMapOutputWithContext(context.Context) EventTriggerMapOutput
}

type EventTriggerMap map[string]EventTriggerInput

func (EventTriggerMap) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventTrigger)(nil)).Elem()
}

func (i EventTriggerMap) ToEventTriggerMapOutput() EventTriggerMapOutput {
	return i.ToEventTriggerMapOutputWithContext(context.Background())
}

func (i EventTriggerMap) ToEventTriggerMapOutputWithContext(ctx context.Context) EventTriggerMapOutput {
	return pulumi.ToOutputWithContext(ctx, i).(EventTriggerMapOutput)
}

type EventTriggerOutput struct{ *pulumi.OutputState }

func (EventTriggerOutput) ElementType() reflect.Type {
	return reflect.TypeOf((**EventTrigger)(nil)).Elem()
}

func (o EventTriggerOutput) ToEventTriggerOutput() EventTriggerOutput {
	return o
}

func (o EventTriggerOutput) ToEventTriggerOutputWithContext(ctx context.Context) EventTriggerOutput {
	return o
}

// The ObjectID of your application.
// * For more details on `projectId` and `appId` see: https://www.mongodb.com/docs/api/doc/atlas-app-services-admin-api-v3/#topic-project-amp-application-ids
func (o EventTriggerOutput) AppId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.AppId }).(pulumi.StringOutput)
}

// Optional for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
func (o EventTriggerOutput) ConfigCollection() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.ConfigCollection }).(pulumi.StringOutput)
}

// Required for `DATABASE` type. The name of the MongoDB database to watch.
func (o EventTriggerOutput) ConfigDatabase() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.ConfigDatabase }).(pulumi.StringOutput)
}

// Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
func (o EventTriggerOutput) ConfigFullDocument() pulumi.BoolOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.BoolOutput { return v.ConfigFullDocument }).(pulumi.BoolOutput)
}

func (o EventTriggerOutput) ConfigFullDocumentBefore() pulumi.BoolOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.BoolOutput { return v.ConfigFullDocumentBefore }).(pulumi.BoolOutput)
}

// Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
func (o EventTriggerOutput) ConfigMatch() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.ConfigMatch }).(pulumi.StringOutput)
}

// Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
func (o EventTriggerOutput) ConfigOperationType() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.ConfigOperationType }).(pulumi.StringOutput)
}

// Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
func (o EventTriggerOutput) ConfigOperationTypes() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringArrayOutput { return v.ConfigOperationTypes }).(pulumi.StringArrayOutput)
}

// Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
func (o EventTriggerOutput) ConfigProject() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.ConfigProject }).(pulumi.StringOutput)
}

// Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
func (o EventTriggerOutput) ConfigProviders() pulumi.StringArrayOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringArrayOutput { return v.ConfigProviders }).(pulumi.StringArrayOutput)
}

// Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
func (o EventTriggerOutput) ConfigSchedule() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.ConfigSchedule }).(pulumi.StringOutput)
}

func (o EventTriggerOutput) ConfigScheduleType() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.ConfigScheduleType }).(pulumi.StringOutput)
}

// Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
func (o EventTriggerOutput) ConfigServiceId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.ConfigServiceId }).(pulumi.StringOutput)
}

// Default: `false` If `true`, the trigger is disabled.
func (o EventTriggerOutput) Disabled() pulumi.BoolOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.BoolOutput { return v.Disabled }).(pulumi.BoolOutput)
}

// An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
// * `event_processors.0.aws_eventbridge.config_account_id` - (Optional) AWS Account ID.
// * `event_processors.0.aws_eventbridge.config_region` - (Optional) Region of AWS Account.
func (o EventTriggerOutput) EventProcessors() EventTriggerEventProcessorsPtrOutput {
	return o.ApplyT(func(v *EventTrigger) EventTriggerEventProcessorsPtrOutput { return v.EventProcessors }).(EventTriggerEventProcessorsPtrOutput)
}

// The ID of the function associated with the trigger.
func (o EventTriggerOutput) FunctionId() pulumi.StringPtrOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringPtrOutput { return v.FunctionId }).(pulumi.StringPtrOutput)
}

// The name of the function associated with the trigger.
func (o EventTriggerOutput) FunctionName() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.FunctionName }).(pulumi.StringOutput)
}

// The name of the trigger.
func (o EventTriggerOutput) Name() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.Name }).(pulumi.StringOutput)
}

// The unique ID for the project to create the trigger.
func (o EventTriggerOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.ProjectId }).(pulumi.StringOutput)
}

// The unique ID of the trigger.
func (o EventTriggerOutput) TriggerId() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.TriggerId }).(pulumi.StringOutput)
}

// The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
func (o EventTriggerOutput) Type() pulumi.StringOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.StringOutput { return v.Type }).(pulumi.StringOutput)
}

// Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
func (o EventTriggerOutput) Unordered() pulumi.BoolOutput {
	return o.ApplyT(func(v *EventTrigger) pulumi.BoolOutput { return v.Unordered }).(pulumi.BoolOutput)
}

type EventTriggerArrayOutput struct{ *pulumi.OutputState }

func (EventTriggerArrayOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*[]*EventTrigger)(nil)).Elem()
}

func (o EventTriggerArrayOutput) ToEventTriggerArrayOutput() EventTriggerArrayOutput {
	return o
}

func (o EventTriggerArrayOutput) ToEventTriggerArrayOutputWithContext(ctx context.Context) EventTriggerArrayOutput {
	return o
}

func (o EventTriggerArrayOutput) Index(i pulumi.IntInput) EventTriggerOutput {
	return pulumi.All(o, i).ApplyT(func(vs []interface{}) *EventTrigger {
		return vs[0].([]*EventTrigger)[vs[1].(int)]
	}).(EventTriggerOutput)
}

type EventTriggerMapOutput struct{ *pulumi.OutputState }

func (EventTriggerMapOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*map[string]*EventTrigger)(nil)).Elem()
}

func (o EventTriggerMapOutput) ToEventTriggerMapOutput() EventTriggerMapOutput {
	return o
}

func (o EventTriggerMapOutput) ToEventTriggerMapOutputWithContext(ctx context.Context) EventTriggerMapOutput {
	return o
}

func (o EventTriggerMapOutput) MapIndex(k pulumi.StringInput) EventTriggerOutput {
	return pulumi.All(o, k).ApplyT(func(vs []interface{}) *EventTrigger {
		return vs[0].(map[string]*EventTrigger)[vs[1].(string)]
	}).(EventTriggerOutput)
}

func init() {
	pulumi.RegisterInputType(reflect.TypeOf((*EventTriggerInput)(nil)).Elem(), &EventTrigger{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTriggerArrayInput)(nil)).Elem(), EventTriggerArray{})
	pulumi.RegisterInputType(reflect.TypeOf((*EventTriggerMapInput)(nil)).Elem(), EventTriggerMap{})
	pulumi.RegisterOutputType(EventTriggerOutput{})
	pulumi.RegisterOutputType(EventTriggerArrayOutput{})
	pulumi.RegisterOutputType(EventTriggerMapOutput{})
}
