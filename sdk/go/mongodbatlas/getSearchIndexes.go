// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## # Data Source: getSearchIndexes
//
// `getSearchIndexes` describes all search indexes. This represents search indexes that have been created.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
func LookupSearchIndexes(ctx *pulumi.Context, args *LookupSearchIndexesArgs, opts ...pulumi.InvokeOption) (*LookupSearchIndexesResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupSearchIndexesResult
	err := ctx.Invoke("mongodbatlas:index/getSearchIndexes:getSearchIndexes", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getSearchIndexes.
type LookupSearchIndexesArgs struct {
	// Name of the cluster containing the collection with one or more Atlas Search indexes.
	ClusterName string `pulumi:"clusterName"`
	// Name of the collection with one or more Atlas Search indexes.
	CollectionName string `pulumi:"collectionName"`
	// (Required) Name of the database the collection is in.
	Database string `pulumi:"database"`
	// Unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getSearchIndexes.
type LookupSearchIndexesResult struct {
	ClusterName string `pulumi:"clusterName"`
	// (Required) Name of the collection the index is on.
	CollectionName string `pulumi:"collectionName"`
	// (Required) Name of the database the collection is in.
	Database string `pulumi:"database"`
	// The provider-assigned unique ID for this managed resource.
	Id        string `pulumi:"id"`
	ProjectId string `pulumi:"projectId"`
	// A list where each represents a search index.
	Results []GetSearchIndexesResult `pulumi:"results"`
	// Represents the total of the search indexes
	TotalCount int `pulumi:"totalCount"`
}

func LookupSearchIndexesOutput(ctx *pulumi.Context, args LookupSearchIndexesOutputArgs, opts ...pulumi.InvokeOption) LookupSearchIndexesResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupSearchIndexesResultOutput, error) {
			args := v.(LookupSearchIndexesArgs)
			opts = internal.PkgInvokeDefaultOpts(opts)
			var rv LookupSearchIndexesResult
			secret, err := ctx.InvokePackageRaw("mongodbatlas:index/getSearchIndexes:getSearchIndexes", args, &rv, "", opts...)
			if err != nil {
				return LookupSearchIndexesResultOutput{}, err
			}

			output := pulumi.ToOutput(rv).(LookupSearchIndexesResultOutput)
			if secret {
				return pulumi.ToSecret(output).(LookupSearchIndexesResultOutput), nil
			}
			return output, nil
		}).(LookupSearchIndexesResultOutput)
}

// A collection of arguments for invoking getSearchIndexes.
type LookupSearchIndexesOutputArgs struct {
	// Name of the cluster containing the collection with one or more Atlas Search indexes.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// Name of the collection with one or more Atlas Search indexes.
	CollectionName pulumi.StringInput `pulumi:"collectionName"`
	// (Required) Name of the database the collection is in.
	Database pulumi.StringInput `pulumi:"database"`
	// Unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupSearchIndexesOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSearchIndexesArgs)(nil)).Elem()
}

// A collection of values returned by getSearchIndexes.
type LookupSearchIndexesResultOutput struct{ *pulumi.OutputState }

func (LookupSearchIndexesResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupSearchIndexesResult)(nil)).Elem()
}

func (o LookupSearchIndexesResultOutput) ToLookupSearchIndexesResultOutput() LookupSearchIndexesResultOutput {
	return o
}

func (o LookupSearchIndexesResultOutput) ToLookupSearchIndexesResultOutputWithContext(ctx context.Context) LookupSearchIndexesResultOutput {
	return o
}

func (o LookupSearchIndexesResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSearchIndexesResult) string { return v.ClusterName }).(pulumi.StringOutput)
}

// (Required) Name of the collection the index is on.
func (o LookupSearchIndexesResultOutput) CollectionName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSearchIndexesResult) string { return v.CollectionName }).(pulumi.StringOutput)
}

// (Required) Name of the database the collection is in.
func (o LookupSearchIndexesResultOutput) Database() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSearchIndexesResult) string { return v.Database }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupSearchIndexesResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSearchIndexesResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupSearchIndexesResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupSearchIndexesResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// A list where each represents a search index.
func (o LookupSearchIndexesResultOutput) Results() GetSearchIndexesResultArrayOutput {
	return o.ApplyT(func(v LookupSearchIndexesResult) []GetSearchIndexesResult { return v.Results }).(GetSearchIndexesResultArrayOutput)
}

// Represents the total of the search indexes
func (o LookupSearchIndexesResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupSearchIndexesResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupSearchIndexesResultOutput{})
}
