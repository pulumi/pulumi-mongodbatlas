// Code generated by pulumi-language-go DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
//
// ```go
// package main
//
// import (
//
//	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas"
//	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
//
// )
//
//	func main() {
//		pulumi.Run(func(ctx *pulumi.Context) error {
//			_, err := mongodbatlas.LookupProjectApiKeys(ctx, &mongodbatlas.LookupProjectApiKeysArgs{
//				PageNum:      pulumi.IntRef(1),
//				ItemsPerPage: pulumi.IntRef(5),
//				ProjectId:    "32b6e34b3d91647abb20e7b8",
//			}, nil)
//			if err != nil {
//				return err
//			}
//			return nil
//		})
//	}
//
// ```
func LookupProjectApiKeys(ctx *pulumi.Context, args *LookupProjectApiKeysArgs, opts ...pulumi.InvokeOption) (*LookupProjectApiKeysResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectApiKeysResult
	err := ctx.Invoke("mongodbatlas:index/getProjectApiKeys:getProjectApiKeys", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectApiKeys.
type LookupProjectApiKeysArgs struct {
	// Number of items to return per page, up to a maximum of 500. Defaults to `100`.
	ItemsPerPage *int `pulumi:"itemsPerPage"`
	// The page to return. Defaults to `1`.
	PageNum *int `pulumi:"pageNum"`
	// The unique ID for the project.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getProjectApiKeys.
type LookupProjectApiKeysResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id           string `pulumi:"id"`
	ItemsPerPage *int   `pulumi:"itemsPerPage"`
	PageNum      *int   `pulumi:"pageNum"`
	// Project ID to assign to Access Key
	ProjectId string `pulumi:"projectId"`
	// A list where each element represents a API Key assigned to the project.
	Results []GetProjectApiKeysResult `pulumi:"results"`
}

func LookupProjectApiKeysOutput(ctx *pulumi.Context, args LookupProjectApiKeysOutputArgs, opts ...pulumi.InvokeOption) LookupProjectApiKeysResultOutput {
	return pulumi.ToOutputWithContext(ctx.Context(), args).
		ApplyT(func(v interface{}) (LookupProjectApiKeysResultOutput, error) {
			args := v.(LookupProjectApiKeysArgs)
			options := pulumi.InvokeOutputOptions{InvokeOptions: internal.PkgInvokeDefaultOpts(opts)}
			return ctx.InvokeOutput("mongodbatlas:index/getProjectApiKeys:getProjectApiKeys", args, LookupProjectApiKeysResultOutput{}, options).(LookupProjectApiKeysResultOutput), nil
		}).(LookupProjectApiKeysResultOutput)
}

// A collection of arguments for invoking getProjectApiKeys.
type LookupProjectApiKeysOutputArgs struct {
	// Number of items to return per page, up to a maximum of 500. Defaults to `100`.
	ItemsPerPage pulumi.IntPtrInput `pulumi:"itemsPerPage"`
	// The page to return. Defaults to `1`.
	PageNum pulumi.IntPtrInput `pulumi:"pageNum"`
	// The unique ID for the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupProjectApiKeysOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectApiKeysArgs)(nil)).Elem()
}

// A collection of values returned by getProjectApiKeys.
type LookupProjectApiKeysResultOutput struct{ *pulumi.OutputState }

func (LookupProjectApiKeysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectApiKeysResult)(nil)).Elem()
}

func (o LookupProjectApiKeysResultOutput) ToLookupProjectApiKeysResultOutput() LookupProjectApiKeysResultOutput {
	return o
}

func (o LookupProjectApiKeysResultOutput) ToLookupProjectApiKeysResultOutputWithContext(ctx context.Context) LookupProjectApiKeysResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectApiKeysResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectApiKeysResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupProjectApiKeysResultOutput) ItemsPerPage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupProjectApiKeysResult) *int { return v.ItemsPerPage }).(pulumi.IntPtrOutput)
}

func (o LookupProjectApiKeysResultOutput) PageNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupProjectApiKeysResult) *int { return v.PageNum }).(pulumi.IntPtrOutput)
}

// Project ID to assign to Access Key
func (o LookupProjectApiKeysResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectApiKeysResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// A list where each element represents a API Key assigned to the project.
func (o LookupProjectApiKeysResultOutput) Results() GetProjectApiKeysResultArrayOutput {
	return o.ApplyT(func(v LookupProjectApiKeysResult) []GetProjectApiKeysResult { return v.Results }).(GetProjectApiKeysResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectApiKeysResultOutput{})
}
