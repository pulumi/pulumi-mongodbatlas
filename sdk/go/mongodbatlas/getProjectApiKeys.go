// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

func LookupProjectApiKeys(ctx *pulumi.Context, args *LookupProjectApiKeysArgs, opts ...pulumi.InvokeOption) (*LookupProjectApiKeysResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectApiKeysResult
	err := ctx.Invoke("mongodbatlas:index/getProjectApiKeys:getProjectApiKeys", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectApiKeys.
type LookupProjectApiKeysArgs struct {
	// Number of items to return per page, up to a maximum of 500. Defaults to `100`.
	ItemsPerPage *int `pulumi:"itemsPerPage"`
	// The page to return. Defaults to `1`.
	PageNum *int `pulumi:"pageNum"`
	// Unique identifier for the project whose API keys you want to retrieve. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getProjectApiKeys.
type LookupProjectApiKeysResult struct {
	// The provider-assigned unique ID for this managed resource.
	Id           string                    `pulumi:"id"`
	ItemsPerPage *int                      `pulumi:"itemsPerPage"`
	PageNum      *int                      `pulumi:"pageNum"`
	ProjectId    string                    `pulumi:"projectId"`
	Results      []GetProjectApiKeysResult `pulumi:"results"`
}

func LookupProjectApiKeysOutput(ctx *pulumi.Context, args LookupProjectApiKeysOutputArgs, opts ...pulumi.InvokeOption) LookupProjectApiKeysResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectApiKeysResult, error) {
			args := v.(LookupProjectApiKeysArgs)
			r, err := LookupProjectApiKeys(ctx, &args, opts...)
			var s LookupProjectApiKeysResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProjectApiKeysResultOutput)
}

// A collection of arguments for invoking getProjectApiKeys.
type LookupProjectApiKeysOutputArgs struct {
	// Number of items to return per page, up to a maximum of 500. Defaults to `100`.
	ItemsPerPage pulumi.IntPtrInput `pulumi:"itemsPerPage"`
	// The page to return. Defaults to `1`.
	PageNum pulumi.IntPtrInput `pulumi:"pageNum"`
	// Unique identifier for the project whose API keys you want to retrieve. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupProjectApiKeysOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectApiKeysArgs)(nil)).Elem()
}

// A collection of values returned by getProjectApiKeys.
type LookupProjectApiKeysResultOutput struct{ *pulumi.OutputState }

func (LookupProjectApiKeysResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectApiKeysResult)(nil)).Elem()
}

func (o LookupProjectApiKeysResultOutput) ToLookupProjectApiKeysResultOutput() LookupProjectApiKeysResultOutput {
	return o
}

func (o LookupProjectApiKeysResultOutput) ToLookupProjectApiKeysResultOutputWithContext(ctx context.Context) LookupProjectApiKeysResultOutput {
	return o
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectApiKeysResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectApiKeysResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupProjectApiKeysResultOutput) ItemsPerPage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupProjectApiKeysResult) *int { return v.ItemsPerPage }).(pulumi.IntPtrOutput)
}

func (o LookupProjectApiKeysResultOutput) PageNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupProjectApiKeysResult) *int { return v.PageNum }).(pulumi.IntPtrOutput)
}

func (o LookupProjectApiKeysResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectApiKeysResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

func (o LookupProjectApiKeysResultOutput) Results() GetProjectApiKeysResultArrayOutput {
	return o.ApplyT(func(v LookupProjectApiKeysResult) []GetProjectApiKeysResult { return v.Results }).(GetProjectApiKeysResultArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectApiKeysResultOutput{})
}
