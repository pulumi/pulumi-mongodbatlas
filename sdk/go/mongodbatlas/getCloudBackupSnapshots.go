// *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// `getCloudBackupSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the clusterâ€™s cloud service.
//
// > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
func LookupCloudBackupSnapshots(ctx *pulumi.Context, args *LookupCloudBackupSnapshotsArgs, opts ...pulumi.InvokeOption) (*LookupCloudBackupSnapshotsResult, error) {
	var rv LookupCloudBackupSnapshotsResult
	err := ctx.Invoke("mongodbatlas:index/getCloudBackupSnapshots:getCloudBackupSnapshots", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getCloudBackupSnapshots.
type LookupCloudBackupSnapshotsArgs struct {
	// The name of the Atlas cluster that contains the snapshot you want to retrieve.
	ClusterName string `pulumi:"clusterName"`
	// Number of items to return per page, up to a maximum of 500. Defaults to `100`.
	ItemsPerPage *int `pulumi:"itemsPerPage"`
	// The page to return. Defaults to `1`.
	PageNum   *int   `pulumi:"pageNum"`
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getCloudBackupSnapshots.
type LookupCloudBackupSnapshotsResult struct {
	ClusterName string `pulumi:"clusterName"`
	// The provider-assigned unique ID for this managed resource.
	Id           string `pulumi:"id"`
	ItemsPerPage *int   `pulumi:"itemsPerPage"`
	PageNum      *int   `pulumi:"pageNum"`
	ProjectId    string `pulumi:"projectId"`
	// Includes cloudProviderSnapshot object for each item detailed in the results array section.
	Results    []GetCloudBackupSnapshotsResult `pulumi:"results"`
	TotalCount int                             `pulumi:"totalCount"`
}

func LookupCloudBackupSnapshotsOutput(ctx *pulumi.Context, args LookupCloudBackupSnapshotsOutputArgs, opts ...pulumi.InvokeOption) LookupCloudBackupSnapshotsResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupCloudBackupSnapshotsResult, error) {
			args := v.(LookupCloudBackupSnapshotsArgs)
			r, err := LookupCloudBackupSnapshots(ctx, &args, opts...)
			return *r, err
		}).(LookupCloudBackupSnapshotsResultOutput)
}

// A collection of arguments for invoking getCloudBackupSnapshots.
type LookupCloudBackupSnapshotsOutputArgs struct {
	// The name of the Atlas cluster that contains the snapshot you want to retrieve.
	ClusterName pulumi.StringInput `pulumi:"clusterName"`
	// Number of items to return per page, up to a maximum of 500. Defaults to `100`.
	ItemsPerPage pulumi.IntPtrInput `pulumi:"itemsPerPage"`
	// The page to return. Defaults to `1`.
	PageNum   pulumi.IntPtrInput `pulumi:"pageNum"`
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupCloudBackupSnapshotsOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudBackupSnapshotsArgs)(nil)).Elem()
}

// A collection of values returned by getCloudBackupSnapshots.
type LookupCloudBackupSnapshotsResultOutput struct{ *pulumi.OutputState }

func (LookupCloudBackupSnapshotsResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupCloudBackupSnapshotsResult)(nil)).Elem()
}

func (o LookupCloudBackupSnapshotsResultOutput) ToLookupCloudBackupSnapshotsResultOutput() LookupCloudBackupSnapshotsResultOutput {
	return o
}

func (o LookupCloudBackupSnapshotsResultOutput) ToLookupCloudBackupSnapshotsResultOutputWithContext(ctx context.Context) LookupCloudBackupSnapshotsResultOutput {
	return o
}

func (o LookupCloudBackupSnapshotsResultOutput) ClusterName() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotsResult) string { return v.ClusterName }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupCloudBackupSnapshotsResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotsResult) string { return v.Id }).(pulumi.StringOutput)
}

func (o LookupCloudBackupSnapshotsResultOutput) ItemsPerPage() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotsResult) *int { return v.ItemsPerPage }).(pulumi.IntPtrOutput)
}

func (o LookupCloudBackupSnapshotsResultOutput) PageNum() pulumi.IntPtrOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotsResult) *int { return v.PageNum }).(pulumi.IntPtrOutput)
}

func (o LookupCloudBackupSnapshotsResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotsResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Includes cloudProviderSnapshot object for each item detailed in the results array section.
func (o LookupCloudBackupSnapshotsResultOutput) Results() GetCloudBackupSnapshotsResultArrayOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotsResult) []GetCloudBackupSnapshotsResult { return v.Results }).(GetCloudBackupSnapshotsResultArrayOutput)
}

func (o LookupCloudBackupSnapshotsResultOutput) TotalCount() pulumi.IntOutput {
	return o.ApplyT(func(v LookupCloudBackupSnapshotsResult) int { return v.TotalCount }).(pulumi.IntOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupCloudBackupSnapshotsResultOutput{})
}
