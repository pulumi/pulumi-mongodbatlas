// Code generated by the Pulumi Terraform Bridge (tfgen) Tool DO NOT EDIT.
// *** WARNING: Do not edit by hand unless you're certain you know what you are doing! ***

package mongodbatlas

import (
	"context"
	"reflect"

	"github.com/pulumi/pulumi-mongodbatlas/sdk/v3/go/mongodbatlas/internal"
	"github.com/pulumi/pulumi/sdk/v3/go/pulumi"
)

// ## Example Usage
func LookupProjectApiKey(ctx *pulumi.Context, args *LookupProjectApiKeyArgs, opts ...pulumi.InvokeOption) (*LookupProjectApiKeyResult, error) {
	opts = internal.PkgInvokeDefaultOpts(opts)
	var rv LookupProjectApiKeyResult
	err := ctx.Invoke("mongodbatlas:index/getProjectApiKey:getProjectApiKey", args, &rv, opts...)
	if err != nil {
		return nil, err
	}
	return &rv, nil
}

// A collection of arguments for invoking getProjectApiKey.
type LookupProjectApiKeyArgs struct {
	ApiKeyId string `pulumi:"apiKeyId"`
	// The unique ID for the project.
	ProjectId string `pulumi:"projectId"`
}

// A collection of values returned by getProjectApiKey.
type LookupProjectApiKeyResult struct {
	ApiKeyId string `pulumi:"apiKeyId"`
	// Description of this Project API key.
	Description string `pulumi:"description"`
	// The provider-assigned unique ID for this managed resource.
	Id string `pulumi:"id"`
	// Private key for this Organization API key.
	PrivateKey string `pulumi:"privateKey"`
	// Unique identifier for the project whose API keys you want to retrieve. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
	ProjectId string `pulumi:"projectId"`
	// Public key for this Organization API key.
	PublicKey string `pulumi:"publicKey"`
	// Name of the role. This resource returns all the roles the user has in Atlas.
	// The following are valid roles:
	RoleNames []string `pulumi:"roleNames"`
}

func LookupProjectApiKeyOutput(ctx *pulumi.Context, args LookupProjectApiKeyOutputArgs, opts ...pulumi.InvokeOption) LookupProjectApiKeyResultOutput {
	return pulumi.ToOutputWithContext(context.Background(), args).
		ApplyT(func(v interface{}) (LookupProjectApiKeyResult, error) {
			args := v.(LookupProjectApiKeyArgs)
			r, err := LookupProjectApiKey(ctx, &args, opts...)
			var s LookupProjectApiKeyResult
			if r != nil {
				s = *r
			}
			return s, err
		}).(LookupProjectApiKeyResultOutput)
}

// A collection of arguments for invoking getProjectApiKey.
type LookupProjectApiKeyOutputArgs struct {
	ApiKeyId pulumi.StringInput `pulumi:"apiKeyId"`
	// The unique ID for the project.
	ProjectId pulumi.StringInput `pulumi:"projectId"`
}

func (LookupProjectApiKeyOutputArgs) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectApiKeyArgs)(nil)).Elem()
}

// A collection of values returned by getProjectApiKey.
type LookupProjectApiKeyResultOutput struct{ *pulumi.OutputState }

func (LookupProjectApiKeyResultOutput) ElementType() reflect.Type {
	return reflect.TypeOf((*LookupProjectApiKeyResult)(nil)).Elem()
}

func (o LookupProjectApiKeyResultOutput) ToLookupProjectApiKeyResultOutput() LookupProjectApiKeyResultOutput {
	return o
}

func (o LookupProjectApiKeyResultOutput) ToLookupProjectApiKeyResultOutputWithContext(ctx context.Context) LookupProjectApiKeyResultOutput {
	return o
}

func (o LookupProjectApiKeyResultOutput) ApiKeyId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectApiKeyResult) string { return v.ApiKeyId }).(pulumi.StringOutput)
}

// Description of this Project API key.
func (o LookupProjectApiKeyResultOutput) Description() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectApiKeyResult) string { return v.Description }).(pulumi.StringOutput)
}

// The provider-assigned unique ID for this managed resource.
func (o LookupProjectApiKeyResultOutput) Id() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectApiKeyResult) string { return v.Id }).(pulumi.StringOutput)
}

// Private key for this Organization API key.
func (o LookupProjectApiKeyResultOutput) PrivateKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectApiKeyResult) string { return v.PrivateKey }).(pulumi.StringOutput)
}

// Unique identifier for the project whose API keys you want to retrieve. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
func (o LookupProjectApiKeyResultOutput) ProjectId() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectApiKeyResult) string { return v.ProjectId }).(pulumi.StringOutput)
}

// Public key for this Organization API key.
func (o LookupProjectApiKeyResultOutput) PublicKey() pulumi.StringOutput {
	return o.ApplyT(func(v LookupProjectApiKeyResult) string { return v.PublicKey }).(pulumi.StringOutput)
}

// Name of the role. This resource returns all the roles the user has in Atlas.
// The following are valid roles:
func (o LookupProjectApiKeyResultOutput) RoleNames() pulumi.StringArrayOutput {
	return o.ApplyT(func(v LookupProjectApiKeyResult) []string { return v.RoleNames }).(pulumi.StringArrayOutput)
}

func init() {
	pulumi.RegisterOutputType(LookupProjectApiKeyResultOutput{})
}
