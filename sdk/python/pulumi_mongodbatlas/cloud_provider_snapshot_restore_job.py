# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class CloudProviderSnapshotRestoreJob(pulumi.CustomResource):
    cancelled: pulumi.Output[bool]
    """
    Indicates whether the restore job was canceled.
    """
    cluster_name: pulumi.Output[str]
    """
    The name of the Atlas cluster whose snapshot you want to restore.
    """
    created_at: pulumi.Output[str]
    """
    UTC ISO 8601 formatted point in time when Atlas created the restore job.
    """
    delivery_type: pulumi.Output[dict]
    """
    Type of restore job to create. Possible values are: **download** or **automated**, only one must be set it in ``true``.

      * `automated` (`bool`)
      * `download` (`bool`)
      * `oplog_inc` (`float`)
      * `oplog_ts` (`float`)
      * `point_in_time` (`bool`)
      * `point_in_time_utc_seconds` (`float`)
      * `target_cluster_name` (`str`) - Name of the target Atlas cluster to which the restore job restores the snapshot. Only required if deliveryType is automated.
      * `target_project_id` (`str`)
    """
    delivery_urls: pulumi.Output[list]
    """
    One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.
    """
    expired: pulumi.Output[bool]
    """
    Indicates whether the restore job expired.
    """
    expires_at: pulumi.Output[str]
    """
    UTC ISO 8601 formatted point in time when the restore job expires.
    """
    finished_at: pulumi.Output[str]
    """
    UTC ISO 8601 formatted point in time when the restore job completed.
    """
    project_id: pulumi.Output[str]
    """
    The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.
    """
    snapshot_id: pulumi.Output[str]
    """
    Unique identifier of the snapshot to restore.
    """
    snapshot_restore_job_id: pulumi.Output[str]
    """
    The unique identifier of the restore job.
    """
    timestamp: pulumi.Output[str]
    """
    Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.
    """
    def __init__(__self__, resource_name, opts=None, cluster_name=None, delivery_type=None, project_id=None, snapshot_id=None, __props__=None, __name__=None, __opts__=None):
        """
        `.CloudProviderSnapshotRestoreJob` provides a resource to create a new restore job from a cloud backup snapshot of a specified cluster. The restore job can be one of three types: 
        * **automated:** Atlas automatically restores the snapshot with snapshotId to the Atlas cluster with name targetClusterName in the Atlas project with targetGroupId.

        * **download:** Atlas provides a URL to download a .tar.gz of the snapshot with snapshotId. The contents of the archive contain the data files for your Atlas cluster.

        * **pointInTime:**  Atlas performs a Continuous Cloud Backup restore.

        > **Important:** If you specify `deliveryType` : `automated` or `deliveryType` : `pointInTime` in your request body to create an automated restore job, Atlas removes all existing data on the target cluster prior to the restore.

        > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.

        ## Example Usage

        ### Example automated delivery type.

        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        my_cluster = mongodbatlas.Cluster("myCluster",
            project_id="5cf5a45a9ccf6400e60981b6",
            disk_size_gb=5,
            provider_name="AWS",
            provider_region_name="EU_WEST_2",
            provider_instance_size_name="M10",
            provider_backup_enabled=True,
            provider_disk_iops=100,
            provider_encrypt_ebs_volume=False)
        test_cloud_provider_snapshot = mongodbatlas.CloudProviderSnapshot("testCloudProviderSnapshot",
            project_id=my_cluster.project_id,
            cluster_name=my_cluster.name,
            description="myDescription",
            retention_in_days=1)
        test_cloud_provider_snapshot_restore_job = mongodbatlas.CloudProviderSnapshotRestoreJob("testCloudProviderSnapshotRestoreJob",
            project_id=test_cloud_provider_snapshot.project_id,
            cluster_name=test_cloud_provider_snapshot.cluster_name,
            snapshot_id=test_cloud_provider_snapshot.snapshot_id,
            delivery_type={
                "automated": True,
                "target_cluster_name": "MyCluster",
                "target_project_id": "5cf5a45a9ccf6400e60981b6",
            })
        ```

        ### Example download delivery type.

        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        my_cluster = mongodbatlas.Cluster("myCluster",
            project_id="5cf5a45a9ccf6400e60981b6",
            disk_size_gb=5,
            provider_name="AWS",
            provider_region_name="EU_WEST_2",
            provider_instance_size_name="M10",
            provider_backup_enabled=True,
            provider_disk_iops=100,
            provider_encrypt_ebs_volume=False)
        test_cloud_provider_snapshot = mongodbatlas.CloudProviderSnapshot("testCloudProviderSnapshot",
            project_id=my_cluster.project_id,
            cluster_name=my_cluster.name,
            description="myDescription",
            retention_in_days=1)
        test_cloud_provider_snapshot_restore_job = mongodbatlas.CloudProviderSnapshotRestoreJob("testCloudProviderSnapshotRestoreJob",
            project_id=test_cloud_provider_snapshot.project_id,
            cluster_name=test_cloud_provider_snapshot.cluster_name,
            snapshot_id=test_cloud_provider_snapshot.snapshot_id,
            delivery_type={
                "download": True,
            })
        ```


        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_name: The name of the Atlas cluster whose snapshot you want to restore.
        :param pulumi.Input[dict] delivery_type: Type of restore job to create. Possible values are: **download** or **automated**, only one must be set it in ``true``.
        :param pulumi.Input[str] project_id: The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.
        :param pulumi.Input[str] snapshot_id: Unique identifier of the snapshot to restore.

        The **delivery_type** object supports the following:

          * `automated` (`pulumi.Input[bool]`)
          * `download` (`pulumi.Input[bool]`)
          * `oplog_inc` (`pulumi.Input[float]`)
          * `oplog_ts` (`pulumi.Input[float]`)
          * `point_in_time` (`pulumi.Input[bool]`)
          * `point_in_time_utc_seconds` (`pulumi.Input[float]`)
          * `target_cluster_name` (`pulumi.Input[str]`) - Name of the target Atlas cluster to which the restore job restores the snapshot. Only required if deliveryType is automated.
          * `target_project_id` (`pulumi.Input[str]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if cluster_name is None:
                raise TypeError("Missing required property 'cluster_name'")
            __props__['cluster_name'] = cluster_name
            if delivery_type is None:
                raise TypeError("Missing required property 'delivery_type'")
            __props__['delivery_type'] = delivery_type
            if project_id is None:
                raise TypeError("Missing required property 'project_id'")
            __props__['project_id'] = project_id
            if snapshot_id is None:
                raise TypeError("Missing required property 'snapshot_id'")
            __props__['snapshot_id'] = snapshot_id
            __props__['cancelled'] = None
            __props__['created_at'] = None
            __props__['delivery_urls'] = None
            __props__['expired'] = None
            __props__['expires_at'] = None
            __props__['finished_at'] = None
            __props__['snapshot_restore_job_id'] = None
            __props__['timestamp'] = None
        super(CloudProviderSnapshotRestoreJob, __self__).__init__(
            'mongodbatlas:index/cloudProviderSnapshotRestoreJob:CloudProviderSnapshotRestoreJob',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, cancelled=None, cluster_name=None, created_at=None, delivery_type=None, delivery_urls=None, expired=None, expires_at=None, finished_at=None, project_id=None, snapshot_id=None, snapshot_restore_job_id=None, timestamp=None):
        """
        Get an existing CloudProviderSnapshotRestoreJob resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] cancelled: Indicates whether the restore job was canceled.
        :param pulumi.Input[str] cluster_name: The name of the Atlas cluster whose snapshot you want to restore.
        :param pulumi.Input[str] created_at: UTC ISO 8601 formatted point in time when Atlas created the restore job.
        :param pulumi.Input[dict] delivery_type: Type of restore job to create. Possible values are: **download** or **automated**, only one must be set it in ``true``.
        :param pulumi.Input[list] delivery_urls: One or more URLs for the compressed snapshot files for manual download. Only visible if deliveryType is download.
        :param pulumi.Input[bool] expired: Indicates whether the restore job expired.
        :param pulumi.Input[str] expires_at: UTC ISO 8601 formatted point in time when the restore job expires.
        :param pulumi.Input[str] finished_at: UTC ISO 8601 formatted point in time when the restore job completed.
        :param pulumi.Input[str] project_id: The unique identifier of the project for the Atlas cluster whose snapshot you want to restore.
        :param pulumi.Input[str] snapshot_id: Unique identifier of the snapshot to restore.
        :param pulumi.Input[str] snapshot_restore_job_id: The unique identifier of the restore job.
        :param pulumi.Input[str] timestamp: Timestamp in ISO 8601 date and time format in UTC when the snapshot associated to snapshotId was taken.

        The **delivery_type** object supports the following:

          * `automated` (`pulumi.Input[bool]`)
          * `download` (`pulumi.Input[bool]`)
          * `oplog_inc` (`pulumi.Input[float]`)
          * `oplog_ts` (`pulumi.Input[float]`)
          * `point_in_time` (`pulumi.Input[bool]`)
          * `point_in_time_utc_seconds` (`pulumi.Input[float]`)
          * `target_cluster_name` (`pulumi.Input[str]`) - Name of the target Atlas cluster to which the restore job restores the snapshot. Only required if deliveryType is automated.
          * `target_project_id` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["cancelled"] = cancelled
        __props__["cluster_name"] = cluster_name
        __props__["created_at"] = created_at
        __props__["delivery_type"] = delivery_type
        __props__["delivery_urls"] = delivery_urls
        __props__["expired"] = expired
        __props__["expires_at"] = expires_at
        __props__["finished_at"] = finished_at
        __props__["project_id"] = project_id
        __props__["snapshot_id"] = snapshot_id
        __props__["snapshot_restore_job_id"] = snapshot_restore_job_id
        __props__["timestamp"] = timestamp
        return CloudProviderSnapshotRestoreJob(resource_name, opts=opts, __props__=__props__)
    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

