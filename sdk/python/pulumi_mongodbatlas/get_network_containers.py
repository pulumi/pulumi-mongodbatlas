# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetNetworkContainersResult:
    """
    A collection of values returned by getNetworkContainers.
    """
    def __init__(__self__, id=None, project_id=None, provider_name=None, results=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        __self__.project_id = project_id
        if provider_name and not isinstance(provider_name, str):
            raise TypeError("Expected argument 'provider_name' to be a str")
        __self__.provider_name = provider_name
        """
        Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
        """
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        __self__.results = results
        """
        A list where each represents a Network Peering Container.
        """
class AwaitableGetNetworkContainersResult(GetNetworkContainersResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkContainersResult(
            id=self.id,
            project_id=self.project_id,
            provider_name=self.provider_name,
            results=self.results)

def get_network_containers(project_id=None,provider_name=None,opts=None):
    """
    `getNetworkContainers` describes all Network Peering Containers. The data source requires your Project ID.

    > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.

    ## Example Usage
    ### Basic Example.

    ```python
    import pulumi
    import pulumi_mongodbatlas as mongodbatlas

    test_network_container = mongodbatlas.NetworkContainer("testNetworkContainer",
        project_id="<YOUR-PROJECT-ID>",
        atlas_cidr_block="10.8.0.0/21",
        provider_name="AWS",
        region_name="US_EAST_1")
    test_network_containers = pulumi.Output.all(test_network_container.project_id, test_network_container.provider_name).apply(lambda project_id, provider_name: mongodbatlas.get_network_containers(project_id=project_id,
        provider_name=provider_name))
    ```


    :param str project_id: The unique ID for the project to create the database user.
    :param str provider_name: Cloud provider for this Network peering container. Accepted values are AWS, GCP, and Azure.
    """
    __args__ = dict()


    __args__['projectId'] = project_id
    __args__['providerName'] = provider_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getNetworkContainers:getNetworkContainers', __args__, opts=opts).value

    return AwaitableGetNetworkContainersResult(
        id=__ret__.get('id'),
        project_id=__ret__.get('projectId'),
        provider_name=__ret__.get('providerName'),
        results=__ret__.get('results'))
