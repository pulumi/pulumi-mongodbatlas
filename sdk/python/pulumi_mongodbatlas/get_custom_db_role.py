# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetCustomDbRoleResult:
    """
    A collection of values returned by getCustomDbRole.
    """
    def __init__(__self__, actions=None, id=None, inherited_roles=None, project_id=None, role_name=None):
        if actions and not isinstance(actions, list):
            raise TypeError("Expected argument 'actions' to be a list")
        __self__.actions = actions
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if inherited_roles and not isinstance(inherited_roles, list):
            raise TypeError("Expected argument 'inherited_roles' to be a list")
        __self__.inherited_roles = inherited_roles
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        __self__.project_id = project_id
        if role_name and not isinstance(role_name, str):
            raise TypeError("Expected argument 'role_name' to be a str")
        __self__.role_name = role_name
class AwaitableGetCustomDbRoleResult(GetCustomDbRoleResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCustomDbRoleResult(
            actions=self.actions,
            id=self.id,
            inherited_roles=self.inherited_roles,
            project_id=self.project_id,
            role_name=self.role_name)

def get_custom_db_role(inherited_roles=None,project_id=None,role_name=None,opts=None):
    """
    `CustomDbRole` describe a Custom DB Role. This represents a custom db role.

    > **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.

    ## Example Usage

    ```python
    import pulumi
    import pulumi_mongodbatlas as mongodbatlas

    test_role = mongodbatlas.CustomDbRole("testRole",
        actions=[
            {
                "action": "UPDATE",
                "resources": [{
                    "collectionName": "",
                    "database_name": "anyDatabase",
                }],
            },
            {
                "action": "INSERT",
                "resources": [{
                    "collectionName": "",
                    "database_name": "anyDatabase",
                }],
            },
        ],
        project_id="<PROJECT-ID>",
        role_name="myCustomRole")
    test = pulumi.Output.all(test_role.project_id, test_role.role_name).apply(lambda project_id, role_name: mongodbatlas.get_custom_db_role(project_id=project_id,
        role_name=role_name))
    ```


    :param str project_id: The unique ID for the project to create the database user.
    :param str role_name: Name of the custom role.

    The **inherited_roles** object supports the following:

      * `database_name` (`str`)
      * `role_name` (`str`) - Name of the custom role.
    """
    __args__ = dict()


    __args__['inheritedRoles'] = inherited_roles
    __args__['projectId'] = project_id
    __args__['roleName'] = role_name
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getCustomDbRole:getCustomDbRole', __args__, opts=opts).value

    return AwaitableGetCustomDbRoleResult(
        actions=__ret__.get('actions'),
        id=__ret__.get('id'),
        inherited_roles=__ret__.get('inheritedRoles'),
        project_id=__ret__.get('projectId'),
        role_name=__ret__.get('roleName'))
