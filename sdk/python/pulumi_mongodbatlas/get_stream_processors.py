# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetStreamProcessorsResult',
    'AwaitableGetStreamProcessorsResult',
    'get_stream_processors',
    'get_stream_processors_output',
]

@pulumi.output_type
class GetStreamProcessorsResult:
    """
    A collection of values returned by getStreamProcessors.
    """
    def __init__(__self__, id=None, instance_name=None, project_id=None, results=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if instance_name and not isinstance(instance_name, str):
            raise TypeError("Expected argument 'instance_name' to be a str")
        pulumi.set(__self__, "instance_name", instance_name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="instanceName")
    def instance_name(self) -> str:
        """
        Human-readable label that identifies the stream instance.
        """
        return pulumi.get(self, "instance_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetStreamProcessorsResultResult']:
        return pulumi.get(self, "results")


class AwaitableGetStreamProcessorsResult(GetStreamProcessorsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetStreamProcessorsResult(
            id=self.id,
            instance_name=self.instance_name,
            project_id=self.project_id,
            results=self.results)


def get_stream_processors(instance_name: Optional[str] = None,
                          project_id: Optional[str] = None,
                          opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetStreamProcessorsResult:
    """
    ## # Data Source: get_stream_processors

    `get_stream_processors` returns all stream processors in a stream instance.

    ## Example Usage

    ### S
    ```python
    import pulumi
    import json
    import pulumi_mongodbatlas as mongodbatlas

    example = mongodbatlas.StreamInstance("example",
        project_id=project_id,
        instance_name="InstanceName",
        data_process_region={
            "region": "VIRGINIA_USA",
            "cloud_provider": "AWS",
        })
    example_sample = mongodbatlas.StreamConnection("example-sample",
        project_id=project_id,
        instance_name=example.instance_name,
        connection_name="sample_stream_solar",
        type="Sample")
    example_cluster = mongodbatlas.StreamConnection("example-cluster",
        project_id=project_id,
        instance_name=example.instance_name,
        connection_name="ClusterConnection",
        type="Cluster",
        cluster_name=cluster_name,
        db_role_to_execute={
            "role": "atlasAdmin",
            "type": "BUILT_IN",
        })
    example_kafka = mongodbatlas.StreamConnection("example-kafka",
        project_id=project_id,
        instance_name=example.instance_name,
        connection_name="KafkaPlaintextConnection",
        type="Kafka",
        authentication={
            "mechanism": "PLAIN",
            "username": kafka_username,
            "password": kafka_password,
        },
        bootstrap_servers="localhost:9092,localhost:9092",
        config={
            "auto.offset.reset": "earliest",
        },
        security={
            "protocol": "PLAINTEXT",
        })
    stream_processor_sample_example = mongodbatlas.StreamProcessor("stream-processor-sample-example",
        project_id=project_id,
        instance_name=example.instance_name,
        processor_name="sampleProcessorName",
        pipeline=json.dumps([
            {
                "$source": {
                    "connectionName": mongodbatlas_stream_connection["example-sample"]["connectionName"],
                },
            },
            {
                "$emit": {
                    "connectionName": mongodbatlas_stream_connection["example-cluster"]["connectionName"],
                    "db": "sample",
                    "coll": "solar",
                    "timeseries": {
                        "timeField": "_ts",
                    },
                },
            },
        ]),
        state="STARTED")
    stream_processor_cluster_to_kafka_example = mongodbatlas.StreamProcessor("stream-processor-cluster-to-kafka-example",
        project_id=project_id,
        instance_name=example.instance_name,
        processor_name="clusterProcessorName",
        pipeline=json.dumps([
            {
                "$source": {
                    "connectionName": mongodbatlas_stream_connection["example-cluster"]["connectionName"],
                },
            },
            {
                "$emit": {
                    "connectionName": mongodbatlas_stream_connection["example-kafka"]["connectionName"],
                    "topic": "topic_from_cluster",
                },
            },
        ]),
        state="CREATED")
    stream_processor_kafka_to_cluster_example = mongodbatlas.StreamProcessor("stream-processor-kafka-to-cluster-example",
        project_id=project_id,
        instance_name=example.instance_name,
        processor_name="kafkaProcessorName",
        pipeline=json.dumps([
            {
                "$source": {
                    "connectionName": mongodbatlas_stream_connection["example-kafka"]["connectionName"],
                    "topic": "topic_source",
                },
            },
            {
                "$emit": {
                    "connectionName": mongodbatlas_stream_connection["example-cluster"]["connectionName"],
                    "db": "kafka",
                    "coll": "topic_source",
                    "timeseries": {
                        "timeField": "ts",
                    },
                },
            },
        ]),
        state="CREATED",
        options={
            "dlq": {
                "coll": "exampleColumn",
                "connection_name": mongodbatlas_stream_connection["example-cluster"]["connectionName"],
                "db": "exampleDb",
            },
        })
    example_stream_processors = example.instance_name.apply(lambda instance_name: mongodbatlas.get_stream_processors_output(project_id=project_id,
        instance_name=instance_name))
    example_stream_processor = pulumi.Output.all(
        instance_name=example.instance_name,
        processor_name=stream_processor_sample_example.processor_name
    ).apply(lambda resolved_outputs: mongodbatlas.get_stream_processor_output(project_id=project_id,
        instance_name=resolved_outputs['instance_name'],
        processor_name=resolved_outputs['processor_name']))

    pulumi.export("streamProcessorsState", example_stream_processor.state)
    pulumi.export("streamProcessorsResults", example_stream_processors.results)
    ```


    :param str instance_name: Human-readable label that identifies the stream instance.
    :param str project_id: Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
    """
    __args__ = dict()
    __args__['instanceName'] = instance_name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getStreamProcessors:getStreamProcessors', __args__, opts=opts, typ=GetStreamProcessorsResult).value

    return AwaitableGetStreamProcessorsResult(
        id=pulumi.get(__ret__, 'id'),
        instance_name=pulumi.get(__ret__, 'instance_name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        results=pulumi.get(__ret__, 'results'))
def get_stream_processors_output(instance_name: Optional[pulumi.Input[str]] = None,
                                 project_id: Optional[pulumi.Input[str]] = None,
                                 opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetStreamProcessorsResult]:
    """
    ## # Data Source: get_stream_processors

    `get_stream_processors` returns all stream processors in a stream instance.

    ## Example Usage

    ### S
    ```python
    import pulumi
    import json
    import pulumi_mongodbatlas as mongodbatlas

    example = mongodbatlas.StreamInstance("example",
        project_id=project_id,
        instance_name="InstanceName",
        data_process_region={
            "region": "VIRGINIA_USA",
            "cloud_provider": "AWS",
        })
    example_sample = mongodbatlas.StreamConnection("example-sample",
        project_id=project_id,
        instance_name=example.instance_name,
        connection_name="sample_stream_solar",
        type="Sample")
    example_cluster = mongodbatlas.StreamConnection("example-cluster",
        project_id=project_id,
        instance_name=example.instance_name,
        connection_name="ClusterConnection",
        type="Cluster",
        cluster_name=cluster_name,
        db_role_to_execute={
            "role": "atlasAdmin",
            "type": "BUILT_IN",
        })
    example_kafka = mongodbatlas.StreamConnection("example-kafka",
        project_id=project_id,
        instance_name=example.instance_name,
        connection_name="KafkaPlaintextConnection",
        type="Kafka",
        authentication={
            "mechanism": "PLAIN",
            "username": kafka_username,
            "password": kafka_password,
        },
        bootstrap_servers="localhost:9092,localhost:9092",
        config={
            "auto.offset.reset": "earliest",
        },
        security={
            "protocol": "PLAINTEXT",
        })
    stream_processor_sample_example = mongodbatlas.StreamProcessor("stream-processor-sample-example",
        project_id=project_id,
        instance_name=example.instance_name,
        processor_name="sampleProcessorName",
        pipeline=json.dumps([
            {
                "$source": {
                    "connectionName": mongodbatlas_stream_connection["example-sample"]["connectionName"],
                },
            },
            {
                "$emit": {
                    "connectionName": mongodbatlas_stream_connection["example-cluster"]["connectionName"],
                    "db": "sample",
                    "coll": "solar",
                    "timeseries": {
                        "timeField": "_ts",
                    },
                },
            },
        ]),
        state="STARTED")
    stream_processor_cluster_to_kafka_example = mongodbatlas.StreamProcessor("stream-processor-cluster-to-kafka-example",
        project_id=project_id,
        instance_name=example.instance_name,
        processor_name="clusterProcessorName",
        pipeline=json.dumps([
            {
                "$source": {
                    "connectionName": mongodbatlas_stream_connection["example-cluster"]["connectionName"],
                },
            },
            {
                "$emit": {
                    "connectionName": mongodbatlas_stream_connection["example-kafka"]["connectionName"],
                    "topic": "topic_from_cluster",
                },
            },
        ]),
        state="CREATED")
    stream_processor_kafka_to_cluster_example = mongodbatlas.StreamProcessor("stream-processor-kafka-to-cluster-example",
        project_id=project_id,
        instance_name=example.instance_name,
        processor_name="kafkaProcessorName",
        pipeline=json.dumps([
            {
                "$source": {
                    "connectionName": mongodbatlas_stream_connection["example-kafka"]["connectionName"],
                    "topic": "topic_source",
                },
            },
            {
                "$emit": {
                    "connectionName": mongodbatlas_stream_connection["example-cluster"]["connectionName"],
                    "db": "kafka",
                    "coll": "topic_source",
                    "timeseries": {
                        "timeField": "ts",
                    },
                },
            },
        ]),
        state="CREATED",
        options={
            "dlq": {
                "coll": "exampleColumn",
                "connection_name": mongodbatlas_stream_connection["example-cluster"]["connectionName"],
                "db": "exampleDb",
            },
        })
    example_stream_processors = example.instance_name.apply(lambda instance_name: mongodbatlas.get_stream_processors_output(project_id=project_id,
        instance_name=instance_name))
    example_stream_processor = pulumi.Output.all(
        instance_name=example.instance_name,
        processor_name=stream_processor_sample_example.processor_name
    ).apply(lambda resolved_outputs: mongodbatlas.get_stream_processor_output(project_id=project_id,
        instance_name=resolved_outputs['instance_name'],
        processor_name=resolved_outputs['processor_name']))

    pulumi.export("streamProcessorsState", example_stream_processor.state)
    pulumi.export("streamProcessorsResults", example_stream_processors.results)
    ```


    :param str instance_name: Human-readable label that identifies the stream instance.
    :param str project_id: Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
    """
    __args__ = dict()
    __args__['instanceName'] = instance_name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('mongodbatlas:index/getStreamProcessors:getStreamProcessors', __args__, opts=opts, typ=GetStreamProcessorsResult)
    return __ret__.apply(lambda __response__: GetStreamProcessorsResult(
        id=pulumi.get(__response__, 'id'),
        instance_name=pulumi.get(__response__, 'instance_name'),
        project_id=pulumi.get(__response__, 'project_id'),
        results=pulumi.get(__response__, 'results')))
