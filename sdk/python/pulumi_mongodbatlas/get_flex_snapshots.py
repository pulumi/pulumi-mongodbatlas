# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetFlexSnapshotsResult',
    'AwaitableGetFlexSnapshotsResult',
    'get_flex_snapshots',
    'get_flex_snapshots_output',
]

@pulumi.output_type
class GetFlexSnapshotsResult:
    """
    A collection of values returned by getFlexSnapshots.
    """
    def __init__(__self__, id=None, name=None, project_id=None, results=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Human-readable label that identifies the flex cluster whose snapshot you want to restore.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        """
        Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetFlexSnapshotsResultResult']:
        return pulumi.get(self, "results")


class AwaitableGetFlexSnapshotsResult(GetFlexSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetFlexSnapshotsResult(
            id=self.id,
            name=self.name,
            project_id=self.project_id,
            results=self.results)


def get_flex_snapshots(name: Optional[str] = None,
                       project_id: Optional[str] = None,
                       opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetFlexSnapshotsResult:
    """
    ## # Data Source: get_flex_snapshots

    `get_flex_snapshots` returns all snapshots of a flex cluster.

    ## Example Usage

    ### S
    ```python
    import pulumi
    import pulumi_mongodbatlas as mongodbatlas

    snapshot = mongodbatlas.get_flex_snapshot(project_id=project_id,
        name=example_cluster["name"],
        snapshot_id=snapshot_id)
    snapshots = mongodbatlas.get_flex_snapshots(project_id=project_id,
        name=example_cluster["name"])
    pulumi.export("mongodbatlasFlexSnapshot", snapshot.name)
    pulumi.export("mongodbatlasFlexSnapshots", [snapshot.snapshot_id for snapshot in snapshots.results])
    ```


    :param str name: Human-readable label that identifies the flex cluster whose snapshot you want to restore.
    :param str project_id: Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getFlexSnapshots:getFlexSnapshots', __args__, opts=opts, typ=GetFlexSnapshotsResult).value

    return AwaitableGetFlexSnapshotsResult(
        id=pulumi.get(__ret__, 'id'),
        name=pulumi.get(__ret__, 'name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        results=pulumi.get(__ret__, 'results'))
def get_flex_snapshots_output(name: Optional[pulumi.Input[str]] = None,
                              project_id: Optional[pulumi.Input[str]] = None,
                              opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetFlexSnapshotsResult]:
    """
    ## # Data Source: get_flex_snapshots

    `get_flex_snapshots` returns all snapshots of a flex cluster.

    ## Example Usage

    ### S
    ```python
    import pulumi
    import pulumi_mongodbatlas as mongodbatlas

    snapshot = mongodbatlas.get_flex_snapshot(project_id=project_id,
        name=example_cluster["name"],
        snapshot_id=snapshot_id)
    snapshots = mongodbatlas.get_flex_snapshots(project_id=project_id,
        name=example_cluster["name"])
    pulumi.export("mongodbatlasFlexSnapshot", snapshot.name)
    pulumi.export("mongodbatlasFlexSnapshots", [snapshot.snapshot_id for snapshot in snapshots.results])
    ```


    :param str name: Human-readable label that identifies the flex cluster whose snapshot you want to restore.
    :param str project_id: Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
    """
    __args__ = dict()
    __args__['name'] = name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('mongodbatlas:index/getFlexSnapshots:getFlexSnapshots', __args__, opts=opts, typ=GetFlexSnapshotsResult)
    return __ret__.apply(lambda __response__: GetFlexSnapshotsResult(
        id=pulumi.get(__response__, 'id'),
        name=pulumi.get(__response__, 'name'),
        project_id=pulumi.get(__response__, 'project_id'),
        results=pulumi.get(__response__, 'results')))
