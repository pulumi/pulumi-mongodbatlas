# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs

__all__ = [
    'GetDataLakePipelineRunsResult',
    'AwaitableGetDataLakePipelineRunsResult',
    'get_data_lake_pipeline_runs',
    'get_data_lake_pipeline_runs_output',
]

@pulumi.output_type
class GetDataLakePipelineRunsResult:
    """
    A collection of values returned by getDataLakePipelineRuns.
    """
    def __init__(__self__, id=None, pipeline_name=None, project_id=None, results=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if pipeline_name and not isinstance(pipeline_name, str):
            raise TypeError("Expected argument 'pipeline_name' to be a str")
        pulumi.set(__self__, "pipeline_name", pipeline_name)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        pulumi.set(__self__, "results", results)

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="pipelineName")
    def pipeline_name(self) -> str:
        return pulumi.get(self, "pipeline_name")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def results(self) -> Sequence['outputs.GetDataLakePipelineRunsResultResult']:
        """
        A list where each represents a Data Lake Pipeline Run.
        """
        return pulumi.get(self, "results")


class AwaitableGetDataLakePipelineRunsResult(GetDataLakePipelineRunsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetDataLakePipelineRunsResult(
            id=self.id,
            pipeline_name=self.pipeline_name,
            project_id=self.project_id,
            results=self.results)


def get_data_lake_pipeline_runs(pipeline_name: Optional[str] = None,
                                project_id: Optional[str] = None,
                                opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetDataLakePipelineRunsResult:
    """
    `get_data_lake_pipeline_run` describe Data Lake Pipeline Runs.

    > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.


    :param str pipeline_name: Human-readable label that identifies the Data Lake Pipeline.
    :param str project_id: Unique 24-hexadecimal digit string that identifies your project.
    """
    __args__ = dict()
    __args__['pipelineName'] = pipeline_name
    __args__['projectId'] = project_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getDataLakePipelineRuns:getDataLakePipelineRuns', __args__, opts=opts, typ=GetDataLakePipelineRunsResult).value

    return AwaitableGetDataLakePipelineRunsResult(
        id=pulumi.get(__ret__, 'id'),
        pipeline_name=pulumi.get(__ret__, 'pipeline_name'),
        project_id=pulumi.get(__ret__, 'project_id'),
        results=pulumi.get(__ret__, 'results'))


@_utilities.lift_output_func(get_data_lake_pipeline_runs)
def get_data_lake_pipeline_runs_output(pipeline_name: Optional[pulumi.Input[str]] = None,
                                       project_id: Optional[pulumi.Input[str]] = None,
                                       opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetDataLakePipelineRunsResult]:
    """
    `get_data_lake_pipeline_run` describe Data Lake Pipeline Runs.

    > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.


    :param str pipeline_name: Human-readable label that identifies the Data Lake Pipeline.
    :param str project_id: Unique 24-hexadecimal digit string that identifies your project.
    """
    ...
