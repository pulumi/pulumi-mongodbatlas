# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetTeamResult:
    """
    A collection of values returned by getTeam.
    """
    def __init__(__self__, id=None, name=None, org_id=None, team_id=None, usernames=None):
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        __self__.name = name
        """
        The name of the team you want to create.
        """
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        __self__.org_id = org_id
        if team_id and not isinstance(team_id, str):
            raise TypeError("Expected argument 'team_id' to be a str")
        __self__.team_id = team_id
        if usernames and not isinstance(usernames, list):
            raise TypeError("Expected argument 'usernames' to be a list")
        __self__.usernames = usernames
        """
        The users who are part of the organization.
        """
class AwaitableGetTeamResult(GetTeamResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetTeamResult(
            id=self.id,
            name=self.name,
            org_id=self.org_id,
            team_id=self.team_id,
            usernames=self.usernames)

def get_team(org_id=None,team_id=None,opts=None):
    """
    `Teams` describes a Team. The resource requires your Organization ID, Project ID and Team ID.

    > **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.


    :param str org_id: The unique identifier for the organization you want to associate the team with.
    :param str team_id: The unique identifier for the team.
    """
    __args__ = dict()


    __args__['orgId'] = org_id
    __args__['teamId'] = team_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getTeam:getTeam', __args__, opts=opts).value

    return AwaitableGetTeamResult(
        id=__ret__.get('id'),
        name=__ret__.get('name'),
        org_id=__ret__.get('orgId'),
        team_id=__ret__.get('teamId'),
        usernames=__ret__.get('usernames'))
