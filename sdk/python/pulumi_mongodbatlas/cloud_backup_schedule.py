# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities
from . import outputs
from ._inputs import *

__all__ = ['CloudBackupScheduleArgs', 'CloudBackupSchedule']

@pulumi.input_type
class CloudBackupScheduleArgs:
    def __init__(__self__, *,
                 cluster_name: pulumi.Input[str],
                 project_id: pulumi.Input[str],
                 auto_export_enabled: Optional[pulumi.Input[bool]] = None,
                 copy_settings: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupScheduleCopySettingArgs']]]] = None,
                 export: Optional[pulumi.Input['CloudBackupScheduleExportArgs']] = None,
                 policy_item_daily: Optional[pulumi.Input['CloudBackupSchedulePolicyItemDailyArgs']] = None,
                 policy_item_hourly: Optional[pulumi.Input['CloudBackupSchedulePolicyItemHourlyArgs']] = None,
                 policy_item_monthlies: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemMonthlyArgs']]]] = None,
                 policy_item_weeklies: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemWeeklyArgs']]]] = None,
                 reference_hour_of_day: Optional[pulumi.Input[int]] = None,
                 reference_minute_of_hour: Optional[pulumi.Input[int]] = None,
                 restore_window_days: Optional[pulumi.Input[int]] = None,
                 update_snapshots: Optional[pulumi.Input[bool]] = None,
                 use_org_and_group_names_in_export_prefix: Optional[pulumi.Input[bool]] = None):
        """
        The set of arguments for constructing a CloudBackupSchedule resource.
        :param pulumi.Input[str] cluster_name: The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
        :param pulumi.Input[str] project_id: The unique identifier of the project for the Atlas cluster.
        :param pulumi.Input[bool] auto_export_enabled: Flag that indicates whether automatic export of cloud backup snapshots to the AWS bucket is enabled. Value can be one of the following:
               
               true - enables automatic export of cloud backup snapshots to the AWS bucket
               false - disables automatic export of cloud backup snapshots to the AWS bucket (default)
        :param pulumi.Input['CloudBackupSchedulePolicyItemDailyArgs'] policy_item_daily: Daily policy item
        :param pulumi.Input['CloudBackupSchedulePolicyItemHourlyArgs'] policy_item_hourly: Hourly policy item
        :param pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemMonthlyArgs']]] policy_item_monthlies: Monthly policy item
        :param pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemWeeklyArgs']]] policy_item_weeklies: Weekly policy item
        :param pulumi.Input[int] reference_hour_of_day: UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
        :param pulumi.Input[int] reference_minute_of_hour: UTC Minutes after `reference_hour_of_day` that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
        :param pulumi.Input[int] restore_window_days: Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
        :param pulumi.Input[bool] use_org_and_group_names_in_export_prefix: Specify true to use organization and project names instead of organization and project UUIDs in the path for the metadata files that Atlas uploads to your S3 bucket after it finishes exporting the snapshots. To learn more about the metadata files that Atlas uploads, see [Export Cloud Backup Snapshot](https://www.mongodb.com/docs/atlas/backup/cloud-backup/export/#std-label-cloud-provider-snapshot-export).
        """
        CloudBackupScheduleArgs._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            cluster_name=cluster_name,
            project_id=project_id,
            auto_export_enabled=auto_export_enabled,
            copy_settings=copy_settings,
            export=export,
            policy_item_daily=policy_item_daily,
            policy_item_hourly=policy_item_hourly,
            policy_item_monthlies=policy_item_monthlies,
            policy_item_weeklies=policy_item_weeklies,
            reference_hour_of_day=reference_hour_of_day,
            reference_minute_of_hour=reference_minute_of_hour,
            restore_window_days=restore_window_days,
            update_snapshots=update_snapshots,
            use_org_and_group_names_in_export_prefix=use_org_and_group_names_in_export_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             cluster_name: pulumi.Input[str],
             project_id: pulumi.Input[str],
             auto_export_enabled: Optional[pulumi.Input[bool]] = None,
             copy_settings: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupScheduleCopySettingArgs']]]] = None,
             export: Optional[pulumi.Input['CloudBackupScheduleExportArgs']] = None,
             policy_item_daily: Optional[pulumi.Input['CloudBackupSchedulePolicyItemDailyArgs']] = None,
             policy_item_hourly: Optional[pulumi.Input['CloudBackupSchedulePolicyItemHourlyArgs']] = None,
             policy_item_monthlies: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemMonthlyArgs']]]] = None,
             policy_item_weeklies: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemWeeklyArgs']]]] = None,
             reference_hour_of_day: Optional[pulumi.Input[int]] = None,
             reference_minute_of_hour: Optional[pulumi.Input[int]] = None,
             restore_window_days: Optional[pulumi.Input[int]] = None,
             update_snapshots: Optional[pulumi.Input[bool]] = None,
             use_org_and_group_names_in_export_prefix: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        _setter("cluster_name", cluster_name)
        _setter("project_id", project_id)
        if auto_export_enabled is not None:
            _setter("auto_export_enabled", auto_export_enabled)
        if copy_settings is not None:
            _setter("copy_settings", copy_settings)
        if export is not None:
            _setter("export", export)
        if policy_item_daily is not None:
            _setter("policy_item_daily", policy_item_daily)
        if policy_item_hourly is not None:
            _setter("policy_item_hourly", policy_item_hourly)
        if policy_item_monthlies is not None:
            _setter("policy_item_monthlies", policy_item_monthlies)
        if policy_item_weeklies is not None:
            _setter("policy_item_weeklies", policy_item_weeklies)
        if reference_hour_of_day is not None:
            _setter("reference_hour_of_day", reference_hour_of_day)
        if reference_minute_of_hour is not None:
            _setter("reference_minute_of_hour", reference_minute_of_hour)
        if restore_window_days is not None:
            _setter("restore_window_days", restore_window_days)
        if update_snapshots is not None:
            _setter("update_snapshots", update_snapshots)
        if use_org_and_group_names_in_export_prefix is not None:
            _setter("use_org_and_group_names_in_export_prefix", use_org_and_group_names_in_export_prefix)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Input[str]:
        """
        The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: pulumi.Input[str]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Input[str]:
        """
        The unique identifier of the project for the Atlas cluster.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: pulumi.Input[str]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="autoExportEnabled")
    def auto_export_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag that indicates whether automatic export of cloud backup snapshots to the AWS bucket is enabled. Value can be one of the following:

        true - enables automatic export of cloud backup snapshots to the AWS bucket
        false - disables automatic export of cloud backup snapshots to the AWS bucket (default)
        """
        return pulumi.get(self, "auto_export_enabled")

    @auto_export_enabled.setter
    def auto_export_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_export_enabled", value)

    @property
    @pulumi.getter(name="copySettings")
    def copy_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupScheduleCopySettingArgs']]]]:
        return pulumi.get(self, "copy_settings")

    @copy_settings.setter
    def copy_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupScheduleCopySettingArgs']]]]):
        pulumi.set(self, "copy_settings", value)

    @property
    @pulumi.getter
    def export(self) -> Optional[pulumi.Input['CloudBackupScheduleExportArgs']]:
        return pulumi.get(self, "export")

    @export.setter
    def export(self, value: Optional[pulumi.Input['CloudBackupScheduleExportArgs']]):
        pulumi.set(self, "export", value)

    @property
    @pulumi.getter(name="policyItemDaily")
    def policy_item_daily(self) -> Optional[pulumi.Input['CloudBackupSchedulePolicyItemDailyArgs']]:
        """
        Daily policy item
        """
        return pulumi.get(self, "policy_item_daily")

    @policy_item_daily.setter
    def policy_item_daily(self, value: Optional[pulumi.Input['CloudBackupSchedulePolicyItemDailyArgs']]):
        pulumi.set(self, "policy_item_daily", value)

    @property
    @pulumi.getter(name="policyItemHourly")
    def policy_item_hourly(self) -> Optional[pulumi.Input['CloudBackupSchedulePolicyItemHourlyArgs']]:
        """
        Hourly policy item
        """
        return pulumi.get(self, "policy_item_hourly")

    @policy_item_hourly.setter
    def policy_item_hourly(self, value: Optional[pulumi.Input['CloudBackupSchedulePolicyItemHourlyArgs']]):
        pulumi.set(self, "policy_item_hourly", value)

    @property
    @pulumi.getter(name="policyItemMonthlies")
    def policy_item_monthlies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemMonthlyArgs']]]]:
        """
        Monthly policy item
        """
        return pulumi.get(self, "policy_item_monthlies")

    @policy_item_monthlies.setter
    def policy_item_monthlies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemMonthlyArgs']]]]):
        pulumi.set(self, "policy_item_monthlies", value)

    @property
    @pulumi.getter(name="policyItemWeeklies")
    def policy_item_weeklies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemWeeklyArgs']]]]:
        """
        Weekly policy item
        """
        return pulumi.get(self, "policy_item_weeklies")

    @policy_item_weeklies.setter
    def policy_item_weeklies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemWeeklyArgs']]]]):
        pulumi.set(self, "policy_item_weeklies", value)

    @property
    @pulumi.getter(name="referenceHourOfDay")
    def reference_hour_of_day(self) -> Optional[pulumi.Input[int]]:
        """
        UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
        """
        return pulumi.get(self, "reference_hour_of_day")

    @reference_hour_of_day.setter
    def reference_hour_of_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_hour_of_day", value)

    @property
    @pulumi.getter(name="referenceMinuteOfHour")
    def reference_minute_of_hour(self) -> Optional[pulumi.Input[int]]:
        """
        UTC Minutes after `reference_hour_of_day` that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
        """
        return pulumi.get(self, "reference_minute_of_hour")

    @reference_minute_of_hour.setter
    def reference_minute_of_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_minute_of_hour", value)

    @property
    @pulumi.getter(name="restoreWindowDays")
    def restore_window_days(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
        """
        return pulumi.get(self, "restore_window_days")

    @restore_window_days.setter
    def restore_window_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restore_window_days", value)

    @property
    @pulumi.getter(name="updateSnapshots")
    def update_snapshots(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "update_snapshots")

    @update_snapshots.setter
    def update_snapshots(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_snapshots", value)

    @property
    @pulumi.getter(name="useOrgAndGroupNamesInExportPrefix")
    def use_org_and_group_names_in_export_prefix(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true to use organization and project names instead of organization and project UUIDs in the path for the metadata files that Atlas uploads to your S3 bucket after it finishes exporting the snapshots. To learn more about the metadata files that Atlas uploads, see [Export Cloud Backup Snapshot](https://www.mongodb.com/docs/atlas/backup/cloud-backup/export/#std-label-cloud-provider-snapshot-export).
        """
        return pulumi.get(self, "use_org_and_group_names_in_export_prefix")

    @use_org_and_group_names_in_export_prefix.setter
    def use_org_and_group_names_in_export_prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_org_and_group_names_in_export_prefix", value)


@pulumi.input_type
class _CloudBackupScheduleState:
    def __init__(__self__, *,
                 auto_export_enabled: Optional[pulumi.Input[bool]] = None,
                 cluster_id: Optional[pulumi.Input[str]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 copy_settings: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupScheduleCopySettingArgs']]]] = None,
                 export: Optional[pulumi.Input['CloudBackupScheduleExportArgs']] = None,
                 id_policy: Optional[pulumi.Input[str]] = None,
                 next_snapshot: Optional[pulumi.Input[str]] = None,
                 policy_item_daily: Optional[pulumi.Input['CloudBackupSchedulePolicyItemDailyArgs']] = None,
                 policy_item_hourly: Optional[pulumi.Input['CloudBackupSchedulePolicyItemHourlyArgs']] = None,
                 policy_item_monthlies: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemMonthlyArgs']]]] = None,
                 policy_item_weeklies: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemWeeklyArgs']]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 reference_hour_of_day: Optional[pulumi.Input[int]] = None,
                 reference_minute_of_hour: Optional[pulumi.Input[int]] = None,
                 restore_window_days: Optional[pulumi.Input[int]] = None,
                 update_snapshots: Optional[pulumi.Input[bool]] = None,
                 use_org_and_group_names_in_export_prefix: Optional[pulumi.Input[bool]] = None):
        """
        Input properties used for looking up and filtering CloudBackupSchedule resources.
        :param pulumi.Input[bool] auto_export_enabled: Flag that indicates whether automatic export of cloud backup snapshots to the AWS bucket is enabled. Value can be one of the following:
               
               true - enables automatic export of cloud backup snapshots to the AWS bucket
               false - disables automatic export of cloud backup snapshots to the AWS bucket (default)
        :param pulumi.Input[str] cluster_id: Unique identifier of the Atlas cluster.
        :param pulumi.Input[str] cluster_name: The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
        :param pulumi.Input[str] id_policy: Unique identifier of the backup policy.
        :param pulumi.Input[str] next_snapshot: Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.
        :param pulumi.Input['CloudBackupSchedulePolicyItemDailyArgs'] policy_item_daily: Daily policy item
        :param pulumi.Input['CloudBackupSchedulePolicyItemHourlyArgs'] policy_item_hourly: Hourly policy item
        :param pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemMonthlyArgs']]] policy_item_monthlies: Monthly policy item
        :param pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemWeeklyArgs']]] policy_item_weeklies: Weekly policy item
        :param pulumi.Input[str] project_id: The unique identifier of the project for the Atlas cluster.
        :param pulumi.Input[int] reference_hour_of_day: UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
        :param pulumi.Input[int] reference_minute_of_hour: UTC Minutes after `reference_hour_of_day` that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
        :param pulumi.Input[int] restore_window_days: Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
        :param pulumi.Input[bool] use_org_and_group_names_in_export_prefix: Specify true to use organization and project names instead of organization and project UUIDs in the path for the metadata files that Atlas uploads to your S3 bucket after it finishes exporting the snapshots. To learn more about the metadata files that Atlas uploads, see [Export Cloud Backup Snapshot](https://www.mongodb.com/docs/atlas/backup/cloud-backup/export/#std-label-cloud-provider-snapshot-export).
        """
        _CloudBackupScheduleState._configure(
            lambda key, value: pulumi.set(__self__, key, value),
            auto_export_enabled=auto_export_enabled,
            cluster_id=cluster_id,
            cluster_name=cluster_name,
            copy_settings=copy_settings,
            export=export,
            id_policy=id_policy,
            next_snapshot=next_snapshot,
            policy_item_daily=policy_item_daily,
            policy_item_hourly=policy_item_hourly,
            policy_item_monthlies=policy_item_monthlies,
            policy_item_weeklies=policy_item_weeklies,
            project_id=project_id,
            reference_hour_of_day=reference_hour_of_day,
            reference_minute_of_hour=reference_minute_of_hour,
            restore_window_days=restore_window_days,
            update_snapshots=update_snapshots,
            use_org_and_group_names_in_export_prefix=use_org_and_group_names_in_export_prefix,
        )
    @staticmethod
    def _configure(
             _setter: Callable[[Any, Any], None],
             auto_export_enabled: Optional[pulumi.Input[bool]] = None,
             cluster_id: Optional[pulumi.Input[str]] = None,
             cluster_name: Optional[pulumi.Input[str]] = None,
             copy_settings: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupScheduleCopySettingArgs']]]] = None,
             export: Optional[pulumi.Input['CloudBackupScheduleExportArgs']] = None,
             id_policy: Optional[pulumi.Input[str]] = None,
             next_snapshot: Optional[pulumi.Input[str]] = None,
             policy_item_daily: Optional[pulumi.Input['CloudBackupSchedulePolicyItemDailyArgs']] = None,
             policy_item_hourly: Optional[pulumi.Input['CloudBackupSchedulePolicyItemHourlyArgs']] = None,
             policy_item_monthlies: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemMonthlyArgs']]]] = None,
             policy_item_weeklies: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemWeeklyArgs']]]] = None,
             project_id: Optional[pulumi.Input[str]] = None,
             reference_hour_of_day: Optional[pulumi.Input[int]] = None,
             reference_minute_of_hour: Optional[pulumi.Input[int]] = None,
             restore_window_days: Optional[pulumi.Input[int]] = None,
             update_snapshots: Optional[pulumi.Input[bool]] = None,
             use_org_and_group_names_in_export_prefix: Optional[pulumi.Input[bool]] = None,
             opts: Optional[pulumi.ResourceOptions]=None):
        if auto_export_enabled is not None:
            _setter("auto_export_enabled", auto_export_enabled)
        if cluster_id is not None:
            _setter("cluster_id", cluster_id)
        if cluster_name is not None:
            _setter("cluster_name", cluster_name)
        if copy_settings is not None:
            _setter("copy_settings", copy_settings)
        if export is not None:
            _setter("export", export)
        if id_policy is not None:
            _setter("id_policy", id_policy)
        if next_snapshot is not None:
            _setter("next_snapshot", next_snapshot)
        if policy_item_daily is not None:
            _setter("policy_item_daily", policy_item_daily)
        if policy_item_hourly is not None:
            _setter("policy_item_hourly", policy_item_hourly)
        if policy_item_monthlies is not None:
            _setter("policy_item_monthlies", policy_item_monthlies)
        if policy_item_weeklies is not None:
            _setter("policy_item_weeklies", policy_item_weeklies)
        if project_id is not None:
            _setter("project_id", project_id)
        if reference_hour_of_day is not None:
            _setter("reference_hour_of_day", reference_hour_of_day)
        if reference_minute_of_hour is not None:
            _setter("reference_minute_of_hour", reference_minute_of_hour)
        if restore_window_days is not None:
            _setter("restore_window_days", restore_window_days)
        if update_snapshots is not None:
            _setter("update_snapshots", update_snapshots)
        if use_org_and_group_names_in_export_prefix is not None:
            _setter("use_org_and_group_names_in_export_prefix", use_org_and_group_names_in_export_prefix)

    @property
    @pulumi.getter(name="autoExportEnabled")
    def auto_export_enabled(self) -> Optional[pulumi.Input[bool]]:
        """
        Flag that indicates whether automatic export of cloud backup snapshots to the AWS bucket is enabled. Value can be one of the following:

        true - enables automatic export of cloud backup snapshots to the AWS bucket
        false - disables automatic export of cloud backup snapshots to the AWS bucket (default)
        """
        return pulumi.get(self, "auto_export_enabled")

    @auto_export_enabled.setter
    def auto_export_enabled(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "auto_export_enabled", value)

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the Atlas cluster.
        """
        return pulumi.get(self, "cluster_id")

    @cluster_id.setter
    def cluster_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_id", value)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> Optional[pulumi.Input[str]]:
        """
        The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
        """
        return pulumi.get(self, "cluster_name")

    @cluster_name.setter
    def cluster_name(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "cluster_name", value)

    @property
    @pulumi.getter(name="copySettings")
    def copy_settings(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupScheduleCopySettingArgs']]]]:
        return pulumi.get(self, "copy_settings")

    @copy_settings.setter
    def copy_settings(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupScheduleCopySettingArgs']]]]):
        pulumi.set(self, "copy_settings", value)

    @property
    @pulumi.getter
    def export(self) -> Optional[pulumi.Input['CloudBackupScheduleExportArgs']]:
        return pulumi.get(self, "export")

    @export.setter
    def export(self, value: Optional[pulumi.Input['CloudBackupScheduleExportArgs']]):
        pulumi.set(self, "export", value)

    @property
    @pulumi.getter(name="idPolicy")
    def id_policy(self) -> Optional[pulumi.Input[str]]:
        """
        Unique identifier of the backup policy.
        """
        return pulumi.get(self, "id_policy")

    @id_policy.setter
    def id_policy(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "id_policy", value)

    @property
    @pulumi.getter(name="nextSnapshot")
    def next_snapshot(self) -> Optional[pulumi.Input[str]]:
        """
        Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.
        """
        return pulumi.get(self, "next_snapshot")

    @next_snapshot.setter
    def next_snapshot(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "next_snapshot", value)

    @property
    @pulumi.getter(name="policyItemDaily")
    def policy_item_daily(self) -> Optional[pulumi.Input['CloudBackupSchedulePolicyItemDailyArgs']]:
        """
        Daily policy item
        """
        return pulumi.get(self, "policy_item_daily")

    @policy_item_daily.setter
    def policy_item_daily(self, value: Optional[pulumi.Input['CloudBackupSchedulePolicyItemDailyArgs']]):
        pulumi.set(self, "policy_item_daily", value)

    @property
    @pulumi.getter(name="policyItemHourly")
    def policy_item_hourly(self) -> Optional[pulumi.Input['CloudBackupSchedulePolicyItemHourlyArgs']]:
        """
        Hourly policy item
        """
        return pulumi.get(self, "policy_item_hourly")

    @policy_item_hourly.setter
    def policy_item_hourly(self, value: Optional[pulumi.Input['CloudBackupSchedulePolicyItemHourlyArgs']]):
        pulumi.set(self, "policy_item_hourly", value)

    @property
    @pulumi.getter(name="policyItemMonthlies")
    def policy_item_monthlies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemMonthlyArgs']]]]:
        """
        Monthly policy item
        """
        return pulumi.get(self, "policy_item_monthlies")

    @policy_item_monthlies.setter
    def policy_item_monthlies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemMonthlyArgs']]]]):
        pulumi.set(self, "policy_item_monthlies", value)

    @property
    @pulumi.getter(name="policyItemWeeklies")
    def policy_item_weeklies(self) -> Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemWeeklyArgs']]]]:
        """
        Weekly policy item
        """
        return pulumi.get(self, "policy_item_weeklies")

    @policy_item_weeklies.setter
    def policy_item_weeklies(self, value: Optional[pulumi.Input[Sequence[pulumi.Input['CloudBackupSchedulePolicyItemWeeklyArgs']]]]):
        pulumi.set(self, "policy_item_weeklies", value)

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> Optional[pulumi.Input[str]]:
        """
        The unique identifier of the project for the Atlas cluster.
        """
        return pulumi.get(self, "project_id")

    @project_id.setter
    def project_id(self, value: Optional[pulumi.Input[str]]):
        pulumi.set(self, "project_id", value)

    @property
    @pulumi.getter(name="referenceHourOfDay")
    def reference_hour_of_day(self) -> Optional[pulumi.Input[int]]:
        """
        UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
        """
        return pulumi.get(self, "reference_hour_of_day")

    @reference_hour_of_day.setter
    def reference_hour_of_day(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_hour_of_day", value)

    @property
    @pulumi.getter(name="referenceMinuteOfHour")
    def reference_minute_of_hour(self) -> Optional[pulumi.Input[int]]:
        """
        UTC Minutes after `reference_hour_of_day` that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
        """
        return pulumi.get(self, "reference_minute_of_hour")

    @reference_minute_of_hour.setter
    def reference_minute_of_hour(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "reference_minute_of_hour", value)

    @property
    @pulumi.getter(name="restoreWindowDays")
    def restore_window_days(self) -> Optional[pulumi.Input[int]]:
        """
        Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
        """
        return pulumi.get(self, "restore_window_days")

    @restore_window_days.setter
    def restore_window_days(self, value: Optional[pulumi.Input[int]]):
        pulumi.set(self, "restore_window_days", value)

    @property
    @pulumi.getter(name="updateSnapshots")
    def update_snapshots(self) -> Optional[pulumi.Input[bool]]:
        return pulumi.get(self, "update_snapshots")

    @update_snapshots.setter
    def update_snapshots(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "update_snapshots", value)

    @property
    @pulumi.getter(name="useOrgAndGroupNamesInExportPrefix")
    def use_org_and_group_names_in_export_prefix(self) -> Optional[pulumi.Input[bool]]:
        """
        Specify true to use organization and project names instead of organization and project UUIDs in the path for the metadata files that Atlas uploads to your S3 bucket after it finishes exporting the snapshots. To learn more about the metadata files that Atlas uploads, see [Export Cloud Backup Snapshot](https://www.mongodb.com/docs/atlas/backup/cloud-backup/export/#std-label-cloud-provider-snapshot-export).
        """
        return pulumi.get(self, "use_org_and_group_names_in_export_prefix")

    @use_org_and_group_names_in_export_prefix.setter
    def use_org_and_group_names_in_export_prefix(self, value: Optional[pulumi.Input[bool]]):
        pulumi.set(self, "use_org_and_group_names_in_export_prefix", value)


class CloudBackupSchedule(pulumi.CustomResource):
    @overload
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_export_enabled: Optional[pulumi.Input[bool]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 copy_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupScheduleCopySettingArgs']]]]] = None,
                 export: Optional[pulumi.Input[pulumi.InputType['CloudBackupScheduleExportArgs']]] = None,
                 policy_item_daily: Optional[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemDailyArgs']]] = None,
                 policy_item_hourly: Optional[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemHourlyArgs']]] = None,
                 policy_item_monthlies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemMonthlyArgs']]]]] = None,
                 policy_item_weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemWeeklyArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 reference_hour_of_day: Optional[pulumi.Input[int]] = None,
                 reference_minute_of_hour: Optional[pulumi.Input[int]] = None,
                 restore_window_days: Optional[pulumi.Input[int]] = None,
                 update_snapshots: Optional[pulumi.Input[bool]] = None,
                 use_org_and_group_names_in_export_prefix: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        """
        ## Import

        Cloud Backup Schedule entries can be imported using project_id and cluster_name, in the format `PROJECTID-CLUSTERNAME`, e.g.

        ```sh
         $ pulumi import mongodbatlas:index/cloudBackupSchedule:CloudBackupSchedule test 5d0f1f73cf09a29120e173cf-MyClusterTest
        ```
         For more information see[MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/cloud-backup/schedule/modify-one-schedule/)

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_export_enabled: Flag that indicates whether automatic export of cloud backup snapshots to the AWS bucket is enabled. Value can be one of the following:
               
               true - enables automatic export of cloud backup snapshots to the AWS bucket
               false - disables automatic export of cloud backup snapshots to the AWS bucket (default)
        :param pulumi.Input[str] cluster_name: The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
        :param pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemDailyArgs']] policy_item_daily: Daily policy item
        :param pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemHourlyArgs']] policy_item_hourly: Hourly policy item
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemMonthlyArgs']]]] policy_item_monthlies: Monthly policy item
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemWeeklyArgs']]]] policy_item_weeklies: Weekly policy item
        :param pulumi.Input[str] project_id: The unique identifier of the project for the Atlas cluster.
        :param pulumi.Input[int] reference_hour_of_day: UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
        :param pulumi.Input[int] reference_minute_of_hour: UTC Minutes after `reference_hour_of_day` that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
        :param pulumi.Input[int] restore_window_days: Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
        :param pulumi.Input[bool] use_org_and_group_names_in_export_prefix: Specify true to use organization and project names instead of organization and project UUIDs in the path for the metadata files that Atlas uploads to your S3 bucket after it finishes exporting the snapshots. To learn more about the metadata files that Atlas uploads, see [Export Cloud Backup Snapshot](https://www.mongodb.com/docs/atlas/backup/cloud-backup/export/#std-label-cloud-provider-snapshot-export).
        """
        ...
    @overload
    def __init__(__self__,
                 resource_name: str,
                 args: CloudBackupScheduleArgs,
                 opts: Optional[pulumi.ResourceOptions] = None):
        """
        ## Import

        Cloud Backup Schedule entries can be imported using project_id and cluster_name, in the format `PROJECTID-CLUSTERNAME`, e.g.

        ```sh
         $ pulumi import mongodbatlas:index/cloudBackupSchedule:CloudBackupSchedule test 5d0f1f73cf09a29120e173cf-MyClusterTest
        ```
         For more information see[MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/cloud-backup/schedule/modify-one-schedule/)

        :param str resource_name: The name of the resource.
        :param CloudBackupScheduleArgs args: The arguments to use to populate this resource's properties.
        :param pulumi.ResourceOptions opts: Options for the resource.
        """
        ...
    def __init__(__self__, resource_name: str, *args, **kwargs):
        resource_args, opts = _utilities.get_resource_args_opts(CloudBackupScheduleArgs, pulumi.ResourceOptions, *args, **kwargs)
        if resource_args is not None:
            __self__._internal_init(resource_name, opts, **resource_args.__dict__)
        else:
            kwargs = kwargs or {}
            def _setter(key, value):
                kwargs[key] = value
            CloudBackupScheduleArgs._configure(_setter, **kwargs)
            __self__._internal_init(resource_name, *args, **kwargs)

    def _internal_init(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 auto_export_enabled: Optional[pulumi.Input[bool]] = None,
                 cluster_name: Optional[pulumi.Input[str]] = None,
                 copy_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupScheduleCopySettingArgs']]]]] = None,
                 export: Optional[pulumi.Input[pulumi.InputType['CloudBackupScheduleExportArgs']]] = None,
                 policy_item_daily: Optional[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemDailyArgs']]] = None,
                 policy_item_hourly: Optional[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemHourlyArgs']]] = None,
                 policy_item_monthlies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemMonthlyArgs']]]]] = None,
                 policy_item_weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemWeeklyArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 reference_hour_of_day: Optional[pulumi.Input[int]] = None,
                 reference_minute_of_hour: Optional[pulumi.Input[int]] = None,
                 restore_window_days: Optional[pulumi.Input[int]] = None,
                 update_snapshots: Optional[pulumi.Input[bool]] = None,
                 use_org_and_group_names_in_export_prefix: Optional[pulumi.Input[bool]] = None,
                 __props__=None):
        opts = pulumi.ResourceOptions.merge(_utilities.get_resource_opts_defaults(), opts)
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = CloudBackupScheduleArgs.__new__(CloudBackupScheduleArgs)

            __props__.__dict__["auto_export_enabled"] = auto_export_enabled
            if cluster_name is None and not opts.urn:
                raise TypeError("Missing required property 'cluster_name'")
            __props__.__dict__["cluster_name"] = cluster_name
            __props__.__dict__["copy_settings"] = copy_settings
            if export is not None and not isinstance(export, CloudBackupScheduleExportArgs):
                export = export or {}
                def _setter(key, value):
                    export[key] = value
                CloudBackupScheduleExportArgs._configure(_setter, **export)
            __props__.__dict__["export"] = export
            if policy_item_daily is not None and not isinstance(policy_item_daily, CloudBackupSchedulePolicyItemDailyArgs):
                policy_item_daily = policy_item_daily or {}
                def _setter(key, value):
                    policy_item_daily[key] = value
                CloudBackupSchedulePolicyItemDailyArgs._configure(_setter, **policy_item_daily)
            __props__.__dict__["policy_item_daily"] = policy_item_daily
            if policy_item_hourly is not None and not isinstance(policy_item_hourly, CloudBackupSchedulePolicyItemHourlyArgs):
                policy_item_hourly = policy_item_hourly or {}
                def _setter(key, value):
                    policy_item_hourly[key] = value
                CloudBackupSchedulePolicyItemHourlyArgs._configure(_setter, **policy_item_hourly)
            __props__.__dict__["policy_item_hourly"] = policy_item_hourly
            __props__.__dict__["policy_item_monthlies"] = policy_item_monthlies
            __props__.__dict__["policy_item_weeklies"] = policy_item_weeklies
            if project_id is None and not opts.urn:
                raise TypeError("Missing required property 'project_id'")
            __props__.__dict__["project_id"] = project_id
            __props__.__dict__["reference_hour_of_day"] = reference_hour_of_day
            __props__.__dict__["reference_minute_of_hour"] = reference_minute_of_hour
            __props__.__dict__["restore_window_days"] = restore_window_days
            __props__.__dict__["update_snapshots"] = update_snapshots
            __props__.__dict__["use_org_and_group_names_in_export_prefix"] = use_org_and_group_names_in_export_prefix
            __props__.__dict__["cluster_id"] = None
            __props__.__dict__["id_policy"] = None
            __props__.__dict__["next_snapshot"] = None
        super(CloudBackupSchedule, __self__).__init__(
            'mongodbatlas:index/cloudBackupSchedule:CloudBackupSchedule',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            auto_export_enabled: Optional[pulumi.Input[bool]] = None,
            cluster_id: Optional[pulumi.Input[str]] = None,
            cluster_name: Optional[pulumi.Input[str]] = None,
            copy_settings: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupScheduleCopySettingArgs']]]]] = None,
            export: Optional[pulumi.Input[pulumi.InputType['CloudBackupScheduleExportArgs']]] = None,
            id_policy: Optional[pulumi.Input[str]] = None,
            next_snapshot: Optional[pulumi.Input[str]] = None,
            policy_item_daily: Optional[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemDailyArgs']]] = None,
            policy_item_hourly: Optional[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemHourlyArgs']]] = None,
            policy_item_monthlies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemMonthlyArgs']]]]] = None,
            policy_item_weeklies: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemWeeklyArgs']]]]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            reference_hour_of_day: Optional[pulumi.Input[int]] = None,
            reference_minute_of_hour: Optional[pulumi.Input[int]] = None,
            restore_window_days: Optional[pulumi.Input[int]] = None,
            update_snapshots: Optional[pulumi.Input[bool]] = None,
            use_org_and_group_names_in_export_prefix: Optional[pulumi.Input[bool]] = None) -> 'CloudBackupSchedule':
        """
        Get an existing CloudBackupSchedule resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] auto_export_enabled: Flag that indicates whether automatic export of cloud backup snapshots to the AWS bucket is enabled. Value can be one of the following:
               
               true - enables automatic export of cloud backup snapshots to the AWS bucket
               false - disables automatic export of cloud backup snapshots to the AWS bucket (default)
        :param pulumi.Input[str] cluster_id: Unique identifier of the Atlas cluster.
        :param pulumi.Input[str] cluster_name: The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
        :param pulumi.Input[str] id_policy: Unique identifier of the backup policy.
        :param pulumi.Input[str] next_snapshot: Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.
        :param pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemDailyArgs']] policy_item_daily: Daily policy item
        :param pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemHourlyArgs']] policy_item_hourly: Hourly policy item
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemMonthlyArgs']]]] policy_item_monthlies: Monthly policy item
        :param pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['CloudBackupSchedulePolicyItemWeeklyArgs']]]] policy_item_weeklies: Weekly policy item
        :param pulumi.Input[str] project_id: The unique identifier of the project for the Atlas cluster.
        :param pulumi.Input[int] reference_hour_of_day: UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
        :param pulumi.Input[int] reference_minute_of_hour: UTC Minutes after `reference_hour_of_day` that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
        :param pulumi.Input[int] restore_window_days: Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
        :param pulumi.Input[bool] use_org_and_group_names_in_export_prefix: Specify true to use organization and project names instead of organization and project UUIDs in the path for the metadata files that Atlas uploads to your S3 bucket after it finishes exporting the snapshots. To learn more about the metadata files that Atlas uploads, see [Export Cloud Backup Snapshot](https://www.mongodb.com/docs/atlas/backup/cloud-backup/export/#std-label-cloud-provider-snapshot-export).
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = _CloudBackupScheduleState.__new__(_CloudBackupScheduleState)

        __props__.__dict__["auto_export_enabled"] = auto_export_enabled
        __props__.__dict__["cluster_id"] = cluster_id
        __props__.__dict__["cluster_name"] = cluster_name
        __props__.__dict__["copy_settings"] = copy_settings
        __props__.__dict__["export"] = export
        __props__.__dict__["id_policy"] = id_policy
        __props__.__dict__["next_snapshot"] = next_snapshot
        __props__.__dict__["policy_item_daily"] = policy_item_daily
        __props__.__dict__["policy_item_hourly"] = policy_item_hourly
        __props__.__dict__["policy_item_monthlies"] = policy_item_monthlies
        __props__.__dict__["policy_item_weeklies"] = policy_item_weeklies
        __props__.__dict__["project_id"] = project_id
        __props__.__dict__["reference_hour_of_day"] = reference_hour_of_day
        __props__.__dict__["reference_minute_of_hour"] = reference_minute_of_hour
        __props__.__dict__["restore_window_days"] = restore_window_days
        __props__.__dict__["update_snapshots"] = update_snapshots
        __props__.__dict__["use_org_and_group_names_in_export_prefix"] = use_org_and_group_names_in_export_prefix
        return CloudBackupSchedule(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="autoExportEnabled")
    def auto_export_enabled(self) -> pulumi.Output[bool]:
        """
        Flag that indicates whether automatic export of cloud backup snapshots to the AWS bucket is enabled. Value can be one of the following:

        true - enables automatic export of cloud backup snapshots to the AWS bucket
        false - disables automatic export of cloud backup snapshots to the AWS bucket (default)
        """
        return pulumi.get(self, "auto_export_enabled")

    @property
    @pulumi.getter(name="clusterId")
    def cluster_id(self) -> pulumi.Output[str]:
        """
        Unique identifier of the Atlas cluster.
        """
        return pulumi.get(self, "cluster_id")

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> pulumi.Output[str]:
        """
        The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
        """
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter(name="copySettings")
    def copy_settings(self) -> pulumi.Output[Optional[Sequence['outputs.CloudBackupScheduleCopySetting']]]:
        return pulumi.get(self, "copy_settings")

    @property
    @pulumi.getter
    def export(self) -> pulumi.Output['outputs.CloudBackupScheduleExport']:
        return pulumi.get(self, "export")

    @property
    @pulumi.getter(name="idPolicy")
    def id_policy(self) -> pulumi.Output[str]:
        """
        Unique identifier of the backup policy.
        """
        return pulumi.get(self, "id_policy")

    @property
    @pulumi.getter(name="nextSnapshot")
    def next_snapshot(self) -> pulumi.Output[str]:
        """
        Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.
        """
        return pulumi.get(self, "next_snapshot")

    @property
    @pulumi.getter(name="policyItemDaily")
    def policy_item_daily(self) -> pulumi.Output[Optional['outputs.CloudBackupSchedulePolicyItemDaily']]:
        """
        Daily policy item
        """
        return pulumi.get(self, "policy_item_daily")

    @property
    @pulumi.getter(name="policyItemHourly")
    def policy_item_hourly(self) -> pulumi.Output[Optional['outputs.CloudBackupSchedulePolicyItemHourly']]:
        """
        Hourly policy item
        """
        return pulumi.get(self, "policy_item_hourly")

    @property
    @pulumi.getter(name="policyItemMonthlies")
    def policy_item_monthlies(self) -> pulumi.Output[Optional[Sequence['outputs.CloudBackupSchedulePolicyItemMonthly']]]:
        """
        Monthly policy item
        """
        return pulumi.get(self, "policy_item_monthlies")

    @property
    @pulumi.getter(name="policyItemWeeklies")
    def policy_item_weeklies(self) -> pulumi.Output[Optional[Sequence['outputs.CloudBackupSchedulePolicyItemWeekly']]]:
        """
        Weekly policy item
        """
        return pulumi.get(self, "policy_item_weeklies")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The unique identifier of the project for the Atlas cluster.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="referenceHourOfDay")
    def reference_hour_of_day(self) -> pulumi.Output[int]:
        """
        UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
        """
        return pulumi.get(self, "reference_hour_of_day")

    @property
    @pulumi.getter(name="referenceMinuteOfHour")
    def reference_minute_of_hour(self) -> pulumi.Output[int]:
        """
        UTC Minutes after `reference_hour_of_day` that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
        """
        return pulumi.get(self, "reference_minute_of_hour")

    @property
    @pulumi.getter(name="restoreWindowDays")
    def restore_window_days(self) -> pulumi.Output[int]:
        """
        Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
        """
        return pulumi.get(self, "restore_window_days")

    @property
    @pulumi.getter(name="updateSnapshots")
    def update_snapshots(self) -> pulumi.Output[bool]:
        return pulumi.get(self, "update_snapshots")

    @property
    @pulumi.getter(name="useOrgAndGroupNamesInExportPrefix")
    def use_org_and_group_names_in_export_prefix(self) -> pulumi.Output[bool]:
        """
        Specify true to use organization and project names instead of organization and project UUIDs in the path for the metadata files that Atlas uploads to your S3 bucket after it finishes exporting the snapshots. To learn more about the metadata files that Atlas uploads, see [Export Cloud Backup Snapshot](https://www.mongodb.com/docs/atlas/backup/cloud-backup/export/#std-label-cloud-provider-snapshot-export).
        """
        return pulumi.get(self, "use_org_and_group_names_in_export_prefix")

