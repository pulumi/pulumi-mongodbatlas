# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class X509AuthenticationDatabaseUser(pulumi.CustomResource):
    certificates: pulumi.Output[list]
    """
    Array of objects where each details one unexpired database user certificate.

      * `created_at` (`str`)
      * `groupId` (`str`)
      * `id` (`float`)
      * `notAfter` (`str`)
      * `subject` (`str`)
    """
    current_certificate: pulumi.Output[str]
    """
    Contains the last X.509 certificate and private key created for a database user.
    """
    customer_x509_cas: pulumi.Output[str]
    """
    PEM string containing one or more customer CAs for database user authentication.
    """
    months_until_expiration: pulumi.Output[float]
    """
    A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.
    """
    project_id: pulumi.Output[str]
    """
    Identifier for the Atlas project associated with the X.509 configuration.
    """
    username: pulumi.Output[str]
    """
    Username of the database user to create a certificate for.
    """
    def __init__(__self__, resource_name, opts=None, customer_x509_cas=None, months_until_expiration=None, project_id=None, username=None, __props__=None, __name__=None, __opts__=None):
        """
        `X509AuthenticationDatabaseUser` provides a X509 Authentication Database User resource. The X509AuthenticationDatabaseUser resource lets you manage MongoDB users who authenticate using X.509 certificates. You can manage these X.509 certificates or let Atlas do it for you.

        | Management  | Description  |
        |---|---|
        | Atlas  | Atlas manages your Certificate Authority and can generate certificates for your MongoDB users. No additional X.509 configuration is required.  |
        | Customer  |  You must provide a Certificate Authority and generate certificates for your MongoDB users. |

        > **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.

        ## Example Usage

        ### S
        ### Example Usage: Generate an Atlas-managed X.509 certificate for a MongoDB user
        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        user = mongodbatlas.DatabaseUser("user",
            database_name="$external",
            labels=[{
                "key": "My Key",
                "value": "My Value",
            }],
            project_id="<PROJECT-ID>",
            roles=[{
                "database_name": "admin",
                "role_name": "atlasAdmin",
            }],
            username="myUsername",
            x509_type="MANAGED")
        test = mongodbatlas.X509AuthenticationDatabaseUser("test",
            months_until_expiration=2,
            project_id=user.project_id,
            username=user.username)
        ```
        ### Example Usage: Save a customer-managed X.509 configuration for an Atlas project
        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        test = mongodbatlas.X509AuthenticationDatabaseUser("test",
            customer_x509_cas=\"\"\"  -----BEGIN CERTIFICATE-----
          MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC
          VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl
          c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG
          SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy
          MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF
          VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV
          BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp
          c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
          iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr
          cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O
          Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG
          SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA
          7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A
          iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz
          -----END CERTIFICATE-----"

        \"\"\",
            project_id="<PROJECT-ID>")
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] customer_x509_cas: PEM string containing one or more customer CAs for database user authentication.
        :param pulumi.Input[float] months_until_expiration: A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.
        :param pulumi.Input[str] project_id: Identifier for the Atlas project associated with the X.509 configuration.
        :param pulumi.Input[str] username: Username of the database user to create a certificate for.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['customer_x509_cas'] = customer_x509_cas
            __props__['months_until_expiration'] = months_until_expiration
            if project_id is None:
                raise TypeError("Missing required property 'project_id'")
            __props__['project_id'] = project_id
            __props__['username'] = username
            __props__['certificates'] = None
            __props__['current_certificate'] = None
        super(X509AuthenticationDatabaseUser, __self__).__init__(
            'mongodbatlas:index/x509AuthenticationDatabaseUser:X509AuthenticationDatabaseUser',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, certificates=None, current_certificate=None, customer_x509_cas=None, months_until_expiration=None, project_id=None, username=None):
        """
        Get an existing X509AuthenticationDatabaseUser resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[list] certificates: Array of objects where each details one unexpired database user certificate.
        :param pulumi.Input[str] current_certificate: Contains the last X.509 certificate and private key created for a database user.
        :param pulumi.Input[str] customer_x509_cas: PEM string containing one or more customer CAs for database user authentication.
        :param pulumi.Input[float] months_until_expiration: A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.
        :param pulumi.Input[str] project_id: Identifier for the Atlas project associated with the X.509 configuration.
        :param pulumi.Input[str] username: Username of the database user to create a certificate for.

        The **certificates** object supports the following:

          * `created_at` (`pulumi.Input[str]`)
          * `groupId` (`pulumi.Input[str]`)
          * `id` (`pulumi.Input[float]`)
          * `notAfter` (`pulumi.Input[str]`)
          * `subject` (`pulumi.Input[str]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["certificates"] = certificates
        __props__["current_certificate"] = current_certificate
        __props__["customer_x509_cas"] = customer_x509_cas
        __props__["months_until_expiration"] = months_until_expiration
        __props__["project_id"] = project_id
        __props__["username"] = username
        return X509AuthenticationDatabaseUser(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
