# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetCloudProviderSnapshotsResult:
    """
    A collection of values returned by getCloudProviderSnapshots.
    """
    def __init__(__self__, cluster_name=None, id=None, items_per_page=None, page_num=None, project_id=None, results=None, total_count=None):
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        __self__.cluster_name = cluster_name
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if items_per_page and not isinstance(items_per_page, float):
            raise TypeError("Expected argument 'items_per_page' to be a float")
        __self__.items_per_page = items_per_page
        if page_num and not isinstance(page_num, float):
            raise TypeError("Expected argument 'page_num' to be a float")
        __self__.page_num = page_num
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        __self__.project_id = project_id
        if results and not isinstance(results, list):
            raise TypeError("Expected argument 'results' to be a list")
        __self__.results = results
        """
        Includes cloudProviderSnapshot object for each item detailed in the results array section.
        """
        if total_count and not isinstance(total_count, float):
            raise TypeError("Expected argument 'total_count' to be a float")
        __self__.total_count = total_count
class AwaitableGetCloudProviderSnapshotsResult(GetCloudProviderSnapshotsResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudProviderSnapshotsResult(
            cluster_name=self.cluster_name,
            id=self.id,
            items_per_page=self.items_per_page,
            page_num=self.page_num,
            project_id=self.project_id,
            results=self.results,
            total_count=self.total_count)

def get_cloud_provider_snapshots(cluster_name=None,items_per_page=None,page_num=None,project_id=None,opts=None):
    """
    `getCloudProviderSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the clusterâ€™s cloud service.

    > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.


    :param str cluster_name: The name of the Atlas cluster that contains the snapshot you want to retrieve.
    :param float items_per_page: Number of items to return per page, up to a maximum of 500. Defaults to `100`.
    :param float page_num: The page to return. Defaults to `1`.
    """
    __args__ = dict()


    __args__['clusterName'] = cluster_name
    __args__['itemsPerPage'] = items_per_page
    __args__['pageNum'] = page_num
    __args__['projectId'] = project_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getCloudProviderSnapshots:getCloudProviderSnapshots', __args__, opts=opts).value

    return AwaitableGetCloudProviderSnapshotsResult(
        cluster_name=__ret__.get('clusterName'),
        id=__ret__.get('id'),
        items_per_page=__ret__.get('itemsPerPage'),
        page_num=__ret__.get('pageNum'),
        project_id=__ret__.get('projectId'),
        results=__ret__.get('results'),
        total_count=__ret__.get('totalCount'))
