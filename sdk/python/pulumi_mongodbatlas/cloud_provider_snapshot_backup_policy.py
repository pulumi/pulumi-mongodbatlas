# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables


class CloudProviderSnapshotBackupPolicy(pulumi.CustomResource):
    cluster_id: pulumi.Output[str]
    """
    Unique identifier of the Atlas cluster.
    """
    cluster_name: pulumi.Output[str]
    """
    The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
    """
    next_snapshot: pulumi.Output[str]
    """
    Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.
    """
    policies: pulumi.Output[list]
    """
    Contains a document for each backup policy item in the desired updated backup policy.
    * `policies.#.id` - (Required) Unique identifier of the backup policy that you want to update. policies.#.id is a value obtained via the Cluster resource. provider_backup_enabled of the Cluster resource must be set to true. See the example above for how to refer to the Cluster resource for policies.#.id

      * `id` (`str`)
      * `policyItems` (`list`)
        * `frequencyInterval` (`float`)
        * `frequencyType` (`str`)
        * `id` (`str`)
        * `retentionUnit` (`str`)
        * `retentionValue` (`float`)
    """
    project_id: pulumi.Output[str]
    """
    The unique identifier of the project for the Atlas cluster.
    """
    reference_hour_of_day: pulumi.Output[float]
    """
    UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
    """
    reference_minute_of_hour: pulumi.Output[float]
    """
    UTC Minutes after referenceHourOfDay that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
    """
    restore_window_days: pulumi.Output[float]
    """
    Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
    """
    update_snapshots: pulumi.Output[bool]
    """
    Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.
    """
    def __init__(__self__, resource_name, opts=None, cluster_name=None, policies=None, project_id=None, reference_hour_of_day=None, reference_minute_of_hour=None, restore_window_days=None, update_snapshots=None, __props__=None, __name__=None, __opts__=None):
        """
        `CloudProviderSnapshotBackupPolicy` provides a resource that enables you to view and modify the snapshot schedule and retention settings for an Atlas cluster with Cloud Backup enabled.  A default policy is created automatically when Cloud Backup is enabled for the cluster.

        > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        my_cluster = mongodbatlas.Cluster("myCluster",
            project_id="<PROJECT-ID>",
            disk_size_gb=5,
            provider_name="AWS",
            provider_region_name="EU_CENTRAL_1",
            provider_instance_size_name="M10",
            provider_backup_enabled=True,
            provider_disk_iops=100,
            provider_encrypt_ebs_volume=False)
        test = mongodbatlas.CloudProviderSnapshotBackupPolicy("test",
            project_id=my_cluster.project_id,
            cluster_name=my_cluster.name,
            reference_hour_of_day=3,
            reference_minute_of_hour=45,
            restore_window_days=4,
            policies=[{
                "id": my_cluster.snapshot_backup_policies[0]["policies"][0]["id"],
                "policyItems": [
                    {
                        "id": my_cluster.snapshot_backup_policies[0]["policies"][0]["policyItems"][0]["id"],
                        "frequencyInterval": 1,
                        "frequencyType": "hourly",
                        "retentionUnit": "days",
                        "retentionValue": 1,
                    },
                    {
                        "id": my_cluster.snapshot_backup_policies[0]["policies"][0]["policyItems"][1]["id"],
                        "frequencyInterval": 1,
                        "frequencyType": "daily",
                        "retentionUnit": "days",
                        "retentionValue": 2,
                    },
                    {
                        "id": my_cluster.snapshot_backup_policies[0]["policies"][0]["policyItems"][2]["id"],
                        "frequencyInterval": 4,
                        "frequencyType": "weekly",
                        "retentionUnit": "weeks",
                        "retentionValue": 3,
                    },
                    {
                        "id": my_cluster.snapshot_backup_policies[0]["policies"][0]["policyItems"][3]["id"],
                        "frequencyInterval": 5,
                        "frequencyType": "monthly",
                        "retentionUnit": "months",
                        "retentionValue": 4,
                    },
                ],
            }])
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_name: The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
        :param pulumi.Input[list] policies: Contains a document for each backup policy item in the desired updated backup policy.
               * `policies.#.id` - (Required) Unique identifier of the backup policy that you want to update. policies.#.id is a value obtained via the Cluster resource. provider_backup_enabled of the Cluster resource must be set to true. See the example above for how to refer to the Cluster resource for policies.#.id
        :param pulumi.Input[str] project_id: The unique identifier of the project for the Atlas cluster.
        :param pulumi.Input[float] reference_hour_of_day: UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
        :param pulumi.Input[float] reference_minute_of_hour: UTC Minutes after referenceHourOfDay that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
        :param pulumi.Input[float] restore_window_days: Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
        :param pulumi.Input[bool] update_snapshots: Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.

        The **policies** object supports the following:

          * `id` (`pulumi.Input[str]`)
          * `policyItems` (`pulumi.Input[list]`)
            * `frequencyInterval` (`pulumi.Input[float]`)
            * `frequencyType` (`pulumi.Input[str]`)
            * `id` (`pulumi.Input[str]`)
            * `retentionUnit` (`pulumi.Input[str]`)
            * `retentionValue` (`pulumi.Input[float]`)
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            if cluster_name is None:
                raise TypeError("Missing required property 'cluster_name'")
            __props__['cluster_name'] = cluster_name
            if policies is None:
                raise TypeError("Missing required property 'policies'")
            __props__['policies'] = policies
            if project_id is None:
                raise TypeError("Missing required property 'project_id'")
            __props__['project_id'] = project_id
            __props__['reference_hour_of_day'] = reference_hour_of_day
            __props__['reference_minute_of_hour'] = reference_minute_of_hour
            __props__['restore_window_days'] = restore_window_days
            __props__['update_snapshots'] = update_snapshots
            __props__['cluster_id'] = None
            __props__['next_snapshot'] = None
        super(CloudProviderSnapshotBackupPolicy, __self__).__init__(
            'mongodbatlas:index/cloudProviderSnapshotBackupPolicy:CloudProviderSnapshotBackupPolicy',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name, id, opts=None, cluster_id=None, cluster_name=None, next_snapshot=None, policies=None, project_id=None, reference_hour_of_day=None, reference_minute_of_hour=None, restore_window_days=None, update_snapshots=None):
        """
        Get an existing CloudProviderSnapshotBackupPolicy resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param str id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] cluster_id: Unique identifier of the Atlas cluster.
        :param pulumi.Input[str] cluster_name: The name of the Atlas cluster that contains the snapshot backup policy you want to retrieve.
        :param pulumi.Input[str] next_snapshot: Timestamp in the number of seconds that have elapsed since the UNIX epoch when Atlas takes the next snapshot.
        :param pulumi.Input[list] policies: Contains a document for each backup policy item in the desired updated backup policy.
               * `policies.#.id` - (Required) Unique identifier of the backup policy that you want to update. policies.#.id is a value obtained via the Cluster resource. provider_backup_enabled of the Cluster resource must be set to true. See the example above for how to refer to the Cluster resource for policies.#.id
        :param pulumi.Input[str] project_id: The unique identifier of the project for the Atlas cluster.
        :param pulumi.Input[float] reference_hour_of_day: UTC Hour of day between 0 and 23, inclusive, representing which hour of the day that Atlas takes snapshots for backup policy items.
        :param pulumi.Input[float] reference_minute_of_hour: UTC Minutes after referenceHourOfDay that Atlas takes snapshots for backup policy items. Must be between 0 and 59, inclusive.
        :param pulumi.Input[float] restore_window_days: Number of days back in time you can restore to with point-in-time accuracy. Must be a positive, non-zero integer.
        :param pulumi.Input[bool] update_snapshots: Specify true to apply the retention changes in the updated backup policy to snapshots that Atlas took previously.

        The **policies** object supports the following:

          * `id` (`pulumi.Input[str]`)
          * `policyItems` (`pulumi.Input[list]`)
            * `frequencyInterval` (`pulumi.Input[float]`)
            * `frequencyType` (`pulumi.Input[str]`)
            * `id` (`pulumi.Input[str]`)
            * `retentionUnit` (`pulumi.Input[str]`)
            * `retentionValue` (`pulumi.Input[float]`)
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["cluster_id"] = cluster_id
        __props__["cluster_name"] = cluster_name
        __props__["next_snapshot"] = next_snapshot
        __props__["policies"] = policies
        __props__["project_id"] = project_id
        __props__["reference_hour_of_day"] = reference_hour_of_day
        __props__["reference_minute_of_hour"] = reference_minute_of_hour
        __props__["restore_window_days"] = restore_window_days
        __props__["update_snapshots"] = update_snapshots
        return CloudProviderSnapshotBackupPolicy(resource_name, opts=opts, __props__=__props__)

    def translate_output_property(self, prop):
        return tables._CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return tables._SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop
