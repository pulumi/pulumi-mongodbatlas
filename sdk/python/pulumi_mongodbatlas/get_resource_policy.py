# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import sys
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union, overload
if sys.version_info >= (3, 11):
    from typing import NotRequired, TypedDict, TypeAlias
else:
    from typing_extensions import NotRequired, TypedDict, TypeAlias
from . import _utilities
from . import outputs

__all__ = [
    'GetResourcePolicyResult',
    'AwaitableGetResourcePolicyResult',
    'get_resource_policy',
    'get_resource_policy_output',
]

@pulumi.output_type
class GetResourcePolicyResult:
    """
    A collection of values returned by getResourcePolicy.
    """
    def __init__(__self__, created_by_user=None, created_date=None, id=None, last_updated_by_user=None, last_updated_date=None, name=None, org_id=None, policies=None, version=None):
        if created_by_user and not isinstance(created_by_user, dict):
            raise TypeError("Expected argument 'created_by_user' to be a dict")
        pulumi.set(__self__, "created_by_user", created_by_user)
        if created_date and not isinstance(created_date, str):
            raise TypeError("Expected argument 'created_date' to be a str")
        pulumi.set(__self__, "created_date", created_date)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if last_updated_by_user and not isinstance(last_updated_by_user, dict):
            raise TypeError("Expected argument 'last_updated_by_user' to be a dict")
        pulumi.set(__self__, "last_updated_by_user", last_updated_by_user)
        if last_updated_date and not isinstance(last_updated_date, str):
            raise TypeError("Expected argument 'last_updated_date' to be a str")
        pulumi.set(__self__, "last_updated_date", last_updated_date)
        if name and not isinstance(name, str):
            raise TypeError("Expected argument 'name' to be a str")
        pulumi.set(__self__, "name", name)
        if org_id and not isinstance(org_id, str):
            raise TypeError("Expected argument 'org_id' to be a str")
        pulumi.set(__self__, "org_id", org_id)
        if policies and not isinstance(policies, list):
            raise TypeError("Expected argument 'policies' to be a list")
        pulumi.set(__self__, "policies", policies)
        if version and not isinstance(version, str):
            raise TypeError("Expected argument 'version' to be a str")
        pulumi.set(__self__, "version", version)

    @property
    @pulumi.getter(name="createdByUser")
    def created_by_user(self) -> 'outputs.GetResourcePolicyCreatedByUserResult':
        """
        The user that last updated the Atlas resource policy.
        """
        return pulumi.get(self, "created_by_user")

    @property
    @pulumi.getter(name="createdDate")
    def created_date(self) -> str:
        """
        Date and time in UTC when the Atlas resource policy was created.
        """
        return pulumi.get(self, "created_date")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        Unique 24-hexadecimal digit string that identifies an Atlas resource policy.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="lastUpdatedByUser")
    def last_updated_by_user(self) -> 'outputs.GetResourcePolicyLastUpdatedByUserResult':
        """
        The user that last updated the Atlas resource policy.
        """
        return pulumi.get(self, "last_updated_by_user")

    @property
    @pulumi.getter(name="lastUpdatedDate")
    def last_updated_date(self) -> str:
        """
        Date and time in UTC when the Atlas resource policy was last updated.
        """
        return pulumi.get(self, "last_updated_date")

    @property
    @pulumi.getter
    def name(self) -> str:
        """
        Human-readable label that describes the Atlas resource policy.
        """
        return pulumi.get(self, "name")

    @property
    @pulumi.getter(name="orgId")
    def org_id(self) -> str:
        """
        Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the /orgs endpoint to retrieve all organizations to which the authenticated user has access.
        """
        return pulumi.get(self, "org_id")

    @property
    @pulumi.getter
    def policies(self) -> Sequence['outputs.GetResourcePolicyPolicyResult']:
        """
        List of policies that make up the Atlas resource policy.
        """
        return pulumi.get(self, "policies")

    @property
    @pulumi.getter
    def version(self) -> str:
        """
        A string that identifies the version of the Atlas resource policy.
        """
        return pulumi.get(self, "version")


class AwaitableGetResourcePolicyResult(GetResourcePolicyResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetResourcePolicyResult(
            created_by_user=self.created_by_user,
            created_date=self.created_date,
            id=self.id,
            last_updated_by_user=self.last_updated_by_user,
            last_updated_date=self.last_updated_date,
            name=self.name,
            org_id=self.org_id,
            policies=self.policies,
            version=self.version)


def get_resource_policy(id: Optional[str] = None,
                        org_id: Optional[str] = None,
                        opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetResourcePolicyResult:
    """
    ## Example Usage


    :param str id: Unique 24-hexadecimal digit string that identifies an Atlas resource policy.
    :param str org_id: Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the /orgs endpoint to retrieve all organizations to which the authenticated user has access.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getResourcePolicy:getResourcePolicy', __args__, opts=opts, typ=GetResourcePolicyResult).value

    return AwaitableGetResourcePolicyResult(
        created_by_user=pulumi.get(__ret__, 'created_by_user'),
        created_date=pulumi.get(__ret__, 'created_date'),
        id=pulumi.get(__ret__, 'id'),
        last_updated_by_user=pulumi.get(__ret__, 'last_updated_by_user'),
        last_updated_date=pulumi.get(__ret__, 'last_updated_date'),
        name=pulumi.get(__ret__, 'name'),
        org_id=pulumi.get(__ret__, 'org_id'),
        policies=pulumi.get(__ret__, 'policies'),
        version=pulumi.get(__ret__, 'version'))
def get_resource_policy_output(id: Optional[pulumi.Input[str]] = None,
                               org_id: Optional[pulumi.Input[str]] = None,
                               opts: Optional[Union[pulumi.InvokeOptions, pulumi.InvokeOutputOptions]] = None) -> pulumi.Output[GetResourcePolicyResult]:
    """
    ## Example Usage


    :param str id: Unique 24-hexadecimal digit string that identifies an Atlas resource policy.
    :param str org_id: Unique 24-hexadecimal digit string that identifies the organization that contains your projects. Use the /orgs endpoint to retrieve all organizations to which the authenticated user has access.
    """
    __args__ = dict()
    __args__['id'] = id
    __args__['orgId'] = org_id
    opts = pulumi.InvokeOutputOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke_output('mongodbatlas:index/getResourcePolicy:getResourcePolicy', __args__, opts=opts, typ=GetResourcePolicyResult)
    return __ret__.apply(lambda __response__: GetResourcePolicyResult(
        created_by_user=pulumi.get(__response__, 'created_by_user'),
        created_date=pulumi.get(__response__, 'created_date'),
        id=pulumi.get(__response__, 'id'),
        last_updated_by_user=pulumi.get(__response__, 'last_updated_by_user'),
        last_updated_date=pulumi.get(__response__, 'last_updated_date'),
        name=pulumi.get(__response__, 'name'),
        org_id=pulumi.get(__response__, 'org_id'),
        policies=pulumi.get(__response__, 'policies'),
        version=pulumi.get(__response__, 'version')))
