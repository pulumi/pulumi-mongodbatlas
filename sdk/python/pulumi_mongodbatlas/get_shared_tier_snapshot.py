# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import copy
import warnings
import pulumi
import pulumi.runtime
from typing import Any, Callable, Mapping, Optional, Sequence, Union, overload
from . import _utilities

__all__ = [
    'GetSharedTierSnapshotResult',
    'AwaitableGetSharedTierSnapshotResult',
    'get_shared_tier_snapshot',
    'get_shared_tier_snapshot_output',
]

@pulumi.output_type
class GetSharedTierSnapshotResult:
    """
    A collection of values returned by getSharedTierSnapshot.
    """
    def __init__(__self__, cluster_name=None, expiration=None, finish_time=None, id=None, mongo_db_version=None, project_id=None, scheduled_time=None, snapshot_id=None, start_time=None, status=None):
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        pulumi.set(__self__, "cluster_name", cluster_name)
        if expiration and not isinstance(expiration, str):
            raise TypeError("Expected argument 'expiration' to be a str")
        pulumi.set(__self__, "expiration", expiration)
        if finish_time and not isinstance(finish_time, str):
            raise TypeError("Expected argument 'finish_time' to be a str")
        pulumi.set(__self__, "finish_time", finish_time)
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        pulumi.set(__self__, "id", id)
        if mongo_db_version and not isinstance(mongo_db_version, str):
            raise TypeError("Expected argument 'mongo_db_version' to be a str")
        pulumi.set(__self__, "mongo_db_version", mongo_db_version)
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        pulumi.set(__self__, "project_id", project_id)
        if scheduled_time and not isinstance(scheduled_time, str):
            raise TypeError("Expected argument 'scheduled_time' to be a str")
        pulumi.set(__self__, "scheduled_time", scheduled_time)
        if snapshot_id and not isinstance(snapshot_id, str):
            raise TypeError("Expected argument 'snapshot_id' to be a str")
        pulumi.set(__self__, "snapshot_id", snapshot_id)
        if start_time and not isinstance(start_time, str):
            raise TypeError("Expected argument 'start_time' to be a str")
        pulumi.set(__self__, "start_time", start_time)
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        pulumi.set(__self__, "status", status)

    @property
    @pulumi.getter(name="clusterName")
    def cluster_name(self) -> str:
        return pulumi.get(self, "cluster_name")

    @property
    @pulumi.getter
    def expiration(self) -> str:
        return pulumi.get(self, "expiration")

    @property
    @pulumi.getter(name="finishTime")
    def finish_time(self) -> str:
        return pulumi.get(self, "finish_time")

    @property
    @pulumi.getter
    def id(self) -> str:
        """
        The provider-assigned unique ID for this managed resource.
        """
        return pulumi.get(self, "id")

    @property
    @pulumi.getter(name="mongoDbVersion")
    def mongo_db_version(self) -> str:
        return pulumi.get(self, "mongo_db_version")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> str:
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter(name="scheduledTime")
    def scheduled_time(self) -> str:
        return pulumi.get(self, "scheduled_time")

    @property
    @pulumi.getter(name="snapshotId")
    def snapshot_id(self) -> str:
        return pulumi.get(self, "snapshot_id")

    @property
    @pulumi.getter(name="startTime")
    def start_time(self) -> str:
        return pulumi.get(self, "start_time")

    @property
    @pulumi.getter
    def status(self) -> str:
        return pulumi.get(self, "status")


class AwaitableGetSharedTierSnapshotResult(GetSharedTierSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetSharedTierSnapshotResult(
            cluster_name=self.cluster_name,
            expiration=self.expiration,
            finish_time=self.finish_time,
            id=self.id,
            mongo_db_version=self.mongo_db_version,
            project_id=self.project_id,
            scheduled_time=self.scheduled_time,
            snapshot_id=self.snapshot_id,
            start_time=self.start_time,
            status=self.status)


def get_shared_tier_snapshot(cluster_name: Optional[str] = None,
                             project_id: Optional[str] = None,
                             snapshot_id: Optional[str] = None,
                             opts: Optional[pulumi.InvokeOptions] = None) -> AwaitableGetSharedTierSnapshotResult:
    """
    Use this data source to access information about an existing resource.
    """
    __args__ = dict()
    __args__['clusterName'] = cluster_name
    __args__['projectId'] = project_id
    __args__['snapshotId'] = snapshot_id
    opts = pulumi.InvokeOptions.merge(_utilities.get_invoke_opts_defaults(), opts)
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getSharedTierSnapshot:getSharedTierSnapshot', __args__, opts=opts, typ=GetSharedTierSnapshotResult).value

    return AwaitableGetSharedTierSnapshotResult(
        cluster_name=pulumi.get(__ret__, 'cluster_name'),
        expiration=pulumi.get(__ret__, 'expiration'),
        finish_time=pulumi.get(__ret__, 'finish_time'),
        id=pulumi.get(__ret__, 'id'),
        mongo_db_version=pulumi.get(__ret__, 'mongo_db_version'),
        project_id=pulumi.get(__ret__, 'project_id'),
        scheduled_time=pulumi.get(__ret__, 'scheduled_time'),
        snapshot_id=pulumi.get(__ret__, 'snapshot_id'),
        start_time=pulumi.get(__ret__, 'start_time'),
        status=pulumi.get(__ret__, 'status'))


@_utilities.lift_output_func(get_shared_tier_snapshot)
def get_shared_tier_snapshot_output(cluster_name: Optional[pulumi.Input[str]] = None,
                                    project_id: Optional[pulumi.Input[str]] = None,
                                    snapshot_id: Optional[pulumi.Input[str]] = None,
                                    opts: Optional[pulumi.InvokeOptions] = None) -> pulumi.Output[GetSharedTierSnapshotResult]:
    """
    Use this data source to access information about an existing resource.
    """
    ...
