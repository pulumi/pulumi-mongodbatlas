# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import json
import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetCloudProviderSnapshotResult:
    """
    A collection of values returned by getCloudProviderSnapshot.
    """
    def __init__(__self__, cluster_name=None, created_at=None, description=None, expires_at=None, id=None, master_key_uuid=None, mongod_version=None, project_id=None, snapshot_id=None, snapshot_type=None, status=None, storage_size_bytes=None, type=None):
        if cluster_name and not isinstance(cluster_name, str):
            raise TypeError("Expected argument 'cluster_name' to be a str")
        __self__.cluster_name = cluster_name
        if created_at and not isinstance(created_at, str):
            raise TypeError("Expected argument 'created_at' to be a str")
        __self__.created_at = created_at
        """
        UTC ISO 8601 formatted point in time when Atlas took the snapshot.
        """
        if description and not isinstance(description, str):
            raise TypeError("Expected argument 'description' to be a str")
        __self__.description = description
        """
        UDescription of the snapshot. Only present for on-demand snapshots.
        """
        if expires_at and not isinstance(expires_at, str):
            raise TypeError("Expected argument 'expires_at' to be a str")
        __self__.expires_at = expires_at
        """
        UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if master_key_uuid and not isinstance(master_key_uuid, str):
            raise TypeError("Expected argument 'master_key_uuid' to be a str")
        __self__.master_key_uuid = master_key_uuid
        """
        Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
        """
        if mongod_version and not isinstance(mongod_version, str):
            raise TypeError("Expected argument 'mongod_version' to be a str")
        __self__.mongod_version = mongod_version
        """
        Version of the MongoDB server.
        """
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        __self__.project_id = project_id
        if snapshot_id and not isinstance(snapshot_id, str):
            raise TypeError("Expected argument 'snapshot_id' to be a str")
        __self__.snapshot_id = snapshot_id
        if snapshot_type and not isinstance(snapshot_type, str):
            raise TypeError("Expected argument 'snapshot_type' to be a str")
        __self__.snapshot_type = snapshot_type
        """
        Specified the type of snapshot. Valid values are onDemand and scheduled.
        """
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        """
        Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.
        """
        if storage_size_bytes and not isinstance(storage_size_bytes, float):
            raise TypeError("Expected argument 'storage_size_bytes' to be a float")
        __self__.storage_size_bytes = storage_size_bytes
        """
        Specifies the size of the snapshot in bytes.
        """
        if type and not isinstance(type, str):
            raise TypeError("Expected argument 'type' to be a str")
        __self__.type = type
        """
        Specifies the type of cluster: replicaSet or shardedCluster.
        """
class AwaitableGetCloudProviderSnapshotResult(GetCloudProviderSnapshotResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetCloudProviderSnapshotResult(
            cluster_name=self.cluster_name,
            created_at=self.created_at,
            description=self.description,
            expires_at=self.expires_at,
            id=self.id,
            master_key_uuid=self.master_key_uuid,
            mongod_version=self.mongod_version,
            project_id=self.project_id,
            snapshot_id=self.snapshot_id,
            snapshot_type=self.snapshot_type,
            status=self.status,
            storage_size_bytes=self.storage_size_bytes,
            type=self.type)

def get_cloud_provider_snapshot(cluster_name=None,project_id=None,snapshot_id=None,opts=None):
    """
    `.CloudProviderSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the clusterâ€™s cloud service.

    > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.




    :param str cluster_name: The name of the Atlas cluster that contains the snapshot you want to retrieve.
    :param str snapshot_id: The unique identifier of the snapshot you want to retrieve.
    """
    __args__ = dict()


    __args__['clusterName'] = cluster_name
    __args__['projectId'] = project_id
    __args__['snapshotId'] = snapshot_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getCloudProviderSnapshot:getCloudProviderSnapshot', __args__, opts=opts).value

    return AwaitableGetCloudProviderSnapshotResult(
        cluster_name=__ret__.get('clusterName'),
        created_at=__ret__.get('createdAt'),
        description=__ret__.get('description'),
        expires_at=__ret__.get('expiresAt'),
        id=__ret__.get('id'),
        master_key_uuid=__ret__.get('masterKeyUuid'),
        mongod_version=__ret__.get('mongodVersion'),
        project_id=__ret__.get('projectId'),
        snapshot_id=__ret__.get('snapshotId'),
        snapshot_type=__ret__.get('snapshotType'),
        status=__ret__.get('status'),
        storage_size_bytes=__ret__.get('storageSizeBytes'),
        type=__ret__.get('type'))
