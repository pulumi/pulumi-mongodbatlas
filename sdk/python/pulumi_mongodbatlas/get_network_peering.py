# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetNetworkPeeringResult:
    """
    A collection of values returned by getNetworkPeering.
    """
    def __init__(__self__, accepter_region_name=None, atlas_cidr_block=None, atlas_id=None, aws_account_id=None, azure_directory_id=None, azure_subscription_id=None, connection_id=None, container_id=None, error_message=None, error_state=None, error_state_name=None, gcp_project_id=None, id=None, network_name=None, peering_id=None, project_id=None, provider_name=None, resource_group_name=None, route_table_cidr_block=None, status=None, status_name=None, vnet_name=None, vpc_id=None):
        if accepter_region_name and not isinstance(accepter_region_name, str):
            raise TypeError("Expected argument 'accepter_region_name' to be a str")
        __self__.accepter_region_name = accepter_region_name
        """
        Specifies the region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
        """
        if atlas_cidr_block and not isinstance(atlas_cidr_block, str):
            raise TypeError("Expected argument 'atlas_cidr_block' to be a str")
        __self__.atlas_cidr_block = atlas_cidr_block
        """
        Unique identifier for an Azure AD directory.
        """
        if atlas_id and not isinstance(atlas_id, str):
            raise TypeError("Expected argument 'atlas_id' to be a str")
        __self__.atlas_id = atlas_id
        if aws_account_id and not isinstance(aws_account_id, str):
            raise TypeError("Expected argument 'aws_account_id' to be a str")
        __self__.aws_account_id = aws_account_id
        """
        Account ID of the owner of the peer VPC.
        """
        if azure_directory_id and not isinstance(azure_directory_id, str):
            raise TypeError("Expected argument 'azure_directory_id' to be a str")
        __self__.azure_directory_id = azure_directory_id
        """
        Unique identifier for an Azure AD directory.
        """
        if azure_subscription_id and not isinstance(azure_subscription_id, str):
            raise TypeError("Expected argument 'azure_subscription_id' to be a str")
        __self__.azure_subscription_id = azure_subscription_id
        """
        Unique identifer of the Azure subscription in which the VNet resides.
        """
        if connection_id and not isinstance(connection_id, str):
            raise TypeError("Expected argument 'connection_id' to be a str")
        __self__.connection_id = connection_id
        """
        Unique identifier for the peering connection.
        """
        if container_id and not isinstance(container_id, str):
            raise TypeError("Expected argument 'container_id' to be a str")
        __self__.container_id = container_id
        if error_message and not isinstance(error_message, str):
            raise TypeError("Expected argument 'error_message' to be a str")
        __self__.error_message = error_message
        """
        When `"status" : "FAILED"`, Atlas provides a description of the error.
        """
        if error_state and not isinstance(error_state, str):
            raise TypeError("Expected argument 'error_state' to be a str")
        __self__.error_state = error_state
        """
        Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
        """
        if error_state_name and not isinstance(error_state_name, str):
            raise TypeError("Expected argument 'error_state_name' to be a str")
        __self__.error_state_name = error_state_name
        """
        Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
        """
        if gcp_project_id and not isinstance(gcp_project_id, str):
            raise TypeError("Expected argument 'gcp_project_id' to be a str")
        __self__.gcp_project_id = gcp_project_id
        """
        GCP project ID of the owner of the network peer.
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if network_name and not isinstance(network_name, str):
            raise TypeError("Expected argument 'network_name' to be a str")
        __self__.network_name = network_name
        """
        Name of the network peer to which Atlas connects.
        """
        if peering_id and not isinstance(peering_id, str):
            raise TypeError("Expected argument 'peering_id' to be a str")
        __self__.peering_id = peering_id
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        __self__.project_id = project_id
        if provider_name and not isinstance(provider_name, str):
            raise TypeError("Expected argument 'provider_name' to be a str")
        __self__.provider_name = provider_name
        """
        Cloud provider for this VPC peering connection. If omitted, Atlas sets this parameter to AWS. (Possible Values `AWS`, `AZURE`, `GCP`).
        """
        if resource_group_name and not isinstance(resource_group_name, str):
            raise TypeError("Expected argument 'resource_group_name' to be a str")
        __self__.resource_group_name = resource_group_name
        """
        Name of your Azure resource group.
        """
        if route_table_cidr_block and not isinstance(route_table_cidr_block, str):
            raise TypeError("Expected argument 'route_table_cidr_block' to be a str")
        __self__.route_table_cidr_block = route_table_cidr_block
        """
        Peer VPC CIDR block or subnet.
        """
        if status and not isinstance(status, str):
            raise TypeError("Expected argument 'status' to be a str")
        __self__.status = status
        """
        Status of the Atlas network peering connection: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING`, `WAITING_FOR_USER`.
        """
        if status_name and not isinstance(status_name, str):
            raise TypeError("Expected argument 'status_name' to be a str")
        __self__.status_name = status_name
        """
        The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
        """
        if vnet_name and not isinstance(vnet_name, str):
            raise TypeError("Expected argument 'vnet_name' to be a str")
        __self__.vnet_name = vnet_name
        """
        Name of your Azure VNet.
        """
        if vpc_id and not isinstance(vpc_id, str):
            raise TypeError("Expected argument 'vpc_id' to be a str")
        __self__.vpc_id = vpc_id
        """
        Unique identifier of the peer VPC.
        """
class AwaitableGetNetworkPeeringResult(GetNetworkPeeringResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetNetworkPeeringResult(
            accepter_region_name=self.accepter_region_name,
            atlas_cidr_block=self.atlas_cidr_block,
            atlas_id=self.atlas_id,
            aws_account_id=self.aws_account_id,
            azure_directory_id=self.azure_directory_id,
            azure_subscription_id=self.azure_subscription_id,
            connection_id=self.connection_id,
            container_id=self.container_id,
            error_message=self.error_message,
            error_state=self.error_state,
            error_state_name=self.error_state_name,
            gcp_project_id=self.gcp_project_id,
            id=self.id,
            network_name=self.network_name,
            peering_id=self.peering_id,
            project_id=self.project_id,
            provider_name=self.provider_name,
            resource_group_name=self.resource_group_name,
            route_table_cidr_block=self.route_table_cidr_block,
            status=self.status,
            status_name=self.status_name,
            vnet_name=self.vnet_name,
            vpc_id=self.vpc_id)

def get_network_peering(peering_id=None,project_id=None,opts=None):
    """
    `NetworkPeering` describes a Network Peering Connection.

    > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.

    ## Example Usage


    :param str peering_id: Atlas assigned unique ID for the peering connection.
    :param str project_id: The unique ID for the project to create the database user.
    """
    __args__ = dict()


    __args__['peeringId'] = peering_id
    __args__['projectId'] = project_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getNetworkPeering:getNetworkPeering', __args__, opts=opts).value

    return AwaitableGetNetworkPeeringResult(
        accepter_region_name=__ret__.get('accepterRegionName'),
        atlas_cidr_block=__ret__.get('atlasCidrBlock'),
        atlas_id=__ret__.get('atlasId'),
        aws_account_id=__ret__.get('awsAccountId'),
        azure_directory_id=__ret__.get('azureDirectoryId'),
        azure_subscription_id=__ret__.get('azureSubscriptionId'),
        connection_id=__ret__.get('connectionId'),
        container_id=__ret__.get('containerId'),
        error_message=__ret__.get('errorMessage'),
        error_state=__ret__.get('errorState'),
        error_state_name=__ret__.get('errorStateName'),
        gcp_project_id=__ret__.get('gcpProjectId'),
        id=__ret__.get('id'),
        network_name=__ret__.get('networkName'),
        peering_id=__ret__.get('peeringId'),
        project_id=__ret__.get('projectId'),
        provider_name=__ret__.get('providerName'),
        resource_group_name=__ret__.get('resourceGroupName'),
        route_table_cidr_block=__ret__.get('routeTableCidrBlock'),
        status=__ret__.get('status'),
        status_name=__ret__.get('statusName'),
        vnet_name=__ret__.get('vnetName'),
        vpc_id=__ret__.get('vpcId'))
