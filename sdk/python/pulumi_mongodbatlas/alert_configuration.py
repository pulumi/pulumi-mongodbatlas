# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Any, Mapping, Optional, Sequence, Union
from . import _utilities, _tables
from . import outputs
from ._inputs import *

__all__ = ['AlertConfiguration']


class AlertConfiguration(pulumi.CustomResource):
    def __init__(__self__,
                 resource_name: str,
                 opts: Optional[pulumi.ResourceOptions] = None,
                 enabled: Optional[pulumi.Input[bool]] = None,
                 event_type: Optional[pulumi.Input[str]] = None,
                 matchers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertConfigurationMatcherArgs']]]]] = None,
                 metric_threshold: Optional[pulumi.Input[pulumi.InputType['AlertConfigurationMetricThresholdArgs']]] = None,
                 notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertConfigurationNotificationArgs']]]]] = None,
                 project_id: Optional[pulumi.Input[str]] = None,
                 threshold: Optional[pulumi.Input[pulumi.InputType['AlertConfigurationThresholdArgs']]] = None,
                 __props__=None,
                 __name__=None,
                 __opts__=None):
        """
        `AlertConfiguration` provides an Alert Configuration resource to define the conditions that trigger an alert and the methods of notification within a MongoDB Atlas project.

        > **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.

        ## Example Usage

        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        test = mongodbatlas.AlertConfiguration("test",
            enabled=True,
            event_type="OUTSIDE_METRIC_THRESHOLD",
            matchers=[mongodbatlas.AlertConfigurationMatcherArgs(
                field_name="HOSTNAME_AND_PORT",
                operator="EQUALS",
                value="SECONDARY",
            )],
            metric_threshold=mongodbatlas.AlertConfigurationMetricThresholdArgs(
                metric_name="ASSERT_REGULAR",
                mode="AVERAGE",
                operator="LESS_THAN",
                threshold=99,
                units="RAW",
            ),
            notifications=[mongodbatlas.AlertConfigurationNotificationArgs(
                delay_min=0,
                email_enabled=True,
                interval_min=5,
                roles=[
                    "GROUP_CHARTS_ADMIN",
                    "GROUP_CLUSTER_MANAGER",
                ],
                sms_enabled=False,
                type_name="GROUP",
            )],
            project_id="<PROJECT-ID>")
        ```

        > **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/

        ```python
        import pulumi
        import pulumi_mongodbatlas as mongodbatlas

        test = mongodbatlas.AlertConfiguration("test",
            enabled=True,
            event_type="REPLICATION_OPLOG_WINDOW_RUNNING_OUT",
            matchers=[mongodbatlas.AlertConfigurationMatcherArgs(
                field_name="HOSTNAME_AND_PORT",
                operator="EQUALS",
                value="SECONDARY",
            )],
            notifications=[mongodbatlas.AlertConfigurationNotificationArgs(
                delay_min=0,
                email_enabled=True,
                interval_min=5,
                roles=[
                    "GROUP_CHARTS_ADMIN",
                    "GROUP_CLUSTER_MANAGER",
                ],
                sms_enabled=False,
                type_name="GROUP",
            )],
            project_id="<PROJECT-ID>",
            threshold=mongodbatlas.AlertConfigurationThresholdArgs(
                operator="LESS_THAN",
                threshold=1,
                units="HOURS",
            ))
        ```

        :param str resource_name: The name of the resource.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[bool] enabled: It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
        :param pulumi.Input[str] event_type: The type of event that will trigger an alert.
        :param pulumi.Input[str] project_id: The ID of the project where the alert configuration will create.
        :param pulumi.Input[pulumi.InputType['AlertConfigurationThresholdArgs']] threshold: Threshold value outside of which an alert will be triggered.
        """
        if __name__ is not None:
            warnings.warn("explicit use of __name__ is deprecated", DeprecationWarning)
            resource_name = __name__
        if __opts__ is not None:
            warnings.warn("explicit use of __opts__ is deprecated, use 'opts' instead", DeprecationWarning)
            opts = __opts__
        if opts is None:
            opts = pulumi.ResourceOptions()
        if not isinstance(opts, pulumi.ResourceOptions):
            raise TypeError('Expected resource options to be a ResourceOptions instance')
        if opts.version is None:
            opts.version = _utilities.get_version()
        if opts.id is None:
            if __props__ is not None:
                raise TypeError('__props__ is only valid when passed in combination with a valid opts.id to get an existing resource')
            __props__ = dict()

            __props__['enabled'] = enabled
            if event_type is None:
                raise TypeError("Missing required property 'event_type'")
            __props__['event_type'] = event_type
            __props__['matchers'] = matchers
            __props__['metric_threshold'] = metric_threshold
            if notifications is None:
                raise TypeError("Missing required property 'notifications'")
            __props__['notifications'] = notifications
            if project_id is None:
                raise TypeError("Missing required property 'project_id'")
            __props__['project_id'] = project_id
            __props__['threshold'] = threshold
            __props__['alert_configuration_id'] = None
            __props__['created'] = None
            __props__['updated'] = None
        super(AlertConfiguration, __self__).__init__(
            'mongodbatlas:index/alertConfiguration:AlertConfiguration',
            resource_name,
            __props__,
            opts)

    @staticmethod
    def get(resource_name: str,
            id: pulumi.Input[str],
            opts: Optional[pulumi.ResourceOptions] = None,
            alert_configuration_id: Optional[pulumi.Input[str]] = None,
            created: Optional[pulumi.Input[str]] = None,
            enabled: Optional[pulumi.Input[bool]] = None,
            event_type: Optional[pulumi.Input[str]] = None,
            matchers: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertConfigurationMatcherArgs']]]]] = None,
            metric_threshold: Optional[pulumi.Input[pulumi.InputType['AlertConfigurationMetricThresholdArgs']]] = None,
            notifications: Optional[pulumi.Input[Sequence[pulumi.Input[pulumi.InputType['AlertConfigurationNotificationArgs']]]]] = None,
            project_id: Optional[pulumi.Input[str]] = None,
            threshold: Optional[pulumi.Input[pulumi.InputType['AlertConfigurationThresholdArgs']]] = None,
            updated: Optional[pulumi.Input[str]] = None) -> 'AlertConfiguration':
        """
        Get an existing AlertConfiguration resource's state with the given name, id, and optional extra
        properties used to qualify the lookup.

        :param str resource_name: The unique name of the resulting resource.
        :param pulumi.Input[str] id: The unique provider ID of the resource to lookup.
        :param pulumi.ResourceOptions opts: Options for the resource.
        :param pulumi.Input[str] alert_configuration_id: Unique identifier for the alert configuration.
        :param pulumi.Input[str] created: Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
        :param pulumi.Input[bool] enabled: It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
        :param pulumi.Input[str] event_type: The type of event that will trigger an alert.
        :param pulumi.Input[str] project_id: The ID of the project where the alert configuration will create.
        :param pulumi.Input[pulumi.InputType['AlertConfigurationThresholdArgs']] threshold: Threshold value outside of which an alert will be triggered.
        :param pulumi.Input[str] updated: Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
        """
        opts = pulumi.ResourceOptions.merge(opts, pulumi.ResourceOptions(id=id))

        __props__ = dict()

        __props__["alert_configuration_id"] = alert_configuration_id
        __props__["created"] = created
        __props__["enabled"] = enabled
        __props__["event_type"] = event_type
        __props__["matchers"] = matchers
        __props__["metric_threshold"] = metric_threshold
        __props__["notifications"] = notifications
        __props__["project_id"] = project_id
        __props__["threshold"] = threshold
        __props__["updated"] = updated
        return AlertConfiguration(resource_name, opts=opts, __props__=__props__)

    @property
    @pulumi.getter(name="alertConfigurationId")
    def alert_configuration_id(self) -> pulumi.Output[str]:
        """
        Unique identifier for the alert configuration.
        """
        return pulumi.get(self, "alert_configuration_id")

    @property
    @pulumi.getter
    def created(self) -> pulumi.Output[str]:
        """
        Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
        """
        return pulumi.get(self, "created")

    @property
    @pulumi.getter
    def enabled(self) -> pulumi.Output[bool]:
        """
        It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
        """
        return pulumi.get(self, "enabled")

    @property
    @pulumi.getter(name="eventType")
    def event_type(self) -> pulumi.Output[str]:
        """
        The type of event that will trigger an alert.
        """
        return pulumi.get(self, "event_type")

    @property
    @pulumi.getter
    def matchers(self) -> pulumi.Output[Optional[Sequence['outputs.AlertConfigurationMatcher']]]:
        return pulumi.get(self, "matchers")

    @property
    @pulumi.getter(name="metricThreshold")
    def metric_threshold(self) -> pulumi.Output[Optional['outputs.AlertConfigurationMetricThreshold']]:
        return pulumi.get(self, "metric_threshold")

    @property
    @pulumi.getter
    def notifications(self) -> pulumi.Output[Sequence['outputs.AlertConfigurationNotification']]:
        return pulumi.get(self, "notifications")

    @property
    @pulumi.getter(name="projectId")
    def project_id(self) -> pulumi.Output[str]:
        """
        The ID of the project where the alert configuration will create.
        """
        return pulumi.get(self, "project_id")

    @property
    @pulumi.getter
    def threshold(self) -> pulumi.Output[Optional['outputs.AlertConfigurationThreshold']]:
        """
        Threshold value outside of which an alert will be triggered.
        """
        return pulumi.get(self, "threshold")

    @property
    @pulumi.getter
    def updated(self) -> pulumi.Output[str]:
        """
        Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
        """
        return pulumi.get(self, "updated")

    def translate_output_property(self, prop):
        return _tables.CAMEL_TO_SNAKE_CASE_TABLE.get(prop) or prop

    def translate_input_property(self, prop):
        return _tables.SNAKE_TO_CAMEL_CASE_TABLE.get(prop) or prop

