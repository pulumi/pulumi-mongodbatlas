# coding=utf-8
# *** WARNING: this file was generated by the Pulumi Terraform Bridge (tfgen) Tool. ***
# *** Do not edit by hand unless you're certain you know what you are doing! ***

import warnings
import pulumi
import pulumi.runtime
from typing import Union
from . import utilities, tables

class GetAlertConfigurationResult:
    """
    A collection of values returned by getAlertConfiguration.
    """
    def __init__(__self__, alert_configuration_id=None, created=None, enabled=None, event_type=None, id=None, matchers=None, metric_threshold=None, notifications=None, project_id=None, updated=None):
        if alert_configuration_id and not isinstance(alert_configuration_id, str):
            raise TypeError("Expected argument 'alert_configuration_id' to be a str")
        __self__.alert_configuration_id = alert_configuration_id
        if created and not isinstance(created, str):
            raise TypeError("Expected argument 'created' to be a str")
        __self__.created = created
        """
        Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
        """
        if enabled and not isinstance(enabled, bool):
            raise TypeError("Expected argument 'enabled' to be a bool")
        __self__.enabled = enabled
        """
        If set to true, the alert configuration is enabled. If enabled is not exported it is set to false.
        """
        if event_type and not isinstance(event_type, str):
            raise TypeError("Expected argument 'event_type' to be a str")
        __self__.event_type = event_type
        """
        The type of event that will trigger an alert.
        Alert type. Possible values:
        - Host
        - `OUTSIDE_METRIC_THRESHOLD`
        - `HOST_RESTARTED`
        - `HOST_UPGRADED`
        - `HOST_NOW_SECONDARY`
        - `HOST_NOW_PRIMARY`
        - Replica set
        - `NO_PRIMARY`
        - `TOO_MANY_ELECTIONS`
        Sharded cluster
        - `CLUSTER_MONGOS_IS_MISSING`
        - `User`
        - `JOINED_GROUP`
        - `REMOVED_FROM_GROUP`
        - `USER_ROLES_CHANGED_AUDIT`
        - Project
        - `USERS_AWAITING_APPROVAL`
        - `USERS_WITHOUT_MULTI_FACTOR_AUTH`
        - `GROUP_CREATED`
        - Team
        - `JOINED_TEAM`
        - `REMOVED_FROM_TEAM`
        - Organization
        - `INVITED_TO_ORG`
        - `JOINED_ORG`
        - Data Explorer
        - `DATA_EXPLORER`
        - `DATA_EXPLORER_CRUD`
        - Billing
        - `CREDIT_CARD_ABOUT_TO_EXPIRE`
        - `CHARGE_SUCCEEDED`
        - `INVOICE_CLOSED`
        """
        if id and not isinstance(id, str):
            raise TypeError("Expected argument 'id' to be a str")
        __self__.id = id
        """
        The provider-assigned unique ID for this managed resource.
        """
        if matchers and not isinstance(matchers, list):
            raise TypeError("Expected argument 'matchers' to be a list")
        __self__.matchers = matchers
        if metric_threshold and not isinstance(metric_threshold, dict):
            raise TypeError("Expected argument 'metric_threshold' to be a dict")
        __self__.metric_threshold = metric_threshold
        if notifications and not isinstance(notifications, list):
            raise TypeError("Expected argument 'notifications' to be a list")
        __self__.notifications = notifications
        if project_id and not isinstance(project_id, str):
            raise TypeError("Expected argument 'project_id' to be a str")
        __self__.project_id = project_id
        if updated and not isinstance(updated, str):
            raise TypeError("Expected argument 'updated' to be a str")
        __self__.updated = updated
        """
        Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
        """
class AwaitableGetAlertConfigurationResult(GetAlertConfigurationResult):
    # pylint: disable=using-constant-test
    def __await__(self):
        if False:
            yield self
        return GetAlertConfigurationResult(
            alert_configuration_id=self.alert_configuration_id,
            created=self.created,
            enabled=self.enabled,
            event_type=self.event_type,
            id=self.id,
            matchers=self.matchers,
            metric_threshold=self.metric_threshold,
            notifications=self.notifications,
            project_id=self.project_id,
            updated=self.updated)

def get_alert_configuration(alert_configuration_id=None,project_id=None,opts=None):
    """
    `AlertConfiguration` describes an Alert Configuration.

    > **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.


    :param str alert_configuration_id: Unique identifier for the alert configuration.
    :param str project_id: The ID of the project where the alert configuration will create.
    """
    __args__ = dict()


    __args__['alertConfigurationId'] = alert_configuration_id
    __args__['projectId'] = project_id
    if opts is None:
        opts = pulumi.InvokeOptions()
    if opts.version is None:
        opts.version = utilities.get_version()
    __ret__ = pulumi.runtime.invoke('mongodbatlas:index/getAlertConfiguration:getAlertConfiguration', __args__, opts=opts).value

    return AwaitableGetAlertConfigurationResult(
        alert_configuration_id=__ret__.get('alertConfigurationId'),
        created=__ret__.get('created'),
        enabled=__ret__.get('enabled'),
        event_type=__ret__.get('eventType'),
        id=__ret__.get('id'),
        matchers=__ret__.get('matchers'),
        metric_threshold=__ret__.get('metricThreshold'),
        notifications=__ret__.get('notifications'),
        project_id=__ret__.get('projectId'),
        updated=__ret__.get('updated'))
