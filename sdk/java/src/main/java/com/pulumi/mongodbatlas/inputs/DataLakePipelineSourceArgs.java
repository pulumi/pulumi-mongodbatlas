// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataLakePipelineSourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataLakePipelineSourceArgs Empty = new DataLakePipelineSourceArgs();

    /**
     * Human-readable name that identifies the cluster.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    /**
     * @return Human-readable name that identifies the cluster.
     * 
     */
    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * Human-readable name that identifies the collection.
     * 
     */
    @Import(name="collectionName")
    private @Nullable Output<String> collectionName;

    /**
     * @return Human-readable name that identifies the collection.
     * 
     */
    public Optional<Output<String>> collectionName() {
        return Optional.ofNullable(this.collectionName);
    }

    /**
     * Human-readable name that identifies the database.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return Human-readable name that identifies the database.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    @Import(name="policyItemId")
    private @Nullable Output<String> policyItemId;

    public Optional<Output<String>> policyItemId() {
        return Optional.ofNullable(this.policyItemId);
    }

    /**
     * The unique ID for the project to create a data lake pipeline.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The unique ID for the project to create a data lake pipeline.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Type of ingestion source of this Data Lake Pipeline.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of ingestion source of this Data Lake Pipeline.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DataLakePipelineSourceArgs() {}

    private DataLakePipelineSourceArgs(DataLakePipelineSourceArgs $) {
        this.clusterName = $.clusterName;
        this.collectionName = $.collectionName;
        this.databaseName = $.databaseName;
        this.policyItemId = $.policyItemId;
        this.projectId = $.projectId;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataLakePipelineSourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataLakePipelineSourceArgs $;

        public Builder() {
            $ = new DataLakePipelineSourceArgs();
        }

        public Builder(DataLakePipelineSourceArgs defaults) {
            $ = new DataLakePipelineSourceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterName Human-readable name that identifies the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName Human-readable name that identifies the cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param collectionName Human-readable name that identifies the collection.
         * 
         * @return builder
         * 
         */
        public Builder collectionName(@Nullable Output<String> collectionName) {
            $.collectionName = collectionName;
            return this;
        }

        /**
         * @param collectionName Human-readable name that identifies the collection.
         * 
         * @return builder
         * 
         */
        public Builder collectionName(String collectionName) {
            return collectionName(Output.of(collectionName));
        }

        /**
         * @param databaseName Human-readable name that identifies the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName Human-readable name that identifies the database.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public Builder policyItemId(@Nullable Output<String> policyItemId) {
            $.policyItemId = policyItemId;
            return this;
        }

        public Builder policyItemId(String policyItemId) {
            return policyItemId(Output.of(policyItemId));
        }

        /**
         * @param projectId The unique ID for the project to create a data lake pipeline.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The unique ID for the project to create a data lake pipeline.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param type Type of ingestion source of this Data Lake Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of ingestion source of this Data Lake Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DataLakePipelineSourceArgs build() {
            return $;
        }
    }

}
