// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsOrgRoleMappingRoleAssignment;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFederatedSettingsOrgRoleMappingResult {
    /**
     * @return Unique label that identifies the identity provider group to which this role mapping applies.
     * 
     */
    private String externalGroupName;
    private String federationSettingsId;
    /**
     * @return Unique 24-hexadecimal digit string that identifies this role mapping.
     * 
     */
    private String id;
    private String orgId;
    /**
     * @return Atlas roles and the unique identifiers of the groups and organizations associated with each role.
     * 
     */
    private List<GetFederatedSettingsOrgRoleMappingRoleAssignment> roleAssignments;
    private String roleMappingId;

    private GetFederatedSettingsOrgRoleMappingResult() {}
    /**
     * @return Unique label that identifies the identity provider group to which this role mapping applies.
     * 
     */
    public String externalGroupName() {
        return this.externalGroupName;
    }
    public String federationSettingsId() {
        return this.federationSettingsId;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies this role mapping.
     * 
     */
    public String id() {
        return this.id;
    }
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return Atlas roles and the unique identifiers of the groups and organizations associated with each role.
     * 
     */
    public List<GetFederatedSettingsOrgRoleMappingRoleAssignment> roleAssignments() {
        return this.roleAssignments;
    }
    public String roleMappingId() {
        return this.roleMappingId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFederatedSettingsOrgRoleMappingResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String externalGroupName;
        private String federationSettingsId;
        private String id;
        private String orgId;
        private List<GetFederatedSettingsOrgRoleMappingRoleAssignment> roleAssignments;
        private String roleMappingId;
        public Builder() {}
        public Builder(GetFederatedSettingsOrgRoleMappingResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.externalGroupName = defaults.externalGroupName;
    	      this.federationSettingsId = defaults.federationSettingsId;
    	      this.id = defaults.id;
    	      this.orgId = defaults.orgId;
    	      this.roleAssignments = defaults.roleAssignments;
    	      this.roleMappingId = defaults.roleMappingId;
        }

        @CustomType.Setter
        public Builder externalGroupName(String externalGroupName) {
            if (externalGroupName == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgRoleMappingResult", "externalGroupName");
            }
            this.externalGroupName = externalGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder federationSettingsId(String federationSettingsId) {
            if (federationSettingsId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgRoleMappingResult", "federationSettingsId");
            }
            this.federationSettingsId = federationSettingsId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgRoleMappingResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgRoleMappingResult", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder roleAssignments(List<GetFederatedSettingsOrgRoleMappingRoleAssignment> roleAssignments) {
            if (roleAssignments == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgRoleMappingResult", "roleAssignments");
            }
            this.roleAssignments = roleAssignments;
            return this;
        }
        public Builder roleAssignments(GetFederatedSettingsOrgRoleMappingRoleAssignment... roleAssignments) {
            return roleAssignments(List.of(roleAssignments));
        }
        @CustomType.Setter
        public Builder roleMappingId(String roleMappingId) {
            if (roleMappingId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgRoleMappingResult", "roleMappingId");
            }
            this.roleMappingId = roleMappingId;
            return this;
        }
        public GetFederatedSettingsOrgRoleMappingResult build() {
            final var _resultValue = new GetFederatedSettingsOrgRoleMappingResult();
            _resultValue.externalGroupName = externalGroupName;
            _resultValue.federationSettingsId = federationSettingsId;
            _resultValue.id = id;
            _resultValue.orgId = orgId;
            _resultValue.roleAssignments = roleAssignments;
            _resultValue.roleMappingId = roleMappingId;
            return _resultValue;
        }
    }
}
