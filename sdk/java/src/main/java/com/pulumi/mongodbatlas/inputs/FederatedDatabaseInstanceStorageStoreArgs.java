// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.FederatedDatabaseInstanceStorageStoreReadPreferenceArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FederatedDatabaseInstanceStorageStoreArgs extends com.pulumi.resources.ResourceArgs {

    public static final FederatedDatabaseInstanceStorageStoreArgs Empty = new FederatedDatabaseInstanceStorageStoreArgs();

    @Import(name="additionalStorageClasses")
    private @Nullable Output<List<String>> additionalStorageClasses;

    public Optional<Output<List<String>>> additionalStorageClasses() {
        return Optional.ofNullable(this.additionalStorageClasses);
    }

    @Import(name="allowInsecure")
    private @Nullable Output<Boolean> allowInsecure;

    public Optional<Output<Boolean>> allowInsecure() {
        return Optional.ofNullable(this.allowInsecure);
    }

    @Import(name="bucket")
    private @Nullable Output<String> bucket;

    public Optional<Output<String>> bucket() {
        return Optional.ofNullable(this.bucket);
    }

    /**
     * @deprecated
     * This parameter is deprecated and will be removed by September 2024.
     * 
     */
    @Deprecated /* This parameter is deprecated and will be removed by September 2024. */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @deprecated
     * This parameter is deprecated and will be removed by September 2024.
     * 
     */
    @Deprecated /* This parameter is deprecated and will be removed by September 2024. */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    @Import(name="defaultFormat")
    private @Nullable Output<String> defaultFormat;

    public Optional<Output<String>> defaultFormat() {
        return Optional.ofNullable(this.defaultFormat);
    }

    @Import(name="delimiter")
    private @Nullable Output<String> delimiter;

    public Optional<Output<String>> delimiter() {
        return Optional.ofNullable(this.delimiter);
    }

    @Import(name="includeTags")
    private @Nullable Output<Boolean> includeTags;

    public Optional<Output<Boolean>> includeTags() {
        return Optional.ofNullable(this.includeTags);
    }

    /**
     * Name of the Atlas Federated Database Instance.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Atlas Federated Database Instance.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="prefix")
    private @Nullable Output<String> prefix;

    public Optional<Output<String>> prefix() {
        return Optional.ofNullable(this.prefix);
    }

    /**
     * The unique ID for the project to create a Federated Database Instance.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The unique ID for the project to create a Federated Database Instance.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    @Import(name="provider")
    private @Nullable Output<String> provider;

    public Optional<Output<String>> provider() {
        return Optional.ofNullable(this.provider);
    }

    @Import(name="public")
    private @Nullable Output<String> public_;

    public Optional<Output<String>> public_() {
        return Optional.ofNullable(this.public_);
    }

    @Import(name="readPreference")
    private @Nullable Output<FederatedDatabaseInstanceStorageStoreReadPreferenceArgs> readPreference;

    public Optional<Output<FederatedDatabaseInstanceStorageStoreReadPreferenceArgs>> readPreference() {
        return Optional.ofNullable(this.readPreference);
    }

    @Import(name="region")
    private @Nullable Output<String> region;

    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    @Import(name="urls")
    private @Nullable Output<List<String>> urls;

    public Optional<Output<List<String>>> urls() {
        return Optional.ofNullable(this.urls);
    }

    private FederatedDatabaseInstanceStorageStoreArgs() {}

    private FederatedDatabaseInstanceStorageStoreArgs(FederatedDatabaseInstanceStorageStoreArgs $) {
        this.additionalStorageClasses = $.additionalStorageClasses;
        this.allowInsecure = $.allowInsecure;
        this.bucket = $.bucket;
        this.clusterId = $.clusterId;
        this.clusterName = $.clusterName;
        this.defaultFormat = $.defaultFormat;
        this.delimiter = $.delimiter;
        this.includeTags = $.includeTags;
        this.name = $.name;
        this.prefix = $.prefix;
        this.projectId = $.projectId;
        this.provider = $.provider;
        this.public_ = $.public_;
        this.readPreference = $.readPreference;
        this.region = $.region;
        this.urls = $.urls;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FederatedDatabaseInstanceStorageStoreArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FederatedDatabaseInstanceStorageStoreArgs $;

        public Builder() {
            $ = new FederatedDatabaseInstanceStorageStoreArgs();
        }

        public Builder(FederatedDatabaseInstanceStorageStoreArgs defaults) {
            $ = new FederatedDatabaseInstanceStorageStoreArgs(Objects.requireNonNull(defaults));
        }

        public Builder additionalStorageClasses(@Nullable Output<List<String>> additionalStorageClasses) {
            $.additionalStorageClasses = additionalStorageClasses;
            return this;
        }

        public Builder additionalStorageClasses(List<String> additionalStorageClasses) {
            return additionalStorageClasses(Output.of(additionalStorageClasses));
        }

        public Builder additionalStorageClasses(String... additionalStorageClasses) {
            return additionalStorageClasses(List.of(additionalStorageClasses));
        }

        public Builder allowInsecure(@Nullable Output<Boolean> allowInsecure) {
            $.allowInsecure = allowInsecure;
            return this;
        }

        public Builder allowInsecure(Boolean allowInsecure) {
            return allowInsecure(Output.of(allowInsecure));
        }

        public Builder bucket(@Nullable Output<String> bucket) {
            $.bucket = bucket;
            return this;
        }

        public Builder bucket(String bucket) {
            return bucket(Output.of(bucket));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This parameter is deprecated and will be removed by September 2024.
         * 
         */
        @Deprecated /* This parameter is deprecated and will be removed by September 2024. */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * This parameter is deprecated and will be removed by September 2024.
         * 
         */
        @Deprecated /* This parameter is deprecated and will be removed by September 2024. */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        public Builder defaultFormat(@Nullable Output<String> defaultFormat) {
            $.defaultFormat = defaultFormat;
            return this;
        }

        public Builder defaultFormat(String defaultFormat) {
            return defaultFormat(Output.of(defaultFormat));
        }

        public Builder delimiter(@Nullable Output<String> delimiter) {
            $.delimiter = delimiter;
            return this;
        }

        public Builder delimiter(String delimiter) {
            return delimiter(Output.of(delimiter));
        }

        public Builder includeTags(@Nullable Output<Boolean> includeTags) {
            $.includeTags = includeTags;
            return this;
        }

        public Builder includeTags(Boolean includeTags) {
            return includeTags(Output.of(includeTags));
        }

        /**
         * @param name Name of the Atlas Federated Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Atlas Federated Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder prefix(@Nullable Output<String> prefix) {
            $.prefix = prefix;
            return this;
        }

        public Builder prefix(String prefix) {
            return prefix(Output.of(prefix));
        }

        /**
         * @param projectId The unique ID for the project to create a Federated Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The unique ID for the project to create a Federated Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public Builder provider(@Nullable Output<String> provider) {
            $.provider = provider;
            return this;
        }

        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        public Builder public_(@Nullable Output<String> public_) {
            $.public_ = public_;
            return this;
        }

        public Builder public_(String public_) {
            return public_(Output.of(public_));
        }

        public Builder readPreference(@Nullable Output<FederatedDatabaseInstanceStorageStoreReadPreferenceArgs> readPreference) {
            $.readPreference = readPreference;
            return this;
        }

        public Builder readPreference(FederatedDatabaseInstanceStorageStoreReadPreferenceArgs readPreference) {
            return readPreference(Output.of(readPreference));
        }

        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        public Builder region(String region) {
            return region(Output.of(region));
        }

        public Builder urls(@Nullable Output<List<String>> urls) {
            $.urls = urls;
            return this;
        }

        public Builder urls(List<String> urls) {
            return urls(Output.of(urls));
        }

        public Builder urls(String... urls) {
            return urls(List.of(urls));
        }

        public FederatedDatabaseInstanceStorageStoreArgs build() {
            return $;
        }
    }

}
