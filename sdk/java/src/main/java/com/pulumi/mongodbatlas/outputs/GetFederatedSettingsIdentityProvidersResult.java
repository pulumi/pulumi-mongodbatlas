// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsIdentityProvidersResultAssociatedOrg;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsIdentityProvidersResultPemFileInfo;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFederatedSettingsIdentityProvidersResult {
    /**
     * @return Assertion consumer service URL to which the IdP sends the SAML response.
     * 
     */
    private String acsUrl;
    /**
     * @return List that contains the configured domains from which users can log in for this IdP.
     * 
     */
    private List<String> associatedDomains;
    /**
     * @return List that contains the configured domains from which users can log in for this IdP.
     * 
     */
    private List<GetFederatedSettingsIdentityProvidersResultAssociatedOrg> associatedOrgs;
    /**
     * @return Identifier for the intended audience of the SAML Assertion.
     * 
     */
    private String audienceUri;
    /**
     * @return Human-readable label that identifies the IdP.
     * 
     */
    private String displayName;
    /**
     * @return Identifier for the issuer of the SAML Assertion.
     * 
     */
    private String issuerUri;
    private String oktaIdpId;
    private List<GetFederatedSettingsIdentityProvidersResultPemFileInfo> pemFileInfos;
    /**
     * @return SAML Authentication Request Protocol binding used to send the AuthNRequest. Atlas supports the following binding values:
     * - HTTP POST
     * - HTTP REDIRECT
     * 
     */
    private String requestBinding;
    /**
     * @return Algorithm used to encrypt the IdP signature. Atlas supports the following signature algorithm values:
     * - SHA-1
     * - SHA-256
     * 
     */
    private String responseSignatureAlgorithm;
    /**
     * @return Flag that indicates whether the IdP has enabled Bypass SAML Mode. Enabling this mode generates a URL that allows you bypass SAML and login to your organizations at any point. You can authenticate with this special URL only when Bypass Mode is enabled. Set this parameter to true during testing. This keeps you from getting locked out of MongoDB.
     * 
     */
    private Boolean ssoDebugEnabled;
    /**
     * @return URL of the receiver of the SAML AuthNRequest.
     * 
     */
    private String ssoUrl;
    /**
     * @return Label that indicates whether the identity provider is active. The IdP is Inactive until you map at least one domain to the IdP.
     * 
     */
    private String status;

    private GetFederatedSettingsIdentityProvidersResult() {}
    /**
     * @return Assertion consumer service URL to which the IdP sends the SAML response.
     * 
     */
    public String acsUrl() {
        return this.acsUrl;
    }
    /**
     * @return List that contains the configured domains from which users can log in for this IdP.
     * 
     */
    public List<String> associatedDomains() {
        return this.associatedDomains;
    }
    /**
     * @return List that contains the configured domains from which users can log in for this IdP.
     * 
     */
    public List<GetFederatedSettingsIdentityProvidersResultAssociatedOrg> associatedOrgs() {
        return this.associatedOrgs;
    }
    /**
     * @return Identifier for the intended audience of the SAML Assertion.
     * 
     */
    public String audienceUri() {
        return this.audienceUri;
    }
    /**
     * @return Human-readable label that identifies the IdP.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Identifier for the issuer of the SAML Assertion.
     * 
     */
    public String issuerUri() {
        return this.issuerUri;
    }
    public String oktaIdpId() {
        return this.oktaIdpId;
    }
    public List<GetFederatedSettingsIdentityProvidersResultPemFileInfo> pemFileInfos() {
        return this.pemFileInfos;
    }
    /**
     * @return SAML Authentication Request Protocol binding used to send the AuthNRequest. Atlas supports the following binding values:
     * - HTTP POST
     * - HTTP REDIRECT
     * 
     */
    public String requestBinding() {
        return this.requestBinding;
    }
    /**
     * @return Algorithm used to encrypt the IdP signature. Atlas supports the following signature algorithm values:
     * - SHA-1
     * - SHA-256
     * 
     */
    public String responseSignatureAlgorithm() {
        return this.responseSignatureAlgorithm;
    }
    /**
     * @return Flag that indicates whether the IdP has enabled Bypass SAML Mode. Enabling this mode generates a URL that allows you bypass SAML and login to your organizations at any point. You can authenticate with this special URL only when Bypass Mode is enabled. Set this parameter to true during testing. This keeps you from getting locked out of MongoDB.
     * 
     */
    public Boolean ssoDebugEnabled() {
        return this.ssoDebugEnabled;
    }
    /**
     * @return URL of the receiver of the SAML AuthNRequest.
     * 
     */
    public String ssoUrl() {
        return this.ssoUrl;
    }
    /**
     * @return Label that indicates whether the identity provider is active. The IdP is Inactive until you map at least one domain to the IdP.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFederatedSettingsIdentityProvidersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acsUrl;
        private List<String> associatedDomains;
        private List<GetFederatedSettingsIdentityProvidersResultAssociatedOrg> associatedOrgs;
        private String audienceUri;
        private String displayName;
        private String issuerUri;
        private String oktaIdpId;
        private List<GetFederatedSettingsIdentityProvidersResultPemFileInfo> pemFileInfos;
        private String requestBinding;
        private String responseSignatureAlgorithm;
        private Boolean ssoDebugEnabled;
        private String ssoUrl;
        private String status;
        public Builder() {}
        public Builder(GetFederatedSettingsIdentityProvidersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acsUrl = defaults.acsUrl;
    	      this.associatedDomains = defaults.associatedDomains;
    	      this.associatedOrgs = defaults.associatedOrgs;
    	      this.audienceUri = defaults.audienceUri;
    	      this.displayName = defaults.displayName;
    	      this.issuerUri = defaults.issuerUri;
    	      this.oktaIdpId = defaults.oktaIdpId;
    	      this.pemFileInfos = defaults.pemFileInfos;
    	      this.requestBinding = defaults.requestBinding;
    	      this.responseSignatureAlgorithm = defaults.responseSignatureAlgorithm;
    	      this.ssoDebugEnabled = defaults.ssoDebugEnabled;
    	      this.ssoUrl = defaults.ssoUrl;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder acsUrl(String acsUrl) {
            this.acsUrl = Objects.requireNonNull(acsUrl);
            return this;
        }
        @CustomType.Setter
        public Builder associatedDomains(List<String> associatedDomains) {
            this.associatedDomains = Objects.requireNonNull(associatedDomains);
            return this;
        }
        public Builder associatedDomains(String... associatedDomains) {
            return associatedDomains(List.of(associatedDomains));
        }
        @CustomType.Setter
        public Builder associatedOrgs(List<GetFederatedSettingsIdentityProvidersResultAssociatedOrg> associatedOrgs) {
            this.associatedOrgs = Objects.requireNonNull(associatedOrgs);
            return this;
        }
        public Builder associatedOrgs(GetFederatedSettingsIdentityProvidersResultAssociatedOrg... associatedOrgs) {
            return associatedOrgs(List.of(associatedOrgs));
        }
        @CustomType.Setter
        public Builder audienceUri(String audienceUri) {
            this.audienceUri = Objects.requireNonNull(audienceUri);
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            this.displayName = Objects.requireNonNull(displayName);
            return this;
        }
        @CustomType.Setter
        public Builder issuerUri(String issuerUri) {
            this.issuerUri = Objects.requireNonNull(issuerUri);
            return this;
        }
        @CustomType.Setter
        public Builder oktaIdpId(String oktaIdpId) {
            this.oktaIdpId = Objects.requireNonNull(oktaIdpId);
            return this;
        }
        @CustomType.Setter
        public Builder pemFileInfos(List<GetFederatedSettingsIdentityProvidersResultPemFileInfo> pemFileInfos) {
            this.pemFileInfos = Objects.requireNonNull(pemFileInfos);
            return this;
        }
        public Builder pemFileInfos(GetFederatedSettingsIdentityProvidersResultPemFileInfo... pemFileInfos) {
            return pemFileInfos(List.of(pemFileInfos));
        }
        @CustomType.Setter
        public Builder requestBinding(String requestBinding) {
            this.requestBinding = Objects.requireNonNull(requestBinding);
            return this;
        }
        @CustomType.Setter
        public Builder responseSignatureAlgorithm(String responseSignatureAlgorithm) {
            this.responseSignatureAlgorithm = Objects.requireNonNull(responseSignatureAlgorithm);
            return this;
        }
        @CustomType.Setter
        public Builder ssoDebugEnabled(Boolean ssoDebugEnabled) {
            this.ssoDebugEnabled = Objects.requireNonNull(ssoDebugEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder ssoUrl(String ssoUrl) {
            this.ssoUrl = Objects.requireNonNull(ssoUrl);
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            this.status = Objects.requireNonNull(status);
            return this;
        }
        public GetFederatedSettingsIdentityProvidersResult build() {
            final var _resultValue = new GetFederatedSettingsIdentityProvidersResult();
            _resultValue.acsUrl = acsUrl;
            _resultValue.associatedDomains = associatedDomains;
            _resultValue.associatedOrgs = associatedOrgs;
            _resultValue.audienceUri = audienceUri;
            _resultValue.displayName = displayName;
            _resultValue.issuerUri = issuerUri;
            _resultValue.oktaIdpId = oktaIdpId;
            _resultValue.pemFileInfos = pemFileInfos;
            _resultValue.requestBinding = requestBinding;
            _resultValue.responseSignatureAlgorithm = responseSignatureAlgorithm;
            _resultValue.ssoDebugEnabled = ssoDebugEnabled;
            _resultValue.ssoUrl = ssoUrl;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
