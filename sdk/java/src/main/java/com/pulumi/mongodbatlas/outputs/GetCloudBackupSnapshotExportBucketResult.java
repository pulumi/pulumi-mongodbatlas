// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetCloudBackupSnapshotExportBucketResult {
    /**
     * @return Name of the bucket that the provided role ID is authorized to access.
     * 
     */
    private String bucketName;
    /**
     * @return Name of the provider of the cloud service where Atlas can access the S3 bucket.
     * 
     */
    private String cloudProvider;
    private String exportBucketId;
    /**
     * @return Unique identifier of the role that Atlas can use to access the bucket.
     * 
     */
    private String iamRoleId;
    private String id;
    private String projectId;
    /**
     * @return Unique identifier of the Azure Service Principal that Atlas can use to access the Azure Blob Storage Container.
     * 
     */
    private String roleId;
    /**
     * @return URL that identifies the blob Endpoint of the Azure Blob Storage Account.
     * 
     */
    private String serviceUrl;
    /**
     * @return UUID that identifies the Azure Active Directory Tenant ID.
     * 
     */
    private String tenantId;

    private GetCloudBackupSnapshotExportBucketResult() {}
    /**
     * @return Name of the bucket that the provided role ID is authorized to access.
     * 
     */
    public String bucketName() {
        return this.bucketName;
    }
    /**
     * @return Name of the provider of the cloud service where Atlas can access the S3 bucket.
     * 
     */
    public String cloudProvider() {
        return this.cloudProvider;
    }
    public String exportBucketId() {
        return this.exportBucketId;
    }
    /**
     * @return Unique identifier of the role that Atlas can use to access the bucket.
     * 
     */
    public String iamRoleId() {
        return this.iamRoleId;
    }
    public String id() {
        return this.id;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Unique identifier of the Azure Service Principal that Atlas can use to access the Azure Blob Storage Container.
     * 
     */
    public String roleId() {
        return this.roleId;
    }
    /**
     * @return URL that identifies the blob Endpoint of the Azure Blob Storage Account.
     * 
     */
    public String serviceUrl() {
        return this.serviceUrl;
    }
    /**
     * @return UUID that identifies the Azure Active Directory Tenant ID.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudBackupSnapshotExportBucketResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bucketName;
        private String cloudProvider;
        private String exportBucketId;
        private String iamRoleId;
        private String id;
        private String projectId;
        private String roleId;
        private String serviceUrl;
        private String tenantId;
        public Builder() {}
        public Builder(GetCloudBackupSnapshotExportBucketResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bucketName = defaults.bucketName;
    	      this.cloudProvider = defaults.cloudProvider;
    	      this.exportBucketId = defaults.exportBucketId;
    	      this.iamRoleId = defaults.iamRoleId;
    	      this.id = defaults.id;
    	      this.projectId = defaults.projectId;
    	      this.roleId = defaults.roleId;
    	      this.serviceUrl = defaults.serviceUrl;
    	      this.tenantId = defaults.tenantId;
        }

        @CustomType.Setter
        public Builder bucketName(String bucketName) {
            if (bucketName == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotExportBucketResult", "bucketName");
            }
            this.bucketName = bucketName;
            return this;
        }
        @CustomType.Setter
        public Builder cloudProvider(String cloudProvider) {
            if (cloudProvider == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotExportBucketResult", "cloudProvider");
            }
            this.cloudProvider = cloudProvider;
            return this;
        }
        @CustomType.Setter
        public Builder exportBucketId(String exportBucketId) {
            if (exportBucketId == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotExportBucketResult", "exportBucketId");
            }
            this.exportBucketId = exportBucketId;
            return this;
        }
        @CustomType.Setter
        public Builder iamRoleId(String iamRoleId) {
            if (iamRoleId == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotExportBucketResult", "iamRoleId");
            }
            this.iamRoleId = iamRoleId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotExportBucketResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotExportBucketResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder roleId(String roleId) {
            if (roleId == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotExportBucketResult", "roleId");
            }
            this.roleId = roleId;
            return this;
        }
        @CustomType.Setter
        public Builder serviceUrl(String serviceUrl) {
            if (serviceUrl == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotExportBucketResult", "serviceUrl");
            }
            this.serviceUrl = serviceUrl;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotExportBucketResult", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        public GetCloudBackupSnapshotExportBucketResult build() {
            final var _resultValue = new GetCloudBackupSnapshotExportBucketResult();
            _resultValue.bucketName = bucketName;
            _resultValue.cloudProvider = cloudProvider;
            _resultValue.exportBucketId = exportBucketId;
            _resultValue.iamRoleId = iamRoleId;
            _resultValue.id = id;
            _resultValue.projectId = projectId;
            _resultValue.roleId = roleId;
            _resultValue.serviceUrl = serviceUrl;
            _resultValue.tenantId = tenantId;
            return _resultValue;
        }
    }
}
