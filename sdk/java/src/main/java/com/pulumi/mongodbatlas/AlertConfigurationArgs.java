// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.inputs.AlertConfigurationMatcherArgs;
import com.pulumi.mongodbatlas.inputs.AlertConfigurationMetricThresholdConfigArgs;
import com.pulumi.mongodbatlas.inputs.AlertConfigurationNotificationArgs;
import com.pulumi.mongodbatlas.inputs.AlertConfigurationThresholdConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertConfigurationArgs extends com.pulumi.resources.ResourceArgs {

    public static final AlertConfigurationArgs Empty = new AlertConfigurationArgs();

    /**
     * It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The type of event that will trigger an alert.
     * 
     * &gt; ***IMPORTANT:*** Event Type has many possible values. Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/operation/operation-createalertconfiguration) and checking the latest eventTypeName options.
     * 
     * &gt; **NOTE:** If `event_type` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metric_threshold_config` field must also be configured.
     * 
     */
    @Import(name="eventType", required=true)
    private Output<String> eventType;

    /**
     * @return The type of event that will trigger an alert.
     * 
     * &gt; ***IMPORTANT:*** Event Type has many possible values. Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/operation/operation-createalertconfiguration) and checking the latest eventTypeName options.
     * 
     * &gt; **NOTE:** If `event_type` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metric_threshold_config` field must also be configured.
     * 
     */
    public Output<String> eventType() {
        return this.eventType;
    }

    @Import(name="matchers")
    private @Nullable Output<List<AlertConfigurationMatcherArgs>> matchers;

    public Optional<Output<List<AlertConfigurationMatcherArgs>>> matchers() {
        return Optional.ofNullable(this.matchers);
    }

    @Import(name="metricThresholdConfig")
    private @Nullable Output<AlertConfigurationMetricThresholdConfigArgs> metricThresholdConfig;

    public Optional<Output<AlertConfigurationMetricThresholdConfigArgs>> metricThresholdConfig() {
        return Optional.ofNullable(this.metricThresholdConfig);
    }

    @Import(name="notifications")
    private @Nullable Output<List<AlertConfigurationNotificationArgs>> notifications;

    public Optional<Output<List<AlertConfigurationNotificationArgs>>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    /**
     * The ID of the project where the alert configuration will create.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The ID of the project where the alert configuration will create.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    @Import(name="thresholdConfig")
    private @Nullable Output<AlertConfigurationThresholdConfigArgs> thresholdConfig;

    public Optional<Output<AlertConfigurationThresholdConfigArgs>> thresholdConfig() {
        return Optional.ofNullable(this.thresholdConfig);
    }

    private AlertConfigurationArgs() {}

    private AlertConfigurationArgs(AlertConfigurationArgs $) {
        this.enabled = $.enabled;
        this.eventType = $.eventType;
        this.matchers = $.matchers;
        this.metricThresholdConfig = $.metricThresholdConfig;
        this.notifications = $.notifications;
        this.projectId = $.projectId;
        this.thresholdConfig = $.thresholdConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertConfigurationArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertConfigurationArgs $;

        public Builder() {
            $ = new AlertConfigurationArgs();
        }

        public Builder(AlertConfigurationArgs defaults) {
            $ = new AlertConfigurationArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param enabled It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param eventType The type of event that will trigger an alert.
         * 
         * &gt; ***IMPORTANT:*** Event Type has many possible values. Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/operation/operation-createalertconfiguration) and checking the latest eventTypeName options.
         * 
         * &gt; **NOTE:** If `event_type` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metric_threshold_config` field must also be configured.
         * 
         * @return builder
         * 
         */
        public Builder eventType(Output<String> eventType) {
            $.eventType = eventType;
            return this;
        }

        /**
         * @param eventType The type of event that will trigger an alert.
         * 
         * &gt; ***IMPORTANT:*** Event Type has many possible values. Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://www.mongodb.com/docs/api/doc/atlas-admin-api-v2/operation/operation-createalertconfiguration) and checking the latest eventTypeName options.
         * 
         * &gt; **NOTE:** If `event_type` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metric_threshold_config` field must also be configured.
         * 
         * @return builder
         * 
         */
        public Builder eventType(String eventType) {
            return eventType(Output.of(eventType));
        }

        public Builder matchers(@Nullable Output<List<AlertConfigurationMatcherArgs>> matchers) {
            $.matchers = matchers;
            return this;
        }

        public Builder matchers(List<AlertConfigurationMatcherArgs> matchers) {
            return matchers(Output.of(matchers));
        }

        public Builder matchers(AlertConfigurationMatcherArgs... matchers) {
            return matchers(List.of(matchers));
        }

        public Builder metricThresholdConfig(@Nullable Output<AlertConfigurationMetricThresholdConfigArgs> metricThresholdConfig) {
            $.metricThresholdConfig = metricThresholdConfig;
            return this;
        }

        public Builder metricThresholdConfig(AlertConfigurationMetricThresholdConfigArgs metricThresholdConfig) {
            return metricThresholdConfig(Output.of(metricThresholdConfig));
        }

        public Builder notifications(@Nullable Output<List<AlertConfigurationNotificationArgs>> notifications) {
            $.notifications = notifications;
            return this;
        }

        public Builder notifications(List<AlertConfigurationNotificationArgs> notifications) {
            return notifications(Output.of(notifications));
        }

        public Builder notifications(AlertConfigurationNotificationArgs... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param projectId The ID of the project where the alert configuration will create.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project where the alert configuration will create.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public Builder thresholdConfig(@Nullable Output<AlertConfigurationThresholdConfigArgs> thresholdConfig) {
            $.thresholdConfig = thresholdConfig;
            return this;
        }

        public Builder thresholdConfig(AlertConfigurationThresholdConfigArgs thresholdConfig) {
            return thresholdConfig(Output.of(thresholdConfig));
        }

        public AlertConfigurationArgs build() {
            if ($.eventType == null) {
                throw new MissingRequiredPropertyException("AlertConfigurationArgs", "eventType");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("AlertConfigurationArgs", "projectId");
            }
            return $;
        }
    }

}
