// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.mongodbatlas.PushBasedLogExportArgs;
import com.pulumi.mongodbatlas.Utilities;
import com.pulumi.mongodbatlas.inputs.PushBasedLogExportState;
import com.pulumi.mongodbatlas.outputs.PushBasedLogExportTimeouts;
import java.lang.String;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * `mongodbatlas.PushBasedLogExport` provides a resource for push-based log export feature. The resource lets you configure, enable &amp; disable the project level settings for the push-based log export feature. Using this resource you
 * can continually push logs from mongod, mongos, and audit logs to an Amazon S3 bucket. Atlas exports logs every 5 minutes.
 * 
 * ## Example Usage
 * 
 * ### S
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.Project;
 * import com.pulumi.mongodbatlas.ProjectArgs;
 * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
 * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
 * import com.pulumi.mongodbatlas.CloudProviderAccessAuthorization;
 * import com.pulumi.mongodbatlas.CloudProviderAccessAuthorizationArgs;
 * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessAuthorizationAwsArgs;
 * import com.pulumi.mongodbatlas.PushBasedLogExport;
 * import com.pulumi.mongodbatlas.PushBasedLogExportArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var project_tf = new Project("project-tf", ProjectArgs.builder()
 *             .name(atlasProjectName)
 *             .orgId(atlasOrgId)
 *             .build());
 * 
 *         // Set up cloud provider access in Atlas using the created IAM role
 *         var setupOnly = new CloudProviderAccessSetup("setupOnly", CloudProviderAccessSetupArgs.builder()
 *             .projectId(project_tf.id())
 *             .providerName("AWS")
 *             .build());
 * 
 *         var authRole = new CloudProviderAccessAuthorization("authRole", CloudProviderAccessAuthorizationArgs.builder()
 *             .projectId(project_tf.id())
 *             .roleId(setupOnly.roleId())
 *             .aws(CloudProviderAccessAuthorizationAwsArgs.builder()
 *                 .iamAssumedRoleArn(testRole.arn())
 *                 .build())
 *             .build());
 * 
 *         // Set up push-based log export with authorized IAM role
 *         var test = new PushBasedLogExport("test", PushBasedLogExportArgs.builder()
 *             .projectId(project_tf.id())
 *             .bucketName(logBucket.bucket())
 *             .iamRoleId(authRole.roleId())
 *             .prefixPath("push-based-log-test")
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="mongodbatlas:index/pushBasedLogExport:PushBasedLogExport")
public class PushBasedLogExport extends com.pulumi.resources.CustomResource {
    /**
     * The name of the bucket to which the agent sends the logs to.
     * 
     */
    @Export(name="bucketName", refs={String.class}, tree="[0]")
    private Output<String> bucketName;

    /**
     * @return The name of the bucket to which the agent sends the logs to.
     * 
     */
    public Output<String> bucketName() {
        return this.bucketName;
    }
    /**
     * Date and time that this feature was enabled on.
     * 
     */
    @Export(name="createDate", refs={String.class}, tree="[0]")
    private Output<String> createDate;

    /**
     * @return Date and time that this feature was enabled on.
     * 
     */
    public Output<String> createDate() {
        return this.createDate;
    }
    /**
     * ID of the AWS IAM role that is used to write to the S3 bucket.
     * 
     */
    @Export(name="iamRoleId", refs={String.class}, tree="[0]")
    private Output<String> iamRoleId;

    /**
     * @return ID of the AWS IAM role that is used to write to the S3 bucket.
     * 
     */
    public Output<String> iamRoleId() {
        return this.iamRoleId;
    }
    /**
     * S3 directory in which vector writes in order to store the logs. An empty string denotes the root directory.
     * 
     */
    @Export(name="prefixPath", refs={String.class}, tree="[0]")
    private Output<String> prefixPath;

    /**
     * @return S3 directory in which vector writes in order to store the logs. An empty string denotes the root directory.
     * 
     */
    public Output<String> prefixPath() {
        return this.prefixPath;
    }
    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Describes whether or not the feature is enabled and what status it is in.
     * 
     */
    @Export(name="state", refs={String.class}, tree="[0]")
    private Output<String> state;

    /**
     * @return Describes whether or not the feature is enabled and what status it is in.
     * 
     */
    public Output<String> state() {
        return this.state;
    }
    @Export(name="timeouts", refs={PushBasedLogExportTimeouts.class}, tree="[0]")
    private Output</* @Nullable */ PushBasedLogExportTimeouts> timeouts;

    public Output<Optional<PushBasedLogExportTimeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public PushBasedLogExport(String name) {
        this(name, PushBasedLogExportArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public PushBasedLogExport(String name, PushBasedLogExportArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public PushBasedLogExport(String name, PushBasedLogExportArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/pushBasedLogExport:PushBasedLogExport", name, args == null ? PushBasedLogExportArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private PushBasedLogExport(String name, Output<String> id, @Nullable PushBasedLogExportState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/pushBasedLogExport:PushBasedLogExport", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static PushBasedLogExport get(String name, Output<String> id, @Nullable PushBasedLogExportState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new PushBasedLogExport(name, id, state, options);
    }
}
