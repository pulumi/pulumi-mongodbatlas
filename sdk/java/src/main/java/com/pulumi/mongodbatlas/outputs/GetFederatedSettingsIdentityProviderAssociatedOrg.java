// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsIdentityProviderAssociatedOrgRoleMapping;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsIdentityProviderAssociatedOrgUserConflict;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFederatedSettingsIdentityProviderAssociatedOrg {
    /**
     * @return List that contains the approved domains from which organization users can log in.
     * 
     */
    private List<String> domainAllowLists;
    /**
     * @return Flag that indicates whether domain restriction is enabled for the connected organization.
     * 
     */
    private Boolean domainRestrictionEnabled;
    /**
     * @return Unique 20-hexadecimal digit string that identifies the IdP.
     * 
     */
    private String identityProviderId;
    /**
     * @return Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     * 
     */
    private String orgId;
    /**
     * @return List that contains the default roles granted to users who authenticate through the IdP in a connected organization. If you provide a postAuthRoleGrants field in the request, the array that you provide replaces the current postAuthRoleGrants.
     * 
     */
    private List<String> postAuthRoleGrants;
    private List<GetFederatedSettingsIdentityProviderAssociatedOrgRoleMapping> roleMappings;
    private List<GetFederatedSettingsIdentityProviderAssociatedOrgUserConflict> userConflicts;

    private GetFederatedSettingsIdentityProviderAssociatedOrg() {}
    /**
     * @return List that contains the approved domains from which organization users can log in.
     * 
     */
    public List<String> domainAllowLists() {
        return this.domainAllowLists;
    }
    /**
     * @return Flag that indicates whether domain restriction is enabled for the connected organization.
     * 
     */
    public Boolean domainRestrictionEnabled() {
        return this.domainRestrictionEnabled;
    }
    /**
     * @return Unique 20-hexadecimal digit string that identifies the IdP.
     * 
     */
    public String identityProviderId() {
        return this.identityProviderId;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     * 
     */
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return List that contains the default roles granted to users who authenticate through the IdP in a connected organization. If you provide a postAuthRoleGrants field in the request, the array that you provide replaces the current postAuthRoleGrants.
     * 
     */
    public List<String> postAuthRoleGrants() {
        return this.postAuthRoleGrants;
    }
    public List<GetFederatedSettingsIdentityProviderAssociatedOrgRoleMapping> roleMappings() {
        return this.roleMappings;
    }
    public List<GetFederatedSettingsIdentityProviderAssociatedOrgUserConflict> userConflicts() {
        return this.userConflicts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFederatedSettingsIdentityProviderAssociatedOrg defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> domainAllowLists;
        private Boolean domainRestrictionEnabled;
        private String identityProviderId;
        private String orgId;
        private List<String> postAuthRoleGrants;
        private List<GetFederatedSettingsIdentityProviderAssociatedOrgRoleMapping> roleMappings;
        private List<GetFederatedSettingsIdentityProviderAssociatedOrgUserConflict> userConflicts;
        public Builder() {}
        public Builder(GetFederatedSettingsIdentityProviderAssociatedOrg defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.domainAllowLists = defaults.domainAllowLists;
    	      this.domainRestrictionEnabled = defaults.domainRestrictionEnabled;
    	      this.identityProviderId = defaults.identityProviderId;
    	      this.orgId = defaults.orgId;
    	      this.postAuthRoleGrants = defaults.postAuthRoleGrants;
    	      this.roleMappings = defaults.roleMappings;
    	      this.userConflicts = defaults.userConflicts;
        }

        @CustomType.Setter
        public Builder domainAllowLists(List<String> domainAllowLists) {
            this.domainAllowLists = Objects.requireNonNull(domainAllowLists);
            return this;
        }
        public Builder domainAllowLists(String... domainAllowLists) {
            return domainAllowLists(List.of(domainAllowLists));
        }
        @CustomType.Setter
        public Builder domainRestrictionEnabled(Boolean domainRestrictionEnabled) {
            this.domainRestrictionEnabled = Objects.requireNonNull(domainRestrictionEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder identityProviderId(String identityProviderId) {
            this.identityProviderId = Objects.requireNonNull(identityProviderId);
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            this.orgId = Objects.requireNonNull(orgId);
            return this;
        }
        @CustomType.Setter
        public Builder postAuthRoleGrants(List<String> postAuthRoleGrants) {
            this.postAuthRoleGrants = Objects.requireNonNull(postAuthRoleGrants);
            return this;
        }
        public Builder postAuthRoleGrants(String... postAuthRoleGrants) {
            return postAuthRoleGrants(List.of(postAuthRoleGrants));
        }
        @CustomType.Setter
        public Builder roleMappings(List<GetFederatedSettingsIdentityProviderAssociatedOrgRoleMapping> roleMappings) {
            this.roleMappings = Objects.requireNonNull(roleMappings);
            return this;
        }
        public Builder roleMappings(GetFederatedSettingsIdentityProviderAssociatedOrgRoleMapping... roleMappings) {
            return roleMappings(List.of(roleMappings));
        }
        @CustomType.Setter
        public Builder userConflicts(List<GetFederatedSettingsIdentityProviderAssociatedOrgUserConflict> userConflicts) {
            this.userConflicts = Objects.requireNonNull(userConflicts);
            return this;
        }
        public Builder userConflicts(GetFederatedSettingsIdentityProviderAssociatedOrgUserConflict... userConflicts) {
            return userConflicts(List.of(userConflicts));
        }
        public GetFederatedSettingsIdentityProviderAssociatedOrg build() {
            final var _resultValue = new GetFederatedSettingsIdentityProviderAssociatedOrg();
            _resultValue.domainAllowLists = domainAllowLists;
            _resultValue.domainRestrictionEnabled = domainRestrictionEnabled;
            _resultValue.identityProviderId = identityProviderId;
            _resultValue.orgId = orgId;
            _resultValue.postAuthRoleGrants = postAuthRoleGrants;
            _resultValue.roleMappings = roleMappings;
            _resultValue.userConflicts = userConflicts;
            return _resultValue;
        }
    }
}
