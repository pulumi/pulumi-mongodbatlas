// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CloudProviderSnapshotState extends com.pulumi.resources.ResourceArgs {

    public static final CloudProviderSnapshotState Empty = new CloudProviderSnapshotState();

    /**
     * The name of the Atlas cluster that contains the snapshots you want to retrieve.
     * 
     */
    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    /**
     * @return The name of the Atlas cluster that contains the snapshots you want to retrieve.
     * 
     */
    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    /**
     * UTC ISO 8601 formatted point in time when Atlas took the snapshot.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return UTC ISO 8601 formatted point in time when Atlas took the snapshot.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Description of the on-demand snapshot.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return Description of the on-demand snapshot.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
     * 
     */
    @Import(name="expiresAt")
    private @Nullable Output<String> expiresAt;

    /**
     * @return UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
     * 
     */
    public Optional<Output<String>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
     * 
     */
    @Import(name="masterKeyUuid")
    private @Nullable Output<String> masterKeyUuid;

    /**
     * @return Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
     * 
     */
    public Optional<Output<String>> masterKeyUuid() {
        return Optional.ofNullable(this.masterKeyUuid);
    }

    /**
     * Version of the MongoDB server.
     * 
     */
    @Import(name="mongodVersion")
    private @Nullable Output<String> mongodVersion;

    /**
     * @return Version of the MongoDB server.
     * 
     */
    public Optional<Output<String>> mongodVersion() {
        return Optional.ofNullable(this.mongodVersion);
    }

    /**
     * The unique identifier of the project for the Atlas cluster.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The unique identifier of the project for the Atlas cluster.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
     * 
     */
    @Import(name="retentionInDays")
    private @Nullable Output<Integer> retentionInDays;

    /**
     * @return The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
     * 
     */
    public Optional<Output<Integer>> retentionInDays() {
        return Optional.ofNullable(this.retentionInDays);
    }

    /**
     * Unique identifier of the snapshot.
     * 
     */
    @Import(name="snapshotId")
    private @Nullable Output<String> snapshotId;

    /**
     * @return Unique identifier of the snapshot.
     * 
     */
    public Optional<Output<String>> snapshotId() {
        return Optional.ofNullable(this.snapshotId);
    }

    /**
     * Specified the type of snapshot. Valid values are onDemand and scheduled.
     * 
     */
    @Import(name="snapshotType")
    private @Nullable Output<String> snapshotType;

    /**
     * @return Specified the type of snapshot. Valid values are onDemand and scheduled.
     * 
     */
    public Optional<Output<String>> snapshotType() {
        return Optional.ofNullable(this.snapshotType);
    }

    /**
     * Current status of the snapshot. One of the following values will be returned: queued, inProgress, completed, failed.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Current status of the snapshot. One of the following values will be returned: queued, inProgress, completed, failed.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Specifies the size of the snapshot in bytes.
     * 
     */
    @Import(name="storageSizeBytes")
    private @Nullable Output<Integer> storageSizeBytes;

    /**
     * @return Specifies the size of the snapshot in bytes.
     * 
     */
    public Optional<Output<Integer>> storageSizeBytes() {
        return Optional.ofNullable(this.storageSizeBytes);
    }

    /**
     * The duration of time to wait to finish the on-demand snapshot. The timeout value is defined by a signed sequence of decimal numbers with an time unit suffix such as: `1h45m`, `300s`, `10m`, .... The valid time units are:  `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Default value for the timeout is `10m`
     * 
     */
    @Import(name="timeout")
    private @Nullable Output<String> timeout;

    /**
     * @return The duration of time to wait to finish the on-demand snapshot. The timeout value is defined by a signed sequence of decimal numbers with an time unit suffix such as: `1h45m`, `300s`, `10m`, .... The valid time units are:  `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Default value for the timeout is `10m`
     * 
     */
    public Optional<Output<String>> timeout() {
        return Optional.ofNullable(this.timeout);
    }

    /**
     * Specifies the type of cluster: replicaSet or shardedCluster.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Specifies the type of cluster: replicaSet or shardedCluster.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private CloudProviderSnapshotState() {}

    private CloudProviderSnapshotState(CloudProviderSnapshotState $) {
        this.clusterName = $.clusterName;
        this.createdAt = $.createdAt;
        this.description = $.description;
        this.expiresAt = $.expiresAt;
        this.masterKeyUuid = $.masterKeyUuid;
        this.mongodVersion = $.mongodVersion;
        this.projectId = $.projectId;
        this.retentionInDays = $.retentionInDays;
        this.snapshotId = $.snapshotId;
        this.snapshotType = $.snapshotType;
        this.status = $.status;
        this.storageSizeBytes = $.storageSizeBytes;
        this.timeout = $.timeout;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CloudProviderSnapshotState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CloudProviderSnapshotState $;

        public Builder() {
            $ = new CloudProviderSnapshotState();
        }

        public Builder(CloudProviderSnapshotState defaults) {
            $ = new CloudProviderSnapshotState(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterName The name of the Atlas cluster that contains the snapshots you want to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName The name of the Atlas cluster that contains the snapshots you want to retrieve.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param createdAt UTC ISO 8601 formatted point in time when Atlas took the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt UTC ISO 8601 formatted point in time when Atlas took the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param description Description of the on-demand snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of the on-demand snapshot.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param expiresAt UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(@Nullable Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        /**
         * @param expiresAt UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        /**
         * @param masterKeyUuid Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
         * 
         * @return builder
         * 
         */
        public Builder masterKeyUuid(@Nullable Output<String> masterKeyUuid) {
            $.masterKeyUuid = masterKeyUuid;
            return this;
        }

        /**
         * @param masterKeyUuid Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
         * 
         * @return builder
         * 
         */
        public Builder masterKeyUuid(String masterKeyUuid) {
            return masterKeyUuid(Output.of(masterKeyUuid));
        }

        /**
         * @param mongodVersion Version of the MongoDB server.
         * 
         * @return builder
         * 
         */
        public Builder mongodVersion(@Nullable Output<String> mongodVersion) {
            $.mongodVersion = mongodVersion;
            return this;
        }

        /**
         * @param mongodVersion Version of the MongoDB server.
         * 
         * @return builder
         * 
         */
        public Builder mongodVersion(String mongodVersion) {
            return mongodVersion(Output.of(mongodVersion));
        }

        /**
         * @param projectId The unique identifier of the project for the Atlas cluster.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The unique identifier of the project for the Atlas cluster.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param retentionInDays The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
         * 
         * @return builder
         * 
         */
        public Builder retentionInDays(@Nullable Output<Integer> retentionInDays) {
            $.retentionInDays = retentionInDays;
            return this;
        }

        /**
         * @param retentionInDays The number of days that Atlas should retain the on-demand snapshot. Must be at least 1.
         * 
         * @return builder
         * 
         */
        public Builder retentionInDays(Integer retentionInDays) {
            return retentionInDays(Output.of(retentionInDays));
        }

        /**
         * @param snapshotId Unique identifier of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(@Nullable Output<String> snapshotId) {
            $.snapshotId = snapshotId;
            return this;
        }

        /**
         * @param snapshotId Unique identifier of the snapshot.
         * 
         * @return builder
         * 
         */
        public Builder snapshotId(String snapshotId) {
            return snapshotId(Output.of(snapshotId));
        }

        /**
         * @param snapshotType Specified the type of snapshot. Valid values are onDemand and scheduled.
         * 
         * @return builder
         * 
         */
        public Builder snapshotType(@Nullable Output<String> snapshotType) {
            $.snapshotType = snapshotType;
            return this;
        }

        /**
         * @param snapshotType Specified the type of snapshot. Valid values are onDemand and scheduled.
         * 
         * @return builder
         * 
         */
        public Builder snapshotType(String snapshotType) {
            return snapshotType(Output.of(snapshotType));
        }

        /**
         * @param status Current status of the snapshot. One of the following values will be returned: queued, inProgress, completed, failed.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Current status of the snapshot. One of the following values will be returned: queued, inProgress, completed, failed.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param storageSizeBytes Specifies the size of the snapshot in bytes.
         * 
         * @return builder
         * 
         */
        public Builder storageSizeBytes(@Nullable Output<Integer> storageSizeBytes) {
            $.storageSizeBytes = storageSizeBytes;
            return this;
        }

        /**
         * @param storageSizeBytes Specifies the size of the snapshot in bytes.
         * 
         * @return builder
         * 
         */
        public Builder storageSizeBytes(Integer storageSizeBytes) {
            return storageSizeBytes(Output.of(storageSizeBytes));
        }

        /**
         * @param timeout The duration of time to wait to finish the on-demand snapshot. The timeout value is defined by a signed sequence of decimal numbers with an time unit suffix such as: `1h45m`, `300s`, `10m`, .... The valid time units are:  `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Default value for the timeout is `10m`
         * 
         * @return builder
         * 
         */
        public Builder timeout(@Nullable Output<String> timeout) {
            $.timeout = timeout;
            return this;
        }

        /**
         * @param timeout The duration of time to wait to finish the on-demand snapshot. The timeout value is defined by a signed sequence of decimal numbers with an time unit suffix such as: `1h45m`, `300s`, `10m`, .... The valid time units are:  `ns`, `us` (or `µs`), `ms`, `s`, `m`, `h`. Default value for the timeout is `10m`
         * 
         * @return builder
         * 
         */
        public Builder timeout(String timeout) {
            return timeout(Output.of(timeout));
        }

        /**
         * @param type Specifies the type of cluster: replicaSet or shardedCluster.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Specifies the type of cluster: replicaSet or shardedCluster.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public CloudProviderSnapshotState build() {
            return $;
        }
    }

}
