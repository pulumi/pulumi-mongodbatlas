// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.mongodbatlas.DatabaseUserArgs;
import com.pulumi.mongodbatlas.Utilities;
import com.pulumi.mongodbatlas.inputs.DatabaseUserState;
import com.pulumi.mongodbatlas.outputs.DatabaseUserLabel;
import com.pulumi.mongodbatlas.outputs.DatabaseUserRole;
import com.pulumi.mongodbatlas.outputs.DatabaseUserScope;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * # Resource: mongodbatlas.DatabaseUser
 * 
 * `mongodbatlas.DatabaseUser` provides a Database User resource. This represents a database user which will be applied to all clusters within the project.
 * 
 * Each user has a set of roles that provide access to the projectâ€™s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
 * 
 * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
 * 
 * &gt; **WARNING:** The password argument is required for creation but should be removed after creation if it will be managed externally. More details can be found in the password argument documentation.
 * 
 * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain-text. Read more about sensitive data in state.
 * 
 * ## Example of how to create a OIDC federated authentication user
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.DatabaseUser;
 * import com.pulumi.mongodbatlas.DatabaseUserArgs;
 * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new DatabaseUser("test", DatabaseUserArgs.builder()
 *             .username("64d613677e1ad50839cce4db/testUserOr")
 *             .projectId("6414908c207f4d22f4d8f232")
 *             .authDatabaseName("admin")
 *             .oidcAuthType("IDP_GROUP")
 *             .roles(DatabaseUserRoleArgs.builder()
 *                 .roleName("readWriteAnyDatabase")
 *                 .databaseName("admin")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * `username` format: Atlas OIDC IdP ID (found in federation settings), followed by a &#39;/&#39;, followed by the IdP group name
 * 
 * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
 * 
 * ## Example Usage
 * 
 * ### s
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.DatabaseUser;
 * import com.pulumi.mongodbatlas.DatabaseUserArgs;
 * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
 * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
 * import com.pulumi.mongodbatlas.inputs.DatabaseUserScopeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new DatabaseUser("test", DatabaseUserArgs.builder()
 *             .username("test-acc-username")
 *             .password("test-acc-password")
 *             .projectId("<PROJECT-ID>")
 *             .authDatabaseName("admin")
 *             .roles(            
 *                 DatabaseUserRoleArgs.builder()
 *                     .roleName("readWrite")
 *                     .databaseName("dbforApp")
 *                     .build(),
 *                 DatabaseUserRoleArgs.builder()
 *                     .roleName("readAnyDatabase")
 *                     .databaseName("admin")
 *                     .build())
 *             .labels(DatabaseUserLabelArgs.builder()
 *                 .key("My Key")
 *                 .value("My Value")
 *                 .build())
 *             .scopes(            
 *                 DatabaseUserScopeArgs.builder()
 *                     .name("My cluster name")
 *                     .type("CLUSTER")
 *                     .build(),
 *                 DatabaseUserScopeArgs.builder()
 *                     .name("My second cluster name")
 *                     .type("CLUSTER")
 *                     .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.DatabaseUser;
 * import com.pulumi.mongodbatlas.DatabaseUserArgs;
 * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
 * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
 * import com.pulumi.mongodbatlas.inputs.DatabaseUserScopeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new DatabaseUser("test", DatabaseUserArgs.builder()
 *             .username("test-acc-username")
 *             .x509Type("MANAGED")
 *             .projectId("<PROJECT-ID>")
 *             .authDatabaseName("$external")
 *             .roles(DatabaseUserRoleArgs.builder()
 *                 .roleName("readAnyDatabase")
 *                 .databaseName("admin")
 *                 .build())
 *             .labels(DatabaseUserLabelArgs.builder()
 *                 .key("%s")
 *                 .value("%s")
 *                 .build())
 *             .scopes(DatabaseUserScopeArgs.builder()
 *                 .name("My cluster name")
 *                 .type("CLUSTER")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.DatabaseUser;
 * import com.pulumi.mongodbatlas.DatabaseUserArgs;
 * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
 * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
 * import com.pulumi.mongodbatlas.inputs.DatabaseUserScopeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new DatabaseUser("test", DatabaseUserArgs.builder()
 *             .username(testAwsIamRole.arn())
 *             .projectId("<PROJECT-ID>")
 *             .authDatabaseName("$external")
 *             .awsIamType("ROLE")
 *             .roles(DatabaseUserRoleArgs.builder()
 *                 .roleName("readAnyDatabase")
 *                 .databaseName("admin")
 *                 .build())
 *             .labels(DatabaseUserLabelArgs.builder()
 *                 .key("%s")
 *                 .value("%s")
 *                 .build())
 *             .scopes(DatabaseUserScopeArgs.builder()
 *                 .name("My cluster name")
 *                 .type("CLUSTER")
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Database users can be imported using project ID and username, in the format `project_id`-`username`-`auth_database_name`, e.g.
 * 
 * ```sh
 * $ pulumi import mongodbatlas:index/databaseUser:DatabaseUser my_user 1112222b3bf99403840e8934-my_user-admin
 * ```
 * ~&gt; __NOTE:__ Terraform will want to change the password after importing the user if a `password` argument is specified.
 * 
 */
@ResourceType(type="mongodbatlas:index/databaseUser:DatabaseUser")
public class DatabaseUser extends com.pulumi.resources.CustomResource {
    /**
     * Database against which Atlas authenticates the user. A user must provide both a username and authentication database to log into MongoDB.
     * Accepted values include:
     * 
     */
    @Export(name="authDatabaseName", refs={String.class}, tree="[0]")
    private Output<String> authDatabaseName;

    /**
     * @return Database against which Atlas authenticates the user. A user must provide both a username and authentication database to log into MongoDB.
     * Accepted values include:
     * 
     */
    public Output<String> authDatabaseName() {
        return this.authDatabaseName;
    }
    /**
     * If this value is set, the new database user authenticates with AWS IAM credentials. If no value is given, Atlas uses the default value of `NONE`. The accepted types are:
     * * `NONE` -	The user does not use AWS IAM credentials.
     * * `USER` - New database user has AWS IAM user credentials.
     * * `ROLE` -  New database user has credentials associated with an AWS IAM role.
     * 
     */
    @Export(name="awsIamType", refs={String.class}, tree="[0]")
    private Output<String> awsIamType;

    /**
     * @return If this value is set, the new database user authenticates with AWS IAM credentials. If no value is given, Atlas uses the default value of `NONE`. The accepted types are:
     * * `NONE` -	The user does not use AWS IAM credentials.
     * * `USER` - New database user has AWS IAM user credentials.
     * * `ROLE` -  New database user has credentials associated with an AWS IAM role.
     * 
     */
    public Output<String> awsIamType() {
        return this.awsIamType;
    }
    @Export(name="labels", refs={List.class,DatabaseUserLabel.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DatabaseUserLabel>> labels;

    public Output<Optional<List<DatabaseUserLabel>>> labels() {
        return Codegen.optional(this.labels);
    }
    /**
     * Method by which the provided `username` is authenticated. If no value is given, Atlas uses the default value of `NONE`.
     * * `NONE` -	Atlas authenticates this user through [SCRAM-SHA](https://docs.mongodb.com/manual/core/security-scram/), not LDAP.
     * * `USER` - LDAP server authenticates this user through the user&#39;s LDAP user. `username` must also be a fully qualified distinguished name, as defined in [RFC-2253](https://tools.ietf.org/html/rfc2253).
     * * `GROUP` - LDAP server authenticates this user using their LDAP user and authorizes this user using their LDAP group. To learn more about LDAP security, see [Set up User Authentication and Authorization with LDAP](https://docs.atlas.mongodb.com/security-ldaps). `username` must also be a fully qualified distinguished name, as defined in [RFC-2253](https://tools.ietf.org/html/rfc2253).
     * 
     */
    @Export(name="ldapAuthType", refs={String.class}, tree="[0]")
    private Output<String> ldapAuthType;

    /**
     * @return Method by which the provided `username` is authenticated. If no value is given, Atlas uses the default value of `NONE`.
     * * `NONE` -	Atlas authenticates this user through [SCRAM-SHA](https://docs.mongodb.com/manual/core/security-scram/), not LDAP.
     * * `USER` - LDAP server authenticates this user through the user&#39;s LDAP user. `username` must also be a fully qualified distinguished name, as defined in [RFC-2253](https://tools.ietf.org/html/rfc2253).
     * * `GROUP` - LDAP server authenticates this user using their LDAP user and authorizes this user using their LDAP group. To learn more about LDAP security, see [Set up User Authentication and Authorization with LDAP](https://docs.atlas.mongodb.com/security-ldaps). `username` must also be a fully qualified distinguished name, as defined in [RFC-2253](https://tools.ietf.org/html/rfc2253).
     * 
     */
    public Output<String> ldapAuthType() {
        return this.ldapAuthType;
    }
    /**
     * Human-readable label that indicates whether the new database user authenticates with OIDC (OpenID Connect) federated authentication. If no value is given, Atlas uses the default value of `NONE`. The accepted types are:
     * * `NONE` -	The user does not use OIDC federated authentication.
     * * `IDP_GROUP` - OIDC Workforce federated authentication group. To learn more about OIDC federated authentication, see [Set up Workforce Identity Federation with OIDC](https://www.mongodb.com/docs/atlas/security-oidc/).
     * * `USER` - OIDC Workload federated authentication user. To learn more about OIDC federated authentication, see [Set up Workload Identity Federation with OIDC](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    @Export(name="oidcAuthType", refs={String.class}, tree="[0]")
    private Output<String> oidcAuthType;

    /**
     * @return Human-readable label that indicates whether the new database user authenticates with OIDC (OpenID Connect) federated authentication. If no value is given, Atlas uses the default value of `NONE`. The accepted types are:
     * * `NONE` -	The user does not use OIDC federated authentication.
     * * `IDP_GROUP` - OIDC Workforce federated authentication group. To learn more about OIDC federated authentication, see [Set up Workforce Identity Federation with OIDC](https://www.mongodb.com/docs/atlas/security-oidc/).
     * * `USER` - OIDC Workload federated authentication user. To learn more about OIDC federated authentication, see [Set up Workload Identity Federation with OIDC](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public Output<String> oidcAuthType() {
        return this.oidcAuthType;
    }
    @Export(name="password", refs={String.class}, tree="[0]")
    private Output</* @Nullable */ String> password;

    public Output<Optional<String>> password() {
        return Codegen.optional(this.password);
    }
    /**
     * The unique ID for the project to create the database user.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The unique ID for the project to create the database user.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * List of userâ€™s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
     * 
     */
    @Export(name="roles", refs={List.class,DatabaseUserRole.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DatabaseUserRole>> roles;

    /**
     * @return List of userâ€™s roles and the databases / collections on which the roles apply. A role allows the user to perform particular actions on the specified database. A role on the admin database can include privileges that apply to the other databases as well. See Roles below for more details.
     * 
     */
    public Output<Optional<List<DatabaseUserRole>>> roles() {
        return Codegen.optional(this.roles);
    }
    @Export(name="scopes", refs={List.class,DatabaseUserScope.class}, tree="[0,1]")
    private Output</* @Nullable */ List<DatabaseUserScope>> scopes;

    public Output<Optional<List<DatabaseUserScope>>> scopes() {
        return Codegen.optional(this.scopes);
    }
    /**
     * Username for authenticating to MongoDB. USER_ARN or ROLE_ARN if `aws_iam_type` is USER or ROLE.
     * 
     */
    @Export(name="username", refs={String.class}, tree="[0]")
    private Output<String> username;

    /**
     * @return Username for authenticating to MongoDB. USER_ARN or ROLE_ARN if `aws_iam_type` is USER or ROLE.
     * 
     */
    public Output<String> username() {
        return this.username;
    }
    /**
     * X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:
     * * `NONE` -	The user does not use X.509 authentication.
     * * `MANAGED` - The user is being created for use with Atlas-managed X.509.Externally authenticated users can only be created on the `$external` database.
     * * `CUSTOMER` -  The user is being created for use with Self-Managed X.509. Users created with this x509Type require a Common Name (CN) in the username field. Externally authenticated users can only be created on the `$external` database.
     * 
     */
    @Export(name="x509Type", refs={String.class}, tree="[0]")
    private Output<String> x509Type;

    /**
     * @return X.509 method by which the provided username is authenticated. If no value is given, Atlas uses the default value of NONE. The accepted types are:
     * * `NONE` -	The user does not use X.509 authentication.
     * * `MANAGED` - The user is being created for use with Atlas-managed X.509.Externally authenticated users can only be created on the `$external` database.
     * * `CUSTOMER` -  The user is being created for use with Self-Managed X.509. Users created with this x509Type require a Common Name (CN) in the username field. Externally authenticated users can only be created on the `$external` database.
     * 
     */
    public Output<String> x509Type() {
        return this.x509Type;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public DatabaseUser(java.lang.String name) {
        this(name, DatabaseUserArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public DatabaseUser(java.lang.String name, DatabaseUserArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public DatabaseUser(java.lang.String name, DatabaseUserArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/databaseUser:DatabaseUser", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private DatabaseUser(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseUserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/databaseUser:DatabaseUser", name, state, makeResourceOptions(options, id), false);
    }

    private static DatabaseUserArgs makeArgs(DatabaseUserArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? DatabaseUserArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .additionalSecretOutputs(List.of(
                "password"
            ))
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static DatabaseUser get(java.lang.String name, Output<java.lang.String> id, @Nullable DatabaseUserState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new DatabaseUser(name, id, state, options);
    }
}
