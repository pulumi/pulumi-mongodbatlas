// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetEncryptionAtRestAzureKeyVaultConfig {
    /**
     * @return Azure environment in which your account credentials reside.
     * 
     */
    private String azureEnvironment;
    /**
     * @return Unique 36-hexadecimal character string that identifies an Azure application associated with your Azure Active Directory tenant.
     * 
     */
    private String clientId;
    /**
     * @return Flag that indicates whether someone enabled encryption at rest for the specified  project. To disable encryption at rest using customer key management and remove the configuration details, pass only this parameter with a value of `false`.
     * 
     */
    private Boolean enabled;
    /**
     * @return Web address with a unique key that identifies for your Azure Key Vault.
     * 
     */
    private String keyIdentifier;
    /**
     * @return Unique string that identifies the Azure Key Vault that contains your key.
     * 
     */
    private String keyVaultName;
    /**
     * @return Enable connection to your Azure Key Vault over private networking.
     * 
     */
    private Boolean requirePrivateNetworking;
    /**
     * @return Name of the Azure resource group that contains your Azure Key Vault.
     * 
     */
    private String resourceGroupName;
    /**
     * @return Private data that you need secured and that belongs to the specified Azure Key Vault (AKV) tenant (**azureKeyVault.tenantID**). This data can include any type of sensitive data such as passwords, database connection strings, API keys, and the like. AKV stores this information as encrypted binary data.
     * 
     */
    private String secret;
    /**
     * @return Unique 36-hexadecimal character string that identifies your Azure subscription.
     * 
     */
    private String subscriptionId;
    /**
     * @return Unique 36-hexadecimal character string that identifies the Azure Active Directory tenant within your Azure subscription.
     * 
     */
    private String tenantId;
    /**
     * @return Flag that indicates whether the Azure encryption key can encrypt and decrypt data.
     * 
     */
    private Boolean valid;

    private GetEncryptionAtRestAzureKeyVaultConfig() {}
    /**
     * @return Azure environment in which your account credentials reside.
     * 
     */
    public String azureEnvironment() {
        return this.azureEnvironment;
    }
    /**
     * @return Unique 36-hexadecimal character string that identifies an Azure application associated with your Azure Active Directory tenant.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return Flag that indicates whether someone enabled encryption at rest for the specified  project. To disable encryption at rest using customer key management and remove the configuration details, pass only this parameter with a value of `false`.
     * 
     */
    public Boolean enabled() {
        return this.enabled;
    }
    /**
     * @return Web address with a unique key that identifies for your Azure Key Vault.
     * 
     */
    public String keyIdentifier() {
        return this.keyIdentifier;
    }
    /**
     * @return Unique string that identifies the Azure Key Vault that contains your key.
     * 
     */
    public String keyVaultName() {
        return this.keyVaultName;
    }
    /**
     * @return Enable connection to your Azure Key Vault over private networking.
     * 
     */
    public Boolean requirePrivateNetworking() {
        return this.requirePrivateNetworking;
    }
    /**
     * @return Name of the Azure resource group that contains your Azure Key Vault.
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return Private data that you need secured and that belongs to the specified Azure Key Vault (AKV) tenant (**azureKeyVault.tenantID**). This data can include any type of sensitive data such as passwords, database connection strings, API keys, and the like. AKV stores this information as encrypted binary data.
     * 
     */
    public String secret() {
        return this.secret;
    }
    /**
     * @return Unique 36-hexadecimal character string that identifies your Azure subscription.
     * 
     */
    public String subscriptionId() {
        return this.subscriptionId;
    }
    /**
     * @return Unique 36-hexadecimal character string that identifies the Azure Active Directory tenant within your Azure subscription.
     * 
     */
    public String tenantId() {
        return this.tenantId;
    }
    /**
     * @return Flag that indicates whether the Azure encryption key can encrypt and decrypt data.
     * 
     */
    public Boolean valid() {
        return this.valid;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetEncryptionAtRestAzureKeyVaultConfig defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String azureEnvironment;
        private String clientId;
        private Boolean enabled;
        private String keyIdentifier;
        private String keyVaultName;
        private Boolean requirePrivateNetworking;
        private String resourceGroupName;
        private String secret;
        private String subscriptionId;
        private String tenantId;
        private Boolean valid;
        public Builder() {}
        public Builder(GetEncryptionAtRestAzureKeyVaultConfig defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.azureEnvironment = defaults.azureEnvironment;
    	      this.clientId = defaults.clientId;
    	      this.enabled = defaults.enabled;
    	      this.keyIdentifier = defaults.keyIdentifier;
    	      this.keyVaultName = defaults.keyVaultName;
    	      this.requirePrivateNetworking = defaults.requirePrivateNetworking;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.secret = defaults.secret;
    	      this.subscriptionId = defaults.subscriptionId;
    	      this.tenantId = defaults.tenantId;
    	      this.valid = defaults.valid;
        }

        @CustomType.Setter
        public Builder azureEnvironment(String azureEnvironment) {
            if (azureEnvironment == null) {
              throw new MissingRequiredPropertyException("GetEncryptionAtRestAzureKeyVaultConfig", "azureEnvironment");
            }
            this.azureEnvironment = azureEnvironment;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetEncryptionAtRestAzureKeyVaultConfig", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder enabled(Boolean enabled) {
            if (enabled == null) {
              throw new MissingRequiredPropertyException("GetEncryptionAtRestAzureKeyVaultConfig", "enabled");
            }
            this.enabled = enabled;
            return this;
        }
        @CustomType.Setter
        public Builder keyIdentifier(String keyIdentifier) {
            if (keyIdentifier == null) {
              throw new MissingRequiredPropertyException("GetEncryptionAtRestAzureKeyVaultConfig", "keyIdentifier");
            }
            this.keyIdentifier = keyIdentifier;
            return this;
        }
        @CustomType.Setter
        public Builder keyVaultName(String keyVaultName) {
            if (keyVaultName == null) {
              throw new MissingRequiredPropertyException("GetEncryptionAtRestAzureKeyVaultConfig", "keyVaultName");
            }
            this.keyVaultName = keyVaultName;
            return this;
        }
        @CustomType.Setter
        public Builder requirePrivateNetworking(Boolean requirePrivateNetworking) {
            if (requirePrivateNetworking == null) {
              throw new MissingRequiredPropertyException("GetEncryptionAtRestAzureKeyVaultConfig", "requirePrivateNetworking");
            }
            this.requirePrivateNetworking = requirePrivateNetworking;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetEncryptionAtRestAzureKeyVaultConfig", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder secret(String secret) {
            if (secret == null) {
              throw new MissingRequiredPropertyException("GetEncryptionAtRestAzureKeyVaultConfig", "secret");
            }
            this.secret = secret;
            return this;
        }
        @CustomType.Setter
        public Builder subscriptionId(String subscriptionId) {
            if (subscriptionId == null) {
              throw new MissingRequiredPropertyException("GetEncryptionAtRestAzureKeyVaultConfig", "subscriptionId");
            }
            this.subscriptionId = subscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder tenantId(String tenantId) {
            if (tenantId == null) {
              throw new MissingRequiredPropertyException("GetEncryptionAtRestAzureKeyVaultConfig", "tenantId");
            }
            this.tenantId = tenantId;
            return this;
        }
        @CustomType.Setter
        public Builder valid(Boolean valid) {
            if (valid == null) {
              throw new MissingRequiredPropertyException("GetEncryptionAtRestAzureKeyVaultConfig", "valid");
            }
            this.valid = valid;
            return this;
        }
        public GetEncryptionAtRestAzureKeyVaultConfig build() {
            final var _resultValue = new GetEncryptionAtRestAzureKeyVaultConfig();
            _resultValue.azureEnvironment = azureEnvironment;
            _resultValue.clientId = clientId;
            _resultValue.enabled = enabled;
            _resultValue.keyIdentifier = keyIdentifier;
            _resultValue.keyVaultName = keyVaultName;
            _resultValue.requirePrivateNetworking = requirePrivateNetworking;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.secret = secret;
            _resultValue.subscriptionId = subscriptionId;
            _resultValue.tenantId = tenantId;
            _resultValue.valid = valid;
            return _resultValue;
        }
    }
}
