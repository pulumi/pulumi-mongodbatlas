// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.StreamConnectionAuthenticationArgs;
import com.pulumi.mongodbatlas.inputs.StreamConnectionDbRoleToExecuteArgs;
import com.pulumi.mongodbatlas.inputs.StreamConnectionNetworkingArgs;
import com.pulumi.mongodbatlas.inputs.StreamConnectionSecurityArgs;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamConnectionState extends com.pulumi.resources.ResourceArgs {

    public static final StreamConnectionState Empty = new StreamConnectionState();

    @Import(name="authentication")
    private @Nullable Output<StreamConnectionAuthenticationArgs> authentication;

    public Optional<Output<StreamConnectionAuthenticationArgs>> authentication() {
        return Optional.ofNullable(this.authentication);
    }

    @Import(name="bootstrapServers")
    private @Nullable Output<String> bootstrapServers;

    public Optional<Output<String>> bootstrapServers() {
        return Optional.ofNullable(this.bootstrapServers);
    }

    @Import(name="clusterName")
    private @Nullable Output<String> clusterName;

    public Optional<Output<String>> clusterName() {
        return Optional.ofNullable(this.clusterName);
    }

    @Import(name="config")
    private @Nullable Output<Map<String,String>> config;

    public Optional<Output<Map<String,String>>> config() {
        return Optional.ofNullable(this.config);
    }

    /**
     * Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
     * 
     */
    @Import(name="connectionName")
    private @Nullable Output<String> connectionName;

    /**
     * @return Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
     * 
     */
    public Optional<Output<String>> connectionName() {
        return Optional.ofNullable(this.connectionName);
    }

    @Import(name="dbRoleToExecute")
    private @Nullable Output<StreamConnectionDbRoleToExecuteArgs> dbRoleToExecute;

    public Optional<Output<StreamConnectionDbRoleToExecuteArgs>> dbRoleToExecute() {
        return Optional.ofNullable(this.dbRoleToExecute);
    }

    /**
     * Human-readable label that identifies the stream instance.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return Human-readable label that identifies the stream instance.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    @Import(name="networking")
    private @Nullable Output<StreamConnectionNetworkingArgs> networking;

    public Optional<Output<StreamConnectionNetworkingArgs>> networking() {
        return Optional.ofNullable(this.networking);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies your project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    @Import(name="security")
    private @Nullable Output<StreamConnectionSecurityArgs> security;

    public Optional<Output<StreamConnectionSecurityArgs>> security() {
        return Optional.ofNullable(this.security);
    }

    /**
     * Type of connection. Can be either `Cluster`, `Kafka` or `Sample`.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of connection. Can be either `Cluster`, `Kafka` or `Sample`.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private StreamConnectionState() {}

    private StreamConnectionState(StreamConnectionState $) {
        this.authentication = $.authentication;
        this.bootstrapServers = $.bootstrapServers;
        this.clusterName = $.clusterName;
        this.config = $.config;
        this.connectionName = $.connectionName;
        this.dbRoleToExecute = $.dbRoleToExecute;
        this.instanceName = $.instanceName;
        this.networking = $.networking;
        this.projectId = $.projectId;
        this.security = $.security;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamConnectionState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamConnectionState $;

        public Builder() {
            $ = new StreamConnectionState();
        }

        public Builder(StreamConnectionState defaults) {
            $ = new StreamConnectionState(Objects.requireNonNull(defaults));
        }

        public Builder authentication(@Nullable Output<StreamConnectionAuthenticationArgs> authentication) {
            $.authentication = authentication;
            return this;
        }

        public Builder authentication(StreamConnectionAuthenticationArgs authentication) {
            return authentication(Output.of(authentication));
        }

        public Builder bootstrapServers(@Nullable Output<String> bootstrapServers) {
            $.bootstrapServers = bootstrapServers;
            return this;
        }

        public Builder bootstrapServers(String bootstrapServers) {
            return bootstrapServers(Output.of(bootstrapServers));
        }

        public Builder clusterName(@Nullable Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        public Builder config(@Nullable Output<Map<String,String>> config) {
            $.config = config;
            return this;
        }

        public Builder config(Map<String,String> config) {
            return config(Output.of(config));
        }

        /**
         * @param connectionName Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(@Nullable Output<String> connectionName) {
            $.connectionName = connectionName;
            return this;
        }

        /**
         * @param connectionName Human-readable label that identifies the stream connection. In the case of the Sample type, this is the name of the sample source.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(String connectionName) {
            return connectionName(Output.of(connectionName));
        }

        public Builder dbRoleToExecute(@Nullable Output<StreamConnectionDbRoleToExecuteArgs> dbRoleToExecute) {
            $.dbRoleToExecute = dbRoleToExecute;
            return this;
        }

        public Builder dbRoleToExecute(StreamConnectionDbRoleToExecuteArgs dbRoleToExecute) {
            return dbRoleToExecute(Output.of(dbRoleToExecute));
        }

        /**
         * @param instanceName Human-readable label that identifies the stream instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName Human-readable label that identifies the stream instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        public Builder networking(@Nullable Output<StreamConnectionNetworkingArgs> networking) {
            $.networking = networking;
            return this;
        }

        public Builder networking(StreamConnectionNetworkingArgs networking) {
            return networking(Output.of(networking));
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public Builder security(@Nullable Output<StreamConnectionSecurityArgs> security) {
            $.security = security;
            return this;
        }

        public Builder security(StreamConnectionSecurityArgs security) {
            return security(Output.of(security));
        }

        /**
         * @param type Type of connection. Can be either `Cluster`, `Kafka` or `Sample`.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of connection. Can be either `Cluster`, `Kafka` or `Sample`.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public StreamConnectionState build() {
            return $;
        }
    }

}
