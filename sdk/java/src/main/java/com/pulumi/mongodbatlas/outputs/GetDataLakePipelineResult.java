// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelineIngestionSchedule;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelineSink;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelineSnapshot;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelineSource;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelineTransformation;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDataLakePipelineResult {
    /**
     * @return Timestamp that indicates when the Data Lake Pipeline was created.
     * 
     */
    private String createdDate;
    /**
     * @return Unique 24-hexadecimal digit string that identifies the Data Lake Pipeline.
     * 
     */
    private String id;
    /**
     * @return List of backup schedule policy items that you can use as a Data Lake Pipeline source.
     * * `ingestion_schedules.#.id` - Unique 24-hexadecimal digit string that identifies this backup policy item.
     * * `ingestion_schedules.#.frequency_type` - Human-readable label that identifies the frequency type associated with the backup policy.
     * * `ingestion_schedules.#.frequency_interval` - Number that indicates the frequency interval for a set of snapshots.
     * * `ingestion_schedules.#.retention_unit` - Unit of time in which MongoDB Atlas measures snapshot retention.
     * * `ingestion_schedules.#.retention_value` - Duration in days, weeks, or months that MongoDB Atlas retains the snapshot.
     * 
     */
    private List<GetDataLakePipelineIngestionSchedule> ingestionSchedules;
    /**
     * @return Timestamp that indicates the last time that the Data Lake Pipeline was updated.
     * 
     */
    private String lastUpdatedDate;
    private String name;
    /**
     * @return Unique 24-hexadecimal character string that identifies the project.
     * 
     */
    private String projectId;
    private List<GetDataLakePipelineSink> sinks;
    /**
     * @return List of backup snapshots that you can use to trigger an on demand pipeline run.
     * * `snapshots.#.id` - Unique 24-hexadecimal digit string that identifies the snapshot.
     * * `snapshots.#.provider` - Human-readable label that identifies the cloud provider that stores this snapshot.
     * * `snapshots.#.created_at` - Date and time when MongoDB Atlas took the snapshot.
     * * `snapshots.#.expires_at` - Date and time when MongoDB Atlas deletes the snapshot.
     * * `snapshots.#.frequency_type` - Human-readable label that identifies how often this snapshot triggers.
     * * `snapshots.#.master_key` - Unique string that identifies the Amazon Web Services (AWS) Key Management Service (KMS) Customer Master Key (CMK) used to encrypt the snapshot.
     * * `snapshots.#.mongod_version` - Version of the MongoDB host that this snapshot backs up.
     * * `snapshots.#.replica_set_name` - Human-readable label that identifies the replica set from which MongoDB Atlas took this snapshot.
     * * `snapshots.#.type` - Human-readable label that categorizes the cluster as a replica set or sharded cluster.
     * * `snapshots.#.snapshot_type` - Human-readable label that identifies when this snapshot triggers.
     * * `snapshots.#.status` - Human-readable label that indicates the stage of the backup process for this snapshot.
     * * `snapshots.#.size` - List of backup snapshots that you can use to trigger an on demand pipeline run.
     * * `snapshots.#.copy_region` - List that identifies the regions to which MongoDB Atlas copies the snapshot.
     * * `snapshots.#.policies` - List that contains unique identifiers for the policy items.
     * 
     */
    private List<GetDataLakePipelineSnapshot> snapshots;
    private List<GetDataLakePipelineSource> sources;
    /**
     * @return State of this Data Lake Pipeline.
     * 
     */
    private String state;
    /**
     * @return Fields to be excluded for this Data Lake Pipeline.
     * * `transformations.#.field` - Key in the document.
     * * `transformations.#.type` - Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
     * 
     */
    private List<GetDataLakePipelineTransformation> transformations;

    private GetDataLakePipelineResult() {}
    /**
     * @return Timestamp that indicates when the Data Lake Pipeline was created.
     * 
     */
    public String createdDate() {
        return this.createdDate;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies the Data Lake Pipeline.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return List of backup schedule policy items that you can use as a Data Lake Pipeline source.
     * * `ingestion_schedules.#.id` - Unique 24-hexadecimal digit string that identifies this backup policy item.
     * * `ingestion_schedules.#.frequency_type` - Human-readable label that identifies the frequency type associated with the backup policy.
     * * `ingestion_schedules.#.frequency_interval` - Number that indicates the frequency interval for a set of snapshots.
     * * `ingestion_schedules.#.retention_unit` - Unit of time in which MongoDB Atlas measures snapshot retention.
     * * `ingestion_schedules.#.retention_value` - Duration in days, weeks, or months that MongoDB Atlas retains the snapshot.
     * 
     */
    public List<GetDataLakePipelineIngestionSchedule> ingestionSchedules() {
        return this.ingestionSchedules;
    }
    /**
     * @return Timestamp that indicates the last time that the Data Lake Pipeline was updated.
     * 
     */
    public String lastUpdatedDate() {
        return this.lastUpdatedDate;
    }
    public String name() {
        return this.name;
    }
    /**
     * @return Unique 24-hexadecimal character string that identifies the project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    public List<GetDataLakePipelineSink> sinks() {
        return this.sinks;
    }
    /**
     * @return List of backup snapshots that you can use to trigger an on demand pipeline run.
     * * `snapshots.#.id` - Unique 24-hexadecimal digit string that identifies the snapshot.
     * * `snapshots.#.provider` - Human-readable label that identifies the cloud provider that stores this snapshot.
     * * `snapshots.#.created_at` - Date and time when MongoDB Atlas took the snapshot.
     * * `snapshots.#.expires_at` - Date and time when MongoDB Atlas deletes the snapshot.
     * * `snapshots.#.frequency_type` - Human-readable label that identifies how often this snapshot triggers.
     * * `snapshots.#.master_key` - Unique string that identifies the Amazon Web Services (AWS) Key Management Service (KMS) Customer Master Key (CMK) used to encrypt the snapshot.
     * * `snapshots.#.mongod_version` - Version of the MongoDB host that this snapshot backs up.
     * * `snapshots.#.replica_set_name` - Human-readable label that identifies the replica set from which MongoDB Atlas took this snapshot.
     * * `snapshots.#.type` - Human-readable label that categorizes the cluster as a replica set or sharded cluster.
     * * `snapshots.#.snapshot_type` - Human-readable label that identifies when this snapshot triggers.
     * * `snapshots.#.status` - Human-readable label that indicates the stage of the backup process for this snapshot.
     * * `snapshots.#.size` - List of backup snapshots that you can use to trigger an on demand pipeline run.
     * * `snapshots.#.copy_region` - List that identifies the regions to which MongoDB Atlas copies the snapshot.
     * * `snapshots.#.policies` - List that contains unique identifiers for the policy items.
     * 
     */
    public List<GetDataLakePipelineSnapshot> snapshots() {
        return this.snapshots;
    }
    public List<GetDataLakePipelineSource> sources() {
        return this.sources;
    }
    /**
     * @return State of this Data Lake Pipeline.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Fields to be excluded for this Data Lake Pipeline.
     * * `transformations.#.field` - Key in the document.
     * * `transformations.#.type` - Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
     * 
     */
    public List<GetDataLakePipelineTransformation> transformations() {
        return this.transformations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataLakePipelineResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdDate;
        private String id;
        private List<GetDataLakePipelineIngestionSchedule> ingestionSchedules;
        private String lastUpdatedDate;
        private String name;
        private String projectId;
        private List<GetDataLakePipelineSink> sinks;
        private List<GetDataLakePipelineSnapshot> snapshots;
        private List<GetDataLakePipelineSource> sources;
        private String state;
        private List<GetDataLakePipelineTransformation> transformations;
        public Builder() {}
        public Builder(GetDataLakePipelineResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdDate = defaults.createdDate;
    	      this.id = defaults.id;
    	      this.ingestionSchedules = defaults.ingestionSchedules;
    	      this.lastUpdatedDate = defaults.lastUpdatedDate;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.sinks = defaults.sinks;
    	      this.snapshots = defaults.snapshots;
    	      this.sources = defaults.sources;
    	      this.state = defaults.state;
    	      this.transformations = defaults.transformations;
        }

        @CustomType.Setter
        public Builder createdDate(String createdDate) {
            this.createdDate = Objects.requireNonNull(createdDate);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder ingestionSchedules(List<GetDataLakePipelineIngestionSchedule> ingestionSchedules) {
            this.ingestionSchedules = Objects.requireNonNull(ingestionSchedules);
            return this;
        }
        public Builder ingestionSchedules(GetDataLakePipelineIngestionSchedule... ingestionSchedules) {
            return ingestionSchedules(List.of(ingestionSchedules));
        }
        @CustomType.Setter
        public Builder lastUpdatedDate(String lastUpdatedDate) {
            this.lastUpdatedDate = Objects.requireNonNull(lastUpdatedDate);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder sinks(List<GetDataLakePipelineSink> sinks) {
            this.sinks = Objects.requireNonNull(sinks);
            return this;
        }
        public Builder sinks(GetDataLakePipelineSink... sinks) {
            return sinks(List.of(sinks));
        }
        @CustomType.Setter
        public Builder snapshots(List<GetDataLakePipelineSnapshot> snapshots) {
            this.snapshots = Objects.requireNonNull(snapshots);
            return this;
        }
        public Builder snapshots(GetDataLakePipelineSnapshot... snapshots) {
            return snapshots(List.of(snapshots));
        }
        @CustomType.Setter
        public Builder sources(List<GetDataLakePipelineSource> sources) {
            this.sources = Objects.requireNonNull(sources);
            return this;
        }
        public Builder sources(GetDataLakePipelineSource... sources) {
            return sources(List.of(sources));
        }
        @CustomType.Setter
        public Builder state(String state) {
            this.state = Objects.requireNonNull(state);
            return this;
        }
        @CustomType.Setter
        public Builder transformations(List<GetDataLakePipelineTransformation> transformations) {
            this.transformations = Objects.requireNonNull(transformations);
            return this;
        }
        public Builder transformations(GetDataLakePipelineTransformation... transformations) {
            return transformations(List.of(transformations));
        }
        public GetDataLakePipelineResult build() {
            final var o = new GetDataLakePipelineResult();
            o.createdDate = createdDate;
            o.id = id;
            o.ingestionSchedules = ingestionSchedules;
            o.lastUpdatedDate = lastUpdatedDate;
            o.name = name;
            o.projectId = projectId;
            o.sinks = sinks;
            o.snapshots = snapshots;
            o.sources = sources;
            o.state = state;
            o.transformations = transformations;
            return o;
        }
    }
}
