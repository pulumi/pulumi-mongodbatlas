// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.AdvancedClusterAdvancedConfigurationArgs;
import com.pulumi.mongodbatlas.inputs.AdvancedClusterBiConnectorArgs;
import com.pulumi.mongodbatlas.inputs.AdvancedClusterConnectionStringArgs;
import com.pulumi.mongodbatlas.inputs.AdvancedClusterLabelArgs;
import com.pulumi.mongodbatlas.inputs.AdvancedClusterReplicationSpecArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AdvancedClusterState extends com.pulumi.resources.ResourceArgs {

    public static final AdvancedClusterState Empty = new AdvancedClusterState();

    @Import(name="advancedConfiguration")
    private @Nullable Output<AdvancedClusterAdvancedConfigurationArgs> advancedConfiguration;

    public Optional<Output<AdvancedClusterAdvancedConfigurationArgs>> advancedConfiguration() {
        return Optional.ofNullable(this.advancedConfiguration);
    }

    /**
     * Flag that indicates whether the cluster can perform backups.
     * If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
     * 
     */
    @Import(name="backupEnabled")
    private @Nullable Output<Boolean> backupEnabled;

    /**
     * @return Flag that indicates whether the cluster can perform backups.
     * If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
     * 
     */
    public Optional<Output<Boolean>> backupEnabled() {
        return Optional.ofNullable(this.backupEnabled);
    }

    /**
     * Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
     * 
     */
    @Import(name="biConnector")
    private @Nullable Output<AdvancedClusterBiConnectorArgs> biConnector;

    /**
     * @return Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
     * 
     */
    public Optional<Output<AdvancedClusterBiConnectorArgs>> biConnector() {
        return Optional.ofNullable(this.biConnector);
    }

    /**
     * The cluster ID.
     * 
     */
    @Import(name="clusterId")
    private @Nullable Output<String> clusterId;

    /**
     * @return The cluster ID.
     * 
     */
    public Optional<Output<String>> clusterId() {
        return Optional.ofNullable(this.clusterId);
    }

    /**
     * Type of the cluster that you want to create.
     * Accepted values include:
     * 
     */
    @Import(name="clusterType")
    private @Nullable Output<String> clusterType;

    /**
     * @return Type of the cluster that you want to create.
     * Accepted values include:
     * 
     */
    public Optional<Output<String>> clusterType() {
        return Optional.ofNullable(this.clusterType);
    }

    /**
     * Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
     * 
     */
    @Import(name="connectionStrings")
    private @Nullable Output<List<AdvancedClusterConnectionStringArgs>> connectionStrings;

    /**
     * @return Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
     * 
     */
    public Optional<Output<List<AdvancedClusterConnectionStringArgs>>> connectionStrings() {
        return Optional.ofNullable(this.connectionStrings);
    }

    @Import(name="createDate")
    private @Nullable Output<String> createDate;

    public Optional<Output<String>> createDate() {
        return Optional.ofNullable(this.createDate);
    }

    /**
     * Capacity, in gigabytes, of the host&#39;s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can&#39;t set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
     * 
     */
    @Import(name="diskSizeGb")
    private @Nullable Output<Double> diskSizeGb;

    /**
     * @return Capacity, in gigabytes, of the host&#39;s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can&#39;t set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
     * 
     */
    public Optional<Output<Double>> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }

    /**
     * Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backup_enabled` is false or omitted.
     * 
     */
    @Import(name="encryptionAtRestProvider")
    private @Nullable Output<String> encryptionAtRestProvider;

    /**
     * @return Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backup_enabled` is false or omitted.
     * 
     */
    public Optional<Output<String>> encryptionAtRestProvider() {
        return Optional.ofNullable(this.encryptionAtRestProvider);
    }

    /**
     * Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<AdvancedClusterLabelArgs>> labels;

    /**
     * @return Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
     * 
     */
    public Optional<Output<List<AdvancedClusterLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.0`, `4.2`, `4.4`, or `5.0`. If omitted, Atlas deploys a cluster that runs MongoDB 4.4. If `replication_specs#.region_configs#.&lt;type&gt;Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `version_release_system` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `version_release_system`: `LTS`.
     * 
     */
    @Import(name="mongoDbMajorVersion")
    private @Nullable Output<String> mongoDbMajorVersion;

    /**
     * @return Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.0`, `4.2`, `4.4`, or `5.0`. If omitted, Atlas deploys a cluster that runs MongoDB 4.4. If `replication_specs#.region_configs#.&lt;type&gt;Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `version_release_system` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `version_release_system`: `LTS`.
     * 
     */
    public Optional<Output<String>> mongoDbMajorVersion() {
        return Optional.ofNullable(this.mongoDbMajorVersion);
    }

    /**
     * Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
     * 
     */
    @Import(name="mongoDbVersion")
    private @Nullable Output<String> mongoDbVersion;

    /**
     * @return Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
     * 
     */
    public Optional<Output<String>> mongoDbVersion() {
        return Optional.ofNullable(this.mongoDbVersion);
    }

    /**
     * Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="paused")
    private @Nullable Output<Boolean> paused;

    public Optional<Output<Boolean>> paused() {
        return Optional.ofNullable(this.paused);
    }

    /**
     * Flag that indicates if the cluster uses Continuous Cloud Backup.
     * 
     */
    @Import(name="pitEnabled")
    private @Nullable Output<Boolean> pitEnabled;

    /**
     * @return Flag that indicates if the cluster uses Continuous Cloud Backup.
     * 
     */
    public Optional<Output<Boolean>> pitEnabled() {
        return Optional.ofNullable(this.pitEnabled);
    }

    /**
     * Unique ID for the project to create the database user.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique ID for the project to create the database user.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Configuration for cluster regions and the hardware provisioned in them. See below
     * 
     */
    @Import(name="replicationSpecs")
    private @Nullable Output<List<AdvancedClusterReplicationSpecArgs>> replicationSpecs;

    /**
     * @return Configuration for cluster regions and the hardware provisioned in them. See below
     * 
     */
    public Optional<Output<List<AdvancedClusterReplicationSpecArgs>>> replicationSpecs() {
        return Optional.ofNullable(this.replicationSpecs);
    }

    /**
     * Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
     * 
     */
    @Import(name="rootCertType")
    private @Nullable Output<String> rootCertType;

    /**
     * @return Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
     * 
     */
    public Optional<Output<String>> rootCertType() {
        return Optional.ofNullable(this.rootCertType);
    }

    /**
     * Current state of the cluster. The possible states are:
     * - IDLE
     * - CREATING
     * - UPDATING
     * - DELETING
     * - DELETED
     * - REPAIRING
     * 
     */
    @Import(name="stateName")
    private @Nullable Output<String> stateName;

    /**
     * @return Current state of the cluster. The possible states are:
     * - IDLE
     * - CREATING
     * - UPDATING
     * - DELETING
     * - DELETED
     * - REPAIRING
     * 
     */
    public Optional<Output<String>> stateName() {
        return Optional.ofNullable(this.stateName);
    }

    /**
     * Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won&#39;t delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
     * 
     */
    @Import(name="terminationProtectionEnabled")
    private @Nullable Output<Boolean> terminationProtectionEnabled;

    /**
     * @return Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won&#39;t delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
     * 
     */
    public Optional<Output<Boolean>> terminationProtectionEnabled() {
        return Optional.ofNullable(this.terminationProtectionEnabled);
    }

    /**
     * Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
     * 
     */
    @Import(name="versionReleaseSystem")
    private @Nullable Output<String> versionReleaseSystem;

    /**
     * @return Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
     * 
     */
    public Optional<Output<String>> versionReleaseSystem() {
        return Optional.ofNullable(this.versionReleaseSystem);
    }

    private AdvancedClusterState() {}

    private AdvancedClusterState(AdvancedClusterState $) {
        this.advancedConfiguration = $.advancedConfiguration;
        this.backupEnabled = $.backupEnabled;
        this.biConnector = $.biConnector;
        this.clusterId = $.clusterId;
        this.clusterType = $.clusterType;
        this.connectionStrings = $.connectionStrings;
        this.createDate = $.createDate;
        this.diskSizeGb = $.diskSizeGb;
        this.encryptionAtRestProvider = $.encryptionAtRestProvider;
        this.labels = $.labels;
        this.mongoDbMajorVersion = $.mongoDbMajorVersion;
        this.mongoDbVersion = $.mongoDbVersion;
        this.name = $.name;
        this.paused = $.paused;
        this.pitEnabled = $.pitEnabled;
        this.projectId = $.projectId;
        this.replicationSpecs = $.replicationSpecs;
        this.rootCertType = $.rootCertType;
        this.stateName = $.stateName;
        this.terminationProtectionEnabled = $.terminationProtectionEnabled;
        this.versionReleaseSystem = $.versionReleaseSystem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdvancedClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdvancedClusterState $;

        public Builder() {
            $ = new AdvancedClusterState();
        }

        public Builder(AdvancedClusterState defaults) {
            $ = new AdvancedClusterState(Objects.requireNonNull(defaults));
        }

        public Builder advancedConfiguration(@Nullable Output<AdvancedClusterAdvancedConfigurationArgs> advancedConfiguration) {
            $.advancedConfiguration = advancedConfiguration;
            return this;
        }

        public Builder advancedConfiguration(AdvancedClusterAdvancedConfigurationArgs advancedConfiguration) {
            return advancedConfiguration(Output.of(advancedConfiguration));
        }

        /**
         * @param backupEnabled Flag that indicates whether the cluster can perform backups.
         * If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
         * 
         * @return builder
         * 
         */
        public Builder backupEnabled(@Nullable Output<Boolean> backupEnabled) {
            $.backupEnabled = backupEnabled;
            return this;
        }

        /**
         * @param backupEnabled Flag that indicates whether the cluster can perform backups.
         * If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
         * 
         * @return builder
         * 
         */
        public Builder backupEnabled(Boolean backupEnabled) {
            return backupEnabled(Output.of(backupEnabled));
        }

        /**
         * @param biConnector Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder biConnector(@Nullable Output<AdvancedClusterBiConnectorArgs> biConnector) {
            $.biConnector = biConnector;
            return this;
        }

        /**
         * @param biConnector Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder biConnector(AdvancedClusterBiConnectorArgs biConnector) {
            return biConnector(Output.of(biConnector));
        }

        /**
         * @param clusterId The cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(@Nullable Output<String> clusterId) {
            $.clusterId = clusterId;
            return this;
        }

        /**
         * @param clusterId The cluster ID.
         * 
         * @return builder
         * 
         */
        public Builder clusterId(String clusterId) {
            return clusterId(Output.of(clusterId));
        }

        /**
         * @param clusterType Type of the cluster that you want to create.
         * Accepted values include:
         * 
         * @return builder
         * 
         */
        public Builder clusterType(@Nullable Output<String> clusterType) {
            $.clusterType = clusterType;
            return this;
        }

        /**
         * @param clusterType Type of the cluster that you want to create.
         * Accepted values include:
         * 
         * @return builder
         * 
         */
        public Builder clusterType(String clusterType) {
            return clusterType(Output.of(clusterType));
        }

        /**
         * @param connectionStrings Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(@Nullable Output<List<AdvancedClusterConnectionStringArgs>> connectionStrings) {
            $.connectionStrings = connectionStrings;
            return this;
        }

        /**
         * @param connectionStrings Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(List<AdvancedClusterConnectionStringArgs> connectionStrings) {
            return connectionStrings(Output.of(connectionStrings));
        }

        /**
         * @param connectionStrings Set of connection strings that your applications use to connect to this cluster. More info in [Connection-strings](https://docs.mongodb.com/manual/reference/connection-string/). Use the parameters in this object to connect your applications to this cluster. To learn more about the formats of connection strings, see [Connection String Options](https://docs.atlas.mongodb.com/reference/faq/connection-changes/). NOTE: Atlas returns the contents of this object after the cluster is operational, not while it builds the cluster.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(AdvancedClusterConnectionStringArgs... connectionStrings) {
            return connectionStrings(List.of(connectionStrings));
        }

        public Builder createDate(@Nullable Output<String> createDate) {
            $.createDate = createDate;
            return this;
        }

        public Builder createDate(String createDate) {
            return createDate(Output.of(createDate));
        }

        /**
         * @param diskSizeGb Capacity, in gigabytes, of the host&#39;s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can&#39;t set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(@Nullable Output<Double> diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        /**
         * @param diskSizeGb Capacity, in gigabytes, of the host&#39;s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (i.e., 4 TB). This value must be a positive number. You can&#39;t set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095)Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved.
         * 
         * @return builder
         * 
         */
        public Builder diskSizeGb(Double diskSizeGb) {
            return diskSizeGb(Output.of(diskSizeGb));
        }

        /**
         * @param encryptionAtRestProvider Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backup_enabled` is false or omitted.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAtRestProvider(@Nullable Output<String> encryptionAtRestProvider) {
            $.encryptionAtRestProvider = encryptionAtRestProvider;
            return this;
        }

        /**
         * @param encryptionAtRestProvider Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backup_enabled` is false or omitted.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAtRestProvider(String encryptionAtRestProvider) {
            return encryptionAtRestProvider(Output.of(encryptionAtRestProvider));
        }

        /**
         * @param labels Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<AdvancedClusterLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<AdvancedClusterLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels Configuration for the collection of key-value pairs that tag and categorize the cluster. See below.
         * 
         * @return builder
         * 
         */
        public Builder labels(AdvancedClusterLabelArgs... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param mongoDbMajorVersion Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.0`, `4.2`, `4.4`, or `5.0`. If omitted, Atlas deploys a cluster that runs MongoDB 4.4. If `replication_specs#.region_configs#.&lt;type&gt;Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `version_release_system` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `version_release_system`: `LTS`.
         * 
         * @return builder
         * 
         */
        public Builder mongoDbMajorVersion(@Nullable Output<String> mongoDbMajorVersion) {
            $.mongoDbMajorVersion = mongoDbMajorVersion;
            return this;
        }

        /**
         * @param mongoDbMajorVersion Version of the cluster to deploy. Atlas supports the following MongoDB versions for M10+ clusters: `4.0`, `4.2`, `4.4`, or `5.0`. If omitted, Atlas deploys a cluster that runs MongoDB 4.4. If `replication_specs#.region_configs#.&lt;type&gt;Specs.instance_size`: `M0`, `M2` or `M5`, Atlas deploys MongoDB 4.4. Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `version_release_system` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `version_release_system`: `LTS`.
         * 
         * @return builder
         * 
         */
        public Builder mongoDbMajorVersion(String mongoDbMajorVersion) {
            return mongoDbMajorVersion(Output.of(mongoDbMajorVersion));
        }

        /**
         * @param mongoDbVersion Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
         * 
         * @return builder
         * 
         */
        public Builder mongoDbVersion(@Nullable Output<String> mongoDbVersion) {
            $.mongoDbVersion = mongoDbVersion;
            return this;
        }

        /**
         * @param mongoDbVersion Version of MongoDB the cluster runs, in `major-version`.`minor-version` format.
         * 
         * @return builder
         * 
         */
        public Builder mongoDbVersion(String mongoDbVersion) {
            return mongoDbVersion(Output.of(mongoDbVersion));
        }

        /**
         * @param name Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder paused(@Nullable Output<Boolean> paused) {
            $.paused = paused;
            return this;
        }

        public Builder paused(Boolean paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param pitEnabled Flag that indicates if the cluster uses Continuous Cloud Backup.
         * 
         * @return builder
         * 
         */
        public Builder pitEnabled(@Nullable Output<Boolean> pitEnabled) {
            $.pitEnabled = pitEnabled;
            return this;
        }

        /**
         * @param pitEnabled Flag that indicates if the cluster uses Continuous Cloud Backup.
         * 
         * @return builder
         * 
         */
        public Builder pitEnabled(Boolean pitEnabled) {
            return pitEnabled(Output.of(pitEnabled));
        }

        /**
         * @param projectId Unique ID for the project to create the database user.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique ID for the project to create the database user.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param replicationSpecs Configuration for cluster regions and the hardware provisioned in them. See below
         * 
         * @return builder
         * 
         */
        public Builder replicationSpecs(@Nullable Output<List<AdvancedClusterReplicationSpecArgs>> replicationSpecs) {
            $.replicationSpecs = replicationSpecs;
            return this;
        }

        /**
         * @param replicationSpecs Configuration for cluster regions and the hardware provisioned in them. See below
         * 
         * @return builder
         * 
         */
        public Builder replicationSpecs(List<AdvancedClusterReplicationSpecArgs> replicationSpecs) {
            return replicationSpecs(Output.of(replicationSpecs));
        }

        /**
         * @param replicationSpecs Configuration for cluster regions and the hardware provisioned in them. See below
         * 
         * @return builder
         * 
         */
        public Builder replicationSpecs(AdvancedClusterReplicationSpecArgs... replicationSpecs) {
            return replicationSpecs(List.of(replicationSpecs));
        }

        /**
         * @param rootCertType Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
         * 
         * @return builder
         * 
         */
        public Builder rootCertType(@Nullable Output<String> rootCertType) {
            $.rootCertType = rootCertType;
            return this;
        }

        /**
         * @param rootCertType Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
         * 
         * @return builder
         * 
         */
        public Builder rootCertType(String rootCertType) {
            return rootCertType(Output.of(rootCertType));
        }

        /**
         * @param stateName Current state of the cluster. The possible states are:
         * - IDLE
         * - CREATING
         * - UPDATING
         * - DELETING
         * - DELETED
         * - REPAIRING
         * 
         * @return builder
         * 
         */
        public Builder stateName(@Nullable Output<String> stateName) {
            $.stateName = stateName;
            return this;
        }

        /**
         * @param stateName Current state of the cluster. The possible states are:
         * - IDLE
         * - CREATING
         * - UPDATING
         * - DELETING
         * - DELETED
         * - REPAIRING
         * 
         * @return builder
         * 
         */
        public Builder stateName(String stateName) {
            return stateName(Output.of(stateName));
        }

        /**
         * @param terminationProtectionEnabled Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won&#39;t delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
         * 
         * @return builder
         * 
         */
        public Builder terminationProtectionEnabled(@Nullable Output<Boolean> terminationProtectionEnabled) {
            $.terminationProtectionEnabled = terminationProtectionEnabled;
            return this;
        }

        /**
         * @param terminationProtectionEnabled Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won&#39;t delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
         * 
         * @return builder
         * 
         */
        public Builder terminationProtectionEnabled(Boolean terminationProtectionEnabled) {
            return terminationProtectionEnabled(Output.of(terminationProtectionEnabled));
        }

        /**
         * @param versionReleaseSystem Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
         * 
         * @return builder
         * 
         */
        public Builder versionReleaseSystem(@Nullable Output<String> versionReleaseSystem) {
            $.versionReleaseSystem = versionReleaseSystem;
            return this;
        }

        /**
         * @param versionReleaseSystem Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongo_db_major_version` field. Atlas accepts:
         * 
         * @return builder
         * 
         */
        public Builder versionReleaseSystem(String versionReleaseSystem) {
            return versionReleaseSystem(Output.of(versionReleaseSystem));
        }

        public AdvancedClusterState build() {
            return $;
        }
    }

}
