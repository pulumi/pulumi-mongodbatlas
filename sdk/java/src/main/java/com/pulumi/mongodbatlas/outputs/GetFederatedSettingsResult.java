// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFederatedSettingsResult {
    /**
     * @return List that contains the domains associated with the organization&#39;s identity provider.
     * 
     */
    private List<String> federatedDomains;
    /**
     * @return Flag that indicates whether this organization has role mappings configured.
     * 
     */
    private Boolean hasRoleMappings;
    /**
     * @return Unique 24-hexadecimal digit string that identifies this federation.
     * 
     */
    private String id;
    /**
     * @return Unique 20-hexadecimal digit string that identifies the identity provider connected to this organization.
     * 
     */
    private String identityProviderId;
    /**
     * @return Value that indicates whether the identity provider is active. Atlas returns ACTIVE if the identity provider is active and INACTIVE if the identity provider is inactive.
     * 
     */
    private String identityProviderStatus;
    private String orgId;

    private GetFederatedSettingsResult() {}
    /**
     * @return List that contains the domains associated with the organization&#39;s identity provider.
     * 
     */
    public List<String> federatedDomains() {
        return this.federatedDomains;
    }
    /**
     * @return Flag that indicates whether this organization has role mappings configured.
     * 
     */
    public Boolean hasRoleMappings() {
        return this.hasRoleMappings;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies this federation.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique 20-hexadecimal digit string that identifies the identity provider connected to this organization.
     * 
     */
    public String identityProviderId() {
        return this.identityProviderId;
    }
    /**
     * @return Value that indicates whether the identity provider is active. Atlas returns ACTIVE if the identity provider is active and INACTIVE if the identity provider is inactive.
     * 
     */
    public String identityProviderStatus() {
        return this.identityProviderStatus;
    }
    public String orgId() {
        return this.orgId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFederatedSettingsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> federatedDomains;
        private Boolean hasRoleMappings;
        private String id;
        private String identityProviderId;
        private String identityProviderStatus;
        private String orgId;
        public Builder() {}
        public Builder(GetFederatedSettingsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.federatedDomains = defaults.federatedDomains;
    	      this.hasRoleMappings = defaults.hasRoleMappings;
    	      this.id = defaults.id;
    	      this.identityProviderId = defaults.identityProviderId;
    	      this.identityProviderStatus = defaults.identityProviderStatus;
    	      this.orgId = defaults.orgId;
        }

        @CustomType.Setter
        public Builder federatedDomains(List<String> federatedDomains) {
            if (federatedDomains == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsResult", "federatedDomains");
            }
            this.federatedDomains = federatedDomains;
            return this;
        }
        public Builder federatedDomains(String... federatedDomains) {
            return federatedDomains(List.of(federatedDomains));
        }
        @CustomType.Setter
        public Builder hasRoleMappings(Boolean hasRoleMappings) {
            if (hasRoleMappings == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsResult", "hasRoleMappings");
            }
            this.hasRoleMappings = hasRoleMappings;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identityProviderId(String identityProviderId) {
            if (identityProviderId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsResult", "identityProviderId");
            }
            this.identityProviderId = identityProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder identityProviderStatus(String identityProviderStatus) {
            if (identityProviderStatus == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsResult", "identityProviderStatus");
            }
            this.identityProviderStatus = identityProviderStatus;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsResult", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        public GetFederatedSettingsResult build() {
            final var _resultValue = new GetFederatedSettingsResult();
            _resultValue.federatedDomains = federatedDomains;
            _resultValue.hasRoleMappings = hasRoleMappings;
            _resultValue.id = id;
            _resultValue.identityProviderId = identityProviderId;
            _resultValue.identityProviderStatus = identityProviderStatus;
            _resultValue.orgId = orgId;
            return _resultValue;
        }
    }
}
