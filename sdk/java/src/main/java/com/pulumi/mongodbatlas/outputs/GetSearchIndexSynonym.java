// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetSearchIndexSynonym {
    /**
     * @return [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index.
     * 
     */
    private String analyzer;
    /**
     * @return Name of the index.
     * 
     */
    private String name;
    private String sourceCollection;

    private GetSearchIndexSynonym() {}
    /**
     * @return [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index.
     * 
     */
    public String analyzer() {
        return this.analyzer;
    }
    /**
     * @return Name of the index.
     * 
     */
    public String name() {
        return this.name;
    }
    public String sourceCollection() {
        return this.sourceCollection;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSearchIndexSynonym defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String analyzer;
        private String name;
        private String sourceCollection;
        public Builder() {}
        public Builder(GetSearchIndexSynonym defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analyzer = defaults.analyzer;
    	      this.name = defaults.name;
    	      this.sourceCollection = defaults.sourceCollection;
        }

        @CustomType.Setter
        public Builder analyzer(String analyzer) {
            this.analyzer = Objects.requireNonNull(analyzer);
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            this.name = Objects.requireNonNull(name);
            return this;
        }
        @CustomType.Setter
        public Builder sourceCollection(String sourceCollection) {
            this.sourceCollection = Objects.requireNonNull(sourceCollection);
            return this;
        }
        public GetSearchIndexSynonym build() {
            final var _resultValue = new GetSearchIndexSynonym();
            _resultValue.analyzer = analyzer;
            _resultValue.name = name;
            _resultValue.sourceCollection = sourceCollection;
            return _resultValue;
        }
    }
}
