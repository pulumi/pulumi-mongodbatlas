// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.mongodbatlas.SearchDeploymentArgs;
import com.pulumi.mongodbatlas.Utilities;
import com.pulumi.mongodbatlas.inputs.SearchDeploymentState;
import com.pulumi.mongodbatlas.outputs.SearchDeploymentSpec;
import com.pulumi.mongodbatlas.outputs.SearchDeploymentTimeouts;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## # Resource: mongodbatlas.SearchDeployment
 * 
 * `mongodbatlas.SearchDeployment` provides a Search Deployment resource. The resource lets you create, edit and delete dedicated search nodes in a cluster.
 * 
 * &gt; **NOTE:** For details on supported cloud providers and existing limitations you can visit the [Search Node Documentation](https://www.mongodb.com/docs/atlas/cluster-config/multi-cloud-distribution/#search-nodes-for-workload-isolation).
 * 
 * &gt; **NOTE:** Only a single search deployment resource can be defined for each cluster.
 * 
 * ## Example Usage
 * 
 * ### S
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.Project;
 * import com.pulumi.mongodbatlas.ProjectArgs;
 * import com.pulumi.mongodbatlas.AdvancedCluster;
 * import com.pulumi.mongodbatlas.AdvancedClusterArgs;
 * import com.pulumi.mongodbatlas.inputs.AdvancedClusterReplicationSpecArgs;
 * import com.pulumi.mongodbatlas.SearchDeployment;
 * import com.pulumi.mongodbatlas.SearchDeploymentArgs;
 * import com.pulumi.mongodbatlas.inputs.SearchDeploymentSpecArgs;
 * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
 * import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var exampleProject = new Project("exampleProject", ProjectArgs.builder()
 *             .name("project-name")
 *             .orgId(orgId)
 *             .build());
 * 
 *         var exampleAdvancedCluster = new AdvancedCluster("exampleAdvancedCluster", AdvancedClusterArgs.builder()
 *             .projectId(exampleProject.id())
 *             .name("ClusterExample")
 *             .clusterType("REPLICASET")
 *             .replicationSpecs(AdvancedClusterReplicationSpecArgs.builder()
 *                 .regionConfigs(AdvancedClusterReplicationSpecRegionConfigArgs.builder()
 *                     .electableSpecs(AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs.builder()
 *                         .instanceSize("M10")
 *                         .nodeCount(3)
 *                         .build())
 *                     .providerName("AWS")
 *                     .priority(7)
 *                     .regionName("US_EAST_1")
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *         var exampleSearchDeployment = new SearchDeployment("exampleSearchDeployment", SearchDeploymentArgs.builder()
 *             .projectId(exampleProject.id())
 *             .clusterName(exampleAdvancedCluster.name())
 *             .specs(SearchDeploymentSpecArgs.builder()
 *                 .instance_size("S20_HIGHCPU_NVME")
 *                 .node_count(2)
 *                 .build())
 *             .build());
 * 
 *         final var example = MongodbatlasFunctions.getSearchDeployment(GetSearchDeploymentArgs.builder()
 *             .projectId(exampleSearchDeployment.projectId())
 *             .clusterName(exampleSearchDeployment.clusterName())
 *             .build());
 * 
 *         ctx.export("mongodbatlasSearchDeploymentId", example.applyValue(getSearchDeploymentResult -> getSearchDeploymentResult).applyValue(example -> example.applyValue(getSearchDeploymentResult -> getSearchDeploymentResult.id())));
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 */
@ResourceType(type="mongodbatlas:index/searchDeployment:SearchDeployment")
public class SearchDeployment extends com.pulumi.resources.CustomResource {
    /**
     * Label that identifies the cluster to return the search nodes for.
     * 
     */
    @Export(name="clusterName", refs={String.class}, tree="[0]")
    private Output<String> clusterName;

    /**
     * @return Label that identifies the cluster to return the search nodes for.
     * 
     */
    public Output<String> clusterName() {
        return this.clusterName;
    }
    /**
     * Unique 24-hexadecimal character string that identifies the project.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal character string that identifies the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * List of settings that configure the search nodes for your cluster. This list is currently limited to defining a single element.
     * 
     */
    @Export(name="specs", refs={List.class,SearchDeploymentSpec.class}, tree="[0,1]")
    private Output<List<SearchDeploymentSpec>> specs;

    /**
     * @return List of settings that configure the search nodes for your cluster. This list is currently limited to defining a single element.
     * 
     */
    public Output<List<SearchDeploymentSpec>> specs() {
        return this.specs;
    }
    /**
     * Human-readable label that indicates the current operating condition of this search deployment.
     * 
     */
    @Export(name="stateName", refs={String.class}, tree="[0]")
    private Output<String> stateName;

    /**
     * @return Human-readable label that indicates the current operating condition of this search deployment.
     * 
     */
    public Output<String> stateName() {
        return this.stateName;
    }
    @Export(name="timeouts", refs={SearchDeploymentTimeouts.class}, tree="[0]")
    private Output</* @Nullable */ SearchDeploymentTimeouts> timeouts;

    public Output<Optional<SearchDeploymentTimeouts>> timeouts() {
        return Codegen.optional(this.timeouts);
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public SearchDeployment(String name) {
        this(name, SearchDeploymentArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public SearchDeployment(String name, SearchDeploymentArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public SearchDeployment(String name, SearchDeploymentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/searchDeployment:SearchDeployment", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()));
    }

    private SearchDeployment(String name, Output<String> id, @Nullable SearchDeploymentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/searchDeployment:SearchDeployment", name, state, makeResourceOptions(options, id));
    }

    private static SearchDeploymentArgs makeArgs(SearchDeploymentArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? SearchDeploymentArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static SearchDeployment get(String name, Output<String> id, @Nullable SearchDeploymentState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new SearchDeployment(name, id, state, options);
    }
}
