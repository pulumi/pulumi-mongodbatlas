// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkContainerState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkContainerState Empty = new NetworkContainerState();

    /**
     * CIDR block that Atlas uses for the Network Peering containers in your project.  Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3):
     * * Lower bound: 10.0.0.0 -	Upper bound: 10.255.255.255 -	Prefix: 10/8
     * * Lower bound: 172.16.0.0 -	Upper bound:172.31.255.255 -	Prefix:	172.16/12
     * * Lower bound: 192.168.0.0 -	Upper bound:192.168.255.255 -	Prefix:	192.168/16
     * 
     * **Atlas locks this value** if an M10+ cluster or a Network Peering connection already exists. To modify the CIDR block, ensure there are no M10+ clusters in the project and no other Network Peering connections in the project.
     * 
     * **Important**: Atlas limits the number of MongoDB nodes per Network Peering connection based on the CIDR block and the region selected for the project. Contact [MongoDB Support](https://www.mongodb.com/contact?tck=docs_atlas) for any questions on Atlas limits of MongoDB nodes per Network Peering connection.
     * 
     */
    @Import(name="atlasCidrBlock")
    private @Nullable Output<String> atlasCidrBlock;

    /**
     * @return CIDR block that Atlas uses for the Network Peering containers in your project.  Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3):
     * * Lower bound: 10.0.0.0 -	Upper bound: 10.255.255.255 -	Prefix: 10/8
     * * Lower bound: 172.16.0.0 -	Upper bound:172.31.255.255 -	Prefix:	172.16/12
     * * Lower bound: 192.168.0.0 -	Upper bound:192.168.255.255 -	Prefix:	192.168/16
     * 
     * **Atlas locks this value** if an M10+ cluster or a Network Peering connection already exists. To modify the CIDR block, ensure there are no M10+ clusters in the project and no other Network Peering connections in the project.
     * 
     * **Important**: Atlas limits the number of MongoDB nodes per Network Peering connection based on the CIDR block and the region selected for the project. Contact [MongoDB Support](https://www.mongodb.com/contact?tck=docs_atlas) for any questions on Atlas limits of MongoDB nodes per Network Peering connection.
     * 
     */
    public Optional<Output<String>> atlasCidrBlock() {
        return Optional.ofNullable(this.atlasCidrBlock);
    }

    /**
     * Unique identifier of the Azure subscription in which the VNet resides.
     * 
     */
    @Import(name="azureSubscriptionId")
    private @Nullable Output<String> azureSubscriptionId;

    /**
     * @return Unique identifier of the Azure subscription in which the VNet resides.
     * 
     */
    public Optional<Output<String>> azureSubscriptionId() {
        return Optional.ofNullable(this.azureSubscriptionId);
    }

    /**
     * The Network Peering Container ID.
     * 
     */
    @Import(name="containerId")
    private @Nullable Output<String> containerId;

    /**
     * @return The Network Peering Container ID.
     * 
     */
    public Optional<Output<String>> containerId() {
        return Optional.ofNullable(this.containerId);
    }

    /**
     * Unique identifier of the GCP project in which the network peer resides. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
     * 
     */
    @Import(name="gcpProjectId")
    private @Nullable Output<String> gcpProjectId;

    /**
     * @return Unique identifier of the GCP project in which the network peer resides. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
     * 
     */
    public Optional<Output<String>> gcpProjectId() {
        return Optional.ofNullable(this.gcpProjectId);
    }

    /**
     * Unique identifier of the Network Peering connection in the Atlas project. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
     * 
     */
    @Import(name="networkName")
    private @Nullable Output<String> networkName;

    /**
     * @return Unique identifier of the Network Peering connection in the Atlas project. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
     * 
     */
    public Optional<Output<String>> networkName() {
        return Optional.ofNullable(this.networkName);
    }

    /**
     * Unique identifier for the Atlas project for this Network Peering Container.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique identifier for the Atlas project for this Network Peering Container.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Cloud provider for this Network Peering connection.  Accepted values are GCP, AWS, AZURE. If omitted, Atlas sets this parameter to AWS.
     * 
     */
    @Import(name="providerName")
    private @Nullable Output<String> providerName;

    /**
     * @return Cloud provider for this Network Peering connection.  Accepted values are GCP, AWS, AZURE. If omitted, Atlas sets this parameter to AWS.
     * 
     */
    public Optional<Output<String>> providerName() {
        return Optional.ofNullable(this.providerName);
    }

    /**
     * Indicates whether the project has Network Peering connections deployed in the container.
     * 
     */
    @Import(name="provisioned")
    private @Nullable Output<Boolean> provisioned;

    /**
     * @return Indicates whether the project has Network Peering connections deployed in the container.
     * 
     */
    public Optional<Output<Boolean>> provisioned() {
        return Optional.ofNullable(this.provisioned);
    }

    /**
     * Atlas region where the container resides, see the reference list for Atlas Azure region names [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Atlas region where the container resides, see the reference list for Atlas Azure region names [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * The Atlas AWS region name for where this container will exist, see the reference list for Atlas AWS region names [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     * 
     */
    @Import(name="regionName")
    private @Nullable Output<String> regionName;

    /**
     * @return The Atlas AWS region name for where this container will exist, see the reference list for Atlas AWS region names [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     * 
     */
    public Optional<Output<String>> regionName() {
        return Optional.ofNullable(this.regionName);
    }

    /**
     * Atlas regions where the container resides. Provide this field only if you provide an `atlasCidrBlock` smaller than `/18`. [GCP Regions values](https://docs.atlas.mongodb.com/reference/api/vpc-create-container/#request-body-parameters).
     * 
     */
    @Import(name="regions")
    private @Nullable Output<List<String>> regions;

    /**
     * @return Atlas regions where the container resides. Provide this field only if you provide an `atlasCidrBlock` smaller than `/18`. [GCP Regions values](https://docs.atlas.mongodb.com/reference/api/vpc-create-container/#request-body-parameters).
     * 
     */
    public Optional<Output<List<String>>> regions() {
        return Optional.ofNullable(this.regions);
    }

    /**
     * The name of the Azure VNet. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
     * 
     */
    @Import(name="vnetName")
    private @Nullable Output<String> vnetName;

    /**
     * @return The name of the Azure VNet. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
     * 
     */
    public Optional<Output<String>> vnetName() {
        return Optional.ofNullable(this.vnetName);
    }

    /**
     * Unique identifier of Atlas&#39; AWS VPC.
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return Unique identifier of Atlas&#39; AWS VPC.
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private NetworkContainerState() {}

    private NetworkContainerState(NetworkContainerState $) {
        this.atlasCidrBlock = $.atlasCidrBlock;
        this.azureSubscriptionId = $.azureSubscriptionId;
        this.containerId = $.containerId;
        this.gcpProjectId = $.gcpProjectId;
        this.networkName = $.networkName;
        this.projectId = $.projectId;
        this.providerName = $.providerName;
        this.provisioned = $.provisioned;
        this.region = $.region;
        this.regionName = $.regionName;
        this.regions = $.regions;
        this.vnetName = $.vnetName;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkContainerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkContainerState $;

        public Builder() {
            $ = new NetworkContainerState();
        }

        public Builder(NetworkContainerState defaults) {
            $ = new NetworkContainerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param atlasCidrBlock CIDR block that Atlas uses for the Network Peering containers in your project.  Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3):
         * * Lower bound: 10.0.0.0 -	Upper bound: 10.255.255.255 -	Prefix: 10/8
         * * Lower bound: 172.16.0.0 -	Upper bound:172.31.255.255 -	Prefix:	172.16/12
         * * Lower bound: 192.168.0.0 -	Upper bound:192.168.255.255 -	Prefix:	192.168/16
         * 
         * **Atlas locks this value** if an M10+ cluster or a Network Peering connection already exists. To modify the CIDR block, ensure there are no M10+ clusters in the project and no other Network Peering connections in the project.
         * 
         * **Important**: Atlas limits the number of MongoDB nodes per Network Peering connection based on the CIDR block and the region selected for the project. Contact [MongoDB Support](https://www.mongodb.com/contact?tck=docs_atlas) for any questions on Atlas limits of MongoDB nodes per Network Peering connection.
         * 
         * @return builder
         * 
         */
        public Builder atlasCidrBlock(@Nullable Output<String> atlasCidrBlock) {
            $.atlasCidrBlock = atlasCidrBlock;
            return this;
        }

        /**
         * @param atlasCidrBlock CIDR block that Atlas uses for the Network Peering containers in your project.  Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3):
         * * Lower bound: 10.0.0.0 -	Upper bound: 10.255.255.255 -	Prefix: 10/8
         * * Lower bound: 172.16.0.0 -	Upper bound:172.31.255.255 -	Prefix:	172.16/12
         * * Lower bound: 192.168.0.0 -	Upper bound:192.168.255.255 -	Prefix:	192.168/16
         * 
         * **Atlas locks this value** if an M10+ cluster or a Network Peering connection already exists. To modify the CIDR block, ensure there are no M10+ clusters in the project and no other Network Peering connections in the project.
         * 
         * **Important**: Atlas limits the number of MongoDB nodes per Network Peering connection based on the CIDR block and the region selected for the project. Contact [MongoDB Support](https://www.mongodb.com/contact?tck=docs_atlas) for any questions on Atlas limits of MongoDB nodes per Network Peering connection.
         * 
         * @return builder
         * 
         */
        public Builder atlasCidrBlock(String atlasCidrBlock) {
            return atlasCidrBlock(Output.of(atlasCidrBlock));
        }

        /**
         * @param azureSubscriptionId Unique identifier of the Azure subscription in which the VNet resides.
         * 
         * @return builder
         * 
         */
        public Builder azureSubscriptionId(@Nullable Output<String> azureSubscriptionId) {
            $.azureSubscriptionId = azureSubscriptionId;
            return this;
        }

        /**
         * @param azureSubscriptionId Unique identifier of the Azure subscription in which the VNet resides.
         * 
         * @return builder
         * 
         */
        public Builder azureSubscriptionId(String azureSubscriptionId) {
            return azureSubscriptionId(Output.of(azureSubscriptionId));
        }

        /**
         * @param containerId The Network Peering Container ID.
         * 
         * @return builder
         * 
         */
        public Builder containerId(@Nullable Output<String> containerId) {
            $.containerId = containerId;
            return this;
        }

        /**
         * @param containerId The Network Peering Container ID.
         * 
         * @return builder
         * 
         */
        public Builder containerId(String containerId) {
            return containerId(Output.of(containerId));
        }

        /**
         * @param gcpProjectId Unique identifier of the GCP project in which the network peer resides. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
         * 
         * @return builder
         * 
         */
        public Builder gcpProjectId(@Nullable Output<String> gcpProjectId) {
            $.gcpProjectId = gcpProjectId;
            return this;
        }

        /**
         * @param gcpProjectId Unique identifier of the GCP project in which the network peer resides. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
         * 
         * @return builder
         * 
         */
        public Builder gcpProjectId(String gcpProjectId) {
            return gcpProjectId(Output.of(gcpProjectId));
        }

        /**
         * @param networkName Unique identifier of the Network Peering connection in the Atlas project. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
         * 
         * @return builder
         * 
         */
        public Builder networkName(@Nullable Output<String> networkName) {
            $.networkName = networkName;
            return this;
        }

        /**
         * @param networkName Unique identifier of the Network Peering connection in the Atlas project. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
         * 
         * @return builder
         * 
         */
        public Builder networkName(String networkName) {
            return networkName(Output.of(networkName));
        }

        /**
         * @param projectId Unique identifier for the Atlas project for this Network Peering Container.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique identifier for the Atlas project for this Network Peering Container.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param providerName Cloud provider for this Network Peering connection.  Accepted values are GCP, AWS, AZURE. If omitted, Atlas sets this parameter to AWS.
         * 
         * @return builder
         * 
         */
        public Builder providerName(@Nullable Output<String> providerName) {
            $.providerName = providerName;
            return this;
        }

        /**
         * @param providerName Cloud provider for this Network Peering connection.  Accepted values are GCP, AWS, AZURE. If omitted, Atlas sets this parameter to AWS.
         * 
         * @return builder
         * 
         */
        public Builder providerName(String providerName) {
            return providerName(Output.of(providerName));
        }

        /**
         * @param provisioned Indicates whether the project has Network Peering connections deployed in the container.
         * 
         * @return builder
         * 
         */
        public Builder provisioned(@Nullable Output<Boolean> provisioned) {
            $.provisioned = provisioned;
            return this;
        }

        /**
         * @param provisioned Indicates whether the project has Network Peering connections deployed in the container.
         * 
         * @return builder
         * 
         */
        public Builder provisioned(Boolean provisioned) {
            return provisioned(Output.of(provisioned));
        }

        /**
         * @param region Atlas region where the container resides, see the reference list for Atlas Azure region names [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Atlas region where the container resides, see the reference list for Atlas Azure region names [Azure](https://docs.atlas.mongodb.com/reference/microsoft-azure/).
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param regionName The Atlas AWS region name for where this container will exist, see the reference list for Atlas AWS region names [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/).
         * 
         * @return builder
         * 
         */
        public Builder regionName(@Nullable Output<String> regionName) {
            $.regionName = regionName;
            return this;
        }

        /**
         * @param regionName The Atlas AWS region name for where this container will exist, see the reference list for Atlas AWS region names [AWS](https://docs.atlas.mongodb.com/reference/amazon-aws/).
         * 
         * @return builder
         * 
         */
        public Builder regionName(String regionName) {
            return regionName(Output.of(regionName));
        }

        /**
         * @param regions Atlas regions where the container resides. Provide this field only if you provide an `atlasCidrBlock` smaller than `/18`. [GCP Regions values](https://docs.atlas.mongodb.com/reference/api/vpc-create-container/#request-body-parameters).
         * 
         * @return builder
         * 
         */
        public Builder regions(@Nullable Output<List<String>> regions) {
            $.regions = regions;
            return this;
        }

        /**
         * @param regions Atlas regions where the container resides. Provide this field only if you provide an `atlasCidrBlock` smaller than `/18`. [GCP Regions values](https://docs.atlas.mongodb.com/reference/api/vpc-create-container/#request-body-parameters).
         * 
         * @return builder
         * 
         */
        public Builder regions(List<String> regions) {
            return regions(Output.of(regions));
        }

        /**
         * @param regions Atlas regions where the container resides. Provide this field only if you provide an `atlasCidrBlock` smaller than `/18`. [GCP Regions values](https://docs.atlas.mongodb.com/reference/api/vpc-create-container/#request-body-parameters).
         * 
         * @return builder
         * 
         */
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }

        /**
         * @param vnetName The name of the Azure VNet. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
         * 
         * @return builder
         * 
         */
        public Builder vnetName(@Nullable Output<String> vnetName) {
            $.vnetName = vnetName;
            return this;
        }

        /**
         * @param vnetName The name of the Azure VNet. Returns null. This value is populated once you create a new network peering connection with the network peering resource.
         * 
         * @return builder
         * 
         */
        public Builder vnetName(String vnetName) {
            return vnetName(Output.of(vnetName));
        }

        /**
         * @param vpcId Unique identifier of Atlas&#39; AWS VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId Unique identifier of Atlas&#39; AWS VPC.
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public NetworkContainerState build() {
            return $;
        }
    }

}
