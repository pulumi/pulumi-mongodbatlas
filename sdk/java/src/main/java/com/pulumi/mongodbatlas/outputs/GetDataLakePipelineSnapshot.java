// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetDataLakePipelineSnapshot {
    private String copyRegion;
    private String createdAt;
    private String expiresAt;
    private String frequencyYype;
    /**
     * @return Unique 24-hexadecimal digit string that identifies the Data Lake Pipeline.
     * 
     */
    private String id;
    private String masterKey;
    private String mongodVersion;
    private List<String> policies;
    /**
     * @return Target cloud provider for this Data Lake Pipeline.
     * 
     */
    private String provider;
    private String replicaSetName;
    private Integer size;
    private String status;
    /**
     * @return Type of ingestion source of this Data Lake Pipeline.
     * 
     */
    private String type;

    private GetDataLakePipelineSnapshot() {}
    public String copyRegion() {
        return this.copyRegion;
    }
    public String createdAt() {
        return this.createdAt;
    }
    public String expiresAt() {
        return this.expiresAt;
    }
    public String frequencyYype() {
        return this.frequencyYype;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies the Data Lake Pipeline.
     * 
     */
    public String id() {
        return this.id;
    }
    public String masterKey() {
        return this.masterKey;
    }
    public String mongodVersion() {
        return this.mongodVersion;
    }
    public List<String> policies() {
        return this.policies;
    }
    /**
     * @return Target cloud provider for this Data Lake Pipeline.
     * 
     */
    public String provider() {
        return this.provider;
    }
    public String replicaSetName() {
        return this.replicaSetName;
    }
    public Integer size() {
        return this.size;
    }
    public String status() {
        return this.status;
    }
    /**
     * @return Type of ingestion source of this Data Lake Pipeline.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDataLakePipelineSnapshot defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String copyRegion;
        private String createdAt;
        private String expiresAt;
        private String frequencyYype;
        private String id;
        private String masterKey;
        private String mongodVersion;
        private List<String> policies;
        private String provider;
        private String replicaSetName;
        private Integer size;
        private String status;
        private String type;
        public Builder() {}
        public Builder(GetDataLakePipelineSnapshot defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.copyRegion = defaults.copyRegion;
    	      this.createdAt = defaults.createdAt;
    	      this.expiresAt = defaults.expiresAt;
    	      this.frequencyYype = defaults.frequencyYype;
    	      this.id = defaults.id;
    	      this.masterKey = defaults.masterKey;
    	      this.mongodVersion = defaults.mongodVersion;
    	      this.policies = defaults.policies;
    	      this.provider = defaults.provider;
    	      this.replicaSetName = defaults.replicaSetName;
    	      this.size = defaults.size;
    	      this.status = defaults.status;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder copyRegion(String copyRegion) {
            if (copyRegion == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "copyRegion");
            }
            this.copyRegion = copyRegion;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder expiresAt(String expiresAt) {
            if (expiresAt == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "expiresAt");
            }
            this.expiresAt = expiresAt;
            return this;
        }
        @CustomType.Setter
        public Builder frequencyYype(String frequencyYype) {
            if (frequencyYype == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "frequencyYype");
            }
            this.frequencyYype = frequencyYype;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder masterKey(String masterKey) {
            if (masterKey == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "masterKey");
            }
            this.masterKey = masterKey;
            return this;
        }
        @CustomType.Setter
        public Builder mongodVersion(String mongodVersion) {
            if (mongodVersion == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "mongodVersion");
            }
            this.mongodVersion = mongodVersion;
            return this;
        }
        @CustomType.Setter
        public Builder policies(List<String> policies) {
            if (policies == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "policies");
            }
            this.policies = policies;
            return this;
        }
        public Builder policies(String... policies) {
            return policies(List.of(policies));
        }
        @CustomType.Setter
        public Builder provider(String provider) {
            if (provider == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "provider");
            }
            this.provider = provider;
            return this;
        }
        @CustomType.Setter
        public Builder replicaSetName(String replicaSetName) {
            if (replicaSetName == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "replicaSetName");
            }
            this.replicaSetName = replicaSetName;
            return this;
        }
        @CustomType.Setter
        public Builder size(Integer size) {
            if (size == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "size");
            }
            this.size = size;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetDataLakePipelineSnapshot", "type");
            }
            this.type = type;
            return this;
        }
        public GetDataLakePipelineSnapshot build() {
            final var _resultValue = new GetDataLakePipelineSnapshot();
            _resultValue.copyRegion = copyRegion;
            _resultValue.createdAt = createdAt;
            _resultValue.expiresAt = expiresAt;
            _resultValue.frequencyYype = frequencyYype;
            _resultValue.id = id;
            _resultValue.masterKey = masterKey;
            _resultValue.mongodVersion = mongodVersion;
            _resultValue.policies = policies;
            _resultValue.provider = provider;
            _resultValue.replicaSetName = replicaSetName;
            _resultValue.size = size;
            _resultValue.status = status;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
