// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.inputs.AdvancedClusterAdvancedConfigurationArgs;
import com.pulumi.mongodbatlas.inputs.AdvancedClusterBiConnectorConfigArgs;
import com.pulumi.mongodbatlas.inputs.AdvancedClusterLabelArgs;
import com.pulumi.mongodbatlas.inputs.AdvancedClusterPinnedFcvArgs;
import com.pulumi.mongodbatlas.inputs.AdvancedClusterReplicationSpecArgs;
import com.pulumi.mongodbatlas.inputs.AdvancedClusterTagArgs;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AdvancedClusterArgs extends com.pulumi.resources.ResourceArgs {

    public static final AdvancedClusterArgs Empty = new AdvancedClusterArgs();

    /**
     * If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
     * 
     */
    @Import(name="acceptDataRisksAndForceReplicaSetReconfig")
    private @Nullable Output<String> acceptDataRisksAndForceReplicaSetReconfig;

    /**
     * @return If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
     * 
     */
    public Optional<Output<String>> acceptDataRisksAndForceReplicaSetReconfig() {
        return Optional.ofNullable(this.acceptDataRisksAndForceReplicaSetReconfig);
    }

    @Import(name="advancedConfiguration")
    private @Nullable Output<AdvancedClusterAdvancedConfigurationArgs> advancedConfiguration;

    public Optional<Output<AdvancedClusterAdvancedConfigurationArgs>> advancedConfiguration() {
        return Optional.ofNullable(this.advancedConfiguration);
    }

    /**
     * Flag that indicates whether the cluster can perform backups.
     * If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
     * 
     * Backup uses:
     * [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
     * [Flex Cluster Backups](https://www.mongodb.com/docs/atlas/backup/cloud-backup/flex-cluster-backup/) for flex clusters.
     * If &#34;`backupEnabled`&#34;  is `false` (default), the cluster doesn&#39;t use Atlas backups.
     * 
     */
    @Import(name="backupEnabled")
    private @Nullable Output<Boolean> backupEnabled;

    /**
     * @return Flag that indicates whether the cluster can perform backups.
     * If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
     * 
     * Backup uses:
     * [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
     * [Flex Cluster Backups](https://www.mongodb.com/docs/atlas/backup/cloud-backup/flex-cluster-backup/) for flex clusters.
     * If &#34;`backupEnabled`&#34;  is `false` (default), the cluster doesn&#39;t use Atlas backups.
     * 
     */
    public Optional<Output<Boolean>> backupEnabled() {
        return Optional.ofNullable(this.backupEnabled);
    }

    /**
     * Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
     * 
     */
    @Import(name="biConnectorConfig")
    private @Nullable Output<AdvancedClusterBiConnectorConfigArgs> biConnectorConfig;

    /**
     * @return Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
     * 
     */
    public Optional<Output<AdvancedClusterBiConnectorConfigArgs>> biConnectorConfig() {
        return Optional.ofNullable(this.biConnectorConfig);
    }

    /**
     * Type of the cluster that you want to create.
     * Accepted values include:
     * - `REPLICASET` Replica set
     * - `SHARDED`	Sharded cluster
     * - `GEOSHARDED` Global Cluster
     * 
     */
    @Import(name="clusterType", required=true)
    private Output<String> clusterType;

    /**
     * @return Type of the cluster that you want to create.
     * Accepted values include:
     * - `REPLICASET` Replica set
     * - `SHARDED`	Sharded cluster
     * - `GEOSHARDED` Global Cluster
     * 
     */
    public Output<String> clusterType() {
        return this.clusterType;
    }

    /**
     * Config Server Management Mode for creating or updating a sharded cluster. Valid values are `ATLAS_MANAGED` (default) and `FIXED_TO_DEDICATED`. When configured as `ATLAS_MANAGED`, Atlas may automatically switch the cluster&#39;s config server type for optimal performance and savings. When configured as `FIXED_TO_DEDICATED`, the cluster will always use a dedicated config server. To learn more, see the [Sharded Cluster Config Servers documentation](https://dochub.mongodb.org/docs/manual/core/sharded-cluster-config-servers/).
     * 
     */
    @Import(name="configServerManagementMode")
    private @Nullable Output<String> configServerManagementMode;

    /**
     * @return Config Server Management Mode for creating or updating a sharded cluster. Valid values are `ATLAS_MANAGED` (default) and `FIXED_TO_DEDICATED`. When configured as `ATLAS_MANAGED`, Atlas may automatically switch the cluster&#39;s config server type for optimal performance and savings. When configured as `FIXED_TO_DEDICATED`, the cluster will always use a dedicated config server. To learn more, see the [Sharded Cluster Config Servers documentation](https://dochub.mongodb.org/docs/manual/core/sharded-cluster-config-servers/).
     * 
     */
    public Optional<Output<String>> configServerManagementMode() {
        return Optional.ofNullable(this.configServerManagementMode);
    }

    /**
     * Flag that indicates whether to delete the cluster if the cluster creation times out. Default is false.
     * 
     */
    @Import(name="deleteOnCreateTimeout")
    private @Nullable Output<Boolean> deleteOnCreateTimeout;

    /**
     * @return Flag that indicates whether to delete the cluster if the cluster creation times out. Default is false.
     * 
     */
    public Optional<Output<Boolean>> deleteOnCreateTimeout() {
        return Optional.ofNullable(this.deleteOnCreateTimeout);
    }

    /**
     * Capacity, in gigabytes, of the host&#39;s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can&#39;t set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095). Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_configs.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
     * 
     * @deprecated
     * This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide
     * 
     */
    @Deprecated /* This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide */
    @Import(name="diskSizeGb")
    private @Nullable Output<Double> diskSizeGb;

    /**
     * @return Capacity, in gigabytes, of the host&#39;s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can&#39;t set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095). Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_configs.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
     * 
     * @deprecated
     * This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide
     * 
     */
    @Deprecated /* This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide */
    public Optional<Output<Double>> diskSizeGb() {
        return Optional.ofNullable(this.diskSizeGb);
    }

    /**
     * Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
     * 
     */
    @Import(name="encryptionAtRestProvider")
    private @Nullable Output<String> encryptionAtRestProvider;

    /**
     * @return Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
     * 
     */
    public Optional<Output<String>> encryptionAtRestProvider() {
        return Optional.ofNullable(this.encryptionAtRestProvider);
    }

    /**
     * Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you&#39;re an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more information [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
     * 
     */
    @Import(name="globalClusterSelfManagedSharding")
    private @Nullable Output<Boolean> globalClusterSelfManagedSharding;

    /**
     * @return Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you&#39;re an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more information [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
     * 
     */
    public Optional<Output<Boolean>> globalClusterSelfManagedSharding() {
        return Optional.ofNullable(this.globalClusterSelfManagedSharding);
    }

    /**
     * Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
     * 
     */
    @Import(name="labels")
    private @Nullable Output<List<AdvancedClusterLabelArgs>> labels;

    /**
     * @return Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
     * 
     */
    public Optional<Output<List<AdvancedClusterLabelArgs>>> labels() {
        return Optional.ofNullable(this.labels);
    }

    /**
     * Version of the cluster to deploy. Atlas supports all the MongoDB versions that have **not** reached [End of Live](https://www.mongodb.com/legal/support-policy/lifecycles) for M10+ clusters. If omitted, Atlas deploys the cluster with the default version. For more details, see [documentation](https://www.mongodb.com/docs/atlas/reference/faq/database/#which-versions-of-mongodb-do-service-clusters-use-). Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
     * 
     */
    @Import(name="mongoDbMajorVersion")
    private @Nullable Output<String> mongoDbMajorVersion;

    /**
     * @return Version of the cluster to deploy. Atlas supports all the MongoDB versions that have **not** reached [End of Live](https://www.mongodb.com/legal/support-policy/lifecycles) for M10+ clusters. If omitted, Atlas deploys the cluster with the default version. For more details, see [documentation](https://www.mongodb.com/docs/atlas/reference/faq/database/#which-versions-of-mongodb-do-service-clusters-use-). Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
     * 
     */
    public Optional<Output<String>> mongoDbMajorVersion() {
        return Optional.ofNullable(this.mongoDbMajorVersion);
    }

    /**
     * Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    @Import(name="paused")
    private @Nullable Output<Boolean> paused;

    public Optional<Output<Boolean>> paused() {
        return Optional.ofNullable(this.paused);
    }

    /**
     * Pins the Feature Compatibility Version (FCV) to the current MongoDB version with a provided expiration date. To unpin the FCV the `pinnedFcv` attribute must be removed. This operation can take several minutes as the request processes through the MongoDB data plane. Once FCV is unpinned it will not be possible to downgrade the `mongoDbMajorVersion`. It is advised that updates to `pinnedFcv` are done isolated from other cluster changes. If a plan contains multiple changes, the FCV change will be applied first. If FCV is unpinned past the expiration date the `pinnedFcv` attribute must be removed. The following [knowledge hub article](https://kb.corp.mongodb.com/article/000021785/) and [FCV documentation](https://www.mongodb.com/docs/atlas/tutorial/major-version-change/#manage-feature-compatibility--fcv--during-upgrades) can be referenced for more details. See below.
     * 
     */
    @Import(name="pinnedFcv")
    private @Nullable Output<AdvancedClusterPinnedFcvArgs> pinnedFcv;

    /**
     * @return Pins the Feature Compatibility Version (FCV) to the current MongoDB version with a provided expiration date. To unpin the FCV the `pinnedFcv` attribute must be removed. This operation can take several minutes as the request processes through the MongoDB data plane. Once FCV is unpinned it will not be possible to downgrade the `mongoDbMajorVersion`. It is advised that updates to `pinnedFcv` are done isolated from other cluster changes. If a plan contains multiple changes, the FCV change will be applied first. If FCV is unpinned past the expiration date the `pinnedFcv` attribute must be removed. The following [knowledge hub article](https://kb.corp.mongodb.com/article/000021785/) and [FCV documentation](https://www.mongodb.com/docs/atlas/tutorial/major-version-change/#manage-feature-compatibility--fcv--during-upgrades) can be referenced for more details. See below.
     * 
     */
    public Optional<Output<AdvancedClusterPinnedFcvArgs>> pinnedFcv() {
        return Optional.ofNullable(this.pinnedFcv);
    }

    /**
     * Flag that indicates if the cluster uses Continuous Cloud Backup.
     * 
     */
    @Import(name="pitEnabled")
    private @Nullable Output<Boolean> pitEnabled;

    /**
     * @return Flag that indicates if the cluster uses Continuous Cloud Backup.
     * 
     */
    public Optional<Output<Boolean>> pitEnabled() {
        return Optional.ofNullable(this.pitEnabled);
    }

    /**
     * Unique ID for the project to create the cluster.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Unique ID for the project to create the cluster.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Flag that enables or disables log redaction, see the [manual](https://www.mongodb.com/docs/manual/administration/monitoring/#log-redaction) for more information. Use this in conjunction with Encryption at Rest and TLS/SSL (Transport Encryption) to assist compliance with regulatory requirements. **Note**: Changing this setting on a cluster will trigger a rolling restart as soon as the cluster is updated.
     * 
     */
    @Import(name="redactClientLogData")
    private @Nullable Output<Boolean> redactClientLogData;

    /**
     * @return Flag that enables or disables log redaction, see the [manual](https://www.mongodb.com/docs/manual/administration/monitoring/#log-redaction) for more information. Use this in conjunction with Encryption at Rest and TLS/SSL (Transport Encryption) to assist compliance with regulatory requirements. **Note**: Changing this setting on a cluster will trigger a rolling restart as soon as the cluster is updated.
     * 
     */
    public Optional<Output<Boolean>> redactClientLogData() {
        return Optional.ofNullable(this.redactClientLogData);
    }

    /**
     * Replica set scaling mode for your cluster. Valid values are `WORKLOAD_TYPE`, `SEQUENTIAL` and `NODE_TYPE`. By default, Atlas scales under `WORKLOAD_TYPE`. This mode allows Atlas to scale your analytics nodes in parallel to your operational nodes. When configured as `SEQUENTIAL`, Atlas scales all nodes sequentially. This mode is intended for steady-state workloads and applications performing latency-sensitive secondary reads. When configured as `NODE_TYPE`, Atlas scales your electable nodes in parallel with your read-only and analytics nodes. This mode is intended for large, dynamic workloads requiring frequent and timely cluster tier scaling. This is the fastest scaling strategy, but it might impact latency of workloads when performing extensive secondary reads. [Modify the Replica Set Scaling Mode](https://dochub.mongodb.org/core/scale-nodes)
     * 
     */
    @Import(name="replicaSetScalingStrategy")
    private @Nullable Output<String> replicaSetScalingStrategy;

    /**
     * @return Replica set scaling mode for your cluster. Valid values are `WORKLOAD_TYPE`, `SEQUENTIAL` and `NODE_TYPE`. By default, Atlas scales under `WORKLOAD_TYPE`. This mode allows Atlas to scale your analytics nodes in parallel to your operational nodes. When configured as `SEQUENTIAL`, Atlas scales all nodes sequentially. This mode is intended for steady-state workloads and applications performing latency-sensitive secondary reads. When configured as `NODE_TYPE`, Atlas scales your electable nodes in parallel with your read-only and analytics nodes. This mode is intended for large, dynamic workloads requiring frequent and timely cluster tier scaling. This is the fastest scaling strategy, but it might impact latency of workloads when performing extensive secondary reads. [Modify the Replica Set Scaling Mode](https://dochub.mongodb.org/core/scale-nodes)
     * 
     */
    public Optional<Output<String>> replicaSetScalingStrategy() {
        return Optional.ofNullable(this.replicaSetScalingStrategy);
    }

    /**
     * List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each `replicationSpecs` a `numShards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. The `replicationSpecs` configuration for all shards within the same zone must be the same, with the exception of `instanceSize` and `diskIops` that can scale independently. Note that independent `diskIops` values are only supported for AWS provisioned IOPS, or Azure regions that support Extended IOPS. See below.
     * 
     */
    @Import(name="replicationSpecs", required=true)
    private Output<List<AdvancedClusterReplicationSpecArgs>> replicationSpecs;

    /**
     * @return List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each `replicationSpecs` a `numShards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. The `replicationSpecs` configuration for all shards within the same zone must be the same, with the exception of `instanceSize` and `diskIops` that can scale independently. Note that independent `diskIops` values are only supported for AWS provisioned IOPS, or Azure regions that support Extended IOPS. See below.
     * 
     */
    public Output<List<AdvancedClusterReplicationSpecArgs>> replicationSpecs() {
        return this.replicationSpecs;
    }

    /**
     * Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
     * 
     */
    @Import(name="retainBackupsEnabled")
    private @Nullable Output<Boolean> retainBackupsEnabled;

    /**
     * @return Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
     * 
     */
    public Optional<Output<Boolean>> retainBackupsEnabled() {
        return Optional.ofNullable(this.retainBackupsEnabled);
    }

    /**
     * Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
     * 
     */
    @Import(name="rootCertType")
    private @Nullable Output<String> rootCertType;

    /**
     * @return Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
     * 
     */
    public Optional<Output<String>> rootCertType() {
        return Optional.ofNullable(this.rootCertType);
    }

    /**
     * Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<List<AdvancedClusterTagArgs>> tags;

    /**
     * @return Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
     * 
     */
    public Optional<Output<List<AdvancedClusterTagArgs>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won&#39;t delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
     * 
     */
    @Import(name="terminationProtectionEnabled")
    private @Nullable Output<Boolean> terminationProtectionEnabled;

    /**
     * @return Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won&#39;t delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
     * 
     */
    public Optional<Output<Boolean>> terminationProtectionEnabled() {
        return Optional.ofNullable(this.terminationProtectionEnabled);
    }

    /**
     * Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
     * - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
     * - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn&#39;t update your cluster to newer rapid or major MongoDB releases as they become available.
     * 
     */
    @Import(name="versionReleaseSystem")
    private @Nullable Output<String> versionReleaseSystem;

    /**
     * @return Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
     * - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
     * - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn&#39;t update your cluster to newer rapid or major MongoDB releases as they become available.
     * 
     */
    public Optional<Output<String>> versionReleaseSystem() {
        return Optional.ofNullable(this.versionReleaseSystem);
    }

    private AdvancedClusterArgs() {}

    private AdvancedClusterArgs(AdvancedClusterArgs $) {
        this.acceptDataRisksAndForceReplicaSetReconfig = $.acceptDataRisksAndForceReplicaSetReconfig;
        this.advancedConfiguration = $.advancedConfiguration;
        this.backupEnabled = $.backupEnabled;
        this.biConnectorConfig = $.biConnectorConfig;
        this.clusterType = $.clusterType;
        this.configServerManagementMode = $.configServerManagementMode;
        this.deleteOnCreateTimeout = $.deleteOnCreateTimeout;
        this.diskSizeGb = $.diskSizeGb;
        this.encryptionAtRestProvider = $.encryptionAtRestProvider;
        this.globalClusterSelfManagedSharding = $.globalClusterSelfManagedSharding;
        this.labels = $.labels;
        this.mongoDbMajorVersion = $.mongoDbMajorVersion;
        this.name = $.name;
        this.paused = $.paused;
        this.pinnedFcv = $.pinnedFcv;
        this.pitEnabled = $.pitEnabled;
        this.projectId = $.projectId;
        this.redactClientLogData = $.redactClientLogData;
        this.replicaSetScalingStrategy = $.replicaSetScalingStrategy;
        this.replicationSpecs = $.replicationSpecs;
        this.retainBackupsEnabled = $.retainBackupsEnabled;
        this.rootCertType = $.rootCertType;
        this.tags = $.tags;
        this.terminationProtectionEnabled = $.terminationProtectionEnabled;
        this.versionReleaseSystem = $.versionReleaseSystem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AdvancedClusterArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AdvancedClusterArgs $;

        public Builder() {
            $ = new AdvancedClusterArgs();
        }

        public Builder(AdvancedClusterArgs defaults) {
            $ = new AdvancedClusterArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param acceptDataRisksAndForceReplicaSetReconfig If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
         * 
         * @return builder
         * 
         */
        public Builder acceptDataRisksAndForceReplicaSetReconfig(@Nullable Output<String> acceptDataRisksAndForceReplicaSetReconfig) {
            $.acceptDataRisksAndForceReplicaSetReconfig = acceptDataRisksAndForceReplicaSetReconfig;
            return this;
        }

        /**
         * @param acceptDataRisksAndForceReplicaSetReconfig If reconfiguration is necessary to regain a primary due to a regional outage, submit this field alongside your topology reconfiguration to request a new regional outage resistant topology. Forced reconfigurations during an outage of the majority of electable nodes carry a risk of data loss if replicated writes (even majority committed writes) have not been replicated to the new primary node. MongoDB Atlas docs contain more information. To proceed with an operation which carries that risk, set `acceptDataRisksAndForceReplicaSetReconfig` to the current date. Learn more about Reconfiguring a Replica Set during a regional outage [here](https://dochub.mongodb.org/core/regional-outage-reconfigure-replica-set).
         * 
         * @return builder
         * 
         */
        public Builder acceptDataRisksAndForceReplicaSetReconfig(String acceptDataRisksAndForceReplicaSetReconfig) {
            return acceptDataRisksAndForceReplicaSetReconfig(Output.of(acceptDataRisksAndForceReplicaSetReconfig));
        }

        public Builder advancedConfiguration(@Nullable Output<AdvancedClusterAdvancedConfigurationArgs> advancedConfiguration) {
            $.advancedConfiguration = advancedConfiguration;
            return this;
        }

        public Builder advancedConfiguration(AdvancedClusterAdvancedConfigurationArgs advancedConfiguration) {
            return advancedConfiguration(Output.of(advancedConfiguration));
        }

        /**
         * @param backupEnabled Flag that indicates whether the cluster can perform backups.
         * If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
         * 
         * Backup uses:
         * [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
         * [Flex Cluster Backups](https://www.mongodb.com/docs/atlas/backup/cloud-backup/flex-cluster-backup/) for flex clusters.
         * If &#34;`backupEnabled`&#34;  is `false` (default), the cluster doesn&#39;t use Atlas backups.
         * 
         * @return builder
         * 
         */
        public Builder backupEnabled(@Nullable Output<Boolean> backupEnabled) {
            $.backupEnabled = backupEnabled;
            return this;
        }

        /**
         * @param backupEnabled Flag that indicates whether the cluster can perform backups.
         * If `true`, the cluster can perform backups. You must set this value to `true` for NVMe clusters.
         * 
         * Backup uses:
         * [Cloud Backups](https://docs.atlas.mongodb.com/backup/cloud-backup/overview/#std-label-backup-cloud-provider) for dedicated clusters.
         * [Flex Cluster Backups](https://www.mongodb.com/docs/atlas/backup/cloud-backup/flex-cluster-backup/) for flex clusters.
         * If &#34;`backupEnabled`&#34;  is `false` (default), the cluster doesn&#39;t use Atlas backups.
         * 
         * @return builder
         * 
         */
        public Builder backupEnabled(Boolean backupEnabled) {
            return backupEnabled(Output.of(backupEnabled));
        }

        /**
         * @param biConnectorConfig Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder biConnectorConfig(@Nullable Output<AdvancedClusterBiConnectorConfigArgs> biConnectorConfig) {
            $.biConnectorConfig = biConnectorConfig;
            return this;
        }

        /**
         * @param biConnectorConfig Configuration settings applied to BI Connector for Atlas on this cluster. The MongoDB Connector for Business Intelligence for Atlas (BI Connector) is only available for M10 and larger clusters. The BI Connector is a powerful tool which provides users SQL-based access to their MongoDB databases. As a result, the BI Connector performs operations which may be CPU and memory intensive. Given the limited hardware resources on M10 and M20 cluster tiers, you may experience performance degradation of the cluster when enabling the BI Connector. If this occurs, upgrade to an M30 or larger cluster or disable the BI Connector. See below.
         * 
         * @return builder
         * 
         */
        public Builder biConnectorConfig(AdvancedClusterBiConnectorConfigArgs biConnectorConfig) {
            return biConnectorConfig(Output.of(biConnectorConfig));
        }

        /**
         * @param clusterType Type of the cluster that you want to create.
         * Accepted values include:
         * - `REPLICASET` Replica set
         * - `SHARDED`	Sharded cluster
         * - `GEOSHARDED` Global Cluster
         * 
         * @return builder
         * 
         */
        public Builder clusterType(Output<String> clusterType) {
            $.clusterType = clusterType;
            return this;
        }

        /**
         * @param clusterType Type of the cluster that you want to create.
         * Accepted values include:
         * - `REPLICASET` Replica set
         * - `SHARDED`	Sharded cluster
         * - `GEOSHARDED` Global Cluster
         * 
         * @return builder
         * 
         */
        public Builder clusterType(String clusterType) {
            return clusterType(Output.of(clusterType));
        }

        /**
         * @param configServerManagementMode Config Server Management Mode for creating or updating a sharded cluster. Valid values are `ATLAS_MANAGED` (default) and `FIXED_TO_DEDICATED`. When configured as `ATLAS_MANAGED`, Atlas may automatically switch the cluster&#39;s config server type for optimal performance and savings. When configured as `FIXED_TO_DEDICATED`, the cluster will always use a dedicated config server. To learn more, see the [Sharded Cluster Config Servers documentation](https://dochub.mongodb.org/docs/manual/core/sharded-cluster-config-servers/).
         * 
         * @return builder
         * 
         */
        public Builder configServerManagementMode(@Nullable Output<String> configServerManagementMode) {
            $.configServerManagementMode = configServerManagementMode;
            return this;
        }

        /**
         * @param configServerManagementMode Config Server Management Mode for creating or updating a sharded cluster. Valid values are `ATLAS_MANAGED` (default) and `FIXED_TO_DEDICATED`. When configured as `ATLAS_MANAGED`, Atlas may automatically switch the cluster&#39;s config server type for optimal performance and savings. When configured as `FIXED_TO_DEDICATED`, the cluster will always use a dedicated config server. To learn more, see the [Sharded Cluster Config Servers documentation](https://dochub.mongodb.org/docs/manual/core/sharded-cluster-config-servers/).
         * 
         * @return builder
         * 
         */
        public Builder configServerManagementMode(String configServerManagementMode) {
            return configServerManagementMode(Output.of(configServerManagementMode));
        }

        /**
         * @param deleteOnCreateTimeout Flag that indicates whether to delete the cluster if the cluster creation times out. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnCreateTimeout(@Nullable Output<Boolean> deleteOnCreateTimeout) {
            $.deleteOnCreateTimeout = deleteOnCreateTimeout;
            return this;
        }

        /**
         * @param deleteOnCreateTimeout Flag that indicates whether to delete the cluster if the cluster creation times out. Default is false.
         * 
         * @return builder
         * 
         */
        public Builder deleteOnCreateTimeout(Boolean deleteOnCreateTimeout) {
            return deleteOnCreateTimeout(Output.of(deleteOnCreateTimeout));
        }

        /**
         * @param diskSizeGb Capacity, in gigabytes, of the host&#39;s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can&#39;t set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095). Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_configs.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
         * 
         * @return builder
         * 
         * @deprecated
         * This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide
         * 
         */
        @Deprecated /* This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide */
        public Builder diskSizeGb(@Nullable Output<Double> diskSizeGb) {
            $.diskSizeGb = diskSizeGb;
            return this;
        }

        /**
         * @param diskSizeGb Capacity, in gigabytes, of the host&#39;s root volume. Increase this number to add capacity, up to a maximum possible value of 4096 (4 TB). This value must be a positive number. You can&#39;t set this value with clusters with local [NVMe SSDs](https://docs.atlas.mongodb.com/cluster-tier/#std-label-nvme-storage). The minimum disk size for dedicated clusters is 10 GB for AWS and GCP. If you specify diskSizeGB with a lower disk size, Atlas defaults to the minimum disk size value. If your cluster includes Azure nodes, this value must correspond to an existing Azure disk type (8, 16, 32, 64, 128, 256, 512, 1024, 2048, or 4095). Atlas calculates storage charges differently depending on whether you choose the default value or a custom value. The maximum value for disk storage cannot exceed 50 times the maximum RAM for the selected cluster. If you require additional storage space beyond this limitation, consider [upgrading your cluster](https://docs.atlas.mongodb.com/scale-cluster/#std-label-scale-cluster-instance) to a higher tier. If your cluster spans cloud service providers, this value defaults to the minimum default of the providers involved. **(DEPRECATED)** Use `replication_specs.#.region_configs.#.(analytics_specs|electable_specs|read_only_specs).disk_size_gb` instead. To learn more, see the 1.18.0 upgrade guide.
         * 
         * @return builder
         * 
         * @deprecated
         * This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide
         * 
         */
        @Deprecated /* This parameter is deprecated. Please refer to our examples, documentation, and 1.18.0 migration guide for more details at https://registry.terraform.io/providers/mongodb/mongodbatlas/latest/docs/guides/1.18.0-upgrade-guide */
        public Builder diskSizeGb(Double diskSizeGb) {
            return diskSizeGb(Output.of(diskSizeGb));
        }

        /**
         * @param encryptionAtRestProvider Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAtRestProvider(@Nullable Output<String> encryptionAtRestProvider) {
            $.encryptionAtRestProvider = encryptionAtRestProvider;
            return this;
        }

        /**
         * @param encryptionAtRestProvider Possible values are AWS, GCP, AZURE or NONE.  Only needed if you desire to manage the keys, see [Encryption at Rest using Customer Key Management](https://docs.atlas.mongodb.com/security-kms-encryption/) for complete documentation.  You must configure encryption at rest for the Atlas project before enabling it on any cluster in the project. For Documentation, see [AWS](https://docs.atlas.mongodb.com/security-aws-kms/), [GCP](https://docs.atlas.mongodb.com/security-kms-encryption/) and [Azure](https://docs.atlas.mongodb.com/security-azure-kms/#std-label-security-azure-kms). Requirements are if `replication_specs.#.region_configs.#.&lt;type&gt;Specs.instance_size` is M10 or greater and `backupEnabled` is false or omitted.
         * 
         * @return builder
         * 
         */
        public Builder encryptionAtRestProvider(String encryptionAtRestProvider) {
            return encryptionAtRestProvider(Output.of(encryptionAtRestProvider));
        }

        /**
         * @param globalClusterSelfManagedSharding Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you&#39;re an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more information [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
         * 
         * @return builder
         * 
         */
        public Builder globalClusterSelfManagedSharding(@Nullable Output<Boolean> globalClusterSelfManagedSharding) {
            $.globalClusterSelfManagedSharding = globalClusterSelfManagedSharding;
            return this;
        }

        /**
         * @param globalClusterSelfManagedSharding Flag that indicates if cluster uses Atlas-Managed Sharding (false, default) or Self-Managed Sharding (true). It can only be enabled for Global Clusters (`GEOSHARDED`). It cannot be changed once the cluster is created. Use this mode if you&#39;re an advanced user and the default configuration is too restrictive for your workload. If you select this option, you must manually configure the sharding strategy, more information [here](https://www.mongodb.com/docs/atlas/tutorial/create-global-cluster/#select-your-sharding-configuration).
         * 
         * @return builder
         * 
         */
        public Builder globalClusterSelfManagedSharding(Boolean globalClusterSelfManagedSharding) {
            return globalClusterSelfManagedSharding(Output.of(globalClusterSelfManagedSharding));
        }

        /**
         * @param labels Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
         * 
         * @return builder
         * 
         */
        public Builder labels(@Nullable Output<List<AdvancedClusterLabelArgs>> labels) {
            $.labels = labels;
            return this;
        }

        /**
         * @param labels Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
         * 
         * @return builder
         * 
         */
        public Builder labels(List<AdvancedClusterLabelArgs> labels) {
            return labels(Output.of(labels));
        }

        /**
         * @param labels Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below. **DEPRECATED** Use `tags` instead.
         * 
         * @return builder
         * 
         */
        public Builder labels(AdvancedClusterLabelArgs... labels) {
            return labels(List.of(labels));
        }

        /**
         * @param mongoDbMajorVersion Version of the cluster to deploy. Atlas supports all the MongoDB versions that have **not** reached [End of Live](https://www.mongodb.com/legal/support-policy/lifecycles) for M10+ clusters. If omitted, Atlas deploys the cluster with the default version. For more details, see [documentation](https://www.mongodb.com/docs/atlas/reference/faq/database/#which-versions-of-mongodb-do-service-clusters-use-). Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
         * 
         * @return builder
         * 
         */
        public Builder mongoDbMajorVersion(@Nullable Output<String> mongoDbMajorVersion) {
            $.mongoDbMajorVersion = mongoDbMajorVersion;
            return this;
        }

        /**
         * @param mongoDbMajorVersion Version of the cluster to deploy. Atlas supports all the MongoDB versions that have **not** reached [End of Live](https://www.mongodb.com/legal/support-policy/lifecycles) for M10+ clusters. If omitted, Atlas deploys the cluster with the default version. For more details, see [documentation](https://www.mongodb.com/docs/atlas/reference/faq/database/#which-versions-of-mongodb-do-service-clusters-use-). Atlas always deploys the cluster with the latest stable release of the specified version.  If you set a value to this parameter and set `versionReleaseSystem` `CONTINUOUS`, the resource returns an error. Either clear this parameter or set `versionReleaseSystem`: `LTS`.
         * 
         * @return builder
         * 
         */
        public Builder mongoDbMajorVersion(String mongoDbMajorVersion) {
            return mongoDbMajorVersion(Output.of(mongoDbMajorVersion));
        }

        /**
         * @param name Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the cluster as it appears in Atlas. Once the cluster is created, its name cannot be changed. **WARNING** Changing the name will result in destruction of the existing cluster and the creation of a new cluster.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder paused(@Nullable Output<Boolean> paused) {
            $.paused = paused;
            return this;
        }

        public Builder paused(Boolean paused) {
            return paused(Output.of(paused));
        }

        /**
         * @param pinnedFcv Pins the Feature Compatibility Version (FCV) to the current MongoDB version with a provided expiration date. To unpin the FCV the `pinnedFcv` attribute must be removed. This operation can take several minutes as the request processes through the MongoDB data plane. Once FCV is unpinned it will not be possible to downgrade the `mongoDbMajorVersion`. It is advised that updates to `pinnedFcv` are done isolated from other cluster changes. If a plan contains multiple changes, the FCV change will be applied first. If FCV is unpinned past the expiration date the `pinnedFcv` attribute must be removed. The following [knowledge hub article](https://kb.corp.mongodb.com/article/000021785/) and [FCV documentation](https://www.mongodb.com/docs/atlas/tutorial/major-version-change/#manage-feature-compatibility--fcv--during-upgrades) can be referenced for more details. See below.
         * 
         * @return builder
         * 
         */
        public Builder pinnedFcv(@Nullable Output<AdvancedClusterPinnedFcvArgs> pinnedFcv) {
            $.pinnedFcv = pinnedFcv;
            return this;
        }

        /**
         * @param pinnedFcv Pins the Feature Compatibility Version (FCV) to the current MongoDB version with a provided expiration date. To unpin the FCV the `pinnedFcv` attribute must be removed. This operation can take several minutes as the request processes through the MongoDB data plane. Once FCV is unpinned it will not be possible to downgrade the `mongoDbMajorVersion`. It is advised that updates to `pinnedFcv` are done isolated from other cluster changes. If a plan contains multiple changes, the FCV change will be applied first. If FCV is unpinned past the expiration date the `pinnedFcv` attribute must be removed. The following [knowledge hub article](https://kb.corp.mongodb.com/article/000021785/) and [FCV documentation](https://www.mongodb.com/docs/atlas/tutorial/major-version-change/#manage-feature-compatibility--fcv--during-upgrades) can be referenced for more details. See below.
         * 
         * @return builder
         * 
         */
        public Builder pinnedFcv(AdvancedClusterPinnedFcvArgs pinnedFcv) {
            return pinnedFcv(Output.of(pinnedFcv));
        }

        /**
         * @param pitEnabled Flag that indicates if the cluster uses Continuous Cloud Backup.
         * 
         * @return builder
         * 
         */
        public Builder pitEnabled(@Nullable Output<Boolean> pitEnabled) {
            $.pitEnabled = pitEnabled;
            return this;
        }

        /**
         * @param pitEnabled Flag that indicates if the cluster uses Continuous Cloud Backup.
         * 
         * @return builder
         * 
         */
        public Builder pitEnabled(Boolean pitEnabled) {
            return pitEnabled(Output.of(pitEnabled));
        }

        /**
         * @param projectId Unique ID for the project to create the cluster.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique ID for the project to create the cluster.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param redactClientLogData Flag that enables or disables log redaction, see the [manual](https://www.mongodb.com/docs/manual/administration/monitoring/#log-redaction) for more information. Use this in conjunction with Encryption at Rest and TLS/SSL (Transport Encryption) to assist compliance with regulatory requirements. **Note**: Changing this setting on a cluster will trigger a rolling restart as soon as the cluster is updated.
         * 
         * @return builder
         * 
         */
        public Builder redactClientLogData(@Nullable Output<Boolean> redactClientLogData) {
            $.redactClientLogData = redactClientLogData;
            return this;
        }

        /**
         * @param redactClientLogData Flag that enables or disables log redaction, see the [manual](https://www.mongodb.com/docs/manual/administration/monitoring/#log-redaction) for more information. Use this in conjunction with Encryption at Rest and TLS/SSL (Transport Encryption) to assist compliance with regulatory requirements. **Note**: Changing this setting on a cluster will trigger a rolling restart as soon as the cluster is updated.
         * 
         * @return builder
         * 
         */
        public Builder redactClientLogData(Boolean redactClientLogData) {
            return redactClientLogData(Output.of(redactClientLogData));
        }

        /**
         * @param replicaSetScalingStrategy Replica set scaling mode for your cluster. Valid values are `WORKLOAD_TYPE`, `SEQUENTIAL` and `NODE_TYPE`. By default, Atlas scales under `WORKLOAD_TYPE`. This mode allows Atlas to scale your analytics nodes in parallel to your operational nodes. When configured as `SEQUENTIAL`, Atlas scales all nodes sequentially. This mode is intended for steady-state workloads and applications performing latency-sensitive secondary reads. When configured as `NODE_TYPE`, Atlas scales your electable nodes in parallel with your read-only and analytics nodes. This mode is intended for large, dynamic workloads requiring frequent and timely cluster tier scaling. This is the fastest scaling strategy, but it might impact latency of workloads when performing extensive secondary reads. [Modify the Replica Set Scaling Mode](https://dochub.mongodb.org/core/scale-nodes)
         * 
         * @return builder
         * 
         */
        public Builder replicaSetScalingStrategy(@Nullable Output<String> replicaSetScalingStrategy) {
            $.replicaSetScalingStrategy = replicaSetScalingStrategy;
            return this;
        }

        /**
         * @param replicaSetScalingStrategy Replica set scaling mode for your cluster. Valid values are `WORKLOAD_TYPE`, `SEQUENTIAL` and `NODE_TYPE`. By default, Atlas scales under `WORKLOAD_TYPE`. This mode allows Atlas to scale your analytics nodes in parallel to your operational nodes. When configured as `SEQUENTIAL`, Atlas scales all nodes sequentially. This mode is intended for steady-state workloads and applications performing latency-sensitive secondary reads. When configured as `NODE_TYPE`, Atlas scales your electable nodes in parallel with your read-only and analytics nodes. This mode is intended for large, dynamic workloads requiring frequent and timely cluster tier scaling. This is the fastest scaling strategy, but it might impact latency of workloads when performing extensive secondary reads. [Modify the Replica Set Scaling Mode](https://dochub.mongodb.org/core/scale-nodes)
         * 
         * @return builder
         * 
         */
        public Builder replicaSetScalingStrategy(String replicaSetScalingStrategy) {
            return replicaSetScalingStrategy(Output.of(replicaSetScalingStrategy));
        }

        /**
         * @param replicationSpecs List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each `replicationSpecs` a `numShards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. The `replicationSpecs` configuration for all shards within the same zone must be the same, with the exception of `instanceSize` and `diskIops` that can scale independently. Note that independent `diskIops` values are only supported for AWS provisioned IOPS, or Azure regions that support Extended IOPS. See below.
         * 
         * @return builder
         * 
         */
        public Builder replicationSpecs(Output<List<AdvancedClusterReplicationSpecArgs>> replicationSpecs) {
            $.replicationSpecs = replicationSpecs;
            return this;
        }

        /**
         * @param replicationSpecs List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each `replicationSpecs` a `numShards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. The `replicationSpecs` configuration for all shards within the same zone must be the same, with the exception of `instanceSize` and `diskIops` that can scale independently. Note that independent `diskIops` values are only supported for AWS provisioned IOPS, or Azure regions that support Extended IOPS. See below.
         * 
         * @return builder
         * 
         */
        public Builder replicationSpecs(List<AdvancedClusterReplicationSpecArgs> replicationSpecs) {
            return replicationSpecs(Output.of(replicationSpecs));
        }

        /**
         * @param replicationSpecs List of settings that configure your cluster regions. This attribute has one object per shard representing node configurations in each shard. For replica sets there is only one object representing node configurations. If for each `replicationSpecs` a `numShards` is configured with a value greater than 1 (using deprecated sharding configurations), then each object represents a zone with one or more shards. The `replicationSpecs` configuration for all shards within the same zone must be the same, with the exception of `instanceSize` and `diskIops` that can scale independently. Note that independent `diskIops` values are only supported for AWS provisioned IOPS, or Azure regions that support Extended IOPS. See below.
         * 
         * @return builder
         * 
         */
        public Builder replicationSpecs(AdvancedClusterReplicationSpecArgs... replicationSpecs) {
            return replicationSpecs(List.of(replicationSpecs));
        }

        /**
         * @param retainBackupsEnabled Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
         * 
         * @return builder
         * 
         */
        public Builder retainBackupsEnabled(@Nullable Output<Boolean> retainBackupsEnabled) {
            $.retainBackupsEnabled = retainBackupsEnabled;
            return this;
        }

        /**
         * @param retainBackupsEnabled Flag that indicates whether to retain backup snapshots for the deleted dedicated cluster
         * 
         * @return builder
         * 
         */
        public Builder retainBackupsEnabled(Boolean retainBackupsEnabled) {
            return retainBackupsEnabled(Output.of(retainBackupsEnabled));
        }

        /**
         * @param rootCertType Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
         * 
         * @return builder
         * 
         */
        public Builder rootCertType(@Nullable Output<String> rootCertType) {
            $.rootCertType = rootCertType;
            return this;
        }

        /**
         * @param rootCertType Certificate Authority that MongoDB Atlas clusters use. You can specify ISRGROOTX1 (for ISRG Root X1).
         * 
         * @return builder
         * 
         */
        public Builder rootCertType(String rootCertType) {
            return rootCertType(Output.of(rootCertType));
        }

        /**
         * @param tags Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<List<AdvancedClusterTagArgs>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
         * 
         * @return builder
         * 
         */
        public Builder tags(List<AdvancedClusterTagArgs> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param tags Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
         * 
         * @return builder
         * 
         */
        public Builder tags(AdvancedClusterTagArgs... tags) {
            return tags(List.of(tags));
        }

        /**
         * @param terminationProtectionEnabled Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won&#39;t delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
         * 
         * @return builder
         * 
         */
        public Builder terminationProtectionEnabled(@Nullable Output<Boolean> terminationProtectionEnabled) {
            $.terminationProtectionEnabled = terminationProtectionEnabled;
            return this;
        }

        /**
         * @param terminationProtectionEnabled Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won&#39;t delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
         * 
         * @return builder
         * 
         */
        public Builder terminationProtectionEnabled(Boolean terminationProtectionEnabled) {
            return terminationProtectionEnabled(Output.of(terminationProtectionEnabled));
        }

        /**
         * @param versionReleaseSystem Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
         * - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
         * - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn&#39;t update your cluster to newer rapid or major MongoDB releases as they become available.
         * 
         * @return builder
         * 
         */
        public Builder versionReleaseSystem(@Nullable Output<String> versionReleaseSystem) {
            $.versionReleaseSystem = versionReleaseSystem;
            return this;
        }

        /**
         * @param versionReleaseSystem Release cadence that Atlas uses for this cluster. This parameter defaults to `LTS`. If you set this field to `CONTINUOUS`, you must omit the `mongoDbMajorVersion` field. Atlas accepts:
         * - `CONTINUOUS`:  Atlas creates your cluster using the most recent MongoDB release. Atlas automatically updates your cluster to the latest major and rapid MongoDB releases as they become available.
         * - `LTS`: Atlas creates your cluster using the latest patch release of the MongoDB version that you specify in the mongoDBMajorVersion field. Atlas automatically updates your cluster to subsequent patch releases of this MongoDB version. Atlas doesn&#39;t update your cluster to newer rapid or major MongoDB releases as they become available.
         * 
         * @return builder
         * 
         */
        public Builder versionReleaseSystem(String versionReleaseSystem) {
            return versionReleaseSystem(Output.of(versionReleaseSystem));
        }

        public AdvancedClusterArgs build() {
            if ($.clusterType == null) {
                throw new MissingRequiredPropertyException("AdvancedClusterArgs", "clusterType");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("AdvancedClusterArgs", "projectId");
            }
            if ($.replicationSpecs == null) {
                throw new MissingRequiredPropertyException("AdvancedClusterArgs", "replicationSpecs");
            }
            return $;
        }
    }

}
