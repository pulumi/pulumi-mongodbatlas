// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OnlineArchiveScheduleArgs extends com.pulumi.resources.ResourceArgs {

    public static final OnlineArchiveScheduleArgs Empty = new OnlineArchiveScheduleArgs();

    /**
     * Day of the month when the scheduled archive starts. This field should be provided only when schedule `type` is `MONTHLY`.
     * 
     */
    @Import(name="dayOfMonth")
    private @Nullable Output<Integer> dayOfMonth;

    /**
     * @return Day of the month when the scheduled archive starts. This field should be provided only when schedule `type` is `MONTHLY`.
     * 
     */
    public Optional<Output<Integer>> dayOfMonth() {
        return Optional.ofNullable(this.dayOfMonth);
    }

    /**
     * Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7). This field should be provided only when schedule `type` is `WEEKLY`.
     * 
     */
    @Import(name="dayOfWeek")
    private @Nullable Output<Integer> dayOfWeek;

    /**
     * @return Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7). This field should be provided only when schedule `type` is `WEEKLY`.
     * 
     */
    public Optional<Output<Integer>> dayOfWeek() {
        return Optional.ofNullable(this.dayOfWeek);
    }

    /**
     * Hour of the day when the scheduled window to run one online archive ends.
     * 
     */
    @Import(name="endHour")
    private @Nullable Output<Integer> endHour;

    /**
     * @return Hour of the day when the scheduled window to run one online archive ends.
     * 
     */
    public Optional<Output<Integer>> endHour() {
        return Optional.ofNullable(this.endHour);
    }

    /**
     * Minute of the hour when the scheduled window to run one online archive ends.
     * 
     */
    @Import(name="endMinute")
    private @Nullable Output<Integer> endMinute;

    /**
     * @return Minute of the hour when the scheduled window to run one online archive ends.
     * 
     */
    public Optional<Output<Integer>> endMinute() {
        return Optional.ofNullable(this.endMinute);
    }

    /**
     * Hour of the day when the when the scheduled window to run one online archive starts.
     * 
     */
    @Import(name="startHour")
    private @Nullable Output<Integer> startHour;

    /**
     * @return Hour of the day when the when the scheduled window to run one online archive starts.
     * 
     */
    public Optional<Output<Integer>> startHour() {
        return Optional.ofNullable(this.startHour);
    }

    /**
     * Minute of the hour when the scheduled window to run one online archive starts.
     * 
     */
    @Import(name="startMinute")
    private @Nullable Output<Integer> startMinute;

    /**
     * @return Minute of the hour when the scheduled window to run one online archive starts.
     * 
     */
    public Optional<Output<Integer>> startMinute() {
        return Optional.ofNullable(this.startMinute);
    }

    /**
     * Type of schedule (`DEFAULT`, `DAILY`, `MONTHLY`, `WEEKLY`).
     * 
     */
    @Import(name="type", required=true)
    private Output<String> type;

    /**
     * @return Type of schedule (`DEFAULT`, `DAILY`, `MONTHLY`, `WEEKLY`).
     * 
     */
    public Output<String> type() {
        return this.type;
    }

    private OnlineArchiveScheduleArgs() {}

    private OnlineArchiveScheduleArgs(OnlineArchiveScheduleArgs $) {
        this.dayOfMonth = $.dayOfMonth;
        this.dayOfWeek = $.dayOfWeek;
        this.endHour = $.endHour;
        this.endMinute = $.endMinute;
        this.startHour = $.startHour;
        this.startMinute = $.startMinute;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OnlineArchiveScheduleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OnlineArchiveScheduleArgs $;

        public Builder() {
            $ = new OnlineArchiveScheduleArgs();
        }

        public Builder(OnlineArchiveScheduleArgs defaults) {
            $ = new OnlineArchiveScheduleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dayOfMonth Day of the month when the scheduled archive starts. This field should be provided only when schedule `type` is `MONTHLY`.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(@Nullable Output<Integer> dayOfMonth) {
            $.dayOfMonth = dayOfMonth;
            return this;
        }

        /**
         * @param dayOfMonth Day of the month when the scheduled archive starts. This field should be provided only when schedule `type` is `MONTHLY`.
         * 
         * @return builder
         * 
         */
        public Builder dayOfMonth(Integer dayOfMonth) {
            return dayOfMonth(Output.of(dayOfMonth));
        }

        /**
         * @param dayOfWeek Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7). This field should be provided only when schedule `type` is `WEEKLY`.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(@Nullable Output<Integer> dayOfWeek) {
            $.dayOfWeek = dayOfWeek;
            return this;
        }

        /**
         * @param dayOfWeek Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7). This field should be provided only when schedule `type` is `WEEKLY`.
         * 
         * @return builder
         * 
         */
        public Builder dayOfWeek(Integer dayOfWeek) {
            return dayOfWeek(Output.of(dayOfWeek));
        }

        /**
         * @param endHour Hour of the day when the scheduled window to run one online archive ends.
         * 
         * @return builder
         * 
         */
        public Builder endHour(@Nullable Output<Integer> endHour) {
            $.endHour = endHour;
            return this;
        }

        /**
         * @param endHour Hour of the day when the scheduled window to run one online archive ends.
         * 
         * @return builder
         * 
         */
        public Builder endHour(Integer endHour) {
            return endHour(Output.of(endHour));
        }

        /**
         * @param endMinute Minute of the hour when the scheduled window to run one online archive ends.
         * 
         * @return builder
         * 
         */
        public Builder endMinute(@Nullable Output<Integer> endMinute) {
            $.endMinute = endMinute;
            return this;
        }

        /**
         * @param endMinute Minute of the hour when the scheduled window to run one online archive ends.
         * 
         * @return builder
         * 
         */
        public Builder endMinute(Integer endMinute) {
            return endMinute(Output.of(endMinute));
        }

        /**
         * @param startHour Hour of the day when the when the scheduled window to run one online archive starts.
         * 
         * @return builder
         * 
         */
        public Builder startHour(@Nullable Output<Integer> startHour) {
            $.startHour = startHour;
            return this;
        }

        /**
         * @param startHour Hour of the day when the when the scheduled window to run one online archive starts.
         * 
         * @return builder
         * 
         */
        public Builder startHour(Integer startHour) {
            return startHour(Output.of(startHour));
        }

        /**
         * @param startMinute Minute of the hour when the scheduled window to run one online archive starts.
         * 
         * @return builder
         * 
         */
        public Builder startMinute(@Nullable Output<Integer> startMinute) {
            $.startMinute = startMinute;
            return this;
        }

        /**
         * @param startMinute Minute of the hour when the scheduled window to run one online archive starts.
         * 
         * @return builder
         * 
         */
        public Builder startMinute(Integer startMinute) {
            return startMinute(Output.of(startMinute));
        }

        /**
         * @param type Type of schedule (`DEFAULT`, `DAILY`, `MONTHLY`, `WEEKLY`).
         * 
         * @return builder
         * 
         */
        public Builder type(Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of schedule (`DEFAULT`, `DAILY`, `MONTHLY`, `WEEKLY`).
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public OnlineArchiveScheduleArgs build() {
            $.type = Objects.requireNonNull($.type, "expected parameter 'type' to be non-null");
            return $;
        }
    }

}
