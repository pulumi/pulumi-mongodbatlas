// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetServerlessInstancesResultLink;
import com.pulumi.mongodbatlas.outputs.GetServerlessInstancesResultTag;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetServerlessInstancesResult {
    private List<String> connectionStringsPrivateEndpointSrvs;
    /**
     * @return Public `mongodb+srv://` connection string that you can use to connect to this serverless instance.
     * 
     */
    private String connectionStringsStandardSrv;
    /**
     * @return Flag that indicates whether the serverless instance uses Serverless Continuous Backup.
     * 
     */
    private Boolean continuousBackupEnabled;
    private String createDate;
    /**
     * @return Unique 24-hexadecimal digit string that identifies the serverless instance.
     * 
     */
    private String id;
    private List<GetServerlessInstancesResultLink> links;
    /**
     * @return Version of MongoDB that the serverless instance runs, in `&lt;major version&gt;`.`&lt;minor version&gt;` format.
     * 
     */
    private String mongoDbVersion;
    /**
     * @return (Required) Human-readable label that identifies your serverless instance.
     * 
     */
    private String name;
    /**
     * @return Unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
     * 
     */
    private String projectId;
    /**
     * @return Cloud service provider on which MongoDB Cloud provisioned the serverless instance.
     * 
     */
    private String providerSettingsBackingProviderName;
    /**
     * @return Cloud service provider that applies to the provisioned the serverless instance.
     * 
     */
    private String providerSettingsProviderName;
    /**
     * @return Human-readable label that identifies the physical location of your MongoDB serverless instance. The region you choose can affect network latency for clients accessing your databases.
     * 
     */
    private String providerSettingsRegionName;
    /**
     * @return Stage of deployment of this serverless instance when the resource made its request.
     * 
     */
    private String stateName;
    /**
     * @return Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
     * 
     */
    private List<GetServerlessInstancesResultTag> tags;
    /**
     * @return Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won&#39;t delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
     * 
     */
    private Boolean terminationProtectionEnabled;

    private GetServerlessInstancesResult() {}
    public List<String> connectionStringsPrivateEndpointSrvs() {
        return this.connectionStringsPrivateEndpointSrvs;
    }
    /**
     * @return Public `mongodb+srv://` connection string that you can use to connect to this serverless instance.
     * 
     */
    public String connectionStringsStandardSrv() {
        return this.connectionStringsStandardSrv;
    }
    /**
     * @return Flag that indicates whether the serverless instance uses Serverless Continuous Backup.
     * 
     */
    public Boolean continuousBackupEnabled() {
        return this.continuousBackupEnabled;
    }
    public String createDate() {
        return this.createDate;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies the serverless instance.
     * 
     */
    public String id() {
        return this.id;
    }
    public List<GetServerlessInstancesResultLink> links() {
        return this.links;
    }
    /**
     * @return Version of MongoDB that the serverless instance runs, in `&lt;major version&gt;`.`&lt;minor version&gt;` format.
     * 
     */
    public String mongoDbVersion() {
        return this.mongoDbVersion;
    }
    /**
     * @return (Required) Human-readable label that identifies your serverless instance.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Unique identifier for the [project](https://docs.atlas.mongodb.com/organizations-projects/#std-label-projects) that contains the specified cluster.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Cloud service provider on which MongoDB Cloud provisioned the serverless instance.
     * 
     */
    public String providerSettingsBackingProviderName() {
        return this.providerSettingsBackingProviderName;
    }
    /**
     * @return Cloud service provider that applies to the provisioned the serverless instance.
     * 
     */
    public String providerSettingsProviderName() {
        return this.providerSettingsProviderName;
    }
    /**
     * @return Human-readable label that identifies the physical location of your MongoDB serverless instance. The region you choose can affect network latency for clients accessing your databases.
     * 
     */
    public String providerSettingsRegionName() {
        return this.providerSettingsRegionName;
    }
    /**
     * @return Stage of deployment of this serverless instance when the resource made its request.
     * 
     */
    public String stateName() {
        return this.stateName;
    }
    /**
     * @return Set that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the cluster. See below.
     * 
     */
    public List<GetServerlessInstancesResultTag> tags() {
        return this.tags;
    }
    /**
     * @return Flag that indicates whether termination protection is enabled on the cluster. If set to true, MongoDB Cloud won&#39;t delete the cluster. If set to false, MongoDB Cloud will delete the cluster.
     * 
     */
    public Boolean terminationProtectionEnabled() {
        return this.terminationProtectionEnabled;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetServerlessInstancesResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> connectionStringsPrivateEndpointSrvs;
        private String connectionStringsStandardSrv;
        private Boolean continuousBackupEnabled;
        private String createDate;
        private String id;
        private List<GetServerlessInstancesResultLink> links;
        private String mongoDbVersion;
        private String name;
        private String projectId;
        private String providerSettingsBackingProviderName;
        private String providerSettingsProviderName;
        private String providerSettingsRegionName;
        private String stateName;
        private List<GetServerlessInstancesResultTag> tags;
        private Boolean terminationProtectionEnabled;
        public Builder() {}
        public Builder(GetServerlessInstancesResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.connectionStringsPrivateEndpointSrvs = defaults.connectionStringsPrivateEndpointSrvs;
    	      this.connectionStringsStandardSrv = defaults.connectionStringsStandardSrv;
    	      this.continuousBackupEnabled = defaults.continuousBackupEnabled;
    	      this.createDate = defaults.createDate;
    	      this.id = defaults.id;
    	      this.links = defaults.links;
    	      this.mongoDbVersion = defaults.mongoDbVersion;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.providerSettingsBackingProviderName = defaults.providerSettingsBackingProviderName;
    	      this.providerSettingsProviderName = defaults.providerSettingsProviderName;
    	      this.providerSettingsRegionName = defaults.providerSettingsRegionName;
    	      this.stateName = defaults.stateName;
    	      this.tags = defaults.tags;
    	      this.terminationProtectionEnabled = defaults.terminationProtectionEnabled;
        }

        @CustomType.Setter
        public Builder connectionStringsPrivateEndpointSrvs(List<String> connectionStringsPrivateEndpointSrvs) {
            if (connectionStringsPrivateEndpointSrvs == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "connectionStringsPrivateEndpointSrvs");
            }
            this.connectionStringsPrivateEndpointSrvs = connectionStringsPrivateEndpointSrvs;
            return this;
        }
        public Builder connectionStringsPrivateEndpointSrvs(String... connectionStringsPrivateEndpointSrvs) {
            return connectionStringsPrivateEndpointSrvs(List.of(connectionStringsPrivateEndpointSrvs));
        }
        @CustomType.Setter
        public Builder connectionStringsStandardSrv(String connectionStringsStandardSrv) {
            if (connectionStringsStandardSrv == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "connectionStringsStandardSrv");
            }
            this.connectionStringsStandardSrv = connectionStringsStandardSrv;
            return this;
        }
        @CustomType.Setter
        public Builder continuousBackupEnabled(Boolean continuousBackupEnabled) {
            if (continuousBackupEnabled == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "continuousBackupEnabled");
            }
            this.continuousBackupEnabled = continuousBackupEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder createDate(String createDate) {
            if (createDate == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "createDate");
            }
            this.createDate = createDate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder links(List<GetServerlessInstancesResultLink> links) {
            if (links == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "links");
            }
            this.links = links;
            return this;
        }
        public Builder links(GetServerlessInstancesResultLink... links) {
            return links(List.of(links));
        }
        @CustomType.Setter
        public Builder mongoDbVersion(String mongoDbVersion) {
            if (mongoDbVersion == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "mongoDbVersion");
            }
            this.mongoDbVersion = mongoDbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder providerSettingsBackingProviderName(String providerSettingsBackingProviderName) {
            if (providerSettingsBackingProviderName == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "providerSettingsBackingProviderName");
            }
            this.providerSettingsBackingProviderName = providerSettingsBackingProviderName;
            return this;
        }
        @CustomType.Setter
        public Builder providerSettingsProviderName(String providerSettingsProviderName) {
            if (providerSettingsProviderName == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "providerSettingsProviderName");
            }
            this.providerSettingsProviderName = providerSettingsProviderName;
            return this;
        }
        @CustomType.Setter
        public Builder providerSettingsRegionName(String providerSettingsRegionName) {
            if (providerSettingsRegionName == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "providerSettingsRegionName");
            }
            this.providerSettingsRegionName = providerSettingsRegionName;
            return this;
        }
        @CustomType.Setter
        public Builder stateName(String stateName) {
            if (stateName == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "stateName");
            }
            this.stateName = stateName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(List<GetServerlessInstancesResultTag> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        public Builder tags(GetServerlessInstancesResultTag... tags) {
            return tags(List.of(tags));
        }
        @CustomType.Setter
        public Builder terminationProtectionEnabled(Boolean terminationProtectionEnabled) {
            if (terminationProtectionEnabled == null) {
              throw new MissingRequiredPropertyException("GetServerlessInstancesResult", "terminationProtectionEnabled");
            }
            this.terminationProtectionEnabled = terminationProtectionEnabled;
            return this;
        }
        public GetServerlessInstancesResult build() {
            final var _resultValue = new GetServerlessInstancesResult();
            _resultValue.connectionStringsPrivateEndpointSrvs = connectionStringsPrivateEndpointSrvs;
            _resultValue.connectionStringsStandardSrv = connectionStringsStandardSrv;
            _resultValue.continuousBackupEnabled = continuousBackupEnabled;
            _resultValue.createDate = createDate;
            _resultValue.id = id;
            _resultValue.links = links;
            _resultValue.mongoDbVersion = mongoDbVersion;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.providerSettingsBackingProviderName = providerSettingsBackingProviderName;
            _resultValue.providerSettingsProviderName = providerSettingsProviderName;
            _resultValue.providerSettingsRegionName = providerSettingsRegionName;
            _resultValue.stateName = stateName;
            _resultValue.tags = tags;
            _resultValue.terminationProtectionEnabled = terminationProtectionEnabled;
            return _resultValue;
        }
    }
}
