// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.mongodbatlas.EventTriggerArgs;
import com.pulumi.mongodbatlas.Utilities;
import com.pulumi.mongodbatlas.inputs.EventTriggerState;
import com.pulumi.mongodbatlas.outputs.EventTriggerEventProcessors;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * `mongodbatlas.EventTrigger` provides a Event Trigger resource.
 * 
 * ## Example Usage
 * 
 * ### S
 * ### Example Usage: Database Trigger with Function
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.EventTrigger;
 * import com.pulumi.mongodbatlas.EventTriggerArgs;
 * import com.pulumi.mongodbatlas.inputs.EventTriggerEventProcessorsArgs;
 * import com.pulumi.mongodbatlas.inputs.EventTriggerEventProcessorsAwsEventbridgeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new EventTrigger(&#34;test&#34;, EventTriggerArgs.builder()        
 *             .projectId(&#34;PROJECT ID&#34;)
 *             .appId(&#34;APPLICATION ID&#34;)
 *             .name(&#34;NAME OF THE TRIGGER&#34;)
 *             .type(&#34;DATABASE&#34;)
 *             .functionId(&#34;FUNCTION ID&#34;)
 *             .disabled(false)
 *             .configOperationTypes(            
 *                 &#34;INSERT&#34;,
 *                 &#34;UPDATE&#34;)
 *             .configDatabase(&#34;DATABASE NAME&#34;)
 *             .configCollection(&#34;COLLECTION NAME&#34;)
 *             .configServiceId(&#34;SERVICE ID&#34;)
 *             .configMatch(&#34;&#34;&#34;
 * {
 *   &#34;updateDescription.updatedFields&#34;: {
 *     &#34;status&#34;: &#34;blocked&#34;
 *   }
 * }
 *             &#34;&#34;&#34;)
 *             .configProject(&#34;{\&#34;updateDescription.updatedFields\&#34;:{\&#34;status\&#34;:\&#34;blocked\&#34;}}&#34;)
 *             .configFullDocument(false)
 *             .configFullDocumentBefore(false)
 *             .eventProcessors(EventTriggerEventProcessorsArgs.builder()
 *                 .awsEventbridge(EventTriggerEventProcessorsAwsEventbridgeArgs.builder()
 *                     .configAccountId(&#34;AWS ACCOUNT ID&#34;)
 *                     .configRegion(&#34;AWS REGIOn&#34;)
 *                     .build())
 *                 .build())
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Example Usage: Database Trigger with EventBridge
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.EventTrigger;
 * import com.pulumi.mongodbatlas.EventTriggerArgs;
 * import com.pulumi.mongodbatlas.inputs.EventTriggerEventProcessorsArgs;
 * import com.pulumi.mongodbatlas.inputs.EventTriggerEventProcessorsAwsEventbridgeArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new EventTrigger(&#34;test&#34;, EventTriggerArgs.builder()        
 *             .appId(&#34;APPLICATION ID&#34;)
 *             .configCollection(&#34;COLLECTION NAME&#34;)
 *             .configDatabase(&#34;DATABASE NAME&#34;)
 *             .configFullDocument(false)
 *             .configFullDocumentBefore(false)
 *             .configMatch(&#34;{\&#34;updateDescription.updatedFields\&#34;:{\&#34;status\&#34;:\&#34;blocked\&#34;}}&#34;)
 *             .configOperationType(&#34;LOGIN&#34;)
 *             .configOperationTypes(            
 *                 &#34;INSERT&#34;,
 *                 &#34;UPDATE&#34;)
 *             .configProject(&#34;{\&#34;updateDescription.updatedFields\&#34;:{\&#34;status\&#34;:\&#34;blocked\&#34;}}&#34;)
 *             .configProviders(&#34;anon-user&#34;)
 *             .configSchedule(&#34;*&#34;)
 *             .configServiceId(&#34;1&#34;)
 *             .disabled(false)
 *             .eventProcessors(EventTriggerEventProcessorsArgs.builder()
 *                 .awsEventbridge(EventTriggerEventProcessorsAwsEventbridgeArgs.builder()
 *                     .configAccountId(&#34;AWS ACCOUNT ID&#34;)
 *                     .configRegion(&#34;AWS REGIOn&#34;)
 *                     .build())
 *                 .build())
 *             .name(&#34;NAME OF THE TRIGGER&#34;)
 *             .projectId(&#34;PROJECT ID&#34;)
 *             .type(&#34;DATABASE&#34;)
 *             .unordered(false)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Example Usage: Authentication Trigger
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.EventTrigger;
 * import com.pulumi.mongodbatlas.EventTriggerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new EventTrigger(&#34;test&#34;, EventTriggerArgs.builder()        
 *             .appId(&#34;APPLICATION ID&#34;)
 *             .configOperationType(&#34;LOGIN&#34;)
 *             .configProviders(&#34;anon-user&#34;)
 *             .disabled(false)
 *             .functionId(&#34;1&#34;)
 *             .name(&#34;NAME OF THE TRIGGER&#34;)
 *             .projectId(&#34;PROJECT ID&#34;)
 *             .type(&#34;AUTHENTICATION&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ### Example Usage: Scheduled Trigger
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.EventTrigger;
 * import com.pulumi.mongodbatlas.EventTriggerArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new EventTrigger(&#34;test&#34;, EventTriggerArgs.builder()        
 *             .appId(&#34;APPLICATION ID&#34;)
 *             .configSchedule(&#34;*&#34;)
 *             .disabled(false)
 *             .functionId(&#34;1&#34;)
 *             .name(&#34;NAME OF THE TRIGGER&#34;)
 *             .projectId(&#34;PROJECT ID&#34;)
 *             .type(&#34;SCHEDULED&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * Event trigger can be imported using project ID, App ID and Trigger ID, in the format `project_id`--`app_id`-`trigger_id`, e.g.
 * 
 * ```sh
 *  $ pulumi import mongodbatlas:index/eventTrigger:EventTrigger test 1112222b3bf99403840e8934--testing-example--1112222b3bf99403840e8934
 * ```
 * 
 *  For more details on this resource see [Triggers resource](https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#tag/triggers) in Atlas App Services Documentation.
 * 
 */
@ResourceType(type="mongodbatlas:index/eventTrigger:EventTrigger")
public class EventTrigger extends com.pulumi.resources.CustomResource {
    /**
     * The ObjectID of your application.
     * * For more details on `project_id` and `app_id` see: https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Project-and-Application-IDs
     * 
     */
    @Export(name="appId", type=String.class, parameters={})
    private Output<String> appId;

    /**
     * @return The ObjectID of your application.
     * * For more details on `project_id` and `app_id` see: https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Project-and-Application-IDs
     * 
     */
    public Output<String> appId() {
        return this.appId;
    }
    /**
     * Required for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
     * 
     */
    @Export(name="configCollection", type=String.class, parameters={})
    private Output<String> configCollection;

    /**
     * @return Required for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
     * 
     */
    public Output<String> configCollection() {
        return this.configCollection;
    }
    /**
     * Required for `DATABASE` type. The name of the MongoDB database that contains the watched collection.
     * 
     */
    @Export(name="configDatabase", type=String.class, parameters={})
    private Output<String> configDatabase;

    /**
     * @return Required for `DATABASE` type. The name of the MongoDB database that contains the watched collection.
     * 
     */
    public Output<String> configDatabase() {
        return this.configDatabase;
    }
    /**
     * Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
     * 
     */
    @Export(name="configFullDocument", type=Boolean.class, parameters={})
    private Output<Boolean> configFullDocument;

    /**
     * @return Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
     * 
     */
    public Output<Boolean> configFullDocument() {
        return this.configFullDocument;
    }
    @Export(name="configFullDocumentBefore", type=Boolean.class, parameters={})
    private Output<Boolean> configFullDocumentBefore;

    public Output<Boolean> configFullDocumentBefore() {
        return this.configFullDocumentBefore;
    }
    /**
     * Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
     * 
     */
    @Export(name="configMatch", type=String.class, parameters={})
    private Output<String> configMatch;

    /**
     * @return Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
     * 
     */
    public Output<String> configMatch() {
        return this.configMatch;
    }
    /**
     * Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
     * 
     */
    @Export(name="configOperationType", type=String.class, parameters={})
    private Output<String> configOperationType;

    /**
     * @return Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
     * 
     */
    public Output<String> configOperationType() {
        return this.configOperationType;
    }
    /**
     * Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
     * 
     */
    @Export(name="configOperationTypes", type=List.class, parameters={String.class})
    private Output<List<String>> configOperationTypes;

    /**
     * @return Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
     * 
     */
    public Output<List<String>> configOperationTypes() {
        return this.configOperationTypes;
    }
    /**
     * Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
     * 
     */
    @Export(name="configProject", type=String.class, parameters={})
    private Output<String> configProject;

    /**
     * @return Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
     * 
     */
    public Output<String> configProject() {
        return this.configProject;
    }
    /**
     * Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
     * 
     */
    @Export(name="configProviders", type=List.class, parameters={String.class})
    private Output<List<String>> configProviders;

    /**
     * @return Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
     * 
     */
    public Output<List<String>> configProviders() {
        return this.configProviders;
    }
    /**
     * Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
     * 
     */
    @Export(name="configSchedule", type=String.class, parameters={})
    private Output<String> configSchedule;

    /**
     * @return Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
     * 
     */
    public Output<String> configSchedule() {
        return this.configSchedule;
    }
    @Export(name="configScheduleType", type=String.class, parameters={})
    private Output<String> configScheduleType;

    public Output<String> configScheduleType() {
        return this.configScheduleType;
    }
    /**
     * Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
     * 
     */
    @Export(name="configServiceId", type=String.class, parameters={})
    private Output<String> configServiceId;

    /**
     * @return Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
     * 
     */
    public Output<String> configServiceId() {
        return this.configServiceId;
    }
    /**
     * Default: `false` If `true`, the trigger is disabled.
     * 
     */
    @Export(name="disabled", type=Boolean.class, parameters={})
    private Output<Boolean> disabled;

    /**
     * @return Default: `false` If `true`, the trigger is disabled.
     * 
     */
    public Output<Boolean> disabled() {
        return this.disabled;
    }
    /**
     * An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
     * * `event_processors.0.aws_eventbridge.config_account_id` - (Optional) AWS Account ID.
     * * `event_processors.0.aws_eventbridge.config_region` - (Optional) Region of AWS Account.
     * 
     */
    @Export(name="eventProcessors", type=EventTriggerEventProcessors.class, parameters={})
    private Output</* @Nullable */ EventTriggerEventProcessors> eventProcessors;

    /**
     * @return An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
     * * `event_processors.0.aws_eventbridge.config_account_id` - (Optional) AWS Account ID.
     * * `event_processors.0.aws_eventbridge.config_region` - (Optional) Region of AWS Account.
     * 
     */
    public Output<Optional<EventTriggerEventProcessors>> eventProcessors() {
        return Codegen.optional(this.eventProcessors);
    }
    /**
     * The ID of the function associated with the trigger.
     * 
     */
    @Export(name="functionId", type=String.class, parameters={})
    private Output</* @Nullable */ String> functionId;

    /**
     * @return The ID of the function associated with the trigger.
     * 
     */
    public Output<Optional<String>> functionId() {
        return Codegen.optional(this.functionId);
    }
    /**
     * The name of the function associated with the trigger.
     * 
     */
    @Export(name="functionName", type=String.class, parameters={})
    private Output<String> functionName;

    /**
     * @return The name of the function associated with the trigger.
     * 
     */
    public Output<String> functionName() {
        return this.functionName;
    }
    /**
     * The name of the trigger.
     * 
     */
    @Export(name="name", type=String.class, parameters={})
    private Output<String> name;

    /**
     * @return The name of the trigger.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * The unique ID for the project to create the trigger.
     * 
     */
    @Export(name="projectId", type=String.class, parameters={})
    private Output<String> projectId;

    /**
     * @return The unique ID for the project to create the trigger.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * The unique ID of the trigger.
     * 
     */
    @Export(name="triggerId", type=String.class, parameters={})
    private Output<String> triggerId;

    /**
     * @return The unique ID of the trigger.
     * 
     */
    public Output<String> triggerId() {
        return this.triggerId;
    }
    /**
     * The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
     * 
     */
    @Export(name="type", type=String.class, parameters={})
    private Output<String> type;

    /**
     * @return The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
     * 
     */
    public Output<String> type() {
        return this.type;
    }
    /**
     * Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
     * 
     */
    @Export(name="unordered", type=Boolean.class, parameters={})
    private Output<Boolean> unordered;

    /**
     * @return Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
     * 
     */
    public Output<Boolean> unordered() {
        return this.unordered;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public EventTrigger(String name) {
        this(name, EventTriggerArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public EventTrigger(String name, EventTriggerArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public EventTrigger(String name, EventTriggerArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/eventTrigger:EventTrigger", name, args == null ? EventTriggerArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private EventTrigger(String name, Output<String> id, @Nullable EventTriggerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/eventTrigger:EventTrigger", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static EventTrigger get(String name, Output<String> id, @Nullable EventTriggerState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new EventTrigger(name, id, state, options);
    }
}
