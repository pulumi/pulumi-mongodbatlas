// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkPartitionFieldArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataLakePipelineSinkArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataLakePipelineSinkArgs Empty = new DataLakePipelineSinkArgs();

    /**
     * Ordered fields used to physically organize data in the destination.
     * * `partition_fields.#.field_name` - Human-readable label that identifies the field name used to partition data.
     * * `partition_fields.#.order` - Sequence in which MongoDB Atlas slices the collection data to create partitions. The resource expresses this sequence starting with zero.
     * 
     */
    @Import(name="partitionFields")
    private @Nullable Output<List<DataLakePipelineSinkPartitionFieldArgs>> partitionFields;

    /**
     * @return Ordered fields used to physically organize data in the destination.
     * * `partition_fields.#.field_name` - Human-readable label that identifies the field name used to partition data.
     * * `partition_fields.#.order` - Sequence in which MongoDB Atlas slices the collection data to create partitions. The resource expresses this sequence starting with zero.
     * 
     */
    public Optional<Output<List<DataLakePipelineSinkPartitionFieldArgs>>> partitionFields() {
        return Optional.ofNullable(this.partitionFields);
    }

    /**
     * Target cloud provider for this Data Lake Pipeline.
     * 
     */
    @Import(name="provider")
    private @Nullable Output<String> provider;

    /**
     * @return Target cloud provider for this Data Lake Pipeline.
     * 
     */
    public Optional<Output<String>> provider() {
        return Optional.ofNullable(this.provider);
    }

    /**
     * Target cloud provider region for this Data Lake Pipeline. [Supported cloud provider regions](https://www.mongodb.com/docs/datalake/limitations).
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Target cloud provider region for this Data Lake Pipeline. [Supported cloud provider regions](https://www.mongodb.com/docs/datalake/limitations).
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Type of ingestion source of this Data Lake Pipeline.
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return Type of ingestion source of this Data Lake Pipeline.
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    private DataLakePipelineSinkArgs() {}

    private DataLakePipelineSinkArgs(DataLakePipelineSinkArgs $) {
        this.partitionFields = $.partitionFields;
        this.provider = $.provider;
        this.region = $.region;
        this.type = $.type;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataLakePipelineSinkArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataLakePipelineSinkArgs $;

        public Builder() {
            $ = new DataLakePipelineSinkArgs();
        }

        public Builder(DataLakePipelineSinkArgs defaults) {
            $ = new DataLakePipelineSinkArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param partitionFields Ordered fields used to physically organize data in the destination.
         * * `partition_fields.#.field_name` - Human-readable label that identifies the field name used to partition data.
         * * `partition_fields.#.order` - Sequence in which MongoDB Atlas slices the collection data to create partitions. The resource expresses this sequence starting with zero.
         * 
         * @return builder
         * 
         */
        public Builder partitionFields(@Nullable Output<List<DataLakePipelineSinkPartitionFieldArgs>> partitionFields) {
            $.partitionFields = partitionFields;
            return this;
        }

        /**
         * @param partitionFields Ordered fields used to physically organize data in the destination.
         * * `partition_fields.#.field_name` - Human-readable label that identifies the field name used to partition data.
         * * `partition_fields.#.order` - Sequence in which MongoDB Atlas slices the collection data to create partitions. The resource expresses this sequence starting with zero.
         * 
         * @return builder
         * 
         */
        public Builder partitionFields(List<DataLakePipelineSinkPartitionFieldArgs> partitionFields) {
            return partitionFields(Output.of(partitionFields));
        }

        /**
         * @param partitionFields Ordered fields used to physically organize data in the destination.
         * * `partition_fields.#.field_name` - Human-readable label that identifies the field name used to partition data.
         * * `partition_fields.#.order` - Sequence in which MongoDB Atlas slices the collection data to create partitions. The resource expresses this sequence starting with zero.
         * 
         * @return builder
         * 
         */
        public Builder partitionFields(DataLakePipelineSinkPartitionFieldArgs... partitionFields) {
            return partitionFields(List.of(partitionFields));
        }

        /**
         * @param provider Target cloud provider for this Data Lake Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder provider(@Nullable Output<String> provider) {
            $.provider = provider;
            return this;
        }

        /**
         * @param provider Target cloud provider for this Data Lake Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder provider(String provider) {
            return provider(Output.of(provider));
        }

        /**
         * @param region Target cloud provider region for this Data Lake Pipeline. [Supported cloud provider regions](https://www.mongodb.com/docs/datalake/limitations).
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Target cloud provider region for this Data Lake Pipeline. [Supported cloud provider regions](https://www.mongodb.com/docs/datalake/limitations).
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param type Type of ingestion source of this Data Lake Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type Type of ingestion source of this Data Lake Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        public DataLakePipelineSinkArgs build() {
            return $;
        }
    }

}
