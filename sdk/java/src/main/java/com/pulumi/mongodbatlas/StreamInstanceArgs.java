// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.inputs.StreamInstanceDataProcessRegionArgs;
import com.pulumi.mongodbatlas.inputs.StreamInstanceStreamConfigArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamInstanceArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamInstanceArgs Empty = new StreamInstanceArgs();

    /**
     * Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
     * 
     */
    @Import(name="dataProcessRegion", required=true)
    private Output<StreamInstanceDataProcessRegionArgs> dataProcessRegion;

    /**
     * @return Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
     * 
     */
    public Output<StreamInstanceDataProcessRegionArgs> dataProcessRegion() {
        return this.dataProcessRegion;
    }

    /**
     * Human-readable label that identifies the stream instance.
     * 
     */
    @Import(name="instanceName", required=true)
    private Output<String> instanceName;

    /**
     * @return Human-readable label that identifies the stream instance.
     * 
     */
    public Output<String> instanceName() {
        return this.instanceName;
    }

    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies your project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Configuration options for an Atlas Stream Processing Instance. See stream config
     * 
     */
    @Import(name="streamConfig")
    private @Nullable Output<StreamInstanceStreamConfigArgs> streamConfig;

    /**
     * @return Configuration options for an Atlas Stream Processing Instance. See stream config
     * 
     */
    public Optional<Output<StreamInstanceStreamConfigArgs>> streamConfig() {
        return Optional.ofNullable(this.streamConfig);
    }

    private StreamInstanceArgs() {}

    private StreamInstanceArgs(StreamInstanceArgs $) {
        this.dataProcessRegion = $.dataProcessRegion;
        this.instanceName = $.instanceName;
        this.projectId = $.projectId;
        this.streamConfig = $.streamConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamInstanceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamInstanceArgs $;

        public Builder() {
            $ = new StreamInstanceArgs();
        }

        public Builder(StreamInstanceArgs defaults) {
            $ = new StreamInstanceArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataProcessRegion Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
         * 
         * @return builder
         * 
         */
        public Builder dataProcessRegion(Output<StreamInstanceDataProcessRegionArgs> dataProcessRegion) {
            $.dataProcessRegion = dataProcessRegion;
            return this;
        }

        /**
         * @param dataProcessRegion Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
         * 
         * @return builder
         * 
         */
        public Builder dataProcessRegion(StreamInstanceDataProcessRegionArgs dataProcessRegion) {
            return dataProcessRegion(Output.of(dataProcessRegion));
        }

        /**
         * @param instanceName Human-readable label that identifies the stream instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName Human-readable label that identifies the stream instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param streamConfig Configuration options for an Atlas Stream Processing Instance. See stream config
         * 
         * @return builder
         * 
         */
        public Builder streamConfig(@Nullable Output<StreamInstanceStreamConfigArgs> streamConfig) {
            $.streamConfig = streamConfig;
            return this;
        }

        /**
         * @param streamConfig Configuration options for an Atlas Stream Processing Instance. See stream config
         * 
         * @return builder
         * 
         */
        public Builder streamConfig(StreamInstanceStreamConfigArgs streamConfig) {
            return streamConfig(Output.of(streamConfig));
        }

        public StreamInstanceArgs build() {
            if ($.dataProcessRegion == null) {
                throw new MissingRequiredPropertyException("StreamInstanceArgs", "dataProcessRegion");
            }
            if ($.instanceName == null) {
                throw new MissingRequiredPropertyException("StreamInstanceArgs", "instanceName");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("StreamInstanceArgs", "projectId");
            }
            return $;
        }
    }

}
