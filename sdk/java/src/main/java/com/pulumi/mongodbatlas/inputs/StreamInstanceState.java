// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.StreamInstanceDataProcessRegionArgs;
import com.pulumi.mongodbatlas.inputs.StreamInstanceStreamConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamInstanceState extends com.pulumi.resources.ResourceArgs {

    public static final StreamInstanceState Empty = new StreamInstanceState();

    /**
     * Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
     * 
     */
    @Import(name="dataProcessRegion")
    private @Nullable Output<StreamInstanceDataProcessRegionArgs> dataProcessRegion;

    /**
     * @return Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
     * 
     */
    public Optional<Output<StreamInstanceDataProcessRegionArgs>> dataProcessRegion() {
        return Optional.ofNullable(this.dataProcessRegion);
    }

    /**
     * List that contains the hostnames assigned to the stream instance.
     * 
     */
    @Import(name="hostnames")
    private @Nullable Output<List<String>> hostnames;

    /**
     * @return List that contains the hostnames assigned to the stream instance.
     * 
     */
    public Optional<Output<List<String>>> hostnames() {
        return Optional.ofNullable(this.hostnames);
    }

    /**
     * Human-readable label that identifies the stream instance.
     * 
     */
    @Import(name="instanceName")
    private @Nullable Output<String> instanceName;

    /**
     * @return Human-readable label that identifies the stream instance.
     * 
     */
    public Optional<Output<String>> instanceName() {
        return Optional.ofNullable(this.instanceName);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies your project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Configuration options for an Atlas Stream Processing Instance. See stream config
     * 
     */
    @Import(name="streamConfig")
    private @Nullable Output<StreamInstanceStreamConfigArgs> streamConfig;

    /**
     * @return Configuration options for an Atlas Stream Processing Instance. See stream config
     * 
     */
    public Optional<Output<StreamInstanceStreamConfigArgs>> streamConfig() {
        return Optional.ofNullable(this.streamConfig);
    }

    private StreamInstanceState() {}

    private StreamInstanceState(StreamInstanceState $) {
        this.dataProcessRegion = $.dataProcessRegion;
        this.hostnames = $.hostnames;
        this.instanceName = $.instanceName;
        this.projectId = $.projectId;
        this.streamConfig = $.streamConfig;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamInstanceState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamInstanceState $;

        public Builder() {
            $ = new StreamInstanceState();
        }

        public Builder(StreamInstanceState defaults) {
            $ = new StreamInstanceState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dataProcessRegion Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
         * 
         * @return builder
         * 
         */
        public Builder dataProcessRegion(@Nullable Output<StreamInstanceDataProcessRegionArgs> dataProcessRegion) {
            $.dataProcessRegion = dataProcessRegion;
            return this;
        }

        /**
         * @param dataProcessRegion Cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
         * 
         * @return builder
         * 
         */
        public Builder dataProcessRegion(StreamInstanceDataProcessRegionArgs dataProcessRegion) {
            return dataProcessRegion(Output.of(dataProcessRegion));
        }

        /**
         * @param hostnames List that contains the hostnames assigned to the stream instance.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(@Nullable Output<List<String>> hostnames) {
            $.hostnames = hostnames;
            return this;
        }

        /**
         * @param hostnames List that contains the hostnames assigned to the stream instance.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(List<String> hostnames) {
            return hostnames(Output.of(hostnames));
        }

        /**
         * @param hostnames List that contains the hostnames assigned to the stream instance.
         * 
         * @return builder
         * 
         */
        public Builder hostnames(String... hostnames) {
            return hostnames(List.of(hostnames));
        }

        /**
         * @param instanceName Human-readable label that identifies the stream instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(@Nullable Output<String> instanceName) {
            $.instanceName = instanceName;
            return this;
        }

        /**
         * @param instanceName Human-readable label that identifies the stream instance.
         * 
         * @return builder
         * 
         */
        public Builder instanceName(String instanceName) {
            return instanceName(Output.of(instanceName));
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param streamConfig Configuration options for an Atlas Stream Processing Instance. See stream config
         * 
         * @return builder
         * 
         */
        public Builder streamConfig(@Nullable Output<StreamInstanceStreamConfigArgs> streamConfig) {
            $.streamConfig = streamConfig;
            return this;
        }

        /**
         * @param streamConfig Configuration options for an Atlas Stream Processing Instance. See stream config
         * 
         * @return builder
         * 
         */
        public Builder streamConfig(StreamInstanceStreamConfigArgs streamConfig) {
            return streamConfig(Output.of(streamConfig));
        }

        public StreamInstanceState build() {
            return $;
        }
    }

}
