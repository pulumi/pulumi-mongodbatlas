// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetStreamConnectionAuthentication;
import com.pulumi.mongodbatlas.outputs.GetStreamConnectionAws;
import com.pulumi.mongodbatlas.outputs.GetStreamConnectionDbRoleToExecute;
import com.pulumi.mongodbatlas.outputs.GetStreamConnectionNetworking;
import com.pulumi.mongodbatlas.outputs.GetStreamConnectionSecurity;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetStreamConnectionResult {
    /**
     * @return User credentials required to connect to a Kafka cluster. Includes the authentication type, as well as the parameters for that authentication mode. See authentication.
     * 
     */
    private GetStreamConnectionAuthentication authentication;
    /**
     * @return The configuration for AWS Lambda connection. See AWS
     * 
     */
    private GetStreamConnectionAws aws;
    /**
     * @return Comma separated list of server addresses.
     * 
     */
    private String bootstrapServers;
    /**
     * @return Name of the cluster configured for this connection.
     * 
     */
    private String clusterName;
    /**
     * @return Unique 24-hexadecimal digit string that identifies the project that contains the configured cluster. Required if the ID does not match the project containing the streams instance. You must first enable the organization setting.
     * 
     */
    private String clusterProjectId;
    /**
     * @return A map of Kafka key-value pairs for optional configuration. This is a flat object, and keys can have &#39;.&#39; characters.
     * 
     */
    private Map<String,String> config;
    private String connectionName;
    /**
     * @return The name of a Built in or Custom DB Role to connect to an Atlas Cluster. See DBRoleToExecute.
     * 
     */
    private GetStreamConnectionDbRoleToExecute dbRoleToExecute;
    /**
     * @return A map of key-value pairs for optional headers.
     * 
     */
    private Map<String,String> headers;
    private String id;
    private String instanceName;
    /**
     * @return Networking Access Type can either be `PUBLIC` (default) or `VPC`. See networking.
     * 
     */
    private GetStreamConnectionNetworking networking;
    private String projectId;
    /**
     * @return Properties for the secure transport connection to Kafka. For SASL_SSL, this can include the trusted certificate to use. See security.
     * 
     */
    private GetStreamConnectionSecurity security;
    /**
     * @return Selected networking type. Either `PUBLIC`, `VPC` or `PRIVATE_LINK`. Defaults to `PUBLIC`.
     * 
     */
    private String type;
    /**
     * @return URL of the HTTPs endpoint that will be used for creating a connection.
     * 
     */
    private String url;

    private GetStreamConnectionResult() {}
    /**
     * @return User credentials required to connect to a Kafka cluster. Includes the authentication type, as well as the parameters for that authentication mode. See authentication.
     * 
     */
    public GetStreamConnectionAuthentication authentication() {
        return this.authentication;
    }
    /**
     * @return The configuration for AWS Lambda connection. See AWS
     * 
     */
    public GetStreamConnectionAws aws() {
        return this.aws;
    }
    /**
     * @return Comma separated list of server addresses.
     * 
     */
    public String bootstrapServers() {
        return this.bootstrapServers;
    }
    /**
     * @return Name of the cluster configured for this connection.
     * 
     */
    public String clusterName() {
        return this.clusterName;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies the project that contains the configured cluster. Required if the ID does not match the project containing the streams instance. You must first enable the organization setting.
     * 
     */
    public String clusterProjectId() {
        return this.clusterProjectId;
    }
    /**
     * @return A map of Kafka key-value pairs for optional configuration. This is a flat object, and keys can have &#39;.&#39; characters.
     * 
     */
    public Map<String,String> config() {
        return this.config;
    }
    public String connectionName() {
        return this.connectionName;
    }
    /**
     * @return The name of a Built in or Custom DB Role to connect to an Atlas Cluster. See DBRoleToExecute.
     * 
     */
    public GetStreamConnectionDbRoleToExecute dbRoleToExecute() {
        return this.dbRoleToExecute;
    }
    /**
     * @return A map of key-value pairs for optional headers.
     * 
     */
    public Map<String,String> headers() {
        return this.headers;
    }
    public String id() {
        return this.id;
    }
    public String instanceName() {
        return this.instanceName;
    }
    /**
     * @return Networking Access Type can either be `PUBLIC` (default) or `VPC`. See networking.
     * 
     */
    public GetStreamConnectionNetworking networking() {
        return this.networking;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Properties for the secure transport connection to Kafka. For SASL_SSL, this can include the trusted certificate to use. See security.
     * 
     */
    public GetStreamConnectionSecurity security() {
        return this.security;
    }
    /**
     * @return Selected networking type. Either `PUBLIC`, `VPC` or `PRIVATE_LINK`. Defaults to `PUBLIC`.
     * 
     */
    public String type() {
        return this.type;
    }
    /**
     * @return URL of the HTTPs endpoint that will be used for creating a connection.
     * 
     */
    public String url() {
        return this.url;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamConnectionResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetStreamConnectionAuthentication authentication;
        private GetStreamConnectionAws aws;
        private String bootstrapServers;
        private String clusterName;
        private String clusterProjectId;
        private Map<String,String> config;
        private String connectionName;
        private GetStreamConnectionDbRoleToExecute dbRoleToExecute;
        private Map<String,String> headers;
        private String id;
        private String instanceName;
        private GetStreamConnectionNetworking networking;
        private String projectId;
        private GetStreamConnectionSecurity security;
        private String type;
        private String url;
        public Builder() {}
        public Builder(GetStreamConnectionResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.authentication = defaults.authentication;
    	      this.aws = defaults.aws;
    	      this.bootstrapServers = defaults.bootstrapServers;
    	      this.clusterName = defaults.clusterName;
    	      this.clusterProjectId = defaults.clusterProjectId;
    	      this.config = defaults.config;
    	      this.connectionName = defaults.connectionName;
    	      this.dbRoleToExecute = defaults.dbRoleToExecute;
    	      this.headers = defaults.headers;
    	      this.id = defaults.id;
    	      this.instanceName = defaults.instanceName;
    	      this.networking = defaults.networking;
    	      this.projectId = defaults.projectId;
    	      this.security = defaults.security;
    	      this.type = defaults.type;
    	      this.url = defaults.url;
        }

        @CustomType.Setter
        public Builder authentication(GetStreamConnectionAuthentication authentication) {
            if (authentication == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "authentication");
            }
            this.authentication = authentication;
            return this;
        }
        @CustomType.Setter
        public Builder aws(GetStreamConnectionAws aws) {
            if (aws == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "aws");
            }
            this.aws = aws;
            return this;
        }
        @CustomType.Setter
        public Builder bootstrapServers(String bootstrapServers) {
            if (bootstrapServers == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "bootstrapServers");
            }
            this.bootstrapServers = bootstrapServers;
            return this;
        }
        @CustomType.Setter
        public Builder clusterName(String clusterName) {
            if (clusterName == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "clusterName");
            }
            this.clusterName = clusterName;
            return this;
        }
        @CustomType.Setter
        public Builder clusterProjectId(String clusterProjectId) {
            if (clusterProjectId == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "clusterProjectId");
            }
            this.clusterProjectId = clusterProjectId;
            return this;
        }
        @CustomType.Setter
        public Builder config(Map<String,String> config) {
            if (config == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "config");
            }
            this.config = config;
            return this;
        }
        @CustomType.Setter
        public Builder connectionName(String connectionName) {
            if (connectionName == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "connectionName");
            }
            this.connectionName = connectionName;
            return this;
        }
        @CustomType.Setter
        public Builder dbRoleToExecute(GetStreamConnectionDbRoleToExecute dbRoleToExecute) {
            if (dbRoleToExecute == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "dbRoleToExecute");
            }
            this.dbRoleToExecute = dbRoleToExecute;
            return this;
        }
        @CustomType.Setter
        public Builder headers(Map<String,String> headers) {
            if (headers == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "headers");
            }
            this.headers = headers;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(String instanceName) {
            if (instanceName == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "instanceName");
            }
            this.instanceName = instanceName;
            return this;
        }
        @CustomType.Setter
        public Builder networking(GetStreamConnectionNetworking networking) {
            if (networking == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "networking");
            }
            this.networking = networking;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder security(GetStreamConnectionSecurity security) {
            if (security == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "security");
            }
            this.security = security;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "type");
            }
            this.type = type;
            return this;
        }
        @CustomType.Setter
        public Builder url(String url) {
            if (url == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionResult", "url");
            }
            this.url = url;
            return this;
        }
        public GetStreamConnectionResult build() {
            final var _resultValue = new GetStreamConnectionResult();
            _resultValue.authentication = authentication;
            _resultValue.aws = aws;
            _resultValue.bootstrapServers = bootstrapServers;
            _resultValue.clusterName = clusterName;
            _resultValue.clusterProjectId = clusterProjectId;
            _resultValue.config = config;
            _resultValue.connectionName = connectionName;
            _resultValue.dbRoleToExecute = dbRoleToExecute;
            _resultValue.headers = headers;
            _resultValue.id = id;
            _resultValue.instanceName = instanceName;
            _resultValue.networking = networking;
            _resultValue.projectId = projectId;
            _resultValue.security = security;
            _resultValue.type = type;
            _resultValue.url = url;
            return _resultValue;
        }
    }
}
