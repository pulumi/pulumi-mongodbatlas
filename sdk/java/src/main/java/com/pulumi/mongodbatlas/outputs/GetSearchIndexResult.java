// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetSearchIndexSynonym;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetSearchIndexResult {
    /**
     * @return [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index.
     * 
     */
    private String analyzer;
    /**
     * @return [Custom analyzers](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-custom-analyzers) to use in this index (this is an array of objects).
     * 
     */
    private String analyzers;
    private String clusterName;
    /**
     * @return Name of the collection the index is on.
     * 
     */
    private String collectionName;
    /**
     * @return Name of the database the collection is in.
     * 
     */
    private String database;
    private String fields;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String indexId;
    /**
     * @return Flag indicating whether the index uses dynamic or static mappings.
     * 
     */
    private Boolean mappingsDynamic;
    /**
     * @return Object containing one or more field specifications.
     * 
     */
    private String mappingsFields;
    /**
     * @return Name of the index.
     * 
     */
    private String name;
    private String projectId;
    /**
     * @return [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when searching the index.
     * 
     */
    private String searchAnalyzer;
    /**
     * @return Current status of the index.
     * 
     */
    private String status;
    /**
     * @return String that can be &#34;true&#34; (store all fields), &#34;false&#34; (default, don&#39;t store any field), or a JSON string that contains the list of fields to store (include) or not store (exclude) on Atlas Search. To learn more, see [Stored Source Fields](https://www.mongodb.com/docs/atlas/atlas-search/stored-source-definition/).
     * 
     */
    private String storedSource;
    /**
     * @return Synonyms mapping definition to use in this index.
     * * `synonyms.#.name` - Name of the [synonym mapping definition](https://docs.atlas.mongodb.com/reference/atlas-search/synonyms/#std-label-synonyms-ref).
     * * `synonyms.#.source_collection` - Name of the source MongoDB collection for the synonyms.
     * * `synonyms.#.analyzer` - Name of the [analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use with this synonym mapping.
     * 
     */
    private List<GetSearchIndexSynonym> synonyms;
    private String type;

    private GetSearchIndexResult() {}
    /**
     * @return [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index.
     * 
     */
    public String analyzer() {
        return this.analyzer;
    }
    /**
     * @return [Custom analyzers](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/custom/#std-label-custom-analyzers) to use in this index (this is an array of objects).
     * 
     */
    public String analyzers() {
        return this.analyzers;
    }
    public String clusterName() {
        return this.clusterName;
    }
    /**
     * @return Name of the collection the index is on.
     * 
     */
    public String collectionName() {
        return this.collectionName;
    }
    /**
     * @return Name of the database the collection is in.
     * 
     */
    public String database() {
        return this.database;
    }
    public String fields() {
        return this.fields;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String indexId() {
        return this.indexId;
    }
    /**
     * @return Flag indicating whether the index uses dynamic or static mappings.
     * 
     */
    public Boolean mappingsDynamic() {
        return this.mappingsDynamic;
    }
    /**
     * @return Object containing one or more field specifications.
     * 
     */
    public String mappingsFields() {
        return this.mappingsFields;
    }
    /**
     * @return Name of the index.
     * 
     */
    public String name() {
        return this.name;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when searching the index.
     * 
     */
    public String searchAnalyzer() {
        return this.searchAnalyzer;
    }
    /**
     * @return Current status of the index.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return String that can be &#34;true&#34; (store all fields), &#34;false&#34; (default, don&#39;t store any field), or a JSON string that contains the list of fields to store (include) or not store (exclude) on Atlas Search. To learn more, see [Stored Source Fields](https://www.mongodb.com/docs/atlas/atlas-search/stored-source-definition/).
     * 
     */
    public String storedSource() {
        return this.storedSource;
    }
    /**
     * @return Synonyms mapping definition to use in this index.
     * * `synonyms.#.name` - Name of the [synonym mapping definition](https://docs.atlas.mongodb.com/reference/atlas-search/synonyms/#std-label-synonyms-ref).
     * * `synonyms.#.source_collection` - Name of the source MongoDB collection for the synonyms.
     * * `synonyms.#.analyzer` - Name of the [analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use with this synonym mapping.
     * 
     */
    public List<GetSearchIndexSynonym> synonyms() {
        return this.synonyms;
    }
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetSearchIndexResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String analyzer;
        private String analyzers;
        private String clusterName;
        private String collectionName;
        private String database;
        private String fields;
        private String id;
        private String indexId;
        private Boolean mappingsDynamic;
        private String mappingsFields;
        private String name;
        private String projectId;
        private String searchAnalyzer;
        private String status;
        private String storedSource;
        private List<GetSearchIndexSynonym> synonyms;
        private String type;
        public Builder() {}
        public Builder(GetSearchIndexResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.analyzer = defaults.analyzer;
    	      this.analyzers = defaults.analyzers;
    	      this.clusterName = defaults.clusterName;
    	      this.collectionName = defaults.collectionName;
    	      this.database = defaults.database;
    	      this.fields = defaults.fields;
    	      this.id = defaults.id;
    	      this.indexId = defaults.indexId;
    	      this.mappingsDynamic = defaults.mappingsDynamic;
    	      this.mappingsFields = defaults.mappingsFields;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.searchAnalyzer = defaults.searchAnalyzer;
    	      this.status = defaults.status;
    	      this.storedSource = defaults.storedSource;
    	      this.synonyms = defaults.synonyms;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder analyzer(String analyzer) {
            if (analyzer == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "analyzer");
            }
            this.analyzer = analyzer;
            return this;
        }
        @CustomType.Setter
        public Builder analyzers(String analyzers) {
            if (analyzers == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "analyzers");
            }
            this.analyzers = analyzers;
            return this;
        }
        @CustomType.Setter
        public Builder clusterName(String clusterName) {
            if (clusterName == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "clusterName");
            }
            this.clusterName = clusterName;
            return this;
        }
        @CustomType.Setter
        public Builder collectionName(String collectionName) {
            if (collectionName == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "collectionName");
            }
            this.collectionName = collectionName;
            return this;
        }
        @CustomType.Setter
        public Builder database(String database) {
            if (database == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "database");
            }
            this.database = database;
            return this;
        }
        @CustomType.Setter
        public Builder fields(String fields) {
            if (fields == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "fields");
            }
            this.fields = fields;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder indexId(String indexId) {
            if (indexId == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "indexId");
            }
            this.indexId = indexId;
            return this;
        }
        @CustomType.Setter
        public Builder mappingsDynamic(Boolean mappingsDynamic) {
            if (mappingsDynamic == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "mappingsDynamic");
            }
            this.mappingsDynamic = mappingsDynamic;
            return this;
        }
        @CustomType.Setter
        public Builder mappingsFields(String mappingsFields) {
            if (mappingsFields == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "mappingsFields");
            }
            this.mappingsFields = mappingsFields;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder searchAnalyzer(String searchAnalyzer) {
            if (searchAnalyzer == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "searchAnalyzer");
            }
            this.searchAnalyzer = searchAnalyzer;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storedSource(String storedSource) {
            if (storedSource == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "storedSource");
            }
            this.storedSource = storedSource;
            return this;
        }
        @CustomType.Setter
        public Builder synonyms(List<GetSearchIndexSynonym> synonyms) {
            if (synonyms == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "synonyms");
            }
            this.synonyms = synonyms;
            return this;
        }
        public Builder synonyms(GetSearchIndexSynonym... synonyms) {
            return synonyms(List.of(synonyms));
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetSearchIndexResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetSearchIndexResult build() {
            final var _resultValue = new GetSearchIndexResult();
            _resultValue.analyzer = analyzer;
            _resultValue.analyzers = analyzers;
            _resultValue.clusterName = clusterName;
            _resultValue.collectionName = collectionName;
            _resultValue.database = database;
            _resultValue.fields = fields;
            _resultValue.id = id;
            _resultValue.indexId = indexId;
            _resultValue.mappingsDynamic = mappingsDynamic;
            _resultValue.mappingsFields = mappingsFields;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.searchAnalyzer = searchAnalyzer;
            _resultValue.status = status;
            _resultValue.storedSource = storedSource;
            _resultValue.synonyms = synonyms;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
