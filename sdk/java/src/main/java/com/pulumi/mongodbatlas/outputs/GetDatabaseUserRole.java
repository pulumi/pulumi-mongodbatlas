// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetDatabaseUserRole {
    /**
     * @return Collection for which the role applies. You can specify a collection for the `read` and `readWrite` roles. If you do not specify a collection for `read` and `readWrite`, the role applies to all collections in the database (excluding some collections in the `system`. database).
     * 
     */
    private String collectionName;
    /**
     * @return Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
     * 
     */
    private String databaseName;
    private String roleName;

    private GetDatabaseUserRole() {}
    /**
     * @return Collection for which the role applies. You can specify a collection for the `read` and `readWrite` roles. If you do not specify a collection for `read` and `readWrite`, the role applies to all collections in the database (excluding some collections in the `system`. database).
     * 
     */
    public String collectionName() {
        return this.collectionName;
    }
    /**
     * @return Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
     * 
     */
    public String databaseName() {
        return this.databaseName;
    }
    public String roleName() {
        return this.roleName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetDatabaseUserRole defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String collectionName;
        private String databaseName;
        private String roleName;
        public Builder() {}
        public Builder(GetDatabaseUserRole defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.collectionName = defaults.collectionName;
    	      this.databaseName = defaults.databaseName;
    	      this.roleName = defaults.roleName;
        }

        @CustomType.Setter
        public Builder collectionName(String collectionName) {
            if (collectionName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUserRole", "collectionName");
            }
            this.collectionName = collectionName;
            return this;
        }
        @CustomType.Setter
        public Builder databaseName(String databaseName) {
            if (databaseName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUserRole", "databaseName");
            }
            this.databaseName = databaseName;
            return this;
        }
        @CustomType.Setter
        public Builder roleName(String roleName) {
            if (roleName == null) {
              throw new MissingRequiredPropertyException("GetDatabaseUserRole", "roleName");
            }
            this.roleName = roleName;
            return this;
        }
        public GetDatabaseUserRole build() {
            final var _resultValue = new GetDatabaseUserRole();
            _resultValue.collectionName = collectionName;
            _resultValue.databaseName = databaseName;
            _resultValue.roleName = roleName;
            return _resultValue;
        }
    }
}
