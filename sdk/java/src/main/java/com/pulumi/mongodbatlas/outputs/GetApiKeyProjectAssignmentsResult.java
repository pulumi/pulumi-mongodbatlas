// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetApiKeyProjectAssignmentsResult {
    /**
     * @return Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
     * 
     */
    private String apiKeyId;
    /**
     * @return Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    private String projectId;
    /**
     * @return Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
     * 
     */
    private List<String> roles;

    private GetApiKeyProjectAssignmentsResult() {}
    /**
     * @return Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
     * 
     */
    public String apiKeyId() {
        return this.apiKeyId;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
     * 
     */
    public List<String> roles() {
        return this.roles;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetApiKeyProjectAssignmentsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiKeyId;
        private String projectId;
        private List<String> roles;
        public Builder() {}
        public Builder(GetApiKeyProjectAssignmentsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiKeyId = defaults.apiKeyId;
    	      this.projectId = defaults.projectId;
    	      this.roles = defaults.roles;
        }

        @CustomType.Setter
        public Builder apiKeyId(String apiKeyId) {
            if (apiKeyId == null) {
              throw new MissingRequiredPropertyException("GetApiKeyProjectAssignmentsResult", "apiKeyId");
            }
            this.apiKeyId = apiKeyId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetApiKeyProjectAssignmentsResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder roles(List<String> roles) {
            if (roles == null) {
              throw new MissingRequiredPropertyException("GetApiKeyProjectAssignmentsResult", "roles");
            }
            this.roles = roles;
            return this;
        }
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }
        public GetApiKeyProjectAssignmentsResult build() {
            final var _resultValue = new GetApiKeyProjectAssignmentsResult();
            _resultValue.apiKeyId = apiKeyId;
            _resultValue.projectId = projectId;
            _resultValue.roles = roles;
            return _resultValue;
        }
    }
}
