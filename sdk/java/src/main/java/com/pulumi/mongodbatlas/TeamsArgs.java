// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class TeamsArgs extends com.pulumi.resources.ResourceArgs {

    public static final TeamsArgs Empty = new TeamsArgs();

    @Import(name="name", required=true)
    private Output<String> name;

    public Output<String> name() {
        return this.name;
    }

    @Import(name="orgId", required=true)
    private Output<String> orgId;

    public Output<String> orgId() {
        return this.orgId;
    }

    @Import(name="usernames", required=true)
    private Output<List<String>> usernames;

    public Output<List<String>> usernames() {
        return this.usernames;
    }

    private TeamsArgs() {}

    private TeamsArgs(TeamsArgs $) {
        this.name = $.name;
        this.orgId = $.orgId;
        this.usernames = $.usernames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(TeamsArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private TeamsArgs $;

        public Builder() {
            $ = new TeamsArgs();
        }

        public Builder(TeamsArgs defaults) {
            $ = new TeamsArgs(Objects.requireNonNull(defaults));
        }

        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        public Builder name(String name) {
            return name(Output.of(name));
        }

        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        public Builder usernames(Output<List<String>> usernames) {
            $.usernames = usernames;
            return this;
        }

        public Builder usernames(List<String> usernames) {
            return usernames(Output.of(usernames));
        }

        public Builder usernames(String... usernames) {
            return usernames(List.of(usernames));
        }

        public TeamsArgs build() {
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.orgId = Objects.requireNonNull($.orgId, "expected parameter 'orgId' to be non-null");
            $.usernames = Objects.requireNonNull($.usernames, "expected parameter 'usernames' to be non-null");
            return $;
        }
    }

}
