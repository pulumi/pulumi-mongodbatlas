// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.ProjectApiKeyProjectAssignmentArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectApiKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ProjectApiKeyArgs Empty = new ProjectApiKeyArgs();

    /**
     * Description of this Organization API key.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Description of this Organization API key.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    @Import(name="projectAssignments")
    private @Nullable Output<List<ProjectApiKeyProjectAssignmentArgs>> projectAssignments;

    public Optional<Output<List<ProjectApiKeyProjectAssignmentArgs>>> projectAssignments() {
        return Optional.ofNullable(this.projectAssignments);
    }

    /**
     * Project ID to assign to Access Key
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Project ID to assign to Access Key
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Name of the role. This resource returns all the roles the user has in Atlas.
     * The following are valid roles:
     * 
     */
    @Import(name="roleNames")
    private @Nullable Output<List<String>> roleNames;

    /**
     * @return Name of the role. This resource returns all the roles the user has in Atlas.
     * The following are valid roles:
     * 
     */
    public Optional<Output<List<String>>> roleNames() {
        return Optional.ofNullable(this.roleNames);
    }

    private ProjectApiKeyArgs() {}

    private ProjectApiKeyArgs(ProjectApiKeyArgs $) {
        this.description = $.description;
        this.projectAssignments = $.projectAssignments;
        this.projectId = $.projectId;
        this.roleNames = $.roleNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectApiKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectApiKeyArgs $;

        public Builder() {
            $ = new ProjectApiKeyArgs();
        }

        public Builder(ProjectApiKeyArgs defaults) {
            $ = new ProjectApiKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of this Organization API key.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of this Organization API key.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        public Builder projectAssignments(@Nullable Output<List<ProjectApiKeyProjectAssignmentArgs>> projectAssignments) {
            $.projectAssignments = projectAssignments;
            return this;
        }

        public Builder projectAssignments(List<ProjectApiKeyProjectAssignmentArgs> projectAssignments) {
            return projectAssignments(Output.of(projectAssignments));
        }

        public Builder projectAssignments(ProjectApiKeyProjectAssignmentArgs... projectAssignments) {
            return projectAssignments(List.of(projectAssignments));
        }

        /**
         * @param projectId Project ID to assign to Access Key
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Project ID to assign to Access Key
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param roleNames Name of the role. This resource returns all the roles the user has in Atlas.
         * The following are valid roles:
         * 
         * @return builder
         * 
         */
        public Builder roleNames(@Nullable Output<List<String>> roleNames) {
            $.roleNames = roleNames;
            return this;
        }

        /**
         * @param roleNames Name of the role. This resource returns all the roles the user has in Atlas.
         * The following are valid roles:
         * 
         * @return builder
         * 
         */
        public Builder roleNames(List<String> roleNames) {
            return roleNames(Output.of(roleNames));
        }

        /**
         * @param roleNames Name of the role. This resource returns all the roles the user has in Atlas.
         * The following are valid roles:
         * 
         * @return builder
         * 
         */
        public Builder roleNames(String... roleNames) {
            return roleNames(List.of(roleNames));
        }

        public ProjectApiKeyArgs build() {
            $.description = Objects.requireNonNull($.description, "expected parameter 'description' to be non-null");
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            return $;
        }
    }

}
