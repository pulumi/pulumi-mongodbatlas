// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsOrgConfigRoleMapping;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsOrgConfigUserConflict;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFederatedSettingsOrgConfigResult {
    /**
     * @return The collection of unique ids representing the identity providers that can be used for data access in this organization.
     * 
     */
    private List<String> dataAccessIdentityProviderIds;
    /**
     * @return List that contains the approved domains from which organization users can log in.  Note: If the organization uses an identity provider,  `domain_allow_list` includes: any SSO domains associated with organization&#39;s identity provider and any custom domains associated with the specific organization.
     * 
     */
    private List<String> domainAllowLists;
    /**
     * @return Flag that indicates whether domain restriction is enabled for the connected organization.  User Conflicts returns null when `domain_restriction_enabled` is false.
     * 
     */
    private Boolean domainRestrictionEnabled;
    /**
     * @return Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     * 
     */
    private String federationSettingsId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Legacy 20-hexadecimal digit string that identifies the SAML access identity provider that this connected org config is associated with. This id can be found in two ways:
     * 1. Within the Federation Management UI in Atlas in the Identity Providers tab by clicking the info icon in the IdP ID row of a configured SAML identity provider
     * 2. `okta_idp_id` on the `mongodbatlas.FederatedSettingsIdentityProvider` resource
     * 
     */
    private String identityProviderId;
    private String orgId;
    /**
     * @return List that contains the default [roles](https://www.mongodb.com/docs/atlas/reference/user-roles/#std-label-organization-roles) granted to users who authenticate through the IdP in a connected organization.
     * 
     */
    private List<String> postAuthRoleGrants;
    /**
     * @return Role mappings that are configured in this organization. See below
     * 
     */
    private List<GetFederatedSettingsOrgConfigRoleMapping> roleMappings;
    /**
     * @return List that contains the users who have an email address that doesn&#39;t match any domain on the allowed list. See below
     * 
     */
    private List<GetFederatedSettingsOrgConfigUserConflict> userConflicts;

    private GetFederatedSettingsOrgConfigResult() {}
    /**
     * @return The collection of unique ids representing the identity providers that can be used for data access in this organization.
     * 
     */
    public List<String> dataAccessIdentityProviderIds() {
        return this.dataAccessIdentityProviderIds;
    }
    /**
     * @return List that contains the approved domains from which organization users can log in.  Note: If the organization uses an identity provider,  `domain_allow_list` includes: any SSO domains associated with organization&#39;s identity provider and any custom domains associated with the specific organization.
     * 
     */
    public List<String> domainAllowLists() {
        return this.domainAllowLists;
    }
    /**
     * @return Flag that indicates whether domain restriction is enabled for the connected organization.  User Conflicts returns null when `domain_restriction_enabled` is false.
     * 
     */
    public Boolean domainRestrictionEnabled() {
        return this.domainRestrictionEnabled;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     * 
     */
    public String federationSettingsId() {
        return this.federationSettingsId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Legacy 20-hexadecimal digit string that identifies the SAML access identity provider that this connected org config is associated with. This id can be found in two ways:
     * 1. Within the Federation Management UI in Atlas in the Identity Providers tab by clicking the info icon in the IdP ID row of a configured SAML identity provider
     * 2. `okta_idp_id` on the `mongodbatlas.FederatedSettingsIdentityProvider` resource
     * 
     */
    public String identityProviderId() {
        return this.identityProviderId;
    }
    public String orgId() {
        return this.orgId;
    }
    /**
     * @return List that contains the default [roles](https://www.mongodb.com/docs/atlas/reference/user-roles/#std-label-organization-roles) granted to users who authenticate through the IdP in a connected organization.
     * 
     */
    public List<String> postAuthRoleGrants() {
        return this.postAuthRoleGrants;
    }
    /**
     * @return Role mappings that are configured in this organization. See below
     * 
     */
    public List<GetFederatedSettingsOrgConfigRoleMapping> roleMappings() {
        return this.roleMappings;
    }
    /**
     * @return List that contains the users who have an email address that doesn&#39;t match any domain on the allowed list. See below
     * 
     */
    public List<GetFederatedSettingsOrgConfigUserConflict> userConflicts() {
        return this.userConflicts;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFederatedSettingsOrgConfigResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private List<String> dataAccessIdentityProviderIds;
        private List<String> domainAllowLists;
        private Boolean domainRestrictionEnabled;
        private String federationSettingsId;
        private String id;
        private String identityProviderId;
        private String orgId;
        private List<String> postAuthRoleGrants;
        private List<GetFederatedSettingsOrgConfigRoleMapping> roleMappings;
        private List<GetFederatedSettingsOrgConfigUserConflict> userConflicts;
        public Builder() {}
        public Builder(GetFederatedSettingsOrgConfigResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataAccessIdentityProviderIds = defaults.dataAccessIdentityProviderIds;
    	      this.domainAllowLists = defaults.domainAllowLists;
    	      this.domainRestrictionEnabled = defaults.domainRestrictionEnabled;
    	      this.federationSettingsId = defaults.federationSettingsId;
    	      this.id = defaults.id;
    	      this.identityProviderId = defaults.identityProviderId;
    	      this.orgId = defaults.orgId;
    	      this.postAuthRoleGrants = defaults.postAuthRoleGrants;
    	      this.roleMappings = defaults.roleMappings;
    	      this.userConflicts = defaults.userConflicts;
        }

        @CustomType.Setter
        public Builder dataAccessIdentityProviderIds(List<String> dataAccessIdentityProviderIds) {
            if (dataAccessIdentityProviderIds == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgConfigResult", "dataAccessIdentityProviderIds");
            }
            this.dataAccessIdentityProviderIds = dataAccessIdentityProviderIds;
            return this;
        }
        public Builder dataAccessIdentityProviderIds(String... dataAccessIdentityProviderIds) {
            return dataAccessIdentityProviderIds(List.of(dataAccessIdentityProviderIds));
        }
        @CustomType.Setter
        public Builder domainAllowLists(List<String> domainAllowLists) {
            if (domainAllowLists == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgConfigResult", "domainAllowLists");
            }
            this.domainAllowLists = domainAllowLists;
            return this;
        }
        public Builder domainAllowLists(String... domainAllowLists) {
            return domainAllowLists(List.of(domainAllowLists));
        }
        @CustomType.Setter
        public Builder domainRestrictionEnabled(Boolean domainRestrictionEnabled) {
            if (domainRestrictionEnabled == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgConfigResult", "domainRestrictionEnabled");
            }
            this.domainRestrictionEnabled = domainRestrictionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder federationSettingsId(String federationSettingsId) {
            if (federationSettingsId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgConfigResult", "federationSettingsId");
            }
            this.federationSettingsId = federationSettingsId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgConfigResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identityProviderId(String identityProviderId) {
            if (identityProviderId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgConfigResult", "identityProviderId");
            }
            this.identityProviderId = identityProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgConfigResult", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder postAuthRoleGrants(List<String> postAuthRoleGrants) {
            if (postAuthRoleGrants == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgConfigResult", "postAuthRoleGrants");
            }
            this.postAuthRoleGrants = postAuthRoleGrants;
            return this;
        }
        public Builder postAuthRoleGrants(String... postAuthRoleGrants) {
            return postAuthRoleGrants(List.of(postAuthRoleGrants));
        }
        @CustomType.Setter
        public Builder roleMappings(List<GetFederatedSettingsOrgConfigRoleMapping> roleMappings) {
            if (roleMappings == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgConfigResult", "roleMappings");
            }
            this.roleMappings = roleMappings;
            return this;
        }
        public Builder roleMappings(GetFederatedSettingsOrgConfigRoleMapping... roleMappings) {
            return roleMappings(List.of(roleMappings));
        }
        @CustomType.Setter
        public Builder userConflicts(List<GetFederatedSettingsOrgConfigUserConflict> userConflicts) {
            if (userConflicts == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsOrgConfigResult", "userConflicts");
            }
            this.userConflicts = userConflicts;
            return this;
        }
        public Builder userConflicts(GetFederatedSettingsOrgConfigUserConflict... userConflicts) {
            return userConflicts(List.of(userConflicts));
        }
        public GetFederatedSettingsOrgConfigResult build() {
            final var _resultValue = new GetFederatedSettingsOrgConfigResult();
            _resultValue.dataAccessIdentityProviderIds = dataAccessIdentityProviderIds;
            _resultValue.domainAllowLists = domainAllowLists;
            _resultValue.domainRestrictionEnabled = domainRestrictionEnabled;
            _resultValue.federationSettingsId = federationSettingsId;
            _resultValue.id = id;
            _resultValue.identityProviderId = identityProviderId;
            _resultValue.orgId = orgId;
            _resultValue.postAuthRoleGrants = postAuthRoleGrants;
            _resultValue.roleMappings = roleMappings;
            _resultValue.userConflicts = userConflicts;
            return _resultValue;
        }
    }
}
