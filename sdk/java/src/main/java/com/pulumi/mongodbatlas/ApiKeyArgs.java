// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ApiKeyArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiKeyArgs Empty = new ApiKeyArgs();

    /**
     * Description of this Organization API key.
     * 
     */
    @Import(name="description", required=true)
    private Output<String> description;

    /**
     * @return Description of this Organization API key.
     * 
     */
    public Output<String> description() {
        return this.description;
    }

    /**
     * Unique identifier for the organization whose API keys you want to retrieve. Use the /orgs endpoint to retrieve all organizations to which the authenticated user has access.
     * 
     */
    @Import(name="orgId", required=true)
    private Output<String> orgId;

    /**
     * @return Unique identifier for the organization whose API keys you want to retrieve. Use the /orgs endpoint to retrieve all organizations to which the authenticated user has access.
     * 
     */
    public Output<String> orgId() {
        return this.orgId;
    }

    /**
     * Name of the role. This resource returns all the roles the user has in Atlas.
     * The following are valid roles:
     * * `ORG_OWNER`
     * * `ORG_GROUP_CREATOR`
     * * `ORG_BILLING_ADMIN`
     * * `ORG_READ_ONLY`
     * * `ORG_MEMBER`
     * 
     */
    @Import(name="roleNames", required=true)
    private Output<List<String>> roleNames;

    /**
     * @return Name of the role. This resource returns all the roles the user has in Atlas.
     * The following are valid roles:
     * * `ORG_OWNER`
     * * `ORG_GROUP_CREATOR`
     * * `ORG_BILLING_ADMIN`
     * * `ORG_READ_ONLY`
     * * `ORG_MEMBER`
     * 
     */
    public Output<List<String>> roleNames() {
        return this.roleNames;
    }

    private ApiKeyArgs() {}

    private ApiKeyArgs(ApiKeyArgs $) {
        this.description = $.description;
        this.orgId = $.orgId;
        this.roleNames = $.roleNames;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiKeyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiKeyArgs $;

        public Builder() {
            $ = new ApiKeyArgs();
        }

        public Builder(ApiKeyArgs defaults) {
            $ = new ApiKeyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param description Description of this Organization API key.
         * 
         * @return builder
         * 
         */
        public Builder description(Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description Description of this Organization API key.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param orgId Unique identifier for the organization whose API keys you want to retrieve. Use the /orgs endpoint to retrieve all organizations to which the authenticated user has access.
         * 
         * @return builder
         * 
         */
        public Builder orgId(Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique identifier for the organization whose API keys you want to retrieve. Use the /orgs endpoint to retrieve all organizations to which the authenticated user has access.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param roleNames Name of the role. This resource returns all the roles the user has in Atlas.
         * The following are valid roles:
         * * `ORG_OWNER`
         * * `ORG_GROUP_CREATOR`
         * * `ORG_BILLING_ADMIN`
         * * `ORG_READ_ONLY`
         * * `ORG_MEMBER`
         * 
         * @return builder
         * 
         */
        public Builder roleNames(Output<List<String>> roleNames) {
            $.roleNames = roleNames;
            return this;
        }

        /**
         * @param roleNames Name of the role. This resource returns all the roles the user has in Atlas.
         * The following are valid roles:
         * * `ORG_OWNER`
         * * `ORG_GROUP_CREATOR`
         * * `ORG_BILLING_ADMIN`
         * * `ORG_READ_ONLY`
         * * `ORG_MEMBER`
         * 
         * @return builder
         * 
         */
        public Builder roleNames(List<String> roleNames) {
            return roleNames(Output.of(roleNames));
        }

        /**
         * @param roleNames Name of the role. This resource returns all the roles the user has in Atlas.
         * The following are valid roles:
         * * `ORG_OWNER`
         * * `ORG_GROUP_CREATOR`
         * * `ORG_BILLING_ADMIN`
         * * `ORG_READ_ONLY`
         * * `ORG_MEMBER`
         * 
         * @return builder
         * 
         */
        public Builder roleNames(String... roleNames) {
            return roleNames(List.of(roleNames));
        }

        public ApiKeyArgs build() {
            if ($.description == null) {
                throw new MissingRequiredPropertyException("ApiKeyArgs", "description");
            }
            if ($.orgId == null) {
                throw new MissingRequiredPropertyException("ApiKeyArgs", "orgId");
            }
            if ($.roleNames == null) {
                throw new MissingRequiredPropertyException("ApiKeyArgs", "roleNames");
            }
            return $;
        }
    }

}
