// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetLdapConfigurationUserToDnMapping {
    /**
     * @return An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516.
     * 
     */
    private String ldapQuery;
    /**
     * @return A regular expression to match against a provided LDAP username.
     * 
     */
    private String match;
    /**
     * @return An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name.
     * 
     */
    private String substitution;

    private GetLdapConfigurationUserToDnMapping() {}
    /**
     * @return An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516.
     * 
     */
    public String ldapQuery() {
        return this.ldapQuery;
    }
    /**
     * @return A regular expression to match against a provided LDAP username.
     * 
     */
    public String match() {
        return this.match;
    }
    /**
     * @return An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name.
     * 
     */
    public String substitution() {
        return this.substitution;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLdapConfigurationUserToDnMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String ldapQuery;
        private String match;
        private String substitution;
        public Builder() {}
        public Builder(GetLdapConfigurationUserToDnMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ldapQuery = defaults.ldapQuery;
    	      this.match = defaults.match;
    	      this.substitution = defaults.substitution;
        }

        @CustomType.Setter
        public Builder ldapQuery(String ldapQuery) {
            if (ldapQuery == null) {
              throw new MissingRequiredPropertyException("GetLdapConfigurationUserToDnMapping", "ldapQuery");
            }
            this.ldapQuery = ldapQuery;
            return this;
        }
        @CustomType.Setter
        public Builder match(String match) {
            if (match == null) {
              throw new MissingRequiredPropertyException("GetLdapConfigurationUserToDnMapping", "match");
            }
            this.match = match;
            return this;
        }
        @CustomType.Setter
        public Builder substitution(String substitution) {
            if (substitution == null) {
              throw new MissingRequiredPropertyException("GetLdapConfigurationUserToDnMapping", "substitution");
            }
            this.substitution = substitution;
            return this;
        }
        public GetLdapConfigurationUserToDnMapping build() {
            final var _resultValue = new GetLdapConfigurationUserToDnMapping();
            _resultValue.ldapQuery = ldapQuery;
            _resultValue.match = match;
            _resultValue.substitution = substitution;
            return _resultValue;
        }
    }
}
