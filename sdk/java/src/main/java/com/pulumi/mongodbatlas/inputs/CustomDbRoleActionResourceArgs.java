// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class CustomDbRoleActionResourceArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomDbRoleActionResourceArgs Empty = new CustomDbRoleActionResourceArgs();

    @Import(name="cluster")
    private @Nullable Output<Boolean> cluster;

    public Optional<Output<Boolean>> cluster() {
        return Optional.ofNullable(this.cluster);
    }

    @Import(name="collectionName")
    private @Nullable Output<String> collectionName;

    public Optional<Output<String>> collectionName() {
        return Optional.ofNullable(this.collectionName);
    }

    /**
     * Database on which the inherited role is granted.
     * 
     * &gt; **NOTE** This value should be admin for all roles except read and readWrite.
     * 
     */
    @Import(name="databaseName")
    private @Nullable Output<String> databaseName;

    /**
     * @return Database on which the inherited role is granted.
     * 
     * &gt; **NOTE** This value should be admin for all roles except read and readWrite.
     * 
     */
    public Optional<Output<String>> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    private CustomDbRoleActionResourceArgs() {}

    private CustomDbRoleActionResourceArgs(CustomDbRoleActionResourceArgs $) {
        this.cluster = $.cluster;
        this.collectionName = $.collectionName;
        this.databaseName = $.databaseName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomDbRoleActionResourceArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomDbRoleActionResourceArgs $;

        public Builder() {
            $ = new CustomDbRoleActionResourceArgs();
        }

        public Builder(CustomDbRoleActionResourceArgs defaults) {
            $ = new CustomDbRoleActionResourceArgs(Objects.requireNonNull(defaults));
        }

        public Builder cluster(@Nullable Output<Boolean> cluster) {
            $.cluster = cluster;
            return this;
        }

        public Builder cluster(Boolean cluster) {
            return cluster(Output.of(cluster));
        }

        public Builder collectionName(@Nullable Output<String> collectionName) {
            $.collectionName = collectionName;
            return this;
        }

        public Builder collectionName(String collectionName) {
            return collectionName(Output.of(collectionName));
        }

        /**
         * @param databaseName Database on which the inherited role is granted.
         * 
         * &gt; **NOTE** This value should be admin for all roles except read and readWrite.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(@Nullable Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName Database on which the inherited role is granted.
         * 
         * &gt; **NOTE** This value should be admin for all roles except read and readWrite.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        public CustomDbRoleActionResourceArgs build() {
            return $;
        }
    }

}
