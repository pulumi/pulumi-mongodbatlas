// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;


public final class ApiKeyProjectAssignmentArgs extends com.pulumi.resources.ResourceArgs {

    public static final ApiKeyProjectAssignmentArgs Empty = new ApiKeyProjectAssignmentArgs();

    /**
     * Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
     * 
     */
    @Import(name="apiKeyId", required=true)
    private Output<String> apiKeyId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
     * 
     */
    public Output<String> apiKeyId() {
        return this.apiKeyId;
    }

    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
     * 
     */
    @Import(name="roles", required=true)
    private Output<List<String>> roles;

    /**
     * @return Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
     * 
     */
    public Output<List<String>> roles() {
        return this.roles;
    }

    private ApiKeyProjectAssignmentArgs() {}

    private ApiKeyProjectAssignmentArgs(ApiKeyProjectAssignmentArgs $) {
        this.apiKeyId = $.apiKeyId;
        this.projectId = $.projectId;
        this.roles = $.roles;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ApiKeyProjectAssignmentArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ApiKeyProjectAssignmentArgs $;

        public Builder() {
            $ = new ApiKeyProjectAssignmentArgs();
        }

        public Builder(ApiKeyProjectAssignmentArgs defaults) {
            $ = new ApiKeyProjectAssignmentArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param apiKeyId Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
         * 
         * @return builder
         * 
         */
        public Builder apiKeyId(Output<String> apiKeyId) {
            $.apiKeyId = apiKeyId;
            return this;
        }

        /**
         * @param apiKeyId Unique 24-hexadecimal digit string that identifies this organization API key that you want to assign to one project.
         * 
         * @return builder
         * 
         */
        public Builder apiKeyId(String apiKeyId) {
            return apiKeyId(Output.of(apiKeyId));
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param roles Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
         * 
         * @return builder
         * 
         */
        public Builder roles(Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles Human-readable label that identifies the collection of privileges that MongoDB Cloud grants a specific API key, MongoDB Cloud user, or MongoDB Cloud team. These roles include only the specific project-level roles.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        public ApiKeyProjectAssignmentArgs build() {
            if ($.apiKeyId == null) {
                throw new MissingRequiredPropertyException("ApiKeyProjectAssignmentArgs", "apiKeyId");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("ApiKeyProjectAssignmentArgs", "projectId");
            }
            if ($.roles == null) {
                throw new MissingRequiredPropertyException("ApiKeyProjectAssignmentArgs", "roles");
            }
            return $;
        }
    }

}
