// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetDatabaseUserPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetDatabaseUserPlainArgs Empty = new GetDatabaseUserPlainArgs();

    /**
     * The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is almost always the admin database, for X509 it is $external.
     * 
     */
    @Import(name="authDatabaseName")
    private @Nullable String authDatabaseName;

    /**
     * @return The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is almost always the admin database, for X509 it is $external.
     * 
     */
    public Optional<String> authDatabaseName() {
        return Optional.ofNullable(this.authDatabaseName);
    }

    /**
     * Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
     * 
     * @deprecated
     * this parameter is deprecated and will be removed in v1.12.0, please transition to auth_database_name
     * 
     */
    @Deprecated /* this parameter is deprecated and will be removed in v1.12.0, please transition to auth_database_name */
    @Import(name="databaseName")
    private @Nullable String databaseName;

    /**
     * @return Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
     * 
     * @deprecated
     * this parameter is deprecated and will be removed in v1.12.0, please transition to auth_database_name
     * 
     */
    @Deprecated /* this parameter is deprecated and will be removed in v1.12.0, please transition to auth_database_name */
    public Optional<String> databaseName() {
        return Optional.ofNullable(this.databaseName);
    }

    /**
     * The unique ID for the project to create the database user.
     * 
     */
    @Import(name="projectId", required=true)
    private String projectId;

    /**
     * @return The unique ID for the project to create the database user.
     * 
     */
    public String projectId() {
        return this.projectId;
    }

    /**
     * Username for authenticating to MongoDB.
     * 
     */
    @Import(name="username", required=true)
    private String username;

    /**
     * @return Username for authenticating to MongoDB.
     * 
     */
    public String username() {
        return this.username;
    }

    private GetDatabaseUserPlainArgs() {}

    private GetDatabaseUserPlainArgs(GetDatabaseUserPlainArgs $) {
        this.authDatabaseName = $.authDatabaseName;
        this.databaseName = $.databaseName;
        this.projectId = $.projectId;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetDatabaseUserPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetDatabaseUserPlainArgs $;

        public Builder() {
            $ = new GetDatabaseUserPlainArgs();
        }

        public Builder(GetDatabaseUserPlainArgs defaults) {
            $ = new GetDatabaseUserPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authDatabaseName The user’s authentication database. A user must provide both a username and authentication database to log into MongoDB. In Atlas deployments of MongoDB, the authentication database is almost always the admin database, for X509 it is $external.
         * 
         * @return builder
         * 
         */
        public Builder authDatabaseName(@Nullable String authDatabaseName) {
            $.authDatabaseName = authDatabaseName;
            return this;
        }

        /**
         * @param databaseName Database on which the user has the specified role. A role on the `admin` database can include privileges that apply to the other databases.
         * 
         * @return builder
         * 
         * @deprecated
         * this parameter is deprecated and will be removed in v1.12.0, please transition to auth_database_name
         * 
         */
        @Deprecated /* this parameter is deprecated and will be removed in v1.12.0, please transition to auth_database_name */
        public Builder databaseName(@Nullable String databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param projectId The unique ID for the project to create the database user.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param username Username for authenticating to MongoDB.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            $.username = username;
            return this;
        }

        public GetDatabaseUserPlainArgs build() {
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.username = Objects.requireNonNull($.username, "expected parameter 'username' to be non-null");
            return $;
        }
    }

}
