// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetStreamPrivatelinkEndpointsResult {
    /**
     * @return Amazon Resource Name (ARN). Required for AWS Provider and MSK vendor.
     * 
     */
    private String arn;
    /**
     * @return The domain hostname. Required for the following provider and vendor combinations:
     * 
     *     * AWS provider with CONFLUENT vendor.
     *     
     *     * AZURE provider with EVENTHUB or CONFLUENT vendor.
     * 
     */
    private String dnsDomain;
    /**
     * @return Sub-Domain name of Confluent cluster. These are typically your availability zones. Required for AWS Provider and CONFLUENT vendor. If your AWS CONFLUENT cluster doesn&#39;t use subdomains, you must set this to the empty array [].
     * 
     */
    private List<String> dnsSubDomains;
    /**
     * @return Error message if the connection is in a failed state.
     * 
     */
    private String errorMessage;
    /**
     * @return The ID of the Private Link connection.
     * 
     */
    private String id;
    /**
     * @return Interface endpoint ID that is created from the specified service endpoint ID.
     * 
     */
    private String interfaceEndpointId;
    /**
     * @return Name of interface endpoint that is created from the specified service endpoint ID.
     * 
     */
    private String interfaceEndpointName;
    /**
     * @return Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.&lt;br&gt;**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group or project id remains the same. The resource and corresponding endpoints use the term groups.
     * 
     */
    private String projectId;
    /**
     * @return Account ID from the cloud provider.
     * 
     */
    private String providerAccountId;
    /**
     * @return Provider where the endpoint is deployed. Valid values are AWS and AZURE.
     * 
     */
    private String providerName;
    /**
     * @return The region of the Provider’s cluster. See [AZURE](https://www.mongodb.com/docs/atlas/reference/microsoft-azure/#stream-processing-instances) and [AWS](https://www.mongodb.com/docs/atlas/reference/amazon-aws/#stream-processing-instances) supported regions. When the vendor is `CONFLUENT`, this is the domain name of Confluent cluster. When the vendor is `MSK`, this is computed by the API from the provided `arn`.
     * 
     */
    private String region;
    /**
     * @return For AZURE EVENTHUB, this is the [namespace endpoint ID](https://learn.microsoft.com/en-us/rest/api/eventhub/namespaces/get). For AWS CONFLUENT cluster, this is the [VPC Endpoint service name](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html).
     * 
     */
    private String serviceEndpointId;
    /**
     * @return Status of the connection.
     * 
     */
    private String state;
    /**
     * @return Vendor that manages the endpoint. The following are the vendor values per provider:
     * 
     *     * **AWS**: MSK, CONFLUENT, and S3
     *     
     *     * **Azure**: EVENTHUB and CONFLUENT
     * 
     */
    private String vendor;

    private GetStreamPrivatelinkEndpointsResult() {}
    /**
     * @return Amazon Resource Name (ARN). Required for AWS Provider and MSK vendor.
     * 
     */
    public String arn() {
        return this.arn;
    }
    /**
     * @return The domain hostname. Required for the following provider and vendor combinations:
     * 
     *     * AWS provider with CONFLUENT vendor.
     *     
     *     * AZURE provider with EVENTHUB or CONFLUENT vendor.
     * 
     */
    public String dnsDomain() {
        return this.dnsDomain;
    }
    /**
     * @return Sub-Domain name of Confluent cluster. These are typically your availability zones. Required for AWS Provider and CONFLUENT vendor. If your AWS CONFLUENT cluster doesn&#39;t use subdomains, you must set this to the empty array [].
     * 
     */
    public List<String> dnsSubDomains() {
        return this.dnsSubDomains;
    }
    /**
     * @return Error message if the connection is in a failed state.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return The ID of the Private Link connection.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Interface endpoint ID that is created from the specified service endpoint ID.
     * 
     */
    public String interfaceEndpointId() {
        return this.interfaceEndpointId;
    }
    /**
     * @return Name of interface endpoint that is created from the specified service endpoint ID.
     * 
     */
    public String interfaceEndpointName() {
        return this.interfaceEndpointName;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.&lt;br&gt;**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group or project id remains the same. The resource and corresponding endpoints use the term groups.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Account ID from the cloud provider.
     * 
     */
    public String providerAccountId() {
        return this.providerAccountId;
    }
    /**
     * @return Provider where the endpoint is deployed. Valid values are AWS and AZURE.
     * 
     */
    public String providerName() {
        return this.providerName;
    }
    /**
     * @return The region of the Provider’s cluster. See [AZURE](https://www.mongodb.com/docs/atlas/reference/microsoft-azure/#stream-processing-instances) and [AWS](https://www.mongodb.com/docs/atlas/reference/amazon-aws/#stream-processing-instances) supported regions. When the vendor is `CONFLUENT`, this is the domain name of Confluent cluster. When the vendor is `MSK`, this is computed by the API from the provided `arn`.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return For AZURE EVENTHUB, this is the [namespace endpoint ID](https://learn.microsoft.com/en-us/rest/api/eventhub/namespaces/get). For AWS CONFLUENT cluster, this is the [VPC Endpoint service name](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html).
     * 
     */
    public String serviceEndpointId() {
        return this.serviceEndpointId;
    }
    /**
     * @return Status of the connection.
     * 
     */
    public String state() {
        return this.state;
    }
    /**
     * @return Vendor that manages the endpoint. The following are the vendor values per provider:
     * 
     *     * **AWS**: MSK, CONFLUENT, and S3
     *     
     *     * **Azure**: EVENTHUB and CONFLUENT
     * 
     */
    public String vendor() {
        return this.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamPrivatelinkEndpointsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String arn;
        private String dnsDomain;
        private List<String> dnsSubDomains;
        private String errorMessage;
        private String id;
        private String interfaceEndpointId;
        private String interfaceEndpointName;
        private String projectId;
        private String providerAccountId;
        private String providerName;
        private String region;
        private String serviceEndpointId;
        private String state;
        private String vendor;
        public Builder() {}
        public Builder(GetStreamPrivatelinkEndpointsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.arn = defaults.arn;
    	      this.dnsDomain = defaults.dnsDomain;
    	      this.dnsSubDomains = defaults.dnsSubDomains;
    	      this.errorMessage = defaults.errorMessage;
    	      this.id = defaults.id;
    	      this.interfaceEndpointId = defaults.interfaceEndpointId;
    	      this.interfaceEndpointName = defaults.interfaceEndpointName;
    	      this.projectId = defaults.projectId;
    	      this.providerAccountId = defaults.providerAccountId;
    	      this.providerName = defaults.providerName;
    	      this.region = defaults.region;
    	      this.serviceEndpointId = defaults.serviceEndpointId;
    	      this.state = defaults.state;
    	      this.vendor = defaults.vendor;
        }

        @CustomType.Setter
        public Builder arn(String arn) {
            if (arn == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "arn");
            }
            this.arn = arn;
            return this;
        }
        @CustomType.Setter
        public Builder dnsDomain(String dnsDomain) {
            if (dnsDomain == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "dnsDomain");
            }
            this.dnsDomain = dnsDomain;
            return this;
        }
        @CustomType.Setter
        public Builder dnsSubDomains(List<String> dnsSubDomains) {
            if (dnsSubDomains == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "dnsSubDomains");
            }
            this.dnsSubDomains = dnsSubDomains;
            return this;
        }
        public Builder dnsSubDomains(String... dnsSubDomains) {
            return dnsSubDomains(List.of(dnsSubDomains));
        }
        @CustomType.Setter
        public Builder errorMessage(String errorMessage) {
            if (errorMessage == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "errorMessage");
            }
            this.errorMessage = errorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceEndpointId(String interfaceEndpointId) {
            if (interfaceEndpointId == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "interfaceEndpointId");
            }
            this.interfaceEndpointId = interfaceEndpointId;
            return this;
        }
        @CustomType.Setter
        public Builder interfaceEndpointName(String interfaceEndpointName) {
            if (interfaceEndpointName == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "interfaceEndpointName");
            }
            this.interfaceEndpointName = interfaceEndpointName;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder providerAccountId(String providerAccountId) {
            if (providerAccountId == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "providerAccountId");
            }
            this.providerAccountId = providerAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder providerName(String providerName) {
            if (providerName == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "providerName");
            }
            this.providerName = providerName;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder serviceEndpointId(String serviceEndpointId) {
            if (serviceEndpointId == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "serviceEndpointId");
            }
            this.serviceEndpointId = serviceEndpointId;
            return this;
        }
        @CustomType.Setter
        public Builder state(String state) {
            if (state == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "state");
            }
            this.state = state;
            return this;
        }
        @CustomType.Setter
        public Builder vendor(String vendor) {
            if (vendor == null) {
              throw new MissingRequiredPropertyException("GetStreamPrivatelinkEndpointsResult", "vendor");
            }
            this.vendor = vendor;
            return this;
        }
        public GetStreamPrivatelinkEndpointsResult build() {
            final var _resultValue = new GetStreamPrivatelinkEndpointsResult();
            _resultValue.arn = arn;
            _resultValue.dnsDomain = dnsDomain;
            _resultValue.dnsSubDomains = dnsSubDomains;
            _resultValue.errorMessage = errorMessage;
            _resultValue.id = id;
            _resultValue.interfaceEndpointId = interfaceEndpointId;
            _resultValue.interfaceEndpointName = interfaceEndpointName;
            _resultValue.projectId = projectId;
            _resultValue.providerAccountId = providerAccountId;
            _resultValue.providerName = providerName;
            _resultValue.region = region;
            _resultValue.serviceEndpointId = serviceEndpointId;
            _resultValue.state = state;
            _resultValue.vendor = vendor;
            return _resultValue;
        }
    }
}
