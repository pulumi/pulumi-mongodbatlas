// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.EventTriggerEventProcessorsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class EventTriggerState extends com.pulumi.resources.ResourceArgs {

    public static final EventTriggerState Empty = new EventTriggerState();

    /**
     * The ObjectID of your application.
     * * For more details on `project_id` and `app_id` see: https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Project-and-Application-IDs
     * 
     */
    @Import(name="appId")
    private @Nullable Output<String> appId;

    /**
     * @return The ObjectID of your application.
     * * For more details on `project_id` and `app_id` see: https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Project-and-Application-IDs
     * 
     */
    public Optional<Output<String>> appId() {
        return Optional.ofNullable(this.appId);
    }

    /**
     * Required for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
     * 
     */
    @Import(name="configCollection")
    private @Nullable Output<String> configCollection;

    /**
     * @return Required for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
     * 
     */
    public Optional<Output<String>> configCollection() {
        return Optional.ofNullable(this.configCollection);
    }

    /**
     * Required for `DATABASE` type. The name of the MongoDB database that contains the watched collection.
     * 
     */
    @Import(name="configDatabase")
    private @Nullable Output<String> configDatabase;

    /**
     * @return Required for `DATABASE` type. The name of the MongoDB database that contains the watched collection.
     * 
     */
    public Optional<Output<String>> configDatabase() {
        return Optional.ofNullable(this.configDatabase);
    }

    /**
     * Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
     * 
     */
    @Import(name="configFullDocument")
    private @Nullable Output<Boolean> configFullDocument;

    /**
     * @return Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
     * 
     */
    public Optional<Output<Boolean>> configFullDocument() {
        return Optional.ofNullable(this.configFullDocument);
    }

    @Import(name="configFullDocumentBefore")
    private @Nullable Output<Boolean> configFullDocumentBefore;

    public Optional<Output<Boolean>> configFullDocumentBefore() {
        return Optional.ofNullable(this.configFullDocumentBefore);
    }

    /**
     * Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
     * 
     */
    @Import(name="configMatch")
    private @Nullable Output<String> configMatch;

    /**
     * @return Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
     * 
     */
    public Optional<Output<String>> configMatch() {
        return Optional.ofNullable(this.configMatch);
    }

    /**
     * Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
     * 
     */
    @Import(name="configOperationType")
    private @Nullable Output<String> configOperationType;

    /**
     * @return Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
     * 
     */
    public Optional<Output<String>> configOperationType() {
        return Optional.ofNullable(this.configOperationType);
    }

    /**
     * Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
     * 
     */
    @Import(name="configOperationTypes")
    private @Nullable Output<List<String>> configOperationTypes;

    /**
     * @return Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
     * 
     */
    public Optional<Output<List<String>>> configOperationTypes() {
        return Optional.ofNullable(this.configOperationTypes);
    }

    /**
     * Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
     * 
     */
    @Import(name="configProject")
    private @Nullable Output<String> configProject;

    /**
     * @return Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
     * 
     */
    public Optional<Output<String>> configProject() {
        return Optional.ofNullable(this.configProject);
    }

    /**
     * Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
     * 
     */
    @Import(name="configProviders")
    private @Nullable Output<List<String>> configProviders;

    /**
     * @return Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
     * 
     */
    public Optional<Output<List<String>>> configProviders() {
        return Optional.ofNullable(this.configProviders);
    }

    /**
     * Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
     * 
     */
    @Import(name="configSchedule")
    private @Nullable Output<String> configSchedule;

    /**
     * @return Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
     * 
     */
    public Optional<Output<String>> configSchedule() {
        return Optional.ofNullable(this.configSchedule);
    }

    @Import(name="configScheduleType")
    private @Nullable Output<String> configScheduleType;

    public Optional<Output<String>> configScheduleType() {
        return Optional.ofNullable(this.configScheduleType);
    }

    /**
     * Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
     * 
     */
    @Import(name="configServiceId")
    private @Nullable Output<String> configServiceId;

    /**
     * @return Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
     * 
     */
    public Optional<Output<String>> configServiceId() {
        return Optional.ofNullable(this.configServiceId);
    }

    /**
     * Default: `false` If `true`, the trigger is disabled.
     * 
     */
    @Import(name="disabled")
    private @Nullable Output<Boolean> disabled;

    /**
     * @return Default: `false` If `true`, the trigger is disabled.
     * 
     */
    public Optional<Output<Boolean>> disabled() {
        return Optional.ofNullable(this.disabled);
    }

    /**
     * An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
     * 
     */
    @Import(name="eventProcessors")
    private @Nullable Output<EventTriggerEventProcessorsArgs> eventProcessors;

    /**
     * @return An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
     * 
     */
    public Optional<Output<EventTriggerEventProcessorsArgs>> eventProcessors() {
        return Optional.ofNullable(this.eventProcessors);
    }

    /**
     * The ID of the function associated with the trigger.
     * 
     */
    @Import(name="functionId")
    private @Nullable Output<String> functionId;

    /**
     * @return The ID of the function associated with the trigger.
     * 
     */
    public Optional<Output<String>> functionId() {
        return Optional.ofNullable(this.functionId);
    }

    /**
     * The name of the function associated with the trigger.
     * 
     */
    @Import(name="functionName")
    private @Nullable Output<String> functionName;

    /**
     * @return The name of the function associated with the trigger.
     * 
     */
    public Optional<Output<String>> functionName() {
        return Optional.ofNullable(this.functionName);
    }

    /**
     * The name of the trigger.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return The name of the trigger.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The unique ID for the project to create the trigger.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The unique ID for the project to create the trigger.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The unique ID of the trigger.
     * 
     */
    @Import(name="triggerId")
    private @Nullable Output<String> triggerId;

    /**
     * @return The unique ID of the trigger.
     * 
     */
    public Optional<Output<String>> triggerId() {
        return Optional.ofNullable(this.triggerId);
    }

    /**
     * The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
     * 
     */
    @Import(name="type")
    private @Nullable Output<String> type;

    /**
     * @return The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
     * 
     */
    public Optional<Output<String>> type() {
        return Optional.ofNullable(this.type);
    }

    /**
     * Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
     * 
     */
    @Import(name="unordered")
    private @Nullable Output<Boolean> unordered;

    /**
     * @return Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
     * 
     */
    public Optional<Output<Boolean>> unordered() {
        return Optional.ofNullable(this.unordered);
    }

    private EventTriggerState() {}

    private EventTriggerState(EventTriggerState $) {
        this.appId = $.appId;
        this.configCollection = $.configCollection;
        this.configDatabase = $.configDatabase;
        this.configFullDocument = $.configFullDocument;
        this.configFullDocumentBefore = $.configFullDocumentBefore;
        this.configMatch = $.configMatch;
        this.configOperationType = $.configOperationType;
        this.configOperationTypes = $.configOperationTypes;
        this.configProject = $.configProject;
        this.configProviders = $.configProviders;
        this.configSchedule = $.configSchedule;
        this.configScheduleType = $.configScheduleType;
        this.configServiceId = $.configServiceId;
        this.disabled = $.disabled;
        this.eventProcessors = $.eventProcessors;
        this.functionId = $.functionId;
        this.functionName = $.functionName;
        this.name = $.name;
        this.projectId = $.projectId;
        this.triggerId = $.triggerId;
        this.type = $.type;
        this.unordered = $.unordered;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(EventTriggerState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private EventTriggerState $;

        public Builder() {
            $ = new EventTriggerState();
        }

        public Builder(EventTriggerState defaults) {
            $ = new EventTriggerState(Objects.requireNonNull(defaults));
        }

        /**
         * @param appId The ObjectID of your application.
         * * For more details on `project_id` and `app_id` see: https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Project-and-Application-IDs
         * 
         * @return builder
         * 
         */
        public Builder appId(@Nullable Output<String> appId) {
            $.appId = appId;
            return this;
        }

        /**
         * @param appId The ObjectID of your application.
         * * For more details on `project_id` and `app_id` see: https://www.mongodb.com/docs/atlas/app-services/admin/api/v3/#section/Project-and-Application-IDs
         * 
         * @return builder
         * 
         */
        public Builder appId(String appId) {
            return appId(Output.of(appId));
        }

        /**
         * @param configCollection Required for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
         * 
         * @return builder
         * 
         */
        public Builder configCollection(@Nullable Output<String> configCollection) {
            $.configCollection = configCollection;
            return this;
        }

        /**
         * @param configCollection Required for `DATABASE` type. The name of the MongoDB collection that the trigger watches for change events. The collection must be part of the specified database.
         * 
         * @return builder
         * 
         */
        public Builder configCollection(String configCollection) {
            return configCollection(Output.of(configCollection));
        }

        /**
         * @param configDatabase Required for `DATABASE` type. The name of the MongoDB database that contains the watched collection.
         * 
         * @return builder
         * 
         */
        public Builder configDatabase(@Nullable Output<String> configDatabase) {
            $.configDatabase = configDatabase;
            return this;
        }

        /**
         * @param configDatabase Required for `DATABASE` type. The name of the MongoDB database that contains the watched collection.
         * 
         * @return builder
         * 
         */
        public Builder configDatabase(String configDatabase) {
            return configDatabase(Output.of(configDatabase));
        }

        /**
         * @param configFullDocument Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
         * 
         * @return builder
         * 
         */
        public Builder configFullDocument(@Nullable Output<Boolean> configFullDocument) {
            $.configFullDocument = configFullDocument;
            return this;
        }

        /**
         * @param configFullDocument Optional for `DATABASE` type. If true, indicates that `UPDATE` change events should include the most current [majority-committed](https://docs.mongodb.com/manual/reference/read-concern-majority/) version of the modified document in the fullDocument field.
         * 
         * @return builder
         * 
         */
        public Builder configFullDocument(Boolean configFullDocument) {
            return configFullDocument(Output.of(configFullDocument));
        }

        public Builder configFullDocumentBefore(@Nullable Output<Boolean> configFullDocumentBefore) {
            $.configFullDocumentBefore = configFullDocumentBefore;
            return this;
        }

        public Builder configFullDocumentBefore(Boolean configFullDocumentBefore) {
            return configFullDocumentBefore(Output.of(configFullDocumentBefore));
        }

        /**
         * @param configMatch Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
         * 
         * @return builder
         * 
         */
        public Builder configMatch(@Nullable Output<String> configMatch) {
            $.configMatch = configMatch;
            return this;
        }

        /**
         * @param configMatch Optional for `DATABASE` type. A [$match](https://docs.mongodb.com/manual/reference/operator/aggregation/match/) expression document that MongoDB Realm includes in the underlying change stream pipeline for the trigger. This is useful when you want to filter change events beyond their operation type. The trigger will only fire if the expression evaluates to true for a given change event.
         * 
         * @return builder
         * 
         */
        public Builder configMatch(String configMatch) {
            return configMatch(Output.of(configMatch));
        }

        /**
         * @param configOperationType Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
         * 
         * @return builder
         * 
         */
        public Builder configOperationType(@Nullable Output<String> configOperationType) {
            $.configOperationType = configOperationType;
            return this;
        }

        /**
         * @param configOperationType Required for `AUTHENTICATION` type. The [authentication operation type](https://docs.mongodb.com/realm/triggers/authentication-triggers/#std-label-authentication-event-operation-types) to listen for. Possible Values: `LOGIN`, `CREATE`, `DELETE`
         * 
         * @return builder
         * 
         */
        public Builder configOperationType(String configOperationType) {
            return configOperationType(Output.of(configOperationType));
        }

        /**
         * @param configOperationTypes Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
         * 
         * @return builder
         * 
         */
        public Builder configOperationTypes(@Nullable Output<List<String>> configOperationTypes) {
            $.configOperationTypes = configOperationTypes;
            return this;
        }

        /**
         * @param configOperationTypes Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
         * 
         * @return builder
         * 
         */
        public Builder configOperationTypes(List<String> configOperationTypes) {
            return configOperationTypes(Output.of(configOperationTypes));
        }

        /**
         * @param configOperationTypes Required for `DATABASE` type. The [database event operation types](https://docs.mongodb.com/realm/triggers/database-triggers/#std-label-database-events) to listen for. This must contain at least one value. Possible Values: `INSERT`, `UPDATE`, `REPLACE`, `DELETE`
         * 
         * @return builder
         * 
         */
        public Builder configOperationTypes(String... configOperationTypes) {
            return configOperationTypes(List.of(configOperationTypes));
        }

        /**
         * @param configProject Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
         * 
         * @return builder
         * 
         */
        public Builder configProject(@Nullable Output<String> configProject) {
            $.configProject = configProject;
            return this;
        }

        /**
         * @param configProject Optional for `DATABASE` type. A [$project](https://docs.mongodb.com/manual/reference/operator/aggregation/project/) expression document that Realm uses to filter the fields that appear in change event objects.
         * 
         * @return builder
         * 
         */
        public Builder configProject(String configProject) {
            return configProject(Output.of(configProject));
        }

        /**
         * @param configProviders Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
         * 
         * @return builder
         * 
         */
        public Builder configProviders(@Nullable Output<List<String>> configProviders) {
            $.configProviders = configProviders;
            return this;
        }

        /**
         * @param configProviders Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
         * 
         * @return builder
         * 
         */
        public Builder configProviders(List<String> configProviders) {
            return configProviders(Output.of(configProviders));
        }

        /**
         * @param configProviders Required for `AUTHENTICATION` type. A list of one or more [authentication provider](https://docs.mongodb.com/realm/authentication/providers/) id values. The trigger will only listen for authentication events produced by these providers.
         * 
         * @return builder
         * 
         */
        public Builder configProviders(String... configProviders) {
            return configProviders(List.of(configProviders));
        }

        /**
         * @param configSchedule Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
         * 
         * @return builder
         * 
         */
        public Builder configSchedule(@Nullable Output<String> configSchedule) {
            $.configSchedule = configSchedule;
            return this;
        }

        /**
         * @param configSchedule Required for `SCHEDULED` type. A [cron expression](https://docs.mongodb.com/realm/triggers/cron-expressions/) that defines the trigger schedule.
         * 
         * @return builder
         * 
         */
        public Builder configSchedule(String configSchedule) {
            return configSchedule(Output.of(configSchedule));
        }

        public Builder configScheduleType(@Nullable Output<String> configScheduleType) {
            $.configScheduleType = configScheduleType;
            return this;
        }

        public Builder configScheduleType(String configScheduleType) {
            return configScheduleType(Output.of(configScheduleType));
        }

        /**
         * @param configServiceId Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
         * 
         * @return builder
         * 
         */
        public Builder configServiceId(@Nullable Output<String> configServiceId) {
            $.configServiceId = configServiceId;
            return this;
        }

        /**
         * @param configServiceId Required for `DATABASE` type. The ID of the MongoDB Service associated with the trigger.
         * 
         * @return builder
         * 
         */
        public Builder configServiceId(String configServiceId) {
            return configServiceId(Output.of(configServiceId));
        }

        /**
         * @param disabled Default: `false` If `true`, the trigger is disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(@Nullable Output<Boolean> disabled) {
            $.disabled = disabled;
            return this;
        }

        /**
         * @param disabled Default: `false` If `true`, the trigger is disabled.
         * 
         * @return builder
         * 
         */
        public Builder disabled(Boolean disabled) {
            return disabled(Output.of(disabled));
        }

        /**
         * @param eventProcessors An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
         * 
         * @return builder
         * 
         */
        public Builder eventProcessors(@Nullable Output<EventTriggerEventProcessorsArgs> eventProcessors) {
            $.eventProcessors = eventProcessors;
            return this;
        }

        /**
         * @param eventProcessors An object where each field name is an event processor ID and each value is an object that configures its corresponding event processor. The following event processors are supported: `AWS_EVENTBRIDGE` For an example configuration object, see [Send Trigger Events to AWS EventBridge](https://docs.mongodb.com/realm/triggers/eventbridge/#std-label-event_processor_example).
         * 
         * @return builder
         * 
         */
        public Builder eventProcessors(EventTriggerEventProcessorsArgs eventProcessors) {
            return eventProcessors(Output.of(eventProcessors));
        }

        /**
         * @param functionId The ID of the function associated with the trigger.
         * 
         * @return builder
         * 
         */
        public Builder functionId(@Nullable Output<String> functionId) {
            $.functionId = functionId;
            return this;
        }

        /**
         * @param functionId The ID of the function associated with the trigger.
         * 
         * @return builder
         * 
         */
        public Builder functionId(String functionId) {
            return functionId(Output.of(functionId));
        }

        /**
         * @param functionName The name of the function associated with the trigger.
         * 
         * @return builder
         * 
         */
        public Builder functionName(@Nullable Output<String> functionName) {
            $.functionName = functionName;
            return this;
        }

        /**
         * @param functionName The name of the function associated with the trigger.
         * 
         * @return builder
         * 
         */
        public Builder functionName(String functionName) {
            return functionName(Output.of(functionName));
        }

        /**
         * @param name The name of the trigger.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the trigger.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The unique ID for the project to create the trigger.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The unique ID for the project to create the trigger.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param triggerId The unique ID of the trigger.
         * 
         * @return builder
         * 
         */
        public Builder triggerId(@Nullable Output<String> triggerId) {
            $.triggerId = triggerId;
            return this;
        }

        /**
         * @param triggerId The unique ID of the trigger.
         * 
         * @return builder
         * 
         */
        public Builder triggerId(String triggerId) {
            return triggerId(Output.of(triggerId));
        }

        /**
         * @param type The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
         * 
         * @return builder
         * 
         */
        public Builder type(@Nullable Output<String> type) {
            $.type = type;
            return this;
        }

        /**
         * @param type The type of the trigger. Possible Values: `DATABASE`, `AUTHENTICATION`,`SCHEDULED`
         * 
         * @return builder
         * 
         */
        public Builder type(String type) {
            return type(Output.of(type));
        }

        /**
         * @param unordered Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
         * 
         * @return builder
         * 
         */
        public Builder unordered(@Nullable Output<Boolean> unordered) {
            $.unordered = unordered;
            return this;
        }

        /**
         * @param unordered Only Available for Database Triggers. If true, event ordering is disabled and this trigger can process events in parallel. If false, event ordering is enabled and the trigger executes serially.
         * 
         * @return builder
         * 
         */
        public Builder unordered(Boolean unordered) {
            return unordered(Output.of(unordered));
        }

        public EventTriggerState build() {
            return $;
        }
    }

}
