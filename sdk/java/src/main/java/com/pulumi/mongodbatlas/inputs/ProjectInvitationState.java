// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class ProjectInvitationState extends com.pulumi.resources.ResourceArgs {

    public static final ProjectInvitationState Empty = new ProjectInvitationState();

    /**
     * Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
     * 
     */
    @Import(name="expiresAt")
    private @Nullable Output<String> expiresAt;

    /**
     * @return Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
     * 
     */
    public Optional<Output<String>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies the invitation in Atlas.
     * 
     */
    @Import(name="invitationId")
    private @Nullable Output<String> invitationId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies the invitation in Atlas.
     * 
     */
    public Optional<Output<String>> invitationId() {
        return Optional.ofNullable(this.invitationId);
    }

    /**
     * Atlas user who invited `username` to the project.
     * 
     */
    @Import(name="inviterUsername")
    private @Nullable Output<String> inviterUsername;

    /**
     * @return Atlas user who invited `username` to the project.
     * 
     */
    public Optional<Output<String>> inviterUsername() {
        return Optional.ofNullable(this.inviterUsername);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies the project to which you want to invite a user.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies the project to which you want to invite a user.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * List of Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. Refer to the [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) for information on valid roles.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<String>> roles;

    /**
     * @return List of Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. Refer to the [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) for information on valid roles.
     * 
     */
    public Optional<Output<List<String>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * Email address to which Atlas sent the invitation. The user uses this email address as their Atlas username if they accept this invitation.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Email address to which Atlas sent the invitation. The user uses this email address as their Atlas username if they accept this invitation.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private ProjectInvitationState() {}

    private ProjectInvitationState(ProjectInvitationState $) {
        this.createdAt = $.createdAt;
        this.expiresAt = $.expiresAt;
        this.invitationId = $.invitationId;
        this.inviterUsername = $.inviterUsername;
        this.projectId = $.projectId;
        this.roles = $.roles;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(ProjectInvitationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private ProjectInvitationState $;

        public Builder() {
            $ = new ProjectInvitationState();
        }

        public Builder(ProjectInvitationState defaults) {
            $ = new ProjectInvitationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param expiresAt Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(@Nullable Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        /**
         * @param expiresAt Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        /**
         * @param invitationId Unique 24-hexadecimal digit string that identifies the invitation in Atlas.
         * 
         * @return builder
         * 
         */
        public Builder invitationId(@Nullable Output<String> invitationId) {
            $.invitationId = invitationId;
            return this;
        }

        /**
         * @param invitationId Unique 24-hexadecimal digit string that identifies the invitation in Atlas.
         * 
         * @return builder
         * 
         */
        public Builder invitationId(String invitationId) {
            return invitationId(Output.of(invitationId));
        }

        /**
         * @param inviterUsername Atlas user who invited `username` to the project.
         * 
         * @return builder
         * 
         */
        public Builder inviterUsername(@Nullable Output<String> inviterUsername) {
            $.inviterUsername = inviterUsername;
            return this;
        }

        /**
         * @param inviterUsername Atlas user who invited `username` to the project.
         * 
         * @return builder
         * 
         */
        public Builder inviterUsername(String inviterUsername) {
            return inviterUsername(Output.of(inviterUsername));
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies the project to which you want to invite a user.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies the project to which you want to invite a user.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param roles List of Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. Refer to the [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) for information on valid roles.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles List of Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. Refer to the [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) for information on valid roles.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles List of Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. Refer to the [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) for information on valid roles.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param username Email address to which Atlas sent the invitation. The user uses this email address as their Atlas username if they accept this invitation.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Email address to which Atlas sent the invitation. The user uses this email address as their Atlas username if they accept this invitation.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public ProjectInvitationState build() {
            return $;
        }
    }

}
