// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.X509AuthenticationDatabaseUserCertificateArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class X509AuthenticationDatabaseUserState extends com.pulumi.resources.ResourceArgs {

    public static final X509AuthenticationDatabaseUserState Empty = new X509AuthenticationDatabaseUserState();

    /**
     * Array of objects where each details one unexpired database user certificate.
     * 
     */
    @Import(name="certificates")
    private @Nullable Output<List<X509AuthenticationDatabaseUserCertificateArgs>> certificates;

    /**
     * @return Array of objects where each details one unexpired database user certificate.
     * 
     */
    public Optional<Output<List<X509AuthenticationDatabaseUserCertificateArgs>>> certificates() {
        return Optional.ofNullable(this.certificates);
    }

    /**
     * Contains the last X.509 certificate and private key created for a database user.
     * 
     */
    @Import(name="currentCertificate")
    private @Nullable Output<String> currentCertificate;

    /**
     * @return Contains the last X.509 certificate and private key created for a database user.
     * 
     */
    public Optional<Output<String>> currentCertificate() {
        return Optional.ofNullable(this.currentCertificate);
    }

    /**
     * PEM string containing one or more customer CAs for database user authentication.
     * 
     */
    @Import(name="customerX509Cas")
    private @Nullable Output<String> customerX509Cas;

    /**
     * @return PEM string containing one or more customer CAs for database user authentication.
     * 
     */
    public Optional<Output<String>> customerX509Cas() {
        return Optional.ofNullable(this.customerX509Cas);
    }

    /**
     * A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.
     * 
     */
    @Import(name="monthsUntilExpiration")
    private @Nullable Output<Integer> monthsUntilExpiration;

    /**
     * @return A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.
     * 
     */
    public Optional<Output<Integer>> monthsUntilExpiration() {
        return Optional.ofNullable(this.monthsUntilExpiration);
    }

    /**
     * Identifier for the Atlas project associated with the X.509 configuration.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Identifier for the Atlas project associated with the X.509 configuration.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Username of the database user to create a certificate for.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Username of the database user to create a certificate for.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private X509AuthenticationDatabaseUserState() {}

    private X509AuthenticationDatabaseUserState(X509AuthenticationDatabaseUserState $) {
        this.certificates = $.certificates;
        this.currentCertificate = $.currentCertificate;
        this.customerX509Cas = $.customerX509Cas;
        this.monthsUntilExpiration = $.monthsUntilExpiration;
        this.projectId = $.projectId;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(X509AuthenticationDatabaseUserState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private X509AuthenticationDatabaseUserState $;

        public Builder() {
            $ = new X509AuthenticationDatabaseUserState();
        }

        public Builder(X509AuthenticationDatabaseUserState defaults) {
            $ = new X509AuthenticationDatabaseUserState(Objects.requireNonNull(defaults));
        }

        /**
         * @param certificates Array of objects where each details one unexpired database user certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificates(@Nullable Output<List<X509AuthenticationDatabaseUserCertificateArgs>> certificates) {
            $.certificates = certificates;
            return this;
        }

        /**
         * @param certificates Array of objects where each details one unexpired database user certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificates(List<X509AuthenticationDatabaseUserCertificateArgs> certificates) {
            return certificates(Output.of(certificates));
        }

        /**
         * @param certificates Array of objects where each details one unexpired database user certificate.
         * 
         * @return builder
         * 
         */
        public Builder certificates(X509AuthenticationDatabaseUserCertificateArgs... certificates) {
            return certificates(List.of(certificates));
        }

        /**
         * @param currentCertificate Contains the last X.509 certificate and private key created for a database user.
         * 
         * @return builder
         * 
         */
        public Builder currentCertificate(@Nullable Output<String> currentCertificate) {
            $.currentCertificate = currentCertificate;
            return this;
        }

        /**
         * @param currentCertificate Contains the last X.509 certificate and private key created for a database user.
         * 
         * @return builder
         * 
         */
        public Builder currentCertificate(String currentCertificate) {
            return currentCertificate(Output.of(currentCertificate));
        }

        /**
         * @param customerX509Cas PEM string containing one or more customer CAs for database user authentication.
         * 
         * @return builder
         * 
         */
        public Builder customerX509Cas(@Nullable Output<String> customerX509Cas) {
            $.customerX509Cas = customerX509Cas;
            return this;
        }

        /**
         * @param customerX509Cas PEM string containing one or more customer CAs for database user authentication.
         * 
         * @return builder
         * 
         */
        public Builder customerX509Cas(String customerX509Cas) {
            return customerX509Cas(Output.of(customerX509Cas));
        }

        /**
         * @param monthsUntilExpiration A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.
         * 
         * @return builder
         * 
         */
        public Builder monthsUntilExpiration(@Nullable Output<Integer> monthsUntilExpiration) {
            $.monthsUntilExpiration = monthsUntilExpiration;
            return this;
        }

        /**
         * @param monthsUntilExpiration A number of months that the created certificate is valid for before expiry, up to 24 months. By default is 3.
         * 
         * @return builder
         * 
         */
        public Builder monthsUntilExpiration(Integer monthsUntilExpiration) {
            return monthsUntilExpiration(Output.of(monthsUntilExpiration));
        }

        /**
         * @param projectId Identifier for the Atlas project associated with the X.509 configuration.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Identifier for the Atlas project associated with the X.509 configuration.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param username Username of the database user to create a certificate for.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Username of the database user to create a certificate for.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public X509AuthenticationDatabaseUserState build() {
            return $;
        }
    }

}
