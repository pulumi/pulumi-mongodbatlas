// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.LdapVerifyLinkArgs;
import com.pulumi.mongodbatlas.inputs.LdapVerifyValidationArgs;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LdapVerifyState extends com.pulumi.resources.ResourceArgs {

    public static final LdapVerifyState Empty = new LdapVerifyState();

    /**
     * An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
     * 
     */
    @Import(name="authzQueryTemplate")
    private @Nullable Output<String> authzQueryTemplate;

    /**
     * @return An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
     * 
     */
    public Optional<Output<String>> authzQueryTemplate() {
        return Optional.ofNullable(this.authzQueryTemplate);
    }

    /**
     * The password used to authenticate the `bindUsername`.
     * 
     */
    @Import(name="bindPassword")
    private @Nullable Output<String> bindPassword;

    /**
     * @return The password used to authenticate the `bindUsername`.
     * 
     */
    public Optional<Output<String>> bindPassword() {
        return Optional.ofNullable(this.bindPassword);
    }

    /**
     * The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
     * 
     */
    @Import(name="bindUsername")
    private @Nullable Output<String> bindUsername;

    /**
     * @return The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
     * 
     */
    public Optional<Output<String>> bindUsername() {
        return Optional.ofNullable(this.bindUsername);
    }

    /**
     * CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
     * 
     */
    @Import(name="caCertificate")
    private @Nullable Output<String> caCertificate;

    /**
     * @return CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
     * 
     */
    public Optional<Output<String>> caCertificate() {
        return Optional.ofNullable(this.caCertificate);
    }

    /**
     * The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
     * 
     */
    @Import(name="hostname")
    private @Nullable Output<String> hostname;

    /**
     * @return The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
     * 
     */
    public Optional<Output<String>> hostname() {
        return Optional.ofNullable(this.hostname);
    }

    /**
     * One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
     * 
     */
    @Import(name="links")
    private @Nullable Output<List<LdapVerifyLinkArgs>> links;

    /**
     * @return One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
     * 
     */
    public Optional<Output<List<LdapVerifyLinkArgs>>> links() {
        return Optional.ofNullable(this.links);
    }

    /**
     * The port to which the LDAP server listens for client connections. Default: `636`
     * 
     */
    @Import(name="port")
    private @Nullable Output<Integer> port;

    /**
     * @return The port to which the LDAP server listens for client connections. Default: `636`
     * 
     */
    public Optional<Output<Integer>> port() {
        return Optional.ofNullable(this.port);
    }

    /**
     * The unique ID for the project to configure LDAP.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The unique ID for the project to configure LDAP.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
     * 
     */
    @Import(name="requestId")
    private @Nullable Output<String> requestId;

    /**
     * @return The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
     * 
     */
    public Optional<Output<String>> requestId() {
        return Optional.ofNullable(this.requestId);
    }

    /**
     * The current status of the LDAP over TLS/SSL configuration. One of the following values: `PENDING`, `SUCCESS`, and `FAILED`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return The current status of the LDAP over TLS/SSL configuration. One of the following values: `PENDING`, `SUCCESS`, and `FAILED`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details. The array contains a document for each test that Atlas runs. Atlas stops running tests after the first failure. The following return values can be seen here: [Values](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
     * 
     */
    @Import(name="validations")
    private @Nullable Output<List<LdapVerifyValidationArgs>> validations;

    /**
     * @return Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details. The array contains a document for each test that Atlas runs. Atlas stops running tests after the first failure. The following return values can be seen here: [Values](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
     * 
     */
    public Optional<Output<List<LdapVerifyValidationArgs>>> validations() {
        return Optional.ofNullable(this.validations);
    }

    private LdapVerifyState() {}

    private LdapVerifyState(LdapVerifyState $) {
        this.authzQueryTemplate = $.authzQueryTemplate;
        this.bindPassword = $.bindPassword;
        this.bindUsername = $.bindUsername;
        this.caCertificate = $.caCertificate;
        this.hostname = $.hostname;
        this.links = $.links;
        this.port = $.port;
        this.projectId = $.projectId;
        this.requestId = $.requestId;
        this.status = $.status;
        this.validations = $.validations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LdapVerifyState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LdapVerifyState $;

        public Builder() {
            $ = new LdapVerifyState();
        }

        public Builder(LdapVerifyState defaults) {
            $ = new LdapVerifyState(Objects.requireNonNull(defaults));
        }

        /**
         * @param authzQueryTemplate An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
         * 
         * @return builder
         * 
         */
        public Builder authzQueryTemplate(@Nullable Output<String> authzQueryTemplate) {
            $.authzQueryTemplate = authzQueryTemplate;
            return this;
        }

        /**
         * @param authzQueryTemplate An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
         * 
         * @return builder
         * 
         */
        public Builder authzQueryTemplate(String authzQueryTemplate) {
            return authzQueryTemplate(Output.of(authzQueryTemplate));
        }

        /**
         * @param bindPassword The password used to authenticate the `bindUsername`.
         * 
         * @return builder
         * 
         */
        public Builder bindPassword(@Nullable Output<String> bindPassword) {
            $.bindPassword = bindPassword;
            return this;
        }

        /**
         * @param bindPassword The password used to authenticate the `bindUsername`.
         * 
         * @return builder
         * 
         */
        public Builder bindPassword(String bindPassword) {
            return bindPassword(Output.of(bindPassword));
        }

        /**
         * @param bindUsername The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
         * 
         * @return builder
         * 
         */
        public Builder bindUsername(@Nullable Output<String> bindUsername) {
            $.bindUsername = bindUsername;
            return this;
        }

        /**
         * @param bindUsername The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
         * 
         * @return builder
         * 
         */
        public Builder bindUsername(String bindUsername) {
            return bindUsername(Output.of(bindUsername));
        }

        /**
         * @param caCertificate CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(@Nullable Output<String> caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        /**
         * @param caCertificate CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(String caCertificate) {
            return caCertificate(Output.of(caCertificate));
        }

        /**
         * @param hostname The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
         * 
         * @return builder
         * 
         */
        public Builder hostname(@Nullable Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param links One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
         * 
         * @return builder
         * 
         */
        public Builder links(@Nullable Output<List<LdapVerifyLinkArgs>> links) {
            $.links = links;
            return this;
        }

        /**
         * @param links One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
         * 
         * @return builder
         * 
         */
        public Builder links(List<LdapVerifyLinkArgs> links) {
            return links(Output.of(links));
        }

        /**
         * @param links One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
         * 
         * @return builder
         * 
         */
        public Builder links(LdapVerifyLinkArgs... links) {
            return links(List.of(links));
        }

        /**
         * @param port The port to which the LDAP server listens for client connections. Default: `636`
         * 
         * @return builder
         * 
         */
        public Builder port(@Nullable Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port to which the LDAP server listens for client connections. Default: `636`
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param projectId The unique ID for the project to configure LDAP.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The unique ID for the project to configure LDAP.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param requestId The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
         * 
         * @return builder
         * 
         */
        public Builder requestId(@Nullable Output<String> requestId) {
            $.requestId = requestId;
            return this;
        }

        /**
         * @param requestId The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
         * 
         * @return builder
         * 
         */
        public Builder requestId(String requestId) {
            return requestId(Output.of(requestId));
        }

        /**
         * @param status The current status of the LDAP over TLS/SSL configuration. One of the following values: `PENDING`, `SUCCESS`, and `FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status The current status of the LDAP over TLS/SSL configuration. One of the following values: `PENDING`, `SUCCESS`, and `FAILED`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param validations Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details. The array contains a document for each test that Atlas runs. Atlas stops running tests after the first failure. The following return values can be seen here: [Values](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
         * 
         * @return builder
         * 
         */
        public Builder validations(@Nullable Output<List<LdapVerifyValidationArgs>> validations) {
            $.validations = validations;
            return this;
        }

        /**
         * @param validations Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details. The array contains a document for each test that Atlas runs. Atlas stops running tests after the first failure. The following return values can be seen here: [Values](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
         * 
         * @return builder
         * 
         */
        public Builder validations(List<LdapVerifyValidationArgs> validations) {
            return validations(Output.of(validations));
        }

        /**
         * @param validations Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details. The array contains a document for each test that Atlas runs. Atlas stops running tests after the first failure. The following return values can be seen here: [Values](https://docs.atlas.mongodb.com/reference/api/ldaps-configuration-request-verification)
         * 
         * @return builder
         * 
         */
        public Builder validations(LdapVerifyValidationArgs... validations) {
            return validations(List.of(validations));
        }

        public LdapVerifyState build() {
            return $;
        }
    }

}
