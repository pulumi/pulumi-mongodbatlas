// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.mongodbatlas.Utilities;
import com.pulumi.mongodbatlas.inputs.Get509AuthenticationDatabaseUserArgs;
import com.pulumi.mongodbatlas.inputs.Get509AuthenticationDatabaseUserPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAccessListApiKeyArgs;
import com.pulumi.mongodbatlas.inputs.GetAccessListApiKeyPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAccessListApiKeysArgs;
import com.pulumi.mongodbatlas.inputs.GetAccessListApiKeysPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAdvancedClusterArgs;
import com.pulumi.mongodbatlas.inputs.GetAdvancedClusterPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAdvancedClustersArgs;
import com.pulumi.mongodbatlas.inputs.GetAdvancedClustersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationsArgs;
import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetApiKeyArgs;
import com.pulumi.mongodbatlas.inputs.GetApiKeyPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetApiKeysArgs;
import com.pulumi.mongodbatlas.inputs.GetApiKeysPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
import com.pulumi.mongodbatlas.inputs.GetAtlasUserPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
import com.pulumi.mongodbatlas.inputs.GetAtlasUsersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAuditingArgs;
import com.pulumi.mongodbatlas.inputs.GetAuditingPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetBackupCompliancePolicyArgs;
import com.pulumi.mongodbatlas.inputs.GetBackupCompliancePolicyPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupScheduleArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSchedulePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketsArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobsArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobsArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotsArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetClusterArgs;
import com.pulumi.mongodbatlas.inputs.GetClusterOutageSimulationArgs;
import com.pulumi.mongodbatlas.inputs.GetClusterOutageSimulationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetClusterPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
import com.pulumi.mongodbatlas.inputs.GetClustersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCustomDbRoleArgs;
import com.pulumi.mongodbatlas.inputs.GetCustomDbRolePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCustomDbRolesArgs;
import com.pulumi.mongodbatlas.inputs.GetCustomDbRolesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCustomDnsConfigurationClusterAwsArgs;
import com.pulumi.mongodbatlas.inputs.GetCustomDnsConfigurationClusterAwsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelinePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelinesArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelinesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetDatabaseUserArgs;
import com.pulumi.mongodbatlas.inputs.GetDatabaseUserPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetEventTriggerArgs;
import com.pulumi.mongodbatlas.inputs.GetEventTriggerPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetEventTriggersArgs;
import com.pulumi.mongodbatlas.inputs.GetEventTriggersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancesArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitsArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProviderArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProviderPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProvidersArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProvidersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigsArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingsArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetGlobalClusterConfigArgs;
import com.pulumi.mongodbatlas.inputs.GetGlobalClusterConfigPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetLdapConfigurationArgs;
import com.pulumi.mongodbatlas.inputs.GetLdapConfigurationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetLdapVerifyArgs;
import com.pulumi.mongodbatlas.inputs.GetLdapVerifyPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetMaintenanceWindowArgs;
import com.pulumi.mongodbatlas.inputs.GetMaintenanceWindowPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkContainerArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkContainerPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkContainersArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkContainersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringsArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetOnlineArchiveArgs;
import com.pulumi.mongodbatlas.inputs.GetOnlineArchivePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetOnlineArchivesArgs;
import com.pulumi.mongodbatlas.inputs.GetOnlineArchivesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetOrgInvitationArgs;
import com.pulumi.mongodbatlas.inputs.GetOrgInvitationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetOrganizationArgs;
import com.pulumi.mongodbatlas.inputs.GetOrganizationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
import com.pulumi.mongodbatlas.inputs.GetOrganizationsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivateEndpointRegionalModeArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivateEndpointRegionalModePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointServiceArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointServicePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchivePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchivesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceServerlessArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceServerlessPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectApiKeyArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectApiKeyPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectApiKeysArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectApiKeysPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectInvitationArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectInvitationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentArgs;
import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
import com.pulumi.mongodbatlas.inputs.GetSearchIndexPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSearchIndexesArgs;
import com.pulumi.mongodbatlas.inputs.GetSearchIndexesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetServerlessInstanceArgs;
import com.pulumi.mongodbatlas.inputs.GetServerlessInstancePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetServerlessInstancesArgs;
import com.pulumi.mongodbatlas.inputs.GetServerlessInstancesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierRestoreJobArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierRestoreJobPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierRestoreJobsArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierRestoreJobsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierSnapshotArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierSnapshotPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierSnapshotsArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierSnapshotsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetTeamArgs;
import com.pulumi.mongodbatlas.inputs.GetTeamPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetTeamsArgs;
import com.pulumi.mongodbatlas.inputs.GetTeamsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationArgs;
import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationsArgs;
import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetX509AuthenticationDatabaseUserArgs;
import com.pulumi.mongodbatlas.inputs.GetX509AuthenticationDatabaseUserPlainArgs;
import com.pulumi.mongodbatlas.outputs.Get509AuthenticationDatabaseUserResult;
import com.pulumi.mongodbatlas.outputs.GetAccessListApiKeyResult;
import com.pulumi.mongodbatlas.outputs.GetAccessListApiKeysInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetAdvancedClusterResult;
import com.pulumi.mongodbatlas.outputs.GetAdvancedClustersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetAlertConfigurationResult;
import com.pulumi.mongodbatlas.outputs.GetAlertConfigurationsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetApiKeyResult;
import com.pulumi.mongodbatlas.outputs.GetApiKeysInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetAtlasUserResult;
import com.pulumi.mongodbatlas.outputs.GetAtlasUsersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetAuditingResult;
import com.pulumi.mongodbatlas.outputs.GetBackupCompliancePolicyResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupScheduleResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotExportBucketResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotExportBucketsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotExportJobResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotExportJobsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotRestoreJobResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotRestoreJobsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetCloudProviderAccessResult;
import com.pulumi.mongodbatlas.outputs.GetCloudProviderAccessSetupResult;
import com.pulumi.mongodbatlas.outputs.GetClusterOutageSimulationResult;
import com.pulumi.mongodbatlas.outputs.GetClusterResult;
import com.pulumi.mongodbatlas.outputs.GetClustersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetCustomDbRoleResult;
import com.pulumi.mongodbatlas.outputs.GetCustomDbRolesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetCustomDnsConfigurationClusterAwsResult;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelineResult;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelineRunResult;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelineRunsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelinesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetDatabaseUserResult;
import com.pulumi.mongodbatlas.outputs.GetDatabaseUsersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetEventTriggerResult;
import com.pulumi.mongodbatlas.outputs.GetEventTriggersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedDatabaseInstanceResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedDatabaseInstancesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedQueryLimitResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedQueryLimitsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsIdentityProviderResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsIdentityProvidersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsOrgConfigResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsOrgConfigsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsOrgRoleMappingResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsOrgRoleMappingsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsResult;
import com.pulumi.mongodbatlas.outputs.GetGlobalClusterConfigResult;
import com.pulumi.mongodbatlas.outputs.GetLdapConfigurationResult;
import com.pulumi.mongodbatlas.outputs.GetLdapVerifyResult;
import com.pulumi.mongodbatlas.outputs.GetMaintenanceWindowResult;
import com.pulumi.mongodbatlas.outputs.GetNetworkContainerResult;
import com.pulumi.mongodbatlas.outputs.GetNetworkContainersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetNetworkPeeringResult;
import com.pulumi.mongodbatlas.outputs.GetNetworkPeeringsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetOnlineArchiveResult;
import com.pulumi.mongodbatlas.outputs.GetOnlineArchivesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetOrgInvitationResult;
import com.pulumi.mongodbatlas.outputs.GetOrganizationResult;
import com.pulumi.mongodbatlas.outputs.GetOrganizationsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetPrivateEndpointRegionalModeResult;
import com.pulumi.mongodbatlas.outputs.GetPrivateLinkEndpointResult;
import com.pulumi.mongodbatlas.outputs.GetPrivateLinkEndpointServiceResult;
import com.pulumi.mongodbatlas.outputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult;
import com.pulumi.mongodbatlas.outputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetPrivatelinkEndpointServiceServerlessResult;
import com.pulumi.mongodbatlas.outputs.GetPrivatelinkEndpointsServiceServerlessInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetProjectApiKeyResult;
import com.pulumi.mongodbatlas.outputs.GetProjectApiKeysInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetProjectInvitationResult;
import com.pulumi.mongodbatlas.outputs.GetProjectIpAccessListResult;
import com.pulumi.mongodbatlas.outputs.GetProjectResult;
import com.pulumi.mongodbatlas.outputs.GetProjectsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetRolesOrgIdResult;
import com.pulumi.mongodbatlas.outputs.GetSearchDeploymentResult;
import com.pulumi.mongodbatlas.outputs.GetSearchIndexResult;
import com.pulumi.mongodbatlas.outputs.GetSearchIndexesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetServerlessInstanceResult;
import com.pulumi.mongodbatlas.outputs.GetServerlessInstancesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetSharedTierRestoreJobResult;
import com.pulumi.mongodbatlas.outputs.GetSharedTierRestoreJobsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetSharedTierSnapshotResult;
import com.pulumi.mongodbatlas.outputs.GetSharedTierSnapshotsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetTeamResult;
import com.pulumi.mongodbatlas.outputs.GetTeamsResult;
import com.pulumi.mongodbatlas.outputs.GetThirdPartyIntegrationResult;
import com.pulumi.mongodbatlas.outputs.GetThirdPartyIntegrationsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetX509AuthenticationDatabaseUserResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class MongodbatlasFunctions {
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * @deprecated
     * mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser
     * 
     */
    @Deprecated /* mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser */
    public static Output<Get509AuthenticationDatabaseUserResult> get509AuthenticationDatabaseUser(Get509AuthenticationDatabaseUserArgs args) {
        return get509AuthenticationDatabaseUser(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * @deprecated
     * mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser
     * 
     */
    @Deprecated /* mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser */
    public static CompletableFuture<Get509AuthenticationDatabaseUserResult> get509AuthenticationDatabaseUserPlain(Get509AuthenticationDatabaseUserPlainArgs args) {
        return get509AuthenticationDatabaseUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * @deprecated
     * mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser
     * 
     */
    @Deprecated /* mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser */
    public static Output<Get509AuthenticationDatabaseUserResult> get509AuthenticationDatabaseUser(Get509AuthenticationDatabaseUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/get509AuthenticationDatabaseUser:get509AuthenticationDatabaseUser", TypeShape.of(Get509AuthenticationDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * @deprecated
     * mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser
     * 
     */
    @Deprecated /* mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser */
    public static CompletableFuture<Get509AuthenticationDatabaseUserResult> get509AuthenticationDatabaseUserPlain(Get509AuthenticationDatabaseUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/get509AuthenticationDatabaseUser:get509AuthenticationDatabaseUser", TypeShape.of(Get509AuthenticationDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetAccessListApiKeyResult> getAccessListApiKey(GetAccessListApiKeyArgs args) {
        return getAccessListApiKey(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetAccessListApiKeyResult> getAccessListApiKeyPlain(GetAccessListApiKeyPlainArgs args) {
        return getAccessListApiKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetAccessListApiKeyResult> getAccessListApiKey(GetAccessListApiKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAccessListApiKey:getAccessListApiKey", TypeShape.of(GetAccessListApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetAccessListApiKeyResult> getAccessListApiKeyPlain(GetAccessListApiKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAccessListApiKey:getAccessListApiKey", TypeShape.of(GetAccessListApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetAccessListApiKeysInvokeResult> getAccessListApiKeys(GetAccessListApiKeysArgs args) {
        return getAccessListApiKeys(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetAccessListApiKeysInvokeResult> getAccessListApiKeysPlain(GetAccessListApiKeysPlainArgs args) {
        return getAccessListApiKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetAccessListApiKeysInvokeResult> getAccessListApiKeys(GetAccessListApiKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAccessListApiKeys:getAccessListApiKeys", TypeShape.of(GetAccessListApiKeysInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetAccessListApiKeysInvokeResult> getAccessListApiKeysPlain(GetAccessListApiKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAccessListApiKeys:getAccessListApiKeys", TypeShape.of(GetAccessListApiKeysInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.AdvancedCluster` describes an Advanced Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     */
    public static Output<GetAdvancedClusterResult> getAdvancedCluster(GetAdvancedClusterArgs args) {
        return getAdvancedCluster(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.AdvancedCluster` describes an Advanced Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     */
    public static CompletableFuture<GetAdvancedClusterResult> getAdvancedClusterPlain(GetAdvancedClusterPlainArgs args) {
        return getAdvancedClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.AdvancedCluster` describes an Advanced Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     */
    public static Output<GetAdvancedClusterResult> getAdvancedCluster(GetAdvancedClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAdvancedCluster:getAdvancedCluster", TypeShape.of(GetAdvancedClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.AdvancedCluster` describes an Advanced Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     */
    public static CompletableFuture<GetAdvancedClusterResult> getAdvancedClusterPlain(GetAdvancedClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAdvancedCluster:getAdvancedCluster", TypeShape.of(GetAdvancedClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Cluster` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleCluster = new Cluster(&#34;exampleCluster&#34;, ClusterArgs.builder()        
     *             .projectId(&#34;&lt;YOUR-PROJECT-ID&gt;&#34;)
     *             .clusterType(&#34;REPLICASET&#34;)
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                 .build())
     *             .build());
     * 
     *         final var exampleClusters = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(exampleCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAdvancedClustersInvokeResult> getAdvancedClusters(GetAdvancedClustersArgs args) {
        return getAdvancedClusters(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Cluster` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleCluster = new Cluster(&#34;exampleCluster&#34;, ClusterArgs.builder()        
     *             .projectId(&#34;&lt;YOUR-PROJECT-ID&gt;&#34;)
     *             .clusterType(&#34;REPLICASET&#34;)
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                 .build())
     *             .build());
     * 
     *         final var exampleClusters = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(exampleCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAdvancedClustersInvokeResult> getAdvancedClustersPlain(GetAdvancedClustersPlainArgs args) {
        return getAdvancedClustersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Cluster` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleCluster = new Cluster(&#34;exampleCluster&#34;, ClusterArgs.builder()        
     *             .projectId(&#34;&lt;YOUR-PROJECT-ID&gt;&#34;)
     *             .clusterType(&#34;REPLICASET&#34;)
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                 .build())
     *             .build());
     * 
     *         final var exampleClusters = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(exampleCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAdvancedClustersInvokeResult> getAdvancedClusters(GetAdvancedClustersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAdvancedClusters:getAdvancedClusters", TypeShape.of(GetAdvancedClustersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Cluster` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleCluster = new Cluster(&#34;exampleCluster&#34;, ClusterArgs.builder()        
     *             .projectId(&#34;&lt;YOUR-PROJECT-ID&gt;&#34;)
     *             .clusterType(&#34;REPLICASET&#34;)
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                 .build())
     *             .build());
     * 
     *         final var exampleClusters = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(exampleCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAdvancedClustersInvokeResult> getAdvancedClustersPlain(GetAdvancedClustersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAdvancedClusters:getAdvancedClusters", TypeShape.of(GetAdvancedClustersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static Output<GetAlertConfigurationResult> getAlertConfiguration(GetAlertConfigurationArgs args) {
        return getAlertConfiguration(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static CompletableFuture<GetAlertConfigurationResult> getAlertConfigurationPlain(GetAlertConfigurationPlainArgs args) {
        return getAlertConfigurationPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static Output<GetAlertConfigurationResult> getAlertConfiguration(GetAlertConfigurationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAlertConfiguration:getAlertConfiguration", TypeShape.of(GetAlertConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static CompletableFuture<GetAlertConfigurationResult> getAlertConfigurationPlain(GetAlertConfigurationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAlertConfiguration:getAlertConfiguration", TypeShape.of(GetAlertConfigurationResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetAlertConfigurationsInvokeResult> getAlertConfigurations(GetAlertConfigurationsArgs args) {
        return getAlertConfigurations(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetAlertConfigurationsInvokeResult> getAlertConfigurationsPlain(GetAlertConfigurationsPlainArgs args) {
        return getAlertConfigurationsPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetAlertConfigurationsInvokeResult> getAlertConfigurations(GetAlertConfigurationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAlertConfigurations:getAlertConfigurations", TypeShape.of(GetAlertConfigurationsInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetAlertConfigurationsInvokeResult> getAlertConfigurationsPlain(GetAlertConfigurationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAlertConfigurations:getAlertConfigurations", TypeShape.of(GetAlertConfigurationsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetApiKeyResult> getApiKey(GetApiKeyArgs args) {
        return getApiKey(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetApiKeyResult> getApiKeyPlain(GetApiKeyPlainArgs args) {
        return getApiKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetApiKeyResult> getApiKey(GetApiKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getApiKey:getApiKey", TypeShape.of(GetApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetApiKeyResult> getApiKeyPlain(GetApiKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getApiKey:getApiKey", TypeShape.of(GetApiKeyResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetApiKeysInvokeResult> getApiKeys(GetApiKeysArgs args) {
        return getApiKeys(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetApiKeysInvokeResult> getApiKeysPlain(GetApiKeysPlainArgs args) {
        return getApiKeysPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetApiKeysInvokeResult> getApiKeys(GetApiKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getApiKeys:getApiKeys", TypeShape.of(GetApiKeysInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetApiKeysInvokeResult> getApiKeysPlain(GetApiKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getApiKeys:getApiKeys", TypeShape.of(GetApiKeysInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getAtlasUser` Provides a MongoDB Atlas User.
     * 
     * &gt; **NOTE:** If you are the owner of a MongoDB Atlas organization or project, you can also retrieve the user profile for any user with membership in that organization or project.
     * 
     * ## Example Usage
     * ### Using user_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .userId(&#34;&lt;USER_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using username attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .username(&#34;&lt;USERNAME&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAtlasUserResult> getAtlasUser() {
        return getAtlasUser(GetAtlasUserArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getAtlasUser` Provides a MongoDB Atlas User.
     * 
     * &gt; **NOTE:** If you are the owner of a MongoDB Atlas organization or project, you can also retrieve the user profile for any user with membership in that organization or project.
     * 
     * ## Example Usage
     * ### Using user_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .userId(&#34;&lt;USER_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using username attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .username(&#34;&lt;USERNAME&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAtlasUserResult> getAtlasUserPlain() {
        return getAtlasUserPlain(GetAtlasUserPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getAtlasUser` Provides a MongoDB Atlas User.
     * 
     * &gt; **NOTE:** If you are the owner of a MongoDB Atlas organization or project, you can also retrieve the user profile for any user with membership in that organization or project.
     * 
     * ## Example Usage
     * ### Using user_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .userId(&#34;&lt;USER_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using username attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .username(&#34;&lt;USERNAME&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAtlasUserResult> getAtlasUser(GetAtlasUserArgs args) {
        return getAtlasUser(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getAtlasUser` Provides a MongoDB Atlas User.
     * 
     * &gt; **NOTE:** If you are the owner of a MongoDB Atlas organization or project, you can also retrieve the user profile for any user with membership in that organization or project.
     * 
     * ## Example Usage
     * ### Using user_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .userId(&#34;&lt;USER_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using username attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .username(&#34;&lt;USERNAME&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAtlasUserResult> getAtlasUserPlain(GetAtlasUserPlainArgs args) {
        return getAtlasUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getAtlasUser` Provides a MongoDB Atlas User.
     * 
     * &gt; **NOTE:** If you are the owner of a MongoDB Atlas organization or project, you can also retrieve the user profile for any user with membership in that organization or project.
     * 
     * ## Example Usage
     * ### Using user_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .userId(&#34;&lt;USER_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using username attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .username(&#34;&lt;USERNAME&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAtlasUserResult> getAtlasUser(GetAtlasUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAtlasUser:getAtlasUser", TypeShape.of(GetAtlasUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getAtlasUser` Provides a MongoDB Atlas User.
     * 
     * &gt; **NOTE:** If you are the owner of a MongoDB Atlas organization or project, you can also retrieve the user profile for any user with membership in that organization or project.
     * 
     * ## Example Usage
     * ### Using user_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .userId(&#34;&lt;USER_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using username attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .username(&#34;&lt;USERNAME&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAtlasUserResult> getAtlasUserPlain(GetAtlasUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAtlasUser:getAtlasUser", TypeShape.of(GetAtlasUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `atlas_users` provides Atlas Users associated with a specified Organization, Project, or Team.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ### Using org_id attribute to query Organization Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId(&#34;&lt;ORG_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using project_id attribute to query Project Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using team_id and org_id attribute to query Team Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId(&#34;&lt;ORG_ID&gt;&#34;)
     *             .teamId(&#34;&lt;TEAM_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAtlasUsersInvokeResult> getAtlasUsers() {
        return getAtlasUsers(GetAtlasUsersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `atlas_users` provides Atlas Users associated with a specified Organization, Project, or Team.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ### Using org_id attribute to query Organization Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId(&#34;&lt;ORG_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using project_id attribute to query Project Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using team_id and org_id attribute to query Team Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId(&#34;&lt;ORG_ID&gt;&#34;)
     *             .teamId(&#34;&lt;TEAM_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAtlasUsersInvokeResult> getAtlasUsersPlain() {
        return getAtlasUsersPlain(GetAtlasUsersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `atlas_users` provides Atlas Users associated with a specified Organization, Project, or Team.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ### Using org_id attribute to query Organization Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId(&#34;&lt;ORG_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using project_id attribute to query Project Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using team_id and org_id attribute to query Team Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId(&#34;&lt;ORG_ID&gt;&#34;)
     *             .teamId(&#34;&lt;TEAM_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAtlasUsersInvokeResult> getAtlasUsers(GetAtlasUsersArgs args) {
        return getAtlasUsers(args, InvokeOptions.Empty);
    }
    /**
     * `atlas_users` provides Atlas Users associated with a specified Organization, Project, or Team.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ### Using org_id attribute to query Organization Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId(&#34;&lt;ORG_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using project_id attribute to query Project Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using team_id and org_id attribute to query Team Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId(&#34;&lt;ORG_ID&gt;&#34;)
     *             .teamId(&#34;&lt;TEAM_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAtlasUsersInvokeResult> getAtlasUsersPlain(GetAtlasUsersPlainArgs args) {
        return getAtlasUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `atlas_users` provides Atlas Users associated with a specified Organization, Project, or Team.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ### Using org_id attribute to query Organization Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId(&#34;&lt;ORG_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using project_id attribute to query Project Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using team_id and org_id attribute to query Team Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId(&#34;&lt;ORG_ID&gt;&#34;)
     *             .teamId(&#34;&lt;TEAM_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetAtlasUsersInvokeResult> getAtlasUsers(GetAtlasUsersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAtlasUsers:getAtlasUsers", TypeShape.of(GetAtlasUsersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `atlas_users` provides Atlas Users associated with a specified Organization, Project, or Team.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ### Using org_id attribute to query Organization Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId(&#34;&lt;ORG_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using project_id attribute to query Project Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### Using team_id and org_id attribute to query Team Atlas Users
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId(&#34;&lt;ORG_ID&gt;&#34;)
     *             .teamId(&#34;&lt;TEAM_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetAtlasUsersInvokeResult> getAtlasUsersPlain(GetAtlasUsersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAtlasUsers:getAtlasUsers", TypeShape.of(GetAtlasUsersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Auditing` describes a Auditing.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static Output<GetAuditingResult> getAuditing(GetAuditingArgs args) {
        return getAuditing(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Auditing` describes a Auditing.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static CompletableFuture<GetAuditingResult> getAuditingPlain(GetAuditingPlainArgs args) {
        return getAuditingPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Auditing` describes a Auditing.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static Output<GetAuditingResult> getAuditing(GetAuditingArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAuditing:getAuditing", TypeShape.of(GetAuditingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Auditing` describes a Auditing.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static CompletableFuture<GetAuditingResult> getAuditingPlain(GetAuditingPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAuditing:getAuditing", TypeShape.of(GetAuditingResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetBackupCompliancePolicyResult> getBackupCompliancePolicy(GetBackupCompliancePolicyArgs args) {
        return getBackupCompliancePolicy(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetBackupCompliancePolicyResult> getBackupCompliancePolicyPlain(GetBackupCompliancePolicyPlainArgs args) {
        return getBackupCompliancePolicyPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetBackupCompliancePolicyResult> getBackupCompliancePolicy(GetBackupCompliancePolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getBackupCompliancePolicy:getBackupCompliancePolicy", TypeShape.of(GetBackupCompliancePolicyResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetBackupCompliancePolicyResult> getBackupCompliancePolicyPlain(GetBackupCompliancePolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getBackupCompliancePolicy:getBackupCompliancePolicy", TypeShape.of(GetBackupCompliancePolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSchedule` provides a Cloud Backup Schedule datasource. An Atlas Cloud Backup Schedule provides the current cloud backup schedule for the cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetCloudBackupScheduleResult> getCloudBackupSchedule(GetCloudBackupScheduleArgs args) {
        return getCloudBackupSchedule(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSchedule` provides a Cloud Backup Schedule datasource. An Atlas Cloud Backup Schedule provides the current cloud backup schedule for the cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetCloudBackupScheduleResult> getCloudBackupSchedulePlain(GetCloudBackupSchedulePlainArgs args) {
        return getCloudBackupSchedulePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSchedule` provides a Cloud Backup Schedule datasource. An Atlas Cloud Backup Schedule provides the current cloud backup schedule for the cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetCloudBackupScheduleResult> getCloudBackupSchedule(GetCloudBackupScheduleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSchedule:getCloudBackupSchedule", TypeShape.of(GetCloudBackupScheduleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSchedule` provides a Cloud Backup Schedule datasource. An Atlas Cloud Backup Schedule provides the current cloud backup schedule for the cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetCloudBackupScheduleResult> getCloudBackupSchedulePlain(GetCloudBackupSchedulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSchedule:getCloudBackupSchedule", TypeShape.of(GetCloudBackupScheduleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetCloudBackupSnapshotResult> getCloudBackupSnapshot(GetCloudBackupSnapshotArgs args) {
        return getCloudBackupSnapshot(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotResult> getCloudBackupSnapshotPlain(GetCloudBackupSnapshotPlainArgs args) {
        return getCloudBackupSnapshotPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetCloudBackupSnapshotResult> getCloudBackupSnapshot(GetCloudBackupSnapshotArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshot:getCloudBackupSnapshot", TypeShape.of(GetCloudBackupSnapshotResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotResult> getCloudBackupSnapshotPlain(GetCloudBackupSnapshotPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshot:getCloudBackupSnapshot", TypeShape.of(GetCloudBackupSnapshotResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportBucket` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetCloudBackupSnapshotExportBucketResult> getCloudBackupSnapshotExportBucket(GetCloudBackupSnapshotExportBucketArgs args) {
        return getCloudBackupSnapshotExportBucket(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportBucket` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportBucketResult> getCloudBackupSnapshotExportBucketPlain(GetCloudBackupSnapshotExportBucketPlainArgs args) {
        return getCloudBackupSnapshotExportBucketPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportBucket` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetCloudBackupSnapshotExportBucketResult> getCloudBackupSnapshotExportBucket(GetCloudBackupSnapshotExportBucketArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshotExportBucket:getCloudBackupSnapshotExportBucket", TypeShape.of(GetCloudBackupSnapshotExportBucketResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportBucket` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportBucketResult> getCloudBackupSnapshotExportBucketPlain(GetCloudBackupSnapshotExportBucketPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshotExportBucket:getCloudBackupSnapshotExportBucket", TypeShape.of(GetCloudBackupSnapshotExportBucketResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportBuckets` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket(&#34;testCloudBackupSnapshotExportBucket&#34;, CloudBackupSnapshotExportBucketArgs.builder()        
     *             .bucketName(&#34;example-bucket&#34;)
     *             .cloudProvider(&#34;AWS&#34;)
     *             .iamRoleId(&#34;{IAM_ROLE_ID}&#34;)
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .build());
     * 
     *         final var testCloudBackupSnapshotExportBuckets = MongodbatlasFunctions.getCloudBackupSnapshotExportBuckets(GetCloudBackupSnapshotExportBucketsArgs.builder()
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudBackupSnapshotExportBucketsInvokeResult> getCloudBackupSnapshotExportBuckets(GetCloudBackupSnapshotExportBucketsArgs args) {
        return getCloudBackupSnapshotExportBuckets(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportBuckets` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket(&#34;testCloudBackupSnapshotExportBucket&#34;, CloudBackupSnapshotExportBucketArgs.builder()        
     *             .bucketName(&#34;example-bucket&#34;)
     *             .cloudProvider(&#34;AWS&#34;)
     *             .iamRoleId(&#34;{IAM_ROLE_ID}&#34;)
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .build());
     * 
     *         final var testCloudBackupSnapshotExportBuckets = MongodbatlasFunctions.getCloudBackupSnapshotExportBuckets(GetCloudBackupSnapshotExportBucketsArgs.builder()
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportBucketsInvokeResult> getCloudBackupSnapshotExportBucketsPlain(GetCloudBackupSnapshotExportBucketsPlainArgs args) {
        return getCloudBackupSnapshotExportBucketsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportBuckets` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket(&#34;testCloudBackupSnapshotExportBucket&#34;, CloudBackupSnapshotExportBucketArgs.builder()        
     *             .bucketName(&#34;example-bucket&#34;)
     *             .cloudProvider(&#34;AWS&#34;)
     *             .iamRoleId(&#34;{IAM_ROLE_ID}&#34;)
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .build());
     * 
     *         final var testCloudBackupSnapshotExportBuckets = MongodbatlasFunctions.getCloudBackupSnapshotExportBuckets(GetCloudBackupSnapshotExportBucketsArgs.builder()
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudBackupSnapshotExportBucketsInvokeResult> getCloudBackupSnapshotExportBuckets(GetCloudBackupSnapshotExportBucketsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshotExportBuckets:getCloudBackupSnapshotExportBuckets", TypeShape.of(GetCloudBackupSnapshotExportBucketsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportBuckets` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket(&#34;testCloudBackupSnapshotExportBucket&#34;, CloudBackupSnapshotExportBucketArgs.builder()        
     *             .bucketName(&#34;example-bucket&#34;)
     *             .cloudProvider(&#34;AWS&#34;)
     *             .iamRoleId(&#34;{IAM_ROLE_ID}&#34;)
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .build());
     * 
     *         final var testCloudBackupSnapshotExportBuckets = MongodbatlasFunctions.getCloudBackupSnapshotExportBuckets(GetCloudBackupSnapshotExportBucketsArgs.builder()
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportBucketsInvokeResult> getCloudBackupSnapshotExportBucketsPlain(GetCloudBackupSnapshotExportBucketsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshotExportBuckets:getCloudBackupSnapshotExportBuckets", TypeShape.of(GetCloudBackupSnapshotExportBucketsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportJob` datasource allows you to retrieve a snapshot export job for the specified project and cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetCloudBackupSnapshotExportJobResult> getCloudBackupSnapshotExportJob(GetCloudBackupSnapshotExportJobArgs args) {
        return getCloudBackupSnapshotExportJob(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportJob` datasource allows you to retrieve a snapshot export job for the specified project and cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportJobResult> getCloudBackupSnapshotExportJobPlain(GetCloudBackupSnapshotExportJobPlainArgs args) {
        return getCloudBackupSnapshotExportJobPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportJob` datasource allows you to retrieve a snapshot export job for the specified project and cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetCloudBackupSnapshotExportJobResult> getCloudBackupSnapshotExportJob(GetCloudBackupSnapshotExportJobArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshotExportJob:getCloudBackupSnapshotExportJob", TypeShape.of(GetCloudBackupSnapshotExportJobResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportJob` datasource allows you to retrieve a snapshot export job for the specified project and cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportJobResult> getCloudBackupSnapshotExportJobPlain(GetCloudBackupSnapshotExportJobPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshotExportJob:getCloudBackupSnapshotExportJob", TypeShape.of(GetCloudBackupSnapshotExportJobResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportJobs` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotExportJobCustomDataArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket(&#34;testCloudBackupSnapshotExportBucket&#34;, CloudBackupSnapshotExportBucketArgs.builder()        
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .iamRoleId(&#34;{IAM_ROLE_ID}&#34;)
     *             .bucketName(&#34;example_bucket&#34;)
     *             .cloudProvider(&#34;AWS&#34;)
     *             .build());
     * 
     *         var testCloudBackupSnapshotExportJob = new CloudBackupSnapshotExportJob(&#34;testCloudBackupSnapshotExportJob&#34;, CloudBackupSnapshotExportJobArgs.builder()        
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .clusterName(&#34;{CLUSTER_NAME}&#34;)
     *             .snapshotId(&#34;{SNAPSHOT_ID}&#34;)
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .customDatas(CloudBackupSnapshotExportJobCustomDataArgs.builder()
     *                 .key(&#34;exported by&#34;)
     *                 .value(&#34;myName&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var testCloudBackupSnapshotExportJobs = MongodbatlasFunctions.getCloudBackupSnapshotExportJobs(GetCloudBackupSnapshotExportJobsArgs.builder()
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .clusterName(&#34;{CLUSTER_NAME}&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudBackupSnapshotExportJobsInvokeResult> getCloudBackupSnapshotExportJobs(GetCloudBackupSnapshotExportJobsArgs args) {
        return getCloudBackupSnapshotExportJobs(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportJobs` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotExportJobCustomDataArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket(&#34;testCloudBackupSnapshotExportBucket&#34;, CloudBackupSnapshotExportBucketArgs.builder()        
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .iamRoleId(&#34;{IAM_ROLE_ID}&#34;)
     *             .bucketName(&#34;example_bucket&#34;)
     *             .cloudProvider(&#34;AWS&#34;)
     *             .build());
     * 
     *         var testCloudBackupSnapshotExportJob = new CloudBackupSnapshotExportJob(&#34;testCloudBackupSnapshotExportJob&#34;, CloudBackupSnapshotExportJobArgs.builder()        
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .clusterName(&#34;{CLUSTER_NAME}&#34;)
     *             .snapshotId(&#34;{SNAPSHOT_ID}&#34;)
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .customDatas(CloudBackupSnapshotExportJobCustomDataArgs.builder()
     *                 .key(&#34;exported by&#34;)
     *                 .value(&#34;myName&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var testCloudBackupSnapshotExportJobs = MongodbatlasFunctions.getCloudBackupSnapshotExportJobs(GetCloudBackupSnapshotExportJobsArgs.builder()
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .clusterName(&#34;{CLUSTER_NAME}&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportJobsInvokeResult> getCloudBackupSnapshotExportJobsPlain(GetCloudBackupSnapshotExportJobsPlainArgs args) {
        return getCloudBackupSnapshotExportJobsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportJobs` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotExportJobCustomDataArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket(&#34;testCloudBackupSnapshotExportBucket&#34;, CloudBackupSnapshotExportBucketArgs.builder()        
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .iamRoleId(&#34;{IAM_ROLE_ID}&#34;)
     *             .bucketName(&#34;example_bucket&#34;)
     *             .cloudProvider(&#34;AWS&#34;)
     *             .build());
     * 
     *         var testCloudBackupSnapshotExportJob = new CloudBackupSnapshotExportJob(&#34;testCloudBackupSnapshotExportJob&#34;, CloudBackupSnapshotExportJobArgs.builder()        
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .clusterName(&#34;{CLUSTER_NAME}&#34;)
     *             .snapshotId(&#34;{SNAPSHOT_ID}&#34;)
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .customDatas(CloudBackupSnapshotExportJobCustomDataArgs.builder()
     *                 .key(&#34;exported by&#34;)
     *                 .value(&#34;myName&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var testCloudBackupSnapshotExportJobs = MongodbatlasFunctions.getCloudBackupSnapshotExportJobs(GetCloudBackupSnapshotExportJobsArgs.builder()
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .clusterName(&#34;{CLUSTER_NAME}&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudBackupSnapshotExportJobsInvokeResult> getCloudBackupSnapshotExportJobs(GetCloudBackupSnapshotExportJobsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshotExportJobs:getCloudBackupSnapshotExportJobs", TypeShape.of(GetCloudBackupSnapshotExportJobsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportJobs` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotExportJobCustomDataArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket(&#34;testCloudBackupSnapshotExportBucket&#34;, CloudBackupSnapshotExportBucketArgs.builder()        
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .iamRoleId(&#34;{IAM_ROLE_ID}&#34;)
     *             .bucketName(&#34;example_bucket&#34;)
     *             .cloudProvider(&#34;AWS&#34;)
     *             .build());
     * 
     *         var testCloudBackupSnapshotExportJob = new CloudBackupSnapshotExportJob(&#34;testCloudBackupSnapshotExportJob&#34;, CloudBackupSnapshotExportJobArgs.builder()        
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .clusterName(&#34;{CLUSTER_NAME}&#34;)
     *             .snapshotId(&#34;{SNAPSHOT_ID}&#34;)
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .customDatas(CloudBackupSnapshotExportJobCustomDataArgs.builder()
     *                 .key(&#34;exported by&#34;)
     *                 .value(&#34;myName&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var testCloudBackupSnapshotExportJobs = MongodbatlasFunctions.getCloudBackupSnapshotExportJobs(GetCloudBackupSnapshotExportJobsArgs.builder()
     *             .projectId(&#34;{PROJECT_ID}&#34;)
     *             .clusterName(&#34;{CLUSTER_NAME}&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportJobsInvokeResult> getCloudBackupSnapshotExportJobsPlain(GetCloudBackupSnapshotExportJobsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshotExportJobs:getCloudBackupSnapshotExportJobs", TypeShape.of(GetCloudBackupSnapshotExportJobsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotRestoreJob` provides a Cloud Backup Snapshot Restore Job datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetCloudBackupSnapshotRestoreJobResult> getCloudBackupSnapshotRestoreJob(GetCloudBackupSnapshotRestoreJobArgs args) {
        return getCloudBackupSnapshotRestoreJob(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotRestoreJob` provides a Cloud Backup Snapshot Restore Job datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotRestoreJobResult> getCloudBackupSnapshotRestoreJobPlain(GetCloudBackupSnapshotRestoreJobPlainArgs args) {
        return getCloudBackupSnapshotRestoreJobPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotRestoreJob` provides a Cloud Backup Snapshot Restore Job datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetCloudBackupSnapshotRestoreJobResult> getCloudBackupSnapshotRestoreJob(GetCloudBackupSnapshotRestoreJobArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshotRestoreJob:getCloudBackupSnapshotRestoreJob", TypeShape.of(GetCloudBackupSnapshotRestoreJobResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotRestoreJob` provides a Cloud Backup Snapshot Restore Job datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotRestoreJobResult> getCloudBackupSnapshotRestoreJobPlain(GetCloudBackupSnapshotRestoreJobPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshotRestoreJob:getCloudBackupSnapshotRestoreJob", TypeShape.of(GetCloudBackupSnapshotRestoreJobResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotRestoreJobs` provides a Cloud Backup Snapshot Restore Jobs datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshot;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshot = new CloudBackupSnapshot(&#34;testCloudBackupSnapshot&#34;, CloudBackupSnapshotArgs.builder()        
     *             .projectId(&#34;5cf5a45a9ccf6400e60981b6&#34;)
     *             .clusterName(&#34;MyCluster&#34;)
     *             .description(&#34;MyDescription&#34;)
     *             .retentionInDays(1)
     *             .build());
     * 
     *         var testCloudBackupSnapshotRestoreJob = new CloudBackupSnapshotRestoreJob(&#34;testCloudBackupSnapshotRestoreJob&#34;, CloudBackupSnapshotRestoreJobArgs.builder()        
     *             .projectId(&#34;5cf5a45a9ccf6400e60981b6&#34;)
     *             .clusterName(&#34;MyCluster&#34;)
     *             .snapshotId(testCloudBackupSnapshot.id())
     *             .deliveryTypeConfig(CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs.builder()
     *                 .automated(true)
     *                 .targetClusterName(&#34;MyCluster&#34;)
     *                 .targetProjectId(&#34;5cf5a45a9ccf6400e60981b6&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var testCloudBackupSnapshotRestoreJobs = MongodbatlasFunctions.getCloudBackupSnapshotRestoreJobs(GetCloudBackupSnapshotRestoreJobsArgs.builder()
     *             .projectId(testCloudBackupSnapshotRestoreJob.projectId())
     *             .clusterName(testCloudBackupSnapshotRestoreJob.clusterName())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudBackupSnapshotRestoreJobsInvokeResult> getCloudBackupSnapshotRestoreJobs(GetCloudBackupSnapshotRestoreJobsArgs args) {
        return getCloudBackupSnapshotRestoreJobs(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotRestoreJobs` provides a Cloud Backup Snapshot Restore Jobs datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshot;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshot = new CloudBackupSnapshot(&#34;testCloudBackupSnapshot&#34;, CloudBackupSnapshotArgs.builder()        
     *             .projectId(&#34;5cf5a45a9ccf6400e60981b6&#34;)
     *             .clusterName(&#34;MyCluster&#34;)
     *             .description(&#34;MyDescription&#34;)
     *             .retentionInDays(1)
     *             .build());
     * 
     *         var testCloudBackupSnapshotRestoreJob = new CloudBackupSnapshotRestoreJob(&#34;testCloudBackupSnapshotRestoreJob&#34;, CloudBackupSnapshotRestoreJobArgs.builder()        
     *             .projectId(&#34;5cf5a45a9ccf6400e60981b6&#34;)
     *             .clusterName(&#34;MyCluster&#34;)
     *             .snapshotId(testCloudBackupSnapshot.id())
     *             .deliveryTypeConfig(CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs.builder()
     *                 .automated(true)
     *                 .targetClusterName(&#34;MyCluster&#34;)
     *                 .targetProjectId(&#34;5cf5a45a9ccf6400e60981b6&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var testCloudBackupSnapshotRestoreJobs = MongodbatlasFunctions.getCloudBackupSnapshotRestoreJobs(GetCloudBackupSnapshotRestoreJobsArgs.builder()
     *             .projectId(testCloudBackupSnapshotRestoreJob.projectId())
     *             .clusterName(testCloudBackupSnapshotRestoreJob.clusterName())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotRestoreJobsInvokeResult> getCloudBackupSnapshotRestoreJobsPlain(GetCloudBackupSnapshotRestoreJobsPlainArgs args) {
        return getCloudBackupSnapshotRestoreJobsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotRestoreJobs` provides a Cloud Backup Snapshot Restore Jobs datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshot;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshot = new CloudBackupSnapshot(&#34;testCloudBackupSnapshot&#34;, CloudBackupSnapshotArgs.builder()        
     *             .projectId(&#34;5cf5a45a9ccf6400e60981b6&#34;)
     *             .clusterName(&#34;MyCluster&#34;)
     *             .description(&#34;MyDescription&#34;)
     *             .retentionInDays(1)
     *             .build());
     * 
     *         var testCloudBackupSnapshotRestoreJob = new CloudBackupSnapshotRestoreJob(&#34;testCloudBackupSnapshotRestoreJob&#34;, CloudBackupSnapshotRestoreJobArgs.builder()        
     *             .projectId(&#34;5cf5a45a9ccf6400e60981b6&#34;)
     *             .clusterName(&#34;MyCluster&#34;)
     *             .snapshotId(testCloudBackupSnapshot.id())
     *             .deliveryTypeConfig(CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs.builder()
     *                 .automated(true)
     *                 .targetClusterName(&#34;MyCluster&#34;)
     *                 .targetProjectId(&#34;5cf5a45a9ccf6400e60981b6&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var testCloudBackupSnapshotRestoreJobs = MongodbatlasFunctions.getCloudBackupSnapshotRestoreJobs(GetCloudBackupSnapshotRestoreJobsArgs.builder()
     *             .projectId(testCloudBackupSnapshotRestoreJob.projectId())
     *             .clusterName(testCloudBackupSnapshotRestoreJob.clusterName())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudBackupSnapshotRestoreJobsInvokeResult> getCloudBackupSnapshotRestoreJobs(GetCloudBackupSnapshotRestoreJobsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshotRestoreJobs:getCloudBackupSnapshotRestoreJobs", TypeShape.of(GetCloudBackupSnapshotRestoreJobsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotRestoreJobs` provides a Cloud Backup Snapshot Restore Jobs datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshot;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshot = new CloudBackupSnapshot(&#34;testCloudBackupSnapshot&#34;, CloudBackupSnapshotArgs.builder()        
     *             .projectId(&#34;5cf5a45a9ccf6400e60981b6&#34;)
     *             .clusterName(&#34;MyCluster&#34;)
     *             .description(&#34;MyDescription&#34;)
     *             .retentionInDays(1)
     *             .build());
     * 
     *         var testCloudBackupSnapshotRestoreJob = new CloudBackupSnapshotRestoreJob(&#34;testCloudBackupSnapshotRestoreJob&#34;, CloudBackupSnapshotRestoreJobArgs.builder()        
     *             .projectId(&#34;5cf5a45a9ccf6400e60981b6&#34;)
     *             .clusterName(&#34;MyCluster&#34;)
     *             .snapshotId(testCloudBackupSnapshot.id())
     *             .deliveryTypeConfig(CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs.builder()
     *                 .automated(true)
     *                 .targetClusterName(&#34;MyCluster&#34;)
     *                 .targetProjectId(&#34;5cf5a45a9ccf6400e60981b6&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var testCloudBackupSnapshotRestoreJobs = MongodbatlasFunctions.getCloudBackupSnapshotRestoreJobs(GetCloudBackupSnapshotRestoreJobsArgs.builder()
     *             .projectId(testCloudBackupSnapshotRestoreJob.projectId())
     *             .clusterName(testCloudBackupSnapshotRestoreJob.clusterName())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotRestoreJobsInvokeResult> getCloudBackupSnapshotRestoreJobsPlain(GetCloudBackupSnapshotRestoreJobsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshotRestoreJobs:getCloudBackupSnapshotRestoreJobs", TypeShape.of(GetCloudBackupSnapshotRestoreJobsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetCloudBackupSnapshotsInvokeResult> getCloudBackupSnapshots(GetCloudBackupSnapshotsArgs args) {
        return getCloudBackupSnapshots(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotsInvokeResult> getCloudBackupSnapshotsPlain(GetCloudBackupSnapshotsPlainArgs args) {
        return getCloudBackupSnapshotsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetCloudBackupSnapshotsInvokeResult> getCloudBackupSnapshots(GetCloudBackupSnapshotsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshots:getCloudBackupSnapshots", TypeShape.of(GetCloudBackupSnapshotsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotsInvokeResult> getCloudBackupSnapshotsPlain(GetCloudBackupSnapshotsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshots:getCloudBackupSnapshots", TypeShape.of(GetCloudBackupSnapshotsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * **WARNING:** The data source `mongodbatlas.CloudProviderAccess` is deprecated and will be removed in version v1.14.0, use the data source `mongodbatlas.CloudProviderAccessSetup` instead.
     * 
     * `mongodbatlas.CloudProviderAccess` allows you to get the list of cloud provider access roles, currently only AWS and Azure is supported.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccess;
     * import com.pulumi.mongodbatlas.CloudProviderAccessArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccess(&#34;testRole&#34;, CloudProviderAccessArgs.builder()        
     *             .projectId(&#34;64259ee860c43338194b0f8e&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .build());
     * 
     *         final var all = MongodbatlasFunctions.getCloudProviderAccess(GetCloudProviderAccessArgs.builder()
     *             .projectId(testRole.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudProviderAccessResult> getCloudProviderAccess(GetCloudProviderAccessArgs args) {
        return getCloudProviderAccess(args, InvokeOptions.Empty);
    }
    /**
     * **WARNING:** The data source `mongodbatlas.CloudProviderAccess` is deprecated and will be removed in version v1.14.0, use the data source `mongodbatlas.CloudProviderAccessSetup` instead.
     * 
     * `mongodbatlas.CloudProviderAccess` allows you to get the list of cloud provider access roles, currently only AWS and Azure is supported.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccess;
     * import com.pulumi.mongodbatlas.CloudProviderAccessArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccess(&#34;testRole&#34;, CloudProviderAccessArgs.builder()        
     *             .projectId(&#34;64259ee860c43338194b0f8e&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .build());
     * 
     *         final var all = MongodbatlasFunctions.getCloudProviderAccess(GetCloudProviderAccessArgs.builder()
     *             .projectId(testRole.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudProviderAccessResult> getCloudProviderAccessPlain(GetCloudProviderAccessPlainArgs args) {
        return getCloudProviderAccessPlain(args, InvokeOptions.Empty);
    }
    /**
     * **WARNING:** The data source `mongodbatlas.CloudProviderAccess` is deprecated and will be removed in version v1.14.0, use the data source `mongodbatlas.CloudProviderAccessSetup` instead.
     * 
     * `mongodbatlas.CloudProviderAccess` allows you to get the list of cloud provider access roles, currently only AWS and Azure is supported.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccess;
     * import com.pulumi.mongodbatlas.CloudProviderAccessArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccess(&#34;testRole&#34;, CloudProviderAccessArgs.builder()        
     *             .projectId(&#34;64259ee860c43338194b0f8e&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .build());
     * 
     *         final var all = MongodbatlasFunctions.getCloudProviderAccess(GetCloudProviderAccessArgs.builder()
     *             .projectId(testRole.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudProviderAccessResult> getCloudProviderAccess(GetCloudProviderAccessArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudProviderAccess:getCloudProviderAccess", TypeShape.of(GetCloudProviderAccessResult.class), args, Utilities.withVersion(options));
    }
    /**
     * **WARNING:** The data source `mongodbatlas.CloudProviderAccess` is deprecated and will be removed in version v1.14.0, use the data source `mongodbatlas.CloudProviderAccessSetup` instead.
     * 
     * `mongodbatlas.CloudProviderAccess` allows you to get the list of cloud provider access roles, currently only AWS and Azure is supported.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccess;
     * import com.pulumi.mongodbatlas.CloudProviderAccessArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccess(&#34;testRole&#34;, CloudProviderAccessArgs.builder()        
     *             .projectId(&#34;64259ee860c43338194b0f8e&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .build());
     * 
     *         final var all = MongodbatlasFunctions.getCloudProviderAccess(GetCloudProviderAccessArgs.builder()
     *             .projectId(testRole.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudProviderAccessResult> getCloudProviderAccessPlain(GetCloudProviderAccessPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudProviderAccess:getCloudProviderAccess", TypeShape.of(GetCloudProviderAccessResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudProviderAccess` allows you to get a single role for a provider access role setup, currently only AWS and Azure are supported.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ### With AWS
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup(&#34;testRole&#34;, CloudProviderAccessSetupArgs.builder()        
     *             .projectId(&#34;64259ee860c43338194b0f8e&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### With AZURE
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessSetupAzureConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup(&#34;testRole&#34;, CloudProviderAccessSetupArgs.builder()        
     *             .projectId(&#34;64259ee860c43338194b0f8e&#34;)
     *             .providerName(&#34;AZURE&#34;)
     *             .azureConfigs(CloudProviderAccessSetupAzureConfigArgs.builder()
     *                 .atlasAzureAppId(&#34;9f2deb0d-be22-4524-a403-df531868bac0&#34;)
     *                 .servicePrincipalId(&#34;22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1&#34;)
     *                 .tenantId(&#34;91402384-d71e-22f5-22dd-759e272cdc1c&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudProviderAccessSetupResult> getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs args) {
        return getCloudProviderAccessSetup(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudProviderAccess` allows you to get a single role for a provider access role setup, currently only AWS and Azure are supported.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ### With AWS
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup(&#34;testRole&#34;, CloudProviderAccessSetupArgs.builder()        
     *             .projectId(&#34;64259ee860c43338194b0f8e&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### With AZURE
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessSetupAzureConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup(&#34;testRole&#34;, CloudProviderAccessSetupArgs.builder()        
     *             .projectId(&#34;64259ee860c43338194b0f8e&#34;)
     *             .providerName(&#34;AZURE&#34;)
     *             .azureConfigs(CloudProviderAccessSetupAzureConfigArgs.builder()
     *                 .atlasAzureAppId(&#34;9f2deb0d-be22-4524-a403-df531868bac0&#34;)
     *                 .servicePrincipalId(&#34;22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1&#34;)
     *                 .tenantId(&#34;91402384-d71e-22f5-22dd-759e272cdc1c&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudProviderAccessSetupResult> getCloudProviderAccessSetupPlain(GetCloudProviderAccessSetupPlainArgs args) {
        return getCloudProviderAccessSetupPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudProviderAccess` allows you to get a single role for a provider access role setup, currently only AWS and Azure are supported.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ### With AWS
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup(&#34;testRole&#34;, CloudProviderAccessSetupArgs.builder()        
     *             .projectId(&#34;64259ee860c43338194b0f8e&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### With AZURE
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessSetupAzureConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup(&#34;testRole&#34;, CloudProviderAccessSetupArgs.builder()        
     *             .projectId(&#34;64259ee860c43338194b0f8e&#34;)
     *             .providerName(&#34;AZURE&#34;)
     *             .azureConfigs(CloudProviderAccessSetupAzureConfigArgs.builder()
     *                 .atlasAzureAppId(&#34;9f2deb0d-be22-4524-a403-df531868bac0&#34;)
     *                 .servicePrincipalId(&#34;22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1&#34;)
     *                 .tenantId(&#34;91402384-d71e-22f5-22dd-759e272cdc1c&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCloudProviderAccessSetupResult> getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudProviderAccessSetup:getCloudProviderAccessSetup", TypeShape.of(GetCloudProviderAccessSetupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudProviderAccess` allows you to get a single role for a provider access role setup, currently only AWS and Azure are supported.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ### With AWS
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup(&#34;testRole&#34;, CloudProviderAccessSetupArgs.builder()        
     *             .projectId(&#34;64259ee860c43338194b0f8e&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### With AZURE
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessSetupAzureConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup(&#34;testRole&#34;, CloudProviderAccessSetupArgs.builder()        
     *             .projectId(&#34;64259ee860c43338194b0f8e&#34;)
     *             .providerName(&#34;AZURE&#34;)
     *             .azureConfigs(CloudProviderAccessSetupAzureConfigArgs.builder()
     *                 .atlasAzureAppId(&#34;9f2deb0d-be22-4524-a403-df531868bac0&#34;)
     *                 .servicePrincipalId(&#34;22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1&#34;)
     *                 .tenantId(&#34;91402384-d71e-22f5-22dd-759e272cdc1c&#34;)
     *                 .build())
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCloudProviderAccessSetupResult> getCloudProviderAccessSetupPlain(GetCloudProviderAccessSetupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudProviderAccessSetup:getCloudProviderAccessSetup", TypeShape.of(GetCloudProviderAccessSetupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Cluster` describes a Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     */
    public static Output<GetClusterResult> getCluster(GetClusterArgs args) {
        return getCluster(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Cluster` describes a Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     */
    public static CompletableFuture<GetClusterResult> getClusterPlain(GetClusterPlainArgs args) {
        return getClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Cluster` describes a Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     */
    public static Output<GetClusterResult> getCluster(GetClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCluster:getCluster", TypeShape.of(GetClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Cluster` describes a Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     */
    public static CompletableFuture<GetClusterResult> getClusterPlain(GetClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCluster:getCluster", TypeShape.of(GetClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ### S
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClusterOutageSimulationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var outageSimulation = MongodbatlasFunctions.getClusterOutageSimulation(GetClusterOutageSimulationArgs.builder()
     *             .clusterName(&#34;Cluster0&#34;)
     *             .projectId(&#34;64707f06c519c20c3a2b1b03&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetClusterOutageSimulationResult> getClusterOutageSimulation(GetClusterOutageSimulationArgs args) {
        return getClusterOutageSimulation(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ### S
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClusterOutageSimulationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var outageSimulation = MongodbatlasFunctions.getClusterOutageSimulation(GetClusterOutageSimulationArgs.builder()
     *             .clusterName(&#34;Cluster0&#34;)
     *             .projectId(&#34;64707f06c519c20c3a2b1b03&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetClusterOutageSimulationResult> getClusterOutageSimulationPlain(GetClusterOutageSimulationPlainArgs args) {
        return getClusterOutageSimulationPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * ### S
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClusterOutageSimulationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var outageSimulation = MongodbatlasFunctions.getClusterOutageSimulation(GetClusterOutageSimulationArgs.builder()
     *             .clusterName(&#34;Cluster0&#34;)
     *             .projectId(&#34;64707f06c519c20c3a2b1b03&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetClusterOutageSimulationResult> getClusterOutageSimulation(GetClusterOutageSimulationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getClusterOutageSimulation:getClusterOutageSimulation", TypeShape.of(GetClusterOutageSimulationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * ### S
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClusterOutageSimulationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var outageSimulation = MongodbatlasFunctions.getClusterOutageSimulation(GetClusterOutageSimulationArgs.builder()
     *             .clusterName(&#34;Cluster0&#34;)
     *             .projectId(&#34;64707f06c519c20c3a2b1b03&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetClusterOutageSimulationResult> getClusterOutageSimulationPlain(GetClusterOutageSimulationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getClusterOutageSimulation:getClusterOutageSimulation", TypeShape.of(GetClusterOutageSimulationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Cluster` describes all Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster(&#34;testCluster&#34;, ClusterArgs.builder()        
     *             .projectId(&#34;&lt;YOUR-PROJECT-ID&gt;&#34;)
     *             .clusterType(&#34;REPLICASET&#34;)
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .numShards(1)
     *                 .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                     .regionName(&#34;US_EAST_1&#34;)
     *                     .electableNodes(3)
     *                     .priority(7)
     *                     .readOnlyNodes(0)
     *                     .build())
     *                 .build())
     *             .cloudBackup(true)
     *             .autoScalingDiskGbEnabled(true)
     *             .providerName(&#34;AWS&#34;)
     *             .providerInstanceSizeName(&#34;M40&#34;)
     *             .build());
     * 
     *         final var testClusters = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(testCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetClustersInvokeResult> getClusters(GetClustersArgs args) {
        return getClusters(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Cluster` describes all Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster(&#34;testCluster&#34;, ClusterArgs.builder()        
     *             .projectId(&#34;&lt;YOUR-PROJECT-ID&gt;&#34;)
     *             .clusterType(&#34;REPLICASET&#34;)
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .numShards(1)
     *                 .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                     .regionName(&#34;US_EAST_1&#34;)
     *                     .electableNodes(3)
     *                     .priority(7)
     *                     .readOnlyNodes(0)
     *                     .build())
     *                 .build())
     *             .cloudBackup(true)
     *             .autoScalingDiskGbEnabled(true)
     *             .providerName(&#34;AWS&#34;)
     *             .providerInstanceSizeName(&#34;M40&#34;)
     *             .build());
     * 
     *         final var testClusters = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(testCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetClustersInvokeResult> getClustersPlain(GetClustersPlainArgs args) {
        return getClustersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Cluster` describes all Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster(&#34;testCluster&#34;, ClusterArgs.builder()        
     *             .projectId(&#34;&lt;YOUR-PROJECT-ID&gt;&#34;)
     *             .clusterType(&#34;REPLICASET&#34;)
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .numShards(1)
     *                 .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                     .regionName(&#34;US_EAST_1&#34;)
     *                     .electableNodes(3)
     *                     .priority(7)
     *                     .readOnlyNodes(0)
     *                     .build())
     *                 .build())
     *             .cloudBackup(true)
     *             .autoScalingDiskGbEnabled(true)
     *             .providerName(&#34;AWS&#34;)
     *             .providerInstanceSizeName(&#34;M40&#34;)
     *             .build());
     * 
     *         final var testClusters = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(testCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetClustersInvokeResult> getClusters(GetClustersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getClusters:getClusters", TypeShape.of(GetClustersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Cluster` describes all Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster(&#34;testCluster&#34;, ClusterArgs.builder()        
     *             .projectId(&#34;&lt;YOUR-PROJECT-ID&gt;&#34;)
     *             .clusterType(&#34;REPLICASET&#34;)
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .numShards(1)
     *                 .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                     .regionName(&#34;US_EAST_1&#34;)
     *                     .electableNodes(3)
     *                     .priority(7)
     *                     .readOnlyNodes(0)
     *                     .build())
     *                 .build())
     *             .cloudBackup(true)
     *             .autoScalingDiskGbEnabled(true)
     *             .providerName(&#34;AWS&#34;)
     *             .providerInstanceSizeName(&#34;M40&#34;)
     *             .build());
     * 
     *         final var testClusters = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(testCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetClustersInvokeResult> getClustersPlain(GetClustersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getClusters:getClusters", TypeShape.of(GetClustersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CustomDbRole` describe a Custom DB Role. This represents a custom db role.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CustomDbRole;
     * import com.pulumi.mongodbatlas.CustomDbRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.CustomDbRoleActionArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDbRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CustomDbRole(&#34;testRole&#34;, CustomDbRoleArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .roleName(&#34;myCustomRole&#34;)
     *             .actions(            
     *                 CustomDbRoleActionArgs.builder()
     *                     .action(&#34;UPDATE&#34;)
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName(&#34;&#34;)
     *                         .databaseName(&#34;anyDatabase&#34;)
     *                         .build())
     *                     .build(),
     *                 CustomDbRoleActionArgs.builder()
     *                     .action(&#34;INSERT&#34;)
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName(&#34;&#34;)
     *                         .databaseName(&#34;anyDatabase&#34;)
     *                         .build())
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCustomDbRole(GetCustomDbRoleArgs.builder()
     *             .projectId(testRole.projectId())
     *             .roleName(testRole.roleName())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCustomDbRoleResult> getCustomDbRole(GetCustomDbRoleArgs args) {
        return getCustomDbRole(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CustomDbRole` describe a Custom DB Role. This represents a custom db role.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CustomDbRole;
     * import com.pulumi.mongodbatlas.CustomDbRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.CustomDbRoleActionArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDbRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CustomDbRole(&#34;testRole&#34;, CustomDbRoleArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .roleName(&#34;myCustomRole&#34;)
     *             .actions(            
     *                 CustomDbRoleActionArgs.builder()
     *                     .action(&#34;UPDATE&#34;)
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName(&#34;&#34;)
     *                         .databaseName(&#34;anyDatabase&#34;)
     *                         .build())
     *                     .build(),
     *                 CustomDbRoleActionArgs.builder()
     *                     .action(&#34;INSERT&#34;)
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName(&#34;&#34;)
     *                         .databaseName(&#34;anyDatabase&#34;)
     *                         .build())
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCustomDbRole(GetCustomDbRoleArgs.builder()
     *             .projectId(testRole.projectId())
     *             .roleName(testRole.roleName())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCustomDbRoleResult> getCustomDbRolePlain(GetCustomDbRolePlainArgs args) {
        return getCustomDbRolePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CustomDbRole` describe a Custom DB Role. This represents a custom db role.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CustomDbRole;
     * import com.pulumi.mongodbatlas.CustomDbRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.CustomDbRoleActionArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDbRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CustomDbRole(&#34;testRole&#34;, CustomDbRoleArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .roleName(&#34;myCustomRole&#34;)
     *             .actions(            
     *                 CustomDbRoleActionArgs.builder()
     *                     .action(&#34;UPDATE&#34;)
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName(&#34;&#34;)
     *                         .databaseName(&#34;anyDatabase&#34;)
     *                         .build())
     *                     .build(),
     *                 CustomDbRoleActionArgs.builder()
     *                     .action(&#34;INSERT&#34;)
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName(&#34;&#34;)
     *                         .databaseName(&#34;anyDatabase&#34;)
     *                         .build())
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCustomDbRole(GetCustomDbRoleArgs.builder()
     *             .projectId(testRole.projectId())
     *             .roleName(testRole.roleName())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCustomDbRoleResult> getCustomDbRole(GetCustomDbRoleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCustomDbRole:getCustomDbRole", TypeShape.of(GetCustomDbRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CustomDbRole` describe a Custom DB Role. This represents a custom db role.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CustomDbRole;
     * import com.pulumi.mongodbatlas.CustomDbRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.CustomDbRoleActionArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDbRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CustomDbRole(&#34;testRole&#34;, CustomDbRoleArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .roleName(&#34;myCustomRole&#34;)
     *             .actions(            
     *                 CustomDbRoleActionArgs.builder()
     *                     .action(&#34;UPDATE&#34;)
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName(&#34;&#34;)
     *                         .databaseName(&#34;anyDatabase&#34;)
     *                         .build())
     *                     .build(),
     *                 CustomDbRoleActionArgs.builder()
     *                     .action(&#34;INSERT&#34;)
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName(&#34;&#34;)
     *                         .databaseName(&#34;anyDatabase&#34;)
     *                         .build())
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCustomDbRole(GetCustomDbRoleArgs.builder()
     *             .projectId(testRole.projectId())
     *             .roleName(testRole.roleName())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCustomDbRoleResult> getCustomDbRolePlain(GetCustomDbRolePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCustomDbRole:getCustomDbRole", TypeShape.of(GetCustomDbRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCustomDbRoles` describe all Custom DB Roles. This represents a custom db roles.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDbRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser(&#34;testDatabaseUser&#34;, DatabaseUserArgs.builder()        
     *             .username(&#34;test-acc-username&#34;)
     *             .password(&#34;test-acc-password&#34;)
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .databaseName(&#34;admin&#34;)
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;readWrite&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;atlasAdmin&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var testCustomDbRoles = MongodbatlasFunctions.getCustomDbRoles(GetCustomDbRolesArgs.builder()
     *             .projectId(mongodbatlas_custom_db_role.test().project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCustomDbRolesInvokeResult> getCustomDbRoles(GetCustomDbRolesArgs args) {
        return getCustomDbRoles(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCustomDbRoles` describe all Custom DB Roles. This represents a custom db roles.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDbRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser(&#34;testDatabaseUser&#34;, DatabaseUserArgs.builder()        
     *             .username(&#34;test-acc-username&#34;)
     *             .password(&#34;test-acc-password&#34;)
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .databaseName(&#34;admin&#34;)
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;readWrite&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;atlasAdmin&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var testCustomDbRoles = MongodbatlasFunctions.getCustomDbRoles(GetCustomDbRolesArgs.builder()
     *             .projectId(mongodbatlas_custom_db_role.test().project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCustomDbRolesInvokeResult> getCustomDbRolesPlain(GetCustomDbRolesPlainArgs args) {
        return getCustomDbRolesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCustomDbRoles` describe all Custom DB Roles. This represents a custom db roles.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDbRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser(&#34;testDatabaseUser&#34;, DatabaseUserArgs.builder()        
     *             .username(&#34;test-acc-username&#34;)
     *             .password(&#34;test-acc-password&#34;)
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .databaseName(&#34;admin&#34;)
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;readWrite&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;atlasAdmin&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var testCustomDbRoles = MongodbatlasFunctions.getCustomDbRoles(GetCustomDbRolesArgs.builder()
     *             .projectId(mongodbatlas_custom_db_role.test().project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetCustomDbRolesInvokeResult> getCustomDbRoles(GetCustomDbRolesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCustomDbRoles:getCustomDbRoles", TypeShape.of(GetCustomDbRolesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCustomDbRoles` describe all Custom DB Roles. This represents a custom db roles.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDbRolesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser(&#34;testDatabaseUser&#34;, DatabaseUserArgs.builder()        
     *             .username(&#34;test-acc-username&#34;)
     *             .password(&#34;test-acc-password&#34;)
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .databaseName(&#34;admin&#34;)
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;readWrite&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;atlasAdmin&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var testCustomDbRoles = MongodbatlasFunctions.getCustomDbRoles(GetCustomDbRolesArgs.builder()
     *             .projectId(mongodbatlas_custom_db_role.test().project_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetCustomDbRolesInvokeResult> getCustomDbRolesPlain(GetCustomDbRolesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCustomDbRoles:getCustomDbRoles", TypeShape.of(GetCustomDbRolesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CustomDnsConfigurationClusterAws` describes a Custom DNS Configuration for Atlas Clusters on AWS.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static Output<GetCustomDnsConfigurationClusterAwsResult> getCustomDnsConfigurationClusterAws(GetCustomDnsConfigurationClusterAwsArgs args) {
        return getCustomDnsConfigurationClusterAws(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CustomDnsConfigurationClusterAws` describes a Custom DNS Configuration for Atlas Clusters on AWS.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static CompletableFuture<GetCustomDnsConfigurationClusterAwsResult> getCustomDnsConfigurationClusterAwsPlain(GetCustomDnsConfigurationClusterAwsPlainArgs args) {
        return getCustomDnsConfigurationClusterAwsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CustomDnsConfigurationClusterAws` describes a Custom DNS Configuration for Atlas Clusters on AWS.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static Output<GetCustomDnsConfigurationClusterAwsResult> getCustomDnsConfigurationClusterAws(GetCustomDnsConfigurationClusterAwsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCustomDnsConfigurationClusterAws:getCustomDnsConfigurationClusterAws", TypeShape.of(GetCustomDnsConfigurationClusterAwsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CustomDnsConfigurationClusterAws` describes a Custom DNS Configuration for Atlas Clusters on AWS.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static CompletableFuture<GetCustomDnsConfigurationClusterAwsResult> getCustomDnsConfigurationClusterAwsPlain(GetCustomDnsConfigurationClusterAwsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCustomDnsConfigurationClusterAws:getCustomDnsConfigurationClusterAws", TypeShape.of(GetCustomDnsConfigurationClusterAwsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.DataLakePipeline` describes a Data Lake Pipeline.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDataLakePipelineResult> getDataLakePipeline(GetDataLakePipelineArgs args) {
        return getDataLakePipeline(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.DataLakePipeline` describes a Data Lake Pipeline.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDataLakePipelineResult> getDataLakePipelinePlain(GetDataLakePipelinePlainArgs args) {
        return getDataLakePipelinePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.DataLakePipeline` describes a Data Lake Pipeline.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDataLakePipelineResult> getDataLakePipeline(GetDataLakePipelineArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getDataLakePipeline:getDataLakePipeline", TypeShape.of(GetDataLakePipelineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.DataLakePipeline` describes a Data Lake Pipeline.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDataLakePipelineResult> getDataLakePipelinePlain(GetDataLakePipelinePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getDataLakePipeline:getDataLakePipeline", TypeShape.of(GetDataLakePipelineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe a Data Lake Pipeline Run.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline(&#34;pipeline&#34;, DataLakePipelineArgs.builder()        
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type(&#34;DLS&#34;)
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name(&#34;access&#34;)
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type(&#34;ON_DEMAND_CPS&#34;)
     *                 .clusterName(mongodbatlas_cluster.clusterTest().name())
     *                 .databaseName(&#34;sample_airbnb&#34;)
     *                 .collectionName(&#34;listingsAndReviews&#34;)
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test22&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var pipelineRun = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .name(pipeline.name())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRun(GetDataLakePipelineRunArgs.builder()
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .pipelineName(pipeline.name())
     *             .pipelineRunId(mongodbatlas_data_lake_pipeline_runs.pipeline_run().results()[0].pipeline_run_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDataLakePipelineRunResult> getDataLakePipelineRun(GetDataLakePipelineRunArgs args) {
        return getDataLakePipelineRun(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe a Data Lake Pipeline Run.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline(&#34;pipeline&#34;, DataLakePipelineArgs.builder()        
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type(&#34;DLS&#34;)
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name(&#34;access&#34;)
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type(&#34;ON_DEMAND_CPS&#34;)
     *                 .clusterName(mongodbatlas_cluster.clusterTest().name())
     *                 .databaseName(&#34;sample_airbnb&#34;)
     *                 .collectionName(&#34;listingsAndReviews&#34;)
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test22&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var pipelineRun = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .name(pipeline.name())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRun(GetDataLakePipelineRunArgs.builder()
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .pipelineName(pipeline.name())
     *             .pipelineRunId(mongodbatlas_data_lake_pipeline_runs.pipeline_run().results()[0].pipeline_run_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDataLakePipelineRunResult> getDataLakePipelineRunPlain(GetDataLakePipelineRunPlainArgs args) {
        return getDataLakePipelineRunPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe a Data Lake Pipeline Run.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline(&#34;pipeline&#34;, DataLakePipelineArgs.builder()        
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type(&#34;DLS&#34;)
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name(&#34;access&#34;)
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type(&#34;ON_DEMAND_CPS&#34;)
     *                 .clusterName(mongodbatlas_cluster.clusterTest().name())
     *                 .databaseName(&#34;sample_airbnb&#34;)
     *                 .collectionName(&#34;listingsAndReviews&#34;)
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test22&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var pipelineRun = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .name(pipeline.name())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRun(GetDataLakePipelineRunArgs.builder()
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .pipelineName(pipeline.name())
     *             .pipelineRunId(mongodbatlas_data_lake_pipeline_runs.pipeline_run().results()[0].pipeline_run_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDataLakePipelineRunResult> getDataLakePipelineRun(GetDataLakePipelineRunArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getDataLakePipelineRun:getDataLakePipelineRun", TypeShape.of(GetDataLakePipelineRunResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe a Data Lake Pipeline Run.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline(&#34;pipeline&#34;, DataLakePipelineArgs.builder()        
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type(&#34;DLS&#34;)
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name(&#34;access&#34;)
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type(&#34;ON_DEMAND_CPS&#34;)
     *                 .clusterName(mongodbatlas_cluster.clusterTest().name())
     *                 .databaseName(&#34;sample_airbnb&#34;)
     *                 .collectionName(&#34;listingsAndReviews&#34;)
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test22&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var pipelineRun = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .name(pipeline.name())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRun(GetDataLakePipelineRunArgs.builder()
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .pipelineName(pipeline.name())
     *             .pipelineRunId(mongodbatlas_data_lake_pipeline_runs.pipeline_run().results()[0].pipeline_run_id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDataLakePipelineRunResult> getDataLakePipelineRunPlain(GetDataLakePipelineRunPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getDataLakePipelineRun:getDataLakePipelineRun", TypeShape.of(GetDataLakePipelineRunResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe Data Lake Pipeline Runs.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline(&#34;pipeline&#34;, DataLakePipelineArgs.builder()        
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type(&#34;DLS&#34;)
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name(&#34;access&#34;)
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type(&#34;ON_DEMAND_CPS&#34;)
     *                 .clusterName(mongodbatlas_cluster.clusterTest().name())
     *                 .databaseName(&#34;sample_airbnb&#34;)
     *                 .collectionName(&#34;listingsAndReviews&#34;)
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test22&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .pipelineName(pipeline.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDataLakePipelineRunsInvokeResult> getDataLakePipelineRuns(GetDataLakePipelineRunsArgs args) {
        return getDataLakePipelineRuns(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe Data Lake Pipeline Runs.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline(&#34;pipeline&#34;, DataLakePipelineArgs.builder()        
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type(&#34;DLS&#34;)
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name(&#34;access&#34;)
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type(&#34;ON_DEMAND_CPS&#34;)
     *                 .clusterName(mongodbatlas_cluster.clusterTest().name())
     *                 .databaseName(&#34;sample_airbnb&#34;)
     *                 .collectionName(&#34;listingsAndReviews&#34;)
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test22&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .pipelineName(pipeline.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDataLakePipelineRunsInvokeResult> getDataLakePipelineRunsPlain(GetDataLakePipelineRunsPlainArgs args) {
        return getDataLakePipelineRunsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe Data Lake Pipeline Runs.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline(&#34;pipeline&#34;, DataLakePipelineArgs.builder()        
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type(&#34;DLS&#34;)
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name(&#34;access&#34;)
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type(&#34;ON_DEMAND_CPS&#34;)
     *                 .clusterName(mongodbatlas_cluster.clusterTest().name())
     *                 .databaseName(&#34;sample_airbnb&#34;)
     *                 .collectionName(&#34;listingsAndReviews&#34;)
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test22&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .pipelineName(pipeline.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetDataLakePipelineRunsInvokeResult> getDataLakePipelineRuns(GetDataLakePipelineRunsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getDataLakePipelineRuns:getDataLakePipelineRuns", TypeShape.of(GetDataLakePipelineRunsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe Data Lake Pipeline Runs.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline(&#34;pipeline&#34;, DataLakePipelineArgs.builder()        
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type(&#34;DLS&#34;)
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name(&#34;access&#34;)
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type(&#34;ON_DEMAND_CPS&#34;)
     *                 .clusterName(mongodbatlas_cluster.clusterTest().name())
     *                 .databaseName(&#34;sample_airbnb&#34;)
     *                 .collectionName(&#34;listingsAndReviews&#34;)
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field(&#34;test22&#34;)
     *                     .type(&#34;EXCLUDE&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(mongodbatlas_project.projectTest().project_id())
     *             .pipelineName(pipeline.name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetDataLakePipelineRunsInvokeResult> getDataLakePipelineRunsPlain(GetDataLakePipelineRunsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getDataLakePipelineRuns:getDataLakePipelineRuns", TypeShape.of(GetDataLakePipelineRunsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDataLakePipelines` describes Data Lake Pipelines.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDataLakePipelinesInvokeResult> getDataLakePipelines(GetDataLakePipelinesArgs args) {
        return getDataLakePipelines(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDataLakePipelines` describes Data Lake Pipelines.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDataLakePipelinesInvokeResult> getDataLakePipelinesPlain(GetDataLakePipelinesPlainArgs args) {
        return getDataLakePipelinesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDataLakePipelines` describes Data Lake Pipelines.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDataLakePipelinesInvokeResult> getDataLakePipelines(GetDataLakePipelinesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getDataLakePipelines:getDataLakePipelines", TypeShape.of(GetDataLakePipelinesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDataLakePipelines` describes Data Lake Pipelines.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDataLakePipelinesInvokeResult> getDataLakePipelinesPlain(GetDataLakePipelinesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getDataLakePipelines:getDataLakePipelines", TypeShape.of(GetDataLakePipelinesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.DatabaseUser` describe a Database User. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static Output<GetDatabaseUserResult> getDatabaseUser(GetDatabaseUserArgs args) {
        return getDatabaseUser(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.DatabaseUser` describe a Database User. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static CompletableFuture<GetDatabaseUserResult> getDatabaseUserPlain(GetDatabaseUserPlainArgs args) {
        return getDatabaseUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.DatabaseUser` describe a Database User. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static Output<GetDatabaseUserResult> getDatabaseUser(GetDatabaseUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getDatabaseUser:getDatabaseUser", TypeShape.of(GetDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.DatabaseUser` describe a Database User. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static CompletableFuture<GetDatabaseUserResult> getDatabaseUserPlain(GetDatabaseUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getDatabaseUser:getDatabaseUser", TypeShape.of(GetDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDatabaseUsers` describe all Database Users. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser(&#34;testDatabaseUser&#34;, DatabaseUserArgs.builder()        
     *             .username(&#34;test-acc-username&#34;)
     *             .password(&#34;test-acc-password&#34;)
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .authDatabaseName(&#34;admin&#34;)
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;readWrite&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;atlasAdmin&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build())
     *             .labels(            
     *                 DatabaseUserLabelArgs.builder()
     *                     .key(&#34;key 1&#34;)
     *                     .value(&#34;value 1&#34;)
     *                     .build(),
     *                 DatabaseUserLabelArgs.builder()
     *                     .key(&#34;key 2&#34;)
     *                     .value(&#34;value 2&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var testDatabaseUsers = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId(testDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * **Example of usage with a OIDC federated authentication user**
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser(&#34;testDatabaseUser&#34;, DatabaseUserArgs.builder()        
     *             .authDatabaseName(&#34;admin&#34;)
     *             .oidcAuthType(&#34;IDP_GROUP&#34;)
     *             .projectId(&#34;6414908c207f4d22f4d8f232&#34;)
     *             .roles(DatabaseUserRoleArgs.builder()
     *                 .databaseName(&#34;admin&#34;)
     *                 .roleName(&#34;readWriteAnyDatabase&#34;)
     *                 .build())
     *             .username(&#34;64d613677e1ad50839cce4db/testUserOrGroup&#34;)
     *             .build());
     * 
     *         final var testDatabaseUsers = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId(&#34;6414908c207f4d22f4d8f232&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public static Output<GetDatabaseUsersInvokeResult> getDatabaseUsers(GetDatabaseUsersArgs args) {
        return getDatabaseUsers(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDatabaseUsers` describe all Database Users. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser(&#34;testDatabaseUser&#34;, DatabaseUserArgs.builder()        
     *             .username(&#34;test-acc-username&#34;)
     *             .password(&#34;test-acc-password&#34;)
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .authDatabaseName(&#34;admin&#34;)
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;readWrite&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;atlasAdmin&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build())
     *             .labels(            
     *                 DatabaseUserLabelArgs.builder()
     *                     .key(&#34;key 1&#34;)
     *                     .value(&#34;value 1&#34;)
     *                     .build(),
     *                 DatabaseUserLabelArgs.builder()
     *                     .key(&#34;key 2&#34;)
     *                     .value(&#34;value 2&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var testDatabaseUsers = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId(testDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * **Example of usage with a OIDC federated authentication user**
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser(&#34;testDatabaseUser&#34;, DatabaseUserArgs.builder()        
     *             .authDatabaseName(&#34;admin&#34;)
     *             .oidcAuthType(&#34;IDP_GROUP&#34;)
     *             .projectId(&#34;6414908c207f4d22f4d8f232&#34;)
     *             .roles(DatabaseUserRoleArgs.builder()
     *                 .databaseName(&#34;admin&#34;)
     *                 .roleName(&#34;readWriteAnyDatabase&#34;)
     *                 .build())
     *             .username(&#34;64d613677e1ad50839cce4db/testUserOrGroup&#34;)
     *             .build());
     * 
     *         final var testDatabaseUsers = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId(&#34;6414908c207f4d22f4d8f232&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public static CompletableFuture<GetDatabaseUsersInvokeResult> getDatabaseUsersPlain(GetDatabaseUsersPlainArgs args) {
        return getDatabaseUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDatabaseUsers` describe all Database Users. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser(&#34;testDatabaseUser&#34;, DatabaseUserArgs.builder()        
     *             .username(&#34;test-acc-username&#34;)
     *             .password(&#34;test-acc-password&#34;)
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .authDatabaseName(&#34;admin&#34;)
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;readWrite&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;atlasAdmin&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build())
     *             .labels(            
     *                 DatabaseUserLabelArgs.builder()
     *                     .key(&#34;key 1&#34;)
     *                     .value(&#34;value 1&#34;)
     *                     .build(),
     *                 DatabaseUserLabelArgs.builder()
     *                     .key(&#34;key 2&#34;)
     *                     .value(&#34;value 2&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var testDatabaseUsers = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId(testDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * **Example of usage with a OIDC federated authentication user**
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser(&#34;testDatabaseUser&#34;, DatabaseUserArgs.builder()        
     *             .authDatabaseName(&#34;admin&#34;)
     *             .oidcAuthType(&#34;IDP_GROUP&#34;)
     *             .projectId(&#34;6414908c207f4d22f4d8f232&#34;)
     *             .roles(DatabaseUserRoleArgs.builder()
     *                 .databaseName(&#34;admin&#34;)
     *                 .roleName(&#34;readWriteAnyDatabase&#34;)
     *                 .build())
     *             .username(&#34;64d613677e1ad50839cce4db/testUserOrGroup&#34;)
     *             .build());
     * 
     *         final var testDatabaseUsers = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId(&#34;6414908c207f4d22f4d8f232&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public static Output<GetDatabaseUsersInvokeResult> getDatabaseUsers(GetDatabaseUsersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getDatabaseUsers:getDatabaseUsers", TypeShape.of(GetDatabaseUsersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDatabaseUsers` describe all Database Users. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser(&#34;testDatabaseUser&#34;, DatabaseUserArgs.builder()        
     *             .username(&#34;test-acc-username&#34;)
     *             .password(&#34;test-acc-password&#34;)
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .authDatabaseName(&#34;admin&#34;)
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;readWrite&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName(&#34;atlasAdmin&#34;)
     *                     .databaseName(&#34;admin&#34;)
     *                     .build())
     *             .labels(            
     *                 DatabaseUserLabelArgs.builder()
     *                     .key(&#34;key 1&#34;)
     *                     .value(&#34;value 1&#34;)
     *                     .build(),
     *                 DatabaseUserLabelArgs.builder()
     *                     .key(&#34;key 2&#34;)
     *                     .value(&#34;value 2&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var testDatabaseUsers = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId(testDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * **Example of usage with a OIDC federated authentication user**
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser(&#34;testDatabaseUser&#34;, DatabaseUserArgs.builder()        
     *             .authDatabaseName(&#34;admin&#34;)
     *             .oidcAuthType(&#34;IDP_GROUP&#34;)
     *             .projectId(&#34;6414908c207f4d22f4d8f232&#34;)
     *             .roles(DatabaseUserRoleArgs.builder()
     *                 .databaseName(&#34;admin&#34;)
     *                 .roleName(&#34;readWriteAnyDatabase&#34;)
     *                 .build())
     *             .username(&#34;64d613677e1ad50839cce4db/testUserOrGroup&#34;)
     *             .build());
     * 
     *         final var testDatabaseUsers = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId(&#34;6414908c207f4d22f4d8f232&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public static CompletableFuture<GetDatabaseUsersInvokeResult> getDatabaseUsersPlain(GetDatabaseUsersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getDatabaseUsers:getDatabaseUsers", TypeShape.of(GetDatabaseUsersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.EventTrigger` describe an Event Trigger.
     * 
     */
    public static Output<GetEventTriggerResult> getEventTrigger(GetEventTriggerArgs args) {
        return getEventTrigger(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.EventTrigger` describe an Event Trigger.
     * 
     */
    public static CompletableFuture<GetEventTriggerResult> getEventTriggerPlain(GetEventTriggerPlainArgs args) {
        return getEventTriggerPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.EventTrigger` describe an Event Trigger.
     * 
     */
    public static Output<GetEventTriggerResult> getEventTrigger(GetEventTriggerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getEventTrigger:getEventTrigger", TypeShape.of(GetEventTriggerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.EventTrigger` describe an Event Trigger.
     * 
     */
    public static CompletableFuture<GetEventTriggerResult> getEventTriggerPlain(GetEventTriggerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getEventTrigger:getEventTrigger", TypeShape.of(GetEventTriggerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getEventTriggers` describe all Event Triggers.
     * 
     */
    public static Output<GetEventTriggersInvokeResult> getEventTriggers(GetEventTriggersArgs args) {
        return getEventTriggers(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getEventTriggers` describe all Event Triggers.
     * 
     */
    public static CompletableFuture<GetEventTriggersInvokeResult> getEventTriggersPlain(GetEventTriggersPlainArgs args) {
        return getEventTriggersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getEventTriggers` describe all Event Triggers.
     * 
     */
    public static Output<GetEventTriggersInvokeResult> getEventTriggers(GetEventTriggersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getEventTriggers:getEventTriggers", TypeShape.of(GetEventTriggersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getEventTriggers` describe all Event Triggers.
     * 
     */
    public static CompletableFuture<GetEventTriggersInvokeResult> getEventTriggersPlain(GetEventTriggersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getEventTriggers:getEventTriggers", TypeShape.of(GetEventTriggersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedDatabaseInstance` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * ### S With MongoDB Atlas Cluster As Storage Database
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .name(&#34;TENANT NAME OF THE FEDERATED DATABASE INSTANCE&#34;)
     *             .projectId(&#34;PROJECT ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### S With Amazon S3 Bucket As Storage Database
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .cloudProviderConfig(GetFederatedDatabaseInstanceCloudProviderConfigArgs.builder()
     *                 .aws(GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs.builder()
     *                     .testS3Bucket(&#34;Amazon S3 Bucket Name&#34;)
     *                     .build())
     *                 .build())
     *             .name(&#34;TENANT NAME OF THE FEDERATED DATABASE INSTANCE&#34;)
     *             .projectId(&#34;PROJECT ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedDatabaseInstanceResult> getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs args) {
        return getFederatedDatabaseInstance(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedDatabaseInstance` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * ### S With MongoDB Atlas Cluster As Storage Database
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .name(&#34;TENANT NAME OF THE FEDERATED DATABASE INSTANCE&#34;)
     *             .projectId(&#34;PROJECT ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### S With Amazon S3 Bucket As Storage Database
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .cloudProviderConfig(GetFederatedDatabaseInstanceCloudProviderConfigArgs.builder()
     *                 .aws(GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs.builder()
     *                     .testS3Bucket(&#34;Amazon S3 Bucket Name&#34;)
     *                     .build())
     *                 .build())
     *             .name(&#34;TENANT NAME OF THE FEDERATED DATABASE INSTANCE&#34;)
     *             .projectId(&#34;PROJECT ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedDatabaseInstanceResult> getFederatedDatabaseInstancePlain(GetFederatedDatabaseInstancePlainArgs args) {
        return getFederatedDatabaseInstancePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedDatabaseInstance` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * ### S With MongoDB Atlas Cluster As Storage Database
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .name(&#34;TENANT NAME OF THE FEDERATED DATABASE INSTANCE&#34;)
     *             .projectId(&#34;PROJECT ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### S With Amazon S3 Bucket As Storage Database
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .cloudProviderConfig(GetFederatedDatabaseInstanceCloudProviderConfigArgs.builder()
     *                 .aws(GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs.builder()
     *                     .testS3Bucket(&#34;Amazon S3 Bucket Name&#34;)
     *                     .build())
     *                 .build())
     *             .name(&#34;TENANT NAME OF THE FEDERATED DATABASE INSTANCE&#34;)
     *             .projectId(&#34;PROJECT ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedDatabaseInstanceResult> getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedDatabaseInstance:getFederatedDatabaseInstance", TypeShape.of(GetFederatedDatabaseInstanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedDatabaseInstance` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * ### S With MongoDB Atlas Cluster As Storage Database
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .name(&#34;TENANT NAME OF THE FEDERATED DATABASE INSTANCE&#34;)
     *             .projectId(&#34;PROJECT ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ### S With Amazon S3 Bucket As Storage Database
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .cloudProviderConfig(GetFederatedDatabaseInstanceCloudProviderConfigArgs.builder()
     *                 .aws(GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs.builder()
     *                     .testS3Bucket(&#34;Amazon S3 Bucket Name&#34;)
     *                     .build())
     *                 .build())
     *             .name(&#34;TENANT NAME OF THE FEDERATED DATABASE INSTANCE&#34;)
     *             .projectId(&#34;PROJECT ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedDatabaseInstanceResult> getFederatedDatabaseInstancePlain(GetFederatedDatabaseInstancePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedDatabaseInstance:getFederatedDatabaseInstance", TypeShape.of(GetFederatedDatabaseInstanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas_federated_database_instancess` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * ### S
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstances(GetFederatedDatabaseInstancesArgs.builder()
     *             .name(&#34;TENANT NAME OF THE FEDERATED DATABASE INSTANCE&#34;)
     *             .projectId(&#34;PROJECT ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedDatabaseInstancesInvokeResult> getFederatedDatabaseInstances(GetFederatedDatabaseInstancesArgs args) {
        return getFederatedDatabaseInstances(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas_federated_database_instancess` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * ### S
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstances(GetFederatedDatabaseInstancesArgs.builder()
     *             .name(&#34;TENANT NAME OF THE FEDERATED DATABASE INSTANCE&#34;)
     *             .projectId(&#34;PROJECT ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedDatabaseInstancesInvokeResult> getFederatedDatabaseInstancesPlain(GetFederatedDatabaseInstancesPlainArgs args) {
        return getFederatedDatabaseInstancesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas_federated_database_instancess` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * ### S
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstances(GetFederatedDatabaseInstancesArgs.builder()
     *             .name(&#34;TENANT NAME OF THE FEDERATED DATABASE INSTANCE&#34;)
     *             .projectId(&#34;PROJECT ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedDatabaseInstancesInvokeResult> getFederatedDatabaseInstances(GetFederatedDatabaseInstancesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedDatabaseInstances:getFederatedDatabaseInstances", TypeShape.of(GetFederatedDatabaseInstancesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas_federated_database_instancess` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * ### S
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstances(GetFederatedDatabaseInstancesArgs.builder()
     *             .name(&#34;TENANT NAME OF THE FEDERATED DATABASE INSTANCE&#34;)
     *             .projectId(&#34;PROJECT ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedDatabaseInstancesInvokeResult> getFederatedDatabaseInstancesPlain(GetFederatedDatabaseInstancesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedDatabaseInstances:getFederatedDatabaseInstances", TypeShape.of(GetFederatedDatabaseInstancesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Data Source: mongodbatlas.FederatedQueryLimit
     * 
     * `mongodbatlas.FederatedQueryLimit` provides a Federated Database Instance Query Limit data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimit(GetFederatedQueryLimitArgs.builder()
     *             .limitName(&#34;LIMIT_NAME&#34;)
     *             .projectId(&#34;PROJECT_ID&#34;)
     *             .tenantName(&#34;FEDERATED_DATABASE_INSTANCE_NAME&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedQueryLimitResult> getFederatedQueryLimit(GetFederatedQueryLimitArgs args) {
        return getFederatedQueryLimit(args, InvokeOptions.Empty);
    }
    /**
     * ## Data Source: mongodbatlas.FederatedQueryLimit
     * 
     * `mongodbatlas.FederatedQueryLimit` provides a Federated Database Instance Query Limit data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimit(GetFederatedQueryLimitArgs.builder()
     *             .limitName(&#34;LIMIT_NAME&#34;)
     *             .projectId(&#34;PROJECT_ID&#34;)
     *             .tenantName(&#34;FEDERATED_DATABASE_INSTANCE_NAME&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedQueryLimitResult> getFederatedQueryLimitPlain(GetFederatedQueryLimitPlainArgs args) {
        return getFederatedQueryLimitPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Data Source: mongodbatlas.FederatedQueryLimit
     * 
     * `mongodbatlas.FederatedQueryLimit` provides a Federated Database Instance Query Limit data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimit(GetFederatedQueryLimitArgs.builder()
     *             .limitName(&#34;LIMIT_NAME&#34;)
     *             .projectId(&#34;PROJECT_ID&#34;)
     *             .tenantName(&#34;FEDERATED_DATABASE_INSTANCE_NAME&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedQueryLimitResult> getFederatedQueryLimit(GetFederatedQueryLimitArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedQueryLimit:getFederatedQueryLimit", TypeShape.of(GetFederatedQueryLimitResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Data Source: mongodbatlas.FederatedQueryLimit
     * 
     * `mongodbatlas.FederatedQueryLimit` provides a Federated Database Instance Query Limit data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimit(GetFederatedQueryLimitArgs.builder()
     *             .limitName(&#34;LIMIT_NAME&#34;)
     *             .projectId(&#34;PROJECT_ID&#34;)
     *             .tenantName(&#34;FEDERATED_DATABASE_INSTANCE_NAME&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedQueryLimitResult> getFederatedQueryLimitPlain(GetFederatedQueryLimitPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedQueryLimit:getFederatedQueryLimit", TypeShape.of(GetFederatedQueryLimitResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedQueryLimits` provides a Federated Database Instance Query Limits data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ### S
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimits(GetFederatedQueryLimitsArgs.builder()
     *             .projectId(&#34;PROJECT_ID&#34;)
     *             .tenantName(&#34;FEDERATED_DATABASE_INSTANCE_NAME&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedQueryLimitsInvokeResult> getFederatedQueryLimits(GetFederatedQueryLimitsArgs args) {
        return getFederatedQueryLimits(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedQueryLimits` provides a Federated Database Instance Query Limits data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ### S
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimits(GetFederatedQueryLimitsArgs.builder()
     *             .projectId(&#34;PROJECT_ID&#34;)
     *             .tenantName(&#34;FEDERATED_DATABASE_INSTANCE_NAME&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedQueryLimitsInvokeResult> getFederatedQueryLimitsPlain(GetFederatedQueryLimitsPlainArgs args) {
        return getFederatedQueryLimitsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedQueryLimits` provides a Federated Database Instance Query Limits data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ### S
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimits(GetFederatedQueryLimitsArgs.builder()
     *             .projectId(&#34;PROJECT_ID&#34;)
     *             .tenantName(&#34;FEDERATED_DATABASE_INSTANCE_NAME&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedQueryLimitsInvokeResult> getFederatedQueryLimits(GetFederatedQueryLimitsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedQueryLimits:getFederatedQueryLimits", TypeShape.of(GetFederatedQueryLimitsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedQueryLimits` provides a Federated Database Instance Query Limits data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ### S
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimits(GetFederatedQueryLimitsArgs.builder()
     *             .projectId(&#34;PROJECT_ID&#34;)
     *             .tenantName(&#34;FEDERATED_DATABASE_INSTANCE_NAME&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedQueryLimitsInvokeResult> getFederatedQueryLimitsPlain(GetFederatedQueryLimitsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedQueryLimits:getFederatedQueryLimits", TypeShape.of(GetFederatedQueryLimitsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettings` provides a federated settings data source. Atlas Cloud federated settings provides federated settings outputs.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var settings = MongodbatlasFunctions.getFederatedSettings(GetFederatedSettingsArgs.builder()
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsResult> getFederatedSettings(GetFederatedSettingsArgs args) {
        return getFederatedSettings(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettings` provides a federated settings data source. Atlas Cloud federated settings provides federated settings outputs.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var settings = MongodbatlasFunctions.getFederatedSettings(GetFederatedSettingsArgs.builder()
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsResult> getFederatedSettingsPlain(GetFederatedSettingsPlainArgs args) {
        return getFederatedSettingsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettings` provides a federated settings data source. Atlas Cloud federated settings provides federated settings outputs.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var settings = MongodbatlasFunctions.getFederatedSettings(GetFederatedSettingsArgs.builder()
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsResult> getFederatedSettings(GetFederatedSettingsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettings:getFederatedSettings", TypeShape.of(GetFederatedSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettings` provides a federated settings data source. Atlas Cloud federated settings provides federated settings outputs.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var settings = MongodbatlasFunctions.getFederatedSettings(GetFederatedSettingsArgs.builder()
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsResult> getFederatedSettingsPlain(GetFederatedSettingsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettings:getFederatedSettings", TypeShape.of(GetFederatedSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedSettingsIdentityProvider` provides a federated settings identity provider data source. Atlas federated settings identity provider provides federated settings outputs for the configured identity provider.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProviderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider(&#34;identityProvider&#34;, FederatedSettingsIdentityProviderArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .associatedDomains(&#34;yourdomain.com&#34;)
     *             .ssoDebugEnabled(true)
     *             .status(&#34;ACTIVE&#34;)
     *             .ssoUrl(&#34;https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml&#34;)
     *             .issuerUri(&#34;http://www.okta.com/exk17f7f7f7f7p50h8&#34;)
     *             .requestBinding(&#34;HTTP-POST&#34;)
     *             .responseSignatureAlgorithm(&#34;SHA-256&#34;)
     *             .build());
     * 
     *         final var identityProviderDs = MongodbatlasFunctions.getFederatedSettingsIdentityProvider(GetFederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .identityProviderId(&#34;0oad47f7fXnk1297&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsIdentityProviderResult> getFederatedSettingsIdentityProvider(GetFederatedSettingsIdentityProviderArgs args) {
        return getFederatedSettingsIdentityProvider(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedSettingsIdentityProvider` provides a federated settings identity provider data source. Atlas federated settings identity provider provides federated settings outputs for the configured identity provider.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProviderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider(&#34;identityProvider&#34;, FederatedSettingsIdentityProviderArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .associatedDomains(&#34;yourdomain.com&#34;)
     *             .ssoDebugEnabled(true)
     *             .status(&#34;ACTIVE&#34;)
     *             .ssoUrl(&#34;https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml&#34;)
     *             .issuerUri(&#34;http://www.okta.com/exk17f7f7f7f7p50h8&#34;)
     *             .requestBinding(&#34;HTTP-POST&#34;)
     *             .responseSignatureAlgorithm(&#34;SHA-256&#34;)
     *             .build());
     * 
     *         final var identityProviderDs = MongodbatlasFunctions.getFederatedSettingsIdentityProvider(GetFederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .identityProviderId(&#34;0oad47f7fXnk1297&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsIdentityProviderResult> getFederatedSettingsIdentityProviderPlain(GetFederatedSettingsIdentityProviderPlainArgs args) {
        return getFederatedSettingsIdentityProviderPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedSettingsIdentityProvider` provides a federated settings identity provider data source. Atlas federated settings identity provider provides federated settings outputs for the configured identity provider.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProviderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider(&#34;identityProvider&#34;, FederatedSettingsIdentityProviderArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .associatedDomains(&#34;yourdomain.com&#34;)
     *             .ssoDebugEnabled(true)
     *             .status(&#34;ACTIVE&#34;)
     *             .ssoUrl(&#34;https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml&#34;)
     *             .issuerUri(&#34;http://www.okta.com/exk17f7f7f7f7p50h8&#34;)
     *             .requestBinding(&#34;HTTP-POST&#34;)
     *             .responseSignatureAlgorithm(&#34;SHA-256&#34;)
     *             .build());
     * 
     *         final var identityProviderDs = MongodbatlasFunctions.getFederatedSettingsIdentityProvider(GetFederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .identityProviderId(&#34;0oad47f7fXnk1297&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsIdentityProviderResult> getFederatedSettingsIdentityProvider(GetFederatedSettingsIdentityProviderArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettingsIdentityProvider:getFederatedSettingsIdentityProvider", TypeShape.of(GetFederatedSettingsIdentityProviderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedSettingsIdentityProvider` provides a federated settings identity provider data source. Atlas federated settings identity provider provides federated settings outputs for the configured identity provider.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProviderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider(&#34;identityProvider&#34;, FederatedSettingsIdentityProviderArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .associatedDomains(&#34;yourdomain.com&#34;)
     *             .ssoDebugEnabled(true)
     *             .status(&#34;ACTIVE&#34;)
     *             .ssoUrl(&#34;https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml&#34;)
     *             .issuerUri(&#34;http://www.okta.com/exk17f7f7f7f7p50h8&#34;)
     *             .requestBinding(&#34;HTTP-POST&#34;)
     *             .responseSignatureAlgorithm(&#34;SHA-256&#34;)
     *             .build());
     * 
     *         final var identityProviderDs = MongodbatlasFunctions.getFederatedSettingsIdentityProvider(GetFederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .identityProviderId(&#34;0oad47f7fXnk1297&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsIdentityProviderResult> getFederatedSettingsIdentityProviderPlain(GetFederatedSettingsIdentityProviderPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettingsIdentityProvider:getFederatedSettingsIdentityProvider", TypeShape.of(GetFederatedSettingsIdentityProviderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettingsIdentityProviders` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProvidersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider(&#34;identityProvider&#34;, FederatedSettingsIdentityProviderArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .associatedDomains(&#34;yourdomain.com&#34;)
     *             .ssoDebugEnabled(true)
     *             .status(&#34;ACTIVE&#34;)
     *             .build());
     * 
     *         final var identittyProvider = MongodbatlasFunctions.getFederatedSettingsIdentityProviders(GetFederatedSettingsIdentityProvidersArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsIdentityProvidersInvokeResult> getFederatedSettingsIdentityProviders(GetFederatedSettingsIdentityProvidersArgs args) {
        return getFederatedSettingsIdentityProviders(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettingsIdentityProviders` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProvidersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider(&#34;identityProvider&#34;, FederatedSettingsIdentityProviderArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .associatedDomains(&#34;yourdomain.com&#34;)
     *             .ssoDebugEnabled(true)
     *             .status(&#34;ACTIVE&#34;)
     *             .build());
     * 
     *         final var identittyProvider = MongodbatlasFunctions.getFederatedSettingsIdentityProviders(GetFederatedSettingsIdentityProvidersArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsIdentityProvidersInvokeResult> getFederatedSettingsIdentityProvidersPlain(GetFederatedSettingsIdentityProvidersPlainArgs args) {
        return getFederatedSettingsIdentityProvidersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettingsIdentityProviders` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProvidersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider(&#34;identityProvider&#34;, FederatedSettingsIdentityProviderArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .associatedDomains(&#34;yourdomain.com&#34;)
     *             .ssoDebugEnabled(true)
     *             .status(&#34;ACTIVE&#34;)
     *             .build());
     * 
     *         final var identittyProvider = MongodbatlasFunctions.getFederatedSettingsIdentityProviders(GetFederatedSettingsIdentityProvidersArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsIdentityProvidersInvokeResult> getFederatedSettingsIdentityProviders(GetFederatedSettingsIdentityProvidersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettingsIdentityProviders:getFederatedSettingsIdentityProviders", TypeShape.of(GetFederatedSettingsIdentityProvidersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettingsIdentityProviders` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProvidersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider(&#34;identityProvider&#34;, FederatedSettingsIdentityProviderArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .associatedDomains(&#34;yourdomain.com&#34;)
     *             .ssoDebugEnabled(true)
     *             .status(&#34;ACTIVE&#34;)
     *             .build());
     * 
     *         final var identittyProvider = MongodbatlasFunctions.getFederatedSettingsIdentityProviders(GetFederatedSettingsIdentityProvidersArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsIdentityProvidersInvokeResult> getFederatedSettingsIdentityProvidersPlain(GetFederatedSettingsIdentityProvidersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettingsIdentityProviders:getFederatedSettingsIdentityProviders", TypeShape.of(GetFederatedSettingsIdentityProvidersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Organizational configuration provides federated settings outputs for the configured Organizational configuration.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnections = new FederatedSettingsOrgConfig(&#34;orgConnections&#34;, FederatedSettingsOrgConfigArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .orgId(&#34;627a9683ea7ff7f74de306f14&#34;)
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists(&#34;mydomain.com&#34;)
     *             .postAuthRoleGrants(&#34;ORG_MEMBER&#34;)
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfig(GetFederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId(orgConnections.id())
     *             .orgId(&#34;627a9683ea7ff7f74de306f14&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsOrgConfigResult> getFederatedSettingsOrgConfig(GetFederatedSettingsOrgConfigArgs args) {
        return getFederatedSettingsOrgConfig(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Organizational configuration provides federated settings outputs for the configured Organizational configuration.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnections = new FederatedSettingsOrgConfig(&#34;orgConnections&#34;, FederatedSettingsOrgConfigArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .orgId(&#34;627a9683ea7ff7f74de306f14&#34;)
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists(&#34;mydomain.com&#34;)
     *             .postAuthRoleGrants(&#34;ORG_MEMBER&#34;)
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfig(GetFederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId(orgConnections.id())
     *             .orgId(&#34;627a9683ea7ff7f74de306f14&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgConfigResult> getFederatedSettingsOrgConfigPlain(GetFederatedSettingsOrgConfigPlainArgs args) {
        return getFederatedSettingsOrgConfigPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Organizational configuration provides federated settings outputs for the configured Organizational configuration.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnections = new FederatedSettingsOrgConfig(&#34;orgConnections&#34;, FederatedSettingsOrgConfigArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .orgId(&#34;627a9683ea7ff7f74de306f14&#34;)
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists(&#34;mydomain.com&#34;)
     *             .postAuthRoleGrants(&#34;ORG_MEMBER&#34;)
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfig(GetFederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId(orgConnections.id())
     *             .orgId(&#34;627a9683ea7ff7f74de306f14&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsOrgConfigResult> getFederatedSettingsOrgConfig(GetFederatedSettingsOrgConfigArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettingsOrgConfig:getFederatedSettingsOrgConfig", TypeShape.of(GetFederatedSettingsOrgConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Organizational configuration provides federated settings outputs for the configured Organizational configuration.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnections = new FederatedSettingsOrgConfig(&#34;orgConnections&#34;, FederatedSettingsOrgConfigArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .orgId(&#34;627a9683ea7ff7f74de306f14&#34;)
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists(&#34;mydomain.com&#34;)
     *             .postAuthRoleGrants(&#34;ORG_MEMBER&#34;)
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfig(GetFederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId(orgConnections.id())
     *             .orgId(&#34;627a9683ea7ff7f74de306f14&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgConfigResult> getFederatedSettingsOrgConfigPlain(GetFederatedSettingsOrgConfigPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettingsOrgConfig:getFederatedSettingsOrgConfig", TypeShape.of(GetFederatedSettingsOrgConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgConfigs` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnections = new FederatedSettingsOrgConfig(&#34;orgConnections&#34;, FederatedSettingsOrgConfigArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .orgId(&#34;627a9683ea7ff7f74de306f14&#34;)
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists(&#34;mydomain.com&#34;)
     *             .postAuthRoleGrants(&#34;ORG_MEMBER&#34;)
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfigs(GetFederatedSettingsOrgConfigsArgs.builder()
     *             .federationSettingsId(orgConnections.id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsOrgConfigsInvokeResult> getFederatedSettingsOrgConfigs(GetFederatedSettingsOrgConfigsArgs args) {
        return getFederatedSettingsOrgConfigs(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgConfigs` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnections = new FederatedSettingsOrgConfig(&#34;orgConnections&#34;, FederatedSettingsOrgConfigArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .orgId(&#34;627a9683ea7ff7f74de306f14&#34;)
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists(&#34;mydomain.com&#34;)
     *             .postAuthRoleGrants(&#34;ORG_MEMBER&#34;)
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfigs(GetFederatedSettingsOrgConfigsArgs.builder()
     *             .federationSettingsId(orgConnections.id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgConfigsInvokeResult> getFederatedSettingsOrgConfigsPlain(GetFederatedSettingsOrgConfigsPlainArgs args) {
        return getFederatedSettingsOrgConfigsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgConfigs` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnections = new FederatedSettingsOrgConfig(&#34;orgConnections&#34;, FederatedSettingsOrgConfigArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .orgId(&#34;627a9683ea7ff7f74de306f14&#34;)
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists(&#34;mydomain.com&#34;)
     *             .postAuthRoleGrants(&#34;ORG_MEMBER&#34;)
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfigs(GetFederatedSettingsOrgConfigsArgs.builder()
     *             .federationSettingsId(orgConnections.id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsOrgConfigsInvokeResult> getFederatedSettingsOrgConfigs(GetFederatedSettingsOrgConfigsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettingsOrgConfigs:getFederatedSettingsOrgConfigs", TypeShape.of(GetFederatedSettingsOrgConfigsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgConfigs` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnections = new FederatedSettingsOrgConfig(&#34;orgConnections&#34;, FederatedSettingsOrgConfigArgs.builder()        
     *             .federationSettingsId(&#34;627a9687f7f7f7f774de306f14&#34;)
     *             .orgId(&#34;627a9683ea7ff7f74de306f14&#34;)
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists(&#34;mydomain.com&#34;)
     *             .postAuthRoleGrants(&#34;ORG_MEMBER&#34;)
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfigs(GetFederatedSettingsOrgConfigsArgs.builder()
     *             .federationSettingsId(orgConnections.id())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgConfigsInvokeResult> getFederatedSettingsOrgConfigsPlain(GetFederatedSettingsOrgConfigsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettingsOrgConfigs:getFederatedSettingsOrgConfigs", TypeShape.of(GetFederatedSettingsOrgConfigsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgRoleMapping` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMapping;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMappingArgs;
     * import com.pulumi.mongodbatlas.inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgGroupRoleMappingImport = new FederatedSettingsOrgRoleMapping(&#34;orgGroupRoleMappingImport&#34;, FederatedSettingsOrgRoleMappingArgs.builder()        
     *             .federationSettingsId(data.mongodbatlas_federated_settings().federated_settings().id())
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .externalGroupName(&#34;myGrouptest&#34;)
     *             .roleAssignments(            
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *                     .roles(                    
     *                         &#34;ORG_MEMBER&#34;,
     *                         &#34;ORG_GROUP_CREATOR&#34;,
     *                         &#34;ORG_BILLING_ADMIN&#34;)
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId(&#34;628aa20db7f7f7f98b81b8&#34;)
     *                     .roles(                    
     *                         &#34;GROUP_OWNER&#34;,
     *                         &#34;GROUP_DATA_ACCESS_ADMIN&#34;,
     *                         &#34;GROUP_SEARCH_INDEX_EDITOR&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;)
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId(&#34;62b477f7f7f7f5e741489c&#34;)
     *                     .roles(                    
     *                         &#34;GROUP_OWNER&#34;,
     *                         &#34;GROUP_DATA_ACCESS_ADMIN&#34;,
     *                         &#34;GROUP_SEARCH_INDEX_EDITOR&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var roleMapping = MongodbatlasFunctions.getFederatedSettingsOrgRoleMapping(GetFederatedSettingsOrgRoleMappingArgs.builder()
     *             .federationSettingsId(orgGroupRoleMappingImport.id())
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .roleMappingId(&#34;627a9673e7f7f7ff7fe306f14&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsOrgRoleMappingResult> getFederatedSettingsOrgRoleMapping(GetFederatedSettingsOrgRoleMappingArgs args) {
        return getFederatedSettingsOrgRoleMapping(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgRoleMapping` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMapping;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMappingArgs;
     * import com.pulumi.mongodbatlas.inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgGroupRoleMappingImport = new FederatedSettingsOrgRoleMapping(&#34;orgGroupRoleMappingImport&#34;, FederatedSettingsOrgRoleMappingArgs.builder()        
     *             .federationSettingsId(data.mongodbatlas_federated_settings().federated_settings().id())
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .externalGroupName(&#34;myGrouptest&#34;)
     *             .roleAssignments(            
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *                     .roles(                    
     *                         &#34;ORG_MEMBER&#34;,
     *                         &#34;ORG_GROUP_CREATOR&#34;,
     *                         &#34;ORG_BILLING_ADMIN&#34;)
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId(&#34;628aa20db7f7f7f98b81b8&#34;)
     *                     .roles(                    
     *                         &#34;GROUP_OWNER&#34;,
     *                         &#34;GROUP_DATA_ACCESS_ADMIN&#34;,
     *                         &#34;GROUP_SEARCH_INDEX_EDITOR&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;)
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId(&#34;62b477f7f7f7f5e741489c&#34;)
     *                     .roles(                    
     *                         &#34;GROUP_OWNER&#34;,
     *                         &#34;GROUP_DATA_ACCESS_ADMIN&#34;,
     *                         &#34;GROUP_SEARCH_INDEX_EDITOR&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var roleMapping = MongodbatlasFunctions.getFederatedSettingsOrgRoleMapping(GetFederatedSettingsOrgRoleMappingArgs.builder()
     *             .federationSettingsId(orgGroupRoleMappingImport.id())
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .roleMappingId(&#34;627a9673e7f7f7ff7fe306f14&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgRoleMappingResult> getFederatedSettingsOrgRoleMappingPlain(GetFederatedSettingsOrgRoleMappingPlainArgs args) {
        return getFederatedSettingsOrgRoleMappingPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgRoleMapping` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMapping;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMappingArgs;
     * import com.pulumi.mongodbatlas.inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgGroupRoleMappingImport = new FederatedSettingsOrgRoleMapping(&#34;orgGroupRoleMappingImport&#34;, FederatedSettingsOrgRoleMappingArgs.builder()        
     *             .federationSettingsId(data.mongodbatlas_federated_settings().federated_settings().id())
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .externalGroupName(&#34;myGrouptest&#34;)
     *             .roleAssignments(            
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *                     .roles(                    
     *                         &#34;ORG_MEMBER&#34;,
     *                         &#34;ORG_GROUP_CREATOR&#34;,
     *                         &#34;ORG_BILLING_ADMIN&#34;)
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId(&#34;628aa20db7f7f7f98b81b8&#34;)
     *                     .roles(                    
     *                         &#34;GROUP_OWNER&#34;,
     *                         &#34;GROUP_DATA_ACCESS_ADMIN&#34;,
     *                         &#34;GROUP_SEARCH_INDEX_EDITOR&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;)
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId(&#34;62b477f7f7f7f5e741489c&#34;)
     *                     .roles(                    
     *                         &#34;GROUP_OWNER&#34;,
     *                         &#34;GROUP_DATA_ACCESS_ADMIN&#34;,
     *                         &#34;GROUP_SEARCH_INDEX_EDITOR&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var roleMapping = MongodbatlasFunctions.getFederatedSettingsOrgRoleMapping(GetFederatedSettingsOrgRoleMappingArgs.builder()
     *             .federationSettingsId(orgGroupRoleMappingImport.id())
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .roleMappingId(&#34;627a9673e7f7f7ff7fe306f14&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsOrgRoleMappingResult> getFederatedSettingsOrgRoleMapping(GetFederatedSettingsOrgRoleMappingArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettingsOrgRoleMapping:getFederatedSettingsOrgRoleMapping", TypeShape.of(GetFederatedSettingsOrgRoleMappingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgRoleMapping` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMapping;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMappingArgs;
     * import com.pulumi.mongodbatlas.inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgGroupRoleMappingImport = new FederatedSettingsOrgRoleMapping(&#34;orgGroupRoleMappingImport&#34;, FederatedSettingsOrgRoleMappingArgs.builder()        
     *             .federationSettingsId(data.mongodbatlas_federated_settings().federated_settings().id())
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .externalGroupName(&#34;myGrouptest&#34;)
     *             .roleAssignments(            
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *                     .roles(                    
     *                         &#34;ORG_MEMBER&#34;,
     *                         &#34;ORG_GROUP_CREATOR&#34;,
     *                         &#34;ORG_BILLING_ADMIN&#34;)
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId(&#34;628aa20db7f7f7f98b81b8&#34;)
     *                     .roles(                    
     *                         &#34;GROUP_OWNER&#34;,
     *                         &#34;GROUP_DATA_ACCESS_ADMIN&#34;,
     *                         &#34;GROUP_SEARCH_INDEX_EDITOR&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;)
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId(&#34;62b477f7f7f7f5e741489c&#34;)
     *                     .roles(                    
     *                         &#34;GROUP_OWNER&#34;,
     *                         &#34;GROUP_DATA_ACCESS_ADMIN&#34;,
     *                         &#34;GROUP_SEARCH_INDEX_EDITOR&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;)
     *                     .build())
     *             .build());
     * 
     *         final var roleMapping = MongodbatlasFunctions.getFederatedSettingsOrgRoleMapping(GetFederatedSettingsOrgRoleMappingArgs.builder()
     *             .federationSettingsId(orgGroupRoleMappingImport.id())
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .roleMappingId(&#34;627a9673e7f7f7ff7fe306f14&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgRoleMappingResult> getFederatedSettingsOrgRoleMappingPlain(GetFederatedSettingsOrgRoleMappingPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettingsOrgRoleMapping:getFederatedSettingsOrgRoleMapping", TypeShape.of(GetFederatedSettingsOrgRoleMappingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgRoleMappings` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMapping;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMappingArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgGroupRoleMappingImport = new FederatedSettingsOrgRoleMapping(&#34;orgGroupRoleMappingImport&#34;, FederatedSettingsOrgRoleMappingArgs.builder()        
     *             .federationSettingsId(&#34;&#34;)
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .groupId(&#34;628aa20d7f7f7f7f7098b81b8&#34;)
     *             .externalGroupName(&#34;myGrouptest&#34;)
     *             .organizationRoles(            
     *                 &#34;ORG_OWNER&#34;,
     *                 &#34;ORG_MEMBER&#34;,
     *                 &#34;ORG_BILLING_ADMIN&#34;,
     *                 &#34;ORG_GROUP_CREATOR&#34;,
     *                 &#34;ORG_READ_ONLY&#34;)
     *             .groupRoles(            
     *                 &#34;GROUP_OWNER&#34;,
     *                 &#34;GROUP_CLUSTER_MANAGER&#34;,
     *                 &#34;GROUP_DATA_ACCESS_ADMIN&#34;,
     *                 &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;,
     *                 &#34;GROUP_SEARCH_INDEX_EDITOR&#34;,
     *                 &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;,
     *                 &#34;GROUP_READ_ONLY&#34;)
     *             .build());
     * 
     *         final var roleMappings = MongodbatlasFunctions.getFederatedSettingsOrgRoleMappings(GetFederatedSettingsOrgRoleMappingsArgs.builder()
     *             .federationSettingsId(orgGroupRoleMappingImport.id())
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsOrgRoleMappingsInvokeResult> getFederatedSettingsOrgRoleMappings(GetFederatedSettingsOrgRoleMappingsArgs args) {
        return getFederatedSettingsOrgRoleMappings(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgRoleMappings` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMapping;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMappingArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgGroupRoleMappingImport = new FederatedSettingsOrgRoleMapping(&#34;orgGroupRoleMappingImport&#34;, FederatedSettingsOrgRoleMappingArgs.builder()        
     *             .federationSettingsId(&#34;&#34;)
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .groupId(&#34;628aa20d7f7f7f7f7098b81b8&#34;)
     *             .externalGroupName(&#34;myGrouptest&#34;)
     *             .organizationRoles(            
     *                 &#34;ORG_OWNER&#34;,
     *                 &#34;ORG_MEMBER&#34;,
     *                 &#34;ORG_BILLING_ADMIN&#34;,
     *                 &#34;ORG_GROUP_CREATOR&#34;,
     *                 &#34;ORG_READ_ONLY&#34;)
     *             .groupRoles(            
     *                 &#34;GROUP_OWNER&#34;,
     *                 &#34;GROUP_CLUSTER_MANAGER&#34;,
     *                 &#34;GROUP_DATA_ACCESS_ADMIN&#34;,
     *                 &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;,
     *                 &#34;GROUP_SEARCH_INDEX_EDITOR&#34;,
     *                 &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;,
     *                 &#34;GROUP_READ_ONLY&#34;)
     *             .build());
     * 
     *         final var roleMappings = MongodbatlasFunctions.getFederatedSettingsOrgRoleMappings(GetFederatedSettingsOrgRoleMappingsArgs.builder()
     *             .federationSettingsId(orgGroupRoleMappingImport.id())
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgRoleMappingsInvokeResult> getFederatedSettingsOrgRoleMappingsPlain(GetFederatedSettingsOrgRoleMappingsPlainArgs args) {
        return getFederatedSettingsOrgRoleMappingsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgRoleMappings` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMapping;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMappingArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgGroupRoleMappingImport = new FederatedSettingsOrgRoleMapping(&#34;orgGroupRoleMappingImport&#34;, FederatedSettingsOrgRoleMappingArgs.builder()        
     *             .federationSettingsId(&#34;&#34;)
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .groupId(&#34;628aa20d7f7f7f7f7098b81b8&#34;)
     *             .externalGroupName(&#34;myGrouptest&#34;)
     *             .organizationRoles(            
     *                 &#34;ORG_OWNER&#34;,
     *                 &#34;ORG_MEMBER&#34;,
     *                 &#34;ORG_BILLING_ADMIN&#34;,
     *                 &#34;ORG_GROUP_CREATOR&#34;,
     *                 &#34;ORG_READ_ONLY&#34;)
     *             .groupRoles(            
     *                 &#34;GROUP_OWNER&#34;,
     *                 &#34;GROUP_CLUSTER_MANAGER&#34;,
     *                 &#34;GROUP_DATA_ACCESS_ADMIN&#34;,
     *                 &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;,
     *                 &#34;GROUP_SEARCH_INDEX_EDITOR&#34;,
     *                 &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;,
     *                 &#34;GROUP_READ_ONLY&#34;)
     *             .build());
     * 
     *         final var roleMappings = MongodbatlasFunctions.getFederatedSettingsOrgRoleMappings(GetFederatedSettingsOrgRoleMappingsArgs.builder()
     *             .federationSettingsId(orgGroupRoleMappingImport.id())
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetFederatedSettingsOrgRoleMappingsInvokeResult> getFederatedSettingsOrgRoleMappings(GetFederatedSettingsOrgRoleMappingsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettingsOrgRoleMappings:getFederatedSettingsOrgRoleMappings", TypeShape.of(GetFederatedSettingsOrgRoleMappingsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgRoleMappings` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMapping;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMappingArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgGroupRoleMappingImport = new FederatedSettingsOrgRoleMapping(&#34;orgGroupRoleMappingImport&#34;, FederatedSettingsOrgRoleMappingArgs.builder()        
     *             .federationSettingsId(&#34;&#34;)
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .groupId(&#34;628aa20d7f7f7f7f7098b81b8&#34;)
     *             .externalGroupName(&#34;myGrouptest&#34;)
     *             .organizationRoles(            
     *                 &#34;ORG_OWNER&#34;,
     *                 &#34;ORG_MEMBER&#34;,
     *                 &#34;ORG_BILLING_ADMIN&#34;,
     *                 &#34;ORG_GROUP_CREATOR&#34;,
     *                 &#34;ORG_READ_ONLY&#34;)
     *             .groupRoles(            
     *                 &#34;GROUP_OWNER&#34;,
     *                 &#34;GROUP_CLUSTER_MANAGER&#34;,
     *                 &#34;GROUP_DATA_ACCESS_ADMIN&#34;,
     *                 &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;,
     *                 &#34;GROUP_SEARCH_INDEX_EDITOR&#34;,
     *                 &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;,
     *                 &#34;GROUP_READ_ONLY&#34;)
     *             .build());
     * 
     *         final var roleMappings = MongodbatlasFunctions.getFederatedSettingsOrgRoleMappings(GetFederatedSettingsOrgRoleMappingsArgs.builder()
     *             .federationSettingsId(orgGroupRoleMappingImport.id())
     *             .orgId(&#34;627a9683e7f7f7ff7fe306f14&#34;)
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgRoleMappingsInvokeResult> getFederatedSettingsOrgRoleMappingsPlain(GetFederatedSettingsOrgRoleMappingsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettingsOrgRoleMappings:getFederatedSettingsOrgRoleMappings", TypeShape.of(GetFederatedSettingsOrgRoleMappingsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.GlobalClusterConfig` describes all managed namespaces and custom zone mappings associated with the specified Global Cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static Output<GetGlobalClusterConfigResult> getGlobalClusterConfig(GetGlobalClusterConfigArgs args) {
        return getGlobalClusterConfig(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.GlobalClusterConfig` describes all managed namespaces and custom zone mappings associated with the specified Global Cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static CompletableFuture<GetGlobalClusterConfigResult> getGlobalClusterConfigPlain(GetGlobalClusterConfigPlainArgs args) {
        return getGlobalClusterConfigPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.GlobalClusterConfig` describes all managed namespaces and custom zone mappings associated with the specified Global Cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static Output<GetGlobalClusterConfigResult> getGlobalClusterConfig(GetGlobalClusterConfigArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getGlobalClusterConfig:getGlobalClusterConfig", TypeShape.of(GetGlobalClusterConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.GlobalClusterConfig` describes all managed namespaces and custom zone mappings associated with the specified Global Cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static CompletableFuture<GetGlobalClusterConfigResult> getGlobalClusterConfigPlain(GetGlobalClusterConfigPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getGlobalClusterConfig:getGlobalClusterConfig", TypeShape.of(GetGlobalClusterConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.LdapConfiguration` describes a LDAP Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static Output<GetLdapConfigurationResult> getLdapConfiguration(GetLdapConfigurationArgs args) {
        return getLdapConfiguration(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.LdapConfiguration` describes a LDAP Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static CompletableFuture<GetLdapConfigurationResult> getLdapConfigurationPlain(GetLdapConfigurationPlainArgs args) {
        return getLdapConfigurationPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.LdapConfiguration` describes a LDAP Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static Output<GetLdapConfigurationResult> getLdapConfiguration(GetLdapConfigurationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getLdapConfiguration:getLdapConfiguration", TypeShape.of(GetLdapConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.LdapConfiguration` describes a LDAP Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static CompletableFuture<GetLdapConfigurationResult> getLdapConfigurationPlain(GetLdapConfigurationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getLdapConfiguration:getLdapConfiguration", TypeShape.of(GetLdapConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.LdapVerify` describes a LDAP Verify.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static Output<GetLdapVerifyResult> getLdapVerify(GetLdapVerifyArgs args) {
        return getLdapVerify(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.LdapVerify` describes a LDAP Verify.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static CompletableFuture<GetLdapVerifyResult> getLdapVerifyPlain(GetLdapVerifyPlainArgs args) {
        return getLdapVerifyPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.LdapVerify` describes a LDAP Verify.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static Output<GetLdapVerifyResult> getLdapVerify(GetLdapVerifyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getLdapVerify:getLdapVerify", TypeShape.of(GetLdapVerifyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.LdapVerify` describes a LDAP Verify.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     */
    public static CompletableFuture<GetLdapVerifyResult> getLdapVerifyPlain(GetLdapVerifyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getLdapVerify:getLdapVerify", TypeShape.of(GetLdapVerifyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.MaintenanceWindow` provides a Maintenance Window entry datasource. Gets information regarding the configured maintenance window for a MongoDB Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetMaintenanceWindowResult> getMaintenanceWindow(GetMaintenanceWindowArgs args) {
        return getMaintenanceWindow(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.MaintenanceWindow` provides a Maintenance Window entry datasource. Gets information regarding the configured maintenance window for a MongoDB Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetMaintenanceWindowResult> getMaintenanceWindowPlain(GetMaintenanceWindowPlainArgs args) {
        return getMaintenanceWindowPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.MaintenanceWindow` provides a Maintenance Window entry datasource. Gets information regarding the configured maintenance window for a MongoDB Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static Output<GetMaintenanceWindowResult> getMaintenanceWindow(GetMaintenanceWindowArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getMaintenanceWindow:getMaintenanceWindow", TypeShape.of(GetMaintenanceWindowResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.MaintenanceWindow` provides a Maintenance Window entry datasource. Gets information regarding the configured maintenance window for a MongoDB Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     */
    public static CompletableFuture<GetMaintenanceWindowResult> getMaintenanceWindowPlain(GetMaintenanceWindowPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getMaintenanceWindow:getMaintenanceWindow", TypeShape.of(GetMaintenanceWindowResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.NetworkContainer` describes a Network Peering Container. The resource requires your Project ID and container ID.
     * 
     * &gt; **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetNetworkContainerResult> getNetworkContainer(GetNetworkContainerArgs args) {
        return getNetworkContainer(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.NetworkContainer` describes a Network Peering Container. The resource requires your Project ID and container ID.
     * 
     * &gt; **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetNetworkContainerResult> getNetworkContainerPlain(GetNetworkContainerPlainArgs args) {
        return getNetworkContainerPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.NetworkContainer` describes a Network Peering Container. The resource requires your Project ID and container ID.
     * 
     * &gt; **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetNetworkContainerResult> getNetworkContainer(GetNetworkContainerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getNetworkContainer:getNetworkContainer", TypeShape.of(GetNetworkContainerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.NetworkContainer` describes a Network Peering Container. The resource requires your Project ID and container ID.
     * 
     * &gt; **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetNetworkContainerResult> getNetworkContainerPlain(GetNetworkContainerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getNetworkContainer:getNetworkContainer", TypeShape.of(GetNetworkContainerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getNetworkContainers` describes all Network Peering Containers. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * ### Basic Example.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer(&#34;testNetworkContainer&#34;, NetworkContainerArgs.builder()        
     *             .projectId(&#34;&lt;YOUR-PROJECT-ID&gt;&#34;)
     *             .atlasCidrBlock(&#34;10.8.0.0/21&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .regionName(&#34;US_EAST_1&#34;)
     *             .build());
     * 
     *         final var testNetworkContainers = MongodbatlasFunctions.getNetworkContainers(GetNetworkContainersArgs.builder()
     *             .projectId(testNetworkContainer.projectId())
     *             .providerName(testNetworkContainer.providerName())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetNetworkContainersInvokeResult> getNetworkContainers(GetNetworkContainersArgs args) {
        return getNetworkContainers(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getNetworkContainers` describes all Network Peering Containers. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * ### Basic Example.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer(&#34;testNetworkContainer&#34;, NetworkContainerArgs.builder()        
     *             .projectId(&#34;&lt;YOUR-PROJECT-ID&gt;&#34;)
     *             .atlasCidrBlock(&#34;10.8.0.0/21&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .regionName(&#34;US_EAST_1&#34;)
     *             .build());
     * 
     *         final var testNetworkContainers = MongodbatlasFunctions.getNetworkContainers(GetNetworkContainersArgs.builder()
     *             .projectId(testNetworkContainer.projectId())
     *             .providerName(testNetworkContainer.providerName())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetNetworkContainersInvokeResult> getNetworkContainersPlain(GetNetworkContainersPlainArgs args) {
        return getNetworkContainersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getNetworkContainers` describes all Network Peering Containers. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * ### Basic Example.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer(&#34;testNetworkContainer&#34;, NetworkContainerArgs.builder()        
     *             .projectId(&#34;&lt;YOUR-PROJECT-ID&gt;&#34;)
     *             .atlasCidrBlock(&#34;10.8.0.0/21&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .regionName(&#34;US_EAST_1&#34;)
     *             .build());
     * 
     *         final var testNetworkContainers = MongodbatlasFunctions.getNetworkContainers(GetNetworkContainersArgs.builder()
     *             .projectId(testNetworkContainer.projectId())
     *             .providerName(testNetworkContainer.providerName())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetNetworkContainersInvokeResult> getNetworkContainers(GetNetworkContainersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getNetworkContainers:getNetworkContainers", TypeShape.of(GetNetworkContainersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getNetworkContainers` describes all Network Peering Containers. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * ### Basic Example.
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer(&#34;testNetworkContainer&#34;, NetworkContainerArgs.builder()        
     *             .projectId(&#34;&lt;YOUR-PROJECT-ID&gt;&#34;)
     *             .atlasCidrBlock(&#34;10.8.0.0/21&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .regionName(&#34;US_EAST_1&#34;)
     *             .build());
     * 
     *         final var testNetworkContainers = MongodbatlasFunctions.getNetworkContainers(GetNetworkContainersArgs.builder()
     *             .projectId(testNetworkContainer.projectId())
     *             .providerName(testNetworkContainer.providerName())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetNetworkContainersInvokeResult> getNetworkContainersPlain(GetNetworkContainersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getNetworkContainers:getNetworkContainers", TypeShape.of(GetNetworkContainersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.NetworkPeering` describes a Network Peering Connection.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * &gt; **NOTE:** If you need to get an existing container ID see the How-To Guide.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetNetworkPeeringResult> getNetworkPeering(GetNetworkPeeringArgs args) {
        return getNetworkPeering(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.NetworkPeering` describes a Network Peering Connection.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * &gt; **NOTE:** If you need to get an existing container ID see the How-To Guide.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetNetworkPeeringResult> getNetworkPeeringPlain(GetNetworkPeeringPlainArgs args) {
        return getNetworkPeeringPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.NetworkPeering` describes a Network Peering Connection.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * &gt; **NOTE:** If you need to get an existing container ID see the How-To Guide.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetNetworkPeeringResult> getNetworkPeering(GetNetworkPeeringArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getNetworkPeering:getNetworkPeering", TypeShape.of(GetNetworkPeeringResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.NetworkPeering` describes a Network Peering Connection.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * &gt; **NOTE:** If you need to get an existing container ID see the How-To Guide.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetNetworkPeeringResult> getNetworkPeeringPlain(GetNetworkPeeringPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getNetworkPeering:getNetworkPeering", TypeShape.of(GetNetworkPeeringResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getNetworkPeerings` describes all Network Peering Connections.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * ### Basic Example (AWS).
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkPeering = new NetworkPeering(&#34;testNetworkPeering&#34;, NetworkPeeringArgs.builder()        
     *             .accepterRegionName(&#34;us-east-1&#34;)
     *             .projectId(&#34;&lt;YOUR-PROJEC-ID&gt;&#34;)
     *             .containerId(&#34;507f1f77bcf86cd799439011&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .routeTableCidrBlock(&#34;192.168.0.0/24&#34;)
     *             .vpcId(&#34;vpc-abc123abc123&#34;)
     *             .awsAccountId(&#34;abc123abc123&#34;)
     *             .build());
     * 
     *         final var testNetworkPeerings = MongodbatlasFunctions.getNetworkPeerings(GetNetworkPeeringsArgs.builder()
     *             .projectId(testNetworkPeering.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetNetworkPeeringsInvokeResult> getNetworkPeerings(GetNetworkPeeringsArgs args) {
        return getNetworkPeerings(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getNetworkPeerings` describes all Network Peering Connections.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * ### Basic Example (AWS).
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkPeering = new NetworkPeering(&#34;testNetworkPeering&#34;, NetworkPeeringArgs.builder()        
     *             .accepterRegionName(&#34;us-east-1&#34;)
     *             .projectId(&#34;&lt;YOUR-PROJEC-ID&gt;&#34;)
     *             .containerId(&#34;507f1f77bcf86cd799439011&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .routeTableCidrBlock(&#34;192.168.0.0/24&#34;)
     *             .vpcId(&#34;vpc-abc123abc123&#34;)
     *             .awsAccountId(&#34;abc123abc123&#34;)
     *             .build());
     * 
     *         final var testNetworkPeerings = MongodbatlasFunctions.getNetworkPeerings(GetNetworkPeeringsArgs.builder()
     *             .projectId(testNetworkPeering.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetNetworkPeeringsInvokeResult> getNetworkPeeringsPlain(GetNetworkPeeringsPlainArgs args) {
        return getNetworkPeeringsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getNetworkPeerings` describes all Network Peering Connections.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * ### Basic Example (AWS).
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkPeering = new NetworkPeering(&#34;testNetworkPeering&#34;, NetworkPeeringArgs.builder()        
     *             .accepterRegionName(&#34;us-east-1&#34;)
     *             .projectId(&#34;&lt;YOUR-PROJEC-ID&gt;&#34;)
     *             .containerId(&#34;507f1f77bcf86cd799439011&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .routeTableCidrBlock(&#34;192.168.0.0/24&#34;)
     *             .vpcId(&#34;vpc-abc123abc123&#34;)
     *             .awsAccountId(&#34;abc123abc123&#34;)
     *             .build());
     * 
     *         final var testNetworkPeerings = MongodbatlasFunctions.getNetworkPeerings(GetNetworkPeeringsArgs.builder()
     *             .projectId(testNetworkPeering.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetNetworkPeeringsInvokeResult> getNetworkPeerings(GetNetworkPeeringsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getNetworkPeerings:getNetworkPeerings", TypeShape.of(GetNetworkPeeringsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getNetworkPeerings` describes all Network Peering Connections.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * ### Basic Example (AWS).
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkPeering = new NetworkPeering(&#34;testNetworkPeering&#34;, NetworkPeeringArgs.builder()        
     *             .accepterRegionName(&#34;us-east-1&#34;)
     *             .projectId(&#34;&lt;YOUR-PROJEC-ID&gt;&#34;)
     *             .containerId(&#34;507f1f77bcf86cd799439011&#34;)
     *             .providerName(&#34;AWS&#34;)
     *             .routeTableCidrBlock(&#34;192.168.0.0/24&#34;)
     *             .vpcId(&#34;vpc-abc123abc123&#34;)
     *             .awsAccountId(&#34;abc123abc123&#34;)
     *             .build());
     * 
     *         final var testNetworkPeerings = MongodbatlasFunctions.getNetworkPeerings(GetNetworkPeeringsArgs.builder()
     *             .projectId(testNetworkPeering.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetNetworkPeeringsInvokeResult> getNetworkPeeringsPlain(GetNetworkPeeringsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getNetworkPeerings:getNetworkPeerings", TypeShape.of(GetNetworkPeeringsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.OnlineArchive` describes an Online Archive
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOnlineArchiveArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOnlineArchive(GetOnlineArchiveArgs.builder()
     *             .projectId(var_.project_id())
     *             .clusterName(var_.cluster_name())
     *             .archiveId(&#34;5ebad3c1fe9c0ab8d37d61e1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * * `db_name`          -  Name of the database that contains the collection.
     * * `coll_name`        -  Name of the collection.
     * * `collection_type`  -  Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state`    - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type`          - Type of criteria (DATE, CUSTOM)
     * * `date_field`   - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format`   - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Schedule
     * 
     * * `type`          - Type of schedule. Valid values: `DEFAULT`, `DAILY`, `MONTHLY`, `WEEKLY`.
     * * `start_hour`    - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour`      - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute`   - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute`     - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month`   - Day of the month when the scheduled archive starts. Set this parameter when `type` is `MONTHLY`.
     * * `day_of_week`     - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).Set this parameter when `type` is `WEEKLY`.
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     * See [MongoDB Atlas API](https://docs.atlas.mongodb.com/reference/api/online-archive-get-one/) Documentation for more information.
     * 
     */
    public static Output<GetOnlineArchiveResult> getOnlineArchive(GetOnlineArchiveArgs args) {
        return getOnlineArchive(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.OnlineArchive` describes an Online Archive
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOnlineArchiveArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOnlineArchive(GetOnlineArchiveArgs.builder()
     *             .projectId(var_.project_id())
     *             .clusterName(var_.cluster_name())
     *             .archiveId(&#34;5ebad3c1fe9c0ab8d37d61e1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * * `db_name`          -  Name of the database that contains the collection.
     * * `coll_name`        -  Name of the collection.
     * * `collection_type`  -  Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state`    - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type`          - Type of criteria (DATE, CUSTOM)
     * * `date_field`   - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format`   - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Schedule
     * 
     * * `type`          - Type of schedule. Valid values: `DEFAULT`, `DAILY`, `MONTHLY`, `WEEKLY`.
     * * `start_hour`    - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour`      - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute`   - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute`     - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month`   - Day of the month when the scheduled archive starts. Set this parameter when `type` is `MONTHLY`.
     * * `day_of_week`     - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).Set this parameter when `type` is `WEEKLY`.
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     * See [MongoDB Atlas API](https://docs.atlas.mongodb.com/reference/api/online-archive-get-one/) Documentation for more information.
     * 
     */
    public static CompletableFuture<GetOnlineArchiveResult> getOnlineArchivePlain(GetOnlineArchivePlainArgs args) {
        return getOnlineArchivePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.OnlineArchive` describes an Online Archive
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOnlineArchiveArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOnlineArchive(GetOnlineArchiveArgs.builder()
     *             .projectId(var_.project_id())
     *             .clusterName(var_.cluster_name())
     *             .archiveId(&#34;5ebad3c1fe9c0ab8d37d61e1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * * `db_name`          -  Name of the database that contains the collection.
     * * `coll_name`        -  Name of the collection.
     * * `collection_type`  -  Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state`    - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type`          - Type of criteria (DATE, CUSTOM)
     * * `date_field`   - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format`   - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Schedule
     * 
     * * `type`          - Type of schedule. Valid values: `DEFAULT`, `DAILY`, `MONTHLY`, `WEEKLY`.
     * * `start_hour`    - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour`      - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute`   - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute`     - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month`   - Day of the month when the scheduled archive starts. Set this parameter when `type` is `MONTHLY`.
     * * `day_of_week`     - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).Set this parameter when `type` is `WEEKLY`.
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     * See [MongoDB Atlas API](https://docs.atlas.mongodb.com/reference/api/online-archive-get-one/) Documentation for more information.
     * 
     */
    public static Output<GetOnlineArchiveResult> getOnlineArchive(GetOnlineArchiveArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getOnlineArchive:getOnlineArchive", TypeShape.of(GetOnlineArchiveResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.OnlineArchive` describes an Online Archive
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOnlineArchiveArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOnlineArchive(GetOnlineArchiveArgs.builder()
     *             .projectId(var_.project_id())
     *             .clusterName(var_.cluster_name())
     *             .archiveId(&#34;5ebad3c1fe9c0ab8d37d61e1&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * * `db_name`          -  Name of the database that contains the collection.
     * * `coll_name`        -  Name of the collection.
     * * `collection_type`  -  Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state`    - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type`          - Type of criteria (DATE, CUSTOM)
     * * `date_field`   - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format`   - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Schedule
     * 
     * * `type`          - Type of schedule. Valid values: `DEFAULT`, `DAILY`, `MONTHLY`, `WEEKLY`.
     * * `start_hour`    - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour`      - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute`   - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute`     - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month`   - Day of the month when the scheduled archive starts. Set this parameter when `type` is `MONTHLY`.
     * * `day_of_week`     - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).Set this parameter when `type` is `WEEKLY`.
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     * See [MongoDB Atlas API](https://docs.atlas.mongodb.com/reference/api/online-archive-get-one/) Documentation for more information.
     * 
     */
    public static CompletableFuture<GetOnlineArchiveResult> getOnlineArchivePlain(GetOnlineArchivePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getOnlineArchive:getOnlineArchive", TypeShape.of(GetOnlineArchiveResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.OnlineArchive` Describes the list of all the online archives for a cluster
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOnlineArchivesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOnlineArchives(GetOnlineArchivesArgs.builder()
     *             .projectId(var_.project_id())
     *             .clusterName(var_.cluster_name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * * `db_name` - Name of the database that contains the collection.
     * * `coll_name` -  Name of the collection.
     * * `collection_type` - Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state` - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type` - Type of criteria (DATE, CUSTOM)
     * * `date_field` - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format` - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Schedule
     * 
     * * `type` - Type of schedule (`DAILY`, `MONTHLY`, `WEEKLY`).
     * * `start_hour` - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour` - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute` - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute` - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month` - Day of the month when the scheduled archive starts.
     * * `day_of_week` - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     */
    public static Output<GetOnlineArchivesInvokeResult> getOnlineArchives(GetOnlineArchivesArgs args) {
        return getOnlineArchives(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.OnlineArchive` Describes the list of all the online archives for a cluster
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOnlineArchivesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOnlineArchives(GetOnlineArchivesArgs.builder()
     *             .projectId(var_.project_id())
     *             .clusterName(var_.cluster_name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * * `db_name` - Name of the database that contains the collection.
     * * `coll_name` -  Name of the collection.
     * * `collection_type` - Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state` - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type` - Type of criteria (DATE, CUSTOM)
     * * `date_field` - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format` - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Schedule
     * 
     * * `type` - Type of schedule (`DAILY`, `MONTHLY`, `WEEKLY`).
     * * `start_hour` - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour` - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute` - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute` - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month` - Day of the month when the scheduled archive starts.
     * * `day_of_week` - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     */
    public static CompletableFuture<GetOnlineArchivesInvokeResult> getOnlineArchivesPlain(GetOnlineArchivesPlainArgs args) {
        return getOnlineArchivesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.OnlineArchive` Describes the list of all the online archives for a cluster
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOnlineArchivesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOnlineArchives(GetOnlineArchivesArgs.builder()
     *             .projectId(var_.project_id())
     *             .clusterName(var_.cluster_name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * * `db_name` - Name of the database that contains the collection.
     * * `coll_name` -  Name of the collection.
     * * `collection_type` - Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state` - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type` - Type of criteria (DATE, CUSTOM)
     * * `date_field` - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format` - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Schedule
     * 
     * * `type` - Type of schedule (`DAILY`, `MONTHLY`, `WEEKLY`).
     * * `start_hour` - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour` - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute` - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute` - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month` - Day of the month when the scheduled archive starts.
     * * `day_of_week` - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     */
    public static Output<GetOnlineArchivesInvokeResult> getOnlineArchives(GetOnlineArchivesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getOnlineArchives:getOnlineArchives", TypeShape.of(GetOnlineArchivesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.OnlineArchive` Describes the list of all the online archives for a cluster
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOnlineArchivesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOnlineArchives(GetOnlineArchivesArgs.builder()
     *             .projectId(var_.project_id())
     *             .clusterName(var_.cluster_name())
     *             .build());
     * 
     *     }
     * }
     * ```
     * ## Attributes reference
     * 
     * * `db_name` - Name of the database that contains the collection.
     * * `coll_name` -  Name of the collection.
     * * `collection_type` - Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state` - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type` - Type of criteria (DATE, CUSTOM)
     * * `date_field` - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format` - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Schedule
     * 
     * * `type` - Type of schedule (`DAILY`, `MONTHLY`, `WEEKLY`).
     * * `start_hour` - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour` - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute` - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute` - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month` - Day of the month when the scheduled archive starts.
     * * `day_of_week` - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     */
    public static CompletableFuture<GetOnlineArchivesInvokeResult> getOnlineArchivesPlain(GetOnlineArchivesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getOnlineArchives:getOnlineArchives", TypeShape.of(GetOnlineArchivesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.OrgInvitation` describes an invitation for a user to join an Atlas organization.
     * 
     */
    public static Output<GetOrgInvitationResult> getOrgInvitation(GetOrgInvitationArgs args) {
        return getOrgInvitation(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.OrgInvitation` describes an invitation for a user to join an Atlas organization.
     * 
     */
    public static CompletableFuture<GetOrgInvitationResult> getOrgInvitationPlain(GetOrgInvitationPlainArgs args) {
        return getOrgInvitationPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.OrgInvitation` describes an invitation for a user to join an Atlas organization.
     * 
     */
    public static Output<GetOrgInvitationResult> getOrgInvitation(GetOrgInvitationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getOrgInvitation:getOrgInvitation", TypeShape.of(GetOrgInvitationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.OrgInvitation` describes an invitation for a user to join an Atlas organization.
     * 
     */
    public static CompletableFuture<GetOrgInvitationResult> getOrgInvitationPlain(GetOrgInvitationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getOrgInvitation:getOrgInvitation", TypeShape.of(GetOrgInvitationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Organization` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * ### Using project_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .orgId(&#34;&lt;org_id&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args) {
        return getOrganization(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Organization` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * ### Using project_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .orgId(&#34;&lt;org_id&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args) {
        return getOrganizationPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Organization` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * ### Using project_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .orgId(&#34;&lt;org_id&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Organization` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * ### Using project_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .orgId(&#34;&lt;org_id&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getOrganizations` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganizations(GetOrganizationsArgs.builder()
     *             .itemsPerPage(5)
     *             .pageNum(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationsInvokeResult> getOrganizations() {
        return getOrganizations(GetOrganizationsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getOrganizations` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganizations(GetOrganizationsArgs.builder()
     *             .itemsPerPage(5)
     *             .pageNum(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationsInvokeResult> getOrganizationsPlain() {
        return getOrganizationsPlain(GetOrganizationsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getOrganizations` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganizations(GetOrganizationsArgs.builder()
     *             .itemsPerPage(5)
     *             .pageNum(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationsInvokeResult> getOrganizations(GetOrganizationsArgs args) {
        return getOrganizations(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getOrganizations` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganizations(GetOrganizationsArgs.builder()
     *             .itemsPerPage(5)
     *             .pageNum(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationsInvokeResult> getOrganizationsPlain(GetOrganizationsPlainArgs args) {
        return getOrganizationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getOrganizations` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganizations(GetOrganizationsArgs.builder()
     *             .itemsPerPage(5)
     *             .pageNum(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetOrganizationsInvokeResult> getOrganizations(GetOrganizationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getOrganizations:getOrganizations", TypeShape.of(GetOrganizationsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getOrganizations` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganizations(GetOrganizationsArgs.builder()
     *             .itemsPerPage(5)
     *             .pageNum(1)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetOrganizationsInvokeResult> getOrganizationsPlain(GetOrganizationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getOrganizations:getOrganizations", TypeShape.of(GetOrganizationsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `private_endpoint_regional_mode` describe a Private Endpoint Regional Mode. This represents a Private Endpoint Regional Mode Connection that wants to retrieve settings of an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static Output<GetPrivateEndpointRegionalModeResult> getPrivateEndpointRegionalMode(GetPrivateEndpointRegionalModeArgs args) {
        return getPrivateEndpointRegionalMode(args, InvokeOptions.Empty);
    }
    /**
     * `private_endpoint_regional_mode` describe a Private Endpoint Regional Mode. This represents a Private Endpoint Regional Mode Connection that wants to retrieve settings of an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static CompletableFuture<GetPrivateEndpointRegionalModeResult> getPrivateEndpointRegionalModePlain(GetPrivateEndpointRegionalModePlainArgs args) {
        return getPrivateEndpointRegionalModePlain(args, InvokeOptions.Empty);
    }
    /**
     * `private_endpoint_regional_mode` describe a Private Endpoint Regional Mode. This represents a Private Endpoint Regional Mode Connection that wants to retrieve settings of an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static Output<GetPrivateEndpointRegionalModeResult> getPrivateEndpointRegionalMode(GetPrivateEndpointRegionalModeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivateEndpointRegionalMode:getPrivateEndpointRegionalMode", TypeShape.of(GetPrivateEndpointRegionalModeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `private_endpoint_regional_mode` describe a Private Endpoint Regional Mode. This represents a Private Endpoint Regional Mode Connection that wants to retrieve settings of an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static CompletableFuture<GetPrivateEndpointRegionalModeResult> getPrivateEndpointRegionalModePlain(GetPrivateEndpointRegionalModePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivateEndpointRegionalMode:getPrivateEndpointRegionalMode", TypeShape.of(GetPrivateEndpointRegionalModeResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetPrivateLinkEndpointResult> getPrivateLinkEndpoint(GetPrivateLinkEndpointArgs args) {
        return getPrivateLinkEndpoint(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetPrivateLinkEndpointResult> getPrivateLinkEndpointPlain(GetPrivateLinkEndpointPlainArgs args) {
        return getPrivateLinkEndpointPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetPrivateLinkEndpointResult> getPrivateLinkEndpoint(GetPrivateLinkEndpointArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivateLinkEndpoint:getPrivateLinkEndpoint", TypeShape.of(GetPrivateLinkEndpointResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetPrivateLinkEndpointResult> getPrivateLinkEndpointPlain(GetPrivateLinkEndpointPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivateLinkEndpoint:getPrivateLinkEndpoint", TypeShape.of(GetPrivateLinkEndpointResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetPrivateLinkEndpointServiceResult> getPrivateLinkEndpointService(GetPrivateLinkEndpointServiceArgs args) {
        return getPrivateLinkEndpointService(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetPrivateLinkEndpointServiceResult> getPrivateLinkEndpointServicePlain(GetPrivateLinkEndpointServicePlainArgs args) {
        return getPrivateLinkEndpointServicePlain(args, InvokeOptions.Empty);
    }
    public static Output<GetPrivateLinkEndpointServiceResult> getPrivateLinkEndpointService(GetPrivateLinkEndpointServiceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivateLinkEndpointService:getPrivateLinkEndpointService", TypeShape.of(GetPrivateLinkEndpointServiceResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetPrivateLinkEndpointServiceResult> getPrivateLinkEndpointServicePlain(GetPrivateLinkEndpointServicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivateLinkEndpointService:getPrivateLinkEndpointService", TypeShape.of(GetPrivateLinkEndpointServiceResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult> getPrivatelinkEndpointServiceDataFederationOnlineArchive(GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs args) {
        return getPrivatelinkEndpointServiceDataFederationOnlineArchive(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult> getPrivatelinkEndpointServiceDataFederationOnlineArchivePlain(GetPrivatelinkEndpointServiceDataFederationOnlineArchivePlainArgs args) {
        return getPrivatelinkEndpointServiceDataFederationOnlineArchivePlain(args, InvokeOptions.Empty);
    }
    public static Output<GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult> getPrivatelinkEndpointServiceDataFederationOnlineArchive(GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivatelinkEndpointServiceDataFederationOnlineArchive:getPrivatelinkEndpointServiceDataFederationOnlineArchive", TypeShape.of(GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult> getPrivatelinkEndpointServiceDataFederationOnlineArchivePlain(GetPrivatelinkEndpointServiceDataFederationOnlineArchivePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivatelinkEndpointServiceDataFederationOnlineArchive:getPrivatelinkEndpointServiceDataFederationOnlineArchive", TypeShape.of(GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult> getPrivatelinkEndpointServiceDataFederationOnlineArchives(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs args) {
        return getPrivatelinkEndpointServiceDataFederationOnlineArchives(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult> getPrivatelinkEndpointServiceDataFederationOnlineArchivesPlain(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesPlainArgs args) {
        return getPrivatelinkEndpointServiceDataFederationOnlineArchivesPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult> getPrivatelinkEndpointServiceDataFederationOnlineArchives(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivatelinkEndpointServiceDataFederationOnlineArchives:getPrivatelinkEndpointServiceDataFederationOnlineArchives", TypeShape.of(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult> getPrivatelinkEndpointServiceDataFederationOnlineArchivesPlain(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivatelinkEndpointServiceDataFederationOnlineArchives:getPrivatelinkEndpointServiceDataFederationOnlineArchives", TypeShape.of(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetPrivatelinkEndpointServiceServerlessResult> getPrivatelinkEndpointServiceServerless(GetPrivatelinkEndpointServiceServerlessArgs args) {
        return getPrivatelinkEndpointServiceServerless(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetPrivatelinkEndpointServiceServerlessResult> getPrivatelinkEndpointServiceServerlessPlain(GetPrivatelinkEndpointServiceServerlessPlainArgs args) {
        return getPrivatelinkEndpointServiceServerlessPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetPrivatelinkEndpointServiceServerlessResult> getPrivatelinkEndpointServiceServerless(GetPrivatelinkEndpointServiceServerlessArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivatelinkEndpointServiceServerless:getPrivatelinkEndpointServiceServerless", TypeShape.of(GetPrivatelinkEndpointServiceServerlessResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetPrivatelinkEndpointServiceServerlessResult> getPrivatelinkEndpointServiceServerlessPlain(GetPrivatelinkEndpointServiceServerlessPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivatelinkEndpointServiceServerless:getPrivatelinkEndpointServiceServerless", TypeShape.of(GetPrivatelinkEndpointServiceServerlessResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `privatelink_endpoints_service_serverless` Describes the list of all Serverless PrivateLink Endpoint Service resource.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance(&#34;testServerlessInstance&#34;, ServerlessInstanceArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .providerSettingsBackingProviderName(&#34;AWS&#34;)
     *             .providerSettingsProviderName(&#34;SERVERLESS&#34;)
     *             .providerSettingsRegionName(&#34;US_EAST_1&#34;)
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var testPrivatelinkEndpointsServiceServerless = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless(&#34;testPrivatelinkEndpointServerless&#34;, PrivatelinkEndpointServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .providerName(&#34;AWS&#34;)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless(&#34;testPrivatelinkEndpointServiceServerless&#34;, PrivatelinkEndpointServiceServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(&#34;test-db&#34;)
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName(&#34;AWS&#34;)
     *             .comment(&#34;New serverless endpoint&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * ## Example with AZURE
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance(&#34;testServerlessInstance&#34;, ServerlessInstanceArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .providerSettingsBackingProviderName(&#34;AZURE&#34;)
     *             .providerSettingsProviderName(&#34;SERVERLESS&#34;)
     *             .providerSettingsRegionName(&#34;US_EAST&#34;)
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var testPrivatelinkEndpointsServiceServerless = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless(&#34;testPrivatelinkEndpointServerless&#34;, PrivatelinkEndpointServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .providerName(&#34;AZURE&#34;)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless(&#34;testPrivatelinkEndpointServiceServerless&#34;, PrivatelinkEndpointServiceServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(&#34;test-db&#34;)
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName(&#34;AZURE&#34;)
     *             .comment(&#34;New serverless endpoint&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPrivatelinkEndpointsServiceServerlessInvokeResult> getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs args) {
        return getPrivatelinkEndpointsServiceServerless(args, InvokeOptions.Empty);
    }
    /**
     * `privatelink_endpoints_service_serverless` Describes the list of all Serverless PrivateLink Endpoint Service resource.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance(&#34;testServerlessInstance&#34;, ServerlessInstanceArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .providerSettingsBackingProviderName(&#34;AWS&#34;)
     *             .providerSettingsProviderName(&#34;SERVERLESS&#34;)
     *             .providerSettingsRegionName(&#34;US_EAST_1&#34;)
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var testPrivatelinkEndpointsServiceServerless = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless(&#34;testPrivatelinkEndpointServerless&#34;, PrivatelinkEndpointServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .providerName(&#34;AWS&#34;)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless(&#34;testPrivatelinkEndpointServiceServerless&#34;, PrivatelinkEndpointServiceServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(&#34;test-db&#34;)
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName(&#34;AWS&#34;)
     *             .comment(&#34;New serverless endpoint&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * ## Example with AZURE
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance(&#34;testServerlessInstance&#34;, ServerlessInstanceArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .providerSettingsBackingProviderName(&#34;AZURE&#34;)
     *             .providerSettingsProviderName(&#34;SERVERLESS&#34;)
     *             .providerSettingsRegionName(&#34;US_EAST&#34;)
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var testPrivatelinkEndpointsServiceServerless = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless(&#34;testPrivatelinkEndpointServerless&#34;, PrivatelinkEndpointServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .providerName(&#34;AZURE&#34;)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless(&#34;testPrivatelinkEndpointServiceServerless&#34;, PrivatelinkEndpointServiceServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(&#34;test-db&#34;)
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName(&#34;AZURE&#34;)
     *             .comment(&#34;New serverless endpoint&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointsServiceServerlessInvokeResult> getPrivatelinkEndpointsServiceServerlessPlain(GetPrivatelinkEndpointsServiceServerlessPlainArgs args) {
        return getPrivatelinkEndpointsServiceServerlessPlain(args, InvokeOptions.Empty);
    }
    /**
     * `privatelink_endpoints_service_serverless` Describes the list of all Serverless PrivateLink Endpoint Service resource.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance(&#34;testServerlessInstance&#34;, ServerlessInstanceArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .providerSettingsBackingProviderName(&#34;AWS&#34;)
     *             .providerSettingsProviderName(&#34;SERVERLESS&#34;)
     *             .providerSettingsRegionName(&#34;US_EAST_1&#34;)
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var testPrivatelinkEndpointsServiceServerless = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless(&#34;testPrivatelinkEndpointServerless&#34;, PrivatelinkEndpointServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .providerName(&#34;AWS&#34;)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless(&#34;testPrivatelinkEndpointServiceServerless&#34;, PrivatelinkEndpointServiceServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(&#34;test-db&#34;)
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName(&#34;AWS&#34;)
     *             .comment(&#34;New serverless endpoint&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * ## Example with AZURE
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance(&#34;testServerlessInstance&#34;, ServerlessInstanceArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .providerSettingsBackingProviderName(&#34;AZURE&#34;)
     *             .providerSettingsProviderName(&#34;SERVERLESS&#34;)
     *             .providerSettingsRegionName(&#34;US_EAST&#34;)
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var testPrivatelinkEndpointsServiceServerless = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless(&#34;testPrivatelinkEndpointServerless&#34;, PrivatelinkEndpointServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .providerName(&#34;AZURE&#34;)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless(&#34;testPrivatelinkEndpointServiceServerless&#34;, PrivatelinkEndpointServiceServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(&#34;test-db&#34;)
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName(&#34;AZURE&#34;)
     *             .comment(&#34;New serverless endpoint&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetPrivatelinkEndpointsServiceServerlessInvokeResult> getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivatelinkEndpointsServiceServerless:getPrivatelinkEndpointsServiceServerless", TypeShape.of(GetPrivatelinkEndpointsServiceServerlessInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `privatelink_endpoints_service_serverless` Describes the list of all Serverless PrivateLink Endpoint Service resource.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance(&#34;testServerlessInstance&#34;, ServerlessInstanceArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .providerSettingsBackingProviderName(&#34;AWS&#34;)
     *             .providerSettingsProviderName(&#34;SERVERLESS&#34;)
     *             .providerSettingsRegionName(&#34;US_EAST_1&#34;)
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var testPrivatelinkEndpointsServiceServerless = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless(&#34;testPrivatelinkEndpointServerless&#34;, PrivatelinkEndpointServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .providerName(&#34;AWS&#34;)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless(&#34;testPrivatelinkEndpointServiceServerless&#34;, PrivatelinkEndpointServiceServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(&#34;test-db&#34;)
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName(&#34;AWS&#34;)
     *             .comment(&#34;New serverless endpoint&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     * ## Example with AZURE
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance(&#34;testServerlessInstance&#34;, ServerlessInstanceArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .providerSettingsBackingProviderName(&#34;AZURE&#34;)
     *             .providerSettingsProviderName(&#34;SERVERLESS&#34;)
     *             .providerSettingsRegionName(&#34;US_EAST&#34;)
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var testPrivatelinkEndpointsServiceServerless = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless(&#34;testPrivatelinkEndpointServerless&#34;, PrivatelinkEndpointServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(testServerlessInstance.name())
     *             .providerName(&#34;AZURE&#34;)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless(&#34;testPrivatelinkEndpointServiceServerless&#34;, PrivatelinkEndpointServiceServerlessArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .instanceName(&#34;test-db&#34;)
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName(&#34;AZURE&#34;)
     *             .comment(&#34;New serverless endpoint&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointsServiceServerlessInvokeResult> getPrivatelinkEndpointsServiceServerlessPlain(GetPrivatelinkEndpointsServiceServerlessPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivatelinkEndpointsServiceServerless:getPrivatelinkEndpointsServiceServerless", TypeShape.of(GetPrivatelinkEndpointsServiceServerlessInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetProjectResult> getProject() {
        return getProject(GetProjectArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain() {
        return getProjectPlain(GetProjectPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args) {
        return getProject(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args) {
        return getProjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetProjectApiKeyResult> getProjectApiKey(GetProjectApiKeyArgs args) {
        return getProjectApiKey(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetProjectApiKeyResult> getProjectApiKeyPlain(GetProjectApiKeyPlainArgs args) {
        return getProjectApiKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetProjectApiKeyResult> getProjectApiKey(GetProjectApiKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getProjectApiKey:getProjectApiKey", TypeShape.of(GetProjectApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetProjectApiKeyResult> getProjectApiKeyPlain(GetProjectApiKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getProjectApiKey:getProjectApiKey", TypeShape.of(GetProjectApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectApiKey;
     * import com.pulumi.mongodbatlas.ProjectApiKeyArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectApiKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectApiKey = new ProjectApiKey(&#34;testProjectApiKey&#34;, ProjectApiKeyArgs.builder()        
     *             .description(&#34;Description of the API key&#34;)
     *             .projectId(&#34;32b6e34b3d91647abb20e7b8&#34;)
     *             .roleNames(&#34;GROUP_READ_ONLY&#34;)
     *             .build());
     * 
     *         final var testProjectApiKeys = MongodbatlasFunctions.getProjectApiKeys(GetProjectApiKeysArgs.builder()
     *             .itemsPerPage(5)
     *             .pageNum(1)
     *             .projectId(&#34;32b6e34b3d91647abb20e7b8&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectApiKeysInvokeResult> getProjectApiKeys(GetProjectApiKeysArgs args) {
        return getProjectApiKeys(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectApiKey;
     * import com.pulumi.mongodbatlas.ProjectApiKeyArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectApiKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectApiKey = new ProjectApiKey(&#34;testProjectApiKey&#34;, ProjectApiKeyArgs.builder()        
     *             .description(&#34;Description of the API key&#34;)
     *             .projectId(&#34;32b6e34b3d91647abb20e7b8&#34;)
     *             .roleNames(&#34;GROUP_READ_ONLY&#34;)
     *             .build());
     * 
     *         final var testProjectApiKeys = MongodbatlasFunctions.getProjectApiKeys(GetProjectApiKeysArgs.builder()
     *             .itemsPerPage(5)
     *             .pageNum(1)
     *             .projectId(&#34;32b6e34b3d91647abb20e7b8&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectApiKeysInvokeResult> getProjectApiKeysPlain(GetProjectApiKeysPlainArgs args) {
        return getProjectApiKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectApiKey;
     * import com.pulumi.mongodbatlas.ProjectApiKeyArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectApiKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectApiKey = new ProjectApiKey(&#34;testProjectApiKey&#34;, ProjectApiKeyArgs.builder()        
     *             .description(&#34;Description of the API key&#34;)
     *             .projectId(&#34;32b6e34b3d91647abb20e7b8&#34;)
     *             .roleNames(&#34;GROUP_READ_ONLY&#34;)
     *             .build());
     * 
     *         final var testProjectApiKeys = MongodbatlasFunctions.getProjectApiKeys(GetProjectApiKeysArgs.builder()
     *             .itemsPerPage(5)
     *             .pageNum(1)
     *             .projectId(&#34;32b6e34b3d91647abb20e7b8&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectApiKeysInvokeResult> getProjectApiKeys(GetProjectApiKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getProjectApiKeys:getProjectApiKeys", TypeShape.of(GetProjectApiKeysInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectApiKey;
     * import com.pulumi.mongodbatlas.ProjectApiKeyArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectApiKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectApiKey = new ProjectApiKey(&#34;testProjectApiKey&#34;, ProjectApiKeyArgs.builder()        
     *             .description(&#34;Description of the API key&#34;)
     *             .projectId(&#34;32b6e34b3d91647abb20e7b8&#34;)
     *             .roleNames(&#34;GROUP_READ_ONLY&#34;)
     *             .build());
     * 
     *         final var testProjectApiKeys = MongodbatlasFunctions.getProjectApiKeys(GetProjectApiKeysArgs.builder()
     *             .itemsPerPage(5)
     *             .pageNum(1)
     *             .projectId(&#34;32b6e34b3d91647abb20e7b8&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectApiKeysInvokeResult> getProjectApiKeysPlain(GetProjectApiKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getProjectApiKeys:getProjectApiKeys", TypeShape.of(GetProjectApiKeysInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ProjectInvitation` describes an invitation to a user to join an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find GROUP-ID in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetProjectInvitationResult> getProjectInvitation(GetProjectInvitationArgs args) {
        return getProjectInvitation(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ProjectInvitation` describes an invitation to a user to join an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find GROUP-ID in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetProjectInvitationResult> getProjectInvitationPlain(GetProjectInvitationPlainArgs args) {
        return getProjectInvitationPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ProjectInvitation` describes an invitation to a user to join an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find GROUP-ID in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetProjectInvitationResult> getProjectInvitation(GetProjectInvitationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getProjectInvitation:getProjectInvitation", TypeShape.of(GetProjectInvitationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ProjectInvitation` describes an invitation to a user to join an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find GROUP-ID in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetProjectInvitationResult> getProjectInvitationPlain(GetProjectInvitationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getProjectInvitation:getProjectInvitation", TypeShape.of(GetProjectInvitationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ProjectIpAccessList` describes an IP Access List entry resource. The access list grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * When you remove an entry from the access list, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetProjectIpAccessListResult> getProjectIpAccessList(GetProjectIpAccessListArgs args) {
        return getProjectIpAccessList(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ProjectIpAccessList` describes an IP Access List entry resource. The access list grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * When you remove an entry from the access list, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetProjectIpAccessListResult> getProjectIpAccessListPlain(GetProjectIpAccessListPlainArgs args) {
        return getProjectIpAccessListPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ProjectIpAccessList` describes an IP Access List entry resource. The access list grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * When you remove an entry from the access list, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetProjectIpAccessListResult> getProjectIpAccessList(GetProjectIpAccessListArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getProjectIpAccessList:getProjectIpAccessList", TypeShape.of(GetProjectIpAccessListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ProjectIpAccessList` describes an IP Access List entry resource. The access list grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * When you remove an entry from the access list, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetProjectIpAccessListResult> getProjectIpAccessListPlain(GetProjectIpAccessListPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getProjectIpAccessList:getProjectIpAccessList", TypeShape.of(GetProjectIpAccessListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getProjects` describe all Projects. This represents projects that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testRolesOrgId = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project(&#34;testProject&#34;, ProjectArgs.builder()        
     *             .orgId(testRolesOrgId.applyValue(getRolesOrgIdResult -&gt; getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId(&#34;5e0fa8c99ccf641c722fe645&#34;)
     *                     .roleNames(&#34;GROUP_OWNER&#34;)
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId(&#34;5e1dd7b4f2a30ba80a70cd4rw&#34;)
     *                     .roleNames(                    
     *                         &#34;GROUP_READ_ONLY&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;)
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name(&#34;atlas.project.deployment.clusters&#34;)
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testProjects = MongodbatlasFunctions.getProjects(GetProjectsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectsInvokeResult> getProjects() {
        return getProjects(GetProjectsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getProjects` describe all Projects. This represents projects that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testRolesOrgId = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project(&#34;testProject&#34;, ProjectArgs.builder()        
     *             .orgId(testRolesOrgId.applyValue(getRolesOrgIdResult -&gt; getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId(&#34;5e0fa8c99ccf641c722fe645&#34;)
     *                     .roleNames(&#34;GROUP_OWNER&#34;)
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId(&#34;5e1dd7b4f2a30ba80a70cd4rw&#34;)
     *                     .roleNames(                    
     *                         &#34;GROUP_READ_ONLY&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;)
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name(&#34;atlas.project.deployment.clusters&#34;)
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testProjects = MongodbatlasFunctions.getProjects(GetProjectsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectsInvokeResult> getProjectsPlain() {
        return getProjectsPlain(GetProjectsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getProjects` describe all Projects. This represents projects that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testRolesOrgId = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project(&#34;testProject&#34;, ProjectArgs.builder()        
     *             .orgId(testRolesOrgId.applyValue(getRolesOrgIdResult -&gt; getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId(&#34;5e0fa8c99ccf641c722fe645&#34;)
     *                     .roleNames(&#34;GROUP_OWNER&#34;)
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId(&#34;5e1dd7b4f2a30ba80a70cd4rw&#34;)
     *                     .roleNames(                    
     *                         &#34;GROUP_READ_ONLY&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;)
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name(&#34;atlas.project.deployment.clusters&#34;)
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testProjects = MongodbatlasFunctions.getProjects(GetProjectsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectsInvokeResult> getProjects(GetProjectsArgs args) {
        return getProjects(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getProjects` describe all Projects. This represents projects that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testRolesOrgId = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project(&#34;testProject&#34;, ProjectArgs.builder()        
     *             .orgId(testRolesOrgId.applyValue(getRolesOrgIdResult -&gt; getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId(&#34;5e0fa8c99ccf641c722fe645&#34;)
     *                     .roleNames(&#34;GROUP_OWNER&#34;)
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId(&#34;5e1dd7b4f2a30ba80a70cd4rw&#34;)
     *                     .roleNames(                    
     *                         &#34;GROUP_READ_ONLY&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;)
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name(&#34;atlas.project.deployment.clusters&#34;)
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testProjects = MongodbatlasFunctions.getProjects(GetProjectsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectsInvokeResult> getProjectsPlain(GetProjectsPlainArgs args) {
        return getProjectsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getProjects` describe all Projects. This represents projects that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testRolesOrgId = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project(&#34;testProject&#34;, ProjectArgs.builder()        
     *             .orgId(testRolesOrgId.applyValue(getRolesOrgIdResult -&gt; getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId(&#34;5e0fa8c99ccf641c722fe645&#34;)
     *                     .roleNames(&#34;GROUP_OWNER&#34;)
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId(&#34;5e1dd7b4f2a30ba80a70cd4rw&#34;)
     *                     .roleNames(                    
     *                         &#34;GROUP_READ_ONLY&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;)
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name(&#34;atlas.project.deployment.clusters&#34;)
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testProjects = MongodbatlasFunctions.getProjects(GetProjectsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetProjectsInvokeResult> getProjects(GetProjectsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getProjects:getProjects", TypeShape.of(GetProjectsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getProjects` describe all Projects. This represents projects that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testRolesOrgId = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project(&#34;testProject&#34;, ProjectArgs.builder()        
     *             .orgId(testRolesOrgId.applyValue(getRolesOrgIdResult -&gt; getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId(&#34;5e0fa8c99ccf641c722fe645&#34;)
     *                     .roleNames(&#34;GROUP_OWNER&#34;)
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId(&#34;5e1dd7b4f2a30ba80a70cd4rw&#34;)
     *                     .roleNames(                    
     *                         &#34;GROUP_READ_ONLY&#34;,
     *                         &#34;GROUP_DATA_ACCESS_READ_WRITE&#34;)
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name(&#34;atlas.project.deployment.clusters&#34;)
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testProjects = MongodbatlasFunctions.getProjects(GetProjectsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetProjectsInvokeResult> getProjectsPlain(GetProjectsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getProjects:getProjects", TypeShape.of(GetProjectsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Roles Org ID. This represents a Roles Org ID.
     * 
     * ## Example Usage
     * ### Using project_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         ctx.export(&#34;orgId&#34;, test.applyValue(getRolesOrgIdResult -&gt; getRolesOrgIdResult.orgId()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRolesOrgIdResult> getRolesOrgId() {
        return getRolesOrgId(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Roles Org ID. This represents a Roles Org ID.
     * 
     * ## Example Usage
     * ### Using project_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         ctx.export(&#34;orgId&#34;, test.applyValue(getRolesOrgIdResult -&gt; getRolesOrgIdResult.orgId()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRolesOrgIdResult> getRolesOrgIdPlain() {
        return getRolesOrgIdPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Roles Org ID. This represents a Roles Org ID.
     * 
     * ## Example Usage
     * ### Using project_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         ctx.export(&#34;orgId&#34;, test.applyValue(getRolesOrgIdResult -&gt; getRolesOrgIdResult.orgId()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRolesOrgIdResult> getRolesOrgId(InvokeArgs args) {
        return getRolesOrgId(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Roles Org ID. This represents a Roles Org ID.
     * 
     * ## Example Usage
     * ### Using project_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         ctx.export(&#34;orgId&#34;, test.applyValue(getRolesOrgIdResult -&gt; getRolesOrgIdResult.orgId()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRolesOrgIdResult> getRolesOrgIdPlain(InvokeArgs args) {
        return getRolesOrgIdPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Roles Org ID. This represents a Roles Org ID.
     * 
     * ## Example Usage
     * ### Using project_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         ctx.export(&#34;orgId&#34;, test.applyValue(getRolesOrgIdResult -&gt; getRolesOrgIdResult.orgId()));
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetRolesOrgIdResult> getRolesOrgId(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getRolesOrgId:getRolesOrgId", TypeShape.of(GetRolesOrgIdResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Roles Org ID. This represents a Roles Org ID.
     * 
     * ## Example Usage
     * ### Using project_id attribute to query
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         ctx.export(&#34;orgId&#34;, test.applyValue(getRolesOrgIdResult -&gt; getRolesOrgIdResult.orgId()));
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetRolesOrgIdResult> getRolesOrgIdPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getRolesOrgId:getRolesOrgId", TypeShape.of(GetRolesOrgIdResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.SearchDeployment` describes a search node deployment.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchDeployment(GetSearchDeploymentArgs.builder()
     *             .clusterName(&#34;&lt;CLUSTER_NAME&gt;&#34;)
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSearchDeploymentResult> getSearchDeployment(GetSearchDeploymentArgs args) {
        return getSearchDeployment(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.SearchDeployment` describes a search node deployment.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchDeployment(GetSearchDeploymentArgs.builder()
     *             .clusterName(&#34;&lt;CLUSTER_NAME&gt;&#34;)
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSearchDeploymentResult> getSearchDeploymentPlain(GetSearchDeploymentPlainArgs args) {
        return getSearchDeploymentPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.SearchDeployment` describes a search node deployment.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchDeployment(GetSearchDeploymentArgs.builder()
     *             .clusterName(&#34;&lt;CLUSTER_NAME&gt;&#34;)
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSearchDeploymentResult> getSearchDeployment(GetSearchDeploymentArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSearchDeployment:getSearchDeployment", TypeShape.of(GetSearchDeploymentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.SearchDeployment` describes a search node deployment.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchDeployment(GetSearchDeploymentArgs.builder()
     *             .clusterName(&#34;&lt;CLUSTER_NAME&gt;&#34;)
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSearchDeploymentResult> getSearchDeploymentPlain(GetSearchDeploymentPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSearchDeployment:getSearchDeployment", TypeShape.of(GetSearchDeploymentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.SearchIndex` describe a single search indexes. This represents a single search index that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndex(GetSearchIndexArgs.builder()
     *             .clusterName(&#34;&lt;CLUSTER_NAME&gt;&#34;)
     *             .indexId(&#34;&lt;INDEX_ID&#34;)
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSearchIndexResult> getSearchIndex(GetSearchIndexArgs args) {
        return getSearchIndex(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.SearchIndex` describe a single search indexes. This represents a single search index that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndex(GetSearchIndexArgs.builder()
     *             .clusterName(&#34;&lt;CLUSTER_NAME&gt;&#34;)
     *             .indexId(&#34;&lt;INDEX_ID&#34;)
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSearchIndexResult> getSearchIndexPlain(GetSearchIndexPlainArgs args) {
        return getSearchIndexPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.SearchIndex` describe a single search indexes. This represents a single search index that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndex(GetSearchIndexArgs.builder()
     *             .clusterName(&#34;&lt;CLUSTER_NAME&gt;&#34;)
     *             .indexId(&#34;&lt;INDEX_ID&#34;)
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSearchIndexResult> getSearchIndex(GetSearchIndexArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSearchIndex:getSearchIndex", TypeShape.of(GetSearchIndexResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.SearchIndex` describe a single search indexes. This represents a single search index that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndex(GetSearchIndexArgs.builder()
     *             .clusterName(&#34;&lt;CLUSTER_NAME&gt;&#34;)
     *             .indexId(&#34;&lt;INDEX_ID&#34;)
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSearchIndexResult> getSearchIndexPlain(GetSearchIndexPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSearchIndex:getSearchIndex", TypeShape.of(GetSearchIndexResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getSearchIndexes` describe all search indexes. This represents search indexes that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndex(GetSearchIndexArgs.builder()
     *             .clusterName(&#34;&lt;CLUSTER_NAME&gt;&#34;)
     *             .collectionName(&#34;&lt;COLLECTION_NAME&gt;&#34;)
     *             .databaseName(&#34;&lt;DATABASE_NAME&gt;&#34;)
     *             .itemsPerPage(100)
     *             .pageNum(1)
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSearchIndexesInvokeResult> getSearchIndexes(GetSearchIndexesArgs args) {
        return getSearchIndexes(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getSearchIndexes` describe all search indexes. This represents search indexes that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndex(GetSearchIndexArgs.builder()
     *             .clusterName(&#34;&lt;CLUSTER_NAME&gt;&#34;)
     *             .collectionName(&#34;&lt;COLLECTION_NAME&gt;&#34;)
     *             .databaseName(&#34;&lt;DATABASE_NAME&gt;&#34;)
     *             .itemsPerPage(100)
     *             .pageNum(1)
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSearchIndexesInvokeResult> getSearchIndexesPlain(GetSearchIndexesPlainArgs args) {
        return getSearchIndexesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getSearchIndexes` describe all search indexes. This represents search indexes that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndex(GetSearchIndexArgs.builder()
     *             .clusterName(&#34;&lt;CLUSTER_NAME&gt;&#34;)
     *             .collectionName(&#34;&lt;COLLECTION_NAME&gt;&#34;)
     *             .databaseName(&#34;&lt;DATABASE_NAME&gt;&#34;)
     *             .itemsPerPage(100)
     *             .pageNum(1)
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetSearchIndexesInvokeResult> getSearchIndexes(GetSearchIndexesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSearchIndexes:getSearchIndexes", TypeShape.of(GetSearchIndexesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getSearchIndexes` describe all search indexes. This represents search indexes that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndex(GetSearchIndexArgs.builder()
     *             .clusterName(&#34;&lt;CLUSTER_NAME&gt;&#34;)
     *             .collectionName(&#34;&lt;COLLECTION_NAME&gt;&#34;)
     *             .databaseName(&#34;&lt;DATABASE_NAME&gt;&#34;)
     *             .itemsPerPage(100)
     *             .pageNum(1)
     *             .projectId(&#34;&lt;PROJECT_ID&gt;&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetSearchIndexesInvokeResult> getSearchIndexesPlain(GetSearchIndexesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSearchIndexes:getSearchIndexes", TypeShape.of(GetSearchIndexesInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetServerlessInstanceResult> getServerlessInstance(GetServerlessInstanceArgs args) {
        return getServerlessInstance(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetServerlessInstanceResult> getServerlessInstancePlain(GetServerlessInstancePlainArgs args) {
        return getServerlessInstancePlain(args, InvokeOptions.Empty);
    }
    public static Output<GetServerlessInstanceResult> getServerlessInstance(GetServerlessInstanceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getServerlessInstance:getServerlessInstance", TypeShape.of(GetServerlessInstanceResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetServerlessInstanceResult> getServerlessInstancePlain(GetServerlessInstancePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getServerlessInstance:getServerlessInstance", TypeShape.of(GetServerlessInstanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getServerlessInstances` describe all serverless instances. This represents serverless instances that have been created for the specified group id.
     * 
     * &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
     * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetServerlessInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataServerless = MongodbatlasFunctions.getServerlessInstances(GetServerlessInstancesArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetServerlessInstancesInvokeResult> getServerlessInstances(GetServerlessInstancesArgs args) {
        return getServerlessInstances(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getServerlessInstances` describe all serverless instances. This represents serverless instances that have been created for the specified group id.
     * 
     * &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
     * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetServerlessInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataServerless = MongodbatlasFunctions.getServerlessInstances(GetServerlessInstancesArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetServerlessInstancesInvokeResult> getServerlessInstancesPlain(GetServerlessInstancesPlainArgs args) {
        return getServerlessInstancesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getServerlessInstances` describe all serverless instances. This represents serverless instances that have been created for the specified group id.
     * 
     * &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
     * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetServerlessInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataServerless = MongodbatlasFunctions.getServerlessInstances(GetServerlessInstancesArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetServerlessInstancesInvokeResult> getServerlessInstances(GetServerlessInstancesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getServerlessInstances:getServerlessInstances", TypeShape.of(GetServerlessInstancesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getServerlessInstances` describe all serverless instances. This represents serverless instances that have been created for the specified group id.
     * 
     * &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
     * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetServerlessInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataServerless = MongodbatlasFunctions.getServerlessInstances(GetServerlessInstancesArgs.builder()
     *             .projectId(&#34;&lt;PROJECT_ID&#34;)
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetServerlessInstancesInvokeResult> getServerlessInstancesPlain(GetServerlessInstancesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getServerlessInstances:getServerlessInstances", TypeShape.of(GetServerlessInstancesInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetSharedTierRestoreJobResult> getSharedTierRestoreJob(GetSharedTierRestoreJobArgs args) {
        return getSharedTierRestoreJob(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetSharedTierRestoreJobResult> getSharedTierRestoreJobPlain(GetSharedTierRestoreJobPlainArgs args) {
        return getSharedTierRestoreJobPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetSharedTierRestoreJobResult> getSharedTierRestoreJob(GetSharedTierRestoreJobArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSharedTierRestoreJob:getSharedTierRestoreJob", TypeShape.of(GetSharedTierRestoreJobResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetSharedTierRestoreJobResult> getSharedTierRestoreJobPlain(GetSharedTierRestoreJobPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSharedTierRestoreJob:getSharedTierRestoreJob", TypeShape.of(GetSharedTierRestoreJobResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetSharedTierRestoreJobsInvokeResult> getSharedTierRestoreJobs(GetSharedTierRestoreJobsArgs args) {
        return getSharedTierRestoreJobs(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetSharedTierRestoreJobsInvokeResult> getSharedTierRestoreJobsPlain(GetSharedTierRestoreJobsPlainArgs args) {
        return getSharedTierRestoreJobsPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetSharedTierRestoreJobsInvokeResult> getSharedTierRestoreJobs(GetSharedTierRestoreJobsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSharedTierRestoreJobs:getSharedTierRestoreJobs", TypeShape.of(GetSharedTierRestoreJobsInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetSharedTierRestoreJobsInvokeResult> getSharedTierRestoreJobsPlain(GetSharedTierRestoreJobsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSharedTierRestoreJobs:getSharedTierRestoreJobs", TypeShape.of(GetSharedTierRestoreJobsInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetSharedTierSnapshotResult> getSharedTierSnapshot(GetSharedTierSnapshotArgs args) {
        return getSharedTierSnapshot(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetSharedTierSnapshotResult> getSharedTierSnapshotPlain(GetSharedTierSnapshotPlainArgs args) {
        return getSharedTierSnapshotPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetSharedTierSnapshotResult> getSharedTierSnapshot(GetSharedTierSnapshotArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSharedTierSnapshot:getSharedTierSnapshot", TypeShape.of(GetSharedTierSnapshotResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetSharedTierSnapshotResult> getSharedTierSnapshotPlain(GetSharedTierSnapshotPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSharedTierSnapshot:getSharedTierSnapshot", TypeShape.of(GetSharedTierSnapshotResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetSharedTierSnapshotsInvokeResult> getSharedTierSnapshots(GetSharedTierSnapshotsArgs args) {
        return getSharedTierSnapshots(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetSharedTierSnapshotsInvokeResult> getSharedTierSnapshotsPlain(GetSharedTierSnapshotsPlainArgs args) {
        return getSharedTierSnapshotsPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetSharedTierSnapshotsInvokeResult> getSharedTierSnapshots(GetSharedTierSnapshotsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSharedTierSnapshots:getSharedTierSnapshots", TypeShape.of(GetSharedTierSnapshotsInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetSharedTierSnapshotsInvokeResult> getSharedTierSnapshotsPlain(GetSharedTierSnapshotsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSharedTierSnapshots:getSharedTierSnapshots", TypeShape.of(GetSharedTierSnapshotsInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetTeamResult> getTeam(GetTeamArgs args) {
        return getTeam(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetTeamResult> getTeamPlain(GetTeamPlainArgs args) {
        return getTeamPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetTeamResult> getTeam(GetTeamArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getTeam:getTeam", TypeShape.of(GetTeamResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetTeamResult> getTeamPlain(GetTeamPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getTeam:getTeam", TypeShape.of(GetTeamResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetTeamsResult> getTeams(GetTeamsArgs args) {
        return getTeams(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetTeamsResult> getTeamsPlain(GetTeamsPlainArgs args) {
        return getTeamsPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetTeamsResult> getTeams(GetTeamsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getTeams:getTeams", TypeShape.of(GetTeamsResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetTeamsResult> getTeamsPlain(GetTeamsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getTeams:getTeams", TypeShape.of(GetTeamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ThirdPartyIntegration` describe a Third-Party Integration Settings for the given type.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatadog = new ThirdPartyIntegration(&#34;testDatadog&#34;, ThirdPartyIntegrationArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .type(&#34;DATADOG&#34;)
     *             .apiKey(&#34;&lt;API-KEY&gt;&#34;)
     *             .region(&#34;&lt;REGION&gt;&#34;)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegration(GetThirdPartyIntegrationArgs.builder()
     *             .projectId(testDatadog.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetThirdPartyIntegrationResult> getThirdPartyIntegration(GetThirdPartyIntegrationArgs args) {
        return getThirdPartyIntegration(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ThirdPartyIntegration` describe a Third-Party Integration Settings for the given type.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatadog = new ThirdPartyIntegration(&#34;testDatadog&#34;, ThirdPartyIntegrationArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .type(&#34;DATADOG&#34;)
     *             .apiKey(&#34;&lt;API-KEY&gt;&#34;)
     *             .region(&#34;&lt;REGION&gt;&#34;)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegration(GetThirdPartyIntegrationArgs.builder()
     *             .projectId(testDatadog.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetThirdPartyIntegrationResult> getThirdPartyIntegrationPlain(GetThirdPartyIntegrationPlainArgs args) {
        return getThirdPartyIntegrationPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ThirdPartyIntegration` describe a Third-Party Integration Settings for the given type.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatadog = new ThirdPartyIntegration(&#34;testDatadog&#34;, ThirdPartyIntegrationArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .type(&#34;DATADOG&#34;)
     *             .apiKey(&#34;&lt;API-KEY&gt;&#34;)
     *             .region(&#34;&lt;REGION&gt;&#34;)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegration(GetThirdPartyIntegrationArgs.builder()
     *             .projectId(testDatadog.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetThirdPartyIntegrationResult> getThirdPartyIntegration(GetThirdPartyIntegrationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getThirdPartyIntegration:getThirdPartyIntegration", TypeShape.of(GetThirdPartyIntegrationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ThirdPartyIntegration` describe a Third-Party Integration Settings for the given type.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatadog = new ThirdPartyIntegration(&#34;testDatadog&#34;, ThirdPartyIntegrationArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .type(&#34;DATADOG&#34;)
     *             .apiKey(&#34;&lt;API-KEY&gt;&#34;)
     *             .region(&#34;&lt;REGION&gt;&#34;)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegration(GetThirdPartyIntegrationArgs.builder()
     *             .projectId(testDatadog.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetThirdPartyIntegrationResult> getThirdPartyIntegrationPlain(GetThirdPartyIntegrationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getThirdPartyIntegration:getThirdPartyIntegration", TypeShape.of(GetThirdPartyIntegrationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getThirdPartyIntegrations` describe all Third-Party Integration Settings. This represents two Third-Party services `PAGER_DUTY` and `DATADOG`
     * applied across the project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPagerDuty = new ThirdPartyIntegration(&#34;testPagerDuty&#34;, ThirdPartyIntegrationArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .type(&#34;PAGER_DUTY&#34;)
     *             .serviceKey(&#34;&lt;PAGER-DUTY-SERVICE-KEY&gt;&#34;)
     *             .build());
     * 
     *         var testDatadog = new ThirdPartyIntegration(&#34;testDatadog&#34;, ThirdPartyIntegrationArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .type(&#34;DATADOG&#34;)
     *             .apiKey(&#34;&lt;API-KEY&gt;&#34;)
     *             .region(&#34;&lt;REGION&gt;&#34;)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegrations(GetThirdPartyIntegrationsArgs.builder()
     *             .projectId(testPagerDuty.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetThirdPartyIntegrationsInvokeResult> getThirdPartyIntegrations(GetThirdPartyIntegrationsArgs args) {
        return getThirdPartyIntegrations(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getThirdPartyIntegrations` describe all Third-Party Integration Settings. This represents two Third-Party services `PAGER_DUTY` and `DATADOG`
     * applied across the project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPagerDuty = new ThirdPartyIntegration(&#34;testPagerDuty&#34;, ThirdPartyIntegrationArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .type(&#34;PAGER_DUTY&#34;)
     *             .serviceKey(&#34;&lt;PAGER-DUTY-SERVICE-KEY&gt;&#34;)
     *             .build());
     * 
     *         var testDatadog = new ThirdPartyIntegration(&#34;testDatadog&#34;, ThirdPartyIntegrationArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .type(&#34;DATADOG&#34;)
     *             .apiKey(&#34;&lt;API-KEY&gt;&#34;)
     *             .region(&#34;&lt;REGION&gt;&#34;)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegrations(GetThirdPartyIntegrationsArgs.builder()
     *             .projectId(testPagerDuty.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetThirdPartyIntegrationsInvokeResult> getThirdPartyIntegrationsPlain(GetThirdPartyIntegrationsPlainArgs args) {
        return getThirdPartyIntegrationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getThirdPartyIntegrations` describe all Third-Party Integration Settings. This represents two Third-Party services `PAGER_DUTY` and `DATADOG`
     * applied across the project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPagerDuty = new ThirdPartyIntegration(&#34;testPagerDuty&#34;, ThirdPartyIntegrationArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .type(&#34;PAGER_DUTY&#34;)
     *             .serviceKey(&#34;&lt;PAGER-DUTY-SERVICE-KEY&gt;&#34;)
     *             .build());
     * 
     *         var testDatadog = new ThirdPartyIntegration(&#34;testDatadog&#34;, ThirdPartyIntegrationArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .type(&#34;DATADOG&#34;)
     *             .apiKey(&#34;&lt;API-KEY&gt;&#34;)
     *             .region(&#34;&lt;REGION&gt;&#34;)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegrations(GetThirdPartyIntegrationsArgs.builder()
     *             .projectId(testPagerDuty.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static Output<GetThirdPartyIntegrationsInvokeResult> getThirdPartyIntegrations(GetThirdPartyIntegrationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getThirdPartyIntegrations:getThirdPartyIntegrations", TypeShape.of(GetThirdPartyIntegrationsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getThirdPartyIntegrations` describe all Third-Party Integration Settings. This represents two Third-Party services `PAGER_DUTY` and `DATADOG`
     * applied across the project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * ```java
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPagerDuty = new ThirdPartyIntegration(&#34;testPagerDuty&#34;, ThirdPartyIntegrationArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .type(&#34;PAGER_DUTY&#34;)
     *             .serviceKey(&#34;&lt;PAGER-DUTY-SERVICE-KEY&gt;&#34;)
     *             .build());
     * 
     *         var testDatadog = new ThirdPartyIntegration(&#34;testDatadog&#34;, ThirdPartyIntegrationArgs.builder()        
     *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
     *             .type(&#34;DATADOG&#34;)
     *             .apiKey(&#34;&lt;API-KEY&gt;&#34;)
     *             .region(&#34;&lt;REGION&gt;&#34;)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegrations(GetThirdPartyIntegrationsArgs.builder()
     *             .projectId(testPagerDuty.projectId())
     *             .build());
     * 
     *     }
     * }
     * ```
     * 
     */
    public static CompletableFuture<GetThirdPartyIntegrationsInvokeResult> getThirdPartyIntegrationsPlain(GetThirdPartyIntegrationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getThirdPartyIntegrations:getThirdPartyIntegrations", TypeShape.of(GetThirdPartyIntegrationsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     */
    public static Output<GetX509AuthenticationDatabaseUserResult> getX509AuthenticationDatabaseUser(GetX509AuthenticationDatabaseUserArgs args) {
        return getX509AuthenticationDatabaseUser(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     */
    public static CompletableFuture<GetX509AuthenticationDatabaseUserResult> getX509AuthenticationDatabaseUserPlain(GetX509AuthenticationDatabaseUserPlainArgs args) {
        return getX509AuthenticationDatabaseUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     */
    public static Output<GetX509AuthenticationDatabaseUserResult> getX509AuthenticationDatabaseUser(GetX509AuthenticationDatabaseUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getX509AuthenticationDatabaseUser:getX509AuthenticationDatabaseUser", TypeShape.of(GetX509AuthenticationDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     */
    public static CompletableFuture<GetX509AuthenticationDatabaseUserResult> getX509AuthenticationDatabaseUserPlain(GetX509AuthenticationDatabaseUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getX509AuthenticationDatabaseUser:getX509AuthenticationDatabaseUser", TypeShape.of(GetX509AuthenticationDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
}
