// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.TypeShape;
import com.pulumi.deployment.Deployment;
import com.pulumi.deployment.InvokeOptions;
import com.pulumi.mongodbatlas.Utilities;
import com.pulumi.mongodbatlas.inputs.Get509AuthenticationDatabaseUserArgs;
import com.pulumi.mongodbatlas.inputs.Get509AuthenticationDatabaseUserPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAccessListApiKeyArgs;
import com.pulumi.mongodbatlas.inputs.GetAccessListApiKeyPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAccessListApiKeysArgs;
import com.pulumi.mongodbatlas.inputs.GetAccessListApiKeysPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAdvancedClusterArgs;
import com.pulumi.mongodbatlas.inputs.GetAdvancedClusterPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAdvancedClustersArgs;
import com.pulumi.mongodbatlas.inputs.GetAdvancedClustersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationsArgs;
import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetApiKeyArgs;
import com.pulumi.mongodbatlas.inputs.GetApiKeyPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetApiKeysArgs;
import com.pulumi.mongodbatlas.inputs.GetApiKeysPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
import com.pulumi.mongodbatlas.inputs.GetAtlasUserPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
import com.pulumi.mongodbatlas.inputs.GetAtlasUsersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetAuditingArgs;
import com.pulumi.mongodbatlas.inputs.GetAuditingPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetBackupCompliancePolicyArgs;
import com.pulumi.mongodbatlas.inputs.GetBackupCompliancePolicyPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupScheduleArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSchedulePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketsArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobsArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobsArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotsArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetClusterArgs;
import com.pulumi.mongodbatlas.inputs.GetClusterOutageSimulationArgs;
import com.pulumi.mongodbatlas.inputs.GetClusterOutageSimulationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetClusterPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
import com.pulumi.mongodbatlas.inputs.GetClustersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCustomDbRoleArgs;
import com.pulumi.mongodbatlas.inputs.GetCustomDbRolePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCustomDbRolesArgs;
import com.pulumi.mongodbatlas.inputs.GetCustomDbRolesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetCustomDnsConfigurationClusterAwsArgs;
import com.pulumi.mongodbatlas.inputs.GetCustomDnsConfigurationClusterAwsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelinePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelinesArgs;
import com.pulumi.mongodbatlas.inputs.GetDataLakePipelinesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetDatabaseUserArgs;
import com.pulumi.mongodbatlas.inputs.GetDatabaseUserPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetEventTriggerArgs;
import com.pulumi.mongodbatlas.inputs.GetEventTriggerPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetEventTriggersArgs;
import com.pulumi.mongodbatlas.inputs.GetEventTriggersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancesArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitsArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProviderArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProviderPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProvidersArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProvidersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigsArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingsArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetGlobalClusterConfigArgs;
import com.pulumi.mongodbatlas.inputs.GetGlobalClusterConfigPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetLdapConfigurationArgs;
import com.pulumi.mongodbatlas.inputs.GetLdapConfigurationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetLdapVerifyArgs;
import com.pulumi.mongodbatlas.inputs.GetLdapVerifyPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetMaintenanceWindowArgs;
import com.pulumi.mongodbatlas.inputs.GetMaintenanceWindowPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkContainerArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkContainerPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkContainersArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkContainersPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringsArgs;
import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetOnlineArchiveArgs;
import com.pulumi.mongodbatlas.inputs.GetOnlineArchivePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetOnlineArchivesArgs;
import com.pulumi.mongodbatlas.inputs.GetOnlineArchivesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetOrgInvitationArgs;
import com.pulumi.mongodbatlas.inputs.GetOrgInvitationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetOrganizationArgs;
import com.pulumi.mongodbatlas.inputs.GetOrganizationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
import com.pulumi.mongodbatlas.inputs.GetOrganizationsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivateEndpointRegionalModeArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivateEndpointRegionalModePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointServiceArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointServicePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchivePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchivesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceServerlessArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceServerlessPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectApiKeyArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectApiKeyPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectApiKeysArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectApiKeysPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectInvitationArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectInvitationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
import com.pulumi.mongodbatlas.inputs.GetProjectsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetPushBasedLogExportArgs;
import com.pulumi.mongodbatlas.inputs.GetPushBasedLogExportPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentArgs;
import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
import com.pulumi.mongodbatlas.inputs.GetSearchIndexPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSearchIndexesArgs;
import com.pulumi.mongodbatlas.inputs.GetSearchIndexesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetServerlessInstanceArgs;
import com.pulumi.mongodbatlas.inputs.GetServerlessInstancePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetServerlessInstancesArgs;
import com.pulumi.mongodbatlas.inputs.GetServerlessInstancesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierRestoreJobArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierRestoreJobPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierRestoreJobsArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierRestoreJobsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierSnapshotArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierSnapshotPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierSnapshotsArgs;
import com.pulumi.mongodbatlas.inputs.GetSharedTierSnapshotsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetStreamConnectionArgs;
import com.pulumi.mongodbatlas.inputs.GetStreamConnectionPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetStreamConnectionsArgs;
import com.pulumi.mongodbatlas.inputs.GetStreamConnectionsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetStreamInstanceArgs;
import com.pulumi.mongodbatlas.inputs.GetStreamInstancePlainArgs;
import com.pulumi.mongodbatlas.inputs.GetStreamInstancesArgs;
import com.pulumi.mongodbatlas.inputs.GetStreamInstancesPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetTeamArgs;
import com.pulumi.mongodbatlas.inputs.GetTeamPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetTeamsArgs;
import com.pulumi.mongodbatlas.inputs.GetTeamsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationArgs;
import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationsArgs;
import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationsPlainArgs;
import com.pulumi.mongodbatlas.inputs.GetX509AuthenticationDatabaseUserArgs;
import com.pulumi.mongodbatlas.inputs.GetX509AuthenticationDatabaseUserPlainArgs;
import com.pulumi.mongodbatlas.outputs.Get509AuthenticationDatabaseUserResult;
import com.pulumi.mongodbatlas.outputs.GetAccessListApiKeyResult;
import com.pulumi.mongodbatlas.outputs.GetAccessListApiKeysInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetAdvancedClusterResult;
import com.pulumi.mongodbatlas.outputs.GetAdvancedClustersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetAlertConfigurationResult;
import com.pulumi.mongodbatlas.outputs.GetAlertConfigurationsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetApiKeyResult;
import com.pulumi.mongodbatlas.outputs.GetApiKeysInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetAtlasUserResult;
import com.pulumi.mongodbatlas.outputs.GetAtlasUsersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetAuditingResult;
import com.pulumi.mongodbatlas.outputs.GetBackupCompliancePolicyResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupScheduleResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotExportBucketResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotExportBucketsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotExportJobResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotExportJobsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotRestoreJobResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotRestoreJobsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotResult;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetCloudProviderAccessSetupResult;
import com.pulumi.mongodbatlas.outputs.GetClusterOutageSimulationResult;
import com.pulumi.mongodbatlas.outputs.GetClusterResult;
import com.pulumi.mongodbatlas.outputs.GetClustersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetControlPlaneIpAddressesResult;
import com.pulumi.mongodbatlas.outputs.GetCustomDbRoleResult;
import com.pulumi.mongodbatlas.outputs.GetCustomDbRolesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetCustomDnsConfigurationClusterAwsResult;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelineResult;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelineRunResult;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelineRunsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetDataLakePipelinesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetDatabaseUserResult;
import com.pulumi.mongodbatlas.outputs.GetDatabaseUsersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetEventTriggerResult;
import com.pulumi.mongodbatlas.outputs.GetEventTriggersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedDatabaseInstanceResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedDatabaseInstancesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedQueryLimitResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedQueryLimitsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsIdentityProviderResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsIdentityProvidersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsOrgConfigResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsOrgConfigsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsOrgRoleMappingResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsOrgRoleMappingsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsResult;
import com.pulumi.mongodbatlas.outputs.GetGlobalClusterConfigResult;
import com.pulumi.mongodbatlas.outputs.GetLdapConfigurationResult;
import com.pulumi.mongodbatlas.outputs.GetLdapVerifyResult;
import com.pulumi.mongodbatlas.outputs.GetMaintenanceWindowResult;
import com.pulumi.mongodbatlas.outputs.GetNetworkContainerResult;
import com.pulumi.mongodbatlas.outputs.GetNetworkContainersInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetNetworkPeeringResult;
import com.pulumi.mongodbatlas.outputs.GetNetworkPeeringsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetOnlineArchiveResult;
import com.pulumi.mongodbatlas.outputs.GetOnlineArchivesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetOrgInvitationResult;
import com.pulumi.mongodbatlas.outputs.GetOrganizationResult;
import com.pulumi.mongodbatlas.outputs.GetOrganizationsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetPrivateEndpointRegionalModeResult;
import com.pulumi.mongodbatlas.outputs.GetPrivateLinkEndpointResult;
import com.pulumi.mongodbatlas.outputs.GetPrivateLinkEndpointServiceResult;
import com.pulumi.mongodbatlas.outputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult;
import com.pulumi.mongodbatlas.outputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetPrivatelinkEndpointServiceServerlessResult;
import com.pulumi.mongodbatlas.outputs.GetPrivatelinkEndpointsServiceServerlessInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetProjectApiKeyResult;
import com.pulumi.mongodbatlas.outputs.GetProjectApiKeysInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetProjectInvitationResult;
import com.pulumi.mongodbatlas.outputs.GetProjectIpAccessListResult;
import com.pulumi.mongodbatlas.outputs.GetProjectResult;
import com.pulumi.mongodbatlas.outputs.GetProjectsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetPushBasedLogExportResult;
import com.pulumi.mongodbatlas.outputs.GetRolesOrgIdResult;
import com.pulumi.mongodbatlas.outputs.GetSearchDeploymentResult;
import com.pulumi.mongodbatlas.outputs.GetSearchIndexResult;
import com.pulumi.mongodbatlas.outputs.GetSearchIndexesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetServerlessInstanceResult;
import com.pulumi.mongodbatlas.outputs.GetServerlessInstancesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetSharedTierRestoreJobResult;
import com.pulumi.mongodbatlas.outputs.GetSharedTierRestoreJobsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetSharedTierSnapshotResult;
import com.pulumi.mongodbatlas.outputs.GetSharedTierSnapshotsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetStreamConnectionResult;
import com.pulumi.mongodbatlas.outputs.GetStreamConnectionsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetStreamInstanceResult;
import com.pulumi.mongodbatlas.outputs.GetStreamInstancesInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetTeamResult;
import com.pulumi.mongodbatlas.outputs.GetTeamsResult;
import com.pulumi.mongodbatlas.outputs.GetThirdPartyIntegrationResult;
import com.pulumi.mongodbatlas.outputs.GetThirdPartyIntegrationsInvokeResult;
import com.pulumi.mongodbatlas.outputs.GetX509AuthenticationDatabaseUserResult;
import com.pulumi.resources.InvokeArgs;
import java.util.concurrent.CompletableFuture;

public final class MongodbatlasFunctions {
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * ### Example Usage: Generate an Atlas-managed X.509 certificate for a MongoDB user
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Example Usage: Save a customer-managed X.509 configuration for an Atlas project
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUser;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUserArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetX509AuthenticationDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testX509AuthenticationDatabaseUser = new X509AuthenticationDatabaseUser("testX509AuthenticationDatabaseUser", X509AuthenticationDatabaseUserArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .customerX509Cas("""
     * -----BEGIN CERTIFICATE-----
     * MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC
     * VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl
     * c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG
     * SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy
     * MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF
     * VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV
     * BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp
     * c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
     * iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr
     * cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O
     * Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG
     * SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA
     * 7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A
     * iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz
     * -----END CERTIFICATE-----"
     *             """)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getX509AuthenticationDatabaseUser(GetX509AuthenticationDatabaseUserArgs.builder()
     *             .projectId(testX509AuthenticationDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser
     * 
     */
    @Deprecated /* mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser */
    public static Output<Get509AuthenticationDatabaseUserResult> get509AuthenticationDatabaseUser(Get509AuthenticationDatabaseUserArgs args) {
        return get509AuthenticationDatabaseUser(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * ### Example Usage: Generate an Atlas-managed X.509 certificate for a MongoDB user
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Example Usage: Save a customer-managed X.509 configuration for an Atlas project
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUser;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUserArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetX509AuthenticationDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testX509AuthenticationDatabaseUser = new X509AuthenticationDatabaseUser("testX509AuthenticationDatabaseUser", X509AuthenticationDatabaseUserArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .customerX509Cas("""
     * -----BEGIN CERTIFICATE-----
     * MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC
     * VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl
     * c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG
     * SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy
     * MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF
     * VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV
     * BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp
     * c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
     * iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr
     * cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O
     * Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG
     * SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA
     * 7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A
     * iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz
     * -----END CERTIFICATE-----"
     *             """)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getX509AuthenticationDatabaseUser(GetX509AuthenticationDatabaseUserArgs.builder()
     *             .projectId(testX509AuthenticationDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser
     * 
     */
    @Deprecated /* mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser */
    public static CompletableFuture<Get509AuthenticationDatabaseUserResult> get509AuthenticationDatabaseUserPlain(Get509AuthenticationDatabaseUserPlainArgs args) {
        return get509AuthenticationDatabaseUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * ### Example Usage: Generate an Atlas-managed X.509 certificate for a MongoDB user
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Example Usage: Save a customer-managed X.509 configuration for an Atlas project
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUser;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUserArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetX509AuthenticationDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testX509AuthenticationDatabaseUser = new X509AuthenticationDatabaseUser("testX509AuthenticationDatabaseUser", X509AuthenticationDatabaseUserArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .customerX509Cas("""
     * -----BEGIN CERTIFICATE-----
     * MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC
     * VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl
     * c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG
     * SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy
     * MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF
     * VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV
     * BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp
     * c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
     * iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr
     * cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O
     * Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG
     * SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA
     * 7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A
     * iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz
     * -----END CERTIFICATE-----"
     *             """)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getX509AuthenticationDatabaseUser(GetX509AuthenticationDatabaseUserArgs.builder()
     *             .projectId(testX509AuthenticationDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser
     * 
     */
    @Deprecated /* mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser */
    public static Output<Get509AuthenticationDatabaseUserResult> get509AuthenticationDatabaseUser(Get509AuthenticationDatabaseUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/get509AuthenticationDatabaseUser:get509AuthenticationDatabaseUser", TypeShape.of(Get509AuthenticationDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * ### Example Usage: Generate an Atlas-managed X.509 certificate for a MongoDB user
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Example Usage: Save a customer-managed X.509 configuration for an Atlas project
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUser;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUserArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetX509AuthenticationDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testX509AuthenticationDatabaseUser = new X509AuthenticationDatabaseUser("testX509AuthenticationDatabaseUser", X509AuthenticationDatabaseUserArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .customerX509Cas("""
     * -----BEGIN CERTIFICATE-----
     * MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC
     * VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl
     * c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG
     * SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy
     * MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF
     * VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV
     * BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp
     * c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
     * iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr
     * cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O
     * Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG
     * SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA
     * 7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A
     * iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz
     * -----END CERTIFICATE-----"
     *             """)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getX509AuthenticationDatabaseUser(GetX509AuthenticationDatabaseUserArgs.builder()
     *             .projectId(testX509AuthenticationDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * @deprecated
     * mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser
     * 
     */
    @Deprecated /* mongodbatlas.index/get509authenticationdatabaseuser.get509AuthenticationDatabaseUser has been deprecated in favor of mongodbatlas.index/getx509authenticationdatabaseuser.getX509AuthenticationDatabaseUser */
    public static CompletableFuture<Get509AuthenticationDatabaseUserResult> get509AuthenticationDatabaseUserPlain(Get509AuthenticationDatabaseUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/get509AuthenticationDatabaseUser:get509AuthenticationDatabaseUser", TypeShape.of(Get509AuthenticationDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### Using CIDR Block
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using IP Address
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessListApiKeyResult> getAccessListApiKey(GetAccessListApiKeyArgs args) {
        return getAccessListApiKey(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Using CIDR Block
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using IP Address
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessListApiKeyResult> getAccessListApiKeyPlain(GetAccessListApiKeyPlainArgs args) {
        return getAccessListApiKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Using CIDR Block
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using IP Address
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessListApiKeyResult> getAccessListApiKey(GetAccessListApiKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAccessListApiKey:getAccessListApiKey", TypeShape.of(GetAccessListApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### Using CIDR Block
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using IP Address
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessListApiKeyResult> getAccessListApiKeyPlain(GetAccessListApiKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAccessListApiKey:getAccessListApiKey", TypeShape.of(GetAccessListApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### Using CIDR Block
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using IP Address
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessListApiKeysInvokeResult> getAccessListApiKeys(GetAccessListApiKeysArgs args) {
        return getAccessListApiKeys(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Using CIDR Block
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using IP Address
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessListApiKeysInvokeResult> getAccessListApiKeysPlain(GetAccessListApiKeysPlainArgs args) {
        return getAccessListApiKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Using CIDR Block
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using IP Address
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAccessListApiKeysInvokeResult> getAccessListApiKeys(GetAccessListApiKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAccessListApiKeys:getAccessListApiKeys", TypeShape.of(GetAccessListApiKeysInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### Using CIDR Block
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using IP Address
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAccessListApiKeysInvokeResult> getAccessListApiKeysPlain(GetAccessListApiKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAccessListApiKeys:getAccessListApiKeys", TypeShape.of(GetAccessListApiKeysInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.AdvancedCluster` describes an Advanced Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.AdvancedCluster;
     * import com.pulumi.mongodbatlas.AdvancedClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.AdvancedClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAdvancedClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleAdvancedCluster = new AdvancedCluster("exampleAdvancedCluster", AdvancedClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(AdvancedClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(AdvancedClusterReplicationSpecRegionConfigArgs.builder()
     *                     .electableSpecs(AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs.builder()
     *                         .instanceSize("M5")
     *                         .build())
     *                     .providerName("TENANT")
     *                     .backingProviderName("AWS")
     *                     .regionName("US_EAST_1")
     *                     .priority(7)
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         final var example = MongodbatlasFunctions.getAdvancedCluster(GetAdvancedClusterArgs.builder()
     *             .projectId(exampleAdvancedCluster.projectId())
     *             .name(exampleAdvancedCluster.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAdvancedClusterResult> getAdvancedCluster(GetAdvancedClusterArgs args) {
        return getAdvancedCluster(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.AdvancedCluster` describes an Advanced Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.AdvancedCluster;
     * import com.pulumi.mongodbatlas.AdvancedClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.AdvancedClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAdvancedClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleAdvancedCluster = new AdvancedCluster("exampleAdvancedCluster", AdvancedClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(AdvancedClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(AdvancedClusterReplicationSpecRegionConfigArgs.builder()
     *                     .electableSpecs(AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs.builder()
     *                         .instanceSize("M5")
     *                         .build())
     *                     .providerName("TENANT")
     *                     .backingProviderName("AWS")
     *                     .regionName("US_EAST_1")
     *                     .priority(7)
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         final var example = MongodbatlasFunctions.getAdvancedCluster(GetAdvancedClusterArgs.builder()
     *             .projectId(exampleAdvancedCluster.projectId())
     *             .name(exampleAdvancedCluster.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAdvancedClusterResult> getAdvancedClusterPlain(GetAdvancedClusterPlainArgs args) {
        return getAdvancedClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.AdvancedCluster` describes an Advanced Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.AdvancedCluster;
     * import com.pulumi.mongodbatlas.AdvancedClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.AdvancedClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAdvancedClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleAdvancedCluster = new AdvancedCluster("exampleAdvancedCluster", AdvancedClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(AdvancedClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(AdvancedClusterReplicationSpecRegionConfigArgs.builder()
     *                     .electableSpecs(AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs.builder()
     *                         .instanceSize("M5")
     *                         .build())
     *                     .providerName("TENANT")
     *                     .backingProviderName("AWS")
     *                     .regionName("US_EAST_1")
     *                     .priority(7)
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         final var example = MongodbatlasFunctions.getAdvancedCluster(GetAdvancedClusterArgs.builder()
     *             .projectId(exampleAdvancedCluster.projectId())
     *             .name(exampleAdvancedCluster.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAdvancedClusterResult> getAdvancedCluster(GetAdvancedClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAdvancedCluster:getAdvancedCluster", TypeShape.of(GetAdvancedClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.AdvancedCluster` describes an Advanced Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.AdvancedCluster;
     * import com.pulumi.mongodbatlas.AdvancedClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.AdvancedClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAdvancedClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleAdvancedCluster = new AdvancedCluster("exampleAdvancedCluster", AdvancedClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(AdvancedClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(AdvancedClusterReplicationSpecRegionConfigArgs.builder()
     *                     .electableSpecs(AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs.builder()
     *                         .instanceSize("M5")
     *                         .build())
     *                     .providerName("TENANT")
     *                     .backingProviderName("AWS")
     *                     .regionName("US_EAST_1")
     *                     .priority(7)
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         final var example = MongodbatlasFunctions.getAdvancedCluster(GetAdvancedClusterArgs.builder()
     *             .projectId(exampleAdvancedCluster.projectId())
     *             .name(exampleAdvancedCluster.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAdvancedClusterResult> getAdvancedClusterPlain(GetAdvancedClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAdvancedCluster:getAdvancedCluster", TypeShape.of(GetAdvancedClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Cluster` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleCluster = new Cluster("exampleCluster", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                 .build())
     *             .build());
     * 
     *         final var example = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(exampleCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAdvancedClustersInvokeResult> getAdvancedClusters(GetAdvancedClustersArgs args) {
        return getAdvancedClusters(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Cluster` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleCluster = new Cluster("exampleCluster", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                 .build())
     *             .build());
     * 
     *         final var example = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(exampleCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAdvancedClustersInvokeResult> getAdvancedClustersPlain(GetAdvancedClustersPlainArgs args) {
        return getAdvancedClustersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Cluster` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleCluster = new Cluster("exampleCluster", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                 .build())
     *             .build());
     * 
     *         final var example = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(exampleCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAdvancedClustersInvokeResult> getAdvancedClusters(GetAdvancedClustersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAdvancedClusters:getAdvancedClusters", TypeShape.of(GetAdvancedClustersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Cluster` describes all Advanced Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleCluster = new Cluster("exampleCluster", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *                 .build())
     *             .build());
     * 
     *         final var example = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(exampleCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAdvancedClustersInvokeResult> getAdvancedClustersPlain(GetAdvancedClustersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAdvancedClusters:getAdvancedClusters", TypeShape.of(GetAdvancedClustersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.AlertConfiguration;
     * import com.pulumi.mongodbatlas.AlertConfigurationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationNotificationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationMatcherArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationMetricThresholdConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAlertConfiguration = new AlertConfiguration("testAlertConfiguration", AlertConfigurationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .eventType("OUTSIDE_METRIC_THRESHOLD")
     *             .enabled(true)
     *             .notifications(AlertConfigurationNotificationArgs.builder()
     *                 .typeName("GROUP")
     *                 .intervalMin(5)
     *                 .delayMin(0)
     *                 .smsEnabled(false)
     *                 .emailEnabled(true)
     *                 .build())
     *             .matchers(AlertConfigurationMatcherArgs.builder()
     *                 .fieldName("HOSTNAME_AND_PORT")
     *                 .operator("EQUALS")
     *                 .value("SECONDARY")
     *                 .build())
     *             .metricThresholdConfig(AlertConfigurationMetricThresholdConfigArgs.builder()
     *                 .metricName("ASSERT_REGULAR")
     *                 .operator("LESS_THAN")
     *                 .threshold(99)
     *                 .units("RAW")
     *                 .mode("AVERAGE")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getAlertConfiguration(GetAlertConfigurationArgs.builder()
     *             .projectId(testAlertConfiguration.projectId())
     *             .alertConfigurationId(testAlertConfiguration.alertConfigurationId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.AlertConfiguration;
     * import com.pulumi.mongodbatlas.AlertConfigurationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationNotificationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationMatcherArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationThresholdConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAlertConfiguration = new AlertConfiguration("testAlertConfiguration", AlertConfigurationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .eventType("REPLICATION_OPLOG_WINDOW_RUNNING_OUT")
     *             .enabled(true)
     *             .notifications(AlertConfigurationNotificationArgs.builder()
     *                 .typeName("GROUP")
     *                 .intervalMin(5)
     *                 .delayMin(0)
     *                 .smsEnabled(false)
     *                 .emailEnabled(true)
     *                 .roles(                
     *                     "GROUP_CHARTS_ADMIN",
     *                     "GROUP_CLUSTER_MANAGER")
     *                 .build())
     *             .matchers(AlertConfigurationMatcherArgs.builder()
     *                 .fieldName("HOSTNAME_AND_PORT")
     *                 .operator("EQUALS")
     *                 .value("SECONDARY")
     *                 .build())
     *             .thresholdConfig(AlertConfigurationThresholdConfigArgs.builder()
     *                 .operator("LESS_THAN")
     *                 .threshold(1)
     *                 .units("HOURS")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getAlertConfiguration(GetAlertConfigurationArgs.builder()
     *             .projectId(testAlertConfiguration.projectId())
     *             .alertConfigurationId(testAlertConfiguration.alertConfigurationId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Utilize data_source to generate resource hcl and import statement. Useful if you have a specific alert_configuration_id and are looking to manage it as is in state. To import all alerts, refer to the documentation on data_source_mongodbatlas_alert_configurations
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAlertConfiguration(GetAlertConfigurationArgs.builder()
     *             .projectId(projectId)
     *             .alertConfigurationId(alertConfigurationId)
     *             .outputs(            
     *                 GetAlertConfigurationOutputArgs.builder()
     *                     .type("resource_hcl")
     *                     .label("test")
     *                     .build(),
     *                 GetAlertConfigurationOutputArgs.builder()
     *                     .type("resource_import")
     *                     .label("test")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAlertConfigurationResult> getAlertConfiguration(GetAlertConfigurationArgs args) {
        return getAlertConfiguration(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.AlertConfiguration;
     * import com.pulumi.mongodbatlas.AlertConfigurationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationNotificationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationMatcherArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationMetricThresholdConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAlertConfiguration = new AlertConfiguration("testAlertConfiguration", AlertConfigurationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .eventType("OUTSIDE_METRIC_THRESHOLD")
     *             .enabled(true)
     *             .notifications(AlertConfigurationNotificationArgs.builder()
     *                 .typeName("GROUP")
     *                 .intervalMin(5)
     *                 .delayMin(0)
     *                 .smsEnabled(false)
     *                 .emailEnabled(true)
     *                 .build())
     *             .matchers(AlertConfigurationMatcherArgs.builder()
     *                 .fieldName("HOSTNAME_AND_PORT")
     *                 .operator("EQUALS")
     *                 .value("SECONDARY")
     *                 .build())
     *             .metricThresholdConfig(AlertConfigurationMetricThresholdConfigArgs.builder()
     *                 .metricName("ASSERT_REGULAR")
     *                 .operator("LESS_THAN")
     *                 .threshold(99)
     *                 .units("RAW")
     *                 .mode("AVERAGE")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getAlertConfiguration(GetAlertConfigurationArgs.builder()
     *             .projectId(testAlertConfiguration.projectId())
     *             .alertConfigurationId(testAlertConfiguration.alertConfigurationId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.AlertConfiguration;
     * import com.pulumi.mongodbatlas.AlertConfigurationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationNotificationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationMatcherArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationThresholdConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAlertConfiguration = new AlertConfiguration("testAlertConfiguration", AlertConfigurationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .eventType("REPLICATION_OPLOG_WINDOW_RUNNING_OUT")
     *             .enabled(true)
     *             .notifications(AlertConfigurationNotificationArgs.builder()
     *                 .typeName("GROUP")
     *                 .intervalMin(5)
     *                 .delayMin(0)
     *                 .smsEnabled(false)
     *                 .emailEnabled(true)
     *                 .roles(                
     *                     "GROUP_CHARTS_ADMIN",
     *                     "GROUP_CLUSTER_MANAGER")
     *                 .build())
     *             .matchers(AlertConfigurationMatcherArgs.builder()
     *                 .fieldName("HOSTNAME_AND_PORT")
     *                 .operator("EQUALS")
     *                 .value("SECONDARY")
     *                 .build())
     *             .thresholdConfig(AlertConfigurationThresholdConfigArgs.builder()
     *                 .operator("LESS_THAN")
     *                 .threshold(1)
     *                 .units("HOURS")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getAlertConfiguration(GetAlertConfigurationArgs.builder()
     *             .projectId(testAlertConfiguration.projectId())
     *             .alertConfigurationId(testAlertConfiguration.alertConfigurationId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Utilize data_source to generate resource hcl and import statement. Useful if you have a specific alert_configuration_id and are looking to manage it as is in state. To import all alerts, refer to the documentation on data_source_mongodbatlas_alert_configurations
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAlertConfiguration(GetAlertConfigurationArgs.builder()
     *             .projectId(projectId)
     *             .alertConfigurationId(alertConfigurationId)
     *             .outputs(            
     *                 GetAlertConfigurationOutputArgs.builder()
     *                     .type("resource_hcl")
     *                     .label("test")
     *                     .build(),
     *                 GetAlertConfigurationOutputArgs.builder()
     *                     .type("resource_import")
     *                     .label("test")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAlertConfigurationResult> getAlertConfigurationPlain(GetAlertConfigurationPlainArgs args) {
        return getAlertConfigurationPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.AlertConfiguration;
     * import com.pulumi.mongodbatlas.AlertConfigurationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationNotificationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationMatcherArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationMetricThresholdConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAlertConfiguration = new AlertConfiguration("testAlertConfiguration", AlertConfigurationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .eventType("OUTSIDE_METRIC_THRESHOLD")
     *             .enabled(true)
     *             .notifications(AlertConfigurationNotificationArgs.builder()
     *                 .typeName("GROUP")
     *                 .intervalMin(5)
     *                 .delayMin(0)
     *                 .smsEnabled(false)
     *                 .emailEnabled(true)
     *                 .build())
     *             .matchers(AlertConfigurationMatcherArgs.builder()
     *                 .fieldName("HOSTNAME_AND_PORT")
     *                 .operator("EQUALS")
     *                 .value("SECONDARY")
     *                 .build())
     *             .metricThresholdConfig(AlertConfigurationMetricThresholdConfigArgs.builder()
     *                 .metricName("ASSERT_REGULAR")
     *                 .operator("LESS_THAN")
     *                 .threshold(99)
     *                 .units("RAW")
     *                 .mode("AVERAGE")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getAlertConfiguration(GetAlertConfigurationArgs.builder()
     *             .projectId(testAlertConfiguration.projectId())
     *             .alertConfigurationId(testAlertConfiguration.alertConfigurationId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.AlertConfiguration;
     * import com.pulumi.mongodbatlas.AlertConfigurationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationNotificationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationMatcherArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationThresholdConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAlertConfiguration = new AlertConfiguration("testAlertConfiguration", AlertConfigurationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .eventType("REPLICATION_OPLOG_WINDOW_RUNNING_OUT")
     *             .enabled(true)
     *             .notifications(AlertConfigurationNotificationArgs.builder()
     *                 .typeName("GROUP")
     *                 .intervalMin(5)
     *                 .delayMin(0)
     *                 .smsEnabled(false)
     *                 .emailEnabled(true)
     *                 .roles(                
     *                     "GROUP_CHARTS_ADMIN",
     *                     "GROUP_CLUSTER_MANAGER")
     *                 .build())
     *             .matchers(AlertConfigurationMatcherArgs.builder()
     *                 .fieldName("HOSTNAME_AND_PORT")
     *                 .operator("EQUALS")
     *                 .value("SECONDARY")
     *                 .build())
     *             .thresholdConfig(AlertConfigurationThresholdConfigArgs.builder()
     *                 .operator("LESS_THAN")
     *                 .threshold(1)
     *                 .units("HOURS")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getAlertConfiguration(GetAlertConfigurationArgs.builder()
     *             .projectId(testAlertConfiguration.projectId())
     *             .alertConfigurationId(testAlertConfiguration.alertConfigurationId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Utilize data_source to generate resource hcl and import statement. Useful if you have a specific alert_configuration_id and are looking to manage it as is in state. To import all alerts, refer to the documentation on data_source_mongodbatlas_alert_configurations
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAlertConfiguration(GetAlertConfigurationArgs.builder()
     *             .projectId(projectId)
     *             .alertConfigurationId(alertConfigurationId)
     *             .outputs(            
     *                 GetAlertConfigurationOutputArgs.builder()
     *                     .type("resource_hcl")
     *                     .label("test")
     *                     .build(),
     *                 GetAlertConfigurationOutputArgs.builder()
     *                     .type("resource_import")
     *                     .label("test")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAlertConfigurationResult> getAlertConfiguration(GetAlertConfigurationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAlertConfiguration:getAlertConfiguration", TypeShape.of(GetAlertConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.AlertConfiguration` describes an Alert Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.AlertConfiguration;
     * import com.pulumi.mongodbatlas.AlertConfigurationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationNotificationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationMatcherArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationMetricThresholdConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAlertConfiguration = new AlertConfiguration("testAlertConfiguration", AlertConfigurationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .eventType("OUTSIDE_METRIC_THRESHOLD")
     *             .enabled(true)
     *             .notifications(AlertConfigurationNotificationArgs.builder()
     *                 .typeName("GROUP")
     *                 .intervalMin(5)
     *                 .delayMin(0)
     *                 .smsEnabled(false)
     *                 .emailEnabled(true)
     *                 .build())
     *             .matchers(AlertConfigurationMatcherArgs.builder()
     *                 .fieldName("HOSTNAME_AND_PORT")
     *                 .operator("EQUALS")
     *                 .value("SECONDARY")
     *                 .build())
     *             .metricThresholdConfig(AlertConfigurationMetricThresholdConfigArgs.builder()
     *                 .metricName("ASSERT_REGULAR")
     *                 .operator("LESS_THAN")
     *                 .threshold(99)
     *                 .units("RAW")
     *                 .mode("AVERAGE")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getAlertConfiguration(GetAlertConfigurationArgs.builder()
     *             .projectId(testAlertConfiguration.projectId())
     *             .alertConfigurationId(testAlertConfiguration.alertConfigurationId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **NOTE:** In order to allow for a fast pace of change to alert variables some validations have been removed from this resource in order to unblock alert creation. Impacted areas have links to the MongoDB Atlas API documentation so always check it for the most current information: https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.AlertConfiguration;
     * import com.pulumi.mongodbatlas.AlertConfigurationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationNotificationArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationMatcherArgs;
     * import com.pulumi.mongodbatlas.inputs.AlertConfigurationThresholdConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAlertConfiguration = new AlertConfiguration("testAlertConfiguration", AlertConfigurationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .eventType("REPLICATION_OPLOG_WINDOW_RUNNING_OUT")
     *             .enabled(true)
     *             .notifications(AlertConfigurationNotificationArgs.builder()
     *                 .typeName("GROUP")
     *                 .intervalMin(5)
     *                 .delayMin(0)
     *                 .smsEnabled(false)
     *                 .emailEnabled(true)
     *                 .roles(                
     *                     "GROUP_CHARTS_ADMIN",
     *                     "GROUP_CLUSTER_MANAGER")
     *                 .build())
     *             .matchers(AlertConfigurationMatcherArgs.builder()
     *                 .fieldName("HOSTNAME_AND_PORT")
     *                 .operator("EQUALS")
     *                 .value("SECONDARY")
     *                 .build())
     *             .thresholdConfig(AlertConfigurationThresholdConfigArgs.builder()
     *                 .operator("LESS_THAN")
     *                 .threshold(1)
     *                 .units("HOURS")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getAlertConfiguration(GetAlertConfigurationArgs.builder()
     *             .projectId(testAlertConfiguration.projectId())
     *             .alertConfigurationId(testAlertConfiguration.alertConfigurationId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * Utilize data_source to generate resource hcl and import statement. Useful if you have a specific alert_configuration_id and are looking to manage it as is in state. To import all alerts, refer to the documentation on data_source_mongodbatlas_alert_configurations
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAlertConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAlertConfiguration(GetAlertConfigurationArgs.builder()
     *             .projectId(projectId)
     *             .alertConfigurationId(alertConfigurationId)
     *             .outputs(            
     *                 GetAlertConfigurationOutputArgs.builder()
     *                     .type("resource_hcl")
     *                     .label("test")
     *                     .build(),
     *                 GetAlertConfigurationOutputArgs.builder()
     *                     .type("resource_import")
     *                     .label("test")
     *                     .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAlertConfigurationResult> getAlertConfigurationPlain(GetAlertConfigurationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAlertConfiguration:getAlertConfiguration", TypeShape.of(GetAlertConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getAlertConfigurations` describes all Alert Configurations by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static Output<GetAlertConfigurationsInvokeResult> getAlertConfigurations(GetAlertConfigurationsArgs args) {
        return getAlertConfigurations(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getAlertConfigurations` describes all Alert Configurations by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static CompletableFuture<GetAlertConfigurationsInvokeResult> getAlertConfigurationsPlain(GetAlertConfigurationsPlainArgs args) {
        return getAlertConfigurationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getAlertConfigurations` describes all Alert Configurations by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static Output<GetAlertConfigurationsInvokeResult> getAlertConfigurations(GetAlertConfigurationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAlertConfigurations:getAlertConfigurations", TypeShape.of(GetAlertConfigurationsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getAlertConfigurations` describes all Alert Configurations by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static CompletableFuture<GetAlertConfigurationsInvokeResult> getAlertConfigurationsPlain(GetAlertConfigurationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAlertConfigurations:getAlertConfigurations", TypeShape.of(GetAlertConfigurationsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetApiKeyResult> getApiKey(GetApiKeyArgs args) {
        return getApiKey(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetApiKeyResult> getApiKeyPlain(GetApiKeyPlainArgs args) {
        return getApiKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetApiKeyResult> getApiKey(GetApiKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getApiKey:getApiKey", TypeShape.of(GetApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetApiKeyResult> getApiKeyPlain(GetApiKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getApiKey:getApiKey", TypeShape.of(GetApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetApiKeysInvokeResult> getApiKeys(GetApiKeysArgs args) {
        return getApiKeys(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetApiKeysInvokeResult> getApiKeysPlain(GetApiKeysPlainArgs args) {
        return getApiKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     */
    public static Output<GetApiKeysInvokeResult> getApiKeys(GetApiKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getApiKeys:getApiKeys", TypeShape.of(GetApiKeysInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetApiKeysInvokeResult> getApiKeysPlain(GetApiKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getApiKeys:getApiKeys", TypeShape.of(GetApiKeysInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getAtlasUser` Provides a MongoDB Atlas User.
     * 
     * &gt; **NOTE:** If you are the owner of a MongoDB Atlas organization or project, you can also retrieve the user profile for any user with membership in that organization or project.
     * 
     * ## Example Usage
     * 
     * ### Using user_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .userId("<USER_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using username attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .username("<USERNAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAtlasUserResult> getAtlasUser() {
        return getAtlasUser(GetAtlasUserArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getAtlasUser` Provides a MongoDB Atlas User.
     * 
     * &gt; **NOTE:** If you are the owner of a MongoDB Atlas organization or project, you can also retrieve the user profile for any user with membership in that organization or project.
     * 
     * ## Example Usage
     * 
     * ### Using user_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .userId("<USER_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using username attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .username("<USERNAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAtlasUserResult> getAtlasUserPlain() {
        return getAtlasUserPlain(GetAtlasUserPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getAtlasUser` Provides a MongoDB Atlas User.
     * 
     * &gt; **NOTE:** If you are the owner of a MongoDB Atlas organization or project, you can also retrieve the user profile for any user with membership in that organization or project.
     * 
     * ## Example Usage
     * 
     * ### Using user_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .userId("<USER_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using username attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .username("<USERNAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAtlasUserResult> getAtlasUser(GetAtlasUserArgs args) {
        return getAtlasUser(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getAtlasUser` Provides a MongoDB Atlas User.
     * 
     * &gt; **NOTE:** If you are the owner of a MongoDB Atlas organization or project, you can also retrieve the user profile for any user with membership in that organization or project.
     * 
     * ## Example Usage
     * 
     * ### Using user_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .userId("<USER_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using username attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .username("<USERNAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAtlasUserResult> getAtlasUserPlain(GetAtlasUserPlainArgs args) {
        return getAtlasUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getAtlasUser` Provides a MongoDB Atlas User.
     * 
     * &gt; **NOTE:** If you are the owner of a MongoDB Atlas organization or project, you can also retrieve the user profile for any user with membership in that organization or project.
     * 
     * ## Example Usage
     * 
     * ### Using user_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .userId("<USER_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using username attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .username("<USERNAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAtlasUserResult> getAtlasUser(GetAtlasUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAtlasUser:getAtlasUser", TypeShape.of(GetAtlasUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getAtlasUser` Provides a MongoDB Atlas User.
     * 
     * &gt; **NOTE:** If you are the owner of a MongoDB Atlas organization or project, you can also retrieve the user profile for any user with membership in that organization or project.
     * 
     * ## Example Usage
     * 
     * ### Using user_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .userId("<USER_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using username attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUser(GetAtlasUserArgs.builder()
     *             .username("<USERNAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAtlasUserResult> getAtlasUserPlain(GetAtlasUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAtlasUser:getAtlasUser", TypeShape.of(GetAtlasUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `atlas_users` provides Atlas Users associated with a specified Organization, Project, or Team.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Using org_id attribute to query Organization Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId("<ORG_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using project_id attribute to query Project Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using team_id and org_id attribute to query Team Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .teamId("<TEAM_ID>")
     *             .orgId("<ORG_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAtlasUsersInvokeResult> getAtlasUsers() {
        return getAtlasUsers(GetAtlasUsersArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `atlas_users` provides Atlas Users associated with a specified Organization, Project, or Team.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Using org_id attribute to query Organization Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId("<ORG_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using project_id attribute to query Project Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using team_id and org_id attribute to query Team Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .teamId("<TEAM_ID>")
     *             .orgId("<ORG_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAtlasUsersInvokeResult> getAtlasUsersPlain() {
        return getAtlasUsersPlain(GetAtlasUsersPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `atlas_users` provides Atlas Users associated with a specified Organization, Project, or Team.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Using org_id attribute to query Organization Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId("<ORG_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using project_id attribute to query Project Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using team_id and org_id attribute to query Team Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .teamId("<TEAM_ID>")
     *             .orgId("<ORG_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAtlasUsersInvokeResult> getAtlasUsers(GetAtlasUsersArgs args) {
        return getAtlasUsers(args, InvokeOptions.Empty);
    }
    /**
     * `atlas_users` provides Atlas Users associated with a specified Organization, Project, or Team.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Using org_id attribute to query Organization Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId("<ORG_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using project_id attribute to query Project Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using team_id and org_id attribute to query Team Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .teamId("<TEAM_ID>")
     *             .orgId("<ORG_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAtlasUsersInvokeResult> getAtlasUsersPlain(GetAtlasUsersPlainArgs args) {
        return getAtlasUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `atlas_users` provides Atlas Users associated with a specified Organization, Project, or Team.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Using org_id attribute to query Organization Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId("<ORG_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using project_id attribute to query Project Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using team_id and org_id attribute to query Team Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .teamId("<TEAM_ID>")
     *             .orgId("<ORG_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAtlasUsersInvokeResult> getAtlasUsers(GetAtlasUsersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAtlasUsers:getAtlasUsers", TypeShape.of(GetAtlasUsersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `atlas_users` provides Atlas Users associated with a specified Organization, Project, or Team.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Using org_id attribute to query Organization Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .orgId("<ORG_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using project_id attribute to query Project Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using team_id and org_id attribute to query Team Atlas Users
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAtlasUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getAtlasUsers(GetAtlasUsersArgs.builder()
     *             .teamId("<TEAM_ID>")
     *             .orgId("<ORG_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAtlasUsersInvokeResult> getAtlasUsersPlain(GetAtlasUsersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAtlasUsers:getAtlasUsers", TypeShape.of(GetAtlasUsersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Auditing` describes a Auditing.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Auditing;
     * import com.pulumi.mongodbatlas.AuditingArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAuditingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAuditing = new Auditing("testAuditing", AuditingArgs.builder()
     *             .projectId("<project-id>")
     *             .auditFilter("{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}")
     *             .auditAuthorizationSuccess(false)
     *             .enabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getAuditing(GetAuditingArgs.builder()
     *             .projectId(testAuditing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAuditingResult> getAuditing(GetAuditingArgs args) {
        return getAuditing(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Auditing` describes a Auditing.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Auditing;
     * import com.pulumi.mongodbatlas.AuditingArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAuditingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAuditing = new Auditing("testAuditing", AuditingArgs.builder()
     *             .projectId("<project-id>")
     *             .auditFilter("{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}")
     *             .auditAuthorizationSuccess(false)
     *             .enabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getAuditing(GetAuditingArgs.builder()
     *             .projectId(testAuditing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAuditingResult> getAuditingPlain(GetAuditingPlainArgs args) {
        return getAuditingPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Auditing` describes a Auditing.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Auditing;
     * import com.pulumi.mongodbatlas.AuditingArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAuditingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAuditing = new Auditing("testAuditing", AuditingArgs.builder()
     *             .projectId("<project-id>")
     *             .auditFilter("{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}")
     *             .auditAuthorizationSuccess(false)
     *             .enabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getAuditing(GetAuditingArgs.builder()
     *             .projectId(testAuditing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetAuditingResult> getAuditing(GetAuditingArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getAuditing:getAuditing", TypeShape.of(GetAuditingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Auditing` describes a Auditing.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Auditing;
     * import com.pulumi.mongodbatlas.AuditingArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetAuditingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testAuditing = new Auditing("testAuditing", AuditingArgs.builder()
     *             .projectId("<project-id>")
     *             .auditFilter("{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}")
     *             .auditAuthorizationSuccess(false)
     *             .enabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getAuditing(GetAuditingArgs.builder()
     *             .projectId(testAuditing.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetAuditingResult> getAuditingPlain(GetAuditingPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getAuditing:getAuditing", TypeShape.of(GetAuditingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSchedule;
     * import com.pulumi.mongodbatlas.CloudBackupScheduleArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemHourlyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemDailyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemWeeklyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemMonthlyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemYearlyArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupScheduleArgs;
     * import com.pulumi.mongodbatlas.inputs.GetBackupCompliancePolicyArgs;
     * import com.pulumi.mongodbatlas.BackupCompliancePolicy;
     * import com.pulumi.mongodbatlas.BackupCompliancePolicyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyOnDemandPolicyItemArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemHourlyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemDailyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemWeeklyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemMonthlyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemYearlyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myCluster = new Cluster("myCluster", ClusterArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .name("clusterTest")
     *             .providerName("AWS")
     *             .providerRegionName("EU_CENTRAL_1")
     *             .providerInstanceSizeName("M10")
     *             .cloudBackup(true)
     *             .build());
     * 
     *         var testCloudBackupSchedule = new CloudBackupSchedule("testCloudBackupSchedule", CloudBackupScheduleArgs.builder()
     *             .projectId(myCluster.projectId())
     *             .clusterName(myCluster.name())
     *             .referenceHourOfDay(3)
     *             .referenceMinuteOfHour(45)
     *             .restoreWindowDays(4)
     *             .policyItemHourly(CloudBackupSchedulePolicyItemHourlyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("days")
     *                 .retentionValue(1)
     *                 .build())
     *             .policyItemDaily(CloudBackupSchedulePolicyItemDailyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("days")
     *                 .retentionValue(2)
     *                 .build())
     *             .policyItemWeeklies(CloudBackupSchedulePolicyItemWeeklyArgs.builder()
     *                 .frequencyInterval(4)
     *                 .retentionUnit("weeks")
     *                 .retentionValue(3)
     *                 .build())
     *             .policyItemMonthlies(CloudBackupSchedulePolicyItemMonthlyArgs.builder()
     *                 .frequencyInterval(5)
     *                 .retentionUnit("months")
     *                 .retentionValue(4)
     *                 .build())
     *             .policyItemYearlies(CloudBackupSchedulePolicyItemYearlyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("years")
     *                 .retentionValue(1)
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSchedule(GetCloudBackupScheduleArgs.builder()
     *             .projectId(testCloudBackupSchedule.projectId())
     *             .clusterName(testCloudBackupSchedule.clusterName())
     *             .build());
     * 
     *         final var backupPolicy = MongodbatlasFunctions.getBackupCompliancePolicy(GetBackupCompliancePolicyArgs.builder()
     *             .projectId(testCloudBackupSchedule.id())
     *             .build());
     * 
     *         var backupPolicyBackupCompliancePolicy = new BackupCompliancePolicy("backupPolicyBackupCompliancePolicy", BackupCompliancePolicyArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .authorizedEmail("user{@literal @}email.com")
     *             .authorizedUserFirstName("First")
     *             .authorizedUserLastName("Last")
     *             .copyProtectionEnabled(false)
     *             .pitEnabled(false)
     *             .encryptionAtRestEnabled(false)
     *             .restoreWindowDays(7)
     *             .onDemandPolicyItem(BackupCompliancePolicyOnDemandPolicyItemArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("days")
     *                 .retentionValue(3)
     *                 .build())
     *             .policyItemHourly(BackupCompliancePolicyPolicyItemHourlyArgs.builder()
     *                 .frequencyInterval(6)
     *                 .retentionUnit("days")
     *                 .retentionValue(7)
     *                 .build())
     *             .policyItemDaily(BackupCompliancePolicyPolicyItemDailyArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("days")
     *                 .retentionValue(7)
     *                 .build())
     *             .policyItemWeeklies(BackupCompliancePolicyPolicyItemWeeklyArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("weeks")
     *                 .retentionValue(4)
     *                 .build())
     *             .policyItemMonthlies(BackupCompliancePolicyPolicyItemMonthlyArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("months")
     *                 .retentionValue(12)
     *                 .build())
     *             .policyItemYearlies(BackupCompliancePolicyPolicyItemYearlyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("years")
     *                 .retentionValue(1)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetBackupCompliancePolicyResult> getBackupCompliancePolicy(GetBackupCompliancePolicyArgs args) {
        return getBackupCompliancePolicy(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSchedule;
     * import com.pulumi.mongodbatlas.CloudBackupScheduleArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemHourlyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemDailyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemWeeklyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemMonthlyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemYearlyArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupScheduleArgs;
     * import com.pulumi.mongodbatlas.inputs.GetBackupCompliancePolicyArgs;
     * import com.pulumi.mongodbatlas.BackupCompliancePolicy;
     * import com.pulumi.mongodbatlas.BackupCompliancePolicyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyOnDemandPolicyItemArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemHourlyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemDailyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemWeeklyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemMonthlyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemYearlyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myCluster = new Cluster("myCluster", ClusterArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .name("clusterTest")
     *             .providerName("AWS")
     *             .providerRegionName("EU_CENTRAL_1")
     *             .providerInstanceSizeName("M10")
     *             .cloudBackup(true)
     *             .build());
     * 
     *         var testCloudBackupSchedule = new CloudBackupSchedule("testCloudBackupSchedule", CloudBackupScheduleArgs.builder()
     *             .projectId(myCluster.projectId())
     *             .clusterName(myCluster.name())
     *             .referenceHourOfDay(3)
     *             .referenceMinuteOfHour(45)
     *             .restoreWindowDays(4)
     *             .policyItemHourly(CloudBackupSchedulePolicyItemHourlyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("days")
     *                 .retentionValue(1)
     *                 .build())
     *             .policyItemDaily(CloudBackupSchedulePolicyItemDailyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("days")
     *                 .retentionValue(2)
     *                 .build())
     *             .policyItemWeeklies(CloudBackupSchedulePolicyItemWeeklyArgs.builder()
     *                 .frequencyInterval(4)
     *                 .retentionUnit("weeks")
     *                 .retentionValue(3)
     *                 .build())
     *             .policyItemMonthlies(CloudBackupSchedulePolicyItemMonthlyArgs.builder()
     *                 .frequencyInterval(5)
     *                 .retentionUnit("months")
     *                 .retentionValue(4)
     *                 .build())
     *             .policyItemYearlies(CloudBackupSchedulePolicyItemYearlyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("years")
     *                 .retentionValue(1)
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSchedule(GetCloudBackupScheduleArgs.builder()
     *             .projectId(testCloudBackupSchedule.projectId())
     *             .clusterName(testCloudBackupSchedule.clusterName())
     *             .build());
     * 
     *         final var backupPolicy = MongodbatlasFunctions.getBackupCompliancePolicy(GetBackupCompliancePolicyArgs.builder()
     *             .projectId(testCloudBackupSchedule.id())
     *             .build());
     * 
     *         var backupPolicyBackupCompliancePolicy = new BackupCompliancePolicy("backupPolicyBackupCompliancePolicy", BackupCompliancePolicyArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .authorizedEmail("user{@literal @}email.com")
     *             .authorizedUserFirstName("First")
     *             .authorizedUserLastName("Last")
     *             .copyProtectionEnabled(false)
     *             .pitEnabled(false)
     *             .encryptionAtRestEnabled(false)
     *             .restoreWindowDays(7)
     *             .onDemandPolicyItem(BackupCompliancePolicyOnDemandPolicyItemArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("days")
     *                 .retentionValue(3)
     *                 .build())
     *             .policyItemHourly(BackupCompliancePolicyPolicyItemHourlyArgs.builder()
     *                 .frequencyInterval(6)
     *                 .retentionUnit("days")
     *                 .retentionValue(7)
     *                 .build())
     *             .policyItemDaily(BackupCompliancePolicyPolicyItemDailyArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("days")
     *                 .retentionValue(7)
     *                 .build())
     *             .policyItemWeeklies(BackupCompliancePolicyPolicyItemWeeklyArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("weeks")
     *                 .retentionValue(4)
     *                 .build())
     *             .policyItemMonthlies(BackupCompliancePolicyPolicyItemMonthlyArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("months")
     *                 .retentionValue(12)
     *                 .build())
     *             .policyItemYearlies(BackupCompliancePolicyPolicyItemYearlyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("years")
     *                 .retentionValue(1)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetBackupCompliancePolicyResult> getBackupCompliancePolicyPlain(GetBackupCompliancePolicyPlainArgs args) {
        return getBackupCompliancePolicyPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSchedule;
     * import com.pulumi.mongodbatlas.CloudBackupScheduleArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemHourlyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemDailyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemWeeklyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemMonthlyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemYearlyArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupScheduleArgs;
     * import com.pulumi.mongodbatlas.inputs.GetBackupCompliancePolicyArgs;
     * import com.pulumi.mongodbatlas.BackupCompliancePolicy;
     * import com.pulumi.mongodbatlas.BackupCompliancePolicyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyOnDemandPolicyItemArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemHourlyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemDailyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemWeeklyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemMonthlyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemYearlyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myCluster = new Cluster("myCluster", ClusterArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .name("clusterTest")
     *             .providerName("AWS")
     *             .providerRegionName("EU_CENTRAL_1")
     *             .providerInstanceSizeName("M10")
     *             .cloudBackup(true)
     *             .build());
     * 
     *         var testCloudBackupSchedule = new CloudBackupSchedule("testCloudBackupSchedule", CloudBackupScheduleArgs.builder()
     *             .projectId(myCluster.projectId())
     *             .clusterName(myCluster.name())
     *             .referenceHourOfDay(3)
     *             .referenceMinuteOfHour(45)
     *             .restoreWindowDays(4)
     *             .policyItemHourly(CloudBackupSchedulePolicyItemHourlyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("days")
     *                 .retentionValue(1)
     *                 .build())
     *             .policyItemDaily(CloudBackupSchedulePolicyItemDailyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("days")
     *                 .retentionValue(2)
     *                 .build())
     *             .policyItemWeeklies(CloudBackupSchedulePolicyItemWeeklyArgs.builder()
     *                 .frequencyInterval(4)
     *                 .retentionUnit("weeks")
     *                 .retentionValue(3)
     *                 .build())
     *             .policyItemMonthlies(CloudBackupSchedulePolicyItemMonthlyArgs.builder()
     *                 .frequencyInterval(5)
     *                 .retentionUnit("months")
     *                 .retentionValue(4)
     *                 .build())
     *             .policyItemYearlies(CloudBackupSchedulePolicyItemYearlyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("years")
     *                 .retentionValue(1)
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSchedule(GetCloudBackupScheduleArgs.builder()
     *             .projectId(testCloudBackupSchedule.projectId())
     *             .clusterName(testCloudBackupSchedule.clusterName())
     *             .build());
     * 
     *         final var backupPolicy = MongodbatlasFunctions.getBackupCompliancePolicy(GetBackupCompliancePolicyArgs.builder()
     *             .projectId(testCloudBackupSchedule.id())
     *             .build());
     * 
     *         var backupPolicyBackupCompliancePolicy = new BackupCompliancePolicy("backupPolicyBackupCompliancePolicy", BackupCompliancePolicyArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .authorizedEmail("user{@literal @}email.com")
     *             .authorizedUserFirstName("First")
     *             .authorizedUserLastName("Last")
     *             .copyProtectionEnabled(false)
     *             .pitEnabled(false)
     *             .encryptionAtRestEnabled(false)
     *             .restoreWindowDays(7)
     *             .onDemandPolicyItem(BackupCompliancePolicyOnDemandPolicyItemArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("days")
     *                 .retentionValue(3)
     *                 .build())
     *             .policyItemHourly(BackupCompliancePolicyPolicyItemHourlyArgs.builder()
     *                 .frequencyInterval(6)
     *                 .retentionUnit("days")
     *                 .retentionValue(7)
     *                 .build())
     *             .policyItemDaily(BackupCompliancePolicyPolicyItemDailyArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("days")
     *                 .retentionValue(7)
     *                 .build())
     *             .policyItemWeeklies(BackupCompliancePolicyPolicyItemWeeklyArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("weeks")
     *                 .retentionValue(4)
     *                 .build())
     *             .policyItemMonthlies(BackupCompliancePolicyPolicyItemMonthlyArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("months")
     *                 .retentionValue(12)
     *                 .build())
     *             .policyItemYearlies(BackupCompliancePolicyPolicyItemYearlyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("years")
     *                 .retentionValue(1)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetBackupCompliancePolicyResult> getBackupCompliancePolicy(GetBackupCompliancePolicyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getBackupCompliancePolicy:getBackupCompliancePolicy", TypeShape.of(GetBackupCompliancePolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSchedule;
     * import com.pulumi.mongodbatlas.CloudBackupScheduleArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemHourlyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemDailyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemWeeklyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemMonthlyArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSchedulePolicyItemYearlyArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupScheduleArgs;
     * import com.pulumi.mongodbatlas.inputs.GetBackupCompliancePolicyArgs;
     * import com.pulumi.mongodbatlas.BackupCompliancePolicy;
     * import com.pulumi.mongodbatlas.BackupCompliancePolicyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyOnDemandPolicyItemArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemHourlyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemDailyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemWeeklyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemMonthlyArgs;
     * import com.pulumi.mongodbatlas.inputs.BackupCompliancePolicyPolicyItemYearlyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myCluster = new Cluster("myCluster", ClusterArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .name("clusterTest")
     *             .providerName("AWS")
     *             .providerRegionName("EU_CENTRAL_1")
     *             .providerInstanceSizeName("M10")
     *             .cloudBackup(true)
     *             .build());
     * 
     *         var testCloudBackupSchedule = new CloudBackupSchedule("testCloudBackupSchedule", CloudBackupScheduleArgs.builder()
     *             .projectId(myCluster.projectId())
     *             .clusterName(myCluster.name())
     *             .referenceHourOfDay(3)
     *             .referenceMinuteOfHour(45)
     *             .restoreWindowDays(4)
     *             .policyItemHourly(CloudBackupSchedulePolicyItemHourlyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("days")
     *                 .retentionValue(1)
     *                 .build())
     *             .policyItemDaily(CloudBackupSchedulePolicyItemDailyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("days")
     *                 .retentionValue(2)
     *                 .build())
     *             .policyItemWeeklies(CloudBackupSchedulePolicyItemWeeklyArgs.builder()
     *                 .frequencyInterval(4)
     *                 .retentionUnit("weeks")
     *                 .retentionValue(3)
     *                 .build())
     *             .policyItemMonthlies(CloudBackupSchedulePolicyItemMonthlyArgs.builder()
     *                 .frequencyInterval(5)
     *                 .retentionUnit("months")
     *                 .retentionValue(4)
     *                 .build())
     *             .policyItemYearlies(CloudBackupSchedulePolicyItemYearlyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("years")
     *                 .retentionValue(1)
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSchedule(GetCloudBackupScheduleArgs.builder()
     *             .projectId(testCloudBackupSchedule.projectId())
     *             .clusterName(testCloudBackupSchedule.clusterName())
     *             .build());
     * 
     *         final var backupPolicy = MongodbatlasFunctions.getBackupCompliancePolicy(GetBackupCompliancePolicyArgs.builder()
     *             .projectId(testCloudBackupSchedule.id())
     *             .build());
     * 
     *         var backupPolicyBackupCompliancePolicy = new BackupCompliancePolicy("backupPolicyBackupCompliancePolicy", BackupCompliancePolicyArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .authorizedEmail("user{@literal @}email.com")
     *             .authorizedUserFirstName("First")
     *             .authorizedUserLastName("Last")
     *             .copyProtectionEnabled(false)
     *             .pitEnabled(false)
     *             .encryptionAtRestEnabled(false)
     *             .restoreWindowDays(7)
     *             .onDemandPolicyItem(BackupCompliancePolicyOnDemandPolicyItemArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("days")
     *                 .retentionValue(3)
     *                 .build())
     *             .policyItemHourly(BackupCompliancePolicyPolicyItemHourlyArgs.builder()
     *                 .frequencyInterval(6)
     *                 .retentionUnit("days")
     *                 .retentionValue(7)
     *                 .build())
     *             .policyItemDaily(BackupCompliancePolicyPolicyItemDailyArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("days")
     *                 .retentionValue(7)
     *                 .build())
     *             .policyItemWeeklies(BackupCompliancePolicyPolicyItemWeeklyArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("weeks")
     *                 .retentionValue(4)
     *                 .build())
     *             .policyItemMonthlies(BackupCompliancePolicyPolicyItemMonthlyArgs.builder()
     *                 .frequencyInterval(0)
     *                 .retentionUnit("months")
     *                 .retentionValue(12)
     *                 .build())
     *             .policyItemYearlies(BackupCompliancePolicyPolicyItemYearlyArgs.builder()
     *                 .frequencyInterval(1)
     *                 .retentionUnit("years")
     *                 .retentionValue(1)
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetBackupCompliancePolicyResult> getBackupCompliancePolicyPlain(GetBackupCompliancePolicyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getBackupCompliancePolicy:getBackupCompliancePolicy", TypeShape.of(GetBackupCompliancePolicyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSchedule` provides a Cloud Backup Schedule datasource. An Atlas Cloud Backup Schedule provides the current cloud backup schedule for the cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSchedule;
     * import com.pulumi.mongodbatlas.CloudBackupScheduleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myCluster = new Cluster("myCluster", ClusterArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .name("clusterTest")
     *             .providerName("AWS")
     *             .providerRegionName("EU_CENTRAL_1")
     *             .providerInstanceSizeName("M10")
     *             .cloudBackup(true)
     *             .build());
     * 
     *         var testCloudBackupSchedule = new CloudBackupSchedule("testCloudBackupSchedule", CloudBackupScheduleArgs.builder()
     *             .projectId(myCluster.projectId())
     *             .clusterName(myCluster.name())
     *             .referenceHourOfDay(3)
     *             .referenceMinuteOfHour(45)
     *             .restoreWindowDays(4)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSchedule(GetCloudBackupScheduleArgs.builder()
     *             .projectId(testCloudBackupSchedule.projectId())
     *             .clusterName(testCloudBackupSchedule.clusterName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupScheduleResult> getCloudBackupSchedule(GetCloudBackupScheduleArgs args) {
        return getCloudBackupSchedule(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSchedule` provides a Cloud Backup Schedule datasource. An Atlas Cloud Backup Schedule provides the current cloud backup schedule for the cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSchedule;
     * import com.pulumi.mongodbatlas.CloudBackupScheduleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myCluster = new Cluster("myCluster", ClusterArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .name("clusterTest")
     *             .providerName("AWS")
     *             .providerRegionName("EU_CENTRAL_1")
     *             .providerInstanceSizeName("M10")
     *             .cloudBackup(true)
     *             .build());
     * 
     *         var testCloudBackupSchedule = new CloudBackupSchedule("testCloudBackupSchedule", CloudBackupScheduleArgs.builder()
     *             .projectId(myCluster.projectId())
     *             .clusterName(myCluster.name())
     *             .referenceHourOfDay(3)
     *             .referenceMinuteOfHour(45)
     *             .restoreWindowDays(4)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSchedule(GetCloudBackupScheduleArgs.builder()
     *             .projectId(testCloudBackupSchedule.projectId())
     *             .clusterName(testCloudBackupSchedule.clusterName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupScheduleResult> getCloudBackupSchedulePlain(GetCloudBackupSchedulePlainArgs args) {
        return getCloudBackupSchedulePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSchedule` provides a Cloud Backup Schedule datasource. An Atlas Cloud Backup Schedule provides the current cloud backup schedule for the cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSchedule;
     * import com.pulumi.mongodbatlas.CloudBackupScheduleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myCluster = new Cluster("myCluster", ClusterArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .name("clusterTest")
     *             .providerName("AWS")
     *             .providerRegionName("EU_CENTRAL_1")
     *             .providerInstanceSizeName("M10")
     *             .cloudBackup(true)
     *             .build());
     * 
     *         var testCloudBackupSchedule = new CloudBackupSchedule("testCloudBackupSchedule", CloudBackupScheduleArgs.builder()
     *             .projectId(myCluster.projectId())
     *             .clusterName(myCluster.name())
     *             .referenceHourOfDay(3)
     *             .referenceMinuteOfHour(45)
     *             .restoreWindowDays(4)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSchedule(GetCloudBackupScheduleArgs.builder()
     *             .projectId(testCloudBackupSchedule.projectId())
     *             .clusterName(testCloudBackupSchedule.clusterName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupScheduleResult> getCloudBackupSchedule(GetCloudBackupScheduleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSchedule:getCloudBackupSchedule", TypeShape.of(GetCloudBackupScheduleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSchedule` provides a Cloud Backup Schedule datasource. An Atlas Cloud Backup Schedule provides the current cloud backup schedule for the cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSchedule;
     * import com.pulumi.mongodbatlas.CloudBackupScheduleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupScheduleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var myCluster = new Cluster("myCluster", ClusterArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .name("clusterTest")
     *             .providerName("AWS")
     *             .providerRegionName("EU_CENTRAL_1")
     *             .providerInstanceSizeName("M10")
     *             .cloudBackup(true)
     *             .build());
     * 
     *         var testCloudBackupSchedule = new CloudBackupSchedule("testCloudBackupSchedule", CloudBackupScheduleArgs.builder()
     *             .projectId(myCluster.projectId())
     *             .clusterName(myCluster.name())
     *             .referenceHourOfDay(3)
     *             .referenceMinuteOfHour(45)
     *             .restoreWindowDays(4)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSchedule(GetCloudBackupScheduleArgs.builder()
     *             .projectId(testCloudBackupSchedule.projectId())
     *             .clusterName(testCloudBackupSchedule.clusterName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupScheduleResult> getCloudBackupSchedulePlain(GetCloudBackupSchedulePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSchedule:getCloudBackupSchedule", TypeShape.of(GetCloudBackupScheduleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshot;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshot = new CloudBackupSnapshot("testCloudBackupSnapshot", CloudBackupSnapshotArgs.builder()
     *             .projectId("5d0f1f73cf09a29120e173cf")
     *             .clusterName("MyClusterTest")
     *             .description("SomeDescription")
     *             .retentionInDays(1)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshot(GetCloudBackupSnapshotArgs.builder()
     *             .snapshotId("5d1285acd5ec13b6c2d1726a")
     *             .projectId(testCloudBackupSnapshot.projectId())
     *             .clusterName(testCloudBackupSnapshot.clusterName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotResult> getCloudBackupSnapshot(GetCloudBackupSnapshotArgs args) {
        return getCloudBackupSnapshot(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshot;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshot = new CloudBackupSnapshot("testCloudBackupSnapshot", CloudBackupSnapshotArgs.builder()
     *             .projectId("5d0f1f73cf09a29120e173cf")
     *             .clusterName("MyClusterTest")
     *             .description("SomeDescription")
     *             .retentionInDays(1)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshot(GetCloudBackupSnapshotArgs.builder()
     *             .snapshotId("5d1285acd5ec13b6c2d1726a")
     *             .projectId(testCloudBackupSnapshot.projectId())
     *             .clusterName(testCloudBackupSnapshot.clusterName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotResult> getCloudBackupSnapshotPlain(GetCloudBackupSnapshotPlainArgs args) {
        return getCloudBackupSnapshotPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshot;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshot = new CloudBackupSnapshot("testCloudBackupSnapshot", CloudBackupSnapshotArgs.builder()
     *             .projectId("5d0f1f73cf09a29120e173cf")
     *             .clusterName("MyClusterTest")
     *             .description("SomeDescription")
     *             .retentionInDays(1)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshot(GetCloudBackupSnapshotArgs.builder()
     *             .snapshotId("5d1285acd5ec13b6c2d1726a")
     *             .projectId(testCloudBackupSnapshot.projectId())
     *             .clusterName(testCloudBackupSnapshot.clusterName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotResult> getCloudBackupSnapshot(GetCloudBackupSnapshotArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshot:getCloudBackupSnapshot", TypeShape.of(GetCloudBackupSnapshotResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshot` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshot;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshot = new CloudBackupSnapshot("testCloudBackupSnapshot", CloudBackupSnapshotArgs.builder()
     *             .projectId("5d0f1f73cf09a29120e173cf")
     *             .clusterName("MyClusterTest")
     *             .description("SomeDescription")
     *             .retentionInDays(1)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshot(GetCloudBackupSnapshotArgs.builder()
     *             .snapshotId("5d1285acd5ec13b6c2d1726a")
     *             .projectId(testCloudBackupSnapshot.projectId())
     *             .clusterName(testCloudBackupSnapshot.clusterName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotResult> getCloudBackupSnapshotPlain(GetCloudBackupSnapshotPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshot:getCloudBackupSnapshot", TypeShape.of(GetCloudBackupSnapshotResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportBucket` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example-bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportBucket(GetCloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotExportBucketResult> getCloudBackupSnapshotExportBucket(GetCloudBackupSnapshotExportBucketArgs args) {
        return getCloudBackupSnapshotExportBucket(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportBucket` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example-bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportBucket(GetCloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportBucketResult> getCloudBackupSnapshotExportBucketPlain(GetCloudBackupSnapshotExportBucketPlainArgs args) {
        return getCloudBackupSnapshotExportBucketPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportBucket` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example-bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportBucket(GetCloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotExportBucketResult> getCloudBackupSnapshotExportBucket(GetCloudBackupSnapshotExportBucketArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshotExportBucket:getCloudBackupSnapshotExportBucket", TypeShape.of(GetCloudBackupSnapshotExportBucketResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportBucket` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example-bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportBucket(GetCloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportBucketResult> getCloudBackupSnapshotExportBucketPlain(GetCloudBackupSnapshotExportBucketPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshotExportBucket:getCloudBackupSnapshotExportBucket", TypeShape.of(GetCloudBackupSnapshotExportBucketResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportBuckets` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example-bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportBuckets(GetCloudBackupSnapshotExportBucketsArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotExportBucketsInvokeResult> getCloudBackupSnapshotExportBuckets(GetCloudBackupSnapshotExportBucketsArgs args) {
        return getCloudBackupSnapshotExportBuckets(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportBuckets` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example-bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportBuckets(GetCloudBackupSnapshotExportBucketsArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportBucketsInvokeResult> getCloudBackupSnapshotExportBucketsPlain(GetCloudBackupSnapshotExportBucketsPlainArgs args) {
        return getCloudBackupSnapshotExportBucketsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportBuckets` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example-bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportBuckets(GetCloudBackupSnapshotExportBucketsArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotExportBucketsInvokeResult> getCloudBackupSnapshotExportBuckets(GetCloudBackupSnapshotExportBucketsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshotExportBuckets:getCloudBackupSnapshotExportBuckets", TypeShape.of(GetCloudBackupSnapshotExportBucketsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportBuckets` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportBucketsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example-bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportBuckets(GetCloudBackupSnapshotExportBucketsArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportBucketsInvokeResult> getCloudBackupSnapshotExportBucketsPlain(GetCloudBackupSnapshotExportBucketsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshotExportBuckets:getCloudBackupSnapshotExportBuckets", TypeShape.of(GetCloudBackupSnapshotExportBucketsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportJob` datasource allows you to retrieve a snapshot export job for the specified project and cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotExportJobCustomDataArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example_bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         var testCloudBackupSnapshotExportJob = new CloudBackupSnapshotExportJob("testCloudBackupSnapshotExportJob", CloudBackupSnapshotExportJobArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .snapshotId("{SNAPSHOT_ID}")
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .customDatas(CloudBackupSnapshotExportJobCustomDataArgs.builder()
     *                 .key("exported by")
     *                 .value("myName")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportJob(GetCloudBackupSnapshotExportJobArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .exportJobId(testCloudBackupSnapshotExportJob.exportJobId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotExportJobResult> getCloudBackupSnapshotExportJob(GetCloudBackupSnapshotExportJobArgs args) {
        return getCloudBackupSnapshotExportJob(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportJob` datasource allows you to retrieve a snapshot export job for the specified project and cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotExportJobCustomDataArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example_bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         var testCloudBackupSnapshotExportJob = new CloudBackupSnapshotExportJob("testCloudBackupSnapshotExportJob", CloudBackupSnapshotExportJobArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .snapshotId("{SNAPSHOT_ID}")
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .customDatas(CloudBackupSnapshotExportJobCustomDataArgs.builder()
     *                 .key("exported by")
     *                 .value("myName")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportJob(GetCloudBackupSnapshotExportJobArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .exportJobId(testCloudBackupSnapshotExportJob.exportJobId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportJobResult> getCloudBackupSnapshotExportJobPlain(GetCloudBackupSnapshotExportJobPlainArgs args) {
        return getCloudBackupSnapshotExportJobPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportJob` datasource allows you to retrieve a snapshot export job for the specified project and cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotExportJobCustomDataArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example_bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         var testCloudBackupSnapshotExportJob = new CloudBackupSnapshotExportJob("testCloudBackupSnapshotExportJob", CloudBackupSnapshotExportJobArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .snapshotId("{SNAPSHOT_ID}")
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .customDatas(CloudBackupSnapshotExportJobCustomDataArgs.builder()
     *                 .key("exported by")
     *                 .value("myName")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportJob(GetCloudBackupSnapshotExportJobArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .exportJobId(testCloudBackupSnapshotExportJob.exportJobId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotExportJobResult> getCloudBackupSnapshotExportJob(GetCloudBackupSnapshotExportJobArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshotExportJob:getCloudBackupSnapshotExportJob", TypeShape.of(GetCloudBackupSnapshotExportJobResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotExportJob` datasource allows you to retrieve a snapshot export job for the specified project and cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotExportJobCustomDataArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example_bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         var testCloudBackupSnapshotExportJob = new CloudBackupSnapshotExportJob("testCloudBackupSnapshotExportJob", CloudBackupSnapshotExportJobArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .snapshotId("{SNAPSHOT_ID}")
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .customDatas(CloudBackupSnapshotExportJobCustomDataArgs.builder()
     *                 .key("exported by")
     *                 .value("myName")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportJob(GetCloudBackupSnapshotExportJobArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .exportJobId(testCloudBackupSnapshotExportJob.exportJobId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportJobResult> getCloudBackupSnapshotExportJobPlain(GetCloudBackupSnapshotExportJobPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshotExportJob:getCloudBackupSnapshotExportJob", TypeShape.of(GetCloudBackupSnapshotExportJobResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportJobs` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotExportJobCustomDataArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example_bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         var testCloudBackupSnapshotExportJob = new CloudBackupSnapshotExportJob("testCloudBackupSnapshotExportJob", CloudBackupSnapshotExportJobArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .snapshotId("{SNAPSHOT_ID}")
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .customDatas(CloudBackupSnapshotExportJobCustomDataArgs.builder()
     *                 .key("exported by")
     *                 .value("myName")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportJobs(GetCloudBackupSnapshotExportJobsArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotExportJobsInvokeResult> getCloudBackupSnapshotExportJobs(GetCloudBackupSnapshotExportJobsArgs args) {
        return getCloudBackupSnapshotExportJobs(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportJobs` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotExportJobCustomDataArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example_bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         var testCloudBackupSnapshotExportJob = new CloudBackupSnapshotExportJob("testCloudBackupSnapshotExportJob", CloudBackupSnapshotExportJobArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .snapshotId("{SNAPSHOT_ID}")
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .customDatas(CloudBackupSnapshotExportJobCustomDataArgs.builder()
     *                 .key("exported by")
     *                 .value("myName")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportJobs(GetCloudBackupSnapshotExportJobsArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportJobsInvokeResult> getCloudBackupSnapshotExportJobsPlain(GetCloudBackupSnapshotExportJobsPlainArgs args) {
        return getCloudBackupSnapshotExportJobsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportJobs` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotExportJobCustomDataArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example_bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         var testCloudBackupSnapshotExportJob = new CloudBackupSnapshotExportJob("testCloudBackupSnapshotExportJob", CloudBackupSnapshotExportJobArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .snapshotId("{SNAPSHOT_ID}")
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .customDatas(CloudBackupSnapshotExportJobCustomDataArgs.builder()
     *                 .key("exported by")
     *                 .value("myName")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportJobs(GetCloudBackupSnapshotExportJobsArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotExportJobsInvokeResult> getCloudBackupSnapshotExportJobs(GetCloudBackupSnapshotExportJobsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshotExportJobs:getCloudBackupSnapshotExportJobs", TypeShape.of(GetCloudBackupSnapshotExportJobsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotExportJobs` datasource allows you to retrieve all the buckets for the specified project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucket;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportBucketArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotExportJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotExportJobCustomDataArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotExportJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshotExportBucket = new CloudBackupSnapshotExportBucket("testCloudBackupSnapshotExportBucket", CloudBackupSnapshotExportBucketArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .iamRoleId("{IAM_ROLE_ID}")
     *             .bucketName("example_bucket")
     *             .cloudProvider("AWS")
     *             .build());
     * 
     *         var testCloudBackupSnapshotExportJob = new CloudBackupSnapshotExportJob("testCloudBackupSnapshotExportJob", CloudBackupSnapshotExportJobArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .snapshotId("{SNAPSHOT_ID}")
     *             .exportBucketId(testCloudBackupSnapshotExportBucket.exportBucketId())
     *             .customDatas(CloudBackupSnapshotExportJobCustomDataArgs.builder()
     *                 .key("exported by")
     *                 .value("myName")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotExportJobs(GetCloudBackupSnapshotExportJobsArgs.builder()
     *             .projectId("{PROJECT_ID}")
     *             .clusterName("{CLUSTER_NAME}")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotExportJobsInvokeResult> getCloudBackupSnapshotExportJobsPlain(GetCloudBackupSnapshotExportJobsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshotExportJobs:getCloudBackupSnapshotExportJobs", TypeShape.of(GetCloudBackupSnapshotExportJobsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotRestoreJob` provides a Cloud Backup Snapshot Restore Job datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotRestoreJobResult> getCloudBackupSnapshotRestoreJob(GetCloudBackupSnapshotRestoreJobArgs args) {
        return getCloudBackupSnapshotRestoreJob(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotRestoreJob` provides a Cloud Backup Snapshot Restore Job datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotRestoreJobResult> getCloudBackupSnapshotRestoreJobPlain(GetCloudBackupSnapshotRestoreJobPlainArgs args) {
        return getCloudBackupSnapshotRestoreJobPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotRestoreJob` provides a Cloud Backup Snapshot Restore Job datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotRestoreJobResult> getCloudBackupSnapshotRestoreJob(GetCloudBackupSnapshotRestoreJobArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshotRestoreJob:getCloudBackupSnapshotRestoreJob", TypeShape.of(GetCloudBackupSnapshotRestoreJobResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudBackupSnapshotRestoreJob` provides a Cloud Backup Snapshot Restore Job datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotRestoreJobResult> getCloudBackupSnapshotRestoreJobPlain(GetCloudBackupSnapshotRestoreJobPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshotRestoreJob:getCloudBackupSnapshotRestoreJob", TypeShape.of(GetCloudBackupSnapshotRestoreJobResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotRestoreJobs` provides a Cloud Backup Snapshot Restore Jobs datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshot;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshot = new CloudBackupSnapshot("testCloudBackupSnapshot", CloudBackupSnapshotArgs.builder()
     *             .projectId("5cf5a45a9ccf6400e60981b6")
     *             .clusterName("MyCluster")
     *             .description("MyDescription")
     *             .retentionInDays(1)
     *             .build());
     * 
     *         var testCloudBackupSnapshotRestoreJob = new CloudBackupSnapshotRestoreJob("testCloudBackupSnapshotRestoreJob", CloudBackupSnapshotRestoreJobArgs.builder()
     *             .projectId("5cf5a45a9ccf6400e60981b6")
     *             .clusterName("MyCluster")
     *             .snapshotId(testCloudBackupSnapshot.id())
     *             .deliveryTypeConfig(CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs.builder()
     *                 .automated(true)
     *                 .targetClusterName("MyCluster")
     *                 .targetProjectId("5cf5a45a9ccf6400e60981b6")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotRestoreJobs(GetCloudBackupSnapshotRestoreJobsArgs.builder()
     *             .projectId(testCloudBackupSnapshotRestoreJob.projectId())
     *             .clusterName(testCloudBackupSnapshotRestoreJob.clusterName())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotRestoreJobsInvokeResult> getCloudBackupSnapshotRestoreJobs(GetCloudBackupSnapshotRestoreJobsArgs args) {
        return getCloudBackupSnapshotRestoreJobs(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotRestoreJobs` provides a Cloud Backup Snapshot Restore Jobs datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshot;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshot = new CloudBackupSnapshot("testCloudBackupSnapshot", CloudBackupSnapshotArgs.builder()
     *             .projectId("5cf5a45a9ccf6400e60981b6")
     *             .clusterName("MyCluster")
     *             .description("MyDescription")
     *             .retentionInDays(1)
     *             .build());
     * 
     *         var testCloudBackupSnapshotRestoreJob = new CloudBackupSnapshotRestoreJob("testCloudBackupSnapshotRestoreJob", CloudBackupSnapshotRestoreJobArgs.builder()
     *             .projectId("5cf5a45a9ccf6400e60981b6")
     *             .clusterName("MyCluster")
     *             .snapshotId(testCloudBackupSnapshot.id())
     *             .deliveryTypeConfig(CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs.builder()
     *                 .automated(true)
     *                 .targetClusterName("MyCluster")
     *                 .targetProjectId("5cf5a45a9ccf6400e60981b6")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotRestoreJobs(GetCloudBackupSnapshotRestoreJobsArgs.builder()
     *             .projectId(testCloudBackupSnapshotRestoreJob.projectId())
     *             .clusterName(testCloudBackupSnapshotRestoreJob.clusterName())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotRestoreJobsInvokeResult> getCloudBackupSnapshotRestoreJobsPlain(GetCloudBackupSnapshotRestoreJobsPlainArgs args) {
        return getCloudBackupSnapshotRestoreJobsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotRestoreJobs` provides a Cloud Backup Snapshot Restore Jobs datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshot;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshot = new CloudBackupSnapshot("testCloudBackupSnapshot", CloudBackupSnapshotArgs.builder()
     *             .projectId("5cf5a45a9ccf6400e60981b6")
     *             .clusterName("MyCluster")
     *             .description("MyDescription")
     *             .retentionInDays(1)
     *             .build());
     * 
     *         var testCloudBackupSnapshotRestoreJob = new CloudBackupSnapshotRestoreJob("testCloudBackupSnapshotRestoreJob", CloudBackupSnapshotRestoreJobArgs.builder()
     *             .projectId("5cf5a45a9ccf6400e60981b6")
     *             .clusterName("MyCluster")
     *             .snapshotId(testCloudBackupSnapshot.id())
     *             .deliveryTypeConfig(CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs.builder()
     *                 .automated(true)
     *                 .targetClusterName("MyCluster")
     *                 .targetProjectId("5cf5a45a9ccf6400e60981b6")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotRestoreJobs(GetCloudBackupSnapshotRestoreJobsArgs.builder()
     *             .projectId(testCloudBackupSnapshotRestoreJob.projectId())
     *             .clusterName(testCloudBackupSnapshotRestoreJob.clusterName())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotRestoreJobsInvokeResult> getCloudBackupSnapshotRestoreJobs(GetCloudBackupSnapshotRestoreJobsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshotRestoreJobs:getCloudBackupSnapshotRestoreJobs", TypeShape.of(GetCloudBackupSnapshotRestoreJobsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshotRestoreJobs` provides a Cloud Backup Snapshot Restore Jobs datasource. Gets all the cloud backup snapshot restore jobs for the specified cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * First create a snapshot of the desired cluster. Then request that snapshot be restored in an automated fashion to the designated cluster and project.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshot;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotArgs;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJob;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotRestoreJobArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotRestoreJobsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshot = new CloudBackupSnapshot("testCloudBackupSnapshot", CloudBackupSnapshotArgs.builder()
     *             .projectId("5cf5a45a9ccf6400e60981b6")
     *             .clusterName("MyCluster")
     *             .description("MyDescription")
     *             .retentionInDays(1)
     *             .build());
     * 
     *         var testCloudBackupSnapshotRestoreJob = new CloudBackupSnapshotRestoreJob("testCloudBackupSnapshotRestoreJob", CloudBackupSnapshotRestoreJobArgs.builder()
     *             .projectId("5cf5a45a9ccf6400e60981b6")
     *             .clusterName("MyCluster")
     *             .snapshotId(testCloudBackupSnapshot.id())
     *             .deliveryTypeConfig(CloudBackupSnapshotRestoreJobDeliveryTypeConfigArgs.builder()
     *                 .automated(true)
     *                 .targetClusterName("MyCluster")
     *                 .targetProjectId("5cf5a45a9ccf6400e60981b6")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshotRestoreJobs(GetCloudBackupSnapshotRestoreJobsArgs.builder()
     *             .projectId(testCloudBackupSnapshotRestoreJob.projectId())
     *             .clusterName(testCloudBackupSnapshotRestoreJob.clusterName())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotRestoreJobsInvokeResult> getCloudBackupSnapshotRestoreJobsPlain(GetCloudBackupSnapshotRestoreJobsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshotRestoreJobs:getCloudBackupSnapshotRestoreJobs", TypeShape.of(GetCloudBackupSnapshotRestoreJobsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.cloudBackupSnapshots;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotsArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshots = new CloudBackupSnapshots("testCloudBackupSnapshots", CloudBackupSnapshotsArgs.builder()
     *             .groupId("5d0f1f73cf09a29120e173cf")
     *             .clusterName("MyClusterTest")
     *             .description("SomeDescription")
     *             .retentionInDays(1)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshots(GetCloudBackupSnapshotsArgs.builder()
     *             .groupId(testCloudBackupSnapshots.groupId())
     *             .clusterName(testCloudBackupSnapshots.clusterName())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotsInvokeResult> getCloudBackupSnapshots(GetCloudBackupSnapshotsArgs args) {
        return getCloudBackupSnapshots(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.cloudBackupSnapshots;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotsArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshots = new CloudBackupSnapshots("testCloudBackupSnapshots", CloudBackupSnapshotsArgs.builder()
     *             .groupId("5d0f1f73cf09a29120e173cf")
     *             .clusterName("MyClusterTest")
     *             .description("SomeDescription")
     *             .retentionInDays(1)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshots(GetCloudBackupSnapshotsArgs.builder()
     *             .groupId(testCloudBackupSnapshots.groupId())
     *             .clusterName(testCloudBackupSnapshots.clusterName())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotsInvokeResult> getCloudBackupSnapshotsPlain(GetCloudBackupSnapshotsPlainArgs args) {
        return getCloudBackupSnapshotsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.cloudBackupSnapshots;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotsArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshots = new CloudBackupSnapshots("testCloudBackupSnapshots", CloudBackupSnapshotsArgs.builder()
     *             .groupId("5d0f1f73cf09a29120e173cf")
     *             .clusterName("MyClusterTest")
     *             .description("SomeDescription")
     *             .retentionInDays(1)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshots(GetCloudBackupSnapshotsArgs.builder()
     *             .groupId(testCloudBackupSnapshots.groupId())
     *             .clusterName(testCloudBackupSnapshots.clusterName())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudBackupSnapshotsInvokeResult> getCloudBackupSnapshots(GetCloudBackupSnapshotsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudBackupSnapshots:getCloudBackupSnapshots", TypeShape.of(GetCloudBackupSnapshotsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCloudBackupSnapshots` provides an Cloud Backup Snapshot datasource. Atlas Cloud Backup Snapshots provide localized backup storage using the native snapshot functionality of the cluster’s cloud service.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.cloudBackupSnapshots;
     * import com.pulumi.mongodbatlas.CloudBackupSnapshotsArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudBackupSnapshotsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCloudBackupSnapshots = new CloudBackupSnapshots("testCloudBackupSnapshots", CloudBackupSnapshotsArgs.builder()
     *             .groupId("5d0f1f73cf09a29120e173cf")
     *             .clusterName("MyClusterTest")
     *             .description("SomeDescription")
     *             .retentionInDays(1)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCloudBackupSnapshots(GetCloudBackupSnapshotsArgs.builder()
     *             .groupId(testCloudBackupSnapshots.groupId())
     *             .clusterName(testCloudBackupSnapshots.clusterName())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudBackupSnapshotsInvokeResult> getCloudBackupSnapshotsPlain(GetCloudBackupSnapshotsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudBackupSnapshots:getCloudBackupSnapshots", TypeShape.of(GetCloudBackupSnapshotsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudProviderAccessSetup` allows you to get a single role for a provider access role setup, currently only AWS and Azure are supported.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### With AWS
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup("testRole", CloudProviderAccessSetupArgs.builder()
     *             .projectId("64259ee860c43338194b0f8e")
     *             .providerName("AWS")
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With AZURE
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessSetupAzureConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup("testRole", CloudProviderAccessSetupArgs.builder()
     *             .projectId("64259ee860c43338194b0f8e")
     *             .providerName("AZURE")
     *             .azureConfigs(CloudProviderAccessSetupAzureConfigArgs.builder()
     *                 .atlasAzureAppId("9f2deb0d-be22-4524-a403-df531868bac0")
     *                 .servicePrincipalId("22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1")
     *                 .tenantId("91402384-d71e-22f5-22dd-759e272cdc1c")
     *                 .build())
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudProviderAccessSetupResult> getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs args) {
        return getCloudProviderAccessSetup(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudProviderAccessSetup` allows you to get a single role for a provider access role setup, currently only AWS and Azure are supported.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### With AWS
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup("testRole", CloudProviderAccessSetupArgs.builder()
     *             .projectId("64259ee860c43338194b0f8e")
     *             .providerName("AWS")
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With AZURE
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessSetupAzureConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup("testRole", CloudProviderAccessSetupArgs.builder()
     *             .projectId("64259ee860c43338194b0f8e")
     *             .providerName("AZURE")
     *             .azureConfigs(CloudProviderAccessSetupAzureConfigArgs.builder()
     *                 .atlasAzureAppId("9f2deb0d-be22-4524-a403-df531868bac0")
     *                 .servicePrincipalId("22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1")
     *                 .tenantId("91402384-d71e-22f5-22dd-759e272cdc1c")
     *                 .build())
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudProviderAccessSetupResult> getCloudProviderAccessSetupPlain(GetCloudProviderAccessSetupPlainArgs args) {
        return getCloudProviderAccessSetupPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CloudProviderAccessSetup` allows you to get a single role for a provider access role setup, currently only AWS and Azure are supported.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### With AWS
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup("testRole", CloudProviderAccessSetupArgs.builder()
     *             .projectId("64259ee860c43338194b0f8e")
     *             .providerName("AWS")
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With AZURE
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessSetupAzureConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup("testRole", CloudProviderAccessSetupArgs.builder()
     *             .projectId("64259ee860c43338194b0f8e")
     *             .providerName("AZURE")
     *             .azureConfigs(CloudProviderAccessSetupAzureConfigArgs.builder()
     *                 .atlasAzureAppId("9f2deb0d-be22-4524-a403-df531868bac0")
     *                 .servicePrincipalId("22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1")
     *                 .tenantId("91402384-d71e-22f5-22dd-759e272cdc1c")
     *                 .build())
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCloudProviderAccessSetupResult> getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCloudProviderAccessSetup:getCloudProviderAccessSetup", TypeShape.of(GetCloudProviderAccessSetupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CloudProviderAccessSetup` allows you to get a single role for a provider access role setup, currently only AWS and Azure are supported.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### With AWS
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup("testRole", CloudProviderAccessSetupArgs.builder()
     *             .projectId("64259ee860c43338194b0f8e")
     *             .providerName("AWS")
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### With AZURE
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessSetupAzureConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CloudProviderAccessSetup("testRole", CloudProviderAccessSetupArgs.builder()
     *             .projectId("64259ee860c43338194b0f8e")
     *             .providerName("AZURE")
     *             .azureConfigs(CloudProviderAccessSetupAzureConfigArgs.builder()
     *                 .atlasAzureAppId("9f2deb0d-be22-4524-a403-df531868bac0")
     *                 .servicePrincipalId("22f1d2a6-d0e9-482a-83a4-b8dd7dddc2c1")
     *                 .tenantId("91402384-d71e-22f5-22dd-759e272cdc1c")
     *                 .build())
     *             .build());
     * 
     *         final var singleSetup = MongodbatlasFunctions.getCloudProviderAccessSetup(GetCloudProviderAccessSetupArgs.builder()
     *             .projectId(testRole.projectId())
     *             .providerName(testRole.providerName())
     *             .roleId(testRole.roleId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCloudProviderAccessSetupResult> getCloudProviderAccessSetupPlain(GetCloudProviderAccessSetupPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCloudProviderAccessSetup:getCloudProviderAccessSetup", TypeShape.of(GetCloudProviderAccessSetupResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Cluster` describes a Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Multi Region Cluster: The `mongodbatlas.Cluster` data source doesn&#39;t return the `container_id` for each region utilized by the cluster. For retrieving the `container_id`, we recommend the `mongodbatlas.AdvancedCluster` data source instead.
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .numShards(1)
     *                 .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                     .regionName("US_EAST_1")
     *                     .electableNodes(3)
     *                     .priority(7)
     *                     .readOnlyNodes(0)
     *                     .build())
     *                 .build())
     *             .cloudBackup(true)
     *             .autoScalingDiskGbEnabled(true)
     *             .providerName("AWS")
     *             .providerInstanceSizeName("M40")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCluster(GetClusterArgs.builder()
     *             .projectId(testCluster.projectId())
     *             .name(testCluster.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterResult> getCluster(GetClusterArgs args) {
        return getCluster(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Cluster` describes a Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Multi Region Cluster: The `mongodbatlas.Cluster` data source doesn&#39;t return the `container_id` for each region utilized by the cluster. For retrieving the `container_id`, we recommend the `mongodbatlas.AdvancedCluster` data source instead.
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .numShards(1)
     *                 .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                     .regionName("US_EAST_1")
     *                     .electableNodes(3)
     *                     .priority(7)
     *                     .readOnlyNodes(0)
     *                     .build())
     *                 .build())
     *             .cloudBackup(true)
     *             .autoScalingDiskGbEnabled(true)
     *             .providerName("AWS")
     *             .providerInstanceSizeName("M40")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCluster(GetClusterArgs.builder()
     *             .projectId(testCluster.projectId())
     *             .name(testCluster.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClusterResult> getClusterPlain(GetClusterPlainArgs args) {
        return getClusterPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Cluster` describes a Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Multi Region Cluster: The `mongodbatlas.Cluster` data source doesn&#39;t return the `container_id` for each region utilized by the cluster. For retrieving the `container_id`, we recommend the `mongodbatlas.AdvancedCluster` data source instead.
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .numShards(1)
     *                 .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                     .regionName("US_EAST_1")
     *                     .electableNodes(3)
     *                     .priority(7)
     *                     .readOnlyNodes(0)
     *                     .build())
     *                 .build())
     *             .cloudBackup(true)
     *             .autoScalingDiskGbEnabled(true)
     *             .providerName("AWS")
     *             .providerInstanceSizeName("M40")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCluster(GetClusterArgs.builder()
     *             .projectId(testCluster.projectId())
     *             .name(testCluster.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterResult> getCluster(GetClusterArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCluster:getCluster", TypeShape.of(GetClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Cluster` describes a Cluster. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Multi Region Cluster: The `mongodbatlas.Cluster` data source doesn&#39;t return the `container_id` for each region utilized by the cluster. For retrieving the `container_id`, we recommend the `mongodbatlas.AdvancedCluster` data source instead.
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClusterArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .numShards(1)
     *                 .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                     .regionName("US_EAST_1")
     *                     .electableNodes(3)
     *                     .priority(7)
     *                     .readOnlyNodes(0)
     *                     .build())
     *                 .build())
     *             .cloudBackup(true)
     *             .autoScalingDiskGbEnabled(true)
     *             .providerName("AWS")
     *             .providerInstanceSizeName("M40")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCluster(GetClusterArgs.builder()
     *             .projectId(testCluster.projectId())
     *             .name(testCluster.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClusterResult> getClusterPlain(GetClusterPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCluster:getCluster", TypeShape.of(GetClusterResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClusterOutageSimulationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var outageSimulation = MongodbatlasFunctions.getClusterOutageSimulation(GetClusterOutageSimulationArgs.builder()
     *             .projectId("64707f06c519c20c3a2b1b03")
     *             .clusterName("Cluster0")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterOutageSimulationResult> getClusterOutageSimulation(GetClusterOutageSimulationArgs args) {
        return getClusterOutageSimulation(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClusterOutageSimulationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var outageSimulation = MongodbatlasFunctions.getClusterOutageSimulation(GetClusterOutageSimulationArgs.builder()
     *             .projectId("64707f06c519c20c3a2b1b03")
     *             .clusterName("Cluster0")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClusterOutageSimulationResult> getClusterOutageSimulationPlain(GetClusterOutageSimulationPlainArgs args) {
        return getClusterOutageSimulationPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClusterOutageSimulationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var outageSimulation = MongodbatlasFunctions.getClusterOutageSimulation(GetClusterOutageSimulationArgs.builder()
     *             .projectId("64707f06c519c20c3a2b1b03")
     *             .clusterName("Cluster0")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClusterOutageSimulationResult> getClusterOutageSimulation(GetClusterOutageSimulationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getClusterOutageSimulation:getClusterOutageSimulation", TypeShape.of(GetClusterOutageSimulationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClusterOutageSimulationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var outageSimulation = MongodbatlasFunctions.getClusterOutageSimulation(GetClusterOutageSimulationArgs.builder()
     *             .projectId("64707f06c519c20c3a2b1b03")
     *             .clusterName("Cluster0")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClusterOutageSimulationResult> getClusterOutageSimulationPlain(GetClusterOutageSimulationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getClusterOutageSimulation:getClusterOutageSimulation", TypeShape.of(GetClusterOutageSimulationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Cluster` describes all Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Multi Region Cluster: The `mongodbatlas.Cluster` data source doesn&#39;t return the `container_id` for each region utilized by the cluster. For retrieving the `container_id`, we recommend the `mongodbatlas.AdvancedCluster` data source instead.
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .numShards(1)
     *                 .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                     .regionName("US_EAST_1")
     *                     .electableNodes(3)
     *                     .priority(7)
     *                     .readOnlyNodes(0)
     *                     .build())
     *                 .build())
     *             .cloudBackup(true)
     *             .autoScalingDiskGbEnabled(true)
     *             .providerName("AWS")
     *             .providerInstanceSizeName("M40")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(testCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersInvokeResult> getClusters(GetClustersArgs args) {
        return getClusters(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Cluster` describes all Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Multi Region Cluster: The `mongodbatlas.Cluster` data source doesn&#39;t return the `container_id` for each region utilized by the cluster. For retrieving the `container_id`, we recommend the `mongodbatlas.AdvancedCluster` data source instead.
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .numShards(1)
     *                 .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                     .regionName("US_EAST_1")
     *                     .electableNodes(3)
     *                     .priority(7)
     *                     .readOnlyNodes(0)
     *                     .build())
     *                 .build())
     *             .cloudBackup(true)
     *             .autoScalingDiskGbEnabled(true)
     *             .providerName("AWS")
     *             .providerInstanceSizeName("M40")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(testCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClustersInvokeResult> getClustersPlain(GetClustersPlainArgs args) {
        return getClustersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Cluster` describes all Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Multi Region Cluster: The `mongodbatlas.Cluster` data source doesn&#39;t return the `container_id` for each region utilized by the cluster. For retrieving the `container_id`, we recommend the `mongodbatlas.AdvancedCluster` data source instead.
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .numShards(1)
     *                 .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                     .regionName("US_EAST_1")
     *                     .electableNodes(3)
     *                     .priority(7)
     *                     .readOnlyNodes(0)
     *                     .build())
     *                 .build())
     *             .cloudBackup(true)
     *             .autoScalingDiskGbEnabled(true)
     *             .providerName("AWS")
     *             .providerInstanceSizeName("M40")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(testCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetClustersInvokeResult> getClusters(GetClustersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getClusters:getClusters", TypeShape.of(GetClustersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Cluster` describes all Clusters by the provided project_id. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * &lt;br&gt; &amp;#8226; Multi Region Cluster: The `mongodbatlas.Cluster` data source doesn&#39;t return the `container_id` for each region utilized by the cluster. For retrieving the `container_id`, we recommend the `mongodbatlas.AdvancedCluster` data source instead.
     * &lt;br&gt; &amp;#8226; Changes to cluster configurations can affect costs. Before making changes, please see [Billing](https://docs.atlas.mongodb.com/billing/).
     * &lt;br&gt; &amp;#8226; If your Atlas project contains a custom role that uses actions introduced in a specific MongoDB version, you cannot create a cluster with a MongoDB version less than that version unless you delete the custom role.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetClustersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("cluster-test")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(ClusterReplicationSpecArgs.builder()
     *                 .numShards(1)
     *                 .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                     .regionName("US_EAST_1")
     *                     .electableNodes(3)
     *                     .priority(7)
     *                     .readOnlyNodes(0)
     *                     .build())
     *                 .build())
     *             .cloudBackup(true)
     *             .autoScalingDiskGbEnabled(true)
     *             .providerName("AWS")
     *             .providerInstanceSizeName("M40")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getClusters(GetClustersArgs.builder()
     *             .projectId(testCluster.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetClustersInvokeResult> getClustersPlain(GetClustersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getClusters:getClusters", TypeShape.of(GetClustersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a data source that returns all control plane IP addresses.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getControlPlaneIpAddresses();
     * 
     *         ctx.export("outbound-aws-ip-addresses", test.applyValue(getControlPlaneIpAddressesResult -> getControlPlaneIpAddressesResult.outbound().aws()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetControlPlaneIpAddressesResult> getControlPlaneIpAddresses() {
        return getControlPlaneIpAddresses(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a data source that returns all control plane IP addresses.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getControlPlaneIpAddresses();
     * 
     *         ctx.export("outbound-aws-ip-addresses", test.applyValue(getControlPlaneIpAddressesResult -> getControlPlaneIpAddressesResult.outbound().aws()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetControlPlaneIpAddressesResult> getControlPlaneIpAddressesPlain() {
        return getControlPlaneIpAddressesPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * Provides a data source that returns all control plane IP addresses.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getControlPlaneIpAddresses();
     * 
     *         ctx.export("outbound-aws-ip-addresses", test.applyValue(getControlPlaneIpAddressesResult -> getControlPlaneIpAddressesResult.outbound().aws()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetControlPlaneIpAddressesResult> getControlPlaneIpAddresses(InvokeArgs args) {
        return getControlPlaneIpAddresses(args, InvokeOptions.Empty);
    }
    /**
     * Provides a data source that returns all control plane IP addresses.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getControlPlaneIpAddresses();
     * 
     *         ctx.export("outbound-aws-ip-addresses", test.applyValue(getControlPlaneIpAddressesResult -> getControlPlaneIpAddressesResult.outbound().aws()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetControlPlaneIpAddressesResult> getControlPlaneIpAddressesPlain(InvokeArgs args) {
        return getControlPlaneIpAddressesPlain(args, InvokeOptions.Empty);
    }
    /**
     * Provides a data source that returns all control plane IP addresses.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getControlPlaneIpAddresses();
     * 
     *         ctx.export("outbound-aws-ip-addresses", test.applyValue(getControlPlaneIpAddressesResult -> getControlPlaneIpAddressesResult.outbound().aws()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetControlPlaneIpAddressesResult> getControlPlaneIpAddresses(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getControlPlaneIpAddresses:getControlPlaneIpAddresses", TypeShape.of(GetControlPlaneIpAddressesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * Provides a data source that returns all control plane IP addresses.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getControlPlaneIpAddresses();
     * 
     *         ctx.export("outbound-aws-ip-addresses", test.applyValue(getControlPlaneIpAddressesResult -> getControlPlaneIpAddressesResult.outbound().aws()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetControlPlaneIpAddressesResult> getControlPlaneIpAddressesPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getControlPlaneIpAddresses:getControlPlaneIpAddresses", TypeShape.of(GetControlPlaneIpAddressesResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CustomDbRole` describe a Custom DB Role. This represents a custom db role.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CustomDbRole;
     * import com.pulumi.mongodbatlas.CustomDbRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.CustomDbRoleActionArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDbRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CustomDbRole("testRole", CustomDbRoleArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .roleName("myCustomRole")
     *             .actions(            
     *                 CustomDbRoleActionArgs.builder()
     *                     .action("UPDATE")
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName("")
     *                         .databaseName("anyDatabase")
     *                         .build())
     *                     .build(),
     *                 CustomDbRoleActionArgs.builder()
     *                     .action("INSERT")
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName("")
     *                         .databaseName("anyDatabase")
     *                         .build())
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCustomDbRole(GetCustomDbRoleArgs.builder()
     *             .projectId(testRole.projectId())
     *             .roleName(testRole.roleName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCustomDbRoleResult> getCustomDbRole(GetCustomDbRoleArgs args) {
        return getCustomDbRole(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CustomDbRole` describe a Custom DB Role. This represents a custom db role.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CustomDbRole;
     * import com.pulumi.mongodbatlas.CustomDbRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.CustomDbRoleActionArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDbRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CustomDbRole("testRole", CustomDbRoleArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .roleName("myCustomRole")
     *             .actions(            
     *                 CustomDbRoleActionArgs.builder()
     *                     .action("UPDATE")
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName("")
     *                         .databaseName("anyDatabase")
     *                         .build())
     *                     .build(),
     *                 CustomDbRoleActionArgs.builder()
     *                     .action("INSERT")
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName("")
     *                         .databaseName("anyDatabase")
     *                         .build())
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCustomDbRole(GetCustomDbRoleArgs.builder()
     *             .projectId(testRole.projectId())
     *             .roleName(testRole.roleName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCustomDbRoleResult> getCustomDbRolePlain(GetCustomDbRolePlainArgs args) {
        return getCustomDbRolePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CustomDbRole` describe a Custom DB Role. This represents a custom db role.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CustomDbRole;
     * import com.pulumi.mongodbatlas.CustomDbRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.CustomDbRoleActionArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDbRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CustomDbRole("testRole", CustomDbRoleArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .roleName("myCustomRole")
     *             .actions(            
     *                 CustomDbRoleActionArgs.builder()
     *                     .action("UPDATE")
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName("")
     *                         .databaseName("anyDatabase")
     *                         .build())
     *                     .build(),
     *                 CustomDbRoleActionArgs.builder()
     *                     .action("INSERT")
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName("")
     *                         .databaseName("anyDatabase")
     *                         .build())
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCustomDbRole(GetCustomDbRoleArgs.builder()
     *             .projectId(testRole.projectId())
     *             .roleName(testRole.roleName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCustomDbRoleResult> getCustomDbRole(GetCustomDbRoleArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCustomDbRole:getCustomDbRole", TypeShape.of(GetCustomDbRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CustomDbRole` describe a Custom DB Role. This represents a custom db role.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CustomDbRole;
     * import com.pulumi.mongodbatlas.CustomDbRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.CustomDbRoleActionArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDbRoleArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testRole = new CustomDbRole("testRole", CustomDbRoleArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .roleName("myCustomRole")
     *             .actions(            
     *                 CustomDbRoleActionArgs.builder()
     *                     .action("UPDATE")
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName("")
     *                         .databaseName("anyDatabase")
     *                         .build())
     *                     .build(),
     *                 CustomDbRoleActionArgs.builder()
     *                     .action("INSERT")
     *                     .resources(CustomDbRoleActionResourceArgs.builder()
     *                         .collectionName("")
     *                         .databaseName("anyDatabase")
     *                         .build())
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCustomDbRole(GetCustomDbRoleArgs.builder()
     *             .projectId(testRole.projectId())
     *             .roleName(testRole.roleName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCustomDbRoleResult> getCustomDbRolePlain(GetCustomDbRolePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCustomDbRole:getCustomDbRole", TypeShape.of(GetCustomDbRoleResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCustomDbRoles` describe all Custom DB Roles. This represents a custom db roles.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCustomDbRolesInvokeResult> getCustomDbRoles(GetCustomDbRolesArgs args) {
        return getCustomDbRoles(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCustomDbRoles` describe all Custom DB Roles. This represents a custom db roles.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCustomDbRolesInvokeResult> getCustomDbRolesPlain(GetCustomDbRolesPlainArgs args) {
        return getCustomDbRolesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getCustomDbRoles` describe all Custom DB Roles. This represents a custom db roles.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCustomDbRolesInvokeResult> getCustomDbRoles(GetCustomDbRolesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCustomDbRoles:getCustomDbRoles", TypeShape.of(GetCustomDbRolesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getCustomDbRoles` describe all Custom DB Roles. This represents a custom db roles.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCustomDbRolesInvokeResult> getCustomDbRolesPlain(GetCustomDbRolesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCustomDbRoles:getCustomDbRoles", TypeShape.of(GetCustomDbRolesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CustomDnsConfigurationClusterAws` describes a Custom DNS Configuration for Atlas Clusters on AWS.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CustomDnsConfigurationClusterAws;
     * import com.pulumi.mongodbatlas.CustomDnsConfigurationClusterAwsArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDnsConfigurationClusterAwsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCustomDnsConfigurationClusterAws = new CustomDnsConfigurationClusterAws("testCustomDnsConfigurationClusterAws", CustomDnsConfigurationClusterAwsArgs.builder()
     *             .projectId("<project-id>")
     *             .enabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCustomDnsConfigurationClusterAws(GetCustomDnsConfigurationClusterAwsArgs.builder()
     *             .projectId(testCustomDnsConfigurationClusterAws.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCustomDnsConfigurationClusterAwsResult> getCustomDnsConfigurationClusterAws(GetCustomDnsConfigurationClusterAwsArgs args) {
        return getCustomDnsConfigurationClusterAws(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CustomDnsConfigurationClusterAws` describes a Custom DNS Configuration for Atlas Clusters on AWS.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CustomDnsConfigurationClusterAws;
     * import com.pulumi.mongodbatlas.CustomDnsConfigurationClusterAwsArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDnsConfigurationClusterAwsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCustomDnsConfigurationClusterAws = new CustomDnsConfigurationClusterAws("testCustomDnsConfigurationClusterAws", CustomDnsConfigurationClusterAwsArgs.builder()
     *             .projectId("<project-id>")
     *             .enabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCustomDnsConfigurationClusterAws(GetCustomDnsConfigurationClusterAwsArgs.builder()
     *             .projectId(testCustomDnsConfigurationClusterAws.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCustomDnsConfigurationClusterAwsResult> getCustomDnsConfigurationClusterAwsPlain(GetCustomDnsConfigurationClusterAwsPlainArgs args) {
        return getCustomDnsConfigurationClusterAwsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.CustomDnsConfigurationClusterAws` describes a Custom DNS Configuration for Atlas Clusters on AWS.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CustomDnsConfigurationClusterAws;
     * import com.pulumi.mongodbatlas.CustomDnsConfigurationClusterAwsArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDnsConfigurationClusterAwsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCustomDnsConfigurationClusterAws = new CustomDnsConfigurationClusterAws("testCustomDnsConfigurationClusterAws", CustomDnsConfigurationClusterAwsArgs.builder()
     *             .projectId("<project-id>")
     *             .enabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCustomDnsConfigurationClusterAws(GetCustomDnsConfigurationClusterAwsArgs.builder()
     *             .projectId(testCustomDnsConfigurationClusterAws.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetCustomDnsConfigurationClusterAwsResult> getCustomDnsConfigurationClusterAws(GetCustomDnsConfigurationClusterAwsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getCustomDnsConfigurationClusterAws:getCustomDnsConfigurationClusterAws", TypeShape.of(GetCustomDnsConfigurationClusterAwsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.CustomDnsConfigurationClusterAws` describes a Custom DNS Configuration for Atlas Clusters on AWS.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.CustomDnsConfigurationClusterAws;
     * import com.pulumi.mongodbatlas.CustomDnsConfigurationClusterAwsArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetCustomDnsConfigurationClusterAwsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testCustomDnsConfigurationClusterAws = new CustomDnsConfigurationClusterAws("testCustomDnsConfigurationClusterAws", CustomDnsConfigurationClusterAwsArgs.builder()
     *             .projectId("<project-id>")
     *             .enabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getCustomDnsConfigurationClusterAws(GetCustomDnsConfigurationClusterAwsArgs.builder()
     *             .projectId(testCustomDnsConfigurationClusterAws.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetCustomDnsConfigurationClusterAwsResult> getCustomDnsConfigurationClusterAwsPlain(GetCustomDnsConfigurationClusterAwsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getCustomDnsConfigurationClusterAws:getCustomDnsConfigurationClusterAws", TypeShape.of(GetCustomDnsConfigurationClusterAwsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.DataLakePipeline` describes a Data Lake Pipeline.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDataLakePipelineResult> getDataLakePipeline(GetDataLakePipelineArgs args) {
        return getDataLakePipeline(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.DataLakePipeline` describes a Data Lake Pipeline.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDataLakePipelineResult> getDataLakePipelinePlain(GetDataLakePipelinePlainArgs args) {
        return getDataLakePipelinePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.DataLakePipeline` describes a Data Lake Pipeline.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDataLakePipelineResult> getDataLakePipeline(GetDataLakePipelineArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getDataLakePipeline:getDataLakePipeline", TypeShape.of(GetDataLakePipelineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.DataLakePipeline` describes a Data Lake Pipeline.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDataLakePipelineResult> getDataLakePipelinePlain(GetDataLakePipelinePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getDataLakePipeline:getDataLakePipeline", TypeShape.of(GetDataLakePipelineResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe a Data Lake Pipeline Run.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline("pipeline", DataLakePipelineArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .name("DataLakePipelineName")
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type("DLS")
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name("access")
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type("ON_DEMAND_CPS")
     *                 .clusterName(clusterTest.name())
     *                 .databaseName("sample_airbnb")
     *                 .collectionName("listingsAndReviews")
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test")
     *                     .type("EXCLUDE")
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test22")
     *                     .type("EXCLUDE")
     *                     .build())
     *             .build());
     * 
     *         final var pipelineRun = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .name(pipeline.name())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRun(GetDataLakePipelineRunArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .pipelineName(pipeline.name())
     *             .pipelineRunId(pipelineRunMongodbatlasDataLakePipelineRuns.results()[0].pipelineRunId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDataLakePipelineRunResult> getDataLakePipelineRun(GetDataLakePipelineRunArgs args) {
        return getDataLakePipelineRun(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe a Data Lake Pipeline Run.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline("pipeline", DataLakePipelineArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .name("DataLakePipelineName")
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type("DLS")
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name("access")
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type("ON_DEMAND_CPS")
     *                 .clusterName(clusterTest.name())
     *                 .databaseName("sample_airbnb")
     *                 .collectionName("listingsAndReviews")
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test")
     *                     .type("EXCLUDE")
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test22")
     *                     .type("EXCLUDE")
     *                     .build())
     *             .build());
     * 
     *         final var pipelineRun = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .name(pipeline.name())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRun(GetDataLakePipelineRunArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .pipelineName(pipeline.name())
     *             .pipelineRunId(pipelineRunMongodbatlasDataLakePipelineRuns.results()[0].pipelineRunId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDataLakePipelineRunResult> getDataLakePipelineRunPlain(GetDataLakePipelineRunPlainArgs args) {
        return getDataLakePipelineRunPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe a Data Lake Pipeline Run.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline("pipeline", DataLakePipelineArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .name("DataLakePipelineName")
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type("DLS")
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name("access")
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type("ON_DEMAND_CPS")
     *                 .clusterName(clusterTest.name())
     *                 .databaseName("sample_airbnb")
     *                 .collectionName("listingsAndReviews")
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test")
     *                     .type("EXCLUDE")
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test22")
     *                     .type("EXCLUDE")
     *                     .build())
     *             .build());
     * 
     *         final var pipelineRun = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .name(pipeline.name())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRun(GetDataLakePipelineRunArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .pipelineName(pipeline.name())
     *             .pipelineRunId(pipelineRunMongodbatlasDataLakePipelineRuns.results()[0].pipelineRunId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDataLakePipelineRunResult> getDataLakePipelineRun(GetDataLakePipelineRunArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getDataLakePipelineRun:getDataLakePipelineRun", TypeShape.of(GetDataLakePipelineRunResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe a Data Lake Pipeline Run.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline("pipeline", DataLakePipelineArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .name("DataLakePipelineName")
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type("DLS")
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name("access")
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type("ON_DEMAND_CPS")
     *                 .clusterName(clusterTest.name())
     *                 .databaseName("sample_airbnb")
     *                 .collectionName("listingsAndReviews")
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test")
     *                     .type("EXCLUDE")
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test22")
     *                     .type("EXCLUDE")
     *                     .build())
     *             .build());
     * 
     *         final var pipelineRun = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .name(pipeline.name())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRun(GetDataLakePipelineRunArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .pipelineName(pipeline.name())
     *             .pipelineRunId(pipelineRunMongodbatlasDataLakePipelineRuns.results()[0].pipelineRunId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDataLakePipelineRunResult> getDataLakePipelineRunPlain(GetDataLakePipelineRunPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getDataLakePipelineRun:getDataLakePipelineRun", TypeShape.of(GetDataLakePipelineRunResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe Data Lake Pipeline Runs.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline("pipeline", DataLakePipelineArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .name("DataLakePipelineName")
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type("DLS")
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name("access")
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type("ON_DEMAND_CPS")
     *                 .clusterName(clusterTest.name())
     *                 .databaseName("sample_airbnb")
     *                 .collectionName("listingsAndReviews")
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test")
     *                     .type("EXCLUDE")
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test22")
     *                     .type("EXCLUDE")
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .pipelineName(pipeline.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDataLakePipelineRunsInvokeResult> getDataLakePipelineRuns(GetDataLakePipelineRunsArgs args) {
        return getDataLakePipelineRuns(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe Data Lake Pipeline Runs.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline("pipeline", DataLakePipelineArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .name("DataLakePipelineName")
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type("DLS")
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name("access")
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type("ON_DEMAND_CPS")
     *                 .clusterName(clusterTest.name())
     *                 .databaseName("sample_airbnb")
     *                 .collectionName("listingsAndReviews")
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test")
     *                     .type("EXCLUDE")
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test22")
     *                     .type("EXCLUDE")
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .pipelineName(pipeline.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDataLakePipelineRunsInvokeResult> getDataLakePipelineRunsPlain(GetDataLakePipelineRunsPlainArgs args) {
        return getDataLakePipelineRunsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe Data Lake Pipeline Runs.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline("pipeline", DataLakePipelineArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .name("DataLakePipelineName")
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type("DLS")
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name("access")
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type("ON_DEMAND_CPS")
     *                 .clusterName(clusterTest.name())
     *                 .databaseName("sample_airbnb")
     *                 .collectionName("listingsAndReviews")
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test")
     *                     .type("EXCLUDE")
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test22")
     *                     .type("EXCLUDE")
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .pipelineName(pipeline.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetDataLakePipelineRunsInvokeResult> getDataLakePipelineRuns(GetDataLakePipelineRunsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getDataLakePipelineRuns:getDataLakePipelineRuns", TypeShape.of(GetDataLakePipelineRunsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDataLakePipelineRun` describe Data Lake Pipeline Runs.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DataLakePipeline;
     * import com.pulumi.mongodbatlas.DataLakePipelineArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
     * import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDataLakePipelineRunsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var pipeline = new DataLakePipeline("pipeline", DataLakePipelineArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .name("DataLakePipelineName")
     *             .sink(DataLakePipelineSinkArgs.builder()
     *                 .type("DLS")
     *                 .partitionFields(DataLakePipelineSinkPartitionFieldArgs.builder()
     *                     .name("access")
     *                     .order(0)
     *                     .build())
     *                 .build())
     *             .source(DataLakePipelineSourceArgs.builder()
     *                 .type("ON_DEMAND_CPS")
     *                 .clusterName(clusterTest.name())
     *                 .databaseName("sample_airbnb")
     *                 .collectionName("listingsAndReviews")
     *                 .build())
     *             .transformations(            
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test")
     *                     .type("EXCLUDE")
     *                     .build(),
     *                 DataLakePipelineTransformationArgs.builder()
     *                     .field("test22")
     *                     .type("EXCLUDE")
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDataLakePipelineRuns(GetDataLakePipelineRunsArgs.builder()
     *             .projectId(projectTest.projectId())
     *             .pipelineName(pipeline.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetDataLakePipelineRunsInvokeResult> getDataLakePipelineRunsPlain(GetDataLakePipelineRunsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getDataLakePipelineRuns:getDataLakePipelineRuns", TypeShape.of(GetDataLakePipelineRunsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDataLakePipelines` describes Data Lake Pipelines.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDataLakePipelinesInvokeResult> getDataLakePipelines(GetDataLakePipelinesArgs args) {
        return getDataLakePipelines(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDataLakePipelines` describes Data Lake Pipelines.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDataLakePipelinesInvokeResult> getDataLakePipelinesPlain(GetDataLakePipelinesPlainArgs args) {
        return getDataLakePipelinesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDataLakePipelines` describes Data Lake Pipelines.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static Output<GetDataLakePipelinesInvokeResult> getDataLakePipelines(GetDataLakePipelinesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getDataLakePipelines:getDataLakePipelines", TypeShape.of(GetDataLakePipelinesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDataLakePipelines` describes Data Lake Pipelines.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     */
    public static CompletableFuture<GetDataLakePipelinesInvokeResult> getDataLakePipelinesPlain(GetDataLakePipelinesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getDataLakePipelines:getDataLakePipelines", TypeShape.of(GetDataLakePipelinesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.DatabaseUser` describe a Database User. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("test-acc-username")
     *             .password("test-acc-password")
     *             .projectId("<PROJECT-ID>")
     *             .authDatabaseName("admin")
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("readWrite")
     *                     .databaseName("admin")
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("atlasAdmin")
     *                     .databaseName("admin")
     *                     .build())
     *             .labels(            
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 1")
     *                     .value("value 1")
     *                     .build(),
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 2")
     *                     .value("value 2")
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUser(GetDatabaseUserArgs.builder()
     *             .projectId(testDatabaseUser.projectId())
     *             .username(testDatabaseUser.username())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * **Example of usage with a OIDC federated authentication user**
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("64d613677e1ad50839cce4db/testUserOrGroup")
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .authDatabaseName("admin")
     *             .oidcAuthType("IDP_GROUP")
     *             .roles(DatabaseUserRoleArgs.builder()
     *                 .roleName("readWriteAnyDatabase")
     *                 .databaseName("admin")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUser(GetDatabaseUserArgs.builder()
     *             .username(testDatabaseUser.username())
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .authDatabaseName("admin")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public static Output<GetDatabaseUserResult> getDatabaseUser(GetDatabaseUserArgs args) {
        return getDatabaseUser(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.DatabaseUser` describe a Database User. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("test-acc-username")
     *             .password("test-acc-password")
     *             .projectId("<PROJECT-ID>")
     *             .authDatabaseName("admin")
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("readWrite")
     *                     .databaseName("admin")
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("atlasAdmin")
     *                     .databaseName("admin")
     *                     .build())
     *             .labels(            
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 1")
     *                     .value("value 1")
     *                     .build(),
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 2")
     *                     .value("value 2")
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUser(GetDatabaseUserArgs.builder()
     *             .projectId(testDatabaseUser.projectId())
     *             .username(testDatabaseUser.username())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * **Example of usage with a OIDC federated authentication user**
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("64d613677e1ad50839cce4db/testUserOrGroup")
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .authDatabaseName("admin")
     *             .oidcAuthType("IDP_GROUP")
     *             .roles(DatabaseUserRoleArgs.builder()
     *                 .roleName("readWriteAnyDatabase")
     *                 .databaseName("admin")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUser(GetDatabaseUserArgs.builder()
     *             .username(testDatabaseUser.username())
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .authDatabaseName("admin")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public static CompletableFuture<GetDatabaseUserResult> getDatabaseUserPlain(GetDatabaseUserPlainArgs args) {
        return getDatabaseUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.DatabaseUser` describe a Database User. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("test-acc-username")
     *             .password("test-acc-password")
     *             .projectId("<PROJECT-ID>")
     *             .authDatabaseName("admin")
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("readWrite")
     *                     .databaseName("admin")
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("atlasAdmin")
     *                     .databaseName("admin")
     *                     .build())
     *             .labels(            
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 1")
     *                     .value("value 1")
     *                     .build(),
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 2")
     *                     .value("value 2")
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUser(GetDatabaseUserArgs.builder()
     *             .projectId(testDatabaseUser.projectId())
     *             .username(testDatabaseUser.username())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * **Example of usage with a OIDC federated authentication user**
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("64d613677e1ad50839cce4db/testUserOrGroup")
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .authDatabaseName("admin")
     *             .oidcAuthType("IDP_GROUP")
     *             .roles(DatabaseUserRoleArgs.builder()
     *                 .roleName("readWriteAnyDatabase")
     *                 .databaseName("admin")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUser(GetDatabaseUserArgs.builder()
     *             .username(testDatabaseUser.username())
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .authDatabaseName("admin")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public static Output<GetDatabaseUserResult> getDatabaseUser(GetDatabaseUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getDatabaseUser:getDatabaseUser", TypeShape.of(GetDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.DatabaseUser` describe a Database User. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("test-acc-username")
     *             .password("test-acc-password")
     *             .projectId("<PROJECT-ID>")
     *             .authDatabaseName("admin")
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("readWrite")
     *                     .databaseName("admin")
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("atlasAdmin")
     *                     .databaseName("admin")
     *                     .build())
     *             .labels(            
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 1")
     *                     .value("value 1")
     *                     .build(),
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 2")
     *                     .value("value 2")
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUser(GetDatabaseUserArgs.builder()
     *             .projectId(testDatabaseUser.projectId())
     *             .username(testDatabaseUser.username())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * **Example of usage with a OIDC federated authentication user**
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("64d613677e1ad50839cce4db/testUserOrGroup")
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .authDatabaseName("admin")
     *             .oidcAuthType("IDP_GROUP")
     *             .roles(DatabaseUserRoleArgs.builder()
     *                 .roleName("readWriteAnyDatabase")
     *                 .databaseName("admin")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUser(GetDatabaseUserArgs.builder()
     *             .username(testDatabaseUser.username())
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .authDatabaseName("admin")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public static CompletableFuture<GetDatabaseUserResult> getDatabaseUserPlain(GetDatabaseUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getDatabaseUser:getDatabaseUser", TypeShape.of(GetDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDatabaseUsers` describe all Database Users. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("test-acc-username")
     *             .password("test-acc-password")
     *             .projectId("<PROJECT-ID>")
     *             .authDatabaseName("admin")
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("readWrite")
     *                     .databaseName("admin")
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("atlasAdmin")
     *                     .databaseName("admin")
     *                     .build())
     *             .labels(            
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 1")
     *                     .value("value 1")
     *                     .build(),
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 2")
     *                     .value("value 2")
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId(testDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * **Example of usage with a OIDC federated authentication user**
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("64d613677e1ad50839cce4db/testUserOrGroup")
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .authDatabaseName("admin")
     *             .oidcAuthType("IDP_GROUP")
     *             .roles(DatabaseUserRoleArgs.builder()
     *                 .roleName("readWriteAnyDatabase")
     *                 .databaseName("admin")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public static Output<GetDatabaseUsersInvokeResult> getDatabaseUsers(GetDatabaseUsersArgs args) {
        return getDatabaseUsers(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDatabaseUsers` describe all Database Users. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("test-acc-username")
     *             .password("test-acc-password")
     *             .projectId("<PROJECT-ID>")
     *             .authDatabaseName("admin")
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("readWrite")
     *                     .databaseName("admin")
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("atlasAdmin")
     *                     .databaseName("admin")
     *                     .build())
     *             .labels(            
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 1")
     *                     .value("value 1")
     *                     .build(),
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 2")
     *                     .value("value 2")
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId(testDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * **Example of usage with a OIDC federated authentication user**
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("64d613677e1ad50839cce4db/testUserOrGroup")
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .authDatabaseName("admin")
     *             .oidcAuthType("IDP_GROUP")
     *             .roles(DatabaseUserRoleArgs.builder()
     *                 .roleName("readWriteAnyDatabase")
     *                 .databaseName("admin")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public static CompletableFuture<GetDatabaseUsersInvokeResult> getDatabaseUsersPlain(GetDatabaseUsersPlainArgs args) {
        return getDatabaseUsersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getDatabaseUsers` describe all Database Users. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("test-acc-username")
     *             .password("test-acc-password")
     *             .projectId("<PROJECT-ID>")
     *             .authDatabaseName("admin")
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("readWrite")
     *                     .databaseName("admin")
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("atlasAdmin")
     *                     .databaseName("admin")
     *                     .build())
     *             .labels(            
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 1")
     *                     .value("value 1")
     *                     .build(),
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 2")
     *                     .value("value 2")
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId(testDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * **Example of usage with a OIDC federated authentication user**
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("64d613677e1ad50839cce4db/testUserOrGroup")
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .authDatabaseName("admin")
     *             .oidcAuthType("IDP_GROUP")
     *             .roles(DatabaseUserRoleArgs.builder()
     *                 .roleName("readWriteAnyDatabase")
     *                 .databaseName("admin")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public static Output<GetDatabaseUsersInvokeResult> getDatabaseUsers(GetDatabaseUsersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getDatabaseUsers:getDatabaseUsers", TypeShape.of(GetDatabaseUsersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getDatabaseUsers` describe all Database Users. This represents a database user which will be applied to all clusters within the project.
     * 
     * Each user has a set of roles that provide access to the project’s databases. User&#39;s roles apply to all the clusters in the project: if two clusters have a `products` database and a user has a role granting `read` access on the products database, the user has that access on both clusters.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserLabelArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("test-acc-username")
     *             .password("test-acc-password")
     *             .projectId("<PROJECT-ID>")
     *             .authDatabaseName("admin")
     *             .roles(            
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("readWrite")
     *                     .databaseName("admin")
     *                     .build(),
     *                 DatabaseUserRoleArgs.builder()
     *                     .roleName("atlasAdmin")
     *                     .databaseName("admin")
     *                     .build())
     *             .labels(            
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 1")
     *                     .value("value 1")
     *                     .build(),
     *                 DatabaseUserLabelArgs.builder()
     *                     .key("key 2")
     *                     .value("value 2")
     *                     .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId(testDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * **Example of usage with a OIDC federated authentication user**
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.DatabaseUser;
     * import com.pulumi.mongodbatlas.DatabaseUserArgs;
     * import com.pulumi.mongodbatlas.inputs.DatabaseUserRoleArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetDatabaseUsersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatabaseUser = new DatabaseUser("testDatabaseUser", DatabaseUserArgs.builder()
     *             .username("64d613677e1ad50839cce4db/testUserOrGroup")
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .authDatabaseName("admin")
     *             .oidcAuthType("IDP_GROUP")
     *             .roles(DatabaseUserRoleArgs.builder()
     *                 .roleName("readWriteAnyDatabase")
     *                 .databaseName("admin")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getDatabaseUsers(GetDatabaseUsersArgs.builder()
     *             .projectId("6414908c207f4d22f4d8f232")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * Note: OIDC support is only avalible starting in [MongoDB 7.0](https://www.mongodb.com/evolved#mdbsevenzero) or later. To learn more, see the [MongoDB Atlas documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     */
    public static CompletableFuture<GetDatabaseUsersInvokeResult> getDatabaseUsersPlain(GetDatabaseUsersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getDatabaseUsers:getDatabaseUsers", TypeShape.of(GetDatabaseUsersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.EventTrigger` describe an Event Trigger.
     * 
     */
    public static Output<GetEventTriggerResult> getEventTrigger(GetEventTriggerArgs args) {
        return getEventTrigger(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.EventTrigger` describe an Event Trigger.
     * 
     */
    public static CompletableFuture<GetEventTriggerResult> getEventTriggerPlain(GetEventTriggerPlainArgs args) {
        return getEventTriggerPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.EventTrigger` describe an Event Trigger.
     * 
     */
    public static Output<GetEventTriggerResult> getEventTrigger(GetEventTriggerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getEventTrigger:getEventTrigger", TypeShape.of(GetEventTriggerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.EventTrigger` describe an Event Trigger.
     * 
     */
    public static CompletableFuture<GetEventTriggerResult> getEventTriggerPlain(GetEventTriggerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getEventTrigger:getEventTrigger", TypeShape.of(GetEventTriggerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getEventTriggers` describe all Event Triggers.
     * 
     */
    public static Output<GetEventTriggersInvokeResult> getEventTriggers(GetEventTriggersArgs args) {
        return getEventTriggers(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getEventTriggers` describe all Event Triggers.
     * 
     */
    public static CompletableFuture<GetEventTriggersInvokeResult> getEventTriggersPlain(GetEventTriggersPlainArgs args) {
        return getEventTriggersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getEventTriggers` describe all Event Triggers.
     * 
     */
    public static Output<GetEventTriggersInvokeResult> getEventTriggers(GetEventTriggersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getEventTriggers:getEventTriggers", TypeShape.of(GetEventTriggersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getEventTriggers` describe all Event Triggers.
     * 
     */
    public static CompletableFuture<GetEventTriggersInvokeResult> getEventTriggersPlain(GetEventTriggersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getEventTriggers:getEventTriggers", TypeShape.of(GetEventTriggersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedDatabaseInstance` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * 
     * ### S With MongoDB Atlas Cluster As Storage Database
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .projectId("PROJECT ID")
     *             .name("TENANT NAME OF THE FEDERATED DATABASE INSTANCE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### S With Amazon S3 Bucket As Storage Database
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .projectId("PROJECT ID")
     *             .name("TENANT NAME OF THE FEDERATED DATABASE INSTANCE")
     *             .cloudProviderConfig(GetFederatedDatabaseInstanceCloudProviderConfigArgs.builder()
     *                 .aws(GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs.builder()
     *                     .testS3Bucket("Amazon S3 Bucket Name")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedDatabaseInstanceResult> getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs args) {
        return getFederatedDatabaseInstance(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedDatabaseInstance` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * 
     * ### S With MongoDB Atlas Cluster As Storage Database
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .projectId("PROJECT ID")
     *             .name("TENANT NAME OF THE FEDERATED DATABASE INSTANCE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### S With Amazon S3 Bucket As Storage Database
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .projectId("PROJECT ID")
     *             .name("TENANT NAME OF THE FEDERATED DATABASE INSTANCE")
     *             .cloudProviderConfig(GetFederatedDatabaseInstanceCloudProviderConfigArgs.builder()
     *                 .aws(GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs.builder()
     *                     .testS3Bucket("Amazon S3 Bucket Name")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedDatabaseInstanceResult> getFederatedDatabaseInstancePlain(GetFederatedDatabaseInstancePlainArgs args) {
        return getFederatedDatabaseInstancePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedDatabaseInstance` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * 
     * ### S With MongoDB Atlas Cluster As Storage Database
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .projectId("PROJECT ID")
     *             .name("TENANT NAME OF THE FEDERATED DATABASE INSTANCE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### S With Amazon S3 Bucket As Storage Database
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .projectId("PROJECT ID")
     *             .name("TENANT NAME OF THE FEDERATED DATABASE INSTANCE")
     *             .cloudProviderConfig(GetFederatedDatabaseInstanceCloudProviderConfigArgs.builder()
     *                 .aws(GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs.builder()
     *                     .testS3Bucket("Amazon S3 Bucket Name")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedDatabaseInstanceResult> getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedDatabaseInstance:getFederatedDatabaseInstance", TypeShape.of(GetFederatedDatabaseInstanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedDatabaseInstance` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * 
     * ### S With MongoDB Atlas Cluster As Storage Database
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .projectId("PROJECT ID")
     *             .name("TENANT NAME OF THE FEDERATED DATABASE INSTANCE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### S With Amazon S3 Bucket As Storage Database
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigArgs;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstance(GetFederatedDatabaseInstanceArgs.builder()
     *             .projectId("PROJECT ID")
     *             .name("TENANT NAME OF THE FEDERATED DATABASE INSTANCE")
     *             .cloudProviderConfig(GetFederatedDatabaseInstanceCloudProviderConfigArgs.builder()
     *                 .aws(GetFederatedDatabaseInstanceCloudProviderConfigAwsArgs.builder()
     *                     .testS3Bucket("Amazon S3 Bucket Name")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedDatabaseInstanceResult> getFederatedDatabaseInstancePlain(GetFederatedDatabaseInstancePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedDatabaseInstance:getFederatedDatabaseInstance", TypeShape.of(GetFederatedDatabaseInstanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas_federated_database_instancess` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstances(GetFederatedDatabaseInstancesArgs.builder()
     *             .projectId("PROJECT ID")
     *             .name("TENANT NAME OF THE FEDERATED DATABASE INSTANCE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedDatabaseInstancesInvokeResult> getFederatedDatabaseInstances(GetFederatedDatabaseInstancesArgs args) {
        return getFederatedDatabaseInstances(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas_federated_database_instancess` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstances(GetFederatedDatabaseInstancesArgs.builder()
     *             .projectId("PROJECT ID")
     *             .name("TENANT NAME OF THE FEDERATED DATABASE INSTANCE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedDatabaseInstancesInvokeResult> getFederatedDatabaseInstancesPlain(GetFederatedDatabaseInstancesPlainArgs args) {
        return getFederatedDatabaseInstancesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas_federated_database_instancess` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstances(GetFederatedDatabaseInstancesArgs.builder()
     *             .projectId("PROJECT ID")
     *             .name("TENANT NAME OF THE FEDERATED DATABASE INSTANCE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedDatabaseInstancesInvokeResult> getFederatedDatabaseInstances(GetFederatedDatabaseInstancesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedDatabaseInstances:getFederatedDatabaseInstances", TypeShape.of(GetFederatedDatabaseInstancesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas_federated_database_instancess` provides a Federated Database Instance data source.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * &gt; **IMPORTANT:** All arguments including the password will be stored in the raw state as plain text. Read more about sensitive data in state.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedDatabaseInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedDatabaseInstances(GetFederatedDatabaseInstancesArgs.builder()
     *             .projectId("PROJECT ID")
     *             .name("TENANT NAME OF THE FEDERATED DATABASE INSTANCE")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedDatabaseInstancesInvokeResult> getFederatedDatabaseInstancesPlain(GetFederatedDatabaseInstancesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedDatabaseInstances:getFederatedDatabaseInstances", TypeShape.of(GetFederatedDatabaseInstancesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Data Source: mongodbatlas.FederatedQueryLimit
     * 
     * `mongodbatlas.FederatedQueryLimit` provides a Federated Database Instance Query Limit data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimit(GetFederatedQueryLimitArgs.builder()
     *             .projectId("PROJECT_ID")
     *             .tenantName("FEDERATED_DATABASE_INSTANCE_NAME")
     *             .limitName("LIMIT_NAME")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedQueryLimitResult> getFederatedQueryLimit(GetFederatedQueryLimitArgs args) {
        return getFederatedQueryLimit(args, InvokeOptions.Empty);
    }
    /**
     * ## Data Source: mongodbatlas.FederatedQueryLimit
     * 
     * `mongodbatlas.FederatedQueryLimit` provides a Federated Database Instance Query Limit data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimit(GetFederatedQueryLimitArgs.builder()
     *             .projectId("PROJECT_ID")
     *             .tenantName("FEDERATED_DATABASE_INSTANCE_NAME")
     *             .limitName("LIMIT_NAME")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedQueryLimitResult> getFederatedQueryLimitPlain(GetFederatedQueryLimitPlainArgs args) {
        return getFederatedQueryLimitPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Data Source: mongodbatlas.FederatedQueryLimit
     * 
     * `mongodbatlas.FederatedQueryLimit` provides a Federated Database Instance Query Limit data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimit(GetFederatedQueryLimitArgs.builder()
     *             .projectId("PROJECT_ID")
     *             .tenantName("FEDERATED_DATABASE_INSTANCE_NAME")
     *             .limitName("LIMIT_NAME")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedQueryLimitResult> getFederatedQueryLimit(GetFederatedQueryLimitArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedQueryLimit:getFederatedQueryLimit", TypeShape.of(GetFederatedQueryLimitResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Data Source: mongodbatlas.FederatedQueryLimit
     * 
     * `mongodbatlas.FederatedQueryLimit` provides a Federated Database Instance Query Limit data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimit(GetFederatedQueryLimitArgs.builder()
     *             .projectId("PROJECT_ID")
     *             .tenantName("FEDERATED_DATABASE_INSTANCE_NAME")
     *             .limitName("LIMIT_NAME")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedQueryLimitResult> getFederatedQueryLimitPlain(GetFederatedQueryLimitPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedQueryLimit:getFederatedQueryLimit", TypeShape.of(GetFederatedQueryLimitResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedQueryLimits` provides a Federated Database Instance Query Limits data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimits(GetFederatedQueryLimitsArgs.builder()
     *             .projectId("PROJECT_ID")
     *             .tenantName("FEDERATED_DATABASE_INSTANCE_NAME")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedQueryLimitsInvokeResult> getFederatedQueryLimits(GetFederatedQueryLimitsArgs args) {
        return getFederatedQueryLimits(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedQueryLimits` provides a Federated Database Instance Query Limits data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimits(GetFederatedQueryLimitsArgs.builder()
     *             .projectId("PROJECT_ID")
     *             .tenantName("FEDERATED_DATABASE_INSTANCE_NAME")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedQueryLimitsInvokeResult> getFederatedQueryLimitsPlain(GetFederatedQueryLimitsPlainArgs args) {
        return getFederatedQueryLimitsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedQueryLimits` provides a Federated Database Instance Query Limits data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimits(GetFederatedQueryLimitsArgs.builder()
     *             .projectId("PROJECT_ID")
     *             .tenantName("FEDERATED_DATABASE_INSTANCE_NAME")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedQueryLimitsInvokeResult> getFederatedQueryLimits(GetFederatedQueryLimitsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedQueryLimits:getFederatedQueryLimits", TypeShape.of(GetFederatedQueryLimitsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedQueryLimits` provides a Federated Database Instance Query Limits data source. To learn more about Atlas Data Federation see https://www.mongodb.com/docs/atlas/data-federation/overview/.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedQueryLimitsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getFederatedQueryLimits(GetFederatedQueryLimitsArgs.builder()
     *             .projectId("PROJECT_ID")
     *             .tenantName("FEDERATED_DATABASE_INSTANCE_NAME")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedQueryLimitsInvokeResult> getFederatedQueryLimitsPlain(GetFederatedQueryLimitsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedQueryLimits:getFederatedQueryLimits", TypeShape.of(GetFederatedQueryLimitsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettings` provides a federated settings data source. Atlas Cloud federated settings provides federated settings outputs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var settings = MongodbatlasFunctions.getFederatedSettings(GetFederatedSettingsArgs.builder()
     *             .orgId("627a9683e7f7f7ff7fe306f14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsResult> getFederatedSettings(GetFederatedSettingsArgs args) {
        return getFederatedSettings(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettings` provides a federated settings data source. Atlas Cloud federated settings provides federated settings outputs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var settings = MongodbatlasFunctions.getFederatedSettings(GetFederatedSettingsArgs.builder()
     *             .orgId("627a9683e7f7f7ff7fe306f14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsResult> getFederatedSettingsPlain(GetFederatedSettingsPlainArgs args) {
        return getFederatedSettingsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettings` provides a federated settings data source. Atlas Cloud federated settings provides federated settings outputs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var settings = MongodbatlasFunctions.getFederatedSettings(GetFederatedSettingsArgs.builder()
     *             .orgId("627a9683e7f7f7ff7fe306f14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsResult> getFederatedSettings(GetFederatedSettingsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettings:getFederatedSettings", TypeShape.of(GetFederatedSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettings` provides a federated settings data source. Atlas Cloud federated settings provides federated settings outputs.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var settings = MongodbatlasFunctions.getFederatedSettings(GetFederatedSettingsArgs.builder()
     *             .orgId("627a9683e7f7f7ff7fe306f14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsResult> getFederatedSettingsPlain(GetFederatedSettingsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettings:getFederatedSettings", TypeShape.of(GetFederatedSettingsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedSettingsIdentityProvider` provides a federated settings identity provider data source. Atlas federated settings identity provider provides federated settings outputs for the configured identity provider.
     * 
     * &gt; **NOTE:** OIDC Workforce IdP is currently in preview. To learn more about OIDC and existing limitations see the [OIDC Authentication Documentation](https://www.mongodb.com/docs/atlas/security-oidc/)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProviderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider("identityProvider", FederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f14")
     *             .name("mongodb_federation_test")
     *             .associatedDomains("yourdomain.com")
     *             .ssoDebugEnabled(true)
     *             .status("ACTIVE")
     *             .ssoUrl("https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml")
     *             .issuerUri("http://www.okta.com/exk17f7f7f7f7p50h8")
     *             .requestBinding("HTTP-POST")
     *             .responseSignatureAlgorithm("SHA-256")
     *             .build());
     * 
     *         final var identityProviderDs = MongodbatlasFunctions.getFederatedSettingsIdentityProvider(GetFederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .identityProviderId("0oad4fas87jL5Xnk12971234")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsIdentityProviderResult> getFederatedSettingsIdentityProvider(GetFederatedSettingsIdentityProviderArgs args) {
        return getFederatedSettingsIdentityProvider(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedSettingsIdentityProvider` provides a federated settings identity provider data source. Atlas federated settings identity provider provides federated settings outputs for the configured identity provider.
     * 
     * &gt; **NOTE:** OIDC Workforce IdP is currently in preview. To learn more about OIDC and existing limitations see the [OIDC Authentication Documentation](https://www.mongodb.com/docs/atlas/security-oidc/)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProviderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider("identityProvider", FederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f14")
     *             .name("mongodb_federation_test")
     *             .associatedDomains("yourdomain.com")
     *             .ssoDebugEnabled(true)
     *             .status("ACTIVE")
     *             .ssoUrl("https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml")
     *             .issuerUri("http://www.okta.com/exk17f7f7f7f7p50h8")
     *             .requestBinding("HTTP-POST")
     *             .responseSignatureAlgorithm("SHA-256")
     *             .build());
     * 
     *         final var identityProviderDs = MongodbatlasFunctions.getFederatedSettingsIdentityProvider(GetFederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .identityProviderId("0oad4fas87jL5Xnk12971234")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsIdentityProviderResult> getFederatedSettingsIdentityProviderPlain(GetFederatedSettingsIdentityProviderPlainArgs args) {
        return getFederatedSettingsIdentityProviderPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedSettingsIdentityProvider` provides a federated settings identity provider data source. Atlas federated settings identity provider provides federated settings outputs for the configured identity provider.
     * 
     * &gt; **NOTE:** OIDC Workforce IdP is currently in preview. To learn more about OIDC and existing limitations see the [OIDC Authentication Documentation](https://www.mongodb.com/docs/atlas/security-oidc/)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProviderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider("identityProvider", FederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f14")
     *             .name("mongodb_federation_test")
     *             .associatedDomains("yourdomain.com")
     *             .ssoDebugEnabled(true)
     *             .status("ACTIVE")
     *             .ssoUrl("https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml")
     *             .issuerUri("http://www.okta.com/exk17f7f7f7f7p50h8")
     *             .requestBinding("HTTP-POST")
     *             .responseSignatureAlgorithm("SHA-256")
     *             .build());
     * 
     *         final var identityProviderDs = MongodbatlasFunctions.getFederatedSettingsIdentityProvider(GetFederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .identityProviderId("0oad4fas87jL5Xnk12971234")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsIdentityProviderResult> getFederatedSettingsIdentityProvider(GetFederatedSettingsIdentityProviderArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettingsIdentityProvider:getFederatedSettingsIdentityProvider", TypeShape.of(GetFederatedSettingsIdentityProviderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedSettingsIdentityProvider` provides a federated settings identity provider data source. Atlas federated settings identity provider provides federated settings outputs for the configured identity provider.
     * 
     * &gt; **NOTE:** OIDC Workforce IdP is currently in preview. To learn more about OIDC and existing limitations see the [OIDC Authentication Documentation](https://www.mongodb.com/docs/atlas/security-oidc/)
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProviderArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider("identityProvider", FederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f14")
     *             .name("mongodb_federation_test")
     *             .associatedDomains("yourdomain.com")
     *             .ssoDebugEnabled(true)
     *             .status("ACTIVE")
     *             .ssoUrl("https://mysso.oktapreview.com/app/mysso_terraformtest_1/exk177f7f7f70h8/sso/saml")
     *             .issuerUri("http://www.okta.com/exk17f7f7f7f7p50h8")
     *             .requestBinding("HTTP-POST")
     *             .responseSignatureAlgorithm("SHA-256")
     *             .build());
     * 
     *         final var identityProviderDs = MongodbatlasFunctions.getFederatedSettingsIdentityProvider(GetFederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .identityProviderId("0oad4fas87jL5Xnk12971234")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsIdentityProviderResult> getFederatedSettingsIdentityProviderPlain(GetFederatedSettingsIdentityProviderPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettingsIdentityProvider:getFederatedSettingsIdentityProvider", TypeShape.of(GetFederatedSettingsIdentityProviderResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettingsIdentityProviders` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * &gt; **NOTE:** OIDC Workforce IdP is currently in preview. To learn more about OIDC and existing limitations see the [OIDC Authentication Documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProvidersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider("identityProvider", FederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f")
     *             .name("mongodb_federation_test")
     *             .associatedDomains("yourdomain.com")
     *             .ssoDebugEnabled(true)
     *             .status("ACTIVE")
     *             .build());
     * 
     *         final var identittyProvider = MongodbatlasFunctions.getFederatedSettingsIdentityProviders(GetFederatedSettingsIdentityProvidersArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsIdentityProvidersInvokeResult> getFederatedSettingsIdentityProviders(GetFederatedSettingsIdentityProvidersArgs args) {
        return getFederatedSettingsIdentityProviders(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettingsIdentityProviders` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * &gt; **NOTE:** OIDC Workforce IdP is currently in preview. To learn more about OIDC and existing limitations see the [OIDC Authentication Documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProvidersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider("identityProvider", FederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f")
     *             .name("mongodb_federation_test")
     *             .associatedDomains("yourdomain.com")
     *             .ssoDebugEnabled(true)
     *             .status("ACTIVE")
     *             .build());
     * 
     *         final var identittyProvider = MongodbatlasFunctions.getFederatedSettingsIdentityProviders(GetFederatedSettingsIdentityProvidersArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsIdentityProvidersInvokeResult> getFederatedSettingsIdentityProvidersPlain(GetFederatedSettingsIdentityProvidersPlainArgs args) {
        return getFederatedSettingsIdentityProvidersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettingsIdentityProviders` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * &gt; **NOTE:** OIDC Workforce IdP is currently in preview. To learn more about OIDC and existing limitations see the [OIDC Authentication Documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProvidersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider("identityProvider", FederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f")
     *             .name("mongodb_federation_test")
     *             .associatedDomains("yourdomain.com")
     *             .ssoDebugEnabled(true)
     *             .status("ACTIVE")
     *             .build());
     * 
     *         final var identittyProvider = MongodbatlasFunctions.getFederatedSettingsIdentityProviders(GetFederatedSettingsIdentityProvidersArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsIdentityProvidersInvokeResult> getFederatedSettingsIdentityProviders(GetFederatedSettingsIdentityProvidersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettingsIdentityProviders:getFederatedSettingsIdentityProviders", TypeShape.of(GetFederatedSettingsIdentityProvidersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettingsIdentityProviders` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * &gt; **NOTE:** OIDC Workforce IdP is currently in preview. To learn more about OIDC and existing limitations see the [OIDC Authentication Documentation](https://www.mongodb.com/docs/atlas/security-oidc/).
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProvider;
     * import com.pulumi.mongodbatlas.FederatedSettingsIdentityProviderArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsIdentityProvidersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var identityProvider = new FederatedSettingsIdentityProvider("identityProvider", FederatedSettingsIdentityProviderArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f")
     *             .name("mongodb_federation_test")
     *             .associatedDomains("yourdomain.com")
     *             .ssoDebugEnabled(true)
     *             .status("ACTIVE")
     *             .build());
     * 
     *         final var identittyProvider = MongodbatlasFunctions.getFederatedSettingsIdentityProviders(GetFederatedSettingsIdentityProvidersArgs.builder()
     *             .federationSettingsId(identityProvider.id())
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsIdentityProvidersInvokeResult> getFederatedSettingsIdentityProvidersPlain(GetFederatedSettingsIdentityProvidersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettingsIdentityProviders:getFederatedSettingsIdentityProviders", TypeShape.of(GetFederatedSettingsIdentityProvidersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Organizational configuration provides federated settings outputs for the configured Organizational configuration.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnection = new FederatedSettingsOrgConfig("orgConnection", FederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f14")
     *             .orgId("627a9683ea7ff7f74de306f14")
     *             .dataAccessIdentityProviderIds("64d613677e1ad50839cce4db")
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists("mydomain.com")
     *             .postAuthRoleGrants("ORG_MEMBER")
     *             .identityProviderId("0oaqyt9fc2ySTWnA0357")
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfig(GetFederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId(orgConnectionMongodbatlasFederatedSettingsOrgConfig.id())
     *             .orgId("627a9683ea7ff7f74de306f14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsOrgConfigResult> getFederatedSettingsOrgConfig(GetFederatedSettingsOrgConfigArgs args) {
        return getFederatedSettingsOrgConfig(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Organizational configuration provides federated settings outputs for the configured Organizational configuration.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnection = new FederatedSettingsOrgConfig("orgConnection", FederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f14")
     *             .orgId("627a9683ea7ff7f74de306f14")
     *             .dataAccessIdentityProviderIds("64d613677e1ad50839cce4db")
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists("mydomain.com")
     *             .postAuthRoleGrants("ORG_MEMBER")
     *             .identityProviderId("0oaqyt9fc2ySTWnA0357")
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfig(GetFederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId(orgConnectionMongodbatlasFederatedSettingsOrgConfig.id())
     *             .orgId("627a9683ea7ff7f74de306f14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgConfigResult> getFederatedSettingsOrgConfigPlain(GetFederatedSettingsOrgConfigPlainArgs args) {
        return getFederatedSettingsOrgConfigPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Organizational configuration provides federated settings outputs for the configured Organizational configuration.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnection = new FederatedSettingsOrgConfig("orgConnection", FederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f14")
     *             .orgId("627a9683ea7ff7f74de306f14")
     *             .dataAccessIdentityProviderIds("64d613677e1ad50839cce4db")
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists("mydomain.com")
     *             .postAuthRoleGrants("ORG_MEMBER")
     *             .identityProviderId("0oaqyt9fc2ySTWnA0357")
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfig(GetFederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId(orgConnectionMongodbatlasFederatedSettingsOrgConfig.id())
     *             .orgId("627a9683ea7ff7f74de306f14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsOrgConfigResult> getFederatedSettingsOrgConfig(GetFederatedSettingsOrgConfigArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettingsOrgConfig:getFederatedSettingsOrgConfig", TypeShape.of(GetFederatedSettingsOrgConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgConfig` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Organizational configuration provides federated settings outputs for the configured Organizational configuration.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnection = new FederatedSettingsOrgConfig("orgConnection", FederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f14")
     *             .orgId("627a9683ea7ff7f74de306f14")
     *             .dataAccessIdentityProviderIds("64d613677e1ad50839cce4db")
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists("mydomain.com")
     *             .postAuthRoleGrants("ORG_MEMBER")
     *             .identityProviderId("0oaqyt9fc2ySTWnA0357")
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfig(GetFederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId(orgConnectionMongodbatlasFederatedSettingsOrgConfig.id())
     *             .orgId("627a9683ea7ff7f74de306f14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgConfigResult> getFederatedSettingsOrgConfigPlain(GetFederatedSettingsOrgConfigPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettingsOrgConfig:getFederatedSettingsOrgConfig", TypeShape.of(GetFederatedSettingsOrgConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgConfigs` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnection = new FederatedSettingsOrgConfig("orgConnection", FederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f14")
     *             .orgId("627a9683ea7ff7f74de306f14")
     *             .dataAccessIdentityProviderIds("64d613677e1ad50839cce4db")
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists("mydomain.com")
     *             .postAuthRoleGrants("ORG_MEMBER")
     *             .identityProviderId("0oaqyt9fc2ySTWnA0357")
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfigs(GetFederatedSettingsOrgConfigsArgs.builder()
     *             .federationSettingsId(orgConnectionMongodbatlasFederatedSettingsOrgConfig.federationSettingsId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsOrgConfigsInvokeResult> getFederatedSettingsOrgConfigs(GetFederatedSettingsOrgConfigsArgs args) {
        return getFederatedSettingsOrgConfigs(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgConfigs` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnection = new FederatedSettingsOrgConfig("orgConnection", FederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f14")
     *             .orgId("627a9683ea7ff7f74de306f14")
     *             .dataAccessIdentityProviderIds("64d613677e1ad50839cce4db")
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists("mydomain.com")
     *             .postAuthRoleGrants("ORG_MEMBER")
     *             .identityProviderId("0oaqyt9fc2ySTWnA0357")
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfigs(GetFederatedSettingsOrgConfigsArgs.builder()
     *             .federationSettingsId(orgConnectionMongodbatlasFederatedSettingsOrgConfig.federationSettingsId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgConfigsInvokeResult> getFederatedSettingsOrgConfigsPlain(GetFederatedSettingsOrgConfigsPlainArgs args) {
        return getFederatedSettingsOrgConfigsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgConfigs` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnection = new FederatedSettingsOrgConfig("orgConnection", FederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f14")
     *             .orgId("627a9683ea7ff7f74de306f14")
     *             .dataAccessIdentityProviderIds("64d613677e1ad50839cce4db")
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists("mydomain.com")
     *             .postAuthRoleGrants("ORG_MEMBER")
     *             .identityProviderId("0oaqyt9fc2ySTWnA0357")
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfigs(GetFederatedSettingsOrgConfigsArgs.builder()
     *             .federationSettingsId(orgConnectionMongodbatlasFederatedSettingsOrgConfig.federationSettingsId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsOrgConfigsInvokeResult> getFederatedSettingsOrgConfigs(GetFederatedSettingsOrgConfigsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettingsOrgConfigs:getFederatedSettingsOrgConfigs", TypeShape.of(GetFederatedSettingsOrgConfigsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgConfigs` provides an Federated Settings Identity Providers datasource. Atlas Cloud Federated Settings Identity Providers provides federated settings outputs for the configured Identity Providers.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfig;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgConfigArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgConfigsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgConnection = new FederatedSettingsOrgConfig("orgConnection", FederatedSettingsOrgConfigArgs.builder()
     *             .federationSettingsId("627a9687f7f7f7f774de306f14")
     *             .orgId("627a9683ea7ff7f74de306f14")
     *             .dataAccessIdentityProviderIds("64d613677e1ad50839cce4db")
     *             .domainRestrictionEnabled(false)
     *             .domainAllowLists("mydomain.com")
     *             .postAuthRoleGrants("ORG_MEMBER")
     *             .identityProviderId("0oaqyt9fc2ySTWnA0357")
     *             .build());
     * 
     *         final var orgConfigsDs = MongodbatlasFunctions.getFederatedSettingsOrgConfigs(GetFederatedSettingsOrgConfigsArgs.builder()
     *             .federationSettingsId(orgConnectionMongodbatlasFederatedSettingsOrgConfig.federationSettingsId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgConfigsInvokeResult> getFederatedSettingsOrgConfigsPlain(GetFederatedSettingsOrgConfigsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettingsOrgConfigs:getFederatedSettingsOrgConfigs", TypeShape.of(GetFederatedSettingsOrgConfigsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgRoleMapping` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMapping;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMappingArgs;
     * import com.pulumi.mongodbatlas.inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgGroupRoleMappingImport = new FederatedSettingsOrgRoleMapping("orgGroupRoleMappingImport", FederatedSettingsOrgRoleMappingArgs.builder()
     *             .federationSettingsId(federatedSettings.id())
     *             .orgId("627a9683e7f7f7ff7fe306f14")
     *             .externalGroupName("myGrouptest")
     *             .roleAssignments(            
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .orgId("627a9683e7f7f7ff7fe306f14")
     *                     .roles(                    
     *                         "ORG_MEMBER",
     *                         "ORG_GROUP_CREATOR",
     *                         "ORG_BILLING_ADMIN")
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId("628aa20db7f7f7f98b81b8")
     *                     .roles(                    
     *                         "GROUP_OWNER",
     *                         "GROUP_DATA_ACCESS_ADMIN",
     *                         "GROUP_SEARCH_INDEX_EDITOR",
     *                         "GROUP_DATA_ACCESS_READ_ONLY")
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId("62b477f7f7f7f5e741489c")
     *                     .roles(                    
     *                         "GROUP_OWNER",
     *                         "GROUP_DATA_ACCESS_ADMIN",
     *                         "GROUP_SEARCH_INDEX_EDITOR",
     *                         "GROUP_DATA_ACCESS_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .build());
     * 
     *         final var roleMapping = MongodbatlasFunctions.getFederatedSettingsOrgRoleMapping(GetFederatedSettingsOrgRoleMappingArgs.builder()
     *             .federationSettingsId(orgGroupRoleMappingImport.id())
     *             .orgId("627a9683e7f7f7ff7fe306f14")
     *             .roleMappingId("627a9673e7f7f7ff7fe306f14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsOrgRoleMappingResult> getFederatedSettingsOrgRoleMapping(GetFederatedSettingsOrgRoleMappingArgs args) {
        return getFederatedSettingsOrgRoleMapping(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgRoleMapping` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMapping;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMappingArgs;
     * import com.pulumi.mongodbatlas.inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgGroupRoleMappingImport = new FederatedSettingsOrgRoleMapping("orgGroupRoleMappingImport", FederatedSettingsOrgRoleMappingArgs.builder()
     *             .federationSettingsId(federatedSettings.id())
     *             .orgId("627a9683e7f7f7ff7fe306f14")
     *             .externalGroupName("myGrouptest")
     *             .roleAssignments(            
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .orgId("627a9683e7f7f7ff7fe306f14")
     *                     .roles(                    
     *                         "ORG_MEMBER",
     *                         "ORG_GROUP_CREATOR",
     *                         "ORG_BILLING_ADMIN")
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId("628aa20db7f7f7f98b81b8")
     *                     .roles(                    
     *                         "GROUP_OWNER",
     *                         "GROUP_DATA_ACCESS_ADMIN",
     *                         "GROUP_SEARCH_INDEX_EDITOR",
     *                         "GROUP_DATA_ACCESS_READ_ONLY")
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId("62b477f7f7f7f5e741489c")
     *                     .roles(                    
     *                         "GROUP_OWNER",
     *                         "GROUP_DATA_ACCESS_ADMIN",
     *                         "GROUP_SEARCH_INDEX_EDITOR",
     *                         "GROUP_DATA_ACCESS_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .build());
     * 
     *         final var roleMapping = MongodbatlasFunctions.getFederatedSettingsOrgRoleMapping(GetFederatedSettingsOrgRoleMappingArgs.builder()
     *             .federationSettingsId(orgGroupRoleMappingImport.id())
     *             .orgId("627a9683e7f7f7ff7fe306f14")
     *             .roleMappingId("627a9673e7f7f7ff7fe306f14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgRoleMappingResult> getFederatedSettingsOrgRoleMappingPlain(GetFederatedSettingsOrgRoleMappingPlainArgs args) {
        return getFederatedSettingsOrgRoleMappingPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgRoleMapping` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMapping;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMappingArgs;
     * import com.pulumi.mongodbatlas.inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgGroupRoleMappingImport = new FederatedSettingsOrgRoleMapping("orgGroupRoleMappingImport", FederatedSettingsOrgRoleMappingArgs.builder()
     *             .federationSettingsId(federatedSettings.id())
     *             .orgId("627a9683e7f7f7ff7fe306f14")
     *             .externalGroupName("myGrouptest")
     *             .roleAssignments(            
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .orgId("627a9683e7f7f7ff7fe306f14")
     *                     .roles(                    
     *                         "ORG_MEMBER",
     *                         "ORG_GROUP_CREATOR",
     *                         "ORG_BILLING_ADMIN")
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId("628aa20db7f7f7f98b81b8")
     *                     .roles(                    
     *                         "GROUP_OWNER",
     *                         "GROUP_DATA_ACCESS_ADMIN",
     *                         "GROUP_SEARCH_INDEX_EDITOR",
     *                         "GROUP_DATA_ACCESS_READ_ONLY")
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId("62b477f7f7f7f5e741489c")
     *                     .roles(                    
     *                         "GROUP_OWNER",
     *                         "GROUP_DATA_ACCESS_ADMIN",
     *                         "GROUP_SEARCH_INDEX_EDITOR",
     *                         "GROUP_DATA_ACCESS_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .build());
     * 
     *         final var roleMapping = MongodbatlasFunctions.getFederatedSettingsOrgRoleMapping(GetFederatedSettingsOrgRoleMappingArgs.builder()
     *             .federationSettingsId(orgGroupRoleMappingImport.id())
     *             .orgId("627a9683e7f7f7ff7fe306f14")
     *             .roleMappingId("627a9673e7f7f7ff7fe306f14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsOrgRoleMappingResult> getFederatedSettingsOrgRoleMapping(GetFederatedSettingsOrgRoleMappingArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettingsOrgRoleMapping:getFederatedSettingsOrgRoleMapping", TypeShape.of(GetFederatedSettingsOrgRoleMappingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.FederatedSettingsOrgRoleMapping` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMapping;
     * import com.pulumi.mongodbatlas.FederatedSettingsOrgRoleMappingArgs;
     * import com.pulumi.mongodbatlas.inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetFederatedSettingsOrgRoleMappingArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var orgGroupRoleMappingImport = new FederatedSettingsOrgRoleMapping("orgGroupRoleMappingImport", FederatedSettingsOrgRoleMappingArgs.builder()
     *             .federationSettingsId(federatedSettings.id())
     *             .orgId("627a9683e7f7f7ff7fe306f14")
     *             .externalGroupName("myGrouptest")
     *             .roleAssignments(            
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .orgId("627a9683e7f7f7ff7fe306f14")
     *                     .roles(                    
     *                         "ORG_MEMBER",
     *                         "ORG_GROUP_CREATOR",
     *                         "ORG_BILLING_ADMIN")
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId("628aa20db7f7f7f98b81b8")
     *                     .roles(                    
     *                         "GROUP_OWNER",
     *                         "GROUP_DATA_ACCESS_ADMIN",
     *                         "GROUP_SEARCH_INDEX_EDITOR",
     *                         "GROUP_DATA_ACCESS_READ_ONLY")
     *                     .build(),
     *                 FederatedSettingsOrgRoleMappingRoleAssignmentArgs.builder()
     *                     .groupId("62b477f7f7f7f5e741489c")
     *                     .roles(                    
     *                         "GROUP_OWNER",
     *                         "GROUP_DATA_ACCESS_ADMIN",
     *                         "GROUP_SEARCH_INDEX_EDITOR",
     *                         "GROUP_DATA_ACCESS_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .build());
     * 
     *         final var roleMapping = MongodbatlasFunctions.getFederatedSettingsOrgRoleMapping(GetFederatedSettingsOrgRoleMappingArgs.builder()
     *             .federationSettingsId(orgGroupRoleMappingImport.id())
     *             .orgId("627a9683e7f7f7ff7fe306f14")
     *             .roleMappingId("627a9673e7f7f7ff7fe306f14")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgRoleMappingResult> getFederatedSettingsOrgRoleMappingPlain(GetFederatedSettingsOrgRoleMappingPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettingsOrgRoleMapping:getFederatedSettingsOrgRoleMapping", TypeShape.of(GetFederatedSettingsOrgRoleMappingResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgRoleMappings` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsOrgRoleMappingsInvokeResult> getFederatedSettingsOrgRoleMappings(GetFederatedSettingsOrgRoleMappingsArgs args) {
        return getFederatedSettingsOrgRoleMappings(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgRoleMappings` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgRoleMappingsInvokeResult> getFederatedSettingsOrgRoleMappingsPlain(GetFederatedSettingsOrgRoleMappingsPlainArgs args) {
        return getFederatedSettingsOrgRoleMappingsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgRoleMappings` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetFederatedSettingsOrgRoleMappingsInvokeResult> getFederatedSettingsOrgRoleMappings(GetFederatedSettingsOrgRoleMappingsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getFederatedSettingsOrgRoleMappings:getFederatedSettingsOrgRoleMappings", TypeShape.of(GetFederatedSettingsOrgRoleMappingsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getFederatedSettingsOrgRoleMappings` provides an Federated Settings Org Role Mapping datasource. Atlas Cloud Federated Settings Org Role Mapping provides federated settings outputs for the configured Org Role Mapping.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetFederatedSettingsOrgRoleMappingsInvokeResult> getFederatedSettingsOrgRoleMappingsPlain(GetFederatedSettingsOrgRoleMappingsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getFederatedSettingsOrgRoleMappings:getFederatedSettingsOrgRoleMappings", TypeShape.of(GetFederatedSettingsOrgRoleMappingsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.GlobalClusterConfig` describes all managed namespaces and custom zone mappings associated with the specified Global Cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.GlobalClusterConfig;
     * import com.pulumi.mongodbatlas.GlobalClusterConfigArgs;
     * import com.pulumi.mongodbatlas.inputs.GlobalClusterConfigManagedNamespaceArgs;
     * import com.pulumi.mongodbatlas.inputs.GlobalClusterConfigCustomZoneMappingArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetGlobalClusterConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Cluster("test", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("<CLUSTER-NAME>")
     *             .cloudBackup(true)
     *             .clusterType("GEOSHARDED")
     *             .providerName("AWS")
     *             .providerInstanceSizeName("M30")
     *             .replicationSpecs(            
     *                 ClusterReplicationSpecArgs.builder()
     *                     .zoneName("Zone 1")
     *                     .numShards(2)
     *                     .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                         .regionName("EU_CENTRAL_1")
     *                         .electableNodes(3)
     *                         .priority(7)
     *                         .readOnlyNodes(0)
     *                         .build())
     *                     .build(),
     *                 ClusterReplicationSpecArgs.builder()
     *                     .zoneName("Zone 2")
     *                     .numShards(2)
     *                     .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                         .regionName("US_EAST_2")
     *                         .electableNodes(3)
     *                         .priority(7)
     *                         .readOnlyNodes(0)
     *                         .build())
     *                     .build())
     *             .build());
     * 
     *         var configGlobalClusterConfig = new GlobalClusterConfig("configGlobalClusterConfig", GlobalClusterConfigArgs.builder()
     *             .projectId(test.projectId())
     *             .clusterName(test.name())
     *             .managedNamespaces(GlobalClusterConfigManagedNamespaceArgs.builder()
     *                 .db("mydata")
     *                 .collection("publishers")
     *                 .customShardKey("city")
     *                 .build())
     *             .customZoneMappings(GlobalClusterConfigCustomZoneMappingArgs.builder()
     *                 .location("CA")
     *                 .zone("Zone 1")
     *                 .build())
     *             .build());
     * 
     *         final var config = MongodbatlasFunctions.getGlobalClusterConfig(GetGlobalClusterConfigArgs.builder()
     *             .projectId(configGlobalClusterConfig.projectId())
     *             .clusterName(configGlobalClusterConfig.clusterName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGlobalClusterConfigResult> getGlobalClusterConfig(GetGlobalClusterConfigArgs args) {
        return getGlobalClusterConfig(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.GlobalClusterConfig` describes all managed namespaces and custom zone mappings associated with the specified Global Cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.GlobalClusterConfig;
     * import com.pulumi.mongodbatlas.GlobalClusterConfigArgs;
     * import com.pulumi.mongodbatlas.inputs.GlobalClusterConfigManagedNamespaceArgs;
     * import com.pulumi.mongodbatlas.inputs.GlobalClusterConfigCustomZoneMappingArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetGlobalClusterConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Cluster("test", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("<CLUSTER-NAME>")
     *             .cloudBackup(true)
     *             .clusterType("GEOSHARDED")
     *             .providerName("AWS")
     *             .providerInstanceSizeName("M30")
     *             .replicationSpecs(            
     *                 ClusterReplicationSpecArgs.builder()
     *                     .zoneName("Zone 1")
     *                     .numShards(2)
     *                     .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                         .regionName("EU_CENTRAL_1")
     *                         .electableNodes(3)
     *                         .priority(7)
     *                         .readOnlyNodes(0)
     *                         .build())
     *                     .build(),
     *                 ClusterReplicationSpecArgs.builder()
     *                     .zoneName("Zone 2")
     *                     .numShards(2)
     *                     .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                         .regionName("US_EAST_2")
     *                         .electableNodes(3)
     *                         .priority(7)
     *                         .readOnlyNodes(0)
     *                         .build())
     *                     .build())
     *             .build());
     * 
     *         var configGlobalClusterConfig = new GlobalClusterConfig("configGlobalClusterConfig", GlobalClusterConfigArgs.builder()
     *             .projectId(test.projectId())
     *             .clusterName(test.name())
     *             .managedNamespaces(GlobalClusterConfigManagedNamespaceArgs.builder()
     *                 .db("mydata")
     *                 .collection("publishers")
     *                 .customShardKey("city")
     *                 .build())
     *             .customZoneMappings(GlobalClusterConfigCustomZoneMappingArgs.builder()
     *                 .location("CA")
     *                 .zone("Zone 1")
     *                 .build())
     *             .build());
     * 
     *         final var config = MongodbatlasFunctions.getGlobalClusterConfig(GetGlobalClusterConfigArgs.builder()
     *             .projectId(configGlobalClusterConfig.projectId())
     *             .clusterName(configGlobalClusterConfig.clusterName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGlobalClusterConfigResult> getGlobalClusterConfigPlain(GetGlobalClusterConfigPlainArgs args) {
        return getGlobalClusterConfigPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.GlobalClusterConfig` describes all managed namespaces and custom zone mappings associated with the specified Global Cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.GlobalClusterConfig;
     * import com.pulumi.mongodbatlas.GlobalClusterConfigArgs;
     * import com.pulumi.mongodbatlas.inputs.GlobalClusterConfigManagedNamespaceArgs;
     * import com.pulumi.mongodbatlas.inputs.GlobalClusterConfigCustomZoneMappingArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetGlobalClusterConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Cluster("test", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("<CLUSTER-NAME>")
     *             .cloudBackup(true)
     *             .clusterType("GEOSHARDED")
     *             .providerName("AWS")
     *             .providerInstanceSizeName("M30")
     *             .replicationSpecs(            
     *                 ClusterReplicationSpecArgs.builder()
     *                     .zoneName("Zone 1")
     *                     .numShards(2)
     *                     .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                         .regionName("EU_CENTRAL_1")
     *                         .electableNodes(3)
     *                         .priority(7)
     *                         .readOnlyNodes(0)
     *                         .build())
     *                     .build(),
     *                 ClusterReplicationSpecArgs.builder()
     *                     .zoneName("Zone 2")
     *                     .numShards(2)
     *                     .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                         .regionName("US_EAST_2")
     *                         .electableNodes(3)
     *                         .priority(7)
     *                         .readOnlyNodes(0)
     *                         .build())
     *                     .build())
     *             .build());
     * 
     *         var configGlobalClusterConfig = new GlobalClusterConfig("configGlobalClusterConfig", GlobalClusterConfigArgs.builder()
     *             .projectId(test.projectId())
     *             .clusterName(test.name())
     *             .managedNamespaces(GlobalClusterConfigManagedNamespaceArgs.builder()
     *                 .db("mydata")
     *                 .collection("publishers")
     *                 .customShardKey("city")
     *                 .build())
     *             .customZoneMappings(GlobalClusterConfigCustomZoneMappingArgs.builder()
     *                 .location("CA")
     *                 .zone("Zone 1")
     *                 .build())
     *             .build());
     * 
     *         final var config = MongodbatlasFunctions.getGlobalClusterConfig(GetGlobalClusterConfigArgs.builder()
     *             .projectId(configGlobalClusterConfig.projectId())
     *             .clusterName(configGlobalClusterConfig.clusterName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetGlobalClusterConfigResult> getGlobalClusterConfig(GetGlobalClusterConfigArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getGlobalClusterConfig:getGlobalClusterConfig", TypeShape.of(GetGlobalClusterConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.GlobalClusterConfig` describes all managed namespaces and custom zone mappings associated with the specified Global Cluster.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.ClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.GlobalClusterConfig;
     * import com.pulumi.mongodbatlas.GlobalClusterConfigArgs;
     * import com.pulumi.mongodbatlas.inputs.GlobalClusterConfigManagedNamespaceArgs;
     * import com.pulumi.mongodbatlas.inputs.GlobalClusterConfigCustomZoneMappingArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetGlobalClusterConfigArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Cluster("test", ClusterArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .name("<CLUSTER-NAME>")
     *             .cloudBackup(true)
     *             .clusterType("GEOSHARDED")
     *             .providerName("AWS")
     *             .providerInstanceSizeName("M30")
     *             .replicationSpecs(            
     *                 ClusterReplicationSpecArgs.builder()
     *                     .zoneName("Zone 1")
     *                     .numShards(2)
     *                     .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                         .regionName("EU_CENTRAL_1")
     *                         .electableNodes(3)
     *                         .priority(7)
     *                         .readOnlyNodes(0)
     *                         .build())
     *                     .build(),
     *                 ClusterReplicationSpecArgs.builder()
     *                     .zoneName("Zone 2")
     *                     .numShards(2)
     *                     .regionsConfigs(ClusterReplicationSpecRegionsConfigArgs.builder()
     *                         .regionName("US_EAST_2")
     *                         .electableNodes(3)
     *                         .priority(7)
     *                         .readOnlyNodes(0)
     *                         .build())
     *                     .build())
     *             .build());
     * 
     *         var configGlobalClusterConfig = new GlobalClusterConfig("configGlobalClusterConfig", GlobalClusterConfigArgs.builder()
     *             .projectId(test.projectId())
     *             .clusterName(test.name())
     *             .managedNamespaces(GlobalClusterConfigManagedNamespaceArgs.builder()
     *                 .db("mydata")
     *                 .collection("publishers")
     *                 .customShardKey("city")
     *                 .build())
     *             .customZoneMappings(GlobalClusterConfigCustomZoneMappingArgs.builder()
     *                 .location("CA")
     *                 .zone("Zone 1")
     *                 .build())
     *             .build());
     * 
     *         final var config = MongodbatlasFunctions.getGlobalClusterConfig(GetGlobalClusterConfigArgs.builder()
     *             .projectId(configGlobalClusterConfig.projectId())
     *             .clusterName(configGlobalClusterConfig.clusterName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetGlobalClusterConfigResult> getGlobalClusterConfigPlain(GetGlobalClusterConfigPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getGlobalClusterConfig:getGlobalClusterConfig", TypeShape.of(GetGlobalClusterConfigResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.LdapConfiguration` describes a LDAP Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.LdapConfiguration;
     * import com.pulumi.mongodbatlas.LdapConfigurationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetLdapConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("NAME OF THE PROJECT")
     *             .orgId("ORG ID")
     *             .build());
     * 
     *         var testLdapConfiguration = new LdapConfiguration("testLdapConfiguration", LdapConfigurationArgs.builder()
     *             .projectId(testProject.id())
     *             .authenticationEnabled(true)
     *             .hostname("HOSTNAME")
     *             .port(636)
     *             .bindUsername("USERNAME")
     *             .bindPassword("PASSWORD")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getLdapConfiguration(GetLdapConfigurationArgs.builder()
     *             .projectId(testLdapConfiguration.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLdapConfigurationResult> getLdapConfiguration(GetLdapConfigurationArgs args) {
        return getLdapConfiguration(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.LdapConfiguration` describes a LDAP Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.LdapConfiguration;
     * import com.pulumi.mongodbatlas.LdapConfigurationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetLdapConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("NAME OF THE PROJECT")
     *             .orgId("ORG ID")
     *             .build());
     * 
     *         var testLdapConfiguration = new LdapConfiguration("testLdapConfiguration", LdapConfigurationArgs.builder()
     *             .projectId(testProject.id())
     *             .authenticationEnabled(true)
     *             .hostname("HOSTNAME")
     *             .port(636)
     *             .bindUsername("USERNAME")
     *             .bindPassword("PASSWORD")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getLdapConfiguration(GetLdapConfigurationArgs.builder()
     *             .projectId(testLdapConfiguration.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLdapConfigurationResult> getLdapConfigurationPlain(GetLdapConfigurationPlainArgs args) {
        return getLdapConfigurationPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.LdapConfiguration` describes a LDAP Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.LdapConfiguration;
     * import com.pulumi.mongodbatlas.LdapConfigurationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetLdapConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("NAME OF THE PROJECT")
     *             .orgId("ORG ID")
     *             .build());
     * 
     *         var testLdapConfiguration = new LdapConfiguration("testLdapConfiguration", LdapConfigurationArgs.builder()
     *             .projectId(testProject.id())
     *             .authenticationEnabled(true)
     *             .hostname("HOSTNAME")
     *             .port(636)
     *             .bindUsername("USERNAME")
     *             .bindPassword("PASSWORD")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getLdapConfiguration(GetLdapConfigurationArgs.builder()
     *             .projectId(testLdapConfiguration.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLdapConfigurationResult> getLdapConfiguration(GetLdapConfigurationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getLdapConfiguration:getLdapConfiguration", TypeShape.of(GetLdapConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.LdapConfiguration` describes a LDAP Configuration.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.LdapConfiguration;
     * import com.pulumi.mongodbatlas.LdapConfigurationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetLdapConfigurationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("NAME OF THE PROJECT")
     *             .orgId("ORG ID")
     *             .build());
     * 
     *         var testLdapConfiguration = new LdapConfiguration("testLdapConfiguration", LdapConfigurationArgs.builder()
     *             .projectId(testProject.id())
     *             .authenticationEnabled(true)
     *             .hostname("HOSTNAME")
     *             .port(636)
     *             .bindUsername("USERNAME")
     *             .bindPassword("PASSWORD")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getLdapConfiguration(GetLdapConfigurationArgs.builder()
     *             .projectId(testLdapConfiguration.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLdapConfigurationResult> getLdapConfigurationPlain(GetLdapConfigurationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getLdapConfiguration:getLdapConfiguration", TypeShape.of(GetLdapConfigurationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.LdapVerify` describes a LDAP Verify.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.LdapVerify;
     * import com.pulumi.mongodbatlas.LdapVerifyArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetLdapVerifyArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("NAME OF THE PROJECT")
     *             .orgId("ORG ID")
     *             .build());
     * 
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .projectId(testProject.id())
     *             .name("NAME OF THE CLUSTER")
     *             .providerName("AWS")
     *             .providerRegionName("US_EAST_2")
     *             .providerInstanceSizeName("M10")
     *             .cloudBackup(true)
     *             .build());
     * 
     *         var testLdapVerify = new LdapVerify("testLdapVerify", LdapVerifyArgs.builder()
     *             .projectId(testProject.id())
     *             .hostname("HOSTNAME")
     *             .port(636)
     *             .bindUsername("USERNAME")
     *             .bindPassword("PASSWORD")
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(testCluster)
     *                 .build());
     * 
     *         final var test = MongodbatlasFunctions.getLdapVerify(GetLdapVerifyArgs.builder()
     *             .projectId(testLdapVerify.projectId())
     *             .requestId(testLdapVerify.requestId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLdapVerifyResult> getLdapVerify(GetLdapVerifyArgs args) {
        return getLdapVerify(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.LdapVerify` describes a LDAP Verify.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.LdapVerify;
     * import com.pulumi.mongodbatlas.LdapVerifyArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetLdapVerifyArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("NAME OF THE PROJECT")
     *             .orgId("ORG ID")
     *             .build());
     * 
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .projectId(testProject.id())
     *             .name("NAME OF THE CLUSTER")
     *             .providerName("AWS")
     *             .providerRegionName("US_EAST_2")
     *             .providerInstanceSizeName("M10")
     *             .cloudBackup(true)
     *             .build());
     * 
     *         var testLdapVerify = new LdapVerify("testLdapVerify", LdapVerifyArgs.builder()
     *             .projectId(testProject.id())
     *             .hostname("HOSTNAME")
     *             .port(636)
     *             .bindUsername("USERNAME")
     *             .bindPassword("PASSWORD")
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(testCluster)
     *                 .build());
     * 
     *         final var test = MongodbatlasFunctions.getLdapVerify(GetLdapVerifyArgs.builder()
     *             .projectId(testLdapVerify.projectId())
     *             .requestId(testLdapVerify.requestId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLdapVerifyResult> getLdapVerifyPlain(GetLdapVerifyPlainArgs args) {
        return getLdapVerifyPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.LdapVerify` describes a LDAP Verify.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.LdapVerify;
     * import com.pulumi.mongodbatlas.LdapVerifyArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetLdapVerifyArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("NAME OF THE PROJECT")
     *             .orgId("ORG ID")
     *             .build());
     * 
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .projectId(testProject.id())
     *             .name("NAME OF THE CLUSTER")
     *             .providerName("AWS")
     *             .providerRegionName("US_EAST_2")
     *             .providerInstanceSizeName("M10")
     *             .cloudBackup(true)
     *             .build());
     * 
     *         var testLdapVerify = new LdapVerify("testLdapVerify", LdapVerifyArgs.builder()
     *             .projectId(testProject.id())
     *             .hostname("HOSTNAME")
     *             .port(636)
     *             .bindUsername("USERNAME")
     *             .bindPassword("PASSWORD")
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(testCluster)
     *                 .build());
     * 
     *         final var test = MongodbatlasFunctions.getLdapVerify(GetLdapVerifyArgs.builder()
     *             .projectId(testLdapVerify.projectId())
     *             .requestId(testLdapVerify.requestId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetLdapVerifyResult> getLdapVerify(GetLdapVerifyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getLdapVerify:getLdapVerify", TypeShape.of(GetLdapVerifyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.LdapVerify` describes a LDAP Verify.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.Cluster;
     * import com.pulumi.mongodbatlas.ClusterArgs;
     * import com.pulumi.mongodbatlas.LdapVerify;
     * import com.pulumi.mongodbatlas.LdapVerifyArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetLdapVerifyArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("NAME OF THE PROJECT")
     *             .orgId("ORG ID")
     *             .build());
     * 
     *         var testCluster = new Cluster("testCluster", ClusterArgs.builder()
     *             .projectId(testProject.id())
     *             .name("NAME OF THE CLUSTER")
     *             .providerName("AWS")
     *             .providerRegionName("US_EAST_2")
     *             .providerInstanceSizeName("M10")
     *             .cloudBackup(true)
     *             .build());
     * 
     *         var testLdapVerify = new LdapVerify("testLdapVerify", LdapVerifyArgs.builder()
     *             .projectId(testProject.id())
     *             .hostname("HOSTNAME")
     *             .port(636)
     *             .bindUsername("USERNAME")
     *             .bindPassword("PASSWORD")
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(testCluster)
     *                 .build());
     * 
     *         final var test = MongodbatlasFunctions.getLdapVerify(GetLdapVerifyArgs.builder()
     *             .projectId(testLdapVerify.projectId())
     *             .requestId(testLdapVerify.requestId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetLdapVerifyResult> getLdapVerifyPlain(GetLdapVerifyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getLdapVerify:getLdapVerify", TypeShape.of(GetLdapVerifyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.MaintenanceWindow` provides a Maintenance Window entry datasource. Gets information regarding the configured maintenance window for a MongoDB Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Examples Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MaintenanceWindow;
     * import com.pulumi.mongodbatlas.MaintenanceWindowArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetMaintenanceWindowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testMaintenanceWindow = new MaintenanceWindow("testMaintenanceWindow", MaintenanceWindowArgs.builder()
     *             .projectId("<your-project-id>")
     *             .dayOfWeek(3)
     *             .hourOfDay(4)
     *             .autoDeferOnceEnabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getMaintenanceWindow(GetMaintenanceWindowArgs.builder()
     *             .projectId(testMaintenanceWindow.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MaintenanceWindow;
     * import com.pulumi.mongodbatlas.MaintenanceWindowArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetMaintenanceWindowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testMaintenanceWindow = new MaintenanceWindow("testMaintenanceWindow", MaintenanceWindowArgs.builder()
     *             .projectId("<your-project-id>")
     *             .startAsap(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getMaintenanceWindow(GetMaintenanceWindowArgs.builder()
     *             .projectId(testMaintenanceWindow.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMaintenanceWindowResult> getMaintenanceWindow(GetMaintenanceWindowArgs args) {
        return getMaintenanceWindow(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.MaintenanceWindow` provides a Maintenance Window entry datasource. Gets information regarding the configured maintenance window for a MongoDB Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Examples Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MaintenanceWindow;
     * import com.pulumi.mongodbatlas.MaintenanceWindowArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetMaintenanceWindowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testMaintenanceWindow = new MaintenanceWindow("testMaintenanceWindow", MaintenanceWindowArgs.builder()
     *             .projectId("<your-project-id>")
     *             .dayOfWeek(3)
     *             .hourOfDay(4)
     *             .autoDeferOnceEnabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getMaintenanceWindow(GetMaintenanceWindowArgs.builder()
     *             .projectId(testMaintenanceWindow.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MaintenanceWindow;
     * import com.pulumi.mongodbatlas.MaintenanceWindowArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetMaintenanceWindowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testMaintenanceWindow = new MaintenanceWindow("testMaintenanceWindow", MaintenanceWindowArgs.builder()
     *             .projectId("<your-project-id>")
     *             .startAsap(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getMaintenanceWindow(GetMaintenanceWindowArgs.builder()
     *             .projectId(testMaintenanceWindow.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMaintenanceWindowResult> getMaintenanceWindowPlain(GetMaintenanceWindowPlainArgs args) {
        return getMaintenanceWindowPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.MaintenanceWindow` provides a Maintenance Window entry datasource. Gets information regarding the configured maintenance window for a MongoDB Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Examples Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MaintenanceWindow;
     * import com.pulumi.mongodbatlas.MaintenanceWindowArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetMaintenanceWindowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testMaintenanceWindow = new MaintenanceWindow("testMaintenanceWindow", MaintenanceWindowArgs.builder()
     *             .projectId("<your-project-id>")
     *             .dayOfWeek(3)
     *             .hourOfDay(4)
     *             .autoDeferOnceEnabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getMaintenanceWindow(GetMaintenanceWindowArgs.builder()
     *             .projectId(testMaintenanceWindow.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MaintenanceWindow;
     * import com.pulumi.mongodbatlas.MaintenanceWindowArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetMaintenanceWindowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testMaintenanceWindow = new MaintenanceWindow("testMaintenanceWindow", MaintenanceWindowArgs.builder()
     *             .projectId("<your-project-id>")
     *             .startAsap(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getMaintenanceWindow(GetMaintenanceWindowArgs.builder()
     *             .projectId(testMaintenanceWindow.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetMaintenanceWindowResult> getMaintenanceWindow(GetMaintenanceWindowArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getMaintenanceWindow:getMaintenanceWindow", TypeShape.of(GetMaintenanceWindowResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.MaintenanceWindow` provides a Maintenance Window entry datasource. Gets information regarding the configured maintenance window for a MongoDB Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Examples Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MaintenanceWindow;
     * import com.pulumi.mongodbatlas.MaintenanceWindowArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetMaintenanceWindowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testMaintenanceWindow = new MaintenanceWindow("testMaintenanceWindow", MaintenanceWindowArgs.builder()
     *             .projectId("<your-project-id>")
     *             .dayOfWeek(3)
     *             .hourOfDay(4)
     *             .autoDeferOnceEnabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getMaintenanceWindow(GetMaintenanceWindowArgs.builder()
     *             .projectId(testMaintenanceWindow.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MaintenanceWindow;
     * import com.pulumi.mongodbatlas.MaintenanceWindowArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetMaintenanceWindowArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testMaintenanceWindow = new MaintenanceWindow("testMaintenanceWindow", MaintenanceWindowArgs.builder()
     *             .projectId("<your-project-id>")
     *             .startAsap(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getMaintenanceWindow(GetMaintenanceWindowArgs.builder()
     *             .projectId(testMaintenanceWindow.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetMaintenanceWindowResult> getMaintenanceWindowPlain(GetMaintenanceWindowPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getMaintenanceWindow:getMaintenanceWindow", TypeShape.of(GetMaintenanceWindowResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.NetworkContainer` describes a Network Peering Container. The resource requires your Project ID and container ID.
     * 
     * &gt; **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic Example.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkContainerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer("testNetworkContainer", NetworkContainerArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .atlasCidrBlock("10.8.0.0/21")
     *             .providerName("AWS")
     *             .regionName("US_EAST_1")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkContainer(GetNetworkContainerArgs.builder()
     *             .projectId(testNetworkContainer.projectId())
     *             .containerId(testNetworkContainer.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkContainerResult> getNetworkContainer(GetNetworkContainerArgs args) {
        return getNetworkContainer(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.NetworkContainer` describes a Network Peering Container. The resource requires your Project ID and container ID.
     * 
     * &gt; **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic Example.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkContainerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer("testNetworkContainer", NetworkContainerArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .atlasCidrBlock("10.8.0.0/21")
     *             .providerName("AWS")
     *             .regionName("US_EAST_1")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkContainer(GetNetworkContainerArgs.builder()
     *             .projectId(testNetworkContainer.projectId())
     *             .containerId(testNetworkContainer.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkContainerResult> getNetworkContainerPlain(GetNetworkContainerPlainArgs args) {
        return getNetworkContainerPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.NetworkContainer` describes a Network Peering Container. The resource requires your Project ID and container ID.
     * 
     * &gt; **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic Example.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkContainerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer("testNetworkContainer", NetworkContainerArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .atlasCidrBlock("10.8.0.0/21")
     *             .providerName("AWS")
     *             .regionName("US_EAST_1")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkContainer(GetNetworkContainerArgs.builder()
     *             .projectId(testNetworkContainer.projectId())
     *             .containerId(testNetworkContainer.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkContainerResult> getNetworkContainer(GetNetworkContainerArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getNetworkContainer:getNetworkContainer", TypeShape.of(GetNetworkContainerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.NetworkContainer` describes a Network Peering Container. The resource requires your Project ID and container ID.
     * 
     * &gt; **IMPORTANT:** This resource creates one Network Peering container into which Atlas can deploy Network Peering connections. An Atlas project can have a maximum of one container for each cloud provider. You must have either the Project Owner or Organization Owner role to successfully call this endpoint.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic Example.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkContainerArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer("testNetworkContainer", NetworkContainerArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .atlasCidrBlock("10.8.0.0/21")
     *             .providerName("AWS")
     *             .regionName("US_EAST_1")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkContainer(GetNetworkContainerArgs.builder()
     *             .projectId(testNetworkContainer.projectId())
     *             .containerId(testNetworkContainer.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkContainerResult> getNetworkContainerPlain(GetNetworkContainerPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getNetworkContainer:getNetworkContainer", TypeShape.of(GetNetworkContainerResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getNetworkContainers` describes all Network Peering Containers. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic Example.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer("testNetworkContainer", NetworkContainerArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .atlasCidrBlock("10.8.0.0/21")
     *             .providerName("AWS")
     *             .regionName("US_EAST_1")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkContainers(GetNetworkContainersArgs.builder()
     *             .projectId(testNetworkContainer.projectId())
     *             .providerName(testNetworkContainer.providerName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkContainersInvokeResult> getNetworkContainers(GetNetworkContainersArgs args) {
        return getNetworkContainers(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getNetworkContainers` describes all Network Peering Containers. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic Example.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer("testNetworkContainer", NetworkContainerArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .atlasCidrBlock("10.8.0.0/21")
     *             .providerName("AWS")
     *             .regionName("US_EAST_1")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkContainers(GetNetworkContainersArgs.builder()
     *             .projectId(testNetworkContainer.projectId())
     *             .providerName(testNetworkContainer.providerName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkContainersInvokeResult> getNetworkContainersPlain(GetNetworkContainersPlainArgs args) {
        return getNetworkContainersPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getNetworkContainers` describes all Network Peering Containers. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic Example.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer("testNetworkContainer", NetworkContainerArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .atlasCidrBlock("10.8.0.0/21")
     *             .providerName("AWS")
     *             .regionName("US_EAST_1")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkContainers(GetNetworkContainersArgs.builder()
     *             .projectId(testNetworkContainer.projectId())
     *             .providerName(testNetworkContainer.providerName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkContainersInvokeResult> getNetworkContainers(GetNetworkContainersArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getNetworkContainers:getNetworkContainers", TypeShape.of(GetNetworkContainersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getNetworkContainers` describes all Network Peering Containers. The data source requires your Project ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic Example.
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkContainersArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer("testNetworkContainer", NetworkContainerArgs.builder()
     *             .projectId("<YOUR-PROJECT-ID>")
     *             .atlasCidrBlock("10.8.0.0/21")
     *             .providerName("AWS")
     *             .regionName("US_EAST_1")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkContainers(GetNetworkContainersArgs.builder()
     *             .projectId(testNetworkContainer.projectId())
     *             .providerName(testNetworkContainer.providerName())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkContainersInvokeResult> getNetworkContainersPlain(GetNetworkContainersPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getNetworkContainers:getNetworkContainers", TypeShape.of(GetNetworkContainersInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.NetworkPeering` describes a Network Peering Connection.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * &gt; **NOTE:** If you need to get an existing container ID see the How-To Guide.
     * 
     * ## Example Usage
     * 
     * ### Basic Example (AWS).
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkPeering = new NetworkPeering("testNetworkPeering", NetworkPeeringArgs.builder()
     *             .accepterRegionName("us-east-1")
     *             .projectId("<YOUR-PROJEC-ID>")
     *             .containerId("507f1f77bcf86cd799439011")
     *             .providerName("AWS")
     *             .routeTableCidrBlock("192.168.0.0/24")
     *             .vpcId("vpc-abc123abc123")
     *             .awsAccountId("abc123abc123")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkPeering(GetNetworkPeeringArgs.builder()
     *             .projectId(testNetworkPeering.projectId())
     *             .peeringId(testNetworkPeering.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkPeeringResult> getNetworkPeering(GetNetworkPeeringArgs args) {
        return getNetworkPeering(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.NetworkPeering` describes a Network Peering Connection.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * &gt; **NOTE:** If you need to get an existing container ID see the How-To Guide.
     * 
     * ## Example Usage
     * 
     * ### Basic Example (AWS).
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkPeering = new NetworkPeering("testNetworkPeering", NetworkPeeringArgs.builder()
     *             .accepterRegionName("us-east-1")
     *             .projectId("<YOUR-PROJEC-ID>")
     *             .containerId("507f1f77bcf86cd799439011")
     *             .providerName("AWS")
     *             .routeTableCidrBlock("192.168.0.0/24")
     *             .vpcId("vpc-abc123abc123")
     *             .awsAccountId("abc123abc123")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkPeering(GetNetworkPeeringArgs.builder()
     *             .projectId(testNetworkPeering.projectId())
     *             .peeringId(testNetworkPeering.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkPeeringResult> getNetworkPeeringPlain(GetNetworkPeeringPlainArgs args) {
        return getNetworkPeeringPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.NetworkPeering` describes a Network Peering Connection.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * &gt; **NOTE:** If you need to get an existing container ID see the How-To Guide.
     * 
     * ## Example Usage
     * 
     * ### Basic Example (AWS).
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkPeering = new NetworkPeering("testNetworkPeering", NetworkPeeringArgs.builder()
     *             .accepterRegionName("us-east-1")
     *             .projectId("<YOUR-PROJEC-ID>")
     *             .containerId("507f1f77bcf86cd799439011")
     *             .providerName("AWS")
     *             .routeTableCidrBlock("192.168.0.0/24")
     *             .vpcId("vpc-abc123abc123")
     *             .awsAccountId("abc123abc123")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkPeering(GetNetworkPeeringArgs.builder()
     *             .projectId(testNetworkPeering.projectId())
     *             .peeringId(testNetworkPeering.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkPeeringResult> getNetworkPeering(GetNetworkPeeringArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getNetworkPeering:getNetworkPeering", TypeShape.of(GetNetworkPeeringResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.NetworkPeering` describes a Network Peering Connection.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * &gt; **NOTE:** If you need to get an existing container ID see the How-To Guide.
     * 
     * ## Example Usage
     * 
     * ### Basic Example (AWS).
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkPeering = new NetworkPeering("testNetworkPeering", NetworkPeeringArgs.builder()
     *             .accepterRegionName("us-east-1")
     *             .projectId("<YOUR-PROJEC-ID>")
     *             .containerId("507f1f77bcf86cd799439011")
     *             .providerName("AWS")
     *             .routeTableCidrBlock("192.168.0.0/24")
     *             .vpcId("vpc-abc123abc123")
     *             .awsAccountId("abc123abc123")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkPeering(GetNetworkPeeringArgs.builder()
     *             .projectId(testNetworkPeering.projectId())
     *             .peeringId(testNetworkPeering.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkPeeringResult> getNetworkPeeringPlain(GetNetworkPeeringPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getNetworkPeering:getNetworkPeering", TypeShape.of(GetNetworkPeeringResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getNetworkPeerings` describes all Network Peering Connections.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic Example (AWS).
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkPeering = new NetworkPeering("testNetworkPeering", NetworkPeeringArgs.builder()
     *             .accepterRegionName("us-east-1")
     *             .projectId("<YOUR-PROJEC-ID>")
     *             .containerId("507f1f77bcf86cd799439011")
     *             .providerName("AWS")
     *             .routeTableCidrBlock("192.168.0.0/24")
     *             .vpcId("vpc-abc123abc123")
     *             .awsAccountId("abc123abc123")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkPeerings(GetNetworkPeeringsArgs.builder()
     *             .projectId(testNetworkPeering.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkPeeringsInvokeResult> getNetworkPeerings(GetNetworkPeeringsArgs args) {
        return getNetworkPeerings(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getNetworkPeerings` describes all Network Peering Connections.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic Example (AWS).
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkPeering = new NetworkPeering("testNetworkPeering", NetworkPeeringArgs.builder()
     *             .accepterRegionName("us-east-1")
     *             .projectId("<YOUR-PROJEC-ID>")
     *             .containerId("507f1f77bcf86cd799439011")
     *             .providerName("AWS")
     *             .routeTableCidrBlock("192.168.0.0/24")
     *             .vpcId("vpc-abc123abc123")
     *             .awsAccountId("abc123abc123")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkPeerings(GetNetworkPeeringsArgs.builder()
     *             .projectId(testNetworkPeering.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkPeeringsInvokeResult> getNetworkPeeringsPlain(GetNetworkPeeringsPlainArgs args) {
        return getNetworkPeeringsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getNetworkPeerings` describes all Network Peering Connections.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic Example (AWS).
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkPeering = new NetworkPeering("testNetworkPeering", NetworkPeeringArgs.builder()
     *             .accepterRegionName("us-east-1")
     *             .projectId("<YOUR-PROJEC-ID>")
     *             .containerId("507f1f77bcf86cd799439011")
     *             .providerName("AWS")
     *             .routeTableCidrBlock("192.168.0.0/24")
     *             .vpcId("vpc-abc123abc123")
     *             .awsAccountId("abc123abc123")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkPeerings(GetNetworkPeeringsArgs.builder()
     *             .projectId(testNetworkPeering.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetNetworkPeeringsInvokeResult> getNetworkPeerings(GetNetworkPeeringsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getNetworkPeerings:getNetworkPeerings", TypeShape.of(GetNetworkPeeringsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getNetworkPeerings` describes all Network Peering Connections.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find **group_id** in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic Example (AWS).
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetNetworkPeeringsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkPeering = new NetworkPeering("testNetworkPeering", NetworkPeeringArgs.builder()
     *             .accepterRegionName("us-east-1")
     *             .projectId("<YOUR-PROJEC-ID>")
     *             .containerId("507f1f77bcf86cd799439011")
     *             .providerName("AWS")
     *             .routeTableCidrBlock("192.168.0.0/24")
     *             .vpcId("vpc-abc123abc123")
     *             .awsAccountId("abc123abc123")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getNetworkPeerings(GetNetworkPeeringsArgs.builder()
     *             .projectId(testNetworkPeering.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetNetworkPeeringsInvokeResult> getNetworkPeeringsPlain(GetNetworkPeeringsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getNetworkPeerings:getNetworkPeerings", TypeShape.of(GetNetworkPeeringsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.OnlineArchive` describes an Online Archive
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ## Attributes reference
     * 
     * * `db_name`          -  Name of the database that contains the collection.
     * * `coll_name`        -  Name of the collection.
     * * `collection_type`  -  Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `data_process_region` - Settings to configure the region where you wish to store your archived data. See data process region.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state`    - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type`          - Type of criteria (DATE, CUSTOM)
     * * `date_field`   - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format`   - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Data Process Region
     * * `cloud_provider` - Human-readable label that identifies the Cloud service provider where you wish to store your archived data.
     * * `region` - Human-readable label that identifies the geographic location of the region where you wish to store your archived data. For allowed values, see [MongoDB Atlas API documentation](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Online-Archive/operation/createOnlineArchive)
     * 
     * ### Schedule
     * 
     * * `type`          - Type of schedule. Valid values: `DEFAULT`, `DAILY`, `MONTHLY`, `WEEKLY`.
     * * `start_hour`    - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour`      - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute`   - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute`     - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month`   - Day of the month when the scheduled archive starts. Set this parameter when `type` is `MONTHLY`.
     * * `day_of_week`     - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).Set this parameter when `type` is `WEEKLY`.
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     * See [MongoDB Atlas API](https://docs.atlas.mongodb.com/reference/api/online-archive-get-one/) Documentation for more information.
     * 
     */
    public static Output<GetOnlineArchiveResult> getOnlineArchive(GetOnlineArchiveArgs args) {
        return getOnlineArchive(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.OnlineArchive` describes an Online Archive
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ## Attributes reference
     * 
     * * `db_name`          -  Name of the database that contains the collection.
     * * `coll_name`        -  Name of the collection.
     * * `collection_type`  -  Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `data_process_region` - Settings to configure the region where you wish to store your archived data. See data process region.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state`    - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type`          - Type of criteria (DATE, CUSTOM)
     * * `date_field`   - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format`   - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Data Process Region
     * * `cloud_provider` - Human-readable label that identifies the Cloud service provider where you wish to store your archived data.
     * * `region` - Human-readable label that identifies the geographic location of the region where you wish to store your archived data. For allowed values, see [MongoDB Atlas API documentation](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Online-Archive/operation/createOnlineArchive)
     * 
     * ### Schedule
     * 
     * * `type`          - Type of schedule. Valid values: `DEFAULT`, `DAILY`, `MONTHLY`, `WEEKLY`.
     * * `start_hour`    - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour`      - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute`   - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute`     - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month`   - Day of the month when the scheduled archive starts. Set this parameter when `type` is `MONTHLY`.
     * * `day_of_week`     - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).Set this parameter when `type` is `WEEKLY`.
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     * See [MongoDB Atlas API](https://docs.atlas.mongodb.com/reference/api/online-archive-get-one/) Documentation for more information.
     * 
     */
    public static CompletableFuture<GetOnlineArchiveResult> getOnlineArchivePlain(GetOnlineArchivePlainArgs args) {
        return getOnlineArchivePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.OnlineArchive` describes an Online Archive
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ## Attributes reference
     * 
     * * `db_name`          -  Name of the database that contains the collection.
     * * `coll_name`        -  Name of the collection.
     * * `collection_type`  -  Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `data_process_region` - Settings to configure the region where you wish to store your archived data. See data process region.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state`    - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type`          - Type of criteria (DATE, CUSTOM)
     * * `date_field`   - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format`   - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Data Process Region
     * * `cloud_provider` - Human-readable label that identifies the Cloud service provider where you wish to store your archived data.
     * * `region` - Human-readable label that identifies the geographic location of the region where you wish to store your archived data. For allowed values, see [MongoDB Atlas API documentation](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Online-Archive/operation/createOnlineArchive)
     * 
     * ### Schedule
     * 
     * * `type`          - Type of schedule. Valid values: `DEFAULT`, `DAILY`, `MONTHLY`, `WEEKLY`.
     * * `start_hour`    - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour`      - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute`   - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute`     - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month`   - Day of the month when the scheduled archive starts. Set this parameter when `type` is `MONTHLY`.
     * * `day_of_week`     - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).Set this parameter when `type` is `WEEKLY`.
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     * See [MongoDB Atlas API](https://docs.atlas.mongodb.com/reference/api/online-archive-get-one/) Documentation for more information.
     * 
     */
    public static Output<GetOnlineArchiveResult> getOnlineArchive(GetOnlineArchiveArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getOnlineArchive:getOnlineArchive", TypeShape.of(GetOnlineArchiveResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.OnlineArchive` describes an Online Archive
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ## Attributes reference
     * 
     * * `db_name`          -  Name of the database that contains the collection.
     * * `coll_name`        -  Name of the collection.
     * * `collection_type`  -  Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `data_process_region` - Settings to configure the region where you wish to store your archived data. See data process region.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state`    - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type`          - Type of criteria (DATE, CUSTOM)
     * * `date_field`   - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format`   - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Data Process Region
     * * `cloud_provider` - Human-readable label that identifies the Cloud service provider where you wish to store your archived data.
     * * `region` - Human-readable label that identifies the geographic location of the region where you wish to store your archived data. For allowed values, see [MongoDB Atlas API documentation](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Online-Archive/operation/createOnlineArchive)
     * 
     * ### Schedule
     * 
     * * `type`          - Type of schedule. Valid values: `DEFAULT`, `DAILY`, `MONTHLY`, `WEEKLY`.
     * * `start_hour`    - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour`      - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute`   - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute`     - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month`   - Day of the month when the scheduled archive starts. Set this parameter when `type` is `MONTHLY`.
     * * `day_of_week`     - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).Set this parameter when `type` is `WEEKLY`.
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     * See [MongoDB Atlas API](https://docs.atlas.mongodb.com/reference/api/online-archive-get-one/) Documentation for more information.
     * 
     */
    public static CompletableFuture<GetOnlineArchiveResult> getOnlineArchivePlain(GetOnlineArchivePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getOnlineArchive:getOnlineArchive", TypeShape.of(GetOnlineArchiveResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.OnlineArchive` Describes the list of all the online archives for a cluster
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ## Attributes reference
     * 
     * * `db_name` - Name of the database that contains the collection.
     * * `coll_name` -  Name of the collection.
     * * `collection_type` - Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `data_process_region` - Settings to configure the region where you wish to store your archived data. See data process region.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state` - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type` - Type of criteria (DATE, CUSTOM)
     * * `date_field` - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format` - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Data Process Region
     * * `cloud_provider` - Human-readable label that identifies the Cloud service provider where you wish to store your archived data.
     * * `region` - Human-readable label that identifies the geographic location of the region where you wish to store your archived data. For allowed values, see [MongoDB Atlas API documentation](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Online-Archive/operation/createOnlineArchive)
     * 
     * ### Schedule
     * 
     * * `type` - Type of schedule (`DAILY`, `MONTHLY`, `WEEKLY`).
     * * `start_hour` - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour` - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute` - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute` - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month` - Day of the month when the scheduled archive starts.
     * * `day_of_week` - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     */
    public static Output<GetOnlineArchivesInvokeResult> getOnlineArchives(GetOnlineArchivesArgs args) {
        return getOnlineArchives(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.OnlineArchive` Describes the list of all the online archives for a cluster
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ## Attributes reference
     * 
     * * `db_name` - Name of the database that contains the collection.
     * * `coll_name` -  Name of the collection.
     * * `collection_type` - Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `data_process_region` - Settings to configure the region where you wish to store your archived data. See data process region.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state` - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type` - Type of criteria (DATE, CUSTOM)
     * * `date_field` - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format` - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Data Process Region
     * * `cloud_provider` - Human-readable label that identifies the Cloud service provider where you wish to store your archived data.
     * * `region` - Human-readable label that identifies the geographic location of the region where you wish to store your archived data. For allowed values, see [MongoDB Atlas API documentation](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Online-Archive/operation/createOnlineArchive)
     * 
     * ### Schedule
     * 
     * * `type` - Type of schedule (`DAILY`, `MONTHLY`, `WEEKLY`).
     * * `start_hour` - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour` - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute` - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute` - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month` - Day of the month when the scheduled archive starts.
     * * `day_of_week` - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     */
    public static CompletableFuture<GetOnlineArchivesInvokeResult> getOnlineArchivesPlain(GetOnlineArchivesPlainArgs args) {
        return getOnlineArchivesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.OnlineArchive` Describes the list of all the online archives for a cluster
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ## Attributes reference
     * 
     * * `db_name` - Name of the database that contains the collection.
     * * `coll_name` -  Name of the collection.
     * * `collection_type` - Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `data_process_region` - Settings to configure the region where you wish to store your archived data. See data process region.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state` - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type` - Type of criteria (DATE, CUSTOM)
     * * `date_field` - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format` - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Data Process Region
     * * `cloud_provider` - Human-readable label that identifies the Cloud service provider where you wish to store your archived data.
     * * `region` - Human-readable label that identifies the geographic location of the region where you wish to store your archived data. For allowed values, see [MongoDB Atlas API documentation](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Online-Archive/operation/createOnlineArchive)
     * 
     * ### Schedule
     * 
     * * `type` - Type of schedule (`DAILY`, `MONTHLY`, `WEEKLY`).
     * * `start_hour` - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour` - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute` - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute` - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month` - Day of the month when the scheduled archive starts.
     * * `day_of_week` - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     */
    public static Output<GetOnlineArchivesInvokeResult> getOnlineArchives(GetOnlineArchivesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getOnlineArchives:getOnlineArchives", TypeShape.of(GetOnlineArchivesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.OnlineArchive` Describes the list of all the online archives for a cluster
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ## Attributes reference
     * 
     * * `db_name` - Name of the database that contains the collection.
     * * `coll_name` -  Name of the collection.
     * * `collection_type` - Type of MongoDB collection that you want to return. This value can be &#34;TIMESERIES&#34; or &#34;STANDARD&#34;. Default is &#34;STANDARD&#34;.
     * * `criteria` - Criteria to use for archiving data. See criteria.
     * * `data_expiration_rule` - Rule for specifying when data should be deleted from the archive. See data expiration rule.
     * * `data_process_region` - Settings to configure the region where you wish to store your archived data. See data process region.
     * * `schedule` - Regular frequency and duration when archiving process occurs. See schedule.
     * * `partition_fields` - Fields to use to partition data. You can specify up to two frequently queried fields to use for partitioning data. Queries that don’t contain the specified fields require a full collection scan of all archived documents, which takes longer and increases your costs. To learn more about how partition improves query performance, see [Data Structure in S3](https://docs.mongodb.com/datalake/admin/optimize-query-performance/#data-structure-in-s3). The value of a partition field can be up to a maximum of 700 characters. Documents with values exceeding 700 characters are not archived. See partition fields.
     * * `paused` - State of the online archive. This is required for pausing an active online archive or resuming a paused online archive. If the collection has another active online archive, the resume request fails.
     * * `state` - Status of the online archive. Valid values are: Pending, Archiving, Idle, Pausing, Paused, Orphaned and Deleted
     * 
     * ### Criteria
     * * `type` - Type of criteria (DATE, CUSTOM)
     * * `date_field` - Indexed database parameter that stores the date that determines when data moves to the online archive. MongoDB Cloud archives the data when the current date exceeds the date in this database parameter plus the number of days specified through the expireAfterDays parameter. Set this parameter when `type` is `DATE`.
     * * `date_format` - Syntax used to write the date after which data moves to the online archive. Date can be expressed as ISO 8601 or Epoch timestamps. The Epoch timestamp can be expressed as nanoseconds, milliseconds, or seconds. Set this parameter when `type` is `DATE`. You must set `type` to `DATE` if `collectionType` is `TIMESERIES`. Valid values:  ISODATE (default), EPOCH_SECONDS, EPOCH_MILLIS, EPOCH_NANOSECONDS.
     * * `expire_after_days` - Number of days after the value in the criteria.dateField when MongoDB Cloud archives data in the specified cluster. Set this parameter when `type` is `DATE`.
     * * `query` - JSON query to use to select documents for archiving. Atlas uses the specified query with the db.collection.find(query) command. The empty document {} to return all documents is not supported. Set this parameter when `type` is `CUSTOM`.
     * 
     * ### Data Expiration Rule
     * * `expire_after_days` - Number of days used in the date criteria for nominating documents for deletion. Value must be between 7 and 9215.
     * 
     * ### Data Process Region
     * * `cloud_provider` - Human-readable label that identifies the Cloud service provider where you wish to store your archived data.
     * * `region` - Human-readable label that identifies the geographic location of the region where you wish to store your archived data. For allowed values, see [MongoDB Atlas API documentation](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/v2/#tag/Online-Archive/operation/createOnlineArchive)
     * 
     * ### Schedule
     * 
     * * `type` - Type of schedule (`DAILY`, `MONTHLY`, `WEEKLY`).
     * * `start_hour` - Hour of the day when the when the scheduled window to run one online archive starts.
     * * `end_hour` - Hour of the day when the scheduled window to run one online archive ends.
     * * `start_minute` - Minute of the hour when the scheduled window to run one online archive starts.
     * * `end_minute` - Minute of the hour when the scheduled window to run one online archive ends.
     * * `day_of_month` - Day of the month when the scheduled archive starts.
     * * `day_of_week` - Day of the week when the scheduled archive starts. The week starts with Monday (1) and ends with Sunday (7).
     * 
     * ### Partition
     * * `field_name` - Human-readable label that identifies the parameter that MongoDB Cloud uses to partition data. To specify a nested parameter, use the dot notation.
     * * `order` - Sequence in which MongoDB Cloud slices the collection data to create partitions. The resource expresses this sequence starting with zero. The value of the `criteria.dateField` parameter defaults as the first item in the partition sequence.
     * * `field_type` - Data type of the parameter that that MongoDB Cloud uses to partition data. Partition parameters of type UUID must be of binary subtype 4. MongoDB Cloud skips partition parameters of type UUID with subtype 3. Valid values: `date`, `int`, `long`, `objectId`, `string`, `uuid`.
     * 
     */
    public static CompletableFuture<GetOnlineArchivesInvokeResult> getOnlineArchivesPlain(GetOnlineArchivesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getOnlineArchives:getOnlineArchives", TypeShape.of(GetOnlineArchivesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.OrgInvitation` describes an invitation for a user to join an Atlas organization.
     * 
     */
    public static Output<GetOrgInvitationResult> getOrgInvitation(GetOrgInvitationArgs args) {
        return getOrgInvitation(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.OrgInvitation` describes an invitation for a user to join an Atlas organization.
     * 
     */
    public static CompletableFuture<GetOrgInvitationResult> getOrgInvitationPlain(GetOrgInvitationPlainArgs args) {
        return getOrgInvitationPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.OrgInvitation` describes an invitation for a user to join an Atlas organization.
     * 
     */
    public static Output<GetOrgInvitationResult> getOrgInvitation(GetOrgInvitationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getOrgInvitation:getOrgInvitation", TypeShape.of(GetOrgInvitationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.OrgInvitation` describes an invitation for a user to join an Atlas organization.
     * 
     */
    public static CompletableFuture<GetOrgInvitationResult> getOrgInvitationPlain(GetOrgInvitationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getOrgInvitation:getOrgInvitation", TypeShape.of(GetOrgInvitationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Organization` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * 
     * ### Using project_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .orgId("<org_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args) {
        return getOrganization(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Organization` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * 
     * ### Using project_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .orgId("<org_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args) {
        return getOrganizationPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Organization` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * 
     * ### Using project_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .orgId("<org_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetOrganizationResult> getOrganization(GetOrganizationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Organization` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * 
     * ### Using project_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganization(GetOrganizationArgs.builder()
     *             .orgId("<org_id>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetOrganizationResult> getOrganizationPlain(GetOrganizationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getOrganization:getOrganization", TypeShape.of(GetOrganizationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getOrganizations` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganizations(GetOrganizationsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetOrganizationsInvokeResult> getOrganizations() {
        return getOrganizations(GetOrganizationsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getOrganizations` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganizations(GetOrganizationsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetOrganizationsInvokeResult> getOrganizationsPlain() {
        return getOrganizationsPlain(GetOrganizationsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getOrganizations` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganizations(GetOrganizationsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetOrganizationsInvokeResult> getOrganizations(GetOrganizationsArgs args) {
        return getOrganizations(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getOrganizations` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganizations(GetOrganizationsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetOrganizationsInvokeResult> getOrganizationsPlain(GetOrganizationsPlainArgs args) {
        return getOrganizationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getOrganizations` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganizations(GetOrganizationsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetOrganizationsInvokeResult> getOrganizations(GetOrganizationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getOrganizations:getOrganizations", TypeShape.of(GetOrganizationsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getOrganizations` describe all MongoDB Atlas Organizations. This represents organizations that have been created.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetOrganizationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getOrganizations(GetOrganizationsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetOrganizationsInvokeResult> getOrganizationsPlain(GetOrganizationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getOrganizations:getOrganizations", TypeShape.of(GetOrganizationsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `private_endpoint_regional_mode` describe a Private Endpoint Regional Mode. This represents a Private Endpoint Regional Mode Connection that wants to retrieve settings of an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static Output<GetPrivateEndpointRegionalModeResult> getPrivateEndpointRegionalMode(GetPrivateEndpointRegionalModeArgs args) {
        return getPrivateEndpointRegionalMode(args, InvokeOptions.Empty);
    }
    /**
     * `private_endpoint_regional_mode` describe a Private Endpoint Regional Mode. This represents a Private Endpoint Regional Mode Connection that wants to retrieve settings of an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static CompletableFuture<GetPrivateEndpointRegionalModeResult> getPrivateEndpointRegionalModePlain(GetPrivateEndpointRegionalModePlainArgs args) {
        return getPrivateEndpointRegionalModePlain(args, InvokeOptions.Empty);
    }
    /**
     * `private_endpoint_regional_mode` describe a Private Endpoint Regional Mode. This represents a Private Endpoint Regional Mode Connection that wants to retrieve settings of an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static Output<GetPrivateEndpointRegionalModeResult> getPrivateEndpointRegionalMode(GetPrivateEndpointRegionalModeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivateEndpointRegionalMode:getPrivateEndpointRegionalMode", TypeShape.of(GetPrivateEndpointRegionalModeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `private_endpoint_regional_mode` describe a Private Endpoint Regional Mode. This represents a Private Endpoint Regional Mode Connection that wants to retrieve settings of an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     */
    public static CompletableFuture<GetPrivateEndpointRegionalModeResult> getPrivateEndpointRegionalModePlain(GetPrivateEndpointRegionalModePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivateEndpointRegionalMode:getPrivateEndpointRegionalMode", TypeShape.of(GetPrivateEndpointRegionalModeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.PrivateLinkEndpoint` describe a Private Endpoint. This represents a Private Endpoint Connection to retrieve details regarding a private endpoint by id in an Atlas project
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpoint;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPrivateLinkEndpoint = new PrivateLinkEndpoint("testPrivateLinkEndpoint", PrivateLinkEndpointArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .providerName("AWS")
     *             .region("US_EAST_1")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivateLinkEndpoint(GetPrivateLinkEndpointArgs.builder()
     *             .projectId(testPrivateLinkEndpoint.projectId())
     *             .privateLinkId(testPrivateLinkEndpoint.privateLinkId())
     *             .providerName("AWS")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Available complete examples
     * - Setup private connection to a MongoDB Atlas Cluster with AWS VPC
     * 
     */
    public static Output<GetPrivateLinkEndpointResult> getPrivateLinkEndpoint(GetPrivateLinkEndpointArgs args) {
        return getPrivateLinkEndpoint(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.PrivateLinkEndpoint` describe a Private Endpoint. This represents a Private Endpoint Connection to retrieve details regarding a private endpoint by id in an Atlas project
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpoint;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPrivateLinkEndpoint = new PrivateLinkEndpoint("testPrivateLinkEndpoint", PrivateLinkEndpointArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .providerName("AWS")
     *             .region("US_EAST_1")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivateLinkEndpoint(GetPrivateLinkEndpointArgs.builder()
     *             .projectId(testPrivateLinkEndpoint.projectId())
     *             .privateLinkId(testPrivateLinkEndpoint.privateLinkId())
     *             .providerName("AWS")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Available complete examples
     * - Setup private connection to a MongoDB Atlas Cluster with AWS VPC
     * 
     */
    public static CompletableFuture<GetPrivateLinkEndpointResult> getPrivateLinkEndpointPlain(GetPrivateLinkEndpointPlainArgs args) {
        return getPrivateLinkEndpointPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.PrivateLinkEndpoint` describe a Private Endpoint. This represents a Private Endpoint Connection to retrieve details regarding a private endpoint by id in an Atlas project
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpoint;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPrivateLinkEndpoint = new PrivateLinkEndpoint("testPrivateLinkEndpoint", PrivateLinkEndpointArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .providerName("AWS")
     *             .region("US_EAST_1")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivateLinkEndpoint(GetPrivateLinkEndpointArgs.builder()
     *             .projectId(testPrivateLinkEndpoint.projectId())
     *             .privateLinkId(testPrivateLinkEndpoint.privateLinkId())
     *             .providerName("AWS")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Available complete examples
     * - Setup private connection to a MongoDB Atlas Cluster with AWS VPC
     * 
     */
    public static Output<GetPrivateLinkEndpointResult> getPrivateLinkEndpoint(GetPrivateLinkEndpointArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivateLinkEndpoint:getPrivateLinkEndpoint", TypeShape.of(GetPrivateLinkEndpointResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.PrivateLinkEndpoint` describe a Private Endpoint. This represents a Private Endpoint Connection to retrieve details regarding a private endpoint by id in an Atlas project
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpoint;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPrivateLinkEndpoint = new PrivateLinkEndpoint("testPrivateLinkEndpoint", PrivateLinkEndpointArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .providerName("AWS")
     *             .region("US_EAST_1")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivateLinkEndpoint(GetPrivateLinkEndpointArgs.builder()
     *             .projectId(testPrivateLinkEndpoint.projectId())
     *             .privateLinkId(testPrivateLinkEndpoint.privateLinkId())
     *             .providerName("AWS")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Available complete examples
     * - Setup private connection to a MongoDB Atlas Cluster with AWS VPC
     * 
     */
    public static CompletableFuture<GetPrivateLinkEndpointResult> getPrivateLinkEndpointPlain(GetPrivateLinkEndpointPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivateLinkEndpoint:getPrivateLinkEndpoint", TypeShape.of(GetPrivateLinkEndpointResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.PrivateLinkEndpointService` describe a Private Endpoint Link. This represents a Private Endpoint Link Connection that wants to retrieve details in an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpoint;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointArgs;
     * import com.pulumi.aws.vpcEndpoint;
     * import com.pulumi.aws.VpcEndpointArgs;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointService;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointServiceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPrivateLinkEndpoint = new PrivateLinkEndpoint("testPrivateLinkEndpoint", PrivateLinkEndpointArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .providerName("AWS")
     *             .region("US_EAST_1")
     *             .build());
     * 
     *         var ptfeService = new VpcEndpoint("ptfeService", VpcEndpointArgs.builder()
     *             .vpcId("vpc-7fc0a543")
     *             .serviceName(testPrivateLinkEndpoint.endpointServiceName())
     *             .vpcEndpointType("Interface")
     *             .subnetIds("subnet-de0406d2")
     *             .securityGroupIds("sg-3f238186")
     *             .build());
     * 
     *         var testPrivateLinkEndpointService = new PrivateLinkEndpointService("testPrivateLinkEndpointService", PrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpoint.projectId())
     *             .privateLinkId(testPrivateLinkEndpoint.privateLinkId())
     *             .endpointServiceId(ptfeService.id())
     *             .providerName("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivateLinkEndpointService(GetPrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpointService.projectId())
     *             .privateLinkId(testPrivateLinkEndpointService.privateLinkId())
     *             .interfaceEndpointId(testPrivateLinkEndpointService.interfaceEndpointId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example with Azure
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpoint;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointArgs;
     * import com.pulumi.azurerm.privateEndpoint;
     * import com.pulumi.azurerm.PrivateEndpointArgs;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointService;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointServiceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPrivateLinkEndpoint = new PrivateLinkEndpoint("testPrivateLinkEndpoint", PrivateLinkEndpointArgs.builder()
     *             .projectId(projectId)
     *             .providerName("AZURE")
     *             .region("eastus2")
     *             .build());
     * 
     *         var testPrivateEndpoint = new PrivateEndpoint("testPrivateEndpoint", PrivateEndpointArgs.builder()
     *             .name("endpoint-test")
     *             .location(testAzurermResourceGroup.location())
     *             .resourceGroupName(resourceGroupName)
     *             .subnetId(testAzurermSubnet.id())
     *             .privateServiceConnection(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *             .build());
     * 
     *         var testPrivateLinkEndpointService = new PrivateLinkEndpointService("testPrivateLinkEndpointService", PrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpoint.projectId())
     *             .privateLinkId(testPrivateLinkEndpoint.privateLinkId())
     *             .endpointServiceId(testPrivateEndpoint.id())
     *             .privateEndpointIpAddress(testPrivateEndpoint.privateServiceConnection()[0].privateIpAddress())
     *             .providerName("AZURE")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivateLinkEndpointService(GetPrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpointService.projectId())
     *             .privateLinkId(testPrivateLinkEndpointService.privateLinkId())
     *             .interfaceEndpointId(testPrivateLinkEndpointService.interfaceEndpointId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Available complete examples
     * - Setup private connection to a MongoDB Atlas Cluster with AWS VPC
     * 
     */
    public static Output<GetPrivateLinkEndpointServiceResult> getPrivateLinkEndpointService(GetPrivateLinkEndpointServiceArgs args) {
        return getPrivateLinkEndpointService(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.PrivateLinkEndpointService` describe a Private Endpoint Link. This represents a Private Endpoint Link Connection that wants to retrieve details in an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpoint;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointArgs;
     * import com.pulumi.aws.vpcEndpoint;
     * import com.pulumi.aws.VpcEndpointArgs;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointService;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointServiceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPrivateLinkEndpoint = new PrivateLinkEndpoint("testPrivateLinkEndpoint", PrivateLinkEndpointArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .providerName("AWS")
     *             .region("US_EAST_1")
     *             .build());
     * 
     *         var ptfeService = new VpcEndpoint("ptfeService", VpcEndpointArgs.builder()
     *             .vpcId("vpc-7fc0a543")
     *             .serviceName(testPrivateLinkEndpoint.endpointServiceName())
     *             .vpcEndpointType("Interface")
     *             .subnetIds("subnet-de0406d2")
     *             .securityGroupIds("sg-3f238186")
     *             .build());
     * 
     *         var testPrivateLinkEndpointService = new PrivateLinkEndpointService("testPrivateLinkEndpointService", PrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpoint.projectId())
     *             .privateLinkId(testPrivateLinkEndpoint.privateLinkId())
     *             .endpointServiceId(ptfeService.id())
     *             .providerName("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivateLinkEndpointService(GetPrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpointService.projectId())
     *             .privateLinkId(testPrivateLinkEndpointService.privateLinkId())
     *             .interfaceEndpointId(testPrivateLinkEndpointService.interfaceEndpointId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example with Azure
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpoint;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointArgs;
     * import com.pulumi.azurerm.privateEndpoint;
     * import com.pulumi.azurerm.PrivateEndpointArgs;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointService;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointServiceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPrivateLinkEndpoint = new PrivateLinkEndpoint("testPrivateLinkEndpoint", PrivateLinkEndpointArgs.builder()
     *             .projectId(projectId)
     *             .providerName("AZURE")
     *             .region("eastus2")
     *             .build());
     * 
     *         var testPrivateEndpoint = new PrivateEndpoint("testPrivateEndpoint", PrivateEndpointArgs.builder()
     *             .name("endpoint-test")
     *             .location(testAzurermResourceGroup.location())
     *             .resourceGroupName(resourceGroupName)
     *             .subnetId(testAzurermSubnet.id())
     *             .privateServiceConnection(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *             .build());
     * 
     *         var testPrivateLinkEndpointService = new PrivateLinkEndpointService("testPrivateLinkEndpointService", PrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpoint.projectId())
     *             .privateLinkId(testPrivateLinkEndpoint.privateLinkId())
     *             .endpointServiceId(testPrivateEndpoint.id())
     *             .privateEndpointIpAddress(testPrivateEndpoint.privateServiceConnection()[0].privateIpAddress())
     *             .providerName("AZURE")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivateLinkEndpointService(GetPrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpointService.projectId())
     *             .privateLinkId(testPrivateLinkEndpointService.privateLinkId())
     *             .interfaceEndpointId(testPrivateLinkEndpointService.interfaceEndpointId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Available complete examples
     * - Setup private connection to a MongoDB Atlas Cluster with AWS VPC
     * 
     */
    public static CompletableFuture<GetPrivateLinkEndpointServiceResult> getPrivateLinkEndpointServicePlain(GetPrivateLinkEndpointServicePlainArgs args) {
        return getPrivateLinkEndpointServicePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.PrivateLinkEndpointService` describe a Private Endpoint Link. This represents a Private Endpoint Link Connection that wants to retrieve details in an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpoint;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointArgs;
     * import com.pulumi.aws.vpcEndpoint;
     * import com.pulumi.aws.VpcEndpointArgs;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointService;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointServiceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPrivateLinkEndpoint = new PrivateLinkEndpoint("testPrivateLinkEndpoint", PrivateLinkEndpointArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .providerName("AWS")
     *             .region("US_EAST_1")
     *             .build());
     * 
     *         var ptfeService = new VpcEndpoint("ptfeService", VpcEndpointArgs.builder()
     *             .vpcId("vpc-7fc0a543")
     *             .serviceName(testPrivateLinkEndpoint.endpointServiceName())
     *             .vpcEndpointType("Interface")
     *             .subnetIds("subnet-de0406d2")
     *             .securityGroupIds("sg-3f238186")
     *             .build());
     * 
     *         var testPrivateLinkEndpointService = new PrivateLinkEndpointService("testPrivateLinkEndpointService", PrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpoint.projectId())
     *             .privateLinkId(testPrivateLinkEndpoint.privateLinkId())
     *             .endpointServiceId(ptfeService.id())
     *             .providerName("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivateLinkEndpointService(GetPrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpointService.projectId())
     *             .privateLinkId(testPrivateLinkEndpointService.privateLinkId())
     *             .interfaceEndpointId(testPrivateLinkEndpointService.interfaceEndpointId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example with Azure
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpoint;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointArgs;
     * import com.pulumi.azurerm.privateEndpoint;
     * import com.pulumi.azurerm.PrivateEndpointArgs;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointService;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointServiceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPrivateLinkEndpoint = new PrivateLinkEndpoint("testPrivateLinkEndpoint", PrivateLinkEndpointArgs.builder()
     *             .projectId(projectId)
     *             .providerName("AZURE")
     *             .region("eastus2")
     *             .build());
     * 
     *         var testPrivateEndpoint = new PrivateEndpoint("testPrivateEndpoint", PrivateEndpointArgs.builder()
     *             .name("endpoint-test")
     *             .location(testAzurermResourceGroup.location())
     *             .resourceGroupName(resourceGroupName)
     *             .subnetId(testAzurermSubnet.id())
     *             .privateServiceConnection(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *             .build());
     * 
     *         var testPrivateLinkEndpointService = new PrivateLinkEndpointService("testPrivateLinkEndpointService", PrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpoint.projectId())
     *             .privateLinkId(testPrivateLinkEndpoint.privateLinkId())
     *             .endpointServiceId(testPrivateEndpoint.id())
     *             .privateEndpointIpAddress(testPrivateEndpoint.privateServiceConnection()[0].privateIpAddress())
     *             .providerName("AZURE")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivateLinkEndpointService(GetPrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpointService.projectId())
     *             .privateLinkId(testPrivateLinkEndpointService.privateLinkId())
     *             .interfaceEndpointId(testPrivateLinkEndpointService.interfaceEndpointId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Available complete examples
     * - Setup private connection to a MongoDB Atlas Cluster with AWS VPC
     * 
     */
    public static Output<GetPrivateLinkEndpointServiceResult> getPrivateLinkEndpointService(GetPrivateLinkEndpointServiceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivateLinkEndpointService:getPrivateLinkEndpointService", TypeShape.of(GetPrivateLinkEndpointServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.PrivateLinkEndpointService` describe a Private Endpoint Link. This represents a Private Endpoint Link Connection that wants to retrieve details in an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpoint;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointArgs;
     * import com.pulumi.aws.vpcEndpoint;
     * import com.pulumi.aws.VpcEndpointArgs;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointService;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointServiceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPrivateLinkEndpoint = new PrivateLinkEndpoint("testPrivateLinkEndpoint", PrivateLinkEndpointArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .providerName("AWS")
     *             .region("US_EAST_1")
     *             .build());
     * 
     *         var ptfeService = new VpcEndpoint("ptfeService", VpcEndpointArgs.builder()
     *             .vpcId("vpc-7fc0a543")
     *             .serviceName(testPrivateLinkEndpoint.endpointServiceName())
     *             .vpcEndpointType("Interface")
     *             .subnetIds("subnet-de0406d2")
     *             .securityGroupIds("sg-3f238186")
     *             .build());
     * 
     *         var testPrivateLinkEndpointService = new PrivateLinkEndpointService("testPrivateLinkEndpointService", PrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpoint.projectId())
     *             .privateLinkId(testPrivateLinkEndpoint.privateLinkId())
     *             .endpointServiceId(ptfeService.id())
     *             .providerName("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivateLinkEndpointService(GetPrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpointService.projectId())
     *             .privateLinkId(testPrivateLinkEndpointService.privateLinkId())
     *             .interfaceEndpointId(testPrivateLinkEndpointService.interfaceEndpointId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example with Azure
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpoint;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointArgs;
     * import com.pulumi.azurerm.privateEndpoint;
     * import com.pulumi.azurerm.PrivateEndpointArgs;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointService;
     * import com.pulumi.mongodbatlas.PrivateLinkEndpointServiceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivateLinkEndpointServiceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPrivateLinkEndpoint = new PrivateLinkEndpoint("testPrivateLinkEndpoint", PrivateLinkEndpointArgs.builder()
     *             .projectId(projectId)
     *             .providerName("AZURE")
     *             .region("eastus2")
     *             .build());
     * 
     *         var testPrivateEndpoint = new PrivateEndpoint("testPrivateEndpoint", PrivateEndpointArgs.builder()
     *             .name("endpoint-test")
     *             .location(testAzurermResourceGroup.location())
     *             .resourceGroupName(resourceGroupName)
     *             .subnetId(testAzurermSubnet.id())
     *             .privateServiceConnection(%!v(PANIC=Format method: runtime error: invalid memory address or nil pointer dereference))
     *             .build());
     * 
     *         var testPrivateLinkEndpointService = new PrivateLinkEndpointService("testPrivateLinkEndpointService", PrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpoint.projectId())
     *             .privateLinkId(testPrivateLinkEndpoint.privateLinkId())
     *             .endpointServiceId(testPrivateEndpoint.id())
     *             .privateEndpointIpAddress(testPrivateEndpoint.privateServiceConnection()[0].privateIpAddress())
     *             .providerName("AZURE")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivateLinkEndpointService(GetPrivateLinkEndpointServiceArgs.builder()
     *             .projectId(testPrivateLinkEndpointService.projectId())
     *             .privateLinkId(testPrivateLinkEndpointService.privateLinkId())
     *             .interfaceEndpointId(testPrivateLinkEndpointService.interfaceEndpointId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Available complete examples
     * - Setup private connection to a MongoDB Atlas Cluster with AWS VPC
     * 
     */
    public static CompletableFuture<GetPrivateLinkEndpointServiceResult> getPrivateLinkEndpointServicePlain(GetPrivateLinkEndpointServicePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivateLinkEndpointService:getPrivateLinkEndpointService", TypeShape.of(GetPrivateLinkEndpointServiceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchive` describes a Private Endpoint Service resource for Data Federation and Online Archive.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchive;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var atlas_project = new Project("atlas-project", ProjectArgs.builder()
     *             .orgId(atlasOrgId)
     *             .name(atlasProjectName)
     *             .build());
     * 
     *         var test = new PrivatelinkEndpointServiceDataFederationOnlineArchive("test", PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs.builder()
     *             .projectId(atlas_project.id())
     *             .endpointId("vpce-046cf43c79424d4c9")
     *             .providerName("AWS")
     *             .comment("Test")
     *             .region("US_EAST_1")
     *             .customerEndpointDnsName("vpce-046cf43c79424d4c9-nmls2y9k.vpce-svc-0824460b72e1a420e.us-east-1.vpce.amazonaws.com")
     *             .build());
     * 
     *         final var testDataSource = MongodbatlasFunctions.getPrivatelinkEndpointServiceDataFederationOnlineArchive(GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs.builder()
     *             .projectId(atlas_project.id())
     *             .endpointId(test.endpointId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult> getPrivatelinkEndpointServiceDataFederationOnlineArchive(GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs args) {
        return getPrivatelinkEndpointServiceDataFederationOnlineArchive(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchive` describes a Private Endpoint Service resource for Data Federation and Online Archive.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchive;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var atlas_project = new Project("atlas-project", ProjectArgs.builder()
     *             .orgId(atlasOrgId)
     *             .name(atlasProjectName)
     *             .build());
     * 
     *         var test = new PrivatelinkEndpointServiceDataFederationOnlineArchive("test", PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs.builder()
     *             .projectId(atlas_project.id())
     *             .endpointId("vpce-046cf43c79424d4c9")
     *             .providerName("AWS")
     *             .comment("Test")
     *             .region("US_EAST_1")
     *             .customerEndpointDnsName("vpce-046cf43c79424d4c9-nmls2y9k.vpce-svc-0824460b72e1a420e.us-east-1.vpce.amazonaws.com")
     *             .build());
     * 
     *         final var testDataSource = MongodbatlasFunctions.getPrivatelinkEndpointServiceDataFederationOnlineArchive(GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs.builder()
     *             .projectId(atlas_project.id())
     *             .endpointId(test.endpointId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult> getPrivatelinkEndpointServiceDataFederationOnlineArchivePlain(GetPrivatelinkEndpointServiceDataFederationOnlineArchivePlainArgs args) {
        return getPrivatelinkEndpointServiceDataFederationOnlineArchivePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchive` describes a Private Endpoint Service resource for Data Federation and Online Archive.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchive;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var atlas_project = new Project("atlas-project", ProjectArgs.builder()
     *             .orgId(atlasOrgId)
     *             .name(atlasProjectName)
     *             .build());
     * 
     *         var test = new PrivatelinkEndpointServiceDataFederationOnlineArchive("test", PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs.builder()
     *             .projectId(atlas_project.id())
     *             .endpointId("vpce-046cf43c79424d4c9")
     *             .providerName("AWS")
     *             .comment("Test")
     *             .region("US_EAST_1")
     *             .customerEndpointDnsName("vpce-046cf43c79424d4c9-nmls2y9k.vpce-svc-0824460b72e1a420e.us-east-1.vpce.amazonaws.com")
     *             .build());
     * 
     *         final var testDataSource = MongodbatlasFunctions.getPrivatelinkEndpointServiceDataFederationOnlineArchive(GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs.builder()
     *             .projectId(atlas_project.id())
     *             .endpointId(test.endpointId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult> getPrivatelinkEndpointServiceDataFederationOnlineArchive(GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivatelinkEndpointServiceDataFederationOnlineArchive:getPrivatelinkEndpointServiceDataFederationOnlineArchive", TypeShape.of(GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchive` describes a Private Endpoint Service resource for Data Federation and Online Archive.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchive;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var atlas_project = new Project("atlas-project", ProjectArgs.builder()
     *             .orgId(atlasOrgId)
     *             .name(atlasProjectName)
     *             .build());
     * 
     *         var test = new PrivatelinkEndpointServiceDataFederationOnlineArchive("test", PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs.builder()
     *             .projectId(atlas_project.id())
     *             .endpointId("vpce-046cf43c79424d4c9")
     *             .providerName("AWS")
     *             .comment("Test")
     *             .region("US_EAST_1")
     *             .customerEndpointDnsName("vpce-046cf43c79424d4c9-nmls2y9k.vpce-svc-0824460b72e1a420e.us-east-1.vpce.amazonaws.com")
     *             .build());
     * 
     *         final var testDataSource = MongodbatlasFunctions.getPrivatelinkEndpointServiceDataFederationOnlineArchive(GetPrivatelinkEndpointServiceDataFederationOnlineArchiveArgs.builder()
     *             .projectId(atlas_project.id())
     *             .endpointId(test.endpointId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult> getPrivatelinkEndpointServiceDataFederationOnlineArchivePlain(GetPrivatelinkEndpointServiceDataFederationOnlineArchivePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivatelinkEndpointServiceDataFederationOnlineArchive:getPrivatelinkEndpointServiceDataFederationOnlineArchive", TypeShape.of(GetPrivatelinkEndpointServiceDataFederationOnlineArchiveResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getPrivatelinkEndpointServiceDataFederationOnlineArchives` describes Private Endpoint Service resources for Data Federation and Online Archive.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchive;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var atlas_project = new Project("atlas-project", ProjectArgs.builder()
     *             .orgId(atlasOrgId)
     *             .name(atlasProjectName)
     *             .build());
     * 
     *         var test = new PrivatelinkEndpointServiceDataFederationOnlineArchive("test", PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs.builder()
     *             .projectId(atlas_project.id())
     *             .endpointId("vpce-046cf43c79424d4c9")
     *             .providerName("AWS")
     *             .comment("Test")
     *             .region("US_EAST_1")
     *             .customerEndpointDnsName("vpce-046cf43c79424d4c9-nmls2y9k.vpce-svc-0824460b72e1a420e.us-east-1.vpce.amazonaws.com")
     *             .build());
     * 
     *         final var testDataSource = MongodbatlasFunctions.getPrivatelinkEndpointServiceDataFederationOnlineArchives(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs.builder()
     *             .projectId(atlas_project.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult> getPrivatelinkEndpointServiceDataFederationOnlineArchives(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs args) {
        return getPrivatelinkEndpointServiceDataFederationOnlineArchives(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getPrivatelinkEndpointServiceDataFederationOnlineArchives` describes Private Endpoint Service resources for Data Federation and Online Archive.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchive;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var atlas_project = new Project("atlas-project", ProjectArgs.builder()
     *             .orgId(atlasOrgId)
     *             .name(atlasProjectName)
     *             .build());
     * 
     *         var test = new PrivatelinkEndpointServiceDataFederationOnlineArchive("test", PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs.builder()
     *             .projectId(atlas_project.id())
     *             .endpointId("vpce-046cf43c79424d4c9")
     *             .providerName("AWS")
     *             .comment("Test")
     *             .region("US_EAST_1")
     *             .customerEndpointDnsName("vpce-046cf43c79424d4c9-nmls2y9k.vpce-svc-0824460b72e1a420e.us-east-1.vpce.amazonaws.com")
     *             .build());
     * 
     *         final var testDataSource = MongodbatlasFunctions.getPrivatelinkEndpointServiceDataFederationOnlineArchives(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs.builder()
     *             .projectId(atlas_project.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult> getPrivatelinkEndpointServiceDataFederationOnlineArchivesPlain(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesPlainArgs args) {
        return getPrivatelinkEndpointServiceDataFederationOnlineArchivesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getPrivatelinkEndpointServiceDataFederationOnlineArchives` describes Private Endpoint Service resources for Data Federation and Online Archive.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchive;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var atlas_project = new Project("atlas-project", ProjectArgs.builder()
     *             .orgId(atlasOrgId)
     *             .name(atlasProjectName)
     *             .build());
     * 
     *         var test = new PrivatelinkEndpointServiceDataFederationOnlineArchive("test", PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs.builder()
     *             .projectId(atlas_project.id())
     *             .endpointId("vpce-046cf43c79424d4c9")
     *             .providerName("AWS")
     *             .comment("Test")
     *             .region("US_EAST_1")
     *             .customerEndpointDnsName("vpce-046cf43c79424d4c9-nmls2y9k.vpce-svc-0824460b72e1a420e.us-east-1.vpce.amazonaws.com")
     *             .build());
     * 
     *         final var testDataSource = MongodbatlasFunctions.getPrivatelinkEndpointServiceDataFederationOnlineArchives(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs.builder()
     *             .projectId(atlas_project.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult> getPrivatelinkEndpointServiceDataFederationOnlineArchives(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivatelinkEndpointServiceDataFederationOnlineArchives:getPrivatelinkEndpointServiceDataFederationOnlineArchives", TypeShape.of(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getPrivatelinkEndpointServiceDataFederationOnlineArchives` describes Private Endpoint Service resources for Data Federation and Online Archive.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchive;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var atlas_project = new Project("atlas-project", ProjectArgs.builder()
     *             .orgId(atlasOrgId)
     *             .name(atlasProjectName)
     *             .build());
     * 
     *         var test = new PrivatelinkEndpointServiceDataFederationOnlineArchive("test", PrivatelinkEndpointServiceDataFederationOnlineArchiveArgs.builder()
     *             .projectId(atlas_project.id())
     *             .endpointId("vpce-046cf43c79424d4c9")
     *             .providerName("AWS")
     *             .comment("Test")
     *             .region("US_EAST_1")
     *             .customerEndpointDnsName("vpce-046cf43c79424d4c9-nmls2y9k.vpce-svc-0824460b72e1a420e.us-east-1.vpce.amazonaws.com")
     *             .build());
     * 
     *         final var testDataSource = MongodbatlasFunctions.getPrivatelinkEndpointServiceDataFederationOnlineArchives(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesArgs.builder()
     *             .projectId(atlas_project.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult> getPrivatelinkEndpointServiceDataFederationOnlineArchivesPlain(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivatelinkEndpointServiceDataFederationOnlineArchives:getPrivatelinkEndpointServiceDataFederationOnlineArchives", TypeShape.of(GetPrivatelinkEndpointServiceDataFederationOnlineArchivesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `privatelink_endpoint_service_serverless` Provides a Serverless PrivateLink Endpoint Service resource.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AWS")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST_1")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointServiceServerless(GetPrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AWS")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example with AZURE
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AZURE")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AZURE")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointServiceServerless(GetPrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AZURE")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Available complete examples
     * - Setup private connection to a MongoDB Atlas Serverless Instance with AWS VPC
     * 
     */
    public static Output<GetPrivatelinkEndpointServiceServerlessResult> getPrivatelinkEndpointServiceServerless(GetPrivatelinkEndpointServiceServerlessArgs args) {
        return getPrivatelinkEndpointServiceServerless(args, InvokeOptions.Empty);
    }
    /**
     * `privatelink_endpoint_service_serverless` Provides a Serverless PrivateLink Endpoint Service resource.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AWS")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST_1")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointServiceServerless(GetPrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AWS")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example with AZURE
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AZURE")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AZURE")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointServiceServerless(GetPrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AZURE")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Available complete examples
     * - Setup private connection to a MongoDB Atlas Serverless Instance with AWS VPC
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointServiceServerlessResult> getPrivatelinkEndpointServiceServerlessPlain(GetPrivatelinkEndpointServiceServerlessPlainArgs args) {
        return getPrivatelinkEndpointServiceServerlessPlain(args, InvokeOptions.Empty);
    }
    /**
     * `privatelink_endpoint_service_serverless` Provides a Serverless PrivateLink Endpoint Service resource.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AWS")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST_1")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointServiceServerless(GetPrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AWS")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example with AZURE
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AZURE")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AZURE")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointServiceServerless(GetPrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AZURE")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Available complete examples
     * - Setup private connection to a MongoDB Atlas Serverless Instance with AWS VPC
     * 
     */
    public static Output<GetPrivatelinkEndpointServiceServerlessResult> getPrivatelinkEndpointServiceServerless(GetPrivatelinkEndpointServiceServerlessArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivatelinkEndpointServiceServerless:getPrivatelinkEndpointServiceServerless", TypeShape.of(GetPrivatelinkEndpointServiceServerlessResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `privatelink_endpoint_service_serverless` Provides a Serverless PrivateLink Endpoint Service resource.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AWS")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST_1")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AWS")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointServiceServerless(GetPrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AWS")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example with AZURE
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AZURE")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AZURE")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointServiceServerless(GetPrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AZURE")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Available complete examples
     * - Setup private connection to a MongoDB Atlas Serverless Instance with AWS VPC
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointServiceServerlessResult> getPrivatelinkEndpointServiceServerlessPlain(GetPrivatelinkEndpointServiceServerlessPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivatelinkEndpointServiceServerless:getPrivatelinkEndpointServiceServerless", TypeShape.of(GetPrivatelinkEndpointServiceServerlessResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `privatelink_endpoints_service_serverless` Describes the list of all Serverless PrivateLink Endpoint Service resource.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AWS")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST_1")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AWS")
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AWS")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example with AZURE
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AZURE")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AZURE")
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AZURE")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrivatelinkEndpointsServiceServerlessInvokeResult> getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs args) {
        return getPrivatelinkEndpointsServiceServerless(args, InvokeOptions.Empty);
    }
    /**
     * `privatelink_endpoints_service_serverless` Describes the list of all Serverless PrivateLink Endpoint Service resource.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AWS")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST_1")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AWS")
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AWS")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example with AZURE
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AZURE")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AZURE")
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AZURE")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointsServiceServerlessInvokeResult> getPrivatelinkEndpointsServiceServerlessPlain(GetPrivatelinkEndpointsServiceServerlessPlainArgs args) {
        return getPrivatelinkEndpointsServiceServerlessPlain(args, InvokeOptions.Empty);
    }
    /**
     * `privatelink_endpoints_service_serverless` Describes the list of all Serverless PrivateLink Endpoint Service resource.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AWS")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST_1")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AWS")
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AWS")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example with AZURE
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AZURE")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AZURE")
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AZURE")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPrivatelinkEndpointsServiceServerlessInvokeResult> getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPrivatelinkEndpointsServiceServerless:getPrivatelinkEndpointsServiceServerless", TypeShape.of(GetPrivatelinkEndpointsServiceServerlessInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `privatelink_endpoints_service_serverless` Describes the list of all Serverless PrivateLink Endpoint Service resource.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example with AWS
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AWS")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST_1")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AWS")
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AWS")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ## Example with AZURE
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ServerlessInstance;
     * import com.pulumi.mongodbatlas.ServerlessInstanceArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPrivatelinkEndpointsServiceServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServerlessArgs;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerless;
     * import com.pulumi.mongodbatlas.PrivatelinkEndpointServiceServerlessArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testServerlessInstance = new ServerlessInstance("testServerlessInstance", ServerlessInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .name("test-db")
     *             .providerSettingsBackingProviderName("AZURE")
     *             .providerSettingsProviderName("SERVERLESS")
     *             .providerSettingsRegionName("US_EAST")
     *             .continuousBackupEnabled(true)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPrivatelinkEndpointsServiceServerless(GetPrivatelinkEndpointsServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .build());
     * 
     *         var testPrivatelinkEndpointServerless = new PrivatelinkEndpointServerless("testPrivatelinkEndpointServerless", PrivatelinkEndpointServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName(testServerlessInstance.name())
     *             .providerName("AZURE")
     *             .build());
     * 
     *         var testPrivatelinkEndpointServiceServerless = new PrivatelinkEndpointServiceServerless("testPrivatelinkEndpointServiceServerless", PrivatelinkEndpointServiceServerlessArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("test-db")
     *             .endpointId(testPrivatelinkEndpointServerless.endpointId())
     *             .providerName("AZURE")
     *             .comment("New serverless endpoint")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPrivatelinkEndpointsServiceServerlessInvokeResult> getPrivatelinkEndpointsServiceServerlessPlain(GetPrivatelinkEndpointsServiceServerlessPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPrivatelinkEndpointsServiceServerless:getPrivatelinkEndpointsServiceServerless", TypeShape.of(GetPrivatelinkEndpointsServiceServerlessInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Using project_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testGetProject = MongodbatlasFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(testProject.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using name attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId("<ORG_ID>")
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProject(GetProjectArgs.builder()
     *             .name(testProject.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectResult> getProject() {
        return getProject(GetProjectArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Using project_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testGetProject = MongodbatlasFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(testProject.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using name attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId("<ORG_ID>")
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProject(GetProjectArgs.builder()
     *             .name(testProject.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain() {
        return getProjectPlain(GetProjectPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Using project_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testGetProject = MongodbatlasFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(testProject.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using name attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId("<ORG_ID>")
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProject(GetProjectArgs.builder()
     *             .name(testProject.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args) {
        return getProject(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Using project_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testGetProject = MongodbatlasFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(testProject.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using name attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId("<ORG_ID>")
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProject(GetProjectArgs.builder()
     *             .name(testProject.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args) {
        return getProjectPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Using project_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testGetProject = MongodbatlasFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(testProject.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using name attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId("<ORG_ID>")
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProject(GetProjectArgs.builder()
     *             .name(testProject.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectResult> getProject(GetProjectArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Project` describes a MongoDB Atlas Project. This represents a project that has been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Using project_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testGetProject = MongodbatlasFunctions.getProject(GetProjectArgs.builder()
     *             .projectId(testProject.id())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using name attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId("<ORG_ID>")
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProject(GetProjectArgs.builder()
     *             .name(testProject.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectResult> getProjectPlain(GetProjectPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getProject:getProject", TypeShape.of(GetProjectResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### Using project_id and api_key_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectApiKey;
     * import com.pulumi.mongodbatlas.ProjectApiKeyArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectApiKeyProjectAssignmentArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectApiKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectApiKey = new ProjectApiKey("testProjectApiKey", ProjectApiKeyArgs.builder()
     *             .description("Description of your API key")
     *             .projectAssignments(ProjectApiKeyProjectAssignmentArgs.builder()
     *                 .projectId("64259ee860c43338194b0f8e")
     *                 .roleNames("GROUP_READ_ONLY")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectApiKey(GetProjectApiKeyArgs.builder()
     *             .projectId("64259ee860c43338194b0f8e")
     *             .apiKeyId(testMongodbatlasApiKey.apiKeyId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectApiKeyResult> getProjectApiKey(GetProjectApiKeyArgs args) {
        return getProjectApiKey(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Using project_id and api_key_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectApiKey;
     * import com.pulumi.mongodbatlas.ProjectApiKeyArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectApiKeyProjectAssignmentArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectApiKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectApiKey = new ProjectApiKey("testProjectApiKey", ProjectApiKeyArgs.builder()
     *             .description("Description of your API key")
     *             .projectAssignments(ProjectApiKeyProjectAssignmentArgs.builder()
     *                 .projectId("64259ee860c43338194b0f8e")
     *                 .roleNames("GROUP_READ_ONLY")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectApiKey(GetProjectApiKeyArgs.builder()
     *             .projectId("64259ee860c43338194b0f8e")
     *             .apiKeyId(testMongodbatlasApiKey.apiKeyId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectApiKeyResult> getProjectApiKeyPlain(GetProjectApiKeyPlainArgs args) {
        return getProjectApiKeyPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * ### Using project_id and api_key_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectApiKey;
     * import com.pulumi.mongodbatlas.ProjectApiKeyArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectApiKeyProjectAssignmentArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectApiKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectApiKey = new ProjectApiKey("testProjectApiKey", ProjectApiKeyArgs.builder()
     *             .description("Description of your API key")
     *             .projectAssignments(ProjectApiKeyProjectAssignmentArgs.builder()
     *                 .projectId("64259ee860c43338194b0f8e")
     *                 .roleNames("GROUP_READ_ONLY")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectApiKey(GetProjectApiKeyArgs.builder()
     *             .projectId("64259ee860c43338194b0f8e")
     *             .apiKeyId(testMongodbatlasApiKey.apiKeyId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectApiKeyResult> getProjectApiKey(GetProjectApiKeyArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getProjectApiKey:getProjectApiKey", TypeShape.of(GetProjectApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * ### Using project_id and api_key_id attribute to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectApiKey;
     * import com.pulumi.mongodbatlas.ProjectApiKeyArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectApiKeyProjectAssignmentArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectApiKeyArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectApiKey = new ProjectApiKey("testProjectApiKey", ProjectApiKeyArgs.builder()
     *             .description("Description of your API key")
     *             .projectAssignments(ProjectApiKeyProjectAssignmentArgs.builder()
     *                 .projectId("64259ee860c43338194b0f8e")
     *                 .roleNames("GROUP_READ_ONLY")
     *                 .build())
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectApiKey(GetProjectApiKeyArgs.builder()
     *             .projectId("64259ee860c43338194b0f8e")
     *             .apiKeyId(testMongodbatlasApiKey.apiKeyId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectApiKeyResult> getProjectApiKeyPlain(GetProjectApiKeyPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getProjectApiKey:getProjectApiKey", TypeShape.of(GetProjectApiKeyResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectApiKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getProjectApiKeys(GetProjectApiKeysArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .projectId("32b6e34b3d91647abb20e7b8")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectApiKeysInvokeResult> getProjectApiKeys(GetProjectApiKeysArgs args) {
        return getProjectApiKeys(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectApiKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getProjectApiKeys(GetProjectApiKeysArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .projectId("32b6e34b3d91647abb20e7b8")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectApiKeysInvokeResult> getProjectApiKeysPlain(GetProjectApiKeysPlainArgs args) {
        return getProjectApiKeysPlain(args, InvokeOptions.Empty);
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectApiKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getProjectApiKeys(GetProjectApiKeysArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .projectId("32b6e34b3d91647abb20e7b8")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectApiKeysInvokeResult> getProjectApiKeys(GetProjectApiKeysArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getProjectApiKeys:getProjectApiKeys", TypeShape.of(GetProjectApiKeysInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectApiKeysArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getProjectApiKeys(GetProjectApiKeysArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .projectId("32b6e34b3d91647abb20e7b8")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectApiKeysInvokeResult> getProjectApiKeysPlain(GetProjectApiKeysPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getProjectApiKeys:getProjectApiKeys", TypeShape.of(GetProjectApiKeysInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ProjectInvitation` describes an invitation to a user to join an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find GROUP-ID in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectInvitation;
     * import com.pulumi.mongodbatlas.ProjectInvitationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectInvitationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectInvitation = new ProjectInvitation("testProjectInvitation", ProjectInvitationArgs.builder()
     *             .username("test-acc-username")
     *             .projectId("<PROJECT-ID>")
     *             .roles("GROUP_DATA_ACCESS_READ_WRITE")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectInvitation(GetProjectInvitationArgs.builder()
     *             .projectId(testProjectInvitation.projectId())
     *             .username(testProjectInvitation.username())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectInvitationResult> getProjectInvitation(GetProjectInvitationArgs args) {
        return getProjectInvitation(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ProjectInvitation` describes an invitation to a user to join an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find GROUP-ID in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectInvitation;
     * import com.pulumi.mongodbatlas.ProjectInvitationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectInvitationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectInvitation = new ProjectInvitation("testProjectInvitation", ProjectInvitationArgs.builder()
     *             .username("test-acc-username")
     *             .projectId("<PROJECT-ID>")
     *             .roles("GROUP_DATA_ACCESS_READ_WRITE")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectInvitation(GetProjectInvitationArgs.builder()
     *             .projectId(testProjectInvitation.projectId())
     *             .username(testProjectInvitation.username())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectInvitationResult> getProjectInvitationPlain(GetProjectInvitationPlainArgs args) {
        return getProjectInvitationPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ProjectInvitation` describes an invitation to a user to join an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find GROUP-ID in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectInvitation;
     * import com.pulumi.mongodbatlas.ProjectInvitationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectInvitationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectInvitation = new ProjectInvitation("testProjectInvitation", ProjectInvitationArgs.builder()
     *             .username("test-acc-username")
     *             .projectId("<PROJECT-ID>")
     *             .roles("GROUP_DATA_ACCESS_READ_WRITE")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectInvitation(GetProjectInvitationArgs.builder()
     *             .projectId(testProjectInvitation.projectId())
     *             .username(testProjectInvitation.username())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectInvitationResult> getProjectInvitation(GetProjectInvitationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getProjectInvitation:getProjectInvitation", TypeShape.of(GetProjectInvitationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ProjectInvitation` describes an invitation to a user to join an Atlas project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find GROUP-ID in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectInvitation;
     * import com.pulumi.mongodbatlas.ProjectInvitationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectInvitationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectInvitation = new ProjectInvitation("testProjectInvitation", ProjectInvitationArgs.builder()
     *             .username("test-acc-username")
     *             .projectId("<PROJECT-ID>")
     *             .roles("GROUP_DATA_ACCESS_READ_WRITE")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectInvitation(GetProjectInvitationArgs.builder()
     *             .projectId(testProjectInvitation.projectId())
     *             .username(testProjectInvitation.username())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectInvitationResult> getProjectInvitationPlain(GetProjectInvitationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getProjectInvitation:getProjectInvitation", TypeShape.of(GetProjectInvitationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ProjectIpAccessList` describes an IP Access List entry resource. The access list grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * When you remove an entry from the access list, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.
     * 
     * ## Example Usage
     * 
     * ### Using CIDR Block
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectIpAccessList;
     * import com.pulumi.mongodbatlas.ProjectIpAccessListArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectIpAccessList = new ProjectIpAccessList("testProjectIpAccessList", ProjectIpAccessListArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .cidrBlock("1.2.3.4/32")
     *             .comment("cidr block for tf acc testing")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectIpAccessList(GetProjectIpAccessListArgs.builder()
     *             .projectId(testProjectIpAccessList.projectId())
     *             .cidrBlock(testProjectIpAccessList.cidrBlock())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using IP Address
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectIpAccessList;
     * import com.pulumi.mongodbatlas.ProjectIpAccessListArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectIpAccessList = new ProjectIpAccessList("testProjectIpAccessList", ProjectIpAccessListArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .ipAddress("2.3.4.5")
     *             .comment("ip address for tf acc testing")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectIpAccessList(GetProjectIpAccessListArgs.builder()
     *             .projectId(testProjectIpAccessList.projectId())
     *             .ipAddress(testProjectIpAccessList.ipAddress())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using an AWS Security Group
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.ProjectIpAccessList;
     * import com.pulumi.mongodbatlas.ProjectIpAccessListArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer("testNetworkContainer", NetworkContainerArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .atlasCidrBlock("192.168.208.0/21")
     *             .providerName("AWS")
     *             .regionName("US_EAST_1")
     *             .build());
     * 
     *         var testNetworkPeering = new NetworkPeering("testNetworkPeering", NetworkPeeringArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .containerId(testNetworkContainer.containerId())
     *             .accepterRegionName("us-east-1")
     *             .providerName("AWS")
     *             .routeTableCidrBlock("172.31.0.0/16")
     *             .vpcId("vpc-0d93d6f69f1578bd8")
     *             .awsAccountId("232589400519")
     *             .build());
     * 
     *         var testProjectIpAccessList = new ProjectIpAccessList("testProjectIpAccessList", ProjectIpAccessListArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .awsSecurityGroup("sg-0026348ec11780bd1")
     *             .comment("TestAcc for awsSecurityGroup")
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(testNetworkPeering)
     *                 .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectIpAccessList(GetProjectIpAccessListArgs.builder()
     *             .projectId(testProjectIpAccessList.projectId())
     *             .awsSecurityGroup(testProjectIpAccessList.awsSecurityGroup())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **IMPORTANT:** In order to use AWS Security Group(s) VPC Peering must be enabled like in the above example.
     * 
     */
    public static Output<GetProjectIpAccessListResult> getProjectIpAccessList(GetProjectIpAccessListArgs args) {
        return getProjectIpAccessList(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ProjectIpAccessList` describes an IP Access List entry resource. The access list grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * When you remove an entry from the access list, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.
     * 
     * ## Example Usage
     * 
     * ### Using CIDR Block
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectIpAccessList;
     * import com.pulumi.mongodbatlas.ProjectIpAccessListArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectIpAccessList = new ProjectIpAccessList("testProjectIpAccessList", ProjectIpAccessListArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .cidrBlock("1.2.3.4/32")
     *             .comment("cidr block for tf acc testing")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectIpAccessList(GetProjectIpAccessListArgs.builder()
     *             .projectId(testProjectIpAccessList.projectId())
     *             .cidrBlock(testProjectIpAccessList.cidrBlock())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using IP Address
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectIpAccessList;
     * import com.pulumi.mongodbatlas.ProjectIpAccessListArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectIpAccessList = new ProjectIpAccessList("testProjectIpAccessList", ProjectIpAccessListArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .ipAddress("2.3.4.5")
     *             .comment("ip address for tf acc testing")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectIpAccessList(GetProjectIpAccessListArgs.builder()
     *             .projectId(testProjectIpAccessList.projectId())
     *             .ipAddress(testProjectIpAccessList.ipAddress())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using an AWS Security Group
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.ProjectIpAccessList;
     * import com.pulumi.mongodbatlas.ProjectIpAccessListArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer("testNetworkContainer", NetworkContainerArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .atlasCidrBlock("192.168.208.0/21")
     *             .providerName("AWS")
     *             .regionName("US_EAST_1")
     *             .build());
     * 
     *         var testNetworkPeering = new NetworkPeering("testNetworkPeering", NetworkPeeringArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .containerId(testNetworkContainer.containerId())
     *             .accepterRegionName("us-east-1")
     *             .providerName("AWS")
     *             .routeTableCidrBlock("172.31.0.0/16")
     *             .vpcId("vpc-0d93d6f69f1578bd8")
     *             .awsAccountId("232589400519")
     *             .build());
     * 
     *         var testProjectIpAccessList = new ProjectIpAccessList("testProjectIpAccessList", ProjectIpAccessListArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .awsSecurityGroup("sg-0026348ec11780bd1")
     *             .comment("TestAcc for awsSecurityGroup")
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(testNetworkPeering)
     *                 .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectIpAccessList(GetProjectIpAccessListArgs.builder()
     *             .projectId(testProjectIpAccessList.projectId())
     *             .awsSecurityGroup(testProjectIpAccessList.awsSecurityGroup())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **IMPORTANT:** In order to use AWS Security Group(s) VPC Peering must be enabled like in the above example.
     * 
     */
    public static CompletableFuture<GetProjectIpAccessListResult> getProjectIpAccessListPlain(GetProjectIpAccessListPlainArgs args) {
        return getProjectIpAccessListPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ProjectIpAccessList` describes an IP Access List entry resource. The access list grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * When you remove an entry from the access list, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.
     * 
     * ## Example Usage
     * 
     * ### Using CIDR Block
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectIpAccessList;
     * import com.pulumi.mongodbatlas.ProjectIpAccessListArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectIpAccessList = new ProjectIpAccessList("testProjectIpAccessList", ProjectIpAccessListArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .cidrBlock("1.2.3.4/32")
     *             .comment("cidr block for tf acc testing")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectIpAccessList(GetProjectIpAccessListArgs.builder()
     *             .projectId(testProjectIpAccessList.projectId())
     *             .cidrBlock(testProjectIpAccessList.cidrBlock())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using IP Address
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectIpAccessList;
     * import com.pulumi.mongodbatlas.ProjectIpAccessListArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectIpAccessList = new ProjectIpAccessList("testProjectIpAccessList", ProjectIpAccessListArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .ipAddress("2.3.4.5")
     *             .comment("ip address for tf acc testing")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectIpAccessList(GetProjectIpAccessListArgs.builder()
     *             .projectId(testProjectIpAccessList.projectId())
     *             .ipAddress(testProjectIpAccessList.ipAddress())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using an AWS Security Group
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.ProjectIpAccessList;
     * import com.pulumi.mongodbatlas.ProjectIpAccessListArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer("testNetworkContainer", NetworkContainerArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .atlasCidrBlock("192.168.208.0/21")
     *             .providerName("AWS")
     *             .regionName("US_EAST_1")
     *             .build());
     * 
     *         var testNetworkPeering = new NetworkPeering("testNetworkPeering", NetworkPeeringArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .containerId(testNetworkContainer.containerId())
     *             .accepterRegionName("us-east-1")
     *             .providerName("AWS")
     *             .routeTableCidrBlock("172.31.0.0/16")
     *             .vpcId("vpc-0d93d6f69f1578bd8")
     *             .awsAccountId("232589400519")
     *             .build());
     * 
     *         var testProjectIpAccessList = new ProjectIpAccessList("testProjectIpAccessList", ProjectIpAccessListArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .awsSecurityGroup("sg-0026348ec11780bd1")
     *             .comment("TestAcc for awsSecurityGroup")
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(testNetworkPeering)
     *                 .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectIpAccessList(GetProjectIpAccessListArgs.builder()
     *             .projectId(testProjectIpAccessList.projectId())
     *             .awsSecurityGroup(testProjectIpAccessList.awsSecurityGroup())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **IMPORTANT:** In order to use AWS Security Group(s) VPC Peering must be enabled like in the above example.
     * 
     */
    public static Output<GetProjectIpAccessListResult> getProjectIpAccessList(GetProjectIpAccessListArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getProjectIpAccessList:getProjectIpAccessList", TypeShape.of(GetProjectIpAccessListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ProjectIpAccessList` describes an IP Access List entry resource. The access list grants access from IPs, CIDRs or AWS Security Groups (if VPC Peering is enabled) to clusters within the Project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * &gt; **IMPORTANT:**
     * When you remove an entry from the access list, existing connections from the removed address(es) may remain open for a variable amount of time. How much time passes before Atlas closes the connection depends on several factors, including how the connection was established, the particular behavior of the application or driver using the address, and the connection protocol (e.g., TCP or UDP). This is particularly important to consider when changing an existing IP address or CIDR block as they cannot be updated via the Provider (comments can however), hence a change will force the destruction and recreation of entries.
     * 
     * ## Example Usage
     * 
     * ### Using CIDR Block
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectIpAccessList;
     * import com.pulumi.mongodbatlas.ProjectIpAccessListArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectIpAccessList = new ProjectIpAccessList("testProjectIpAccessList", ProjectIpAccessListArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .cidrBlock("1.2.3.4/32")
     *             .comment("cidr block for tf acc testing")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectIpAccessList(GetProjectIpAccessListArgs.builder()
     *             .projectId(testProjectIpAccessList.projectId())
     *             .cidrBlock(testProjectIpAccessList.cidrBlock())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using IP Address
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ProjectIpAccessList;
     * import com.pulumi.mongodbatlas.ProjectIpAccessListArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testProjectIpAccessList = new ProjectIpAccessList("testProjectIpAccessList", ProjectIpAccessListArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .ipAddress("2.3.4.5")
     *             .comment("ip address for tf acc testing")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectIpAccessList(GetProjectIpAccessListArgs.builder()
     *             .projectId(testProjectIpAccessList.projectId())
     *             .ipAddress(testProjectIpAccessList.ipAddress())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Using an AWS Security Group
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.NetworkContainer;
     * import com.pulumi.mongodbatlas.NetworkContainerArgs;
     * import com.pulumi.mongodbatlas.NetworkPeering;
     * import com.pulumi.mongodbatlas.NetworkPeeringArgs;
     * import com.pulumi.mongodbatlas.ProjectIpAccessList;
     * import com.pulumi.mongodbatlas.ProjectIpAccessListArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetProjectIpAccessListArgs;
     * import com.pulumi.resources.CustomResourceOptions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testNetworkContainer = new NetworkContainer("testNetworkContainer", NetworkContainerArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .atlasCidrBlock("192.168.208.0/21")
     *             .providerName("AWS")
     *             .regionName("US_EAST_1")
     *             .build());
     * 
     *         var testNetworkPeering = new NetworkPeering("testNetworkPeering", NetworkPeeringArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .containerId(testNetworkContainer.containerId())
     *             .accepterRegionName("us-east-1")
     *             .providerName("AWS")
     *             .routeTableCidrBlock("172.31.0.0/16")
     *             .vpcId("vpc-0d93d6f69f1578bd8")
     *             .awsAccountId("232589400519")
     *             .build());
     * 
     *         var testProjectIpAccessList = new ProjectIpAccessList("testProjectIpAccessList", ProjectIpAccessListArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .awsSecurityGroup("sg-0026348ec11780bd1")
     *             .comment("TestAcc for awsSecurityGroup")
     *             .build(), CustomResourceOptions.builder()
     *                 .dependsOn(testNetworkPeering)
     *                 .build());
     * 
     *         final var test = MongodbatlasFunctions.getProjectIpAccessList(GetProjectIpAccessListArgs.builder()
     *             .projectId(testProjectIpAccessList.projectId())
     *             .awsSecurityGroup(testProjectIpAccessList.awsSecurityGroup())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &gt; **IMPORTANT:** In order to use AWS Security Group(s) VPC Peering must be enabled like in the above example.
     * 
     */
    public static CompletableFuture<GetProjectIpAccessListResult> getProjectIpAccessListPlain(GetProjectIpAccessListPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getProjectIpAccessList:getProjectIpAccessList", TypeShape.of(GetProjectIpAccessListResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getProjects` describe all Projects. This represents projects that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testGetProjects = MongodbatlasFunctions.getProjects(GetProjectsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectsInvokeResult> getProjects() {
        return getProjects(GetProjectsArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getProjects` describe all Projects. This represents projects that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testGetProjects = MongodbatlasFunctions.getProjects(GetProjectsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectsInvokeResult> getProjectsPlain() {
        return getProjectsPlain(GetProjectsPlainArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getProjects` describe all Projects. This represents projects that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testGetProjects = MongodbatlasFunctions.getProjects(GetProjectsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectsInvokeResult> getProjects(GetProjectsArgs args) {
        return getProjects(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getProjects` describe all Projects. This represents projects that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testGetProjects = MongodbatlasFunctions.getProjects(GetProjectsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectsInvokeResult> getProjectsPlain(GetProjectsPlainArgs args) {
        return getProjectsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getProjects` describe all Projects. This represents projects that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testGetProjects = MongodbatlasFunctions.getProjects(GetProjectsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetProjectsInvokeResult> getProjects(GetProjectsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getProjects:getProjects", TypeShape.of(GetProjectsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getProjects` describe all Projects. This represents projects that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectTeamArgs;
     * import com.pulumi.mongodbatlas.inputs.ProjectLimitArgs;
     * import com.pulumi.mongodbatlas.inputs.GetProjectsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         var testProject = new Project("testProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()))
     *             .teams(            
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e0fa8c99ccf641c722fe645")
     *                     .roleNames("GROUP_OWNER")
     *                     .build(),
     *                 ProjectTeamArgs.builder()
     *                     .teamId("5e1dd7b4f2a30ba80a70cd4rw")
     *                     .roleNames(                    
     *                         "GROUP_READ_ONLY",
     *                         "GROUP_DATA_ACCESS_READ_WRITE")
     *                     .build())
     *             .limits(ProjectLimitArgs.builder()
     *                 .name("atlas.project.deployment.clusters")
     *                 .value(26)
     *                 .build())
     *             .build());
     * 
     *         final var testGetProjects = MongodbatlasFunctions.getProjects(GetProjectsArgs.builder()
     *             .pageNum(1)
     *             .itemsPerPage(5)
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetProjectsInvokeResult> getProjectsPlain(GetProjectsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getProjects:getProjects", TypeShape.of(GetProjectsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.PushBasedLogExport` describes the configured project level settings for the push-based log export feature.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.CloudProviderAccessAuthorization;
     * import com.pulumi.mongodbatlas.CloudProviderAccessAuthorizationArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessAuthorizationAwsArgs;
     * import com.pulumi.mongodbatlas.PushBasedLogExport;
     * import com.pulumi.mongodbatlas.PushBasedLogExportArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPushBasedLogExportArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var project_tf = new Project("project-tf", ProjectArgs.builder()
     *             .name(atlasProjectName)
     *             .orgId(atlasOrgId)
     *             .build());
     * 
     *         // Set up cloud provider access in Atlas using the created IAM role
     *         var setupOnly = new CloudProviderAccessSetup("setupOnly", CloudProviderAccessSetupArgs.builder()
     *             .projectId(project_tf.id())
     *             .providerName("AWS")
     *             .build());
     * 
     *         var authRole = new CloudProviderAccessAuthorization("authRole", CloudProviderAccessAuthorizationArgs.builder()
     *             .projectId(project_tf.id())
     *             .roleId(setupOnly.roleId())
     *             .aws(CloudProviderAccessAuthorizationAwsArgs.builder()
     *                 .iamAssumedRoleArn(testRole.arn())
     *                 .build())
     *             .build());
     * 
     *         // Set up push-based log export with authorized IAM role
     *         var testPushBasedLogExport = new PushBasedLogExport("testPushBasedLogExport", PushBasedLogExportArgs.builder()
     *             .projectId(project_tf.id())
     *             .bucketName(logBucket.bucket())
     *             .iamRoleId(authRole.roleId())
     *             .prefixPath("push-based-log-test")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPushBasedLogExport(GetPushBasedLogExportArgs.builder()
     *             .projectId(testPushBasedLogExport.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPushBasedLogExportResult> getPushBasedLogExport(GetPushBasedLogExportArgs args) {
        return getPushBasedLogExport(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.PushBasedLogExport` describes the configured project level settings for the push-based log export feature.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.CloudProviderAccessAuthorization;
     * import com.pulumi.mongodbatlas.CloudProviderAccessAuthorizationArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessAuthorizationAwsArgs;
     * import com.pulumi.mongodbatlas.PushBasedLogExport;
     * import com.pulumi.mongodbatlas.PushBasedLogExportArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPushBasedLogExportArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var project_tf = new Project("project-tf", ProjectArgs.builder()
     *             .name(atlasProjectName)
     *             .orgId(atlasOrgId)
     *             .build());
     * 
     *         // Set up cloud provider access in Atlas using the created IAM role
     *         var setupOnly = new CloudProviderAccessSetup("setupOnly", CloudProviderAccessSetupArgs.builder()
     *             .projectId(project_tf.id())
     *             .providerName("AWS")
     *             .build());
     * 
     *         var authRole = new CloudProviderAccessAuthorization("authRole", CloudProviderAccessAuthorizationArgs.builder()
     *             .projectId(project_tf.id())
     *             .roleId(setupOnly.roleId())
     *             .aws(CloudProviderAccessAuthorizationAwsArgs.builder()
     *                 .iamAssumedRoleArn(testRole.arn())
     *                 .build())
     *             .build());
     * 
     *         // Set up push-based log export with authorized IAM role
     *         var testPushBasedLogExport = new PushBasedLogExport("testPushBasedLogExport", PushBasedLogExportArgs.builder()
     *             .projectId(project_tf.id())
     *             .bucketName(logBucket.bucket())
     *             .iamRoleId(authRole.roleId())
     *             .prefixPath("push-based-log-test")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPushBasedLogExport(GetPushBasedLogExportArgs.builder()
     *             .projectId(testPushBasedLogExport.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPushBasedLogExportResult> getPushBasedLogExportPlain(GetPushBasedLogExportPlainArgs args) {
        return getPushBasedLogExportPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.PushBasedLogExport` describes the configured project level settings for the push-based log export feature.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.CloudProviderAccessAuthorization;
     * import com.pulumi.mongodbatlas.CloudProviderAccessAuthorizationArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessAuthorizationAwsArgs;
     * import com.pulumi.mongodbatlas.PushBasedLogExport;
     * import com.pulumi.mongodbatlas.PushBasedLogExportArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPushBasedLogExportArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var project_tf = new Project("project-tf", ProjectArgs.builder()
     *             .name(atlasProjectName)
     *             .orgId(atlasOrgId)
     *             .build());
     * 
     *         // Set up cloud provider access in Atlas using the created IAM role
     *         var setupOnly = new CloudProviderAccessSetup("setupOnly", CloudProviderAccessSetupArgs.builder()
     *             .projectId(project_tf.id())
     *             .providerName("AWS")
     *             .build());
     * 
     *         var authRole = new CloudProviderAccessAuthorization("authRole", CloudProviderAccessAuthorizationArgs.builder()
     *             .projectId(project_tf.id())
     *             .roleId(setupOnly.roleId())
     *             .aws(CloudProviderAccessAuthorizationAwsArgs.builder()
     *                 .iamAssumedRoleArn(testRole.arn())
     *                 .build())
     *             .build());
     * 
     *         // Set up push-based log export with authorized IAM role
     *         var testPushBasedLogExport = new PushBasedLogExport("testPushBasedLogExport", PushBasedLogExportArgs.builder()
     *             .projectId(project_tf.id())
     *             .bucketName(logBucket.bucket())
     *             .iamRoleId(authRole.roleId())
     *             .prefixPath("push-based-log-test")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPushBasedLogExport(GetPushBasedLogExportArgs.builder()
     *             .projectId(testPushBasedLogExport.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetPushBasedLogExportResult> getPushBasedLogExport(GetPushBasedLogExportArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getPushBasedLogExport:getPushBasedLogExport", TypeShape.of(GetPushBasedLogExportResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.PushBasedLogExport` describes the configured project level settings for the push-based log export feature.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetup;
     * import com.pulumi.mongodbatlas.CloudProviderAccessSetupArgs;
     * import com.pulumi.mongodbatlas.CloudProviderAccessAuthorization;
     * import com.pulumi.mongodbatlas.CloudProviderAccessAuthorizationArgs;
     * import com.pulumi.mongodbatlas.inputs.CloudProviderAccessAuthorizationAwsArgs;
     * import com.pulumi.mongodbatlas.PushBasedLogExport;
     * import com.pulumi.mongodbatlas.PushBasedLogExportArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetPushBasedLogExportArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var project_tf = new Project("project-tf", ProjectArgs.builder()
     *             .name(atlasProjectName)
     *             .orgId(atlasOrgId)
     *             .build());
     * 
     *         // Set up cloud provider access in Atlas using the created IAM role
     *         var setupOnly = new CloudProviderAccessSetup("setupOnly", CloudProviderAccessSetupArgs.builder()
     *             .projectId(project_tf.id())
     *             .providerName("AWS")
     *             .build());
     * 
     *         var authRole = new CloudProviderAccessAuthorization("authRole", CloudProviderAccessAuthorizationArgs.builder()
     *             .projectId(project_tf.id())
     *             .roleId(setupOnly.roleId())
     *             .aws(CloudProviderAccessAuthorizationAwsArgs.builder()
     *                 .iamAssumedRoleArn(testRole.arn())
     *                 .build())
     *             .build());
     * 
     *         // Set up push-based log export with authorized IAM role
     *         var testPushBasedLogExport = new PushBasedLogExport("testPushBasedLogExport", PushBasedLogExportArgs.builder()
     *             .projectId(project_tf.id())
     *             .bucketName(logBucket.bucket())
     *             .iamRoleId(authRole.roleId())
     *             .prefixPath("push-based-log-test")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getPushBasedLogExport(GetPushBasedLogExportArgs.builder()
     *             .projectId(testPushBasedLogExport.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetPushBasedLogExportResult> getPushBasedLogExportPlain(GetPushBasedLogExportPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getPushBasedLogExport:getPushBasedLogExport", TypeShape.of(GetPushBasedLogExportResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getRolesOrgId` describes a MongoDB Atlas Roles Org ID. This represents a Roles Org ID.
     * 
     * ## Example Usage
     * 
     * ### Using data source to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         ctx.export("orgId", test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRolesOrgIdResult> getRolesOrgId() {
        return getRolesOrgId(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getRolesOrgId` describes a MongoDB Atlas Roles Org ID. This represents a Roles Org ID.
     * 
     * ## Example Usage
     * 
     * ### Using data source to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         ctx.export("orgId", test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRolesOrgIdResult> getRolesOrgIdPlain() {
        return getRolesOrgIdPlain(InvokeArgs.Empty, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getRolesOrgId` describes a MongoDB Atlas Roles Org ID. This represents a Roles Org ID.
     * 
     * ## Example Usage
     * 
     * ### Using data source to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         ctx.export("orgId", test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRolesOrgIdResult> getRolesOrgId(InvokeArgs args) {
        return getRolesOrgId(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getRolesOrgId` describes a MongoDB Atlas Roles Org ID. This represents a Roles Org ID.
     * 
     * ## Example Usage
     * 
     * ### Using data source to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         ctx.export("orgId", test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRolesOrgIdResult> getRolesOrgIdPlain(InvokeArgs args) {
        return getRolesOrgIdPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getRolesOrgId` describes a MongoDB Atlas Roles Org ID. This represents a Roles Org ID.
     * 
     * ## Example Usage
     * 
     * ### Using data source to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         ctx.export("orgId", test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetRolesOrgIdResult> getRolesOrgId(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getRolesOrgId:getRolesOrgId", TypeShape.of(GetRolesOrgIdResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getRolesOrgId` describes a MongoDB Atlas Roles Org ID. This represents a Roles Org ID.
     * 
     * ## Example Usage
     * 
     * ### Using data source to query
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getRolesOrgId();
     * 
     *         ctx.export("orgId", test.applyValue(getRolesOrgIdResult -> getRolesOrgIdResult.orgId()));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetRolesOrgIdResult> getRolesOrgIdPlain(InvokeArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getRolesOrgId:getRolesOrgId", TypeShape.of(GetRolesOrgIdResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.SearchDeployment` describes a search node deployment.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.AdvancedCluster;
     * import com.pulumi.mongodbatlas.AdvancedClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.AdvancedClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.SearchDeployment;
     * import com.pulumi.mongodbatlas.SearchDeploymentArgs;
     * import com.pulumi.mongodbatlas.inputs.SearchDeploymentSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleProject = new Project("exampleProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(orgId)
     *             .build());
     * 
     *         var exampleAdvancedCluster = new AdvancedCluster("exampleAdvancedCluster", AdvancedClusterArgs.builder()
     *             .projectId(exampleProject.id())
     *             .name("ClusterExample")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(AdvancedClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(AdvancedClusterReplicationSpecRegionConfigArgs.builder()
     *                     .electableSpecs(AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs.builder()
     *                         .instanceSize("M10")
     *                         .nodeCount(3)
     *                         .build())
     *                     .providerName("AWS")
     *                     .priority(7)
     *                     .regionName("US_EAST_1")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleSearchDeployment = new SearchDeployment("exampleSearchDeployment", SearchDeploymentArgs.builder()
     *             .projectId(exampleProject.id())
     *             .clusterName(exampleAdvancedCluster.name())
     *             .specs(SearchDeploymentSpecArgs.builder()
     *                 .instance_size("S20_HIGHCPU_NVME")
     *                 .node_count(2)
     *                 .build())
     *             .build());
     * 
     *         final var example = MongodbatlasFunctions.getSearchDeployment(GetSearchDeploymentArgs.builder()
     *             .projectId(exampleSearchDeployment.projectId())
     *             .clusterName(exampleSearchDeployment.clusterName())
     *             .build());
     * 
     *         ctx.export("mongodbatlasSearchDeploymentId", example.applyValue(getSearchDeploymentResult -> getSearchDeploymentResult).applyValue(example -> example.applyValue(getSearchDeploymentResult -> getSearchDeploymentResult.id())));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSearchDeploymentResult> getSearchDeployment(GetSearchDeploymentArgs args) {
        return getSearchDeployment(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.SearchDeployment` describes a search node deployment.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.AdvancedCluster;
     * import com.pulumi.mongodbatlas.AdvancedClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.AdvancedClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.SearchDeployment;
     * import com.pulumi.mongodbatlas.SearchDeploymentArgs;
     * import com.pulumi.mongodbatlas.inputs.SearchDeploymentSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleProject = new Project("exampleProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(orgId)
     *             .build());
     * 
     *         var exampleAdvancedCluster = new AdvancedCluster("exampleAdvancedCluster", AdvancedClusterArgs.builder()
     *             .projectId(exampleProject.id())
     *             .name("ClusterExample")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(AdvancedClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(AdvancedClusterReplicationSpecRegionConfigArgs.builder()
     *                     .electableSpecs(AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs.builder()
     *                         .instanceSize("M10")
     *                         .nodeCount(3)
     *                         .build())
     *                     .providerName("AWS")
     *                     .priority(7)
     *                     .regionName("US_EAST_1")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleSearchDeployment = new SearchDeployment("exampleSearchDeployment", SearchDeploymentArgs.builder()
     *             .projectId(exampleProject.id())
     *             .clusterName(exampleAdvancedCluster.name())
     *             .specs(SearchDeploymentSpecArgs.builder()
     *                 .instance_size("S20_HIGHCPU_NVME")
     *                 .node_count(2)
     *                 .build())
     *             .build());
     * 
     *         final var example = MongodbatlasFunctions.getSearchDeployment(GetSearchDeploymentArgs.builder()
     *             .projectId(exampleSearchDeployment.projectId())
     *             .clusterName(exampleSearchDeployment.clusterName())
     *             .build());
     * 
     *         ctx.export("mongodbatlasSearchDeploymentId", example.applyValue(getSearchDeploymentResult -> getSearchDeploymentResult).applyValue(example -> example.applyValue(getSearchDeploymentResult -> getSearchDeploymentResult.id())));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSearchDeploymentResult> getSearchDeploymentPlain(GetSearchDeploymentPlainArgs args) {
        return getSearchDeploymentPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.SearchDeployment` describes a search node deployment.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.AdvancedCluster;
     * import com.pulumi.mongodbatlas.AdvancedClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.AdvancedClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.SearchDeployment;
     * import com.pulumi.mongodbatlas.SearchDeploymentArgs;
     * import com.pulumi.mongodbatlas.inputs.SearchDeploymentSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleProject = new Project("exampleProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(orgId)
     *             .build());
     * 
     *         var exampleAdvancedCluster = new AdvancedCluster("exampleAdvancedCluster", AdvancedClusterArgs.builder()
     *             .projectId(exampleProject.id())
     *             .name("ClusterExample")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(AdvancedClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(AdvancedClusterReplicationSpecRegionConfigArgs.builder()
     *                     .electableSpecs(AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs.builder()
     *                         .instanceSize("M10")
     *                         .nodeCount(3)
     *                         .build())
     *                     .providerName("AWS")
     *                     .priority(7)
     *                     .regionName("US_EAST_1")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleSearchDeployment = new SearchDeployment("exampleSearchDeployment", SearchDeploymentArgs.builder()
     *             .projectId(exampleProject.id())
     *             .clusterName(exampleAdvancedCluster.name())
     *             .specs(SearchDeploymentSpecArgs.builder()
     *                 .instance_size("S20_HIGHCPU_NVME")
     *                 .node_count(2)
     *                 .build())
     *             .build());
     * 
     *         final var example = MongodbatlasFunctions.getSearchDeployment(GetSearchDeploymentArgs.builder()
     *             .projectId(exampleSearchDeployment.projectId())
     *             .clusterName(exampleSearchDeployment.clusterName())
     *             .build());
     * 
     *         ctx.export("mongodbatlasSearchDeploymentId", example.applyValue(getSearchDeploymentResult -> getSearchDeploymentResult).applyValue(example -> example.applyValue(getSearchDeploymentResult -> getSearchDeploymentResult.id())));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSearchDeploymentResult> getSearchDeployment(GetSearchDeploymentArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSearchDeployment:getSearchDeployment", TypeShape.of(GetSearchDeploymentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.SearchDeployment` describes a search node deployment.
     * 
     * ## Example Usage
     * 
     * ### S
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Project;
     * import com.pulumi.mongodbatlas.ProjectArgs;
     * import com.pulumi.mongodbatlas.AdvancedCluster;
     * import com.pulumi.mongodbatlas.AdvancedClusterArgs;
     * import com.pulumi.mongodbatlas.inputs.AdvancedClusterReplicationSpecArgs;
     * import com.pulumi.mongodbatlas.SearchDeployment;
     * import com.pulumi.mongodbatlas.SearchDeploymentArgs;
     * import com.pulumi.mongodbatlas.inputs.SearchDeploymentSpecArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchDeploymentArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var exampleProject = new Project("exampleProject", ProjectArgs.builder()
     *             .name("project-name")
     *             .orgId(orgId)
     *             .build());
     * 
     *         var exampleAdvancedCluster = new AdvancedCluster("exampleAdvancedCluster", AdvancedClusterArgs.builder()
     *             .projectId(exampleProject.id())
     *             .name("ClusterExample")
     *             .clusterType("REPLICASET")
     *             .replicationSpecs(AdvancedClusterReplicationSpecArgs.builder()
     *                 .regionConfigs(AdvancedClusterReplicationSpecRegionConfigArgs.builder()
     *                     .electableSpecs(AdvancedClusterReplicationSpecRegionConfigElectableSpecsArgs.builder()
     *                         .instanceSize("M10")
     *                         .nodeCount(3)
     *                         .build())
     *                     .providerName("AWS")
     *                     .priority(7)
     *                     .regionName("US_EAST_1")
     *                     .build())
     *                 .build())
     *             .build());
     * 
     *         var exampleSearchDeployment = new SearchDeployment("exampleSearchDeployment", SearchDeploymentArgs.builder()
     *             .projectId(exampleProject.id())
     *             .clusterName(exampleAdvancedCluster.name())
     *             .specs(SearchDeploymentSpecArgs.builder()
     *                 .instance_size("S20_HIGHCPU_NVME")
     *                 .node_count(2)
     *                 .build())
     *             .build());
     * 
     *         final var example = MongodbatlasFunctions.getSearchDeployment(GetSearchDeploymentArgs.builder()
     *             .projectId(exampleSearchDeployment.projectId())
     *             .clusterName(exampleSearchDeployment.clusterName())
     *             .build());
     * 
     *         ctx.export("mongodbatlasSearchDeploymentId", example.applyValue(getSearchDeploymentResult -> getSearchDeploymentResult).applyValue(example -> example.applyValue(getSearchDeploymentResult -> getSearchDeploymentResult.id())));
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSearchDeploymentResult> getSearchDeploymentPlain(GetSearchDeploymentPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSearchDeployment:getSearchDeployment", TypeShape.of(GetSearchDeploymentResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.SearchIndex` describe a single search indexes. This represents a single search index that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndex(GetSearchIndexArgs.builder()
     *             .indexId("<INDEX_ID")
     *             .projectId("<PROJECT_ID>")
     *             .clusterName("<CLUSTER_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSearchIndexResult> getSearchIndex(GetSearchIndexArgs args) {
        return getSearchIndex(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.SearchIndex` describe a single search indexes. This represents a single search index that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndex(GetSearchIndexArgs.builder()
     *             .indexId("<INDEX_ID")
     *             .projectId("<PROJECT_ID>")
     *             .clusterName("<CLUSTER_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSearchIndexResult> getSearchIndexPlain(GetSearchIndexPlainArgs args) {
        return getSearchIndexPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.SearchIndex` describe a single search indexes. This represents a single search index that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndex(GetSearchIndexArgs.builder()
     *             .indexId("<INDEX_ID")
     *             .projectId("<PROJECT_ID>")
     *             .clusterName("<CLUSTER_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSearchIndexResult> getSearchIndex(GetSearchIndexArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSearchIndex:getSearchIndex", TypeShape.of(GetSearchIndexResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.SearchIndex` describe a single search indexes. This represents a single search index that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndex(GetSearchIndexArgs.builder()
     *             .indexId("<INDEX_ID")
     *             .projectId("<PROJECT_ID>")
     *             .clusterName("<CLUSTER_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSearchIndexResult> getSearchIndexPlain(GetSearchIndexPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSearchIndex:getSearchIndex", TypeShape.of(GetSearchIndexResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getSearchIndexes` describe all search indexes. This represents search indexes that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndexes(GetSearchIndexesArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .clusterName("<CLUSTER_NAME>")
     *             .databaseName("<DATABASE_NAME>")
     *             .collectionName("<COLLECTION_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSearchIndexesInvokeResult> getSearchIndexes(GetSearchIndexesArgs args) {
        return getSearchIndexes(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getSearchIndexes` describe all search indexes. This represents search indexes that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndexes(GetSearchIndexesArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .clusterName("<CLUSTER_NAME>")
     *             .databaseName("<DATABASE_NAME>")
     *             .collectionName("<COLLECTION_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSearchIndexesInvokeResult> getSearchIndexesPlain(GetSearchIndexesPlainArgs args) {
        return getSearchIndexesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getSearchIndexes` describe all search indexes. This represents search indexes that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndexes(GetSearchIndexesArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .clusterName("<CLUSTER_NAME>")
     *             .databaseName("<DATABASE_NAME>")
     *             .collectionName("<COLLECTION_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetSearchIndexesInvokeResult> getSearchIndexes(GetSearchIndexesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSearchIndexes:getSearchIndexes", TypeShape.of(GetSearchIndexesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getSearchIndexes` describe all search indexes. This represents search indexes that have been created.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetSearchIndexesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getSearchIndexes(GetSearchIndexesArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .clusterName("<CLUSTER_NAME>")
     *             .databaseName("<DATABASE_NAME>")
     *             .collectionName("<COLLECTION_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetSearchIndexesInvokeResult> getSearchIndexesPlain(GetSearchIndexesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSearchIndexes:getSearchIndexes", TypeShape.of(GetSearchIndexesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ServerlessInstance` describe a single serverless instance. This represents a single serverless instance that have been created.
     * &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
     * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetServerlessInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testTwo = MongodbatlasFunctions.getServerlessInstance(GetServerlessInstanceArgs.builder()
     *             .name("<SERVERLESS_INSTANCE_NAME>")
     *             .projectId("<PROJECT_ID >")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * **NOTE:**  `mongodbatlas.ServerlessInstance` and `mongodbatlas.PrivatelinkEndpointServiceServerless` resources have a circular dependency in some respects.\
     * That is, the `serverless_instance` must exist before the `privatelink_endpoint_service` can be created,\
     * and the `privatelink_endpoint_service` must exist before the `serverless_instance` gets its respective `connection_strings_private_endpoint_srv` values.
     * 
     * Because of this, the `serverless_instance` data source has particular value as a source of the `connection_strings_private_endpoint_srv`.\
     * When using the data_source in-tandem with the afforementioned resources, we can create and retrieve the `connection_strings_private_endpoint_srv` in a single `pulumi up`.
     * 
     * Follow this example to setup private connection to a serverless instance using aws vpc and get the connection strings in a single `pulumi up`
     * 
     */
    public static Output<GetServerlessInstanceResult> getServerlessInstance(GetServerlessInstanceArgs args) {
        return getServerlessInstance(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ServerlessInstance` describe a single serverless instance. This represents a single serverless instance that have been created.
     * &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
     * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetServerlessInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testTwo = MongodbatlasFunctions.getServerlessInstance(GetServerlessInstanceArgs.builder()
     *             .name("<SERVERLESS_INSTANCE_NAME>")
     *             .projectId("<PROJECT_ID >")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * **NOTE:**  `mongodbatlas.ServerlessInstance` and `mongodbatlas.PrivatelinkEndpointServiceServerless` resources have a circular dependency in some respects.\
     * That is, the `serverless_instance` must exist before the `privatelink_endpoint_service` can be created,\
     * and the `privatelink_endpoint_service` must exist before the `serverless_instance` gets its respective `connection_strings_private_endpoint_srv` values.
     * 
     * Because of this, the `serverless_instance` data source has particular value as a source of the `connection_strings_private_endpoint_srv`.\
     * When using the data_source in-tandem with the afforementioned resources, we can create and retrieve the `connection_strings_private_endpoint_srv` in a single `pulumi up`.
     * 
     * Follow this example to setup private connection to a serverless instance using aws vpc and get the connection strings in a single `pulumi up`
     * 
     */
    public static CompletableFuture<GetServerlessInstanceResult> getServerlessInstancePlain(GetServerlessInstancePlainArgs args) {
        return getServerlessInstancePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ServerlessInstance` describe a single serverless instance. This represents a single serverless instance that have been created.
     * &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
     * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetServerlessInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testTwo = MongodbatlasFunctions.getServerlessInstance(GetServerlessInstanceArgs.builder()
     *             .name("<SERVERLESS_INSTANCE_NAME>")
     *             .projectId("<PROJECT_ID >")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * **NOTE:**  `mongodbatlas.ServerlessInstance` and `mongodbatlas.PrivatelinkEndpointServiceServerless` resources have a circular dependency in some respects.\
     * That is, the `serverless_instance` must exist before the `privatelink_endpoint_service` can be created,\
     * and the `privatelink_endpoint_service` must exist before the `serverless_instance` gets its respective `connection_strings_private_endpoint_srv` values.
     * 
     * Because of this, the `serverless_instance` data source has particular value as a source of the `connection_strings_private_endpoint_srv`.\
     * When using the data_source in-tandem with the afforementioned resources, we can create and retrieve the `connection_strings_private_endpoint_srv` in a single `pulumi up`.
     * 
     * Follow this example to setup private connection to a serverless instance using aws vpc and get the connection strings in a single `pulumi up`
     * 
     */
    public static Output<GetServerlessInstanceResult> getServerlessInstance(GetServerlessInstanceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getServerlessInstance:getServerlessInstance", TypeShape.of(GetServerlessInstanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ServerlessInstance` describe a single serverless instance. This represents a single serverless instance that have been created.
     * &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
     * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### Basic
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetServerlessInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var testTwo = MongodbatlasFunctions.getServerlessInstance(GetServerlessInstanceArgs.builder()
     *             .name("<SERVERLESS_INSTANCE_NAME>")
     *             .projectId("<PROJECT_ID >")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * **NOTE:**  `mongodbatlas.ServerlessInstance` and `mongodbatlas.PrivatelinkEndpointServiceServerless` resources have a circular dependency in some respects.\
     * That is, the `serverless_instance` must exist before the `privatelink_endpoint_service` can be created,\
     * and the `privatelink_endpoint_service` must exist before the `serverless_instance` gets its respective `connection_strings_private_endpoint_srv` values.
     * 
     * Because of this, the `serverless_instance` data source has particular value as a source of the `connection_strings_private_endpoint_srv`.\
     * When using the data_source in-tandem with the afforementioned resources, we can create and retrieve the `connection_strings_private_endpoint_srv` in a single `pulumi up`.
     * 
     * Follow this example to setup private connection to a serverless instance using aws vpc and get the connection strings in a single `pulumi up`
     * 
     */
    public static CompletableFuture<GetServerlessInstanceResult> getServerlessInstancePlain(GetServerlessInstancePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getServerlessInstance:getServerlessInstance", TypeShape.of(GetServerlessInstanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getServerlessInstances` describe all serverless instances. This represents serverless instances that have been created for the specified group id.
     * 
     * &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
     * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetServerlessInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataServerless = MongodbatlasFunctions.getServerlessInstances(GetServerlessInstancesArgs.builder()
     *             .projectId("<PROJECT_ID")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerlessInstancesInvokeResult> getServerlessInstances(GetServerlessInstancesArgs args) {
        return getServerlessInstances(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getServerlessInstances` describe all serverless instances. This represents serverless instances that have been created for the specified group id.
     * 
     * &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
     * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetServerlessInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataServerless = MongodbatlasFunctions.getServerlessInstances(GetServerlessInstancesArgs.builder()
     *             .projectId("<PROJECT_ID")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerlessInstancesInvokeResult> getServerlessInstancesPlain(GetServerlessInstancesPlainArgs args) {
        return getServerlessInstancesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getServerlessInstances` describe all serverless instances. This represents serverless instances that have been created for the specified group id.
     * 
     * &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
     * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetServerlessInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataServerless = MongodbatlasFunctions.getServerlessInstances(GetServerlessInstancesArgs.builder()
     *             .projectId("<PROJECT_ID")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetServerlessInstancesInvokeResult> getServerlessInstances(GetServerlessInstancesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getServerlessInstances:getServerlessInstances", TypeShape.of(GetServerlessInstancesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getServerlessInstances` describe all serverless instances. This represents serverless instances that have been created for the specified group id.
     * 
     * &gt; **NOTE:**  Serverless instances do not support some Atlas features at this time.
     * For a full list of unsupported features, see [Serverless Instance Limitations](https://docs.atlas.mongodb.com/reference/serverless-instance-limitations/).
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetServerlessInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var dataServerless = MongodbatlasFunctions.getServerlessInstances(GetServerlessInstancesArgs.builder()
     *             .projectId("<PROJECT_ID")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetServerlessInstancesInvokeResult> getServerlessInstancesPlain(GetServerlessInstancesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getServerlessInstances:getServerlessInstances", TypeShape.of(GetServerlessInstancesInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetSharedTierRestoreJobResult> getSharedTierRestoreJob(GetSharedTierRestoreJobArgs args) {
        return getSharedTierRestoreJob(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetSharedTierRestoreJobResult> getSharedTierRestoreJobPlain(GetSharedTierRestoreJobPlainArgs args) {
        return getSharedTierRestoreJobPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetSharedTierRestoreJobResult> getSharedTierRestoreJob(GetSharedTierRestoreJobArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSharedTierRestoreJob:getSharedTierRestoreJob", TypeShape.of(GetSharedTierRestoreJobResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetSharedTierRestoreJobResult> getSharedTierRestoreJobPlain(GetSharedTierRestoreJobPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSharedTierRestoreJob:getSharedTierRestoreJob", TypeShape.of(GetSharedTierRestoreJobResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetSharedTierRestoreJobsInvokeResult> getSharedTierRestoreJobs(GetSharedTierRestoreJobsArgs args) {
        return getSharedTierRestoreJobs(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetSharedTierRestoreJobsInvokeResult> getSharedTierRestoreJobsPlain(GetSharedTierRestoreJobsPlainArgs args) {
        return getSharedTierRestoreJobsPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetSharedTierRestoreJobsInvokeResult> getSharedTierRestoreJobs(GetSharedTierRestoreJobsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSharedTierRestoreJobs:getSharedTierRestoreJobs", TypeShape.of(GetSharedTierRestoreJobsInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetSharedTierRestoreJobsInvokeResult> getSharedTierRestoreJobsPlain(GetSharedTierRestoreJobsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSharedTierRestoreJobs:getSharedTierRestoreJobs", TypeShape.of(GetSharedTierRestoreJobsInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetSharedTierSnapshotResult> getSharedTierSnapshot(GetSharedTierSnapshotArgs args) {
        return getSharedTierSnapshot(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetSharedTierSnapshotResult> getSharedTierSnapshotPlain(GetSharedTierSnapshotPlainArgs args) {
        return getSharedTierSnapshotPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetSharedTierSnapshotResult> getSharedTierSnapshot(GetSharedTierSnapshotArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSharedTierSnapshot:getSharedTierSnapshot", TypeShape.of(GetSharedTierSnapshotResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetSharedTierSnapshotResult> getSharedTierSnapshotPlain(GetSharedTierSnapshotPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSharedTierSnapshot:getSharedTierSnapshot", TypeShape.of(GetSharedTierSnapshotResult.class), args, Utilities.withVersion(options));
    }
    public static Output<GetSharedTierSnapshotsInvokeResult> getSharedTierSnapshots(GetSharedTierSnapshotsArgs args) {
        return getSharedTierSnapshots(args, InvokeOptions.Empty);
    }
    public static CompletableFuture<GetSharedTierSnapshotsInvokeResult> getSharedTierSnapshotsPlain(GetSharedTierSnapshotsPlainArgs args) {
        return getSharedTierSnapshotsPlain(args, InvokeOptions.Empty);
    }
    public static Output<GetSharedTierSnapshotsInvokeResult> getSharedTierSnapshots(GetSharedTierSnapshotsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getSharedTierSnapshots:getSharedTierSnapshots", TypeShape.of(GetSharedTierSnapshotsInvokeResult.class), args, Utilities.withVersion(options));
    }
    public static CompletableFuture<GetSharedTierSnapshotsInvokeResult> getSharedTierSnapshotsPlain(GetSharedTierSnapshotsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getSharedTierSnapshots:getSharedTierSnapshots", TypeShape.of(GetSharedTierSnapshotsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.StreamConnection` describes a stream connection.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MongodbatlasFunctions.getStreamConnection(GetStreamConnectionArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("<INSTANCE_NAME>")
     *             .connectionName("<CONNECTION_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamConnectionResult> getStreamConnection(GetStreamConnectionArgs args) {
        return getStreamConnection(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.StreamConnection` describes a stream connection.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MongodbatlasFunctions.getStreamConnection(GetStreamConnectionArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("<INSTANCE_NAME>")
     *             .connectionName("<CONNECTION_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamConnectionResult> getStreamConnectionPlain(GetStreamConnectionPlainArgs args) {
        return getStreamConnectionPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.StreamConnection` describes a stream connection.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MongodbatlasFunctions.getStreamConnection(GetStreamConnectionArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("<INSTANCE_NAME>")
     *             .connectionName("<CONNECTION_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamConnectionResult> getStreamConnection(GetStreamConnectionArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getStreamConnection:getStreamConnection", TypeShape.of(GetStreamConnectionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.StreamConnection` describes a stream connection.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamConnectionArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MongodbatlasFunctions.getStreamConnection(GetStreamConnectionArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("<INSTANCE_NAME>")
     *             .connectionName("<CONNECTION_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamConnectionResult> getStreamConnectionPlain(GetStreamConnectionPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getStreamConnection:getStreamConnection", TypeShape.of(GetStreamConnectionResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getStreamConnections` describes all connections of a stream instance for the specified project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getStreamConnections(GetStreamConnectionsArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("<INSTANCE_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamConnectionsInvokeResult> getStreamConnections(GetStreamConnectionsArgs args) {
        return getStreamConnections(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getStreamConnections` describes all connections of a stream instance for the specified project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getStreamConnections(GetStreamConnectionsArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("<INSTANCE_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamConnectionsInvokeResult> getStreamConnectionsPlain(GetStreamConnectionsPlainArgs args) {
        return getStreamConnectionsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getStreamConnections` describes all connections of a stream instance for the specified project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getStreamConnections(GetStreamConnectionsArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("<INSTANCE_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamConnectionsInvokeResult> getStreamConnections(GetStreamConnectionsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getStreamConnections:getStreamConnections", TypeShape.of(GetStreamConnectionsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getStreamConnections` describes all connections of a stream instance for the specified project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamConnectionsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getStreamConnections(GetStreamConnectionsArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("<INSTANCE_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamConnectionsInvokeResult> getStreamConnectionsPlain(GetStreamConnectionsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getStreamConnections:getStreamConnections", TypeShape.of(GetStreamConnectionsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.StreamInstance` describes a stream instance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MongodbatlasFunctions.getStreamInstance(GetStreamInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("<INSTANCE_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamInstanceResult> getStreamInstance(GetStreamInstanceArgs args) {
        return getStreamInstance(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.StreamInstance` describes a stream instance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MongodbatlasFunctions.getStreamInstance(GetStreamInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("<INSTANCE_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamInstanceResult> getStreamInstancePlain(GetStreamInstancePlainArgs args) {
        return getStreamInstancePlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.StreamInstance` describes a stream instance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MongodbatlasFunctions.getStreamInstance(GetStreamInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("<INSTANCE_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamInstanceResult> getStreamInstance(GetStreamInstanceArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getStreamInstance:getStreamInstance", TypeShape.of(GetStreamInstanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.StreamInstance` describes a stream instance.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamInstanceArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var example = MongodbatlasFunctions.getStreamInstance(GetStreamInstanceArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .instanceName("<INSTANCE_NAME>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamInstanceResult> getStreamInstancePlain(GetStreamInstancePlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getStreamInstance:getStreamInstance", TypeShape.of(GetStreamInstanceResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getStreamInstances` describes the stream instances defined in a project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getStreamInstances(GetStreamInstancesArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamInstancesInvokeResult> getStreamInstances(GetStreamInstancesArgs args) {
        return getStreamInstances(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getStreamInstances` describes the stream instances defined in a project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getStreamInstances(GetStreamInstancesArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamInstancesInvokeResult> getStreamInstancesPlain(GetStreamInstancesPlainArgs args) {
        return getStreamInstancesPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getStreamInstances` describes the stream instances defined in a project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getStreamInstances(GetStreamInstancesArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetStreamInstancesInvokeResult> getStreamInstances(GetStreamInstancesArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getStreamInstances:getStreamInstances", TypeShape.of(GetStreamInstancesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getStreamInstances` describes the stream instances defined in a project.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetStreamInstancesArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         final var test = MongodbatlasFunctions.getStreamInstances(GetStreamInstancesArgs.builder()
     *             .projectId("<PROJECT_ID>")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetStreamInstancesInvokeResult> getStreamInstancesPlain(GetStreamInstancesPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getStreamInstances:getStreamInstances", TypeShape.of(GetStreamInstancesInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Team` describes a Team. The resource requires your Organization ID, Project ID and Team ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Team;
     * import com.pulumi.mongodbatlas.TeamArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testTeam = new Team("testTeam", TeamArgs.builder()
     *             .orgId("<ORGANIZATION-ID>")
     *             .name("myNewTeam")
     *             .usernames(            
     *                 "user1",
     *                 "user2",
     *                 "user3")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getTeam(GetTeamArgs.builder()
     *             .orgId(testTeam.orgId())
     *             .teamId(testTeam.teamId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Team;
     * import com.pulumi.mongodbatlas.TeamArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Team("test", TeamArgs.builder()
     *             .orgId("<ORGANIZATION-ID>")
     *             .name("myNewTeam")
     *             .usernames(            
     *                 "user1",
     *                 "user2",
     *                 "user3")
     *             .build());
     * 
     *         final var test2 = MongodbatlasFunctions.getTeam(GetTeamArgs.builder()
     *             .orgId(test.orgId())
     *             .name(test.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTeamResult> getTeam(GetTeamArgs args) {
        return getTeam(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Team` describes a Team. The resource requires your Organization ID, Project ID and Team ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Team;
     * import com.pulumi.mongodbatlas.TeamArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testTeam = new Team("testTeam", TeamArgs.builder()
     *             .orgId("<ORGANIZATION-ID>")
     *             .name("myNewTeam")
     *             .usernames(            
     *                 "user1",
     *                 "user2",
     *                 "user3")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getTeam(GetTeamArgs.builder()
     *             .orgId(testTeam.orgId())
     *             .teamId(testTeam.teamId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Team;
     * import com.pulumi.mongodbatlas.TeamArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Team("test", TeamArgs.builder()
     *             .orgId("<ORGANIZATION-ID>")
     *             .name("myNewTeam")
     *             .usernames(            
     *                 "user1",
     *                 "user2",
     *                 "user3")
     *             .build());
     * 
     *         final var test2 = MongodbatlasFunctions.getTeam(GetTeamArgs.builder()
     *             .orgId(test.orgId())
     *             .name(test.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTeamResult> getTeamPlain(GetTeamPlainArgs args) {
        return getTeamPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.Team` describes a Team. The resource requires your Organization ID, Project ID and Team ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Team;
     * import com.pulumi.mongodbatlas.TeamArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testTeam = new Team("testTeam", TeamArgs.builder()
     *             .orgId("<ORGANIZATION-ID>")
     *             .name("myNewTeam")
     *             .usernames(            
     *                 "user1",
     *                 "user2",
     *                 "user3")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getTeam(GetTeamArgs.builder()
     *             .orgId(testTeam.orgId())
     *             .teamId(testTeam.teamId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Team;
     * import com.pulumi.mongodbatlas.TeamArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Team("test", TeamArgs.builder()
     *             .orgId("<ORGANIZATION-ID>")
     *             .name("myNewTeam")
     *             .usernames(            
     *                 "user1",
     *                 "user2",
     *                 "user3")
     *             .build());
     * 
     *         final var test2 = MongodbatlasFunctions.getTeam(GetTeamArgs.builder()
     *             .orgId(test.orgId())
     *             .name(test.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetTeamResult> getTeam(GetTeamArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getTeam:getTeam", TypeShape.of(GetTeamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.Team` describes a Team. The resource requires your Organization ID, Project ID and Team ID.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `group_id` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Team;
     * import com.pulumi.mongodbatlas.TeamArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testTeam = new Team("testTeam", TeamArgs.builder()
     *             .orgId("<ORGANIZATION-ID>")
     *             .name("myNewTeam")
     *             .usernames(            
     *                 "user1",
     *                 "user2",
     *                 "user3")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getTeam(GetTeamArgs.builder()
     *             .orgId(testTeam.orgId())
     *             .teamId(testTeam.teamId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.Team;
     * import com.pulumi.mongodbatlas.TeamArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetTeamArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var test = new Team("test", TeamArgs.builder()
     *             .orgId("<ORGANIZATION-ID>")
     *             .name("myNewTeam")
     *             .usernames(            
     *                 "user1",
     *                 "user2",
     *                 "user3")
     *             .build());
     * 
     *         final var test2 = MongodbatlasFunctions.getTeam(GetTeamArgs.builder()
     *             .orgId(test.orgId())
     *             .name(test.name())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetTeamResult> getTeamPlain(GetTeamPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getTeam:getTeam", TypeShape.of(GetTeamResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source is deprecated. Please transition to using `mongodbatlas.Team` which defines the same underlying implementation, aligning the name of the data source with the implementation which fetches a single team.
     * 
     * In the future this data source will define a new implementation capable of fetching all teams in one organization.
     * 
     */
    public static Output<GetTeamsResult> getTeams(GetTeamsArgs args) {
        return getTeams(args, InvokeOptions.Empty);
    }
    /**
     * This data source is deprecated. Please transition to using `mongodbatlas.Team` which defines the same underlying implementation, aligning the name of the data source with the implementation which fetches a single team.
     * 
     * In the future this data source will define a new implementation capable of fetching all teams in one organization.
     * 
     */
    public static CompletableFuture<GetTeamsResult> getTeamsPlain(GetTeamsPlainArgs args) {
        return getTeamsPlain(args, InvokeOptions.Empty);
    }
    /**
     * This data source is deprecated. Please transition to using `mongodbatlas.Team` which defines the same underlying implementation, aligning the name of the data source with the implementation which fetches a single team.
     * 
     * In the future this data source will define a new implementation capable of fetching all teams in one organization.
     * 
     */
    public static Output<GetTeamsResult> getTeams(GetTeamsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getTeams:getTeams", TypeShape.of(GetTeamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * This data source is deprecated. Please transition to using `mongodbatlas.Team` which defines the same underlying implementation, aligning the name of the data source with the implementation which fetches a single team.
     * 
     * In the future this data source will define a new implementation capable of fetching all teams in one organization.
     * 
     */
    public static CompletableFuture<GetTeamsResult> getTeamsPlain(GetTeamsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getTeams:getTeams", TypeShape.of(GetTeamsResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ThirdPartyIntegration` describe a Third-Party Integration Settings for the given type.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatadog = new ThirdPartyIntegration("testDatadog", ThirdPartyIntegrationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .type("DATADOG")
     *             .apiKey("<API-KEY>")
     *             .region("<REGION>")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegration(GetThirdPartyIntegrationArgs.builder()
     *             .projectId(testDatadog.projectId())
     *             .type("DATADOG")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetThirdPartyIntegrationResult> getThirdPartyIntegration(GetThirdPartyIntegrationArgs args) {
        return getThirdPartyIntegration(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ThirdPartyIntegration` describe a Third-Party Integration Settings for the given type.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatadog = new ThirdPartyIntegration("testDatadog", ThirdPartyIntegrationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .type("DATADOG")
     *             .apiKey("<API-KEY>")
     *             .region("<REGION>")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegration(GetThirdPartyIntegrationArgs.builder()
     *             .projectId(testDatadog.projectId())
     *             .type("DATADOG")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetThirdPartyIntegrationResult> getThirdPartyIntegrationPlain(GetThirdPartyIntegrationPlainArgs args) {
        return getThirdPartyIntegrationPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.ThirdPartyIntegration` describe a Third-Party Integration Settings for the given type.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatadog = new ThirdPartyIntegration("testDatadog", ThirdPartyIntegrationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .type("DATADOG")
     *             .apiKey("<API-KEY>")
     *             .region("<REGION>")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegration(GetThirdPartyIntegrationArgs.builder()
     *             .projectId(testDatadog.projectId())
     *             .type("DATADOG")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetThirdPartyIntegrationResult> getThirdPartyIntegration(GetThirdPartyIntegrationArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getThirdPartyIntegration:getThirdPartyIntegration", TypeShape.of(GetThirdPartyIntegrationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.ThirdPartyIntegration` describe a Third-Party Integration Settings for the given type.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testDatadog = new ThirdPartyIntegration("testDatadog", ThirdPartyIntegrationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .type("DATADOG")
     *             .apiKey("<API-KEY>")
     *             .region("<REGION>")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegration(GetThirdPartyIntegrationArgs.builder()
     *             .projectId(testDatadog.projectId())
     *             .type("DATADOG")
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetThirdPartyIntegrationResult> getThirdPartyIntegrationPlain(GetThirdPartyIntegrationPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getThirdPartyIntegration:getThirdPartyIntegration", TypeShape.of(GetThirdPartyIntegrationResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getThirdPartyIntegrations` describe all Third-Party Integration Settings. This represents two Third-Party services `PAGER_DUTY` and `DATADOG`
     * applied across the project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPagerDuty = new ThirdPartyIntegration("testPagerDuty", ThirdPartyIntegrationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .type("PAGER_DUTY")
     *             .serviceKey("<PAGER-DUTY-SERVICE-KEY>")
     *             .build());
     * 
     *         var testDatadog = new ThirdPartyIntegration("testDatadog", ThirdPartyIntegrationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .type("DATADOG")
     *             .apiKey("<API-KEY>")
     *             .region("<REGION>")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegrations(GetThirdPartyIntegrationsArgs.builder()
     *             .projectId(testPagerDuty.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetThirdPartyIntegrationsInvokeResult> getThirdPartyIntegrations(GetThirdPartyIntegrationsArgs args) {
        return getThirdPartyIntegrations(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getThirdPartyIntegrations` describe all Third-Party Integration Settings. This represents two Third-Party services `PAGER_DUTY` and `DATADOG`
     * applied across the project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPagerDuty = new ThirdPartyIntegration("testPagerDuty", ThirdPartyIntegrationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .type("PAGER_DUTY")
     *             .serviceKey("<PAGER-DUTY-SERVICE-KEY>")
     *             .build());
     * 
     *         var testDatadog = new ThirdPartyIntegration("testDatadog", ThirdPartyIntegrationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .type("DATADOG")
     *             .apiKey("<API-KEY>")
     *             .region("<REGION>")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegrations(GetThirdPartyIntegrationsArgs.builder()
     *             .projectId(testPagerDuty.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetThirdPartyIntegrationsInvokeResult> getThirdPartyIntegrationsPlain(GetThirdPartyIntegrationsPlainArgs args) {
        return getThirdPartyIntegrationsPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.getThirdPartyIntegrations` describe all Third-Party Integration Settings. This represents two Third-Party services `PAGER_DUTY` and `DATADOG`
     * applied across the project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPagerDuty = new ThirdPartyIntegration("testPagerDuty", ThirdPartyIntegrationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .type("PAGER_DUTY")
     *             .serviceKey("<PAGER-DUTY-SERVICE-KEY>")
     *             .build());
     * 
     *         var testDatadog = new ThirdPartyIntegration("testDatadog", ThirdPartyIntegrationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .type("DATADOG")
     *             .apiKey("<API-KEY>")
     *             .region("<REGION>")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegrations(GetThirdPartyIntegrationsArgs.builder()
     *             .projectId(testPagerDuty.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetThirdPartyIntegrationsInvokeResult> getThirdPartyIntegrations(GetThirdPartyIntegrationsArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getThirdPartyIntegrations:getThirdPartyIntegrations", TypeShape.of(GetThirdPartyIntegrationsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.getThirdPartyIntegrations` describe all Third-Party Integration Settings. This represents two Third-Party services `PAGER_DUTY` and `DATADOG`
     * applied across the project.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find `groupId` in the official documentation.
     * 
     * ## Example Usage
     * 
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegration;
     * import com.pulumi.mongodbatlas.ThirdPartyIntegrationArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetThirdPartyIntegrationsArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testPagerDuty = new ThirdPartyIntegration("testPagerDuty", ThirdPartyIntegrationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .type("PAGER_DUTY")
     *             .serviceKey("<PAGER-DUTY-SERVICE-KEY>")
     *             .build());
     * 
     *         var testDatadog = new ThirdPartyIntegration("testDatadog", ThirdPartyIntegrationArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .type("DATADOG")
     *             .apiKey("<API-KEY>")
     *             .region("<REGION>")
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getThirdPartyIntegrations(GetThirdPartyIntegrationsArgs.builder()
     *             .projectId(testPagerDuty.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetThirdPartyIntegrationsInvokeResult> getThirdPartyIntegrationsPlain(GetThirdPartyIntegrationsPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getThirdPartyIntegrations:getThirdPartyIntegrations", TypeShape.of(GetThirdPartyIntegrationsInvokeResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * ### Example Usage: Generate an Atlas-managed X.509 certificate for a MongoDB user
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Example Usage: Save a customer-managed X.509 configuration for an Atlas project
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUser;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUserArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetX509AuthenticationDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testX509AuthenticationDatabaseUser = new X509AuthenticationDatabaseUser("testX509AuthenticationDatabaseUser", X509AuthenticationDatabaseUserArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .customerX509Cas("""
     * -----BEGIN CERTIFICATE-----
     * MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC
     * VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl
     * c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG
     * SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy
     * MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF
     * VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV
     * BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp
     * c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
     * iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr
     * cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O
     * Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG
     * SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA
     * 7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A
     * iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz
     * -----END CERTIFICATE-----"
     *             """)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getX509AuthenticationDatabaseUser(GetX509AuthenticationDatabaseUserArgs.builder()
     *             .projectId(testX509AuthenticationDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetX509AuthenticationDatabaseUserResult> getX509AuthenticationDatabaseUser(GetX509AuthenticationDatabaseUserArgs args) {
        return getX509AuthenticationDatabaseUser(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * ### Example Usage: Generate an Atlas-managed X.509 certificate for a MongoDB user
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Example Usage: Save a customer-managed X.509 configuration for an Atlas project
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUser;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUserArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetX509AuthenticationDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testX509AuthenticationDatabaseUser = new X509AuthenticationDatabaseUser("testX509AuthenticationDatabaseUser", X509AuthenticationDatabaseUserArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .customerX509Cas("""
     * -----BEGIN CERTIFICATE-----
     * MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC
     * VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl
     * c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG
     * SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy
     * MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF
     * VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV
     * BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp
     * c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
     * iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr
     * cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O
     * Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG
     * SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA
     * 7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A
     * iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz
     * -----END CERTIFICATE-----"
     *             """)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getX509AuthenticationDatabaseUser(GetX509AuthenticationDatabaseUserArgs.builder()
     *             .projectId(testX509AuthenticationDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetX509AuthenticationDatabaseUserResult> getX509AuthenticationDatabaseUserPlain(GetX509AuthenticationDatabaseUserPlainArgs args) {
        return getX509AuthenticationDatabaseUserPlain(args, InvokeOptions.Empty);
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * ### Example Usage: Generate an Atlas-managed X.509 certificate for a MongoDB user
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Example Usage: Save a customer-managed X.509 configuration for an Atlas project
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUser;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUserArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetX509AuthenticationDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testX509AuthenticationDatabaseUser = new X509AuthenticationDatabaseUser("testX509AuthenticationDatabaseUser", X509AuthenticationDatabaseUserArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .customerX509Cas("""
     * -----BEGIN CERTIFICATE-----
     * MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC
     * VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl
     * c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG
     * SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy
     * MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF
     * VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV
     * BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp
     * c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
     * iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr
     * cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O
     * Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG
     * SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA
     * 7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A
     * iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz
     * -----END CERTIFICATE-----"
     *             """)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getX509AuthenticationDatabaseUser(GetX509AuthenticationDatabaseUserArgs.builder()
     *             .projectId(testX509AuthenticationDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static Output<GetX509AuthenticationDatabaseUserResult> getX509AuthenticationDatabaseUser(GetX509AuthenticationDatabaseUserArgs args, InvokeOptions options) {
        return Deployment.getInstance().invoke("mongodbatlas:index/getX509AuthenticationDatabaseUser:getX509AuthenticationDatabaseUser", TypeShape.of(GetX509AuthenticationDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
    /**
     * `mongodbatlas.X509AuthenticationDatabaseUser` describe a X509 Authentication Database User. This represents a X509 Authentication Database User.
     * 
     * &gt; **NOTE:** Groups and projects are synonymous terms. You may find group_id in the official documentation.
     * 
     * ## Example Usage
     * 
     * ### S
     * 
     * ### Example Usage: Generate an Atlas-managed X.509 certificate for a MongoDB user
     * &lt;!--Start PulumiCodeChooser --&gt;
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     * ### Example Usage: Save a customer-managed X.509 configuration for an Atlas project
     * &lt;!--Start PulumiCodeChooser --&gt;
     * <pre>
     * {@code
     * package generated_program;
     * 
     * import com.pulumi.Context;
     * import com.pulumi.Pulumi;
     * import com.pulumi.core.Output;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUser;
     * import com.pulumi.mongodbatlas.X509AuthenticationDatabaseUserArgs;
     * import com.pulumi.mongodbatlas.MongodbatlasFunctions;
     * import com.pulumi.mongodbatlas.inputs.GetX509AuthenticationDatabaseUserArgs;
     * import java.util.List;
     * import java.util.ArrayList;
     * import java.util.Map;
     * import java.io.File;
     * import java.nio.file.Files;
     * import java.nio.file.Paths;
     * 
     * public class App {
     *     public static void main(String[] args) {
     *         Pulumi.run(App::stack);
     *     }
     * 
     *     public static void stack(Context ctx) {
     *         var testX509AuthenticationDatabaseUser = new X509AuthenticationDatabaseUser("testX509AuthenticationDatabaseUser", X509AuthenticationDatabaseUserArgs.builder()
     *             .projectId("<PROJECT-ID>")
     *             .customerX509Cas("""
     * -----BEGIN CERTIFICATE-----
     * MIICmTCCAgICCQDZnHzklxsT9TANBgkqhkiG9w0BAQsFADCBkDELMAkGA1UEBhMC
     * VVMxDjAMBgNVBAgMBVRleGFzMQ8wDQYDVQQHDAZBdXN0aW4xETAPBgNVBAoMCHRl
     * c3QuY29tMQ0wCwYDVQQLDARUZXN0MREwDwYDVQQDDAh0ZXN0LmNvbTErMCkGCSqG
     * SIb3DQEJARYcbWVsaXNzYS5wbHVua2V0dEBtb25nb2RiLmNvbTAeFw0yMDAyMDQy
     * MDQ2MDFaFw0yMTAyMDMyMDQ2MDFaMIGQMQswCQYDVQQGEwJVUzEOMAwGA1UECAwF
     * VGV4YXMxDzANBgNVBAcMBkF1c3RpbjERMA8GA1UECgwIdGVzdC5jb20xDTALBgNV
     * BAsMBFRlc3QxETAPBgNVBAMMCHRlc3QuY29tMSswKQYJKoZIhvcNAQkBFhxtZWxp
     * c3NhLnBsdW5rZXR0QG1vbmdvZGIuY29tMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCB
     * iQKBgQCf1LRqr1zftzdYx2Aj9G76tb0noMPtj6faGLlPji1+m6Rn7RWD9L0ntWAr
     * cURxvypa9jZ9MXFzDtLevvd3tHEmfrUT3ukNDX6+Jtc4kWm+Dh2A70Pd+deKZ2/O
     * Fh8audEKAESGXnTbeJCeQa1XKlIkjqQHBNwES5h1b9vJtFoLJwIDAQABMA0GCSqG
     * SIb3DQEBCwUAA4GBADMUncjEPV/MiZUcVNGmktP6BPmEqMXQWUDpdGW2+Tg2JtUA
     * 7MMILtepBkFzLO+GlpZxeAlXO0wxiNgEmCRONgh4+t2w3e7a8GFijYQ99FHrAC5A
     * iul59bdl18gVqXia1Yeq/iK7Ohfy/Jwd7Hsm530elwkM/ZEkYDjBlZSXYdyz
     * -----END CERTIFICATE-----"
     *             """)
     *             .build());
     * 
     *         final var test = MongodbatlasFunctions.getX509AuthenticationDatabaseUser(GetX509AuthenticationDatabaseUserArgs.builder()
     *             .projectId(testX509AuthenticationDatabaseUser.projectId())
     *             .build());
     * 
     *     }
     * }
     * }
     * </pre>
     * &lt;!--End PulumiCodeChooser --&gt;
     * 
     */
    public static CompletableFuture<GetX509AuthenticationDatabaseUserResult> getX509AuthenticationDatabaseUserPlain(GetX509AuthenticationDatabaseUserPlainArgs args, InvokeOptions options) {
        return Deployment.getInstance().invokeAsync("mongodbatlas:index/getX509AuthenticationDatabaseUser:getX509AuthenticationDatabaseUser", TypeShape.of(GetX509AuthenticationDatabaseUserResult.class), args, Utilities.withVersion(options));
    }
}
