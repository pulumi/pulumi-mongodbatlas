// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.FederatedSettingsOrgRoleMappingRoleAssignmentArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FederatedSettingsOrgRoleMappingState extends com.pulumi.resources.ResourceArgs {

    public static final FederatedSettingsOrgRoleMappingState Empty = new FederatedSettingsOrgRoleMappingState();

    /**
     * Unique label that identifies the identity provider group to which this role mapping applies.
     * 
     */
    @Import(name="externalGroupName")
    private @Nullable Output<String> externalGroupName;

    /**
     * @return Unique label that identifies the identity provider group to which this role mapping applies.
     * 
     */
    public Optional<Output<String>> externalGroupName() {
        return Optional.ofNullable(this.externalGroupName);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     * 
     */
    @Import(name="federationSettingsId")
    private @Nullable Output<String> federationSettingsId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     * 
     */
    public Optional<Output<String>> federationSettingsId() {
        return Optional.ofNullable(this.federationSettingsId);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Atlas roles and the unique identifiers of the groups and organizations associated with each role.
     * 
     */
    @Import(name="roleAssignments")
    private @Nullable Output<List<FederatedSettingsOrgRoleMappingRoleAssignmentArgs>> roleAssignments;

    /**
     * @return Atlas roles and the unique identifiers of the groups and organizations associated with each role.
     * 
     */
    public Optional<Output<List<FederatedSettingsOrgRoleMappingRoleAssignmentArgs>>> roleAssignments() {
        return Optional.ofNullable(this.roleAssignments);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies this role mapping.
     * 
     */
    @Import(name="roleMappingId")
    private @Nullable Output<String> roleMappingId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies this role mapping.
     * 
     */
    public Optional<Output<String>> roleMappingId() {
        return Optional.ofNullable(this.roleMappingId);
    }

    private FederatedSettingsOrgRoleMappingState() {}

    private FederatedSettingsOrgRoleMappingState(FederatedSettingsOrgRoleMappingState $) {
        this.externalGroupName = $.externalGroupName;
        this.federationSettingsId = $.federationSettingsId;
        this.orgId = $.orgId;
        this.roleAssignments = $.roleAssignments;
        this.roleMappingId = $.roleMappingId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FederatedSettingsOrgRoleMappingState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FederatedSettingsOrgRoleMappingState $;

        public Builder() {
            $ = new FederatedSettingsOrgRoleMappingState();
        }

        public Builder(FederatedSettingsOrgRoleMappingState defaults) {
            $ = new FederatedSettingsOrgRoleMappingState(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalGroupName Unique label that identifies the identity provider group to which this role mapping applies.
         * 
         * @return builder
         * 
         */
        public Builder externalGroupName(@Nullable Output<String> externalGroupName) {
            $.externalGroupName = externalGroupName;
            return this;
        }

        /**
         * @param externalGroupName Unique label that identifies the identity provider group to which this role mapping applies.
         * 
         * @return builder
         * 
         */
        public Builder externalGroupName(String externalGroupName) {
            return externalGroupName(Output.of(externalGroupName));
        }

        /**
         * @param federationSettingsId Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
         * 
         * @return builder
         * 
         */
        public Builder federationSettingsId(@Nullable Output<String> federationSettingsId) {
            $.federationSettingsId = federationSettingsId;
            return this;
        }

        /**
         * @param federationSettingsId Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
         * 
         * @return builder
         * 
         */
        public Builder federationSettingsId(String federationSettingsId) {
            return federationSettingsId(Output.of(federationSettingsId));
        }

        /**
         * @param orgId Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique 24-hexadecimal digit string that identifies the organization that contains your projects.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param roleAssignments Atlas roles and the unique identifiers of the groups and organizations associated with each role.
         * 
         * @return builder
         * 
         */
        public Builder roleAssignments(@Nullable Output<List<FederatedSettingsOrgRoleMappingRoleAssignmentArgs>> roleAssignments) {
            $.roleAssignments = roleAssignments;
            return this;
        }

        /**
         * @param roleAssignments Atlas roles and the unique identifiers of the groups and organizations associated with each role.
         * 
         * @return builder
         * 
         */
        public Builder roleAssignments(List<FederatedSettingsOrgRoleMappingRoleAssignmentArgs> roleAssignments) {
            return roleAssignments(Output.of(roleAssignments));
        }

        /**
         * @param roleAssignments Atlas roles and the unique identifiers of the groups and organizations associated with each role.
         * 
         * @return builder
         * 
         */
        public Builder roleAssignments(FederatedSettingsOrgRoleMappingRoleAssignmentArgs... roleAssignments) {
            return roleAssignments(List.of(roleAssignments));
        }

        /**
         * @param roleMappingId Unique 24-hexadecimal digit string that identifies this role mapping.
         * 
         * @return builder
         * 
         */
        public Builder roleMappingId(@Nullable Output<String> roleMappingId) {
            $.roleMappingId = roleMappingId;
            return this;
        }

        /**
         * @param roleMappingId Unique 24-hexadecimal digit string that identifies this role mapping.
         * 
         * @return builder
         * 
         */
        public Builder roleMappingId(String roleMappingId) {
            return roleMappingId(Output.of(roleMappingId));
        }

        public FederatedSettingsOrgRoleMappingState build() {
            return $;
        }
    }

}
