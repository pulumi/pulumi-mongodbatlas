// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.FlexClusterBackupSettingsArgs;
import com.pulumi.mongodbatlas.inputs.FlexClusterConnectionStringsArgs;
import com.pulumi.mongodbatlas.inputs.FlexClusterProviderSettingsArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FlexClusterState extends com.pulumi.resources.ResourceArgs {

    public static final FlexClusterState Empty = new FlexClusterState();

    /**
     * Flex backup configuration
     * 
     */
    @Import(name="backupSettings")
    private @Nullable Output<FlexClusterBackupSettingsArgs> backupSettings;

    /**
     * @return Flex backup configuration
     * 
     */
    public Optional<Output<FlexClusterBackupSettingsArgs>> backupSettings() {
        return Optional.ofNullable(this.backupSettings);
    }

    /**
     * Flex cluster topology.
     * 
     */
    @Import(name="clusterType")
    private @Nullable Output<String> clusterType;

    /**
     * @return Flex cluster topology.
     * 
     */
    public Optional<Output<String>> clusterType() {
        return Optional.ofNullable(this.clusterType);
    }

    /**
     * Collection of Uniform Resource Locators that point to the MongoDB database.
     * 
     */
    @Import(name="connectionStrings")
    private @Nullable Output<FlexClusterConnectionStringsArgs> connectionStrings;

    /**
     * @return Collection of Uniform Resource Locators that point to the MongoDB database.
     * 
     */
    public Optional<Output<FlexClusterConnectionStringsArgs>> connectionStrings() {
        return Optional.ofNullable(this.connectionStrings);
    }

    /**
     * Date and time when MongoDB Cloud created this instance. This parameter expresses its value in ISO 8601 format in UTC.
     * 
     */
    @Import(name="createDate")
    private @Nullable Output<String> createDate;

    /**
     * @return Date and time when MongoDB Cloud created this instance. This parameter expresses its value in ISO 8601 format in UTC.
     * 
     */
    public Optional<Output<String>> createDate() {
        return Optional.ofNullable(this.createDate);
    }

    /**
     * Version of MongoDB that the instance runs.
     * 
     */
    @Import(name="mongoDbVersion")
    private @Nullable Output<String> mongoDbVersion;

    /**
     * @return Version of MongoDB that the instance runs.
     * 
     */
    public Optional<Output<String>> mongoDbVersion() {
        return Optional.ofNullable(this.mongoDbVersion);
    }

    /**
     * Human-readable label that identifies the instance.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Human-readable label that identifies the instance.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique 24-hexadecimal character string that identifies the project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal character string that identifies the project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
     * 
     */
    @Import(name="providerSettings")
    private @Nullable Output<FlexClusterProviderSettingsArgs> providerSettings;

    /**
     * @return Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
     * 
     */
    public Optional<Output<FlexClusterProviderSettingsArgs>> providerSettings() {
        return Optional.ofNullable(this.providerSettings);
    }

    /**
     * Human-readable label that indicates the current operating condition of this instance.
     * 
     */
    @Import(name="stateName")
    private @Nullable Output<String> stateName;

    /**
     * @return Human-readable label that indicates the current operating condition of this instance.
     * 
     */
    public Optional<Output<String>> stateName() {
        return Optional.ofNullable(this.stateName);
    }

    /**
     * Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
     * 
     */
    @Import(name="tags")
    private @Nullable Output<Map<String,String>> tags;

    /**
     * @return Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
     * 
     */
    public Optional<Output<Map<String,String>>> tags() {
        return Optional.ofNullable(this.tags);
    }

    /**
     * Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won&#39;t delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
     * 
     */
    @Import(name="terminationProtectionEnabled")
    private @Nullable Output<Boolean> terminationProtectionEnabled;

    /**
     * @return Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won&#39;t delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
     * 
     */
    public Optional<Output<Boolean>> terminationProtectionEnabled() {
        return Optional.ofNullable(this.terminationProtectionEnabled);
    }

    /**
     * Method by which the cluster maintains the MongoDB versions.
     * 
     */
    @Import(name="versionReleaseSystem")
    private @Nullable Output<String> versionReleaseSystem;

    /**
     * @return Method by which the cluster maintains the MongoDB versions.
     * 
     */
    public Optional<Output<String>> versionReleaseSystem() {
        return Optional.ofNullable(this.versionReleaseSystem);
    }

    private FlexClusterState() {}

    private FlexClusterState(FlexClusterState $) {
        this.backupSettings = $.backupSettings;
        this.clusterType = $.clusterType;
        this.connectionStrings = $.connectionStrings;
        this.createDate = $.createDate;
        this.mongoDbVersion = $.mongoDbVersion;
        this.name = $.name;
        this.projectId = $.projectId;
        this.providerSettings = $.providerSettings;
        this.stateName = $.stateName;
        this.tags = $.tags;
        this.terminationProtectionEnabled = $.terminationProtectionEnabled;
        this.versionReleaseSystem = $.versionReleaseSystem;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FlexClusterState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FlexClusterState $;

        public Builder() {
            $ = new FlexClusterState();
        }

        public Builder(FlexClusterState defaults) {
            $ = new FlexClusterState(Objects.requireNonNull(defaults));
        }

        /**
         * @param backupSettings Flex backup configuration
         * 
         * @return builder
         * 
         */
        public Builder backupSettings(@Nullable Output<FlexClusterBackupSettingsArgs> backupSettings) {
            $.backupSettings = backupSettings;
            return this;
        }

        /**
         * @param backupSettings Flex backup configuration
         * 
         * @return builder
         * 
         */
        public Builder backupSettings(FlexClusterBackupSettingsArgs backupSettings) {
            return backupSettings(Output.of(backupSettings));
        }

        /**
         * @param clusterType Flex cluster topology.
         * 
         * @return builder
         * 
         */
        public Builder clusterType(@Nullable Output<String> clusterType) {
            $.clusterType = clusterType;
            return this;
        }

        /**
         * @param clusterType Flex cluster topology.
         * 
         * @return builder
         * 
         */
        public Builder clusterType(String clusterType) {
            return clusterType(Output.of(clusterType));
        }

        /**
         * @param connectionStrings Collection of Uniform Resource Locators that point to the MongoDB database.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(@Nullable Output<FlexClusterConnectionStringsArgs> connectionStrings) {
            $.connectionStrings = connectionStrings;
            return this;
        }

        /**
         * @param connectionStrings Collection of Uniform Resource Locators that point to the MongoDB database.
         * 
         * @return builder
         * 
         */
        public Builder connectionStrings(FlexClusterConnectionStringsArgs connectionStrings) {
            return connectionStrings(Output.of(connectionStrings));
        }

        /**
         * @param createDate Date and time when MongoDB Cloud created this instance. This parameter expresses its value in ISO 8601 format in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createDate(@Nullable Output<String> createDate) {
            $.createDate = createDate;
            return this;
        }

        /**
         * @param createDate Date and time when MongoDB Cloud created this instance. This parameter expresses its value in ISO 8601 format in UTC.
         * 
         * @return builder
         * 
         */
        public Builder createDate(String createDate) {
            return createDate(Output.of(createDate));
        }

        /**
         * @param mongoDbVersion Version of MongoDB that the instance runs.
         * 
         * @return builder
         * 
         */
        public Builder mongoDbVersion(@Nullable Output<String> mongoDbVersion) {
            $.mongoDbVersion = mongoDbVersion;
            return this;
        }

        /**
         * @param mongoDbVersion Version of MongoDB that the instance runs.
         * 
         * @return builder
         * 
         */
        public Builder mongoDbVersion(String mongoDbVersion) {
            return mongoDbVersion(Output.of(mongoDbVersion));
        }

        /**
         * @param name Human-readable label that identifies the instance.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Human-readable label that identifies the instance.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId Unique 24-hexadecimal character string that identifies the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique 24-hexadecimal character string that identifies the project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param providerSettings Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
         * 
         * @return builder
         * 
         */
        public Builder providerSettings(@Nullable Output<FlexClusterProviderSettingsArgs> providerSettings) {
            $.providerSettings = providerSettings;
            return this;
        }

        /**
         * @param providerSettings Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
         * 
         * @return builder
         * 
         */
        public Builder providerSettings(FlexClusterProviderSettingsArgs providerSettings) {
            return providerSettings(Output.of(providerSettings));
        }

        /**
         * @param stateName Human-readable label that indicates the current operating condition of this instance.
         * 
         * @return builder
         * 
         */
        public Builder stateName(@Nullable Output<String> stateName) {
            $.stateName = stateName;
            return this;
        }

        /**
         * @param stateName Human-readable label that indicates the current operating condition of this instance.
         * 
         * @return builder
         * 
         */
        public Builder stateName(String stateName) {
            return stateName(Output.of(stateName));
        }

        /**
         * @param tags Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
         * 
         * @return builder
         * 
         */
        public Builder tags(@Nullable Output<Map<String,String>> tags) {
            $.tags = tags;
            return this;
        }

        /**
         * @param tags Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
         * 
         * @return builder
         * 
         */
        public Builder tags(Map<String,String> tags) {
            return tags(Output.of(tags));
        }

        /**
         * @param terminationProtectionEnabled Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won&#39;t delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
         * 
         * @return builder
         * 
         */
        public Builder terminationProtectionEnabled(@Nullable Output<Boolean> terminationProtectionEnabled) {
            $.terminationProtectionEnabled = terminationProtectionEnabled;
            return this;
        }

        /**
         * @param terminationProtectionEnabled Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won&#39;t delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
         * 
         * @return builder
         * 
         */
        public Builder terminationProtectionEnabled(Boolean terminationProtectionEnabled) {
            return terminationProtectionEnabled(Output.of(terminationProtectionEnabled));
        }

        /**
         * @param versionReleaseSystem Method by which the cluster maintains the MongoDB versions.
         * 
         * @return builder
         * 
         */
        public Builder versionReleaseSystem(@Nullable Output<String> versionReleaseSystem) {
            $.versionReleaseSystem = versionReleaseSystem;
            return this;
        }

        /**
         * @param versionReleaseSystem Method by which the cluster maintains the MongoDB versions.
         * 
         * @return builder
         * 
         */
        public Builder versionReleaseSystem(String versionReleaseSystem) {
            return versionReleaseSystem(Output.of(versionReleaseSystem));
        }

        public FlexClusterState build() {
            return $;
        }
    }

}
