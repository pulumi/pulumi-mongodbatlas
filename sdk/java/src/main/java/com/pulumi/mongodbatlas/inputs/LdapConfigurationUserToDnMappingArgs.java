// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LdapConfigurationUserToDnMappingArgs extends com.pulumi.resources.ResourceArgs {

    public static final LdapConfigurationUserToDnMappingArgs Empty = new LdapConfigurationUserToDnMappingArgs();

    /**
     * An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516. Each numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
     * 
     */
    @Import(name="ldapQuery")
    private @Nullable Output<String> ldapQuery;

    /**
     * @return An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516. Each numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
     * 
     */
    public Optional<Output<String>> ldapQuery() {
        return Optional.ofNullable(this.ldapQuery);
    }

    /**
     * A regular expression to match against a provided LDAP username. Each parenthesis-enclosed section represents a regular expression capture group used by the `substitution` or `ldap_query` template.
     * 
     */
    @Import(name="match")
    private @Nullable Output<String> match;

    /**
     * @return A regular expression to match against a provided LDAP username. Each parenthesis-enclosed section represents a regular expression capture group used by the `substitution` or `ldap_query` template.
     * 
     */
    public Optional<Output<String>> match() {
        return Optional.ofNullable(this.match);
    }

    /**
     * An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name. Each bracket-enclosed numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
     * 
     */
    @Import(name="substitution")
    private @Nullable Output<String> substitution;

    /**
     * @return An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name. Each bracket-enclosed numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
     * 
     */
    public Optional<Output<String>> substitution() {
        return Optional.ofNullable(this.substitution);
    }

    private LdapConfigurationUserToDnMappingArgs() {}

    private LdapConfigurationUserToDnMappingArgs(LdapConfigurationUserToDnMappingArgs $) {
        this.ldapQuery = $.ldapQuery;
        this.match = $.match;
        this.substitution = $.substitution;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LdapConfigurationUserToDnMappingArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LdapConfigurationUserToDnMappingArgs $;

        public Builder() {
            $ = new LdapConfigurationUserToDnMappingArgs();
        }

        public Builder(LdapConfigurationUserToDnMappingArgs defaults) {
            $ = new LdapConfigurationUserToDnMappingArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param ldapQuery An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516. Each numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
         * 
         * @return builder
         * 
         */
        public Builder ldapQuery(@Nullable Output<String> ldapQuery) {
            $.ldapQuery = ldapQuery;
            return this;
        }

        /**
         * @param ldapQuery An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516. Each numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
         * 
         * @return builder
         * 
         */
        public Builder ldapQuery(String ldapQuery) {
            return ldapQuery(Output.of(ldapQuery));
        }

        /**
         * @param match A regular expression to match against a provided LDAP username. Each parenthesis-enclosed section represents a regular expression capture group used by the `substitution` or `ldap_query` template.
         * 
         * @return builder
         * 
         */
        public Builder match(@Nullable Output<String> match) {
            $.match = match;
            return this;
        }

        /**
         * @param match A regular expression to match against a provided LDAP username. Each parenthesis-enclosed section represents a regular expression capture group used by the `substitution` or `ldap_query` template.
         * 
         * @return builder
         * 
         */
        public Builder match(String match) {
            return match(Output.of(match));
        }

        /**
         * @param substitution An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name. Each bracket-enclosed numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
         * 
         * @return builder
         * 
         */
        public Builder substitution(@Nullable Output<String> substitution) {
            $.substitution = substitution;
            return this;
        }

        /**
         * @param substitution An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name. Each bracket-enclosed numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
         * 
         * @return builder
         * 
         */
        public Builder substitution(String substitution) {
            return substitution(Output.of(substitution));
        }

        public LdapConfigurationUserToDnMappingArgs build() {
            return $;
        }
    }

}
