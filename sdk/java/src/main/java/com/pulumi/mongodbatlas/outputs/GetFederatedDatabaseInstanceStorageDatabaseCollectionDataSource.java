// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource {
    private Boolean allowInsecure;
    private String collection;
    private String collectionRegex;
    private String database;
    private String databaseRegex;
    private String datasetName;
    private String defaultFormat;
    private String path;
    private String provenanceFieldName;
    private String storeName;
    private List<String> urls;

    private GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource() {}
    public Boolean allowInsecure() {
        return this.allowInsecure;
    }
    public String collection() {
        return this.collection;
    }
    public String collectionRegex() {
        return this.collectionRegex;
    }
    public String database() {
        return this.database;
    }
    public String databaseRegex() {
        return this.databaseRegex;
    }
    public String datasetName() {
        return this.datasetName;
    }
    public String defaultFormat() {
        return this.defaultFormat;
    }
    public String path() {
        return this.path;
    }
    public String provenanceFieldName() {
        return this.provenanceFieldName;
    }
    public String storeName() {
        return this.storeName;
    }
    public List<String> urls() {
        return this.urls;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean allowInsecure;
        private String collection;
        private String collectionRegex;
        private String database;
        private String databaseRegex;
        private String datasetName;
        private String defaultFormat;
        private String path;
        private String provenanceFieldName;
        private String storeName;
        private List<String> urls;
        public Builder() {}
        public Builder(GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.allowInsecure = defaults.allowInsecure;
    	      this.collection = defaults.collection;
    	      this.collectionRegex = defaults.collectionRegex;
    	      this.database = defaults.database;
    	      this.databaseRegex = defaults.databaseRegex;
    	      this.datasetName = defaults.datasetName;
    	      this.defaultFormat = defaults.defaultFormat;
    	      this.path = defaults.path;
    	      this.provenanceFieldName = defaults.provenanceFieldName;
    	      this.storeName = defaults.storeName;
    	      this.urls = defaults.urls;
        }

        @CustomType.Setter
        public Builder allowInsecure(Boolean allowInsecure) {
            if (allowInsecure == null) {
              throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource", "allowInsecure");
            }
            this.allowInsecure = allowInsecure;
            return this;
        }
        @CustomType.Setter
        public Builder collection(String collection) {
            if (collection == null) {
              throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource", "collection");
            }
            this.collection = collection;
            return this;
        }
        @CustomType.Setter
        public Builder collectionRegex(String collectionRegex) {
            if (collectionRegex == null) {
              throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource", "collectionRegex");
            }
            this.collectionRegex = collectionRegex;
            return this;
        }
        @CustomType.Setter
        public Builder database(String database) {
            if (database == null) {
              throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource", "database");
            }
            this.database = database;
            return this;
        }
        @CustomType.Setter
        public Builder databaseRegex(String databaseRegex) {
            if (databaseRegex == null) {
              throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource", "databaseRegex");
            }
            this.databaseRegex = databaseRegex;
            return this;
        }
        @CustomType.Setter
        public Builder datasetName(String datasetName) {
            if (datasetName == null) {
              throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource", "datasetName");
            }
            this.datasetName = datasetName;
            return this;
        }
        @CustomType.Setter
        public Builder defaultFormat(String defaultFormat) {
            if (defaultFormat == null) {
              throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource", "defaultFormat");
            }
            this.defaultFormat = defaultFormat;
            return this;
        }
        @CustomType.Setter
        public Builder path(String path) {
            if (path == null) {
              throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource", "path");
            }
            this.path = path;
            return this;
        }
        @CustomType.Setter
        public Builder provenanceFieldName(String provenanceFieldName) {
            if (provenanceFieldName == null) {
              throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource", "provenanceFieldName");
            }
            this.provenanceFieldName = provenanceFieldName;
            return this;
        }
        @CustomType.Setter
        public Builder storeName(String storeName) {
            if (storeName == null) {
              throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource", "storeName");
            }
            this.storeName = storeName;
            return this;
        }
        @CustomType.Setter
        public Builder urls(List<String> urls) {
            if (urls == null) {
              throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource", "urls");
            }
            this.urls = urls;
            return this;
        }
        public Builder urls(String... urls) {
            return urls(List.of(urls));
        }
        public GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource build() {
            final var _resultValue = new GetFederatedDatabaseInstanceStorageDatabaseCollectionDataSource();
            _resultValue.allowInsecure = allowInsecure;
            _resultValue.collection = collection;
            _resultValue.collectionRegex = collectionRegex;
            _resultValue.database = database;
            _resultValue.databaseRegex = databaseRegex;
            _resultValue.datasetName = datasetName;
            _resultValue.defaultFormat = defaultFormat;
            _resultValue.path = path;
            _resultValue.provenanceFieldName = provenanceFieldName;
            _resultValue.storeName = storeName;
            _resultValue.urls = urls;
            return _resultValue;
        }
    }
}
