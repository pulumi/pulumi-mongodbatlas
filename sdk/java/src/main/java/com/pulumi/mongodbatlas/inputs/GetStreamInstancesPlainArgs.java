// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetStreamInstancesPlainArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetStreamInstancesPlainArgs Empty = new GetStreamInstancesPlainArgs();

    /**
     * Number of items that the response returns per page, up to a maximum of `500`. Defaults to `100`.
     * 
     */
    @Import(name="itemsPerPage")
    private @Nullable Integer itemsPerPage;

    /**
     * @return Number of items that the response returns per page, up to a maximum of `500`. Defaults to `100`.
     * 
     */
    public Optional<Integer> itemsPerPage() {
        return Optional.ofNullable(this.itemsPerPage);
    }

    /**
     * Number of the page that displays the current set of the total objects that the response returns. Defaults to `1`.
     * 
     */
    @Import(name="pageNum")
    private @Nullable Integer pageNum;

    /**
     * @return Number of the page that displays the current set of the total objects that the response returns. Defaults to `1`.
     * 
     */
    public Optional<Integer> pageNum() {
        return Optional.ofNullable(this.pageNum);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies your project.
     * 
     */
    @Import(name="projectId", required=true)
    private String projectId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies your project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }

    private GetStreamInstancesPlainArgs() {}

    private GetStreamInstancesPlainArgs(GetStreamInstancesPlainArgs $) {
        this.itemsPerPage = $.itemsPerPage;
        this.pageNum = $.pageNum;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetStreamInstancesPlainArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetStreamInstancesPlainArgs $;

        public Builder() {
            $ = new GetStreamInstancesPlainArgs();
        }

        public Builder(GetStreamInstancesPlainArgs defaults) {
            $ = new GetStreamInstancesPlainArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param itemsPerPage Number of items that the response returns per page, up to a maximum of `500`. Defaults to `100`.
         * 
         * @return builder
         * 
         */
        public Builder itemsPerPage(@Nullable Integer itemsPerPage) {
            $.itemsPerPage = itemsPerPage;
            return this;
        }

        /**
         * @param pageNum Number of the page that displays the current set of the total objects that the response returns. Defaults to `1`.
         * 
         * @return builder
         * 
         */
        public Builder pageNum(@Nullable Integer pageNum) {
            $.pageNum = pageNum;
            return this;
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            $.projectId = projectId;
            return this;
        }

        public GetStreamInstancesPlainArgs build() {
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("GetStreamInstancesPlainArgs", "projectId");
            }
            return $;
        }
    }

}
