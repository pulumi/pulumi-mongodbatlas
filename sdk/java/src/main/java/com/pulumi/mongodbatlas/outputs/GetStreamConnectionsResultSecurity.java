// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetStreamConnectionsResultSecurity {
    /**
     * @return A trusted, public x509 certificate for connecting to Kafka over SSL. String value of the certificate must be defined in the attribute.
     * 
     */
    private String brokerPublicCertificate;
    /**
     * @return Describes the transport type. Can be either `SASL_PLAINTEXT` or `SASL_SSL`.
     * 
     */
    private String protocol;

    private GetStreamConnectionsResultSecurity() {}
    /**
     * @return A trusted, public x509 certificate for connecting to Kafka over SSL. String value of the certificate must be defined in the attribute.
     * 
     */
    public String brokerPublicCertificate() {
        return this.brokerPublicCertificate;
    }
    /**
     * @return Describes the transport type. Can be either `SASL_PLAINTEXT` or `SASL_SSL`.
     * 
     */
    public String protocol() {
        return this.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamConnectionsResultSecurity defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String brokerPublicCertificate;
        private String protocol;
        public Builder() {}
        public Builder(GetStreamConnectionsResultSecurity defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.brokerPublicCertificate = defaults.brokerPublicCertificate;
    	      this.protocol = defaults.protocol;
        }

        @CustomType.Setter
        public Builder brokerPublicCertificate(String brokerPublicCertificate) {
            if (brokerPublicCertificate == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionsResultSecurity", "brokerPublicCertificate");
            }
            this.brokerPublicCertificate = brokerPublicCertificate;
            return this;
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetStreamConnectionsResultSecurity", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        public GetStreamConnectionsResultSecurity build() {
            final var _resultValue = new GetStreamConnectionsResultSecurity();
            _resultValue.brokerPublicCertificate = brokerPublicCertificate;
            _resultValue.protocol = protocol;
            return _resultValue;
        }
    }
}
