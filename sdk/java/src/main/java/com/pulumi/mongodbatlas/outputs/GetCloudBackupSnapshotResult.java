// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetCloudBackupSnapshotMember;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetCloudBackupSnapshotResult {
    /**
     * @return Cloud provider that stores this snapshot.
     * 
     */
    private String cloudProvider;
    private String clusterName;
    /**
     * @return UTC ISO 8601 formatted point in time when Atlas took the snapshot.
     * 
     */
    private String createdAt;
    /**
     * @return UDescription of the snapshot. Only present for on-demand snapshots.
     * 
     */
    private String description;
    /**
     * @return UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
     * 
     */
    private String expiresAt;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
     * 
     */
    private String masterKeyUuid;
    /**
     * @return Block of List of snapshots and the cloud provider where the snapshots are stored. See below
     * 
     */
    private List<GetCloudBackupSnapshotMember> members;
    /**
     * @return Version of the MongoDB server.
     * 
     */
    private String mongodVersion;
    private String projectId;
    /**
     * @return Label given to a shard or config server from which Atlas took this snapshot.
     * 
     */
    private String replicaSetName;
    private String snapshotId;
    /**
     * @return Unique identifiers of the snapshots created for the shards and config server for a sharded cluster.
     * 
     */
    private List<String> snapshotIds;
    /**
     * @return Specified the type of snapshot. Valid values are onDemand and scheduled.
     * 
     */
    private String snapshotType;
    /**
     * @return Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.
     * 
     */
    private String status;
    /**
     * @return Specifies the size of the snapshot in bytes.
     * 
     */
    private Integer storageSizeBytes;
    /**
     * @return Specifies the type of cluster: replicaSet or shardedCluster.
     * 
     */
    private String type;

    private GetCloudBackupSnapshotResult() {}
    /**
     * @return Cloud provider that stores this snapshot.
     * 
     */
    public String cloudProvider() {
        return this.cloudProvider;
    }
    public String clusterName() {
        return this.clusterName;
    }
    /**
     * @return UTC ISO 8601 formatted point in time when Atlas took the snapshot.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return UDescription of the snapshot. Only present for on-demand snapshots.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return UTC ISO 8601 formatted point in time when Atlas will delete the snapshot.
     * 
     */
    public String expiresAt() {
        return this.expiresAt;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Unique ID of the AWS KMS Customer Master Key used to encrypt the snapshot. Only visible for clusters using Encryption at Rest via Customer KMS.
     * 
     */
    public String masterKeyUuid() {
        return this.masterKeyUuid;
    }
    /**
     * @return Block of List of snapshots and the cloud provider where the snapshots are stored. See below
     * 
     */
    public List<GetCloudBackupSnapshotMember> members() {
        return this.members;
    }
    /**
     * @return Version of the MongoDB server.
     * 
     */
    public String mongodVersion() {
        return this.mongodVersion;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Label given to a shard or config server from which Atlas took this snapshot.
     * 
     */
    public String replicaSetName() {
        return this.replicaSetName;
    }
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return Unique identifiers of the snapshots created for the shards and config server for a sharded cluster.
     * 
     */
    public List<String> snapshotIds() {
        return this.snapshotIds;
    }
    /**
     * @return Specified the type of snapshot. Valid values are onDemand and scheduled.
     * 
     */
    public String snapshotType() {
        return this.snapshotType;
    }
    /**
     * @return Current status of the snapshot. One of the following values: queued, inProgress, completed, failed.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Specifies the size of the snapshot in bytes.
     * 
     */
    public Integer storageSizeBytes() {
        return this.storageSizeBytes;
    }
    /**
     * @return Specifies the type of cluster: replicaSet or shardedCluster.
     * 
     */
    public String type() {
        return this.type;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetCloudBackupSnapshotResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String cloudProvider;
        private String clusterName;
        private String createdAt;
        private String description;
        private String expiresAt;
        private String id;
        private String masterKeyUuid;
        private List<GetCloudBackupSnapshotMember> members;
        private String mongodVersion;
        private String projectId;
        private String replicaSetName;
        private String snapshotId;
        private List<String> snapshotIds;
        private String snapshotType;
        private String status;
        private Integer storageSizeBytes;
        private String type;
        public Builder() {}
        public Builder(GetCloudBackupSnapshotResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.cloudProvider = defaults.cloudProvider;
    	      this.clusterName = defaults.clusterName;
    	      this.createdAt = defaults.createdAt;
    	      this.description = defaults.description;
    	      this.expiresAt = defaults.expiresAt;
    	      this.id = defaults.id;
    	      this.masterKeyUuid = defaults.masterKeyUuid;
    	      this.members = defaults.members;
    	      this.mongodVersion = defaults.mongodVersion;
    	      this.projectId = defaults.projectId;
    	      this.replicaSetName = defaults.replicaSetName;
    	      this.snapshotId = defaults.snapshotId;
    	      this.snapshotIds = defaults.snapshotIds;
    	      this.snapshotType = defaults.snapshotType;
    	      this.status = defaults.status;
    	      this.storageSizeBytes = defaults.storageSizeBytes;
    	      this.type = defaults.type;
        }

        @CustomType.Setter
        public Builder cloudProvider(String cloudProvider) {
            if (cloudProvider == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "cloudProvider");
            }
            this.cloudProvider = cloudProvider;
            return this;
        }
        @CustomType.Setter
        public Builder clusterName(String clusterName) {
            if (clusterName == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "clusterName");
            }
            this.clusterName = clusterName;
            return this;
        }
        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            if (createdAt == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "createdAt");
            }
            this.createdAt = createdAt;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder expiresAt(String expiresAt) {
            if (expiresAt == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "expiresAt");
            }
            this.expiresAt = expiresAt;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder masterKeyUuid(String masterKeyUuid) {
            if (masterKeyUuid == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "masterKeyUuid");
            }
            this.masterKeyUuid = masterKeyUuid;
            return this;
        }
        @CustomType.Setter
        public Builder members(List<GetCloudBackupSnapshotMember> members) {
            if (members == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "members");
            }
            this.members = members;
            return this;
        }
        public Builder members(GetCloudBackupSnapshotMember... members) {
            return members(List.of(members));
        }
        @CustomType.Setter
        public Builder mongodVersion(String mongodVersion) {
            if (mongodVersion == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "mongodVersion");
            }
            this.mongodVersion = mongodVersion;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder replicaSetName(String replicaSetName) {
            if (replicaSetName == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "replicaSetName");
            }
            this.replicaSetName = replicaSetName;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            if (snapshotId == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "snapshotId");
            }
            this.snapshotId = snapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotIds(List<String> snapshotIds) {
            if (snapshotIds == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "snapshotIds");
            }
            this.snapshotIds = snapshotIds;
            return this;
        }
        public Builder snapshotIds(String... snapshotIds) {
            return snapshotIds(List.of(snapshotIds));
        }
        @CustomType.Setter
        public Builder snapshotType(String snapshotType) {
            if (snapshotType == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "snapshotType");
            }
            this.snapshotType = snapshotType;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder storageSizeBytes(Integer storageSizeBytes) {
            if (storageSizeBytes == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "storageSizeBytes");
            }
            this.storageSizeBytes = storageSizeBytes;
            return this;
        }
        @CustomType.Setter
        public Builder type(String type) {
            if (type == null) {
              throw new MissingRequiredPropertyException("GetCloudBackupSnapshotResult", "type");
            }
            this.type = type;
            return this;
        }
        public GetCloudBackupSnapshotResult build() {
            final var _resultValue = new GetCloudBackupSnapshotResult();
            _resultValue.cloudProvider = cloudProvider;
            _resultValue.clusterName = clusterName;
            _resultValue.createdAt = createdAt;
            _resultValue.description = description;
            _resultValue.expiresAt = expiresAt;
            _resultValue.id = id;
            _resultValue.masterKeyUuid = masterKeyUuid;
            _resultValue.members = members;
            _resultValue.mongodVersion = mongodVersion;
            _resultValue.projectId = projectId;
            _resultValue.replicaSetName = replicaSetName;
            _resultValue.snapshotId = snapshotId;
            _resultValue.snapshotIds = snapshotIds;
            _resultValue.snapshotType = snapshotType;
            _resultValue.status = status;
            _resultValue.storageSizeBytes = storageSizeBytes;
            _resultValue.type = type;
            return _resultValue;
        }
    }
}
