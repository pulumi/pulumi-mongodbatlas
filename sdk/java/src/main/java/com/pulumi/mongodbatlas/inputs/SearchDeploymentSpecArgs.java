// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;


public final class SearchDeploymentSpecArgs extends com.pulumi.resources.ResourceArgs {

    public static final SearchDeploymentSpecArgs Empty = new SearchDeploymentSpecArgs();

    /**
     * Hardware specification for the search node instance sizes. The [MongoDB Atlas API](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Atlas-Search/operation/createAtlasSearchDeployment) describes the valid values. More details can also be found in the [Search Node Documentation](https://www.mongodb.com/docs/atlas/cluster-config/multi-cloud-distribution/#search-tier).
     * 
     */
    @Import(name="instanceSize", required=true)
    private Output<String> instanceSize;

    /**
     * @return Hardware specification for the search node instance sizes. The [MongoDB Atlas API](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Atlas-Search/operation/createAtlasSearchDeployment) describes the valid values. More details can also be found in the [Search Node Documentation](https://www.mongodb.com/docs/atlas/cluster-config/multi-cloud-distribution/#search-tier).
     * 
     */
    public Output<String> instanceSize() {
        return this.instanceSize;
    }

    /**
     * Number of search nodes in the cluster.
     * 
     */
    @Import(name="nodeCount", required=true)
    private Output<Integer> nodeCount;

    /**
     * @return Number of search nodes in the cluster.
     * 
     */
    public Output<Integer> nodeCount() {
        return this.nodeCount;
    }

    private SearchDeploymentSpecArgs() {}

    private SearchDeploymentSpecArgs(SearchDeploymentSpecArgs $) {
        this.instanceSize = $.instanceSize;
        this.nodeCount = $.nodeCount;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SearchDeploymentSpecArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SearchDeploymentSpecArgs $;

        public Builder() {
            $ = new SearchDeploymentSpecArgs();
        }

        public Builder(SearchDeploymentSpecArgs defaults) {
            $ = new SearchDeploymentSpecArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param instanceSize Hardware specification for the search node instance sizes. The [MongoDB Atlas API](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Atlas-Search/operation/createAtlasSearchDeployment) describes the valid values. More details can also be found in the [Search Node Documentation](https://www.mongodb.com/docs/atlas/cluster-config/multi-cloud-distribution/#search-tier).
         * 
         * @return builder
         * 
         */
        public Builder instanceSize(Output<String> instanceSize) {
            $.instanceSize = instanceSize;
            return this;
        }

        /**
         * @param instanceSize Hardware specification for the search node instance sizes. The [MongoDB Atlas API](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Atlas-Search/operation/createAtlasSearchDeployment) describes the valid values. More details can also be found in the [Search Node Documentation](https://www.mongodb.com/docs/atlas/cluster-config/multi-cloud-distribution/#search-tier).
         * 
         * @return builder
         * 
         */
        public Builder instanceSize(String instanceSize) {
            return instanceSize(Output.of(instanceSize));
        }

        /**
         * @param nodeCount Number of search nodes in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Output<Integer> nodeCount) {
            $.nodeCount = nodeCount;
            return this;
        }

        /**
         * @param nodeCount Number of search nodes in the cluster.
         * 
         * @return builder
         * 
         */
        public Builder nodeCount(Integer nodeCount) {
            return nodeCount(Output.of(nodeCount));
        }

        public SearchDeploymentSpecArgs build() {
            $.instanceSize = Objects.requireNonNull($.instanceSize, "expected parameter 'instanceSize' to be non-null");
            $.nodeCount = Objects.requireNonNull($.nodeCount, "expected parameter 'nodeCount' to be non-null");
            return $;
        }
    }

}
