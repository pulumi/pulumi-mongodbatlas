// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;


public final class SearchIndexSynonymArgs extends com.pulumi.resources.ResourceArgs {

    public static final SearchIndexSynonymArgs Empty = new SearchIndexSynonymArgs();

    /**
     * [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index. Defaults to [lucene.standard](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/standard/#std-label-ref-standard-analyzer)
     * 
     */
    @Import(name="analyzer", required=true)
    private Output<String> analyzer;

    /**
     * @return [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index. Defaults to [lucene.standard](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/standard/#std-label-ref-standard-analyzer)
     * 
     */
    public Output<String> analyzer() {
        return this.analyzer;
    }

    /**
     * The name of the search index you want to create.
     * 
     */
    @Import(name="name", required=true)
    private Output<String> name;

    /**
     * @return The name of the search index you want to create.
     * 
     */
    public Output<String> name() {
        return this.name;
    }

    /**
     * Name of the source MongoDB collection for the synonyms. Documents in this collection must be in the format described in the [Synonyms Source Collection Documents](https://docs.atlas.mongodb.com/reference/atlas-search/synonyms/#std-label-synonyms-coll-spec).
     * 
     */
    @Import(name="sourceCollection", required=true)
    private Output<String> sourceCollection;

    /**
     * @return Name of the source MongoDB collection for the synonyms. Documents in this collection must be in the format described in the [Synonyms Source Collection Documents](https://docs.atlas.mongodb.com/reference/atlas-search/synonyms/#std-label-synonyms-coll-spec).
     * 
     */
    public Output<String> sourceCollection() {
        return this.sourceCollection;
    }

    private SearchIndexSynonymArgs() {}

    private SearchIndexSynonymArgs(SearchIndexSynonymArgs $) {
        this.analyzer = $.analyzer;
        this.name = $.name;
        this.sourceCollection = $.sourceCollection;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(SearchIndexSynonymArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private SearchIndexSynonymArgs $;

        public Builder() {
            $ = new SearchIndexSynonymArgs();
        }

        public Builder(SearchIndexSynonymArgs defaults) {
            $ = new SearchIndexSynonymArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param analyzer [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index. Defaults to [lucene.standard](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/standard/#std-label-ref-standard-analyzer)
         * 
         * @return builder
         * 
         */
        public Builder analyzer(Output<String> analyzer) {
            $.analyzer = analyzer;
            return this;
        }

        /**
         * @param analyzer [Analyzer](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/#std-label-analyzers-ref) to use when creating the index. Defaults to [lucene.standard](https://docs.atlas.mongodb.com/reference/atlas-search/analyzers/standard/#std-label-ref-standard-analyzer)
         * 
         * @return builder
         * 
         */
        public Builder analyzer(String analyzer) {
            return analyzer(Output.of(analyzer));
        }

        /**
         * @param name The name of the search index you want to create.
         * 
         * @return builder
         * 
         */
        public Builder name(Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name The name of the search index you want to create.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param sourceCollection Name of the source MongoDB collection for the synonyms. Documents in this collection must be in the format described in the [Synonyms Source Collection Documents](https://docs.atlas.mongodb.com/reference/atlas-search/synonyms/#std-label-synonyms-coll-spec).
         * 
         * @return builder
         * 
         */
        public Builder sourceCollection(Output<String> sourceCollection) {
            $.sourceCollection = sourceCollection;
            return this;
        }

        /**
         * @param sourceCollection Name of the source MongoDB collection for the synonyms. Documents in this collection must be in the format described in the [Synonyms Source Collection Documents](https://docs.atlas.mongodb.com/reference/atlas-search/synonyms/#std-label-synonyms-coll-spec).
         * 
         * @return builder
         * 
         */
        public Builder sourceCollection(String sourceCollection) {
            return sourceCollection(Output.of(sourceCollection));
        }

        public SearchIndexSynonymArgs build() {
            $.analyzer = Objects.requireNonNull($.analyzer, "expected parameter 'analyzer' to be non-null");
            $.name = Objects.requireNonNull($.name, "expected parameter 'name' to be non-null");
            $.sourceCollection = Objects.requireNonNull($.sourceCollection, "expected parameter 'sourceCollection' to be non-null");
            return $;
        }
    }

}
