// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class LdapVerifyArgs extends com.pulumi.resources.ResourceArgs {

    public static final LdapVerifyArgs Empty = new LdapVerifyArgs();

    /**
     * An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
     * 
     */
    @Import(name="authzQueryTemplate")
    private @Nullable Output<String> authzQueryTemplate;

    /**
     * @return An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
     * 
     */
    public Optional<Output<String>> authzQueryTemplate() {
        return Optional.ofNullable(this.authzQueryTemplate);
    }

    /**
     * The password used to authenticate the `bind_username`.
     * 
     */
    @Import(name="bindPassword", required=true)
    private Output<String> bindPassword;

    /**
     * @return The password used to authenticate the `bind_username`.
     * 
     */
    public Output<String> bindPassword() {
        return this.bindPassword;
    }

    /**
     * The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
     * 
     */
    @Import(name="bindUsername", required=true)
    private Output<String> bindUsername;

    /**
     * @return The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
     * 
     */
    public Output<String> bindUsername() {
        return this.bindUsername;
    }

    /**
     * CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
     * 
     */
    @Import(name="caCertificate")
    private @Nullable Output<String> caCertificate;

    /**
     * @return CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
     * 
     */
    public Optional<Output<String>> caCertificate() {
        return Optional.ofNullable(this.caCertificate);
    }

    /**
     * The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
     * 
     */
    @Import(name="hostname", required=true)
    private Output<String> hostname;

    /**
     * @return The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
     * 
     */
    public Output<String> hostname() {
        return this.hostname;
    }

    /**
     * The port to which the LDAP server listens for client connections. Default: `636`
     * 
     */
    @Import(name="port", required=true)
    private Output<Integer> port;

    /**
     * @return The port to which the LDAP server listens for client connections. Default: `636`
     * 
     */
    public Output<Integer> port() {
        return this.port;
    }

    /**
     * The unique ID for the project to configure LDAP.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The unique ID for the project to configure LDAP.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    private LdapVerifyArgs() {}

    private LdapVerifyArgs(LdapVerifyArgs $) {
        this.authzQueryTemplate = $.authzQueryTemplate;
        this.bindPassword = $.bindPassword;
        this.bindUsername = $.bindUsername;
        this.caCertificate = $.caCertificate;
        this.hostname = $.hostname;
        this.port = $.port;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(LdapVerifyArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private LdapVerifyArgs $;

        public Builder() {
            $ = new LdapVerifyArgs();
        }

        public Builder(LdapVerifyArgs defaults) {
            $ = new LdapVerifyArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param authzQueryTemplate An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
         * 
         * @return builder
         * 
         */
        public Builder authzQueryTemplate(@Nullable Output<String> authzQueryTemplate) {
            $.authzQueryTemplate = authzQueryTemplate;
            return this;
        }

        /**
         * @param authzQueryTemplate An LDAP query template that Atlas executes to obtain the LDAP groups to which the authenticated user belongs. Used only for user authorization. Use the {USER} placeholder in the URL to substitute the authenticated username. The query is relative to the host specified with hostname. The formatting for the query must conform to RFC4515 and RFC 4516. If you do not provide a query template, Atlas attempts to use the default value: `{USER}?memberOf?base`.
         * 
         * @return builder
         * 
         */
        public Builder authzQueryTemplate(String authzQueryTemplate) {
            return authzQueryTemplate(Output.of(authzQueryTemplate));
        }

        /**
         * @param bindPassword The password used to authenticate the `bind_username`.
         * 
         * @return builder
         * 
         */
        public Builder bindPassword(Output<String> bindPassword) {
            $.bindPassword = bindPassword;
            return this;
        }

        /**
         * @param bindPassword The password used to authenticate the `bind_username`.
         * 
         * @return builder
         * 
         */
        public Builder bindPassword(String bindPassword) {
            return bindPassword(Output.of(bindPassword));
        }

        /**
         * @param bindUsername The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
         * 
         * @return builder
         * 
         */
        public Builder bindUsername(Output<String> bindUsername) {
            $.bindUsername = bindUsername;
            return this;
        }

        /**
         * @param bindUsername The user DN that Atlas uses to connect to the LDAP server. Must be the full DN, such as `CN=BindUser,CN=Users,DC=myldapserver,DC=mycompany,DC=com`.
         * 
         * @return builder
         * 
         */
        public Builder bindUsername(String bindUsername) {
            return bindUsername(Output.of(bindUsername));
        }

        /**
         * @param caCertificate CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(@Nullable Output<String> caCertificate) {
            $.caCertificate = caCertificate;
            return this;
        }

        /**
         * @param caCertificate CA certificate used to verify the identify of the LDAP server. Self-signed certificates are allowed.
         * 
         * @return builder
         * 
         */
        public Builder caCertificate(String caCertificate) {
            return caCertificate(Output.of(caCertificate));
        }

        /**
         * @param hostname The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
         * 
         * @return builder
         * 
         */
        public Builder hostname(Output<String> hostname) {
            $.hostname = hostname;
            return this;
        }

        /**
         * @param hostname The hostname or IP address of the LDAP server. The server must be visible to the internet or connected to your Atlas cluster with VPC Peering.
         * 
         * @return builder
         * 
         */
        public Builder hostname(String hostname) {
            return hostname(Output.of(hostname));
        }

        /**
         * @param port The port to which the LDAP server listens for client connections. Default: `636`
         * 
         * @return builder
         * 
         */
        public Builder port(Output<Integer> port) {
            $.port = port;
            return this;
        }

        /**
         * @param port The port to which the LDAP server listens for client connections. Default: `636`
         * 
         * @return builder
         * 
         */
        public Builder port(Integer port) {
            return port(Output.of(port));
        }

        /**
         * @param projectId The unique ID for the project to configure LDAP.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The unique ID for the project to configure LDAP.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public LdapVerifyArgs build() {
            if ($.bindPassword == null) {
                throw new MissingRequiredPropertyException("LdapVerifyArgs", "bindPassword");
            }
            if ($.bindUsername == null) {
                throw new MissingRequiredPropertyException("LdapVerifyArgs", "bindUsername");
            }
            if ($.hostname == null) {
                throw new MissingRequiredPropertyException("LdapVerifyArgs", "hostname");
            }
            if ($.port == null) {
                throw new MissingRequiredPropertyException("LdapVerifyArgs", "port");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("LdapVerifyArgs", "projectId");
            }
            return $;
        }
    }

}
