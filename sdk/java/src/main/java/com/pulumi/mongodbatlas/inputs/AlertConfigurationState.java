// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.AlertConfigurationMatcherArgs;
import com.pulumi.mongodbatlas.inputs.AlertConfigurationMetricThresholdConfigArgs;
import com.pulumi.mongodbatlas.inputs.AlertConfigurationNotificationArgs;
import com.pulumi.mongodbatlas.inputs.AlertConfigurationThresholdConfigArgs;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Map;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class AlertConfigurationState extends com.pulumi.resources.ResourceArgs {

    public static final AlertConfigurationState Empty = new AlertConfigurationState();

    /**
     * Unique identifier for the alert configuration.
     * 
     */
    @Import(name="alertConfigurationId")
    private @Nullable Output<String> alertConfigurationId;

    /**
     * @return Unique identifier for the alert configuration.
     * 
     */
    public Optional<Output<String>> alertConfigurationId() {
        return Optional.ofNullable(this.alertConfigurationId);
    }

    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
     * 
     */
    @Import(name="created")
    private @Nullable Output<String> created;

    /**
     * @return Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
     * 
     */
    public Optional<Output<String>> created() {
        return Optional.ofNullable(this.created);
    }

    /**
     * It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     * 
     */
    @Import(name="enabled")
    private @Nullable Output<Boolean> enabled;

    /**
     * @return It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
     * 
     */
    public Optional<Output<Boolean>> enabled() {
        return Optional.ofNullable(this.enabled);
    }

    /**
     * The type of event that will trigger an alert.
     * 
     * &gt; ***IMPORTANT:*** Event Type has many possible values. All current options at available at https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/ and https://www.mongodb.com/docs/atlas/reference/alert-conditions/ Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/) and checking the latest eventTypeName options.
     * 
     * &gt; **NOTE:** If `event_type` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metric_threshold_config` field must also be configured.
     * 
     */
    @Import(name="eventType")
    private @Nullable Output<String> eventType;

    /**
     * @return The type of event that will trigger an alert.
     * 
     * &gt; ***IMPORTANT:*** Event Type has many possible values. All current options at available at https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/ and https://www.mongodb.com/docs/atlas/reference/alert-conditions/ Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/) and checking the latest eventTypeName options.
     * 
     * &gt; **NOTE:** If `event_type` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metric_threshold_config` field must also be configured.
     * 
     */
    public Optional<Output<String>> eventType() {
        return Optional.ofNullable(this.eventType);
    }

    @Import(name="matchers")
    private @Nullable Output<List<AlertConfigurationMatcherArgs>> matchers;

    public Optional<Output<List<AlertConfigurationMatcherArgs>>> matchers() {
        return Optional.ofNullable(this.matchers);
    }

    /**
     * @deprecated
     * this parameter is deprecated and will be removed in v1.12.0, please transition to metric_threshold_config
     * 
     */
    @Deprecated /* this parameter is deprecated and will be removed in v1.12.0, please transition to metric_threshold_config */
    @Import(name="metricThreshold")
    private @Nullable Output<Map<String,String>> metricThreshold;

    /**
     * @deprecated
     * this parameter is deprecated and will be removed in v1.12.0, please transition to metric_threshold_config
     * 
     */
    @Deprecated /* this parameter is deprecated and will be removed in v1.12.0, please transition to metric_threshold_config */
    public Optional<Output<Map<String,String>>> metricThreshold() {
        return Optional.ofNullable(this.metricThreshold);
    }

    @Import(name="metricThresholdConfig")
    private @Nullable Output<AlertConfigurationMetricThresholdConfigArgs> metricThresholdConfig;

    public Optional<Output<AlertConfigurationMetricThresholdConfigArgs>> metricThresholdConfig() {
        return Optional.ofNullable(this.metricThresholdConfig);
    }

    @Import(name="notifications")
    private @Nullable Output<List<AlertConfigurationNotificationArgs>> notifications;

    public Optional<Output<List<AlertConfigurationNotificationArgs>>> notifications() {
        return Optional.ofNullable(this.notifications);
    }

    /**
     * The ID of the project where the alert configuration will create.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The ID of the project where the alert configuration will create.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Threshold value outside of which an alert will be triggered.
     * 
     * @deprecated
     * this parameter is deprecated and will be removed in v1.12.0, please transition to threshold_config
     * 
     */
    @Deprecated /* this parameter is deprecated and will be removed in v1.12.0, please transition to threshold_config */
    @Import(name="threshold")
    private @Nullable Output<Map<String,String>> threshold;

    /**
     * @return Threshold value outside of which an alert will be triggered.
     * 
     * @deprecated
     * this parameter is deprecated and will be removed in v1.12.0, please transition to threshold_config
     * 
     */
    @Deprecated /* this parameter is deprecated and will be removed in v1.12.0, please transition to threshold_config */
    public Optional<Output<Map<String,String>>> threshold() {
        return Optional.ofNullable(this.threshold);
    }

    @Import(name="thresholdConfig")
    private @Nullable Output<AlertConfigurationThresholdConfigArgs> thresholdConfig;

    public Optional<Output<AlertConfigurationThresholdConfigArgs>> thresholdConfig() {
        return Optional.ofNullable(this.thresholdConfig);
    }

    /**
     * Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
     * 
     */
    @Import(name="updated")
    private @Nullable Output<String> updated;

    /**
     * @return Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
     * 
     */
    public Optional<Output<String>> updated() {
        return Optional.ofNullable(this.updated);
    }

    private AlertConfigurationState() {}

    private AlertConfigurationState(AlertConfigurationState $) {
        this.alertConfigurationId = $.alertConfigurationId;
        this.created = $.created;
        this.enabled = $.enabled;
        this.eventType = $.eventType;
        this.matchers = $.matchers;
        this.metricThreshold = $.metricThreshold;
        this.metricThresholdConfig = $.metricThresholdConfig;
        this.notifications = $.notifications;
        this.projectId = $.projectId;
        this.threshold = $.threshold;
        this.thresholdConfig = $.thresholdConfig;
        this.updated = $.updated;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(AlertConfigurationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private AlertConfigurationState $;

        public Builder() {
            $ = new AlertConfigurationState();
        }

        public Builder(AlertConfigurationState defaults) {
            $ = new AlertConfigurationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param alertConfigurationId Unique identifier for the alert configuration.
         * 
         * @return builder
         * 
         */
        public Builder alertConfigurationId(@Nullable Output<String> alertConfigurationId) {
            $.alertConfigurationId = alertConfigurationId;
            return this;
        }

        /**
         * @param alertConfigurationId Unique identifier for the alert configuration.
         * 
         * @return builder
         * 
         */
        public Builder alertConfigurationId(String alertConfigurationId) {
            return alertConfigurationId(Output.of(alertConfigurationId));
        }

        /**
         * @param created Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
         * 
         * @return builder
         * 
         */
        public Builder created(@Nullable Output<String> created) {
            $.created = created;
            return this;
        }

        /**
         * @param created Timestamp in ISO 8601 date and time format in UTC when this alert configuration was created.
         * 
         * @return builder
         * 
         */
        public Builder created(String created) {
            return created(Output.of(created));
        }

        /**
         * @param enabled It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
         * 
         * @return builder
         * 
         */
        public Builder enabled(@Nullable Output<Boolean> enabled) {
            $.enabled = enabled;
            return this;
        }

        /**
         * @param enabled It is not required, but If the attribute is omitted, by default will be false, and the configuration would be disabled. You must set true to enable the configuration.
         * 
         * @return builder
         * 
         */
        public Builder enabled(Boolean enabled) {
            return enabled(Output.of(enabled));
        }

        /**
         * @param eventType The type of event that will trigger an alert.
         * 
         * &gt; ***IMPORTANT:*** Event Type has many possible values. All current options at available at https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/ and https://www.mongodb.com/docs/atlas/reference/alert-conditions/ Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/) and checking the latest eventTypeName options.
         * 
         * &gt; **NOTE:** If `event_type` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metric_threshold_config` field must also be configured.
         * 
         * @return builder
         * 
         */
        public Builder eventType(@Nullable Output<String> eventType) {
            $.eventType = eventType;
            return this;
        }

        /**
         * @param eventType The type of event that will trigger an alert.
         * 
         * &gt; ***IMPORTANT:*** Event Type has many possible values. All current options at available at https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/ and https://www.mongodb.com/docs/atlas/reference/alert-conditions/ Details for both conditional and metric based alerts can be found by selecting the tabs on the [alert config page](https://docs.atlas.mongodb.com/reference/api/alert-configurations-create-config/) and checking the latest eventTypeName options.
         * 
         * &gt; **NOTE:** If `event_type` is set to `OUTSIDE_METRIC_THRESHOLD` or `OUTSIDE_SERVERLESS_METRIC_THRESHOLD`, the `metric_threshold_config` field must also be configured.
         * 
         * @return builder
         * 
         */
        public Builder eventType(String eventType) {
            return eventType(Output.of(eventType));
        }

        public Builder matchers(@Nullable Output<List<AlertConfigurationMatcherArgs>> matchers) {
            $.matchers = matchers;
            return this;
        }

        public Builder matchers(List<AlertConfigurationMatcherArgs> matchers) {
            return matchers(Output.of(matchers));
        }

        public Builder matchers(AlertConfigurationMatcherArgs... matchers) {
            return matchers(List.of(matchers));
        }

        /**
         * @return builder
         * 
         * @deprecated
         * this parameter is deprecated and will be removed in v1.12.0, please transition to metric_threshold_config
         * 
         */
        @Deprecated /* this parameter is deprecated and will be removed in v1.12.0, please transition to metric_threshold_config */
        public Builder metricThreshold(@Nullable Output<Map<String,String>> metricThreshold) {
            $.metricThreshold = metricThreshold;
            return this;
        }

        /**
         * @return builder
         * 
         * @deprecated
         * this parameter is deprecated and will be removed in v1.12.0, please transition to metric_threshold_config
         * 
         */
        @Deprecated /* this parameter is deprecated and will be removed in v1.12.0, please transition to metric_threshold_config */
        public Builder metricThreshold(Map<String,String> metricThreshold) {
            return metricThreshold(Output.of(metricThreshold));
        }

        public Builder metricThresholdConfig(@Nullable Output<AlertConfigurationMetricThresholdConfigArgs> metricThresholdConfig) {
            $.metricThresholdConfig = metricThresholdConfig;
            return this;
        }

        public Builder metricThresholdConfig(AlertConfigurationMetricThresholdConfigArgs metricThresholdConfig) {
            return metricThresholdConfig(Output.of(metricThresholdConfig));
        }

        public Builder notifications(@Nullable Output<List<AlertConfigurationNotificationArgs>> notifications) {
            $.notifications = notifications;
            return this;
        }

        public Builder notifications(List<AlertConfigurationNotificationArgs> notifications) {
            return notifications(Output.of(notifications));
        }

        public Builder notifications(AlertConfigurationNotificationArgs... notifications) {
            return notifications(List.of(notifications));
        }

        /**
         * @param projectId The ID of the project where the alert configuration will create.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The ID of the project where the alert configuration will create.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param threshold Threshold value outside of which an alert will be triggered.
         * 
         * @return builder
         * 
         * @deprecated
         * this parameter is deprecated and will be removed in v1.12.0, please transition to threshold_config
         * 
         */
        @Deprecated /* this parameter is deprecated and will be removed in v1.12.0, please transition to threshold_config */
        public Builder threshold(@Nullable Output<Map<String,String>> threshold) {
            $.threshold = threshold;
            return this;
        }

        /**
         * @param threshold Threshold value outside of which an alert will be triggered.
         * 
         * @return builder
         * 
         * @deprecated
         * this parameter is deprecated and will be removed in v1.12.0, please transition to threshold_config
         * 
         */
        @Deprecated /* this parameter is deprecated and will be removed in v1.12.0, please transition to threshold_config */
        public Builder threshold(Map<String,String> threshold) {
            return threshold(Output.of(threshold));
        }

        public Builder thresholdConfig(@Nullable Output<AlertConfigurationThresholdConfigArgs> thresholdConfig) {
            $.thresholdConfig = thresholdConfig;
            return this;
        }

        public Builder thresholdConfig(AlertConfigurationThresholdConfigArgs thresholdConfig) {
            return thresholdConfig(Output.of(thresholdConfig));
        }

        /**
         * @param updated Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(@Nullable Output<String> updated) {
            $.updated = updated;
            return this;
        }

        /**
         * @param updated Timestamp in ISO 8601 date and time format in UTC when this alert configuration was last updated.
         * 
         * @return builder
         * 
         */
        public Builder updated(String updated) {
            return updated(Output.of(updated));
        }

        public AlertConfigurationState build() {
            return $;
        }
    }

}
