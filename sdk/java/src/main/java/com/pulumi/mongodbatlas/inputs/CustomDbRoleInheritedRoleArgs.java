// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class CustomDbRoleInheritedRoleArgs extends com.pulumi.resources.ResourceArgs {

    public static final CustomDbRoleInheritedRoleArgs Empty = new CustomDbRoleInheritedRoleArgs();

    /**
     * Database on which the inherited role is granted.
     * 
     * &gt; **NOTE** This value should be admin for all roles except read and readWrite.
     * 
     */
    @Import(name="databaseName", required=true)
    private Output<String> databaseName;

    /**
     * @return Database on which the inherited role is granted.
     * 
     * &gt; **NOTE** This value should be admin for all roles except read and readWrite.
     * 
     */
    public Output<String> databaseName() {
        return this.databaseName;
    }

    /**
     * Name of the inherited role. This can either be another custom role or a built-in role.
     * 
     */
    @Import(name="roleName", required=true)
    private Output<String> roleName;

    /**
     * @return Name of the inherited role. This can either be another custom role or a built-in role.
     * 
     */
    public Output<String> roleName() {
        return this.roleName;
    }

    private CustomDbRoleInheritedRoleArgs() {}

    private CustomDbRoleInheritedRoleArgs(CustomDbRoleInheritedRoleArgs $) {
        this.databaseName = $.databaseName;
        this.roleName = $.roleName;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(CustomDbRoleInheritedRoleArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private CustomDbRoleInheritedRoleArgs $;

        public Builder() {
            $ = new CustomDbRoleInheritedRoleArgs();
        }

        public Builder(CustomDbRoleInheritedRoleArgs defaults) {
            $ = new CustomDbRoleInheritedRoleArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param databaseName Database on which the inherited role is granted.
         * 
         * &gt; **NOTE** This value should be admin for all roles except read and readWrite.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(Output<String> databaseName) {
            $.databaseName = databaseName;
            return this;
        }

        /**
         * @param databaseName Database on which the inherited role is granted.
         * 
         * &gt; **NOTE** This value should be admin for all roles except read and readWrite.
         * 
         * @return builder
         * 
         */
        public Builder databaseName(String databaseName) {
            return databaseName(Output.of(databaseName));
        }

        /**
         * @param roleName Name of the inherited role. This can either be another custom role or a built-in role.
         * 
         * @return builder
         * 
         */
        public Builder roleName(Output<String> roleName) {
            $.roleName = roleName;
            return this;
        }

        /**
         * @param roleName Name of the inherited role. This can either be another custom role or a built-in role.
         * 
         * @return builder
         * 
         */
        public Builder roleName(String roleName) {
            return roleName(Output.of(roleName));
        }

        public CustomDbRoleInheritedRoleArgs build() {
            if ($.databaseName == null) {
                throw new MissingRequiredPropertyException("CustomDbRoleInheritedRoleArgs", "databaseName");
            }
            if ($.roleName == null) {
                throw new MissingRequiredPropertyException("CustomDbRoleInheritedRoleArgs", "roleName");
            }
            return $;
        }
    }

}
