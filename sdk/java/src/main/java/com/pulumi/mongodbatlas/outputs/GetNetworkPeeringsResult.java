// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetNetworkPeeringsResult {
    /**
     * @return Specifies the region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     * 
     */
    private String accepterRegionName;
    private String atlasCidrBlock;
    /**
     * @return Account ID of the owner of the peer VPC.
     * 
     */
    private String awsAccountId;
    /**
     * @return Unique identifier for an Azure AD directory.
     * 
     */
    private String azureDirectoryId;
    /**
     * @return Unique identifer of the Azure subscription in which the VNet resides.
     * 
     */
    private String azureSubscriptionId;
    /**
     * @return Unique identifier for the peering connection.
     * 
     */
    private String connectionId;
    private String containerId;
    /**
     * @return When `&#34;status&#34; : &#34;FAILED&#34;`, Atlas provides a description of the error.
     * 
     */
    private String errorMessage;
    /**
     * @return Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
     * 
     */
    private String errorState;
    /**
     * @return Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
     * 
     */
    private String errorStateName;
    /**
     * @return GCP project ID of the owner of the network peer.
     * 
     */
    private String gcpProjectId;
    /**
     * @return Name of the network peer to which Atlas connects.
     * 
     */
    private String networkName;
    /**
     * @return Atlas assigned unique ID for the peering connection.
     * 
     */
    private String peeringId;
    /**
     * @return Cloud provider for this VPC peering connection. If omitted, Atlas sets this parameter to AWS. (Possible Values `AWS`, `AZURE`, `GCP`).
     * 
     */
    private String providerName;
    /**
     * @return Name of your Azure resource group.
     * 
     */
    private String resourceGroupName;
    /**
     * @return Peer VPC CIDR block or subnet.
     * 
     */
    private String routeTableCidrBlock;
    /**
     * @return Status of the Atlas network peering connection: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING`, `WAITING_FOR_USER`.
     * 
     */
    private String status;
    /**
     * @return The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
     * 
     */
    private String statusName;
    /**
     * @return Name of your Azure VNet.
     * 
     */
    private String vnetName;
    /**
     * @return Unique identifier of the peer VPC.
     * 
     */
    private String vpcId;

    private GetNetworkPeeringsResult() {}
    /**
     * @return Specifies the region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     * 
     */
    public String accepterRegionName() {
        return this.accepterRegionName;
    }
    public String atlasCidrBlock() {
        return this.atlasCidrBlock;
    }
    /**
     * @return Account ID of the owner of the peer VPC.
     * 
     */
    public String awsAccountId() {
        return this.awsAccountId;
    }
    /**
     * @return Unique identifier for an Azure AD directory.
     * 
     */
    public String azureDirectoryId() {
        return this.azureDirectoryId;
    }
    /**
     * @return Unique identifer of the Azure subscription in which the VNet resides.
     * 
     */
    public String azureSubscriptionId() {
        return this.azureSubscriptionId;
    }
    /**
     * @return Unique identifier for the peering connection.
     * 
     */
    public String connectionId() {
        return this.connectionId;
    }
    public String containerId() {
        return this.containerId;
    }
    /**
     * @return When `&#34;status&#34; : &#34;FAILED&#34;`, Atlas provides a description of the error.
     * 
     */
    public String errorMessage() {
        return this.errorMessage;
    }
    /**
     * @return Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
     * 
     */
    public String errorState() {
        return this.errorState;
    }
    /**
     * @return Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
     * 
     */
    public String errorStateName() {
        return this.errorStateName;
    }
    /**
     * @return GCP project ID of the owner of the network peer.
     * 
     */
    public String gcpProjectId() {
        return this.gcpProjectId;
    }
    /**
     * @return Name of the network peer to which Atlas connects.
     * 
     */
    public String networkName() {
        return this.networkName;
    }
    /**
     * @return Atlas assigned unique ID for the peering connection.
     * 
     */
    public String peeringId() {
        return this.peeringId;
    }
    /**
     * @return Cloud provider for this VPC peering connection. If omitted, Atlas sets this parameter to AWS. (Possible Values `AWS`, `AZURE`, `GCP`).
     * 
     */
    public String providerName() {
        return this.providerName;
    }
    /**
     * @return Name of your Azure resource group.
     * 
     */
    public String resourceGroupName() {
        return this.resourceGroupName;
    }
    /**
     * @return Peer VPC CIDR block or subnet.
     * 
     */
    public String routeTableCidrBlock() {
        return this.routeTableCidrBlock;
    }
    /**
     * @return Status of the Atlas network peering connection: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING`, `WAITING_FOR_USER`.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
     * 
     */
    public String statusName() {
        return this.statusName;
    }
    /**
     * @return Name of your Azure VNet.
     * 
     */
    public String vnetName() {
        return this.vnetName;
    }
    /**
     * @return Unique identifier of the peer VPC.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkPeeringsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String accepterRegionName;
        private String atlasCidrBlock;
        private String awsAccountId;
        private String azureDirectoryId;
        private String azureSubscriptionId;
        private String connectionId;
        private String containerId;
        private String errorMessage;
        private String errorState;
        private String errorStateName;
        private String gcpProjectId;
        private String networkName;
        private String peeringId;
        private String providerName;
        private String resourceGroupName;
        private String routeTableCidrBlock;
        private String status;
        private String statusName;
        private String vnetName;
        private String vpcId;
        public Builder() {}
        public Builder(GetNetworkPeeringsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.accepterRegionName = defaults.accepterRegionName;
    	      this.atlasCidrBlock = defaults.atlasCidrBlock;
    	      this.awsAccountId = defaults.awsAccountId;
    	      this.azureDirectoryId = defaults.azureDirectoryId;
    	      this.azureSubscriptionId = defaults.azureSubscriptionId;
    	      this.connectionId = defaults.connectionId;
    	      this.containerId = defaults.containerId;
    	      this.errorMessage = defaults.errorMessage;
    	      this.errorState = defaults.errorState;
    	      this.errorStateName = defaults.errorStateName;
    	      this.gcpProjectId = defaults.gcpProjectId;
    	      this.networkName = defaults.networkName;
    	      this.peeringId = defaults.peeringId;
    	      this.providerName = defaults.providerName;
    	      this.resourceGroupName = defaults.resourceGroupName;
    	      this.routeTableCidrBlock = defaults.routeTableCidrBlock;
    	      this.status = defaults.status;
    	      this.statusName = defaults.statusName;
    	      this.vnetName = defaults.vnetName;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder accepterRegionName(String accepterRegionName) {
            if (accepterRegionName == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "accepterRegionName");
            }
            this.accepterRegionName = accepterRegionName;
            return this;
        }
        @CustomType.Setter
        public Builder atlasCidrBlock(String atlasCidrBlock) {
            if (atlasCidrBlock == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "atlasCidrBlock");
            }
            this.atlasCidrBlock = atlasCidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder awsAccountId(String awsAccountId) {
            if (awsAccountId == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "awsAccountId");
            }
            this.awsAccountId = awsAccountId;
            return this;
        }
        @CustomType.Setter
        public Builder azureDirectoryId(String azureDirectoryId) {
            if (azureDirectoryId == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "azureDirectoryId");
            }
            this.azureDirectoryId = azureDirectoryId;
            return this;
        }
        @CustomType.Setter
        public Builder azureSubscriptionId(String azureSubscriptionId) {
            if (azureSubscriptionId == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "azureSubscriptionId");
            }
            this.azureSubscriptionId = azureSubscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder connectionId(String connectionId) {
            if (connectionId == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "connectionId");
            }
            this.connectionId = connectionId;
            return this;
        }
        @CustomType.Setter
        public Builder containerId(String containerId) {
            if (containerId == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "containerId");
            }
            this.containerId = containerId;
            return this;
        }
        @CustomType.Setter
        public Builder errorMessage(String errorMessage) {
            if (errorMessage == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "errorMessage");
            }
            this.errorMessage = errorMessage;
            return this;
        }
        @CustomType.Setter
        public Builder errorState(String errorState) {
            if (errorState == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "errorState");
            }
            this.errorState = errorState;
            return this;
        }
        @CustomType.Setter
        public Builder errorStateName(String errorStateName) {
            if (errorStateName == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "errorStateName");
            }
            this.errorStateName = errorStateName;
            return this;
        }
        @CustomType.Setter
        public Builder gcpProjectId(String gcpProjectId) {
            if (gcpProjectId == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "gcpProjectId");
            }
            this.gcpProjectId = gcpProjectId;
            return this;
        }
        @CustomType.Setter
        public Builder networkName(String networkName) {
            if (networkName == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "networkName");
            }
            this.networkName = networkName;
            return this;
        }
        @CustomType.Setter
        public Builder peeringId(String peeringId) {
            if (peeringId == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "peeringId");
            }
            this.peeringId = peeringId;
            return this;
        }
        @CustomType.Setter
        public Builder providerName(String providerName) {
            if (providerName == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "providerName");
            }
            this.providerName = providerName;
            return this;
        }
        @CustomType.Setter
        public Builder resourceGroupName(String resourceGroupName) {
            if (resourceGroupName == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "resourceGroupName");
            }
            this.resourceGroupName = resourceGroupName;
            return this;
        }
        @CustomType.Setter
        public Builder routeTableCidrBlock(String routeTableCidrBlock) {
            if (routeTableCidrBlock == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "routeTableCidrBlock");
            }
            this.routeTableCidrBlock = routeTableCidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder statusName(String statusName) {
            if (statusName == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "statusName");
            }
            this.statusName = statusName;
            return this;
        }
        @CustomType.Setter
        public Builder vnetName(String vnetName) {
            if (vnetName == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "vnetName");
            }
            this.vnetName = vnetName;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetNetworkPeeringsResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        public GetNetworkPeeringsResult build() {
            final var _resultValue = new GetNetworkPeeringsResult();
            _resultValue.accepterRegionName = accepterRegionName;
            _resultValue.atlasCidrBlock = atlasCidrBlock;
            _resultValue.awsAccountId = awsAccountId;
            _resultValue.azureDirectoryId = azureDirectoryId;
            _resultValue.azureSubscriptionId = azureSubscriptionId;
            _resultValue.connectionId = connectionId;
            _resultValue.containerId = containerId;
            _resultValue.errorMessage = errorMessage;
            _resultValue.errorState = errorState;
            _resultValue.errorStateName = errorStateName;
            _resultValue.gcpProjectId = gcpProjectId;
            _resultValue.networkName = networkName;
            _resultValue.peeringId = peeringId;
            _resultValue.providerName = providerName;
            _resultValue.resourceGroupName = resourceGroupName;
            _resultValue.routeTableCidrBlock = routeTableCidrBlock;
            _resultValue.status = status;
            _resultValue.statusName = statusName;
            _resultValue.vnetName = vnetName;
            _resultValue.vpcId = vpcId;
            return _resultValue;
        }
    }
}
