// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.mongodbatlas.AuditingArgs;
import com.pulumi.mongodbatlas.Utilities;
import com.pulumi.mongodbatlas.inputs.AuditingState;
import java.lang.Boolean;
import java.lang.String;
import javax.annotation.Nullable;

/**
 * ## # Resource: mongodbatlas.Auditing
 * 
 * `mongodbatlas.Auditing` provides an Auditing resource. This allows auditing to be created.
 * 
 * ## Example Usage
 * 
 * &lt;!--Start PulumiCodeChooser --&gt;
 * <pre>
 * {@code
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.Auditing;
 * import com.pulumi.mongodbatlas.AuditingArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new Auditing("test", AuditingArgs.builder()
 *             .projectId("<project-id>")
 *             .auditFilter("{ 'atype': 'authenticate', 'param': {   'user': 'auditAdmin',   'db': 'admin',   'mechanism': 'SCRAM-SHA-1' }}")
 *             .auditAuthorizationSuccess(false)
 *             .enabled(true)
 *             .build());
 * 
 *     }
 * }
 * }
 * </pre>
 * &lt;!--End PulumiCodeChooser --&gt;
 * 
 * ## Import
 * 
 * Auditing must be imported using auditing ID, e.g.
 * 
 * ```sh
 * $ pulumi import mongodbatlas:index/auditing:Auditing my_auditing 5d09d6a59ccf6445652a444a
 * ```
 * For more information see: [MongoDB Atlas API Reference.](https://docs.atlas.mongodb.com/reference/api/auditing/)
 * 
 */
@ResourceType(type="mongodbatlas:index/auditing:Auditing")
public class Auditing extends com.pulumi.resources.CustomResource {
    /**
     * Indicates whether the auditing system captures successful authentication attempts for audit filters using the &#34;atype&#34; : &#34;authCheck&#34; auditing event. For more information, see [auditAuthorizationSuccess](https://docs.mongodb.com/manual/reference/parameters/#param.auditAuthorizationSuccess).  **Warning! Enabling Audit authorization successes can severely impact cluster performance. Enable this option with caution.**
     * 
     */
    @Export(name="auditAuthorizationSuccess", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> auditAuthorizationSuccess;

    /**
     * @return Indicates whether the auditing system captures successful authentication attempts for audit filters using the &#34;atype&#34; : &#34;authCheck&#34; auditing event. For more information, see [auditAuthorizationSuccess](https://docs.mongodb.com/manual/reference/parameters/#param.auditAuthorizationSuccess).  **Warning! Enabling Audit authorization successes can severely impact cluster performance. Enable this option with caution.**
     * 
     */
    public Output<Boolean> auditAuthorizationSuccess() {
        return this.auditAuthorizationSuccess;
    }
    /**
     * JSON-formatted audit filter. For complete documentation on custom auditing filters, see [Configure Audit Filters](https://docs.mongodb.com/manual/tutorial/configure-audit-filters/).
     * 
     */
    @Export(name="auditFilter", refs={String.class}, tree="[0]")
    private Output<String> auditFilter;

    /**
     * @return JSON-formatted audit filter. For complete documentation on custom auditing filters, see [Configure Audit Filters](https://docs.mongodb.com/manual/tutorial/configure-audit-filters/).
     * 
     */
    public Output<String> auditFilter() {
        return this.auditFilter;
    }
    /**
     * Denotes the configuration method for the audit filter. Possible values are:
     * * NONE - auditing not configured for the project.
     * * FILTER_BUILDER - auditing configured via Atlas UI filter builder.
     * * FILTER_JSON - auditing configured via Atlas custom filter or API.
     * 
     */
    @Export(name="configurationType", refs={String.class}, tree="[0]")
    private Output<String> configurationType;

    /**
     * @return Denotes the configuration method for the audit filter. Possible values are:
     * * NONE - auditing not configured for the project.
     * * FILTER_BUILDER - auditing configured via Atlas UI filter builder.
     * * FILTER_JSON - auditing configured via Atlas custom filter or API.
     * 
     */
    public Output<String> configurationType() {
        return this.configurationType;
    }
    /**
     * Denotes whether or not the project associated with the {project_id} has database auditing enabled.  Defaults to false.
     * 
     * &gt; **NOTE:** Auditing created by API Keys must belong to an existing organization.
     * 
     */
    @Export(name="enabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> enabled;

    /**
     * @return Denotes whether or not the project associated with the {project_id} has database auditing enabled.  Defaults to false.
     * 
     * &gt; **NOTE:** Auditing created by API Keys must belong to an existing organization.
     * 
     */
    public Output<Boolean> enabled() {
        return this.enabled;
    }
    /**
     * The unique ID for the project to configure auditing. **Note: When changing this value to a different project_id it will delete the current audit settings for the original project that was assigned to.**
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return The unique ID for the project to configure auditing. **Note: When changing this value to a different project_id it will delete the current audit settings for the original project that was assigned to.**
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public Auditing(java.lang.String name) {
        this(name, AuditingArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public Auditing(java.lang.String name, AuditingArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public Auditing(java.lang.String name, AuditingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/auditing:Auditing", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private Auditing(java.lang.String name, Output<java.lang.String> id, @Nullable AuditingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/auditing:Auditing", name, state, makeResourceOptions(options, id), false);
    }

    private static AuditingArgs makeArgs(AuditingArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? AuditingArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static Auditing get(java.lang.String name, Output<java.lang.String> id, @Nullable AuditingState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new Auditing(name, id, state, options);
    }
}
