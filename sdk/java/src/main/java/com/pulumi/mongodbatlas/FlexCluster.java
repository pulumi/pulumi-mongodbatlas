// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.mongodbatlas.FlexClusterArgs;
import com.pulumi.mongodbatlas.Utilities;
import com.pulumi.mongodbatlas.inputs.FlexClusterState;
import com.pulumi.mongodbatlas.outputs.FlexClusterBackupSettings;
import com.pulumi.mongodbatlas.outputs.FlexClusterConnectionStrings;
import com.pulumi.mongodbatlas.outputs.FlexClusterProviderSettings;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Optional;
import javax.annotation.Nullable;

/**
 * ## # Resource: mongodbatlas.FlexCluster
 * 
 * `mongodbatlas.FlexCluster` provides a Flex Cluster resource. The resource lets you create, update, delete and import a flex cluster.
 * 
 * **RECOMMENDATION:** We recommend using the `mongodbatlas.AdvancedCluster` resource instead of the `mongodbatlas.FlexCluster` resource to create and manage Flex clusters. The `mongodbatlas.AdvancedCluster` resource not only supports Flex clusters, but also supports tenant and dedicated clusters, providing easier migration between different cluster types. For more information, see the Advanced Cluster resource.
 * 
 * ## Example Usage
 * 
 * ## Import
 * 
 * You can import the Flex Cluster resource by using the Project ID and Flex Cluster name, in the format `PROJECT_ID-FLEX_CLUSTER_NAME`. For example:
 * 
 * For more information see: [MongoDB Atlas API - Flex Cluster](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Flex-Clusters/operation/createFlexcluster) Documentation.
 * 
 */
@ResourceType(type="mongodbatlas:index/flexCluster:FlexCluster")
public class FlexCluster extends com.pulumi.resources.CustomResource {
    /**
     * Flex backup configuration
     * 
     */
    @Export(name="backupSettings", refs={FlexClusterBackupSettings.class}, tree="[0]")
    private Output<FlexClusterBackupSettings> backupSettings;

    /**
     * @return Flex backup configuration
     * 
     */
    public Output<FlexClusterBackupSettings> backupSettings() {
        return this.backupSettings;
    }
    /**
     * Flex cluster topology.
     * 
     */
    @Export(name="clusterType", refs={String.class}, tree="[0]")
    private Output<String> clusterType;

    /**
     * @return Flex cluster topology.
     * 
     */
    public Output<String> clusterType() {
        return this.clusterType;
    }
    /**
     * Collection of Uniform Resource Locators that point to the MongoDB database.
     * 
     */
    @Export(name="connectionStrings", refs={FlexClusterConnectionStrings.class}, tree="[0]")
    private Output<FlexClusterConnectionStrings> connectionStrings;

    /**
     * @return Collection of Uniform Resource Locators that point to the MongoDB database.
     * 
     */
    public Output<FlexClusterConnectionStrings> connectionStrings() {
        return this.connectionStrings;
    }
    /**
     * Date and time when MongoDB Cloud created this instance. This parameter expresses its value in ISO 8601 format in UTC.
     * 
     */
    @Export(name="createDate", refs={String.class}, tree="[0]")
    private Output<String> createDate;

    /**
     * @return Date and time when MongoDB Cloud created this instance. This parameter expresses its value in ISO 8601 format in UTC.
     * 
     */
    public Output<String> createDate() {
        return this.createDate;
    }
    /**
     * Version of MongoDB that the instance runs.
     * 
     */
    @Export(name="mongoDbVersion", refs={String.class}, tree="[0]")
    private Output<String> mongoDbVersion;

    /**
     * @return Version of MongoDB that the instance runs.
     * 
     */
    public Output<String> mongoDbVersion() {
        return this.mongoDbVersion;
    }
    /**
     * Human-readable label that identifies the instance.
     * 
     */
    @Export(name="name", refs={String.class}, tree="[0]")
    private Output<String> name;

    /**
     * @return Human-readable label that identifies the instance.
     * 
     */
    public Output<String> name() {
        return this.name;
    }
    /**
     * Unique 24-hexadecimal character string that identifies the project.
     * 
     */
    @Export(name="projectId", refs={String.class}, tree="[0]")
    private Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal character string that identifies the project.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
     * 
     */
    @Export(name="providerSettings", refs={FlexClusterProviderSettings.class}, tree="[0]")
    private Output<FlexClusterProviderSettings> providerSettings;

    /**
     * @return Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
     * 
     */
    public Output<FlexClusterProviderSettings> providerSettings() {
        return this.providerSettings;
    }
    /**
     * Human-readable label that indicates the current operating condition of this instance.
     * 
     */
    @Export(name="stateName", refs={String.class}, tree="[0]")
    private Output<String> stateName;

    /**
     * @return Human-readable label that indicates the current operating condition of this instance.
     * 
     */
    public Output<String> stateName() {
        return this.stateName;
    }
    /**
     * Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
     * 
     */
    @Export(name="tags", refs={Map.class,String.class}, tree="[0,1,1]")
    private Output</* @Nullable */ Map<String,String>> tags;

    /**
     * @return Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
     * 
     */
    public Output<Optional<Map<String,String>>> tags() {
        return Codegen.optional(this.tags);
    }
    /**
     * Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won&#39;t delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
     * 
     */
    @Export(name="terminationProtectionEnabled", refs={Boolean.class}, tree="[0]")
    private Output<Boolean> terminationProtectionEnabled;

    /**
     * @return Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won&#39;t delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
     * 
     */
    public Output<Boolean> terminationProtectionEnabled() {
        return this.terminationProtectionEnabled;
    }
    /**
     * Method by which the cluster maintains the MongoDB versions.
     * 
     */
    @Export(name="versionReleaseSystem", refs={String.class}, tree="[0]")
    private Output<String> versionReleaseSystem;

    /**
     * @return Method by which the cluster maintains the MongoDB versions.
     * 
     */
    public Output<String> versionReleaseSystem() {
        return this.versionReleaseSystem;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public FlexCluster(java.lang.String name) {
        this(name, FlexClusterArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public FlexCluster(java.lang.String name, FlexClusterArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public FlexCluster(java.lang.String name, FlexClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/flexCluster:FlexCluster", name, makeArgs(args, options), makeResourceOptions(options, Codegen.empty()), false);
    }

    private FlexCluster(java.lang.String name, Output<java.lang.String> id, @Nullable FlexClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/flexCluster:FlexCluster", name, state, makeResourceOptions(options, id), false);
    }

    private static FlexClusterArgs makeArgs(FlexClusterArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        if (options != null && options.getUrn().isPresent()) {
            return null;
        }
        return args == null ? FlexClusterArgs.Empty : args;
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<java.lang.String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static FlexCluster get(java.lang.String name, Output<java.lang.String> id, @Nullable FlexClusterState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new FlexCluster(name, id, state, options);
    }
}
