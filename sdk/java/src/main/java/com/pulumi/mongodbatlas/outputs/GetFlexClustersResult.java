// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetFlexClustersResultBackupSettings;
import com.pulumi.mongodbatlas.outputs.GetFlexClustersResultConnectionStrings;
import com.pulumi.mongodbatlas.outputs.GetFlexClustersResultProviderSettings;
import java.lang.Boolean;
import java.lang.String;
import java.util.Map;
import java.util.Objects;

@CustomType
public final class GetFlexClustersResult {
    /**
     * @return Flex backup configuration
     * 
     */
    private GetFlexClustersResultBackupSettings backupSettings;
    /**
     * @return Flex cluster topology.
     * 
     */
    private String clusterType;
    /**
     * @return Collection of Uniform Resource Locators that point to the MongoDB database.
     * 
     */
    private GetFlexClustersResultConnectionStrings connectionStrings;
    /**
     * @return Date and time when MongoDB Cloud created this instance. This parameter expresses its value in ISO 8601 format in UTC.
     * 
     */
    private String createDate;
    /**
     * @return Unique 24-hexadecimal digit string that identifies the instance.
     * 
     */
    private String id;
    /**
     * @return Version of MongoDB that the instance runs.
     * 
     */
    private String mongoDbVersion;
    /**
     * @return Human-readable label that identifies the instance.
     * 
     */
    private String name;
    /**
     * @return Unique 24-hexadecimal character string that identifies the project.
     * 
     */
    private String projectId;
    /**
     * @return Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
     * 
     */
    private GetFlexClustersResultProviderSettings providerSettings;
    /**
     * @return Human-readable label that indicates the current operating condition of this instance.
     * 
     */
    private String stateName;
    /**
     * @return Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
     * 
     */
    private Map<String,String> tags;
    /**
     * @return Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won&#39;t delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
     * 
     */
    private Boolean terminationProtectionEnabled;
    /**
     * @return Method by which the cluster maintains the MongoDB versions.
     * 
     */
    private String versionReleaseSystem;

    private GetFlexClustersResult() {}
    /**
     * @return Flex backup configuration
     * 
     */
    public GetFlexClustersResultBackupSettings backupSettings() {
        return this.backupSettings;
    }
    /**
     * @return Flex cluster topology.
     * 
     */
    public String clusterType() {
        return this.clusterType;
    }
    /**
     * @return Collection of Uniform Resource Locators that point to the MongoDB database.
     * 
     */
    public GetFlexClustersResultConnectionStrings connectionStrings() {
        return this.connectionStrings;
    }
    /**
     * @return Date and time when MongoDB Cloud created this instance. This parameter expresses its value in ISO 8601 format in UTC.
     * 
     */
    public String createDate() {
        return this.createDate;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies the instance.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Version of MongoDB that the instance runs.
     * 
     */
    public String mongoDbVersion() {
        return this.mongoDbVersion;
    }
    /**
     * @return Human-readable label that identifies the instance.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Unique 24-hexadecimal character string that identifies the project.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Group of cloud provider settings that configure the provisioned MongoDB flex cluster.
     * 
     */
    public GetFlexClustersResultProviderSettings providerSettings() {
        return this.providerSettings;
    }
    /**
     * @return Human-readable label that indicates the current operating condition of this instance.
     * 
     */
    public String stateName() {
        return this.stateName;
    }
    /**
     * @return Map that contains key-value pairs between 1 to 255 characters in length for tagging and categorizing the instance.
     * 
     */
    public Map<String,String> tags() {
        return this.tags;
    }
    /**
     * @return Flag that indicates whether termination protection is enabled on the cluster. If set to `true`, MongoDB Cloud won&#39;t delete the cluster. If set to `false`, MongoDB Cloud will delete the cluster.
     * 
     */
    public Boolean terminationProtectionEnabled() {
        return this.terminationProtectionEnabled;
    }
    /**
     * @return Method by which the cluster maintains the MongoDB versions.
     * 
     */
    public String versionReleaseSystem() {
        return this.versionReleaseSystem;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFlexClustersResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetFlexClustersResultBackupSettings backupSettings;
        private String clusterType;
        private GetFlexClustersResultConnectionStrings connectionStrings;
        private String createDate;
        private String id;
        private String mongoDbVersion;
        private String name;
        private String projectId;
        private GetFlexClustersResultProviderSettings providerSettings;
        private String stateName;
        private Map<String,String> tags;
        private Boolean terminationProtectionEnabled;
        private String versionReleaseSystem;
        public Builder() {}
        public Builder(GetFlexClustersResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.backupSettings = defaults.backupSettings;
    	      this.clusterType = defaults.clusterType;
    	      this.connectionStrings = defaults.connectionStrings;
    	      this.createDate = defaults.createDate;
    	      this.id = defaults.id;
    	      this.mongoDbVersion = defaults.mongoDbVersion;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.providerSettings = defaults.providerSettings;
    	      this.stateName = defaults.stateName;
    	      this.tags = defaults.tags;
    	      this.terminationProtectionEnabled = defaults.terminationProtectionEnabled;
    	      this.versionReleaseSystem = defaults.versionReleaseSystem;
        }

        @CustomType.Setter
        public Builder backupSettings(GetFlexClustersResultBackupSettings backupSettings) {
            if (backupSettings == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "backupSettings");
            }
            this.backupSettings = backupSettings;
            return this;
        }
        @CustomType.Setter
        public Builder clusterType(String clusterType) {
            if (clusterType == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "clusterType");
            }
            this.clusterType = clusterType;
            return this;
        }
        @CustomType.Setter
        public Builder connectionStrings(GetFlexClustersResultConnectionStrings connectionStrings) {
            if (connectionStrings == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "connectionStrings");
            }
            this.connectionStrings = connectionStrings;
            return this;
        }
        @CustomType.Setter
        public Builder createDate(String createDate) {
            if (createDate == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "createDate");
            }
            this.createDate = createDate;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder mongoDbVersion(String mongoDbVersion) {
            if (mongoDbVersion == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "mongoDbVersion");
            }
            this.mongoDbVersion = mongoDbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder providerSettings(GetFlexClustersResultProviderSettings providerSettings) {
            if (providerSettings == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "providerSettings");
            }
            this.providerSettings = providerSettings;
            return this;
        }
        @CustomType.Setter
        public Builder stateName(String stateName) {
            if (stateName == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "stateName");
            }
            this.stateName = stateName;
            return this;
        }
        @CustomType.Setter
        public Builder tags(Map<String,String> tags) {
            if (tags == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "tags");
            }
            this.tags = tags;
            return this;
        }
        @CustomType.Setter
        public Builder terminationProtectionEnabled(Boolean terminationProtectionEnabled) {
            if (terminationProtectionEnabled == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "terminationProtectionEnabled");
            }
            this.terminationProtectionEnabled = terminationProtectionEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder versionReleaseSystem(String versionReleaseSystem) {
            if (versionReleaseSystem == null) {
              throw new MissingRequiredPropertyException("GetFlexClustersResult", "versionReleaseSystem");
            }
            this.versionReleaseSystem = versionReleaseSystem;
            return this;
        }
        public GetFlexClustersResult build() {
            final var _resultValue = new GetFlexClustersResult();
            _resultValue.backupSettings = backupSettings;
            _resultValue.clusterType = clusterType;
            _resultValue.connectionStrings = connectionStrings;
            _resultValue.createDate = createDate;
            _resultValue.id = id;
            _resultValue.mongoDbVersion = mongoDbVersion;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.providerSettings = providerSettings;
            _resultValue.stateName = stateName;
            _resultValue.tags = tags;
            _resultValue.terminationProtectionEnabled = terminationProtectionEnabled;
            _resultValue.versionReleaseSystem = versionReleaseSystem;
            return _resultValue;
        }
    }
}
