// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class OrgInvitationState extends com.pulumi.resources.ResourceArgs {

    public static final OrgInvitationState Empty = new OrgInvitationState();

    /**
     * Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
     * 
     */
    @Import(name="createdAt")
    private @Nullable Output<String> createdAt;

    /**
     * @return Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
     * 
     */
    public Optional<Output<String>> createdAt() {
        return Optional.ofNullable(this.createdAt);
    }

    /**
     * Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
     * 
     */
    @Import(name="expiresAt")
    private @Nullable Output<String> expiresAt;

    /**
     * @return Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
     * 
     */
    public Optional<Output<String>> expiresAt() {
        return Optional.ofNullable(this.expiresAt);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies the invitation in Atlas.
     * 
     */
    @Import(name="invitationId")
    private @Nullable Output<String> invitationId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies the invitation in Atlas.
     * 
     */
    public Optional<Output<String>> invitationId() {
        return Optional.ofNullable(this.invitationId);
    }

    /**
     * Atlas user who invited `username` to the organization.
     * 
     */
    @Import(name="inviterUsername")
    private @Nullable Output<String> inviterUsername;

    /**
     * @return Atlas user who invited `username` to the organization.
     * 
     */
    public Optional<Output<String>> inviterUsername() {
        return Optional.ofNullable(this.inviterUsername);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies the organization to which you want to invite a user.
     * 
     */
    @Import(name="orgId")
    private @Nullable Output<String> orgId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies the organization to which you want to invite a user.
     * 
     */
    public Optional<Output<String>> orgId() {
        return Optional.ofNullable(this.orgId);
    }

    /**
     * Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles a user can have.
     * 
     */
    @Import(name="roles")
    private @Nullable Output<List<String>> roles;

    /**
     * @return Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles a user can have.
     * 
     */
    public Optional<Output<List<String>>> roles() {
        return Optional.ofNullable(this.roles);
    }

    /**
     * An array of unique 24-hexadecimal digit strings that identify the teams that the user was invited to join.
     * 
     */
    @Import(name="teamsIds")
    private @Nullable Output<List<String>> teamsIds;

    /**
     * @return An array of unique 24-hexadecimal digit strings that identify the teams that the user was invited to join.
     * 
     */
    public Optional<Output<List<String>>> teamsIds() {
        return Optional.ofNullable(this.teamsIds);
    }

    /**
     * Email address of the invited user. This is the address to which Atlas sends the invite. If the user accepts the invitation, they log in to Atlas with this username.
     * 
     */
    @Import(name="username")
    private @Nullable Output<String> username;

    /**
     * @return Email address of the invited user. This is the address to which Atlas sends the invite. If the user accepts the invitation, they log in to Atlas with this username.
     * 
     */
    public Optional<Output<String>> username() {
        return Optional.ofNullable(this.username);
    }

    private OrgInvitationState() {}

    private OrgInvitationState(OrgInvitationState $) {
        this.createdAt = $.createdAt;
        this.expiresAt = $.expiresAt;
        this.invitationId = $.invitationId;
        this.inviterUsername = $.inviterUsername;
        this.orgId = $.orgId;
        this.roles = $.roles;
        this.teamsIds = $.teamsIds;
        this.username = $.username;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(OrgInvitationState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private OrgInvitationState $;

        public Builder() {
            $ = new OrgInvitationState();
        }

        public Builder(OrgInvitationState defaults) {
            $ = new OrgInvitationState(Objects.requireNonNull(defaults));
        }

        /**
         * @param createdAt Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(@Nullable Output<String> createdAt) {
            $.createdAt = createdAt;
            return this;
        }

        /**
         * @param createdAt Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
         * 
         * @return builder
         * 
         */
        public Builder createdAt(String createdAt) {
            return createdAt(Output.of(createdAt));
        }

        /**
         * @param expiresAt Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(@Nullable Output<String> expiresAt) {
            $.expiresAt = expiresAt;
            return this;
        }

        /**
         * @param expiresAt Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
         * 
         * @return builder
         * 
         */
        public Builder expiresAt(String expiresAt) {
            return expiresAt(Output.of(expiresAt));
        }

        /**
         * @param invitationId Unique 24-hexadecimal digit string that identifies the invitation in Atlas.
         * 
         * @return builder
         * 
         */
        public Builder invitationId(@Nullable Output<String> invitationId) {
            $.invitationId = invitationId;
            return this;
        }

        /**
         * @param invitationId Unique 24-hexadecimal digit string that identifies the invitation in Atlas.
         * 
         * @return builder
         * 
         */
        public Builder invitationId(String invitationId) {
            return invitationId(Output.of(invitationId));
        }

        /**
         * @param inviterUsername Atlas user who invited `username` to the organization.
         * 
         * @return builder
         * 
         */
        public Builder inviterUsername(@Nullable Output<String> inviterUsername) {
            $.inviterUsername = inviterUsername;
            return this;
        }

        /**
         * @param inviterUsername Atlas user who invited `username` to the organization.
         * 
         * @return builder
         * 
         */
        public Builder inviterUsername(String inviterUsername) {
            return inviterUsername(Output.of(inviterUsername));
        }

        /**
         * @param orgId Unique 24-hexadecimal digit string that identifies the organization to which you want to invite a user.
         * 
         * @return builder
         * 
         */
        public Builder orgId(@Nullable Output<String> orgId) {
            $.orgId = orgId;
            return this;
        }

        /**
         * @param orgId Unique 24-hexadecimal digit string that identifies the organization to which you want to invite a user.
         * 
         * @return builder
         * 
         */
        public Builder orgId(String orgId) {
            return orgId(Output.of(orgId));
        }

        /**
         * @param roles Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles a user can have.
         * 
         * @return builder
         * 
         */
        public Builder roles(@Nullable Output<List<String>> roles) {
            $.roles = roles;
            return this;
        }

        /**
         * @param roles Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles a user can have.
         * 
         * @return builder
         * 
         */
        public Builder roles(List<String> roles) {
            return roles(Output.of(roles));
        }

        /**
         * @param roles Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. The [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#organization-roles) describes the roles a user can have.
         * 
         * @return builder
         * 
         */
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }

        /**
         * @param teamsIds An array of unique 24-hexadecimal digit strings that identify the teams that the user was invited to join.
         * 
         * @return builder
         * 
         */
        public Builder teamsIds(@Nullable Output<List<String>> teamsIds) {
            $.teamsIds = teamsIds;
            return this;
        }

        /**
         * @param teamsIds An array of unique 24-hexadecimal digit strings that identify the teams that the user was invited to join.
         * 
         * @return builder
         * 
         */
        public Builder teamsIds(List<String> teamsIds) {
            return teamsIds(Output.of(teamsIds));
        }

        /**
         * @param teamsIds An array of unique 24-hexadecimal digit strings that identify the teams that the user was invited to join.
         * 
         * @return builder
         * 
         */
        public Builder teamsIds(String... teamsIds) {
            return teamsIds(List.of(teamsIds));
        }

        /**
         * @param username Email address of the invited user. This is the address to which Atlas sends the invite. If the user accepts the invitation, they log in to Atlas with this username.
         * 
         * @return builder
         * 
         */
        public Builder username(@Nullable Output<String> username) {
            $.username = username;
            return this;
        }

        /**
         * @param username Email address of the invited user. This is the address to which Atlas sends the invite. If the user accepts the invitation, they log in to Atlas with this username.
         * 
         * @return builder
         * 
         */
        public Builder username(String username) {
            return username(Output.of(username));
        }

        public OrgInvitationState build() {
            return $;
        }
    }

}
