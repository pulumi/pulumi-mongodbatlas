// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FederatedDatabaseInstanceCloudProviderConfigAzureArgs extends com.pulumi.resources.ResourceArgs {

    public static final FederatedDatabaseInstanceCloudProviderConfigAzureArgs Empty = new FederatedDatabaseInstanceCloudProviderConfigAzureArgs();

    @Import(name="atlasAppId")
    private @Nullable Output<String> atlasAppId;

    public Optional<Output<String>> atlasAppId() {
        return Optional.ofNullable(this.atlasAppId);
    }

    @Import(name="roleId", required=true)
    private Output<String> roleId;

    public Output<String> roleId() {
        return this.roleId;
    }

    /**
     * Unique identifier of the Azure service principal that the Federated Database instance uses to access Azure Blob Storage.
     * 
     */
    @Import(name="servicePrincipalId")
    private @Nullable Output<String> servicePrincipalId;

    /**
     * @return Unique identifier of the Azure service principal that the Federated Database instance uses to access Azure Blob Storage.
     * 
     */
    public Optional<Output<String>> servicePrincipalId() {
        return Optional.ofNullable(this.servicePrincipalId);
    }

    /**
     * Unique identifier of the Azure Active Directory tenant where the service principal resides.
     * 
     */
    @Import(name="tenantId")
    private @Nullable Output<String> tenantId;

    /**
     * @return Unique identifier of the Azure Active Directory tenant where the service principal resides.
     * 
     */
    public Optional<Output<String>> tenantId() {
        return Optional.ofNullable(this.tenantId);
    }

    private FederatedDatabaseInstanceCloudProviderConfigAzureArgs() {}

    private FederatedDatabaseInstanceCloudProviderConfigAzureArgs(FederatedDatabaseInstanceCloudProviderConfigAzureArgs $) {
        this.atlasAppId = $.atlasAppId;
        this.roleId = $.roleId;
        this.servicePrincipalId = $.servicePrincipalId;
        this.tenantId = $.tenantId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FederatedDatabaseInstanceCloudProviderConfigAzureArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FederatedDatabaseInstanceCloudProviderConfigAzureArgs $;

        public Builder() {
            $ = new FederatedDatabaseInstanceCloudProviderConfigAzureArgs();
        }

        public Builder(FederatedDatabaseInstanceCloudProviderConfigAzureArgs defaults) {
            $ = new FederatedDatabaseInstanceCloudProviderConfigAzureArgs(Objects.requireNonNull(defaults));
        }

        public Builder atlasAppId(@Nullable Output<String> atlasAppId) {
            $.atlasAppId = atlasAppId;
            return this;
        }

        public Builder atlasAppId(String atlasAppId) {
            return atlasAppId(Output.of(atlasAppId));
        }

        public Builder roleId(Output<String> roleId) {
            $.roleId = roleId;
            return this;
        }

        public Builder roleId(String roleId) {
            return roleId(Output.of(roleId));
        }

        /**
         * @param servicePrincipalId Unique identifier of the Azure service principal that the Federated Database instance uses to access Azure Blob Storage.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalId(@Nullable Output<String> servicePrincipalId) {
            $.servicePrincipalId = servicePrincipalId;
            return this;
        }

        /**
         * @param servicePrincipalId Unique identifier of the Azure service principal that the Federated Database instance uses to access Azure Blob Storage.
         * 
         * @return builder
         * 
         */
        public Builder servicePrincipalId(String servicePrincipalId) {
            return servicePrincipalId(Output.of(servicePrincipalId));
        }

        /**
         * @param tenantId Unique identifier of the Azure Active Directory tenant where the service principal resides.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(@Nullable Output<String> tenantId) {
            $.tenantId = tenantId;
            return this;
        }

        /**
         * @param tenantId Unique identifier of the Azure Active Directory tenant where the service principal resides.
         * 
         * @return builder
         * 
         */
        public Builder tenantId(String tenantId) {
            return tenantId(Output.of(tenantId));
        }

        public FederatedDatabaseInstanceCloudProviderConfigAzureArgs build() {
            if ($.roleId == null) {
                throw new MissingRequiredPropertyException("FederatedDatabaseInstanceCloudProviderConfigAzureArgs", "roleId");
            }
            return $;
        }
    }

}
