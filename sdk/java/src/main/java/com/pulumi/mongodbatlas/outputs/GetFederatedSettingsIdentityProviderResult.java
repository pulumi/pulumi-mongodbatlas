// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsIdentityProviderAssociatedOrg;
import com.pulumi.mongodbatlas.outputs.GetFederatedSettingsIdentityProviderPemFileInfo;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetFederatedSettingsIdentityProviderResult {
    /**
     * @return Assertion consumer service URL to which the IdP sends the SAML response.
     * 
     */
    private String acsUrl;
    /**
     * @return List that contains the configured domains from which users can log in for this IdP.
     * 
     */
    private List<String> associatedDomains;
    /**
     * @return List that contains the organizations from which users can log in for this IdP.
     * 
     */
    private List<GetFederatedSettingsIdentityProviderAssociatedOrg> associatedOrgs;
    /**
     * @return Identifier of the intended recipient of the token.
     * 
     */
    private String audience;
    /**
     * @return Identifier for the intended audience of the SAML Assertion.
     * 
     */
    private String audienceUri;
    /**
     * @return Indicates whether authorization is granted based on group membership or user ID. Valid values are `GROUP` or `USER`.
     * 
     */
    private String authorizationType;
    /**
     * @return Client identifier that is assigned to an application by the Identity Provider.
     * 
     */
    private String clientId;
    /**
     * @return The description of the identity provider.
     * 
     */
    private String description;
    /**
     * @return Human-readable label that identifies the IdP.
     * 
     */
    private String displayName;
    /**
     * @return Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     * 
     */
    private String federationSettingsId;
    /**
     * @return Identifier of the claim which contains IdP Group IDs in the token.
     * 
     */
    private String groupsClaim;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String identityProviderId;
    /**
     * @return Unique 24-hexadecimal digit string that identifies the IdP
     * 
     */
    private String idpId;
    /**
     * @return Type of the identity provider. Valid values are `WORKFORCE` or `WORKLOAD`.
     * 
     */
    private String idpType;
    /**
     * @return Identifier for the issuer of the SAML Assertion.
     * 
     */
    private String issuerUri;
    /**
     * @return Unique 20-hexadecimal digit string that identifies the IdP.
     * 
     */
    private String oktaIdpId;
    private List<GetFederatedSettingsIdentityProviderPemFileInfo> pemFileInfos;
    /**
     * @return The protocol of the identity provider. Valid values are `SAML` or `OIDC`.
     * 
     */
    private String protocol;
    /**
     * @return SAML Authentication Request Protocol binding used to send the AuthNRequest. Atlas supports the following binding values:
     * - HTTP POST
     * - HTTP REDIRECT
     * 
     */
    private String requestBinding;
    /**
     * @return Scopes that MongoDB applications will request from the authorization endpoint.
     * 
     */
    private List<String> requestedScopes;
    /**
     * @return Algorithm used to encrypt the IdP signature. Atlas supports the following signature algorithm values:
     * - SHA-1
     * - SHA-256
     * 
     */
    private String responseSignatureAlgorithm;
    /**
     * @return Flag that indicates whether the IdP has enabled Bypass SAML Mode. Enabling this mode generates a URL that allows you bypass SAML and login to your organizations at any point. You can authenticate with this special URL only when Bypass Mode is enabled. Set this parameter to true during testing. This keeps you from getting locked out of MongoDB.
     * 
     */
    private Boolean ssoDebugEnabled;
    /**
     * @return URL of the receiver of the SAML AuthNRequest.
     * 
     */
    private String ssoUrl;
    /**
     * @return Label that indicates whether the identity provider is active. The IdP is Inactive until you map at least one domain to the IdP.
     * 
     */
    private String status;
    /**
     * @return Identifier of the claim which contains the user ID in the token.
     * 
     */
    private String userClaim;

    private GetFederatedSettingsIdentityProviderResult() {}
    /**
     * @return Assertion consumer service URL to which the IdP sends the SAML response.
     * 
     */
    public String acsUrl() {
        return this.acsUrl;
    }
    /**
     * @return List that contains the configured domains from which users can log in for this IdP.
     * 
     */
    public List<String> associatedDomains() {
        return this.associatedDomains;
    }
    /**
     * @return List that contains the organizations from which users can log in for this IdP.
     * 
     */
    public List<GetFederatedSettingsIdentityProviderAssociatedOrg> associatedOrgs() {
        return this.associatedOrgs;
    }
    /**
     * @return Identifier of the intended recipient of the token.
     * 
     */
    public String audience() {
        return this.audience;
    }
    /**
     * @return Identifier for the intended audience of the SAML Assertion.
     * 
     */
    public String audienceUri() {
        return this.audienceUri;
    }
    /**
     * @return Indicates whether authorization is granted based on group membership or user ID. Valid values are `GROUP` or `USER`.
     * 
     */
    public String authorizationType() {
        return this.authorizationType;
    }
    /**
     * @return Client identifier that is assigned to an application by the Identity Provider.
     * 
     */
    public String clientId() {
        return this.clientId;
    }
    /**
     * @return The description of the identity provider.
     * 
     */
    public String description() {
        return this.description;
    }
    /**
     * @return Human-readable label that identifies the IdP.
     * 
     */
    public String displayName() {
        return this.displayName;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     * 
     */
    public String federationSettingsId() {
        return this.federationSettingsId;
    }
    /**
     * @return Identifier of the claim which contains IdP Group IDs in the token.
     * 
     */
    public String groupsClaim() {
        return this.groupsClaim;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String identityProviderId() {
        return this.identityProviderId;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies the IdP
     * 
     */
    public String idpId() {
        return this.idpId;
    }
    /**
     * @return Type of the identity provider. Valid values are `WORKFORCE` or `WORKLOAD`.
     * 
     */
    public String idpType() {
        return this.idpType;
    }
    /**
     * @return Identifier for the issuer of the SAML Assertion.
     * 
     */
    public String issuerUri() {
        return this.issuerUri;
    }
    /**
     * @return Unique 20-hexadecimal digit string that identifies the IdP.
     * 
     */
    public String oktaIdpId() {
        return this.oktaIdpId;
    }
    public List<GetFederatedSettingsIdentityProviderPemFileInfo> pemFileInfos() {
        return this.pemFileInfos;
    }
    /**
     * @return The protocol of the identity provider. Valid values are `SAML` or `OIDC`.
     * 
     */
    public String protocol() {
        return this.protocol;
    }
    /**
     * @return SAML Authentication Request Protocol binding used to send the AuthNRequest. Atlas supports the following binding values:
     * - HTTP POST
     * - HTTP REDIRECT
     * 
     */
    public String requestBinding() {
        return this.requestBinding;
    }
    /**
     * @return Scopes that MongoDB applications will request from the authorization endpoint.
     * 
     */
    public List<String> requestedScopes() {
        return this.requestedScopes;
    }
    /**
     * @return Algorithm used to encrypt the IdP signature. Atlas supports the following signature algorithm values:
     * - SHA-1
     * - SHA-256
     * 
     */
    public String responseSignatureAlgorithm() {
        return this.responseSignatureAlgorithm;
    }
    /**
     * @return Flag that indicates whether the IdP has enabled Bypass SAML Mode. Enabling this mode generates a URL that allows you bypass SAML and login to your organizations at any point. You can authenticate with this special URL only when Bypass Mode is enabled. Set this parameter to true during testing. This keeps you from getting locked out of MongoDB.
     * 
     */
    public Boolean ssoDebugEnabled() {
        return this.ssoDebugEnabled;
    }
    /**
     * @return URL of the receiver of the SAML AuthNRequest.
     * 
     */
    public String ssoUrl() {
        return this.ssoUrl;
    }
    /**
     * @return Label that indicates whether the identity provider is active. The IdP is Inactive until you map at least one domain to the IdP.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Identifier of the claim which contains the user ID in the token.
     * 
     */
    public String userClaim() {
        return this.userClaim;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFederatedSettingsIdentityProviderResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String acsUrl;
        private List<String> associatedDomains;
        private List<GetFederatedSettingsIdentityProviderAssociatedOrg> associatedOrgs;
        private String audience;
        private String audienceUri;
        private String authorizationType;
        private String clientId;
        private String description;
        private String displayName;
        private String federationSettingsId;
        private String groupsClaim;
        private String id;
        private String identityProviderId;
        private String idpId;
        private String idpType;
        private String issuerUri;
        private String oktaIdpId;
        private List<GetFederatedSettingsIdentityProviderPemFileInfo> pemFileInfos;
        private String protocol;
        private String requestBinding;
        private List<String> requestedScopes;
        private String responseSignatureAlgorithm;
        private Boolean ssoDebugEnabled;
        private String ssoUrl;
        private String status;
        private String userClaim;
        public Builder() {}
        public Builder(GetFederatedSettingsIdentityProviderResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.acsUrl = defaults.acsUrl;
    	      this.associatedDomains = defaults.associatedDomains;
    	      this.associatedOrgs = defaults.associatedOrgs;
    	      this.audience = defaults.audience;
    	      this.audienceUri = defaults.audienceUri;
    	      this.authorizationType = defaults.authorizationType;
    	      this.clientId = defaults.clientId;
    	      this.description = defaults.description;
    	      this.displayName = defaults.displayName;
    	      this.federationSettingsId = defaults.federationSettingsId;
    	      this.groupsClaim = defaults.groupsClaim;
    	      this.id = defaults.id;
    	      this.identityProviderId = defaults.identityProviderId;
    	      this.idpId = defaults.idpId;
    	      this.idpType = defaults.idpType;
    	      this.issuerUri = defaults.issuerUri;
    	      this.oktaIdpId = defaults.oktaIdpId;
    	      this.pemFileInfos = defaults.pemFileInfos;
    	      this.protocol = defaults.protocol;
    	      this.requestBinding = defaults.requestBinding;
    	      this.requestedScopes = defaults.requestedScopes;
    	      this.responseSignatureAlgorithm = defaults.responseSignatureAlgorithm;
    	      this.ssoDebugEnabled = defaults.ssoDebugEnabled;
    	      this.ssoUrl = defaults.ssoUrl;
    	      this.status = defaults.status;
    	      this.userClaim = defaults.userClaim;
        }

        @CustomType.Setter
        public Builder acsUrl(String acsUrl) {
            if (acsUrl == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "acsUrl");
            }
            this.acsUrl = acsUrl;
            return this;
        }
        @CustomType.Setter
        public Builder associatedDomains(List<String> associatedDomains) {
            if (associatedDomains == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "associatedDomains");
            }
            this.associatedDomains = associatedDomains;
            return this;
        }
        public Builder associatedDomains(String... associatedDomains) {
            return associatedDomains(List.of(associatedDomains));
        }
        @CustomType.Setter
        public Builder associatedOrgs(List<GetFederatedSettingsIdentityProviderAssociatedOrg> associatedOrgs) {
            if (associatedOrgs == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "associatedOrgs");
            }
            this.associatedOrgs = associatedOrgs;
            return this;
        }
        public Builder associatedOrgs(GetFederatedSettingsIdentityProviderAssociatedOrg... associatedOrgs) {
            return associatedOrgs(List.of(associatedOrgs));
        }
        @CustomType.Setter
        public Builder audience(String audience) {
            if (audience == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "audience");
            }
            this.audience = audience;
            return this;
        }
        @CustomType.Setter
        public Builder audienceUri(String audienceUri) {
            if (audienceUri == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "audienceUri");
            }
            this.audienceUri = audienceUri;
            return this;
        }
        @CustomType.Setter
        public Builder authorizationType(String authorizationType) {
            if (authorizationType == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "authorizationType");
            }
            this.authorizationType = authorizationType;
            return this;
        }
        @CustomType.Setter
        public Builder clientId(String clientId) {
            if (clientId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "clientId");
            }
            this.clientId = clientId;
            return this;
        }
        @CustomType.Setter
        public Builder description(String description) {
            if (description == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "description");
            }
            this.description = description;
            return this;
        }
        @CustomType.Setter
        public Builder displayName(String displayName) {
            if (displayName == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "displayName");
            }
            this.displayName = displayName;
            return this;
        }
        @CustomType.Setter
        public Builder federationSettingsId(String federationSettingsId) {
            if (federationSettingsId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "federationSettingsId");
            }
            this.federationSettingsId = federationSettingsId;
            return this;
        }
        @CustomType.Setter
        public Builder groupsClaim(String groupsClaim) {
            if (groupsClaim == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "groupsClaim");
            }
            this.groupsClaim = groupsClaim;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder identityProviderId(String identityProviderId) {
            if (identityProviderId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "identityProviderId");
            }
            this.identityProviderId = identityProviderId;
            return this;
        }
        @CustomType.Setter
        public Builder idpId(String idpId) {
            if (idpId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "idpId");
            }
            this.idpId = idpId;
            return this;
        }
        @CustomType.Setter
        public Builder idpType(String idpType) {
            if (idpType == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "idpType");
            }
            this.idpType = idpType;
            return this;
        }
        @CustomType.Setter
        public Builder issuerUri(String issuerUri) {
            if (issuerUri == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "issuerUri");
            }
            this.issuerUri = issuerUri;
            return this;
        }
        @CustomType.Setter
        public Builder oktaIdpId(String oktaIdpId) {
            if (oktaIdpId == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "oktaIdpId");
            }
            this.oktaIdpId = oktaIdpId;
            return this;
        }
        @CustomType.Setter
        public Builder pemFileInfos(List<GetFederatedSettingsIdentityProviderPemFileInfo> pemFileInfos) {
            if (pemFileInfos == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "pemFileInfos");
            }
            this.pemFileInfos = pemFileInfos;
            return this;
        }
        public Builder pemFileInfos(GetFederatedSettingsIdentityProviderPemFileInfo... pemFileInfos) {
            return pemFileInfos(List.of(pemFileInfos));
        }
        @CustomType.Setter
        public Builder protocol(String protocol) {
            if (protocol == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "protocol");
            }
            this.protocol = protocol;
            return this;
        }
        @CustomType.Setter
        public Builder requestBinding(String requestBinding) {
            if (requestBinding == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "requestBinding");
            }
            this.requestBinding = requestBinding;
            return this;
        }
        @CustomType.Setter
        public Builder requestedScopes(List<String> requestedScopes) {
            if (requestedScopes == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "requestedScopes");
            }
            this.requestedScopes = requestedScopes;
            return this;
        }
        public Builder requestedScopes(String... requestedScopes) {
            return requestedScopes(List.of(requestedScopes));
        }
        @CustomType.Setter
        public Builder responseSignatureAlgorithm(String responseSignatureAlgorithm) {
            if (responseSignatureAlgorithm == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "responseSignatureAlgorithm");
            }
            this.responseSignatureAlgorithm = responseSignatureAlgorithm;
            return this;
        }
        @CustomType.Setter
        public Builder ssoDebugEnabled(Boolean ssoDebugEnabled) {
            if (ssoDebugEnabled == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "ssoDebugEnabled");
            }
            this.ssoDebugEnabled = ssoDebugEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder ssoUrl(String ssoUrl) {
            if (ssoUrl == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "ssoUrl");
            }
            this.ssoUrl = ssoUrl;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder userClaim(String userClaim) {
            if (userClaim == null) {
              throw new MissingRequiredPropertyException("GetFederatedSettingsIdentityProviderResult", "userClaim");
            }
            this.userClaim = userClaim;
            return this;
        }
        public GetFederatedSettingsIdentityProviderResult build() {
            final var _resultValue = new GetFederatedSettingsIdentityProviderResult();
            _resultValue.acsUrl = acsUrl;
            _resultValue.associatedDomains = associatedDomains;
            _resultValue.associatedOrgs = associatedOrgs;
            _resultValue.audience = audience;
            _resultValue.audienceUri = audienceUri;
            _resultValue.authorizationType = authorizationType;
            _resultValue.clientId = clientId;
            _resultValue.description = description;
            _resultValue.displayName = displayName;
            _resultValue.federationSettingsId = federationSettingsId;
            _resultValue.groupsClaim = groupsClaim;
            _resultValue.id = id;
            _resultValue.identityProviderId = identityProviderId;
            _resultValue.idpId = idpId;
            _resultValue.idpType = idpType;
            _resultValue.issuerUri = issuerUri;
            _resultValue.oktaIdpId = oktaIdpId;
            _resultValue.pemFileInfos = pemFileInfos;
            _resultValue.protocol = protocol;
            _resultValue.requestBinding = requestBinding;
            _resultValue.requestedScopes = requestedScopes;
            _resultValue.responseSignatureAlgorithm = responseSignatureAlgorithm;
            _resultValue.ssoDebugEnabled = ssoDebugEnabled;
            _resultValue.ssoUrl = ssoUrl;
            _resultValue.status = status;
            _resultValue.userClaim = userClaim;
            return _resultValue;
        }
    }
}
