// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetStreamInstanceDataProcessRegion;
import com.pulumi.mongodbatlas.outputs.GetStreamInstanceStreamConfig;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetStreamInstanceResult {
    /**
     * @return Defines the cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
     * 
     */
    private GetStreamInstanceDataProcessRegion dataProcessRegion;
    /**
     * @return List that contains the hostnames assigned to the stream instance.
     * 
     */
    private List<String> hostnames;
    private String id;
    private String instanceName;
    private String projectId;
    /**
     * @return Defines the configuration options for an Atlas Stream Processing Instance. See stream config
     * 
     */
    private GetStreamInstanceStreamConfig streamConfig;

    private GetStreamInstanceResult() {}
    /**
     * @return Defines the cloud service provider and region where MongoDB Cloud performs stream processing. See data process region.
     * 
     */
    public GetStreamInstanceDataProcessRegion dataProcessRegion() {
        return this.dataProcessRegion;
    }
    /**
     * @return List that contains the hostnames assigned to the stream instance.
     * 
     */
    public List<String> hostnames() {
        return this.hostnames;
    }
    public String id() {
        return this.id;
    }
    public String instanceName() {
        return this.instanceName;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Defines the configuration options for an Atlas Stream Processing Instance. See stream config
     * 
     */
    public GetStreamInstanceStreamConfig streamConfig() {
        return this.streamConfig;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetStreamInstanceResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private GetStreamInstanceDataProcessRegion dataProcessRegion;
        private List<String> hostnames;
        private String id;
        private String instanceName;
        private String projectId;
        private GetStreamInstanceStreamConfig streamConfig;
        public Builder() {}
        public Builder(GetStreamInstanceResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.dataProcessRegion = defaults.dataProcessRegion;
    	      this.hostnames = defaults.hostnames;
    	      this.id = defaults.id;
    	      this.instanceName = defaults.instanceName;
    	      this.projectId = defaults.projectId;
    	      this.streamConfig = defaults.streamConfig;
        }

        @CustomType.Setter
        public Builder dataProcessRegion(GetStreamInstanceDataProcessRegion dataProcessRegion) {
            if (dataProcessRegion == null) {
              throw new MissingRequiredPropertyException("GetStreamInstanceResult", "dataProcessRegion");
            }
            this.dataProcessRegion = dataProcessRegion;
            return this;
        }
        @CustomType.Setter
        public Builder hostnames(List<String> hostnames) {
            if (hostnames == null) {
              throw new MissingRequiredPropertyException("GetStreamInstanceResult", "hostnames");
            }
            this.hostnames = hostnames;
            return this;
        }
        public Builder hostnames(String... hostnames) {
            return hostnames(List.of(hostnames));
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetStreamInstanceResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder instanceName(String instanceName) {
            if (instanceName == null) {
              throw new MissingRequiredPropertyException("GetStreamInstanceResult", "instanceName");
            }
            this.instanceName = instanceName;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetStreamInstanceResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder streamConfig(GetStreamInstanceStreamConfig streamConfig) {
            if (streamConfig == null) {
              throw new MissingRequiredPropertyException("GetStreamInstanceResult", "streamConfig");
            }
            this.streamConfig = streamConfig;
            return this;
        }
        public GetStreamInstanceResult build() {
            final var _resultValue = new GetStreamInstanceResult();
            _resultValue.dataProcessRegion = dataProcessRegion;
            _resultValue.hostnames = hostnames;
            _resultValue.id = id;
            _resultValue.instanceName = instanceName;
            _resultValue.projectId = projectId;
            _resultValue.streamConfig = streamConfig;
            return _resultValue;
        }
    }
}
