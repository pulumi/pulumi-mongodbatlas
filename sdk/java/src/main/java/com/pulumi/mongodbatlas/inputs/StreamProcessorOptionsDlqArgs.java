// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class StreamProcessorOptionsDlqArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamProcessorOptionsDlqArgs Empty = new StreamProcessorOptionsDlqArgs();

    /**
     * Name of the collection to use for the DLQ.
     * 
     */
    @Import(name="coll", required=true)
    private Output<String> coll;

    /**
     * @return Name of the collection to use for the DLQ.
     * 
     */
    public Output<String> coll() {
        return this.coll;
    }

    /**
     * Name of the connection to write DLQ messages to. Must be an Atlas connection.
     * 
     */
    @Import(name="connectionName", required=true)
    private Output<String> connectionName;

    /**
     * @return Name of the connection to write DLQ messages to. Must be an Atlas connection.
     * 
     */
    public Output<String> connectionName() {
        return this.connectionName;
    }

    /**
     * Name of the database to use for the DLQ.
     * 
     */
    @Import(name="db", required=true)
    private Output<String> db;

    /**
     * @return Name of the database to use for the DLQ.
     * 
     */
    public Output<String> db() {
        return this.db;
    }

    private StreamProcessorOptionsDlqArgs() {}

    private StreamProcessorOptionsDlqArgs(StreamProcessorOptionsDlqArgs $) {
        this.coll = $.coll;
        this.connectionName = $.connectionName;
        this.db = $.db;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamProcessorOptionsDlqArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamProcessorOptionsDlqArgs $;

        public Builder() {
            $ = new StreamProcessorOptionsDlqArgs();
        }

        public Builder(StreamProcessorOptionsDlqArgs defaults) {
            $ = new StreamProcessorOptionsDlqArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param coll Name of the collection to use for the DLQ.
         * 
         * @return builder
         * 
         */
        public Builder coll(Output<String> coll) {
            $.coll = coll;
            return this;
        }

        /**
         * @param coll Name of the collection to use for the DLQ.
         * 
         * @return builder
         * 
         */
        public Builder coll(String coll) {
            return coll(Output.of(coll));
        }

        /**
         * @param connectionName Name of the connection to write DLQ messages to. Must be an Atlas connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(Output<String> connectionName) {
            $.connectionName = connectionName;
            return this;
        }

        /**
         * @param connectionName Name of the connection to write DLQ messages to. Must be an Atlas connection.
         * 
         * @return builder
         * 
         */
        public Builder connectionName(String connectionName) {
            return connectionName(Output.of(connectionName));
        }

        /**
         * @param db Name of the database to use for the DLQ.
         * 
         * @return builder
         * 
         */
        public Builder db(Output<String> db) {
            $.db = db;
            return this;
        }

        /**
         * @param db Name of the database to use for the DLQ.
         * 
         * @return builder
         * 
         */
        public Builder db(String db) {
            return db(Output.of(db));
        }

        public StreamProcessorOptionsDlqArgs build() {
            if ($.coll == null) {
                throw new MissingRequiredPropertyException("StreamProcessorOptionsDlqArgs", "coll");
            }
            if ($.connectionName == null) {
                throw new MissingRequiredPropertyException("StreamProcessorOptionsDlqArgs", "connectionName");
            }
            if ($.db == null) {
                throw new MissingRequiredPropertyException("StreamProcessorOptionsDlqArgs", "db");
            }
            return $;
        }
    }

}
