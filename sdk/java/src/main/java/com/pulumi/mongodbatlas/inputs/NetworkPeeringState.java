// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class NetworkPeeringState extends com.pulumi.resources.ResourceArgs {

    public static final NetworkPeeringState Empty = new NetworkPeeringState();

    /**
     * Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     * 
     */
    @Import(name="accepterRegionName")
    private @Nullable Output<String> accepterRegionName;

    /**
     * @return Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
     * 
     */
    public Optional<Output<String>> accepterRegionName() {
        return Optional.ofNullable(this.accepterRegionName);
    }

    @Import(name="atlasCidrBlock")
    private @Nullable Output<String> atlasCidrBlock;

    public Optional<Output<String>> atlasCidrBlock() {
        return Optional.ofNullable(this.atlasCidrBlock);
    }

    /**
     * The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that is needed to set up the reciprocal connection.
     * 
     */
    @Import(name="atlasGcpProjectId")
    private @Nullable Output<String> atlasGcpProjectId;

    /**
     * @return The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that is needed to set up the reciprocal connection.
     * 
     */
    public Optional<Output<String>> atlasGcpProjectId() {
        return Optional.ofNullable(this.atlasGcpProjectId);
    }

    @Import(name="atlasId")
    private @Nullable Output<String> atlasId;

    public Optional<Output<String>> atlasId() {
        return Optional.ofNullable(this.atlasId);
    }

    /**
     * Name of the GCP VPC used by your atlas cluster that is needed to set up the reciprocal connection.
     * 
     */
    @Import(name="atlasVpcName")
    private @Nullable Output<String> atlasVpcName;

    /**
     * @return Name of the GCP VPC used by your atlas cluster that is needed to set up the reciprocal connection.
     * 
     */
    public Optional<Output<String>> atlasVpcName() {
        return Optional.ofNullable(this.atlasVpcName);
    }

    /**
     * AWS Account ID of the owner of the peer VPC.
     * 
     */
    @Import(name="awsAccountId")
    private @Nullable Output<String> awsAccountId;

    /**
     * @return AWS Account ID of the owner of the peer VPC.
     * 
     */
    public Optional<Output<String>> awsAccountId() {
        return Optional.ofNullable(this.awsAccountId);
    }

    /**
     * Unique identifier for an Azure AD directory.
     * 
     */
    @Import(name="azureDirectoryId")
    private @Nullable Output<String> azureDirectoryId;

    /**
     * @return Unique identifier for an Azure AD directory.
     * 
     */
    public Optional<Output<String>> azureDirectoryId() {
        return Optional.ofNullable(this.azureDirectoryId);
    }

    /**
     * Unique identifier of the Azure subscription in which the VNet resides.
     * 
     */
    @Import(name="azureSubscriptionId")
    private @Nullable Output<String> azureSubscriptionId;

    /**
     * @return Unique identifier of the Azure subscription in which the VNet resides.
     * 
     */
    public Optional<Output<String>> azureSubscriptionId() {
        return Optional.ofNullable(this.azureSubscriptionId);
    }

    /**
     * Unique identifier of the Atlas network peering container.
     * 
     */
    @Import(name="connectionId")
    private @Nullable Output<String> connectionId;

    /**
     * @return Unique identifier of the Atlas network peering container.
     * 
     */
    public Optional<Output<String>> connectionId() {
        return Optional.ofNullable(this.connectionId);
    }

    /**
     * Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the networkContainer resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.
     * 
     */
    @Import(name="containerId")
    private @Nullable Output<String> containerId;

    /**
     * @return Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the networkContainer resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.
     * 
     */
    public Optional<Output<String>> containerId() {
        return Optional.ofNullable(this.containerId);
    }

    /**
     * When `&#34;status&#34; : &#34;FAILED&#34;`, Atlas provides a description of the error.
     * 
     */
    @Import(name="errorMessage")
    private @Nullable Output<String> errorMessage;

    /**
     * @return When `&#34;status&#34; : &#34;FAILED&#34;`, Atlas provides a description of the error.
     * 
     */
    public Optional<Output<String>> errorMessage() {
        return Optional.ofNullable(this.errorMessage);
    }

    /**
     * Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
     * 
     */
    @Import(name="errorState")
    private @Nullable Output<String> errorState;

    /**
     * @return Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
     * 
     */
    public Optional<Output<String>> errorState() {
        return Optional.ofNullable(this.errorState);
    }

    /**
     * Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
     * 
     */
    @Import(name="errorStateName")
    private @Nullable Output<String> errorStateName;

    /**
     * @return Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
     * 
     */
    public Optional<Output<String>> errorStateName() {
        return Optional.ofNullable(this.errorStateName);
    }

    /**
     * GCP project ID of the owner of the network peer.
     * 
     */
    @Import(name="gcpProjectId")
    private @Nullable Output<String> gcpProjectId;

    /**
     * @return GCP project ID of the owner of the network peer.
     * 
     */
    public Optional<Output<String>> gcpProjectId() {
        return Optional.ofNullable(this.gcpProjectId);
    }

    /**
     * Name of the network peer to which Atlas connects.
     * 
     * **AZURE ONLY:**
     * 
     */
    @Import(name="networkName")
    private @Nullable Output<String> networkName;

    /**
     * @return Name of the network peer to which Atlas connects.
     * 
     * **AZURE ONLY:**
     * 
     */
    public Optional<Output<String>> networkName() {
        return Optional.ofNullable(this.networkName);
    }

    /**
     * Unique identifier of the Atlas network peer.
     * 
     */
    @Import(name="peerId")
    private @Nullable Output<String> peerId;

    /**
     * @return Unique identifier of the Atlas network peer.
     * 
     */
    public Optional<Output<String>> peerId() {
        return Optional.ofNullable(this.peerId);
    }

    /**
     * The unique ID for the MongoDB Atlas project.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The unique ID for the MongoDB Atlas project.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).
     * 
     * **AWS ONLY:**
     * 
     */
    @Import(name="providerName")
    private @Nullable Output<String> providerName;

    /**
     * @return Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).
     * 
     * **AWS ONLY:**
     * 
     */
    public Optional<Output<String>> providerName() {
        return Optional.ofNullable(this.providerName);
    }

    /**
     * Name of your Azure resource group.
     * 
     */
    @Import(name="resourceGroupName")
    private @Nullable Output<String> resourceGroupName;

    /**
     * @return Name of your Azure resource group.
     * 
     */
    public Optional<Output<String>> resourceGroupName() {
        return Optional.ofNullable(this.resourceGroupName);
    }

    /**
     * AWS VPC CIDR block or subnet.
     * 
     * **GCP ONLY:**
     * 
     */
    @Import(name="routeTableCidrBlock")
    private @Nullable Output<String> routeTableCidrBlock;

    /**
     * @return AWS VPC CIDR block or subnet.
     * 
     * **GCP ONLY:**
     * 
     */
    public Optional<Output<String>> routeTableCidrBlock() {
        return Optional.ofNullable(this.routeTableCidrBlock);
    }

    /**
     * Status of the Atlas network peering connection.  Azure/GCP: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING` GCP Only:  `WAITING_FOR_USER`.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return Status of the Atlas network peering connection.  Azure/GCP: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING` GCP Only:  `WAITING_FOR_USER`.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * (AWS Only) The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
     * 
     */
    @Import(name="statusName")
    private @Nullable Output<String> statusName;

    /**
     * @return (AWS Only) The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
     * 
     */
    public Optional<Output<String>> statusName() {
        return Optional.ofNullable(this.statusName);
    }

    /**
     * Name of your Azure VNet.
     * 
     */
    @Import(name="vnetName")
    private @Nullable Output<String> vnetName;

    /**
     * @return Name of your Azure VNet.
     * 
     */
    public Optional<Output<String>> vnetName() {
        return Optional.ofNullable(this.vnetName);
    }

    /**
     * Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the networkContainer resource).
     * 
     */
    @Import(name="vpcId")
    private @Nullable Output<String> vpcId;

    /**
     * @return Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the networkContainer resource).
     * 
     */
    public Optional<Output<String>> vpcId() {
        return Optional.ofNullable(this.vpcId);
    }

    private NetworkPeeringState() {}

    private NetworkPeeringState(NetworkPeeringState $) {
        this.accepterRegionName = $.accepterRegionName;
        this.atlasCidrBlock = $.atlasCidrBlock;
        this.atlasGcpProjectId = $.atlasGcpProjectId;
        this.atlasId = $.atlasId;
        this.atlasVpcName = $.atlasVpcName;
        this.awsAccountId = $.awsAccountId;
        this.azureDirectoryId = $.azureDirectoryId;
        this.azureSubscriptionId = $.azureSubscriptionId;
        this.connectionId = $.connectionId;
        this.containerId = $.containerId;
        this.errorMessage = $.errorMessage;
        this.errorState = $.errorState;
        this.errorStateName = $.errorStateName;
        this.gcpProjectId = $.gcpProjectId;
        this.networkName = $.networkName;
        this.peerId = $.peerId;
        this.projectId = $.projectId;
        this.providerName = $.providerName;
        this.resourceGroupName = $.resourceGroupName;
        this.routeTableCidrBlock = $.routeTableCidrBlock;
        this.status = $.status;
        this.statusName = $.statusName;
        this.vnetName = $.vnetName;
        this.vpcId = $.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(NetworkPeeringState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private NetworkPeeringState $;

        public Builder() {
            $ = new NetworkPeeringState();
        }

        public Builder(NetworkPeeringState defaults) {
            $ = new NetworkPeeringState(Objects.requireNonNull(defaults));
        }

        /**
         * @param accepterRegionName Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
         * 
         * @return builder
         * 
         */
        public Builder accepterRegionName(@Nullable Output<String> accepterRegionName) {
            $.accepterRegionName = accepterRegionName;
            return this;
        }

        /**
         * @param accepterRegionName Specifies the AWS region where the peer VPC resides. For complete lists of supported regions, see [Amazon Web Services](https://docs.atlas.mongodb.com/reference/amazon-aws/).
         * 
         * @return builder
         * 
         */
        public Builder accepterRegionName(String accepterRegionName) {
            return accepterRegionName(Output.of(accepterRegionName));
        }

        public Builder atlasCidrBlock(@Nullable Output<String> atlasCidrBlock) {
            $.atlasCidrBlock = atlasCidrBlock;
            return this;
        }

        public Builder atlasCidrBlock(String atlasCidrBlock) {
            return atlasCidrBlock(Output.of(atlasCidrBlock));
        }

        /**
         * @param atlasGcpProjectId The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that is needed to set up the reciprocal connection.
         * 
         * @return builder
         * 
         */
        public Builder atlasGcpProjectId(@Nullable Output<String> atlasGcpProjectId) {
            $.atlasGcpProjectId = atlasGcpProjectId;
            return this;
        }

        /**
         * @param atlasGcpProjectId The Atlas GCP Project ID for the GCP VPC used by your atlas cluster that is needed to set up the reciprocal connection.
         * 
         * @return builder
         * 
         */
        public Builder atlasGcpProjectId(String atlasGcpProjectId) {
            return atlasGcpProjectId(Output.of(atlasGcpProjectId));
        }

        public Builder atlasId(@Nullable Output<String> atlasId) {
            $.atlasId = atlasId;
            return this;
        }

        public Builder atlasId(String atlasId) {
            return atlasId(Output.of(atlasId));
        }

        /**
         * @param atlasVpcName Name of the GCP VPC used by your atlas cluster that is needed to set up the reciprocal connection.
         * 
         * @return builder
         * 
         */
        public Builder atlasVpcName(@Nullable Output<String> atlasVpcName) {
            $.atlasVpcName = atlasVpcName;
            return this;
        }

        /**
         * @param atlasVpcName Name of the GCP VPC used by your atlas cluster that is needed to set up the reciprocal connection.
         * 
         * @return builder
         * 
         */
        public Builder atlasVpcName(String atlasVpcName) {
            return atlasVpcName(Output.of(atlasVpcName));
        }

        /**
         * @param awsAccountId AWS Account ID of the owner of the peer VPC.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(@Nullable Output<String> awsAccountId) {
            $.awsAccountId = awsAccountId;
            return this;
        }

        /**
         * @param awsAccountId AWS Account ID of the owner of the peer VPC.
         * 
         * @return builder
         * 
         */
        public Builder awsAccountId(String awsAccountId) {
            return awsAccountId(Output.of(awsAccountId));
        }

        /**
         * @param azureDirectoryId Unique identifier for an Azure AD directory.
         * 
         * @return builder
         * 
         */
        public Builder azureDirectoryId(@Nullable Output<String> azureDirectoryId) {
            $.azureDirectoryId = azureDirectoryId;
            return this;
        }

        /**
         * @param azureDirectoryId Unique identifier for an Azure AD directory.
         * 
         * @return builder
         * 
         */
        public Builder azureDirectoryId(String azureDirectoryId) {
            return azureDirectoryId(Output.of(azureDirectoryId));
        }

        /**
         * @param azureSubscriptionId Unique identifier of the Azure subscription in which the VNet resides.
         * 
         * @return builder
         * 
         */
        public Builder azureSubscriptionId(@Nullable Output<String> azureSubscriptionId) {
            $.azureSubscriptionId = azureSubscriptionId;
            return this;
        }

        /**
         * @param azureSubscriptionId Unique identifier of the Azure subscription in which the VNet resides.
         * 
         * @return builder
         * 
         */
        public Builder azureSubscriptionId(String azureSubscriptionId) {
            return azureSubscriptionId(Output.of(azureSubscriptionId));
        }

        /**
         * @param connectionId Unique identifier of the Atlas network peering container.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(@Nullable Output<String> connectionId) {
            $.connectionId = connectionId;
            return this;
        }

        /**
         * @param connectionId Unique identifier of the Atlas network peering container.
         * 
         * @return builder
         * 
         */
        public Builder connectionId(String connectionId) {
            return connectionId(Output.of(connectionId));
        }

        /**
         * @param containerId Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the networkContainer resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.
         * 
         * @return builder
         * 
         */
        public Builder containerId(@Nullable Output<String> containerId) {
            $.containerId = containerId;
            return this;
        }

        /**
         * @param containerId Unique identifier of the MongoDB Atlas container for the provider (GCP) or provider/region (AWS, AZURE). You can create an MongoDB Atlas container using the networkContainer resource or it can be obtained from the cluster returned values if a cluster has been created before the first container.
         * 
         * @return builder
         * 
         */
        public Builder containerId(String containerId) {
            return containerId(Output.of(containerId));
        }

        /**
         * @param errorMessage When `&#34;status&#34; : &#34;FAILED&#34;`, Atlas provides a description of the error.
         * 
         * @return builder
         * 
         */
        public Builder errorMessage(@Nullable Output<String> errorMessage) {
            $.errorMessage = errorMessage;
            return this;
        }

        /**
         * @param errorMessage When `&#34;status&#34; : &#34;FAILED&#34;`, Atlas provides a description of the error.
         * 
         * @return builder
         * 
         */
        public Builder errorMessage(String errorMessage) {
            return errorMessage(Output.of(errorMessage));
        }

        /**
         * @param errorState Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
         * 
         * @return builder
         * 
         */
        public Builder errorState(@Nullable Output<String> errorState) {
            $.errorState = errorState;
            return this;
        }

        /**
         * @param errorState Description of the Atlas error when `status` is `Failed`, Otherwise, Atlas returns `null`.
         * 
         * @return builder
         * 
         */
        public Builder errorState(String errorState) {
            return errorState(Output.of(errorState));
        }

        /**
         * @param errorStateName Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
         * 
         * @return builder
         * 
         */
        public Builder errorStateName(@Nullable Output<String> errorStateName) {
            $.errorStateName = errorStateName;
            return this;
        }

        /**
         * @param errorStateName Error state, if any. The VPC peering connection error state value can be one of the following: `REJECTED`, `EXPIRED`, `INVALID_ARGUMENT`.
         * 
         * @return builder
         * 
         */
        public Builder errorStateName(String errorStateName) {
            return errorStateName(Output.of(errorStateName));
        }

        /**
         * @param gcpProjectId GCP project ID of the owner of the network peer.
         * 
         * @return builder
         * 
         */
        public Builder gcpProjectId(@Nullable Output<String> gcpProjectId) {
            $.gcpProjectId = gcpProjectId;
            return this;
        }

        /**
         * @param gcpProjectId GCP project ID of the owner of the network peer.
         * 
         * @return builder
         * 
         */
        public Builder gcpProjectId(String gcpProjectId) {
            return gcpProjectId(Output.of(gcpProjectId));
        }

        /**
         * @param networkName Name of the network peer to which Atlas connects.
         * 
         * **AZURE ONLY:**
         * 
         * @return builder
         * 
         */
        public Builder networkName(@Nullable Output<String> networkName) {
            $.networkName = networkName;
            return this;
        }

        /**
         * @param networkName Name of the network peer to which Atlas connects.
         * 
         * **AZURE ONLY:**
         * 
         * @return builder
         * 
         */
        public Builder networkName(String networkName) {
            return networkName(Output.of(networkName));
        }

        /**
         * @param peerId Unique identifier of the Atlas network peer.
         * 
         * @return builder
         * 
         */
        public Builder peerId(@Nullable Output<String> peerId) {
            $.peerId = peerId;
            return this;
        }

        /**
         * @param peerId Unique identifier of the Atlas network peer.
         * 
         * @return builder
         * 
         */
        public Builder peerId(String peerId) {
            return peerId(Output.of(peerId));
        }

        /**
         * @param projectId The unique ID for the MongoDB Atlas project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The unique ID for the MongoDB Atlas project.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param providerName Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).
         * 
         * **AWS ONLY:**
         * 
         * @return builder
         * 
         */
        public Builder providerName(@Nullable Output<String> providerName) {
            $.providerName = providerName;
            return this;
        }

        /**
         * @param providerName Cloud provider to whom the peering connection is being made. (Possible Values `AWS`, `AZURE`, `GCP`).
         * 
         * **AWS ONLY:**
         * 
         * @return builder
         * 
         */
        public Builder providerName(String providerName) {
            return providerName(Output.of(providerName));
        }

        /**
         * @param resourceGroupName Name of your Azure resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(@Nullable Output<String> resourceGroupName) {
            $.resourceGroupName = resourceGroupName;
            return this;
        }

        /**
         * @param resourceGroupName Name of your Azure resource group.
         * 
         * @return builder
         * 
         */
        public Builder resourceGroupName(String resourceGroupName) {
            return resourceGroupName(Output.of(resourceGroupName));
        }

        /**
         * @param routeTableCidrBlock AWS VPC CIDR block or subnet.
         * 
         * **GCP ONLY:**
         * 
         * @return builder
         * 
         */
        public Builder routeTableCidrBlock(@Nullable Output<String> routeTableCidrBlock) {
            $.routeTableCidrBlock = routeTableCidrBlock;
            return this;
        }

        /**
         * @param routeTableCidrBlock AWS VPC CIDR block or subnet.
         * 
         * **GCP ONLY:**
         * 
         * @return builder
         * 
         */
        public Builder routeTableCidrBlock(String routeTableCidrBlock) {
            return routeTableCidrBlock(Output.of(routeTableCidrBlock));
        }

        /**
         * @param status Status of the Atlas network peering connection.  Azure/GCP: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING` GCP Only:  `WAITING_FOR_USER`.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status Status of the Atlas network peering connection.  Azure/GCP: `ADDING_PEER`, `AVAILABLE`, `FAILED`, `DELETING` GCP Only:  `WAITING_FOR_USER`.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param statusName (AWS Only) The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
         * 
         * @return builder
         * 
         */
        public Builder statusName(@Nullable Output<String> statusName) {
            $.statusName = statusName;
            return this;
        }

        /**
         * @param statusName (AWS Only) The VPC peering connection status value can be one of the following: `INITIATING`, `PENDING_ACCEPTANCE`, `FAILED`, `FINALIZING`, `AVAILABLE`, `TERMINATING`.
         * 
         * @return builder
         * 
         */
        public Builder statusName(String statusName) {
            return statusName(Output.of(statusName));
        }

        /**
         * @param vnetName Name of your Azure VNet.
         * 
         * @return builder
         * 
         */
        public Builder vnetName(@Nullable Output<String> vnetName) {
            $.vnetName = vnetName;
            return this;
        }

        /**
         * @param vnetName Name of your Azure VNet.
         * 
         * @return builder
         * 
         */
        public Builder vnetName(String vnetName) {
            return vnetName(Output.of(vnetName));
        }

        /**
         * @param vpcId Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the networkContainer resource).
         * 
         * @return builder
         * 
         */
        public Builder vpcId(@Nullable Output<String> vpcId) {
            $.vpcId = vpcId;
            return this;
        }

        /**
         * @param vpcId Unique identifier of the AWS peer VPC (Note: this is **not** the same as the Atlas AWS VPC that is returned by the networkContainer resource).
         * 
         * @return builder
         * 
         */
        public Builder vpcId(String vpcId) {
            return vpcId(Output.of(vpcId));
        }

        public NetworkPeeringState build() {
            return $;
        }
    }

}
