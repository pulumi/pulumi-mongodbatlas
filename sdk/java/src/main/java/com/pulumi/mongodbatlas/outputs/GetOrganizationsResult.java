// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetOrganizationsResultLink;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetOrganizationsResult {
    /**
     * @return Flag that indicates whether to require API operations to originate from an IP Address added to the API access list for the specified organization.
     * 
     */
    private Boolean apiAccessListRequired;
    /**
     * @return Autogenerated Unique ID for this data source.
     * 
     */
    private String id;
    /**
     * @return Flag that indicates whether this organization has been deleted.
     * 
     */
    private Boolean isDeleted;
    private List<GetOrganizationsResultLink> links;
    /**
     * @return Flag that indicates whether to require users to set up Multi-Factor Authentication (MFA) before accessing the specified organization. To learn more, see: &lt;https://www.mongodb.com/docs/atlas/security-multi-factor-authentication/&gt;.
     * 
     */
    private Boolean multiFactorAuthRequired;
    /**
     * @return Human-readable label that identifies the organization.
     * 
     */
    private String name;
    /**
     * @return Flag that indicates whether to block MongoDB Support from accessing Atlas infrastructure for any deployment in the specified organization without explicit permission. Once this setting is turned on, you can grant MongoDB Support a 24-hour bypass access to the Atlas deployment to resolve support issues. To learn more, see: &lt;https://www.mongodb.com/docs/atlas/security-restrict-support-access/&gt;.
     * 
     * See [MongoDB Atlas API - Organizations](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Organizations/operation/listOrganizations)  Documentation for more information.
     * 
     */
    private Boolean restrictEmployeeAccess;

    private GetOrganizationsResult() {}
    /**
     * @return Flag that indicates whether to require API operations to originate from an IP Address added to the API access list for the specified organization.
     * 
     */
    public Boolean apiAccessListRequired() {
        return this.apiAccessListRequired;
    }
    /**
     * @return Autogenerated Unique ID for this data source.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Flag that indicates whether this organization has been deleted.
     * 
     */
    public Boolean isDeleted() {
        return this.isDeleted;
    }
    public List<GetOrganizationsResultLink> links() {
        return this.links;
    }
    /**
     * @return Flag that indicates whether to require users to set up Multi-Factor Authentication (MFA) before accessing the specified organization. To learn more, see: &lt;https://www.mongodb.com/docs/atlas/security-multi-factor-authentication/&gt;.
     * 
     */
    public Boolean multiFactorAuthRequired() {
        return this.multiFactorAuthRequired;
    }
    /**
     * @return Human-readable label that identifies the organization.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Flag that indicates whether to block MongoDB Support from accessing Atlas infrastructure for any deployment in the specified organization without explicit permission. Once this setting is turned on, you can grant MongoDB Support a 24-hour bypass access to the Atlas deployment to resolve support issues. To learn more, see: &lt;https://www.mongodb.com/docs/atlas/security-restrict-support-access/&gt;.
     * 
     * See [MongoDB Atlas API - Organizations](https://www.mongodb.com/docs/atlas/reference/api-resources-spec/#tag/Organizations/operation/listOrganizations)  Documentation for more information.
     * 
     */
    public Boolean restrictEmployeeAccess() {
        return this.restrictEmployeeAccess;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrganizationsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Boolean apiAccessListRequired;
        private String id;
        private Boolean isDeleted;
        private List<GetOrganizationsResultLink> links;
        private Boolean multiFactorAuthRequired;
        private String name;
        private Boolean restrictEmployeeAccess;
        public Builder() {}
        public Builder(GetOrganizationsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiAccessListRequired = defaults.apiAccessListRequired;
    	      this.id = defaults.id;
    	      this.isDeleted = defaults.isDeleted;
    	      this.links = defaults.links;
    	      this.multiFactorAuthRequired = defaults.multiFactorAuthRequired;
    	      this.name = defaults.name;
    	      this.restrictEmployeeAccess = defaults.restrictEmployeeAccess;
        }

        @CustomType.Setter
        public Builder apiAccessListRequired(Boolean apiAccessListRequired) {
            if (apiAccessListRequired == null) {
              throw new MissingRequiredPropertyException("GetOrganizationsResult", "apiAccessListRequired");
            }
            this.apiAccessListRequired = apiAccessListRequired;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetOrganizationsResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder isDeleted(Boolean isDeleted) {
            if (isDeleted == null) {
              throw new MissingRequiredPropertyException("GetOrganizationsResult", "isDeleted");
            }
            this.isDeleted = isDeleted;
            return this;
        }
        @CustomType.Setter
        public Builder links(List<GetOrganizationsResultLink> links) {
            if (links == null) {
              throw new MissingRequiredPropertyException("GetOrganizationsResult", "links");
            }
            this.links = links;
            return this;
        }
        public Builder links(GetOrganizationsResultLink... links) {
            return links(List.of(links));
        }
        @CustomType.Setter
        public Builder multiFactorAuthRequired(Boolean multiFactorAuthRequired) {
            if (multiFactorAuthRequired == null) {
              throw new MissingRequiredPropertyException("GetOrganizationsResult", "multiFactorAuthRequired");
            }
            this.multiFactorAuthRequired = multiFactorAuthRequired;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetOrganizationsResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder restrictEmployeeAccess(Boolean restrictEmployeeAccess) {
            if (restrictEmployeeAccess == null) {
              throw new MissingRequiredPropertyException("GetOrganizationsResult", "restrictEmployeeAccess");
            }
            this.restrictEmployeeAccess = restrictEmployeeAccess;
            return this;
        }
        public GetOrganizationsResult build() {
            final var _resultValue = new GetOrganizationsResult();
            _resultValue.apiAccessListRequired = apiAccessListRequired;
            _resultValue.id = id;
            _resultValue.isDeleted = isDeleted;
            _resultValue.links = links;
            _resultValue.multiFactorAuthRequired = multiFactorAuthRequired;
            _resultValue.name = name;
            _resultValue.restrictEmployeeAccess = restrictEmployeeAccess;
            return _resultValue;
        }
    }
}
