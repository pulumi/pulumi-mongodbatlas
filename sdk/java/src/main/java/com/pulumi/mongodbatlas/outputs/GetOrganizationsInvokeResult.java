// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetOrganizationsResult;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetOrganizationsInvokeResult {
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @deprecated
     * this parameter is deprecated and will be removed in version 1.16.0
     * 
     */
    @Deprecated /* this parameter is deprecated and will be removed in version 1.16.0 */
    private @Nullable Boolean includeDeletedOrgs;
    private @Nullable Integer itemsPerPage;
    private @Nullable String name;
    private @Nullable Integer pageNum;
    private List<GetOrganizationsResult> results;
    private Integer totalCount;

    private GetOrganizationsInvokeResult() {}
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @deprecated
     * this parameter is deprecated and will be removed in version 1.16.0
     * 
     */
    @Deprecated /* this parameter is deprecated and will be removed in version 1.16.0 */
    public Optional<Boolean> includeDeletedOrgs() {
        return Optional.ofNullable(this.includeDeletedOrgs);
    }
    public Optional<Integer> itemsPerPage() {
        return Optional.ofNullable(this.itemsPerPage);
    }
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    public Optional<Integer> pageNum() {
        return Optional.ofNullable(this.pageNum);
    }
    public List<GetOrganizationsResult> results() {
        return this.results;
    }
    public Integer totalCount() {
        return this.totalCount;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetOrganizationsInvokeResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private @Nullable Boolean includeDeletedOrgs;
        private @Nullable Integer itemsPerPage;
        private @Nullable String name;
        private @Nullable Integer pageNum;
        private List<GetOrganizationsResult> results;
        private Integer totalCount;
        public Builder() {}
        public Builder(GetOrganizationsInvokeResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.includeDeletedOrgs = defaults.includeDeletedOrgs;
    	      this.itemsPerPage = defaults.itemsPerPage;
    	      this.name = defaults.name;
    	      this.pageNum = defaults.pageNum;
    	      this.results = defaults.results;
    	      this.totalCount = defaults.totalCount;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetOrganizationsInvokeResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder includeDeletedOrgs(@Nullable Boolean includeDeletedOrgs) {

            this.includeDeletedOrgs = includeDeletedOrgs;
            return this;
        }
        @CustomType.Setter
        public Builder itemsPerPage(@Nullable Integer itemsPerPage) {

            this.itemsPerPage = itemsPerPage;
            return this;
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder pageNum(@Nullable Integer pageNum) {

            this.pageNum = pageNum;
            return this;
        }
        @CustomType.Setter
        public Builder results(List<GetOrganizationsResult> results) {
            if (results == null) {
              throw new MissingRequiredPropertyException("GetOrganizationsInvokeResult", "results");
            }
            this.results = results;
            return this;
        }
        public Builder results(GetOrganizationsResult... results) {
            return results(List.of(results));
        }
        @CustomType.Setter
        public Builder totalCount(Integer totalCount) {
            if (totalCount == null) {
              throw new MissingRequiredPropertyException("GetOrganizationsInvokeResult", "totalCount");
            }
            this.totalCount = totalCount;
            return this;
        }
        public GetOrganizationsInvokeResult build() {
            final var _resultValue = new GetOrganizationsInvokeResult();
            _resultValue.id = id;
            _resultValue.includeDeletedOrgs = includeDeletedOrgs;
            _resultValue.itemsPerPage = itemsPerPage;
            _resultValue.name = name;
            _resultValue.pageNum = pageNum;
            _resultValue.results = results;
            _resultValue.totalCount = totalCount;
            return _resultValue;
        }
    }
}
