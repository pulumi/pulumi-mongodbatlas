// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamPrivatelinkEndpointState extends com.pulumi.resources.ResourceArgs {

    public static final StreamPrivatelinkEndpointState Empty = new StreamPrivatelinkEndpointState();

    /**
     * Domain name of Privatelink connected cluster.
     * 
     */
    @Import(name="dnsDomain")
    private @Nullable Output<String> dnsDomain;

    /**
     * @return Domain name of Privatelink connected cluster.
     * 
     */
    public Optional<Output<String>> dnsDomain() {
        return Optional.ofNullable(this.dnsDomain);
    }

    /**
     * Sub-Domain name of Confluent cluster. These are typically your availability zones.
     * 
     */
    @Import(name="dnsSubDomains")
    private @Nullable Output<List<String>> dnsSubDomains;

    /**
     * @return Sub-Domain name of Confluent cluster. These are typically your availability zones.
     * 
     */
    public Optional<Output<List<String>>> dnsSubDomains() {
        return Optional.ofNullable(this.dnsSubDomains);
    }

    /**
     * Interface endpoint ID that is created from the specified service endpoint ID.
     * 
     */
    @Import(name="interfaceEndpointId")
    private @Nullable Output<String> interfaceEndpointId;

    /**
     * @return Interface endpoint ID that is created from the specified service endpoint ID.
     * 
     */
    public Optional<Output<String>> interfaceEndpointId() {
        return Optional.ofNullable(this.interfaceEndpointId);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Provider where the Kafka cluster is deployed.
     * 
     */
    @Import(name="providerName")
    private @Nullable Output<String> providerName;

    /**
     * @return Provider where the Kafka cluster is deployed.
     * 
     */
    public Optional<Output<String>> providerName() {
        return Optional.ofNullable(this.providerName);
    }

    /**
     * Domain name of Confluent cluster.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return Domain name of Confluent cluster.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * Service Endpoint ID.
     * 
     */
    @Import(name="serviceEndpointId")
    private @Nullable Output<String> serviceEndpointId;

    /**
     * @return Service Endpoint ID.
     * 
     */
    public Optional<Output<String>> serviceEndpointId() {
        return Optional.ofNullable(this.serviceEndpointId);
    }

    /**
     * Status of the connection.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Status of the connection.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Vendor who manages the Kafka cluster.
     * 
     */
    @Import(name="vendor")
    private @Nullable Output<String> vendor;

    /**
     * @return Vendor who manages the Kafka cluster.
     * 
     */
    public Optional<Output<String>> vendor() {
        return Optional.ofNullable(this.vendor);
    }

    private StreamPrivatelinkEndpointState() {}

    private StreamPrivatelinkEndpointState(StreamPrivatelinkEndpointState $) {
        this.dnsDomain = $.dnsDomain;
        this.dnsSubDomains = $.dnsSubDomains;
        this.interfaceEndpointId = $.interfaceEndpointId;
        this.projectId = $.projectId;
        this.providerName = $.providerName;
        this.region = $.region;
        this.serviceEndpointId = $.serviceEndpointId;
        this.state = $.state;
        this.vendor = $.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamPrivatelinkEndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamPrivatelinkEndpointState $;

        public Builder() {
            $ = new StreamPrivatelinkEndpointState();
        }

        public Builder(StreamPrivatelinkEndpointState defaults) {
            $ = new StreamPrivatelinkEndpointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param dnsDomain Domain name of Privatelink connected cluster.
         * 
         * @return builder
         * 
         */
        public Builder dnsDomain(@Nullable Output<String> dnsDomain) {
            $.dnsDomain = dnsDomain;
            return this;
        }

        /**
         * @param dnsDomain Domain name of Privatelink connected cluster.
         * 
         * @return builder
         * 
         */
        public Builder dnsDomain(String dnsDomain) {
            return dnsDomain(Output.of(dnsDomain));
        }

        /**
         * @param dnsSubDomains Sub-Domain name of Confluent cluster. These are typically your availability zones.
         * 
         * @return builder
         * 
         */
        public Builder dnsSubDomains(@Nullable Output<List<String>> dnsSubDomains) {
            $.dnsSubDomains = dnsSubDomains;
            return this;
        }

        /**
         * @param dnsSubDomains Sub-Domain name of Confluent cluster. These are typically your availability zones.
         * 
         * @return builder
         * 
         */
        public Builder dnsSubDomains(List<String> dnsSubDomains) {
            return dnsSubDomains(Output.of(dnsSubDomains));
        }

        /**
         * @param dnsSubDomains Sub-Domain name of Confluent cluster. These are typically your availability zones.
         * 
         * @return builder
         * 
         */
        public Builder dnsSubDomains(String... dnsSubDomains) {
            return dnsSubDomains(List.of(dnsSubDomains));
        }

        /**
         * @param interfaceEndpointId Interface endpoint ID that is created from the specified service endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder interfaceEndpointId(@Nullable Output<String> interfaceEndpointId) {
            $.interfaceEndpointId = interfaceEndpointId;
            return this;
        }

        /**
         * @param interfaceEndpointId Interface endpoint ID that is created from the specified service endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder interfaceEndpointId(String interfaceEndpointId) {
            return interfaceEndpointId(Output.of(interfaceEndpointId));
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param providerName Provider where the Kafka cluster is deployed.
         * 
         * @return builder
         * 
         */
        public Builder providerName(@Nullable Output<String> providerName) {
            $.providerName = providerName;
            return this;
        }

        /**
         * @param providerName Provider where the Kafka cluster is deployed.
         * 
         * @return builder
         * 
         */
        public Builder providerName(String providerName) {
            return providerName(Output.of(providerName));
        }

        /**
         * @param region Domain name of Confluent cluster.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region Domain name of Confluent cluster.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceEndpointId Service Endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointId(@Nullable Output<String> serviceEndpointId) {
            $.serviceEndpointId = serviceEndpointId;
            return this;
        }

        /**
         * @param serviceEndpointId Service Endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointId(String serviceEndpointId) {
            return serviceEndpointId(Output.of(serviceEndpointId));
        }

        /**
         * @param state Status of the connection.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Status of the connection.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param vendor Vendor who manages the Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder vendor(@Nullable Output<String> vendor) {
            $.vendor = vendor;
            return this;
        }

        /**
         * @param vendor Vendor who manages the Kafka cluster.
         * 
         * @return builder
         * 
         */
        public Builder vendor(String vendor) {
            return vendor(Output.of(vendor));
        }

        public StreamPrivatelinkEndpointState build() {
            return $;
        }
    }

}
