// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamPrivatelinkEndpointState extends com.pulumi.resources.ResourceArgs {

    public static final StreamPrivatelinkEndpointState Empty = new StreamPrivatelinkEndpointState();

    /**
     * Amazon Resource Name (ARN). Required for AWS Provider and MSK vendor.
     * 
     */
    @Import(name="arn")
    private @Nullable Output<String> arn;

    /**
     * @return Amazon Resource Name (ARN). Required for AWS Provider and MSK vendor.
     * 
     */
    public Optional<Output<String>> arn() {
        return Optional.ofNullable(this.arn);
    }

    /**
     * The domain hostname. Required for the following provider and vendor combinations:
     * 
     *     * AWS provider with CONFLUENT vendor.
     *     
     *     * AZURE provider with EVENTHUB or CONFLUENT vendor.
     * 
     */
    @Import(name="dnsDomain")
    private @Nullable Output<String> dnsDomain;

    /**
     * @return The domain hostname. Required for the following provider and vendor combinations:
     * 
     *     * AWS provider with CONFLUENT vendor.
     *     
     *     * AZURE provider with EVENTHUB or CONFLUENT vendor.
     * 
     */
    public Optional<Output<String>> dnsDomain() {
        return Optional.ofNullable(this.dnsDomain);
    }

    /**
     * Sub-Domain name of Confluent cluster. These are typically your availability zones. Required for AWS Provider and CONFLUENT vendor. If your AWS CONFLUENT cluster doesn&#39;t use subdomains, you must set this to the empty array [].
     * 
     */
    @Import(name="dnsSubDomains")
    private @Nullable Output<List<String>> dnsSubDomains;

    /**
     * @return Sub-Domain name of Confluent cluster. These are typically your availability zones. Required for AWS Provider and CONFLUENT vendor. If your AWS CONFLUENT cluster doesn&#39;t use subdomains, you must set this to the empty array [].
     * 
     */
    public Optional<Output<List<String>>> dnsSubDomains() {
        return Optional.ofNullable(this.dnsSubDomains);
    }

    /**
     * Error message if the connection is in a failed state.
     * 
     */
    @Import(name="errorMessage")
    private @Nullable Output<String> errorMessage;

    /**
     * @return Error message if the connection is in a failed state.
     * 
     */
    public Optional<Output<String>> errorMessage() {
        return Optional.ofNullable(this.errorMessage);
    }

    /**
     * Interface endpoint ID that is created from the specified service endpoint ID.
     * 
     */
    @Import(name="interfaceEndpointId")
    private @Nullable Output<String> interfaceEndpointId;

    /**
     * @return Interface endpoint ID that is created from the specified service endpoint ID.
     * 
     */
    public Optional<Output<String>> interfaceEndpointId() {
        return Optional.ofNullable(this.interfaceEndpointId);
    }

    /**
     * Name of interface endpoint that is created from the specified service endpoint ID.
     * 
     */
    @Import(name="interfaceEndpointName")
    private @Nullable Output<String> interfaceEndpointName;

    /**
     * @return Name of interface endpoint that is created from the specified service endpoint ID.
     * 
     */
    public Optional<Output<String>> interfaceEndpointName() {
        return Optional.ofNullable(this.interfaceEndpointName);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.&lt;br&gt;**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group or project id remains the same. The resource and corresponding endpoints use the term groups.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.&lt;br&gt;**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group or project id remains the same. The resource and corresponding endpoints use the term groups.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Account ID from the cloud provider.
     * 
     */
    @Import(name="providerAccountId")
    private @Nullable Output<String> providerAccountId;

    /**
     * @return Account ID from the cloud provider.
     * 
     */
    public Optional<Output<String>> providerAccountId() {
        return Optional.ofNullable(this.providerAccountId);
    }

    /**
     * Provider where the endpoint is deployed. Valid values are AWS and AZURE.
     * 
     */
    @Import(name="providerName")
    private @Nullable Output<String> providerName;

    /**
     * @return Provider where the endpoint is deployed. Valid values are AWS and AZURE.
     * 
     */
    public Optional<Output<String>> providerName() {
        return Optional.ofNullable(this.providerName);
    }

    /**
     * The region of the Provider’s cluster. See [AZURE](https://www.mongodb.com/docs/atlas/reference/microsoft-azure/#stream-processing-instances) and [AWS](https://www.mongodb.com/docs/atlas/reference/amazon-aws/#stream-processing-instances) supported regions. When the vendor is `CONFLUENT`, this is the domain name of Confluent cluster. When the vendor is `MSK`, this is computed by the API from the provided `arn`.
     * 
     */
    @Import(name="region")
    private @Nullable Output<String> region;

    /**
     * @return The region of the Provider’s cluster. See [AZURE](https://www.mongodb.com/docs/atlas/reference/microsoft-azure/#stream-processing-instances) and [AWS](https://www.mongodb.com/docs/atlas/reference/amazon-aws/#stream-processing-instances) supported regions. When the vendor is `CONFLUENT`, this is the domain name of Confluent cluster. When the vendor is `MSK`, this is computed by the API from the provided `arn`.
     * 
     */
    public Optional<Output<String>> region() {
        return Optional.ofNullable(this.region);
    }

    /**
     * For AZURE EVENTHUB, this is the [namespace endpoint ID](https://learn.microsoft.com/en-us/rest/api/eventhub/namespaces/get). For AWS CONFLUENT cluster, this is the [VPC Endpoint service name](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html).
     * 
     */
    @Import(name="serviceEndpointId")
    private @Nullable Output<String> serviceEndpointId;

    /**
     * @return For AZURE EVENTHUB, this is the [namespace endpoint ID](https://learn.microsoft.com/en-us/rest/api/eventhub/namespaces/get). For AWS CONFLUENT cluster, this is the [VPC Endpoint service name](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html).
     * 
     */
    public Optional<Output<String>> serviceEndpointId() {
        return Optional.ofNullable(this.serviceEndpointId);
    }

    /**
     * Status of the connection.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Status of the connection.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    /**
     * Vendor that manages the endpoint. The following are the vendor values per provider:
     * 
     *     * **AWS**: MSK, CONFLUENT, and S3
     *     
     *     * **Azure**: EVENTHUB and CONFLUENT
     * 
     */
    @Import(name="vendor")
    private @Nullable Output<String> vendor;

    /**
     * @return Vendor that manages the endpoint. The following are the vendor values per provider:
     * 
     *     * **AWS**: MSK, CONFLUENT, and S3
     *     
     *     * **Azure**: EVENTHUB and CONFLUENT
     * 
     */
    public Optional<Output<String>> vendor() {
        return Optional.ofNullable(this.vendor);
    }

    private StreamPrivatelinkEndpointState() {}

    private StreamPrivatelinkEndpointState(StreamPrivatelinkEndpointState $) {
        this.arn = $.arn;
        this.dnsDomain = $.dnsDomain;
        this.dnsSubDomains = $.dnsSubDomains;
        this.errorMessage = $.errorMessage;
        this.interfaceEndpointId = $.interfaceEndpointId;
        this.interfaceEndpointName = $.interfaceEndpointName;
        this.projectId = $.projectId;
        this.providerAccountId = $.providerAccountId;
        this.providerName = $.providerName;
        this.region = $.region;
        this.serviceEndpointId = $.serviceEndpointId;
        this.state = $.state;
        this.vendor = $.vendor;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamPrivatelinkEndpointState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamPrivatelinkEndpointState $;

        public Builder() {
            $ = new StreamPrivatelinkEndpointState();
        }

        public Builder(StreamPrivatelinkEndpointState defaults) {
            $ = new StreamPrivatelinkEndpointState(Objects.requireNonNull(defaults));
        }

        /**
         * @param arn Amazon Resource Name (ARN). Required for AWS Provider and MSK vendor.
         * 
         * @return builder
         * 
         */
        public Builder arn(@Nullable Output<String> arn) {
            $.arn = arn;
            return this;
        }

        /**
         * @param arn Amazon Resource Name (ARN). Required for AWS Provider and MSK vendor.
         * 
         * @return builder
         * 
         */
        public Builder arn(String arn) {
            return arn(Output.of(arn));
        }

        /**
         * @param dnsDomain The domain hostname. Required for the following provider and vendor combinations:
         * 
         *     * AWS provider with CONFLUENT vendor.
         *     
         *     * AZURE provider with EVENTHUB or CONFLUENT vendor.
         * 
         * @return builder
         * 
         */
        public Builder dnsDomain(@Nullable Output<String> dnsDomain) {
            $.dnsDomain = dnsDomain;
            return this;
        }

        /**
         * @param dnsDomain The domain hostname. Required for the following provider and vendor combinations:
         * 
         *     * AWS provider with CONFLUENT vendor.
         *     
         *     * AZURE provider with EVENTHUB or CONFLUENT vendor.
         * 
         * @return builder
         * 
         */
        public Builder dnsDomain(String dnsDomain) {
            return dnsDomain(Output.of(dnsDomain));
        }

        /**
         * @param dnsSubDomains Sub-Domain name of Confluent cluster. These are typically your availability zones. Required for AWS Provider and CONFLUENT vendor. If your AWS CONFLUENT cluster doesn&#39;t use subdomains, you must set this to the empty array [].
         * 
         * @return builder
         * 
         */
        public Builder dnsSubDomains(@Nullable Output<List<String>> dnsSubDomains) {
            $.dnsSubDomains = dnsSubDomains;
            return this;
        }

        /**
         * @param dnsSubDomains Sub-Domain name of Confluent cluster. These are typically your availability zones. Required for AWS Provider and CONFLUENT vendor. If your AWS CONFLUENT cluster doesn&#39;t use subdomains, you must set this to the empty array [].
         * 
         * @return builder
         * 
         */
        public Builder dnsSubDomains(List<String> dnsSubDomains) {
            return dnsSubDomains(Output.of(dnsSubDomains));
        }

        /**
         * @param dnsSubDomains Sub-Domain name of Confluent cluster. These are typically your availability zones. Required for AWS Provider and CONFLUENT vendor. If your AWS CONFLUENT cluster doesn&#39;t use subdomains, you must set this to the empty array [].
         * 
         * @return builder
         * 
         */
        public Builder dnsSubDomains(String... dnsSubDomains) {
            return dnsSubDomains(List.of(dnsSubDomains));
        }

        /**
         * @param errorMessage Error message if the connection is in a failed state.
         * 
         * @return builder
         * 
         */
        public Builder errorMessage(@Nullable Output<String> errorMessage) {
            $.errorMessage = errorMessage;
            return this;
        }

        /**
         * @param errorMessage Error message if the connection is in a failed state.
         * 
         * @return builder
         * 
         */
        public Builder errorMessage(String errorMessage) {
            return errorMessage(Output.of(errorMessage));
        }

        /**
         * @param interfaceEndpointId Interface endpoint ID that is created from the specified service endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder interfaceEndpointId(@Nullable Output<String> interfaceEndpointId) {
            $.interfaceEndpointId = interfaceEndpointId;
            return this;
        }

        /**
         * @param interfaceEndpointId Interface endpoint ID that is created from the specified service endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder interfaceEndpointId(String interfaceEndpointId) {
            return interfaceEndpointId(Output.of(interfaceEndpointId));
        }

        /**
         * @param interfaceEndpointName Name of interface endpoint that is created from the specified service endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder interfaceEndpointName(@Nullable Output<String> interfaceEndpointName) {
            $.interfaceEndpointName = interfaceEndpointName;
            return this;
        }

        /**
         * @param interfaceEndpointName Name of interface endpoint that is created from the specified service endpoint ID.
         * 
         * @return builder
         * 
         */
        public Builder interfaceEndpointName(String interfaceEndpointName) {
            return interfaceEndpointName(Output.of(interfaceEndpointName));
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.&lt;br&gt;**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group or project id remains the same. The resource and corresponding endpoints use the term groups.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.&lt;br&gt;**NOTE**: Groups and projects are synonymous terms. Your group id is the same as your project id. For existing groups, your group or project id remains the same. The resource and corresponding endpoints use the term groups.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param providerAccountId Account ID from the cloud provider.
         * 
         * @return builder
         * 
         */
        public Builder providerAccountId(@Nullable Output<String> providerAccountId) {
            $.providerAccountId = providerAccountId;
            return this;
        }

        /**
         * @param providerAccountId Account ID from the cloud provider.
         * 
         * @return builder
         * 
         */
        public Builder providerAccountId(String providerAccountId) {
            return providerAccountId(Output.of(providerAccountId));
        }

        /**
         * @param providerName Provider where the endpoint is deployed. Valid values are AWS and AZURE.
         * 
         * @return builder
         * 
         */
        public Builder providerName(@Nullable Output<String> providerName) {
            $.providerName = providerName;
            return this;
        }

        /**
         * @param providerName Provider where the endpoint is deployed. Valid values are AWS and AZURE.
         * 
         * @return builder
         * 
         */
        public Builder providerName(String providerName) {
            return providerName(Output.of(providerName));
        }

        /**
         * @param region The region of the Provider’s cluster. See [AZURE](https://www.mongodb.com/docs/atlas/reference/microsoft-azure/#stream-processing-instances) and [AWS](https://www.mongodb.com/docs/atlas/reference/amazon-aws/#stream-processing-instances) supported regions. When the vendor is `CONFLUENT`, this is the domain name of Confluent cluster. When the vendor is `MSK`, this is computed by the API from the provided `arn`.
         * 
         * @return builder
         * 
         */
        public Builder region(@Nullable Output<String> region) {
            $.region = region;
            return this;
        }

        /**
         * @param region The region of the Provider’s cluster. See [AZURE](https://www.mongodb.com/docs/atlas/reference/microsoft-azure/#stream-processing-instances) and [AWS](https://www.mongodb.com/docs/atlas/reference/amazon-aws/#stream-processing-instances) supported regions. When the vendor is `CONFLUENT`, this is the domain name of Confluent cluster. When the vendor is `MSK`, this is computed by the API from the provided `arn`.
         * 
         * @return builder
         * 
         */
        public Builder region(String region) {
            return region(Output.of(region));
        }

        /**
         * @param serviceEndpointId For AZURE EVENTHUB, this is the [namespace endpoint ID](https://learn.microsoft.com/en-us/rest/api/eventhub/namespaces/get). For AWS CONFLUENT cluster, this is the [VPC Endpoint service name](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html).
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointId(@Nullable Output<String> serviceEndpointId) {
            $.serviceEndpointId = serviceEndpointId;
            return this;
        }

        /**
         * @param serviceEndpointId For AZURE EVENTHUB, this is the [namespace endpoint ID](https://learn.microsoft.com/en-us/rest/api/eventhub/namespaces/get). For AWS CONFLUENT cluster, this is the [VPC Endpoint service name](https://docs.confluent.io/cloud/current/networking/private-links/aws-privatelink.html).
         * 
         * @return builder
         * 
         */
        public Builder serviceEndpointId(String serviceEndpointId) {
            return serviceEndpointId(Output.of(serviceEndpointId));
        }

        /**
         * @param state Status of the connection.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Status of the connection.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        /**
         * @param vendor Vendor that manages the endpoint. The following are the vendor values per provider:
         * 
         *     * **AWS**: MSK, CONFLUENT, and S3
         *     
         *     * **Azure**: EVENTHUB and CONFLUENT
         * 
         * @return builder
         * 
         */
        public Builder vendor(@Nullable Output<String> vendor) {
            $.vendor = vendor;
            return this;
        }

        /**
         * @param vendor Vendor that manages the endpoint. The following are the vendor values per provider:
         * 
         *     * **AWS**: MSK, CONFLUENT, and S3
         *     
         *     * **Azure**: EVENTHUB and CONFLUENT
         * 
         * @return builder
         * 
         */
        public Builder vendor(String vendor) {
            return vendor(Output.of(vendor));
        }

        public StreamPrivatelinkEndpointState build() {
            return $;
        }
    }

}
