// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.DataLakePipelineSinkArgs;
import com.pulumi.mongodbatlas.inputs.DataLakePipelineSourceArgs;
import com.pulumi.mongodbatlas.inputs.DataLakePipelineTransformationArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class DataLakePipelineArgs extends com.pulumi.resources.ResourceArgs {

    public static final DataLakePipelineArgs Empty = new DataLakePipelineArgs();

    /**
     * Name of the Atlas Data Lake Pipeline.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Name of the Atlas Data Lake Pipeline.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * The unique ID for the project to create a data lake pipeline.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The unique ID for the project to create a data lake pipeline.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    @Import(name="sink")
    private @Nullable Output<DataLakePipelineSinkArgs> sink;

    public Optional<Output<DataLakePipelineSinkArgs>> sink() {
        return Optional.ofNullable(this.sink);
    }

    @Import(name="source")
    private @Nullable Output<DataLakePipelineSourceArgs> source;

    public Optional<Output<DataLakePipelineSourceArgs>> source() {
        return Optional.ofNullable(this.source);
    }

    /**
     * Fields to be excluded for this Data Lake Pipeline.
     * * `transformations.#.field` - Key in the document.
     * * `transformations.#.type` - Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
     * 
     */
    @Import(name="transformations")
    private @Nullable Output<List<DataLakePipelineTransformationArgs>> transformations;

    /**
     * @return Fields to be excluded for this Data Lake Pipeline.
     * * `transformations.#.field` - Key in the document.
     * * `transformations.#.type` - Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
     * 
     */
    public Optional<Output<List<DataLakePipelineTransformationArgs>>> transformations() {
        return Optional.ofNullable(this.transformations);
    }

    private DataLakePipelineArgs() {}

    private DataLakePipelineArgs(DataLakePipelineArgs $) {
        this.name = $.name;
        this.projectId = $.projectId;
        this.sink = $.sink;
        this.source = $.source;
        this.transformations = $.transformations;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(DataLakePipelineArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private DataLakePipelineArgs $;

        public Builder() {
            $ = new DataLakePipelineArgs();
        }

        public Builder(DataLakePipelineArgs defaults) {
            $ = new DataLakePipelineArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param name Name of the Atlas Data Lake Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Name of the Atlas Data Lake Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param projectId The unique ID for the project to create a data lake pipeline.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The unique ID for the project to create a data lake pipeline.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public Builder sink(@Nullable Output<DataLakePipelineSinkArgs> sink) {
            $.sink = sink;
            return this;
        }

        public Builder sink(DataLakePipelineSinkArgs sink) {
            return sink(Output.of(sink));
        }

        public Builder source(@Nullable Output<DataLakePipelineSourceArgs> source) {
            $.source = source;
            return this;
        }

        public Builder source(DataLakePipelineSourceArgs source) {
            return source(Output.of(source));
        }

        /**
         * @param transformations Fields to be excluded for this Data Lake Pipeline.
         * * `transformations.#.field` - Key in the document.
         * * `transformations.#.type` - Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder transformations(@Nullable Output<List<DataLakePipelineTransformationArgs>> transformations) {
            $.transformations = transformations;
            return this;
        }

        /**
         * @param transformations Fields to be excluded for this Data Lake Pipeline.
         * * `transformations.#.field` - Key in the document.
         * * `transformations.#.type` - Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder transformations(List<DataLakePipelineTransformationArgs> transformations) {
            return transformations(Output.of(transformations));
        }

        /**
         * @param transformations Fields to be excluded for this Data Lake Pipeline.
         * * `transformations.#.field` - Key in the document.
         * * `transformations.#.type` - Type of transformation applied during the export of the namespace in a Data Lake Pipeline.
         * 
         * @return builder
         * 
         */
        public Builder transformations(DataLakePipelineTransformationArgs... transformations) {
            return transformations(List.of(transformations));
        }

        public DataLakePipelineArgs build() {
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            return $;
        }
    }

}
