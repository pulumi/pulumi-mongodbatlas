// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.GetCloudProviderAccessSetupAzureConfigArgs;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetCloudProviderAccessSetupArgs extends com.pulumi.resources.InvokeArgs {

    public static final GetCloudProviderAccessSetupArgs Empty = new GetCloudProviderAccessSetupArgs();

    /**
     * azure related configurations
     * 
     */
    @Import(name="azureConfigs")
    private @Nullable Output<List<GetCloudProviderAccessSetupAzureConfigArgs>> azureConfigs;

    /**
     * @return azure related configurations
     * 
     */
    public Optional<Output<List<GetCloudProviderAccessSetupAzureConfigArgs>>> azureConfigs() {
        return Optional.ofNullable(this.azureConfigs);
    }

    /**
     * The unique ID for the project to get all Cloud Provider Access
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return The unique ID for the project to get all Cloud Provider Access
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    /**
     * cloud provider name, currently only AWS is supported
     * 
     */
    @Import(name="providerName", required=true)
    private Output<String> providerName;

    /**
     * @return cloud provider name, currently only AWS is supported
     * 
     */
    public Output<String> providerName() {
        return this.providerName;
    }

    /**
     * unique role id among all the aws roles provided by mongodb atlas
     * 
     */
    @Import(name="roleId", required=true)
    private Output<String> roleId;

    /**
     * @return unique role id among all the aws roles provided by mongodb atlas
     * 
     */
    public Output<String> roleId() {
        return this.roleId;
    }

    private GetCloudProviderAccessSetupArgs() {}

    private GetCloudProviderAccessSetupArgs(GetCloudProviderAccessSetupArgs $) {
        this.azureConfigs = $.azureConfigs;
        this.projectId = $.projectId;
        this.providerName = $.providerName;
        this.roleId = $.roleId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetCloudProviderAccessSetupArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetCloudProviderAccessSetupArgs $;

        public Builder() {
            $ = new GetCloudProviderAccessSetupArgs();
        }

        public Builder(GetCloudProviderAccessSetupArgs defaults) {
            $ = new GetCloudProviderAccessSetupArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param azureConfigs azure related configurations
         * 
         * @return builder
         * 
         */
        public Builder azureConfigs(@Nullable Output<List<GetCloudProviderAccessSetupAzureConfigArgs>> azureConfigs) {
            $.azureConfigs = azureConfigs;
            return this;
        }

        /**
         * @param azureConfigs azure related configurations
         * 
         * @return builder
         * 
         */
        public Builder azureConfigs(List<GetCloudProviderAccessSetupAzureConfigArgs> azureConfigs) {
            return azureConfigs(Output.of(azureConfigs));
        }

        /**
         * @param azureConfigs azure related configurations
         * 
         * @return builder
         * 
         */
        public Builder azureConfigs(GetCloudProviderAccessSetupAzureConfigArgs... azureConfigs) {
            return azureConfigs(List.of(azureConfigs));
        }

        /**
         * @param projectId The unique ID for the project to get all Cloud Provider Access
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The unique ID for the project to get all Cloud Provider Access
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param providerName cloud provider name, currently only AWS is supported
         * 
         * @return builder
         * 
         */
        public Builder providerName(Output<String> providerName) {
            $.providerName = providerName;
            return this;
        }

        /**
         * @param providerName cloud provider name, currently only AWS is supported
         * 
         * @return builder
         * 
         */
        public Builder providerName(String providerName) {
            return providerName(Output.of(providerName));
        }

        /**
         * @param roleId unique role id among all the aws roles provided by mongodb atlas
         * 
         * @return builder
         * 
         */
        public Builder roleId(Output<String> roleId) {
            $.roleId = roleId;
            return this;
        }

        /**
         * @param roleId unique role id among all the aws roles provided by mongodb atlas
         * 
         * @return builder
         * 
         */
        public Builder roleId(String roleId) {
            return roleId(Output.of(roleId));
        }

        public GetCloudProviderAccessSetupArgs build() {
            $.projectId = Objects.requireNonNull($.projectId, "expected parameter 'projectId' to be non-null");
            $.providerName = Objects.requireNonNull($.providerName, "expected parameter 'providerName' to be non-null");
            $.roleId = Objects.requireNonNull($.roleId, "expected parameter 'roleId' to be non-null");
            return $;
        }
    }

}
