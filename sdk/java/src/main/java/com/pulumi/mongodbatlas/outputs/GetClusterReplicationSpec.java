// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetClusterReplicationSpecRegionsConfig;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetClusterReplicationSpec {
    /**
     * @return Unique identifer of the replication document for a zone in a Global Cluster. This value corresponds to the legacy sharding schema (no independent shard scaling) and is different from the Shard ID you may see in the Atlas UI.
     * 
     */
    private String id;
    /**
     * @return Number of shards to deploy in the specified zone.
     * 
     */
    private Integer numShards;
    /**
     * @return Describes the physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.
     * 
     */
    private List<GetClusterReplicationSpecRegionsConfig> regionsConfigs;
    /**
     * @return Indicates the n ame for the zone in a Global Cluster.
     * 
     */
    private String zoneName;

    private GetClusterReplicationSpec() {}
    /**
     * @return Unique identifer of the replication document for a zone in a Global Cluster. This value corresponds to the legacy sharding schema (no independent shard scaling) and is different from the Shard ID you may see in the Atlas UI.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Number of shards to deploy in the specified zone.
     * 
     */
    public Integer numShards() {
        return this.numShards;
    }
    /**
     * @return Describes the physical location of the region. Each regionsConfig document describes the region’s priority in elections and the number and type of MongoDB nodes Atlas deploys to the region. You must order each regionsConfigs document by regionsConfig.priority, descending. See Region Config below for more details.
     * 
     */
    public List<GetClusterReplicationSpecRegionsConfig> regionsConfigs() {
        return this.regionsConfigs;
    }
    /**
     * @return Indicates the n ame for the zone in a Global Cluster.
     * 
     */
    public String zoneName() {
        return this.zoneName;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetClusterReplicationSpec defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String id;
        private Integer numShards;
        private List<GetClusterReplicationSpecRegionsConfig> regionsConfigs;
        private String zoneName;
        public Builder() {}
        public Builder(GetClusterReplicationSpec defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.id = defaults.id;
    	      this.numShards = defaults.numShards;
    	      this.regionsConfigs = defaults.regionsConfigs;
    	      this.zoneName = defaults.zoneName;
        }

        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetClusterReplicationSpec", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder numShards(Integer numShards) {
            if (numShards == null) {
              throw new MissingRequiredPropertyException("GetClusterReplicationSpec", "numShards");
            }
            this.numShards = numShards;
            return this;
        }
        @CustomType.Setter
        public Builder regionsConfigs(List<GetClusterReplicationSpecRegionsConfig> regionsConfigs) {
            if (regionsConfigs == null) {
              throw new MissingRequiredPropertyException("GetClusterReplicationSpec", "regionsConfigs");
            }
            this.regionsConfigs = regionsConfigs;
            return this;
        }
        public Builder regionsConfigs(GetClusterReplicationSpecRegionsConfig... regionsConfigs) {
            return regionsConfigs(List.of(regionsConfigs));
        }
        @CustomType.Setter
        public Builder zoneName(String zoneName) {
            if (zoneName == null) {
              throw new MissingRequiredPropertyException("GetClusterReplicationSpec", "zoneName");
            }
            this.zoneName = zoneName;
            return this;
        }
        public GetClusterReplicationSpec build() {
            final var _resultValue = new GetClusterReplicationSpec();
            _resultValue.id = id;
            _resultValue.numShards = numShards;
            _resultValue.regionsConfigs = regionsConfigs;
            _resultValue.zoneName = zoneName;
            return _resultValue;
        }
    }
}
