// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetAlertConfigurationNotification {
    /**
     * @return Slack API token. Required for the SLACK notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     * 
     */
    private String apiToken;
    /**
     * @return Slack channel name. Required for the SLACK notifications type.
     * 
     */
    private String channelName;
    /**
     * @return Datadog API Key. Found in the Datadog dashboard. Required for the DATADOG notifications type.
     * 
     */
    private String datadogApiKey;
    /**
     * @return Region that indicates which API URL to use. Accepted regions are: `US`, `EU`. The default Datadog region is US.
     * 
     */
    private String datadogRegion;
    /**
     * @return Number of minutes to wait after an alert condition is detected before sending out the first notification.
     * 
     */
    private Integer delayMin;
    /**
     * @return Email address to which alert notifications are sent. Required for the EMAIL notifications type.
     * 
     */
    private String emailAddress;
    /**
     * @return Flag indicating email notifications should be sent. Atlas returns this value if `type_name` is set  to `ORG`, `GROUP`, or `USER`.
     * 
     */
    private Boolean emailEnabled;
    /**
     * @return Number of minutes to wait between successive notifications for unacknowledged alerts that are not resolved. The minimum value is 5.
     * 
     */
    private Integer intervalMin;
    /**
     * @return Microsoft Teams channel incoming webhook URL. Required for the `MICROSOFT_TEAMS` notifications type.
     * 
     */
    private String microsoftTeamsWebhookUrl;
    /**
     * @return Mobile number to which alert notifications are sent. Required for the SMS notifications type.
     * 
     */
    private String mobileNumber;
    /**
     * @return The notifier id is a system-generated unique identifier assigned to each notification method. This is needed when updating third-party notifications without requiring explicit authentication credentials.
     * 
     */
    private String notifierId;
    /**
     * @return Opsgenie API Key. Required for the `OPS_GENIE` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     * 
     */
    private String opsGenieApiKey;
    /**
     * @return Region that indicates which API URL to use. Accepted regions are: `US` ,`EU`. The default Opsgenie region is US.
     * 
     */
    private String opsGenieRegion;
    /**
     * @return Atlas role in current Project or Organization. Atlas returns this value if you set `type_name` to `ORG` or `GROUP`.
     * 
     */
    private List<String> roles;
    /**
     * @return PagerDuty service key. Required for the PAGER_DUTY notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     * 
     */
    private String serviceKey;
    /**
     * @return Flag indicating text notifications should be sent. Atlas returns this value if `type_name` is set to `ORG`, `GROUP`, or `USER`.
     * 
     */
    private Boolean smsEnabled;
    /**
     * @return Unique identifier of a team.
     * 
     */
    private String teamId;
    /**
     * @return Label for the team that receives this notification.
     * 
     */
    private String teamName;
    /**
     * @return Type of alert notification.
     * Accepted values are:
     * 
     */
    private String typeName;
    /**
     * @return Name of the Atlas user to which to send notifications. Only a user in the project that owns the alert configuration is allowed here. Required for the `USER` notifications type.
     * 
     */
    private String username;
    /**
     * @return VictorOps API key. Required for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     * 
     */
    private String victorOpsApiKey;
    /**
     * @return VictorOps routing key. Optional for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     * 
     */
    private String victorOpsRoutingKey;
    /**
     * @return Authentication secret for the `WEBHOOK` notifications type.
     * 
     */
    private String webhookSecret;
    /**
     * @return Target URL  for the `WEBHOOK` notifications type.
     * 
     */
    private String webhookUrl;

    private GetAlertConfigurationNotification() {}
    /**
     * @return Slack API token. Required for the SLACK notifications type. If the token later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     * 
     */
    public String apiToken() {
        return this.apiToken;
    }
    /**
     * @return Slack channel name. Required for the SLACK notifications type.
     * 
     */
    public String channelName() {
        return this.channelName;
    }
    /**
     * @return Datadog API Key. Found in the Datadog dashboard. Required for the DATADOG notifications type.
     * 
     */
    public String datadogApiKey() {
        return this.datadogApiKey;
    }
    /**
     * @return Region that indicates which API URL to use. Accepted regions are: `US`, `EU`. The default Datadog region is US.
     * 
     */
    public String datadogRegion() {
        return this.datadogRegion;
    }
    /**
     * @return Number of minutes to wait after an alert condition is detected before sending out the first notification.
     * 
     */
    public Integer delayMin() {
        return this.delayMin;
    }
    /**
     * @return Email address to which alert notifications are sent. Required for the EMAIL notifications type.
     * 
     */
    public String emailAddress() {
        return this.emailAddress;
    }
    /**
     * @return Flag indicating email notifications should be sent. Atlas returns this value if `type_name` is set  to `ORG`, `GROUP`, or `USER`.
     * 
     */
    public Boolean emailEnabled() {
        return this.emailEnabled;
    }
    /**
     * @return Number of minutes to wait between successive notifications for unacknowledged alerts that are not resolved. The minimum value is 5.
     * 
     */
    public Integer intervalMin() {
        return this.intervalMin;
    }
    /**
     * @return Microsoft Teams channel incoming webhook URL. Required for the `MICROSOFT_TEAMS` notifications type.
     * 
     */
    public String microsoftTeamsWebhookUrl() {
        return this.microsoftTeamsWebhookUrl;
    }
    /**
     * @return Mobile number to which alert notifications are sent. Required for the SMS notifications type.
     * 
     */
    public String mobileNumber() {
        return this.mobileNumber;
    }
    /**
     * @return The notifier id is a system-generated unique identifier assigned to each notification method. This is needed when updating third-party notifications without requiring explicit authentication credentials.
     * 
     */
    public String notifierId() {
        return this.notifierId;
    }
    /**
     * @return Opsgenie API Key. Required for the `OPS_GENIE` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the token.
     * 
     */
    public String opsGenieApiKey() {
        return this.opsGenieApiKey;
    }
    /**
     * @return Region that indicates which API URL to use. Accepted regions are: `US` ,`EU`. The default Opsgenie region is US.
     * 
     */
    public String opsGenieRegion() {
        return this.opsGenieRegion;
    }
    /**
     * @return Atlas role in current Project or Organization. Atlas returns this value if you set `type_name` to `ORG` or `GROUP`.
     * 
     */
    public List<String> roles() {
        return this.roles;
    }
    /**
     * @return PagerDuty service key. Required for the PAGER_DUTY notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     * 
     */
    public String serviceKey() {
        return this.serviceKey;
    }
    /**
     * @return Flag indicating text notifications should be sent. Atlas returns this value if `type_name` is set to `ORG`, `GROUP`, or `USER`.
     * 
     */
    public Boolean smsEnabled() {
        return this.smsEnabled;
    }
    /**
     * @return Unique identifier of a team.
     * 
     */
    public String teamId() {
        return this.teamId;
    }
    /**
     * @return Label for the team that receives this notification.
     * 
     */
    public String teamName() {
        return this.teamName;
    }
    /**
     * @return Type of alert notification.
     * Accepted values are:
     * 
     */
    public String typeName() {
        return this.typeName;
    }
    /**
     * @return Name of the Atlas user to which to send notifications. Only a user in the project that owns the alert configuration is allowed here. Required for the `USER` notifications type.
     * 
     */
    public String username() {
        return this.username;
    }
    /**
     * @return VictorOps API key. Required for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     * 
     */
    public String victorOpsApiKey() {
        return this.victorOpsApiKey;
    }
    /**
     * @return VictorOps routing key. Optional for the `VICTOR_OPS` notifications type. If the key later becomes invalid, Atlas sends an email to the project owner and eventually removes the key.
     * 
     */
    public String victorOpsRoutingKey() {
        return this.victorOpsRoutingKey;
    }
    /**
     * @return Authentication secret for the `WEBHOOK` notifications type.
     * 
     */
    public String webhookSecret() {
        return this.webhookSecret;
    }
    /**
     * @return Target URL  for the `WEBHOOK` notifications type.
     * 
     */
    public String webhookUrl() {
        return this.webhookUrl;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetAlertConfigurationNotification defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String apiToken;
        private String channelName;
        private String datadogApiKey;
        private String datadogRegion;
        private Integer delayMin;
        private String emailAddress;
        private Boolean emailEnabled;
        private Integer intervalMin;
        private String microsoftTeamsWebhookUrl;
        private String mobileNumber;
        private String notifierId;
        private String opsGenieApiKey;
        private String opsGenieRegion;
        private List<String> roles;
        private String serviceKey;
        private Boolean smsEnabled;
        private String teamId;
        private String teamName;
        private String typeName;
        private String username;
        private String victorOpsApiKey;
        private String victorOpsRoutingKey;
        private String webhookSecret;
        private String webhookUrl;
        public Builder() {}
        public Builder(GetAlertConfigurationNotification defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.apiToken = defaults.apiToken;
    	      this.channelName = defaults.channelName;
    	      this.datadogApiKey = defaults.datadogApiKey;
    	      this.datadogRegion = defaults.datadogRegion;
    	      this.delayMin = defaults.delayMin;
    	      this.emailAddress = defaults.emailAddress;
    	      this.emailEnabled = defaults.emailEnabled;
    	      this.intervalMin = defaults.intervalMin;
    	      this.microsoftTeamsWebhookUrl = defaults.microsoftTeamsWebhookUrl;
    	      this.mobileNumber = defaults.mobileNumber;
    	      this.notifierId = defaults.notifierId;
    	      this.opsGenieApiKey = defaults.opsGenieApiKey;
    	      this.opsGenieRegion = defaults.opsGenieRegion;
    	      this.roles = defaults.roles;
    	      this.serviceKey = defaults.serviceKey;
    	      this.smsEnabled = defaults.smsEnabled;
    	      this.teamId = defaults.teamId;
    	      this.teamName = defaults.teamName;
    	      this.typeName = defaults.typeName;
    	      this.username = defaults.username;
    	      this.victorOpsApiKey = defaults.victorOpsApiKey;
    	      this.victorOpsRoutingKey = defaults.victorOpsRoutingKey;
    	      this.webhookSecret = defaults.webhookSecret;
    	      this.webhookUrl = defaults.webhookUrl;
        }

        @CustomType.Setter
        public Builder apiToken(String apiToken) {
            this.apiToken = Objects.requireNonNull(apiToken);
            return this;
        }
        @CustomType.Setter
        public Builder channelName(String channelName) {
            this.channelName = Objects.requireNonNull(channelName);
            return this;
        }
        @CustomType.Setter
        public Builder datadogApiKey(String datadogApiKey) {
            this.datadogApiKey = Objects.requireNonNull(datadogApiKey);
            return this;
        }
        @CustomType.Setter
        public Builder datadogRegion(String datadogRegion) {
            this.datadogRegion = Objects.requireNonNull(datadogRegion);
            return this;
        }
        @CustomType.Setter
        public Builder delayMin(Integer delayMin) {
            this.delayMin = Objects.requireNonNull(delayMin);
            return this;
        }
        @CustomType.Setter
        public Builder emailAddress(String emailAddress) {
            this.emailAddress = Objects.requireNonNull(emailAddress);
            return this;
        }
        @CustomType.Setter
        public Builder emailEnabled(Boolean emailEnabled) {
            this.emailEnabled = Objects.requireNonNull(emailEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder intervalMin(Integer intervalMin) {
            this.intervalMin = Objects.requireNonNull(intervalMin);
            return this;
        }
        @CustomType.Setter
        public Builder microsoftTeamsWebhookUrl(String microsoftTeamsWebhookUrl) {
            this.microsoftTeamsWebhookUrl = Objects.requireNonNull(microsoftTeamsWebhookUrl);
            return this;
        }
        @CustomType.Setter
        public Builder mobileNumber(String mobileNumber) {
            this.mobileNumber = Objects.requireNonNull(mobileNumber);
            return this;
        }
        @CustomType.Setter
        public Builder notifierId(String notifierId) {
            this.notifierId = Objects.requireNonNull(notifierId);
            return this;
        }
        @CustomType.Setter
        public Builder opsGenieApiKey(String opsGenieApiKey) {
            this.opsGenieApiKey = Objects.requireNonNull(opsGenieApiKey);
            return this;
        }
        @CustomType.Setter
        public Builder opsGenieRegion(String opsGenieRegion) {
            this.opsGenieRegion = Objects.requireNonNull(opsGenieRegion);
            return this;
        }
        @CustomType.Setter
        public Builder roles(List<String> roles) {
            this.roles = Objects.requireNonNull(roles);
            return this;
        }
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder serviceKey(String serviceKey) {
            this.serviceKey = Objects.requireNonNull(serviceKey);
            return this;
        }
        @CustomType.Setter
        public Builder smsEnabled(Boolean smsEnabled) {
            this.smsEnabled = Objects.requireNonNull(smsEnabled);
            return this;
        }
        @CustomType.Setter
        public Builder teamId(String teamId) {
            this.teamId = Objects.requireNonNull(teamId);
            return this;
        }
        @CustomType.Setter
        public Builder teamName(String teamName) {
            this.teamName = Objects.requireNonNull(teamName);
            return this;
        }
        @CustomType.Setter
        public Builder typeName(String typeName) {
            this.typeName = Objects.requireNonNull(typeName);
            return this;
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        @CustomType.Setter
        public Builder victorOpsApiKey(String victorOpsApiKey) {
            this.victorOpsApiKey = Objects.requireNonNull(victorOpsApiKey);
            return this;
        }
        @CustomType.Setter
        public Builder victorOpsRoutingKey(String victorOpsRoutingKey) {
            this.victorOpsRoutingKey = Objects.requireNonNull(victorOpsRoutingKey);
            return this;
        }
        @CustomType.Setter
        public Builder webhookSecret(String webhookSecret) {
            this.webhookSecret = Objects.requireNonNull(webhookSecret);
            return this;
        }
        @CustomType.Setter
        public Builder webhookUrl(String webhookUrl) {
            this.webhookUrl = Objects.requireNonNull(webhookUrl);
            return this;
        }
        public GetAlertConfigurationNotification build() {
            final var _resultValue = new GetAlertConfigurationNotification();
            _resultValue.apiToken = apiToken;
            _resultValue.channelName = channelName;
            _resultValue.datadogApiKey = datadogApiKey;
            _resultValue.datadogRegion = datadogRegion;
            _resultValue.delayMin = delayMin;
            _resultValue.emailAddress = emailAddress;
            _resultValue.emailEnabled = emailEnabled;
            _resultValue.intervalMin = intervalMin;
            _resultValue.microsoftTeamsWebhookUrl = microsoftTeamsWebhookUrl;
            _resultValue.mobileNumber = mobileNumber;
            _resultValue.notifierId = notifierId;
            _resultValue.opsGenieApiKey = opsGenieApiKey;
            _resultValue.opsGenieRegion = opsGenieRegion;
            _resultValue.roles = roles;
            _resultValue.serviceKey = serviceKey;
            _resultValue.smsEnabled = smsEnabled;
            _resultValue.teamId = teamId;
            _resultValue.teamName = teamName;
            _resultValue.typeName = typeName;
            _resultValue.username = username;
            _resultValue.victorOpsApiKey = victorOpsApiKey;
            _resultValue.victorOpsRoutingKey = victorOpsRoutingKey;
            _resultValue.webhookSecret = webhookSecret;
            _resultValue.webhookUrl = webhookUrl;
            return _resultValue;
        }
    }
}
