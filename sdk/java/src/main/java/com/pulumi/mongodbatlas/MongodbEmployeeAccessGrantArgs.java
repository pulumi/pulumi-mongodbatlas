// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;


public final class MongodbEmployeeAccessGrantArgs extends com.pulumi.resources.ResourceArgs {

    public static final MongodbEmployeeAccessGrantArgs Empty = new MongodbEmployeeAccessGrantArgs();

    /**
     * Human-readable label that identifies this cluster.
     * 
     */
    @Import(name="clusterName", required=true)
    private Output<String> clusterName;

    /**
     * @return Human-readable label that identifies this cluster.
     * 
     */
    public Output<String> clusterName() {
        return this.clusterName;
    }

    /**
     * Expiration date for the employee access grant.
     * 
     */
    @Import(name="expirationTime", required=true)
    private Output<String> expirationTime;

    /**
     * @return Expiration date for the employee access grant.
     * 
     */
    public Output<String> expirationTime() {
        return this.expirationTime;
    }

    /**
     * Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
     * 
     */
    @Import(name="grantType", required=true)
    private Output<String> grantType;

    /**
     * @return Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
     * 
     */
    public Output<String> grantType() {
        return this.grantType;
    }

    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    @Import(name="projectId", required=true)
    private Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }

    private MongodbEmployeeAccessGrantArgs() {}

    private MongodbEmployeeAccessGrantArgs(MongodbEmployeeAccessGrantArgs $) {
        this.clusterName = $.clusterName;
        this.expirationTime = $.expirationTime;
        this.grantType = $.grantType;
        this.projectId = $.projectId;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(MongodbEmployeeAccessGrantArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private MongodbEmployeeAccessGrantArgs $;

        public Builder() {
            $ = new MongodbEmployeeAccessGrantArgs();
        }

        public Builder(MongodbEmployeeAccessGrantArgs defaults) {
            $ = new MongodbEmployeeAccessGrantArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param clusterName Human-readable label that identifies this cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(Output<String> clusterName) {
            $.clusterName = clusterName;
            return this;
        }

        /**
         * @param clusterName Human-readable label that identifies this cluster.
         * 
         * @return builder
         * 
         */
        public Builder clusterName(String clusterName) {
            return clusterName(Output.of(clusterName));
        }

        /**
         * @param expirationTime Expiration date for the employee access grant.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(Output<String> expirationTime) {
            $.expirationTime = expirationTime;
            return this;
        }

        /**
         * @param expirationTime Expiration date for the employee access grant.
         * 
         * @return builder
         * 
         */
        public Builder expirationTime(String expirationTime) {
            return expirationTime(Output.of(expirationTime));
        }

        /**
         * @param grantType Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
         * 
         * @return builder
         * 
         */
        public Builder grantType(Output<String> grantType) {
            $.grantType = grantType;
            return this;
        }

        /**
         * @param grantType Level of access to grant to MongoDB Employees. Possible values are CLUSTER*DATABASE*LOGS, CLUSTER*INFRASTRUCTURE or CLUSTER*INFRASTRUCTURE*AND*APP*SERVICES*SYNC_DATA.
         * 
         * @return builder
         * 
         */
        public Builder grantType(String grantType) {
            return grantType(Output.of(grantType));
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
         * 
         * @return builder
         * 
         */
        public Builder projectId(Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        public MongodbEmployeeAccessGrantArgs build() {
            if ($.clusterName == null) {
                throw new MissingRequiredPropertyException("MongodbEmployeeAccessGrantArgs", "clusterName");
            }
            if ($.expirationTime == null) {
                throw new MissingRequiredPropertyException("MongodbEmployeeAccessGrantArgs", "expirationTime");
            }
            if ($.grantType == null) {
                throw new MissingRequiredPropertyException("MongodbEmployeeAccessGrantArgs", "grantType");
            }
            if ($.projectId == null) {
                throw new MissingRequiredPropertyException("MongodbEmployeeAccessGrantArgs", "projectId");
            }
            return $;
        }
    }

}
