// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetProjectInvitationResult {
    /**
     * @return Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
     * 
     */
    private String createdAt;
    /**
     * @return Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
     * 
     */
    private String expiresAt;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    private String invitationId;
    /**
     * @return Atlas user who invited `username` to the project.
     * 
     */
    private String inviterUsername;
    private String projectId;
    /**
     * @return Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. Refer to the [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) for information on valid roles.
     * 
     */
    private List<String> roles;
    private String username;

    private GetProjectInvitationResult() {}
    /**
     * @return Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
     * 
     */
    public String createdAt() {
        return this.createdAt;
    }
    /**
     * @return Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
     * 
     */
    public String expiresAt() {
        return this.expiresAt;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    public String invitationId() {
        return this.invitationId;
    }
    /**
     * @return Atlas user who invited `username` to the project.
     * 
     */
    public String inviterUsername() {
        return this.inviterUsername;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. Refer to the [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) for information on valid roles.
     * 
     */
    public List<String> roles() {
        return this.roles;
    }
    public String username() {
        return this.username;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectInvitationResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String createdAt;
        private String expiresAt;
        private String id;
        private String invitationId;
        private String inviterUsername;
        private String projectId;
        private List<String> roles;
        private String username;
        public Builder() {}
        public Builder(GetProjectInvitationResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.createdAt = defaults.createdAt;
    	      this.expiresAt = defaults.expiresAt;
    	      this.id = defaults.id;
    	      this.invitationId = defaults.invitationId;
    	      this.inviterUsername = defaults.inviterUsername;
    	      this.projectId = defaults.projectId;
    	      this.roles = defaults.roles;
    	      this.username = defaults.username;
        }

        @CustomType.Setter
        public Builder createdAt(String createdAt) {
            this.createdAt = Objects.requireNonNull(createdAt);
            return this;
        }
        @CustomType.Setter
        public Builder expiresAt(String expiresAt) {
            this.expiresAt = Objects.requireNonNull(expiresAt);
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            this.id = Objects.requireNonNull(id);
            return this;
        }
        @CustomType.Setter
        public Builder invitationId(String invitationId) {
            this.invitationId = Objects.requireNonNull(invitationId);
            return this;
        }
        @CustomType.Setter
        public Builder inviterUsername(String inviterUsername) {
            this.inviterUsername = Objects.requireNonNull(inviterUsername);
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            this.projectId = Objects.requireNonNull(projectId);
            return this;
        }
        @CustomType.Setter
        public Builder roles(List<String> roles) {
            this.roles = Objects.requireNonNull(roles);
            return this;
        }
        public Builder roles(String... roles) {
            return roles(List.of(roles));
        }
        @CustomType.Setter
        public Builder username(String username) {
            this.username = Objects.requireNonNull(username);
            return this;
        }
        public GetProjectInvitationResult build() {
            final var _resultValue = new GetProjectInvitationResult();
            _resultValue.createdAt = createdAt;
            _resultValue.expiresAt = expiresAt;
            _resultValue.id = id;
            _resultValue.invitationId = invitationId;
            _resultValue.inviterUsername = inviterUsername;
            _resultValue.projectId = projectId;
            _resultValue.roles = roles;
            _resultValue.username = username;
            return _resultValue;
        }
    }
}
