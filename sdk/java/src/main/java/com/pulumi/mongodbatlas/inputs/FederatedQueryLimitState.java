// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Integer;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FederatedQueryLimitState extends com.pulumi.resources.ResourceArgs {

    public static final FederatedQueryLimitState Empty = new FederatedQueryLimitState();

    /**
     * Amount that indicates the current usage of the limit.
     * 
     */
    @Import(name="currentUsage")
    private @Nullable Output<Integer> currentUsage;

    /**
     * @return Amount that indicates the current usage of the limit.
     * 
     */
    public Optional<Output<Integer>> currentUsage() {
        return Optional.ofNullable(this.currentUsage);
    }

    /**
     * Default value of the limit.
     * * `lastModifiedDate` - Only used for Data Federation limits. Timestamp that indicates when this usage limit was last modified. This field uses the ISO 8601 timestamp format in UTC.
     * * `maximumLimit` - Maximum value of the limit.
     * 
     */
    @Import(name="defaultLimit")
    private @Nullable Output<Integer> defaultLimit;

    /**
     * @return Default value of the limit.
     * * `lastModifiedDate` - Only used for Data Federation limits. Timestamp that indicates when this usage limit was last modified. This field uses the ISO 8601 timestamp format in UTC.
     * * `maximumLimit` - Maximum value of the limit.
     * 
     */
    public Optional<Output<Integer>> defaultLimit() {
        return Optional.ofNullable(this.defaultLimit);
    }

    @Import(name="lastModifiedDate")
    private @Nullable Output<String> lastModifiedDate;

    public Optional<Output<String>> lastModifiedDate() {
        return Optional.ofNullable(this.lastModifiedDate);
    }

    /**
     * String enum that indicates whether the identity provider is active or not. Accepted values are:
     * * `bytesProcessed.query`: Limit on the number of bytes processed during a single data federation query.
     * * `bytesProcessed.daily`: Limit on the number of bytes processed for the data federation instance for the current day.
     * * `bytesProcessed.weekly`: Limit on the number of bytes processed for the data federation instance for the current week.
     * * `bytesProcessed.monthly`: Limit on the number of bytes processed for the data federation instance for the current month.
     * 
     */
    @Import(name="limitName")
    private @Nullable Output<String> limitName;

    /**
     * @return String enum that indicates whether the identity provider is active or not. Accepted values are:
     * * `bytesProcessed.query`: Limit on the number of bytes processed during a single data federation query.
     * * `bytesProcessed.daily`: Limit on the number of bytes processed for the data federation instance for the current day.
     * * `bytesProcessed.weekly`: Limit on the number of bytes processed for the data federation instance for the current week.
     * * `bytesProcessed.monthly`: Limit on the number of bytes processed for the data federation instance for the current month.
     * 
     */
    public Optional<Output<String>> limitName() {
        return Optional.ofNullable(this.limitName);
    }

    @Import(name="maximumLimit")
    private @Nullable Output<Integer> maximumLimit;

    public Optional<Output<Integer>> maximumLimit() {
        return Optional.ofNullable(this.maximumLimit);
    }

    /**
     * String enum that identifies action to take when the usage limit is exceeded. If limit span is set to QUERY, this is ignored because MongoDB Cloud stops the query when it exceeds the usage limit. Accepted values are &#34;BLOCK&#34; OR &#34;BLOCK_AND_KILL&#34;
     * 
     */
    @Import(name="overrunPolicy")
    private @Nullable Output<String> overrunPolicy;

    /**
     * @return String enum that identifies action to take when the usage limit is exceeded. If limit span is set to QUERY, this is ignored because MongoDB Cloud stops the query when it exceeds the usage limit. Accepted values are &#34;BLOCK&#34; OR &#34;BLOCK_AND_KILL&#34;
     * 
     */
    public Optional<Output<String>> overrunPolicy() {
        return Optional.ofNullable(this.overrunPolicy);
    }

    /**
     * The unique ID for the project to create a Federated Database Instance.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return The unique ID for the project to create a Federated Database Instance.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Name of the Atlas Federated Database Instance.
     * 
     */
    @Import(name="tenantName")
    private @Nullable Output<String> tenantName;

    /**
     * @return Name of the Atlas Federated Database Instance.
     * 
     */
    public Optional<Output<String>> tenantName() {
        return Optional.ofNullable(this.tenantName);
    }

    /**
     * Amount to set the limit to.
     * 
     */
    @Import(name="value")
    private @Nullable Output<Integer> value;

    /**
     * @return Amount to set the limit to.
     * 
     */
    public Optional<Output<Integer>> value() {
        return Optional.ofNullable(this.value);
    }

    private FederatedQueryLimitState() {}

    private FederatedQueryLimitState(FederatedQueryLimitState $) {
        this.currentUsage = $.currentUsage;
        this.defaultLimit = $.defaultLimit;
        this.lastModifiedDate = $.lastModifiedDate;
        this.limitName = $.limitName;
        this.maximumLimit = $.maximumLimit;
        this.overrunPolicy = $.overrunPolicy;
        this.projectId = $.projectId;
        this.tenantName = $.tenantName;
        this.value = $.value;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FederatedQueryLimitState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FederatedQueryLimitState $;

        public Builder() {
            $ = new FederatedQueryLimitState();
        }

        public Builder(FederatedQueryLimitState defaults) {
            $ = new FederatedQueryLimitState(Objects.requireNonNull(defaults));
        }

        /**
         * @param currentUsage Amount that indicates the current usage of the limit.
         * 
         * @return builder
         * 
         */
        public Builder currentUsage(@Nullable Output<Integer> currentUsage) {
            $.currentUsage = currentUsage;
            return this;
        }

        /**
         * @param currentUsage Amount that indicates the current usage of the limit.
         * 
         * @return builder
         * 
         */
        public Builder currentUsage(Integer currentUsage) {
            return currentUsage(Output.of(currentUsage));
        }

        /**
         * @param defaultLimit Default value of the limit.
         * * `lastModifiedDate` - Only used for Data Federation limits. Timestamp that indicates when this usage limit was last modified. This field uses the ISO 8601 timestamp format in UTC.
         * * `maximumLimit` - Maximum value of the limit.
         * 
         * @return builder
         * 
         */
        public Builder defaultLimit(@Nullable Output<Integer> defaultLimit) {
            $.defaultLimit = defaultLimit;
            return this;
        }

        /**
         * @param defaultLimit Default value of the limit.
         * * `lastModifiedDate` - Only used for Data Federation limits. Timestamp that indicates when this usage limit was last modified. This field uses the ISO 8601 timestamp format in UTC.
         * * `maximumLimit` - Maximum value of the limit.
         * 
         * @return builder
         * 
         */
        public Builder defaultLimit(Integer defaultLimit) {
            return defaultLimit(Output.of(defaultLimit));
        }

        public Builder lastModifiedDate(@Nullable Output<String> lastModifiedDate) {
            $.lastModifiedDate = lastModifiedDate;
            return this;
        }

        public Builder lastModifiedDate(String lastModifiedDate) {
            return lastModifiedDate(Output.of(lastModifiedDate));
        }

        /**
         * @param limitName String enum that indicates whether the identity provider is active or not. Accepted values are:
         * * `bytesProcessed.query`: Limit on the number of bytes processed during a single data federation query.
         * * `bytesProcessed.daily`: Limit on the number of bytes processed for the data federation instance for the current day.
         * * `bytesProcessed.weekly`: Limit on the number of bytes processed for the data federation instance for the current week.
         * * `bytesProcessed.monthly`: Limit on the number of bytes processed for the data federation instance for the current month.
         * 
         * @return builder
         * 
         */
        public Builder limitName(@Nullable Output<String> limitName) {
            $.limitName = limitName;
            return this;
        }

        /**
         * @param limitName String enum that indicates whether the identity provider is active or not. Accepted values are:
         * * `bytesProcessed.query`: Limit on the number of bytes processed during a single data federation query.
         * * `bytesProcessed.daily`: Limit on the number of bytes processed for the data federation instance for the current day.
         * * `bytesProcessed.weekly`: Limit on the number of bytes processed for the data federation instance for the current week.
         * * `bytesProcessed.monthly`: Limit on the number of bytes processed for the data federation instance for the current month.
         * 
         * @return builder
         * 
         */
        public Builder limitName(String limitName) {
            return limitName(Output.of(limitName));
        }

        public Builder maximumLimit(@Nullable Output<Integer> maximumLimit) {
            $.maximumLimit = maximumLimit;
            return this;
        }

        public Builder maximumLimit(Integer maximumLimit) {
            return maximumLimit(Output.of(maximumLimit));
        }

        /**
         * @param overrunPolicy String enum that identifies action to take when the usage limit is exceeded. If limit span is set to QUERY, this is ignored because MongoDB Cloud stops the query when it exceeds the usage limit. Accepted values are &#34;BLOCK&#34; OR &#34;BLOCK_AND_KILL&#34;
         * 
         * @return builder
         * 
         */
        public Builder overrunPolicy(@Nullable Output<String> overrunPolicy) {
            $.overrunPolicy = overrunPolicy;
            return this;
        }

        /**
         * @param overrunPolicy String enum that identifies action to take when the usage limit is exceeded. If limit span is set to QUERY, this is ignored because MongoDB Cloud stops the query when it exceeds the usage limit. Accepted values are &#34;BLOCK&#34; OR &#34;BLOCK_AND_KILL&#34;
         * 
         * @return builder
         * 
         */
        public Builder overrunPolicy(String overrunPolicy) {
            return overrunPolicy(Output.of(overrunPolicy));
        }

        /**
         * @param projectId The unique ID for the project to create a Federated Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId The unique ID for the project to create a Federated Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param tenantName Name of the Atlas Federated Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder tenantName(@Nullable Output<String> tenantName) {
            $.tenantName = tenantName;
            return this;
        }

        /**
         * @param tenantName Name of the Atlas Federated Database Instance.
         * 
         * @return builder
         * 
         */
        public Builder tenantName(String tenantName) {
            return tenantName(Output.of(tenantName));
        }

        /**
         * @param value Amount to set the limit to.
         * 
         * @return builder
         * 
         */
        public Builder value(@Nullable Output<Integer> value) {
            $.value = value;
            return this;
        }

        /**
         * @param value Amount to set the limit to.
         * 
         * @return builder
         * 
         */
        public Builder value(Integer value) {
            return value(Output.of(value));
        }

        public FederatedQueryLimitState build() {
            return $;
        }
    }

}
