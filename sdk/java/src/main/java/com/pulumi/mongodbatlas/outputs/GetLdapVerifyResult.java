// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetLdapVerifyLink;
import com.pulumi.mongodbatlas.outputs.GetLdapVerifyValidation;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetLdapVerifyResult {
    /**
     * @return The user DN that Atlas uses to connect to the LDAP server.
     * 
     */
    private String bindUsername;
    /**
     * @return (Required) The hostname or IP address of the LDAP server.
     * 
     */
    private String hostname;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
     * 
     */
    private List<GetLdapVerifyLink> links;
    /**
     * @return LDAP ConfigurationThe port to which the LDAP server listens for client connections.
     * 
     */
    private Integer port;
    private String projectId;
    /**
     * @return The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
     * 
     */
    private String requestId;
    /**
     * @return The current status of the LDAP over TLS/SSL configuration.
     * 
     */
    private String status;
    /**
     * @return Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details.
     * 
     */
    private List<GetLdapVerifyValidation> validations;

    private GetLdapVerifyResult() {}
    /**
     * @return The user DN that Atlas uses to connect to the LDAP server.
     * 
     */
    public String bindUsername() {
        return this.bindUsername;
    }
    /**
     * @return (Required) The hostname or IP address of the LDAP server.
     * 
     */
    public String hostname() {
        return this.hostname;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return One or more links to sub-resources. The relations in the URLs are explained in the Web Linking Specification.
     * 
     */
    public List<GetLdapVerifyLink> links() {
        return this.links;
    }
    /**
     * @return LDAP ConfigurationThe port to which the LDAP server listens for client connections.
     * 
     */
    public Integer port() {
        return this.port;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return The unique identifier for the request to verify the LDAP over TLS/SSL configuration.
     * 
     */
    public String requestId() {
        return this.requestId;
    }
    /**
     * @return The current status of the LDAP over TLS/SSL configuration.
     * 
     */
    public String status() {
        return this.status;
    }
    /**
     * @return Array of validation messages related to the verification of the provided LDAP over TLS/SSL configuration details.
     * 
     */
    public List<GetLdapVerifyValidation> validations() {
        return this.validations;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetLdapVerifyResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String bindUsername;
        private String hostname;
        private String id;
        private List<GetLdapVerifyLink> links;
        private Integer port;
        private String projectId;
        private String requestId;
        private String status;
        private List<GetLdapVerifyValidation> validations;
        public Builder() {}
        public Builder(GetLdapVerifyResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.bindUsername = defaults.bindUsername;
    	      this.hostname = defaults.hostname;
    	      this.id = defaults.id;
    	      this.links = defaults.links;
    	      this.port = defaults.port;
    	      this.projectId = defaults.projectId;
    	      this.requestId = defaults.requestId;
    	      this.status = defaults.status;
    	      this.validations = defaults.validations;
        }

        @CustomType.Setter
        public Builder bindUsername(String bindUsername) {
            if (bindUsername == null) {
              throw new MissingRequiredPropertyException("GetLdapVerifyResult", "bindUsername");
            }
            this.bindUsername = bindUsername;
            return this;
        }
        @CustomType.Setter
        public Builder hostname(String hostname) {
            if (hostname == null) {
              throw new MissingRequiredPropertyException("GetLdapVerifyResult", "hostname");
            }
            this.hostname = hostname;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetLdapVerifyResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder links(List<GetLdapVerifyLink> links) {
            if (links == null) {
              throw new MissingRequiredPropertyException("GetLdapVerifyResult", "links");
            }
            this.links = links;
            return this;
        }
        public Builder links(GetLdapVerifyLink... links) {
            return links(List.of(links));
        }
        @CustomType.Setter
        public Builder port(Integer port) {
            if (port == null) {
              throw new MissingRequiredPropertyException("GetLdapVerifyResult", "port");
            }
            this.port = port;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetLdapVerifyResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder requestId(String requestId) {
            if (requestId == null) {
              throw new MissingRequiredPropertyException("GetLdapVerifyResult", "requestId");
            }
            this.requestId = requestId;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetLdapVerifyResult", "status");
            }
            this.status = status;
            return this;
        }
        @CustomType.Setter
        public Builder validations(List<GetLdapVerifyValidation> validations) {
            if (validations == null) {
              throw new MissingRequiredPropertyException("GetLdapVerifyResult", "validations");
            }
            this.validations = validations;
            return this;
        }
        public Builder validations(GetLdapVerifyValidation... validations) {
            return validations(List.of(validations));
        }
        public GetLdapVerifyResult build() {
            final var _resultValue = new GetLdapVerifyResult();
            _resultValue.bindUsername = bindUsername;
            _resultValue.hostname = hostname;
            _resultValue.id = id;
            _resultValue.links = links;
            _resultValue.port = port;
            _resultValue.projectId = projectId;
            _resultValue.requestId = requestId;
            _resultValue.status = status;
            _resultValue.validations = validations;
            return _resultValue;
        }
    }
}
