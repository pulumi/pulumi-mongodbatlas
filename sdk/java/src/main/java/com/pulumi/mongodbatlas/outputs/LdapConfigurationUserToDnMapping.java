// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class LdapConfigurationUserToDnMapping {
    /**
     * @return An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516. Each numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
     * 
     */
    private @Nullable String ldapQuery;
    /**
     * @return A regular expression to match against a provided LDAP username. Each parenthesis-enclosed section represents a regular expression capture group used by the `substitution` or `ldap_query` template.
     * 
     */
    private @Nullable String match;
    /**
     * @return An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name. Each bracket-enclosed numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
     * 
     */
    private @Nullable String substitution;

    private LdapConfigurationUserToDnMapping() {}
    /**
     * @return An LDAP query formatting template that inserts the LDAP name matched by the `match` regular expression into an LDAP query URI as specified by RFC 4515 and RFC 4516. Each numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
     * 
     */
    public Optional<String> ldapQuery() {
        return Optional.ofNullable(this.ldapQuery);
    }
    /**
     * @return A regular expression to match against a provided LDAP username. Each parenthesis-enclosed section represents a regular expression capture group used by the `substitution` or `ldap_query` template.
     * 
     */
    public Optional<String> match() {
        return Optional.ofNullable(this.match);
    }
    /**
     * @return An LDAP Distinguished Name (DN) formatting template that converts the LDAP name matched by the `match` regular expression into an LDAP Distinguished Name. Each bracket-enclosed numeric value is replaced by the corresponding regular expression capture group extracted from the LDAP username that matched the `match` regular expression.
     * 
     */
    public Optional<String> substitution() {
        return Optional.ofNullable(this.substitution);
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(LdapConfigurationUserToDnMapping defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private @Nullable String ldapQuery;
        private @Nullable String match;
        private @Nullable String substitution;
        public Builder() {}
        public Builder(LdapConfigurationUserToDnMapping defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.ldapQuery = defaults.ldapQuery;
    	      this.match = defaults.match;
    	      this.substitution = defaults.substitution;
        }

        @CustomType.Setter
        public Builder ldapQuery(@Nullable String ldapQuery) {
            this.ldapQuery = ldapQuery;
            return this;
        }
        @CustomType.Setter
        public Builder match(@Nullable String match) {
            this.match = match;
            return this;
        }
        @CustomType.Setter
        public Builder substitution(@Nullable String substitution) {
            this.substitution = substitution;
            return this;
        }
        public LdapConfigurationUserToDnMapping build() {
            final var o = new LdapConfigurationUserToDnMapping();
            o.ldapQuery = ldapQuery;
            o.match = match;
            o.substitution = substitution;
            return o;
        }
    }
}
