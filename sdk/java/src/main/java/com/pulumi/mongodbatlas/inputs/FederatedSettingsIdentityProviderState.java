// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class FederatedSettingsIdentityProviderState extends com.pulumi.resources.ResourceArgs {

    public static final FederatedSettingsIdentityProviderState Empty = new FederatedSettingsIdentityProviderState();

    /**
     * List that contains the domains associated with the identity provider.
     * 
     */
    @Import(name="associatedDomains")
    private @Nullable Output<List<String>> associatedDomains;

    /**
     * @return List that contains the domains associated with the identity provider.
     * 
     */
    public Optional<Output<List<String>>> associatedDomains() {
        return Optional.ofNullable(this.associatedDomains);
    }

    /**
     * Identifier of the intended recipient of the token used in OIDC IdP.
     * 
     */
    @Import(name="audience")
    private @Nullable Output<String> audience;

    /**
     * @return Identifier of the intended recipient of the token used in OIDC IdP.
     * 
     */
    public Optional<Output<String>> audience() {
        return Optional.ofNullable(this.audience);
    }

    /**
     * Indicates whether authorization is granted based on group membership or user ID. Valid values are `GROUP` or `USER`.
     * 
     */
    @Import(name="authorizationType")
    private @Nullable Output<String> authorizationType;

    /**
     * @return Indicates whether authorization is granted based on group membership or user ID. Valid values are `GROUP` or `USER`.
     * 
     */
    public Optional<Output<String>> authorizationType() {
        return Optional.ofNullable(this.authorizationType);
    }

    /**
     * Client identifier that is assigned to an application by the OIDC Identity Provider.
     * 
     */
    @Import(name="clientId")
    private @Nullable Output<String> clientId;

    /**
     * @return Client identifier that is assigned to an application by the OIDC Identity Provider.
     * 
     */
    public Optional<Output<String>> clientId() {
        return Optional.ofNullable(this.clientId);
    }

    /**
     * The description of the identity provider.
     * 
     */
    @Import(name="description")
    private @Nullable Output<String> description;

    /**
     * @return The description of the identity provider.
     * 
     */
    public Optional<Output<String>> description() {
        return Optional.ofNullable(this.description);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     * 
     */
    @Import(name="federationSettingsId")
    private @Nullable Output<String> federationSettingsId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
     * 
     */
    public Optional<Output<String>> federationSettingsId() {
        return Optional.ofNullable(this.federationSettingsId);
    }

    /**
     * Identifier of the claim which contains OIDC IdP Group IDs in the token.
     * 
     */
    @Import(name="groupsClaim")
    private @Nullable Output<String> groupsClaim;

    /**
     * @return Identifier of the claim which contains OIDC IdP Group IDs in the token.
     * 
     */
    public Optional<Output<String>> groupsClaim() {
        return Optional.ofNullable(this.groupsClaim);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies the IdP.
     * 
     */
    @Import(name="idpId")
    private @Nullable Output<String> idpId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies the IdP.
     * 
     */
    public Optional<Output<String>> idpId() {
        return Optional.ofNullable(this.idpId);
    }

    @Import(name="idpType")
    private @Nullable Output<String> idpType;

    public Optional<Output<String>> idpType() {
        return Optional.ofNullable(this.idpType);
    }

    /**
     * Unique string that identifies the issuer of the IdP.
     * 
     */
    @Import(name="issuerUri")
    private @Nullable Output<String> issuerUri;

    /**
     * @return Unique string that identifies the issuer of the IdP.
     * 
     */
    public Optional<Output<String>> issuerUri() {
        return Optional.ofNullable(this.issuerUri);
    }

    /**
     * Human-readable label that identifies the identity provider.
     * 
     */
    @Import(name="name")
    private @Nullable Output<String> name;

    /**
     * @return Human-readable label that identifies the identity provider.
     * 
     */
    public Optional<Output<String>> name() {
        return Optional.ofNullable(this.name);
    }

    /**
     * Unique 20-hexadecimal digit string that identifies the IdP.
     * 
     */
    @Import(name="oktaIdpId")
    private @Nullable Output<String> oktaIdpId;

    /**
     * @return Unique 20-hexadecimal digit string that identifies the IdP.
     * 
     */
    public Optional<Output<String>> oktaIdpId() {
        return Optional.ofNullable(this.oktaIdpId);
    }

    /**
     * The protocol of the identity provider. Either `SAML` or `OIDC`.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return The protocol of the identity provider. Either `SAML` or `OIDC`.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    /**
     * SAML Authentication Request Protocol HTTP method binding (`POST` or `REDIRECT`) that Federated Authentication uses to send the authentication request. Atlas supports the following binding values:
     * - HTTP POST
     * - HTTP REDIRECT
     * 
     */
    @Import(name="requestBinding")
    private @Nullable Output<String> requestBinding;

    /**
     * @return SAML Authentication Request Protocol HTTP method binding (`POST` or `REDIRECT`) that Federated Authentication uses to send the authentication request. Atlas supports the following binding values:
     * - HTTP POST
     * - HTTP REDIRECT
     * 
     */
    public Optional<Output<String>> requestBinding() {
        return Optional.ofNullable(this.requestBinding);
    }

    /**
     * Scopes that MongoDB applications will request from the authorization endpoint used for OIDC IdPs.
     * 
     */
    @Import(name="requestedScopes")
    private @Nullable Output<List<String>> requestedScopes;

    /**
     * @return Scopes that MongoDB applications will request from the authorization endpoint used for OIDC IdPs.
     * 
     */
    public Optional<Output<List<String>>> requestedScopes() {
        return Optional.ofNullable(this.requestedScopes);
    }

    /**
     * Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.  Valid values include ` SHA-1  `and `SHA-256`.
     * 
     */
    @Import(name="responseSignatureAlgorithm")
    private @Nullable Output<String> responseSignatureAlgorithm;

    /**
     * @return Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.  Valid values include ` SHA-1  `and `SHA-256`.
     * 
     */
    public Optional<Output<String>> responseSignatureAlgorithm() {
        return Optional.ofNullable(this.responseSignatureAlgorithm);
    }

    /**
     * Flag that indicates whether the identity provider has SSO debug enabled.
     * 
     */
    @Import(name="ssoDebugEnabled")
    private @Nullable Output<Boolean> ssoDebugEnabled;

    /**
     * @return Flag that indicates whether the identity provider has SSO debug enabled.
     * 
     */
    public Optional<Output<Boolean>> ssoDebugEnabled() {
        return Optional.ofNullable(this.ssoDebugEnabled);
    }

    /**
     * Unique string that identifies the intended audience of the SAML assertion.
     * 
     */
    @Import(name="ssoUrl")
    private @Nullable Output<String> ssoUrl;

    /**
     * @return Unique string that identifies the intended audience of the SAML assertion.
     * 
     */
    public Optional<Output<String>> ssoUrl() {
        return Optional.ofNullable(this.ssoUrl);
    }

    /**
     * String enum that indicates whether the identity provider is active or not. Accepted values are ACTIVE or INACTIVE.
     * 
     */
    @Import(name="status")
    private @Nullable Output<String> status;

    /**
     * @return String enum that indicates whether the identity provider is active or not. Accepted values are ACTIVE or INACTIVE.
     * 
     */
    public Optional<Output<String>> status() {
        return Optional.ofNullable(this.status);
    }

    /**
     * Identifier of the claim which contains the user ID in the token used for OIDC IdPs.
     * userClaim is required for OIDC IdP with authorizationType GROUP and USER.
     * 
     */
    @Import(name="userClaim")
    private @Nullable Output<String> userClaim;

    /**
     * @return Identifier of the claim which contains the user ID in the token used for OIDC IdPs.
     * userClaim is required for OIDC IdP with authorizationType GROUP and USER.
     * 
     */
    public Optional<Output<String>> userClaim() {
        return Optional.ofNullable(this.userClaim);
    }

    private FederatedSettingsIdentityProviderState() {}

    private FederatedSettingsIdentityProviderState(FederatedSettingsIdentityProviderState $) {
        this.associatedDomains = $.associatedDomains;
        this.audience = $.audience;
        this.authorizationType = $.authorizationType;
        this.clientId = $.clientId;
        this.description = $.description;
        this.federationSettingsId = $.federationSettingsId;
        this.groupsClaim = $.groupsClaim;
        this.idpId = $.idpId;
        this.idpType = $.idpType;
        this.issuerUri = $.issuerUri;
        this.name = $.name;
        this.oktaIdpId = $.oktaIdpId;
        this.protocol = $.protocol;
        this.requestBinding = $.requestBinding;
        this.requestedScopes = $.requestedScopes;
        this.responseSignatureAlgorithm = $.responseSignatureAlgorithm;
        this.ssoDebugEnabled = $.ssoDebugEnabled;
        this.ssoUrl = $.ssoUrl;
        this.status = $.status;
        this.userClaim = $.userClaim;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(FederatedSettingsIdentityProviderState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private FederatedSettingsIdentityProviderState $;

        public Builder() {
            $ = new FederatedSettingsIdentityProviderState();
        }

        public Builder(FederatedSettingsIdentityProviderState defaults) {
            $ = new FederatedSettingsIdentityProviderState(Objects.requireNonNull(defaults));
        }

        /**
         * @param associatedDomains List that contains the domains associated with the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder associatedDomains(@Nullable Output<List<String>> associatedDomains) {
            $.associatedDomains = associatedDomains;
            return this;
        }

        /**
         * @param associatedDomains List that contains the domains associated with the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder associatedDomains(List<String> associatedDomains) {
            return associatedDomains(Output.of(associatedDomains));
        }

        /**
         * @param associatedDomains List that contains the domains associated with the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder associatedDomains(String... associatedDomains) {
            return associatedDomains(List.of(associatedDomains));
        }

        /**
         * @param audience Identifier of the intended recipient of the token used in OIDC IdP.
         * 
         * @return builder
         * 
         */
        public Builder audience(@Nullable Output<String> audience) {
            $.audience = audience;
            return this;
        }

        /**
         * @param audience Identifier of the intended recipient of the token used in OIDC IdP.
         * 
         * @return builder
         * 
         */
        public Builder audience(String audience) {
            return audience(Output.of(audience));
        }

        /**
         * @param authorizationType Indicates whether authorization is granted based on group membership or user ID. Valid values are `GROUP` or `USER`.
         * 
         * @return builder
         * 
         */
        public Builder authorizationType(@Nullable Output<String> authorizationType) {
            $.authorizationType = authorizationType;
            return this;
        }

        /**
         * @param authorizationType Indicates whether authorization is granted based on group membership or user ID. Valid values are `GROUP` or `USER`.
         * 
         * @return builder
         * 
         */
        public Builder authorizationType(String authorizationType) {
            return authorizationType(Output.of(authorizationType));
        }

        /**
         * @param clientId Client identifier that is assigned to an application by the OIDC Identity Provider.
         * 
         * @return builder
         * 
         */
        public Builder clientId(@Nullable Output<String> clientId) {
            $.clientId = clientId;
            return this;
        }

        /**
         * @param clientId Client identifier that is assigned to an application by the OIDC Identity Provider.
         * 
         * @return builder
         * 
         */
        public Builder clientId(String clientId) {
            return clientId(Output.of(clientId));
        }

        /**
         * @param description The description of the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder description(@Nullable Output<String> description) {
            $.description = description;
            return this;
        }

        /**
         * @param description The description of the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder description(String description) {
            return description(Output.of(description));
        }

        /**
         * @param federationSettingsId Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
         * 
         * @return builder
         * 
         */
        public Builder federationSettingsId(@Nullable Output<String> federationSettingsId) {
            $.federationSettingsId = federationSettingsId;
            return this;
        }

        /**
         * @param federationSettingsId Unique 24-hexadecimal digit string that identifies the federated authentication configuration.
         * 
         * @return builder
         * 
         */
        public Builder federationSettingsId(String federationSettingsId) {
            return federationSettingsId(Output.of(federationSettingsId));
        }

        /**
         * @param groupsClaim Identifier of the claim which contains OIDC IdP Group IDs in the token.
         * 
         * @return builder
         * 
         */
        public Builder groupsClaim(@Nullable Output<String> groupsClaim) {
            $.groupsClaim = groupsClaim;
            return this;
        }

        /**
         * @param groupsClaim Identifier of the claim which contains OIDC IdP Group IDs in the token.
         * 
         * @return builder
         * 
         */
        public Builder groupsClaim(String groupsClaim) {
            return groupsClaim(Output.of(groupsClaim));
        }

        /**
         * @param idpId Unique 24-hexadecimal digit string that identifies the IdP.
         * 
         * @return builder
         * 
         */
        public Builder idpId(@Nullable Output<String> idpId) {
            $.idpId = idpId;
            return this;
        }

        /**
         * @param idpId Unique 24-hexadecimal digit string that identifies the IdP.
         * 
         * @return builder
         * 
         */
        public Builder idpId(String idpId) {
            return idpId(Output.of(idpId));
        }

        public Builder idpType(@Nullable Output<String> idpType) {
            $.idpType = idpType;
            return this;
        }

        public Builder idpType(String idpType) {
            return idpType(Output.of(idpType));
        }

        /**
         * @param issuerUri Unique string that identifies the issuer of the IdP.
         * 
         * @return builder
         * 
         */
        public Builder issuerUri(@Nullable Output<String> issuerUri) {
            $.issuerUri = issuerUri;
            return this;
        }

        /**
         * @param issuerUri Unique string that identifies the issuer of the IdP.
         * 
         * @return builder
         * 
         */
        public Builder issuerUri(String issuerUri) {
            return issuerUri(Output.of(issuerUri));
        }

        /**
         * @param name Human-readable label that identifies the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder name(@Nullable Output<String> name) {
            $.name = name;
            return this;
        }

        /**
         * @param name Human-readable label that identifies the identity provider.
         * 
         * @return builder
         * 
         */
        public Builder name(String name) {
            return name(Output.of(name));
        }

        /**
         * @param oktaIdpId Unique 20-hexadecimal digit string that identifies the IdP.
         * 
         * @return builder
         * 
         */
        public Builder oktaIdpId(@Nullable Output<String> oktaIdpId) {
            $.oktaIdpId = oktaIdpId;
            return this;
        }

        /**
         * @param oktaIdpId Unique 20-hexadecimal digit string that identifies the IdP.
         * 
         * @return builder
         * 
         */
        public Builder oktaIdpId(String oktaIdpId) {
            return oktaIdpId(Output.of(oktaIdpId));
        }

        /**
         * @param protocol The protocol of the identity provider. Either `SAML` or `OIDC`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol The protocol of the identity provider. Either `SAML` or `OIDC`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        /**
         * @param requestBinding SAML Authentication Request Protocol HTTP method binding (`POST` or `REDIRECT`) that Federated Authentication uses to send the authentication request. Atlas supports the following binding values:
         * - HTTP POST
         * - HTTP REDIRECT
         * 
         * @return builder
         * 
         */
        public Builder requestBinding(@Nullable Output<String> requestBinding) {
            $.requestBinding = requestBinding;
            return this;
        }

        /**
         * @param requestBinding SAML Authentication Request Protocol HTTP method binding (`POST` or `REDIRECT`) that Federated Authentication uses to send the authentication request. Atlas supports the following binding values:
         * - HTTP POST
         * - HTTP REDIRECT
         * 
         * @return builder
         * 
         */
        public Builder requestBinding(String requestBinding) {
            return requestBinding(Output.of(requestBinding));
        }

        /**
         * @param requestedScopes Scopes that MongoDB applications will request from the authorization endpoint used for OIDC IdPs.
         * 
         * @return builder
         * 
         */
        public Builder requestedScopes(@Nullable Output<List<String>> requestedScopes) {
            $.requestedScopes = requestedScopes;
            return this;
        }

        /**
         * @param requestedScopes Scopes that MongoDB applications will request from the authorization endpoint used for OIDC IdPs.
         * 
         * @return builder
         * 
         */
        public Builder requestedScopes(List<String> requestedScopes) {
            return requestedScopes(Output.of(requestedScopes));
        }

        /**
         * @param requestedScopes Scopes that MongoDB applications will request from the authorization endpoint used for OIDC IdPs.
         * 
         * @return builder
         * 
         */
        public Builder requestedScopes(String... requestedScopes) {
            return requestedScopes(List.of(requestedScopes));
        }

        /**
         * @param responseSignatureAlgorithm Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.  Valid values include ` SHA-1  `and `SHA-256`.
         * 
         * @return builder
         * 
         */
        public Builder responseSignatureAlgorithm(@Nullable Output<String> responseSignatureAlgorithm) {
            $.responseSignatureAlgorithm = responseSignatureAlgorithm;
            return this;
        }

        /**
         * @param responseSignatureAlgorithm Signature algorithm that Federated Authentication uses to encrypt the identity provider signature.  Valid values include ` SHA-1  `and `SHA-256`.
         * 
         * @return builder
         * 
         */
        public Builder responseSignatureAlgorithm(String responseSignatureAlgorithm) {
            return responseSignatureAlgorithm(Output.of(responseSignatureAlgorithm));
        }

        /**
         * @param ssoDebugEnabled Flag that indicates whether the identity provider has SSO debug enabled.
         * 
         * @return builder
         * 
         */
        public Builder ssoDebugEnabled(@Nullable Output<Boolean> ssoDebugEnabled) {
            $.ssoDebugEnabled = ssoDebugEnabled;
            return this;
        }

        /**
         * @param ssoDebugEnabled Flag that indicates whether the identity provider has SSO debug enabled.
         * 
         * @return builder
         * 
         */
        public Builder ssoDebugEnabled(Boolean ssoDebugEnabled) {
            return ssoDebugEnabled(Output.of(ssoDebugEnabled));
        }

        /**
         * @param ssoUrl Unique string that identifies the intended audience of the SAML assertion.
         * 
         * @return builder
         * 
         */
        public Builder ssoUrl(@Nullable Output<String> ssoUrl) {
            $.ssoUrl = ssoUrl;
            return this;
        }

        /**
         * @param ssoUrl Unique string that identifies the intended audience of the SAML assertion.
         * 
         * @return builder
         * 
         */
        public Builder ssoUrl(String ssoUrl) {
            return ssoUrl(Output.of(ssoUrl));
        }

        /**
         * @param status String enum that indicates whether the identity provider is active or not. Accepted values are ACTIVE or INACTIVE.
         * 
         * @return builder
         * 
         */
        public Builder status(@Nullable Output<String> status) {
            $.status = status;
            return this;
        }

        /**
         * @param status String enum that indicates whether the identity provider is active or not. Accepted values are ACTIVE or INACTIVE.
         * 
         * @return builder
         * 
         */
        public Builder status(String status) {
            return status(Output.of(status));
        }

        /**
         * @param userClaim Identifier of the claim which contains the user ID in the token used for OIDC IdPs.
         * userClaim is required for OIDC IdP with authorizationType GROUP and USER.
         * 
         * @return builder
         * 
         */
        public Builder userClaim(@Nullable Output<String> userClaim) {
            $.userClaim = userClaim;
            return this;
        }

        /**
         * @param userClaim Identifier of the claim which contains the user ID in the token used for OIDC IdPs.
         * userClaim is required for OIDC IdP with authorizationType GROUP and USER.
         * 
         * @return builder
         * 
         */
        public Builder userClaim(String userClaim) {
            return userClaim(Output.of(userClaim));
        }

        public FederatedSettingsIdentityProviderState build() {
            return $;
        }
    }

}
