// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.internal.Codegen;
import com.pulumi.mongodbatlas.config.inputs.AssumeRole;
import java.lang.Boolean;
import java.lang.String;
import java.util.Optional;

public final class Config {

    private static final com.pulumi.Config config = com.pulumi.Config.of("mongodbatlas");
    public Optional<AssumeRole> assumeRole() {
        return Codegen.objectProp("assumeRole", AssumeRole.class).config(config).get();
    }
/**
 * AWS API Access Key.
 * 
 */
    public Optional<String> awsAccessKeyId() {
        return Codegen.stringProp("awsAccessKeyId").config(config).get();
    }
/**
 * AWS API Access Secret Key.
 * 
 */
    public Optional<String> awsSecretAccessKey() {
        return Codegen.stringProp("awsSecretAccessKey").config(config).get();
    }
/**
 * AWS Security Token Service provided session token.
 * 
 */
    public Optional<String> awsSessionToken() {
        return Codegen.stringProp("awsSessionToken").config(config).get();
    }
/**
 * MongoDB Atlas Base URL
 * 
 */
    public Optional<String> baseUrl() {
        return Codegen.stringProp("baseUrl").config(config).get();
    }
/**
 * MongoDB Atlas Base URL default to gov
 * 
 */
    public Optional<Boolean> isMongodbgovCloud() {
        return Codegen.booleanProp("isMongodbgovCloud").config(config).get();
    }
/**
 * MongoDB Atlas Programmatic Private Key
 * 
 */
    public Optional<String> privateKey() {
        return Codegen.stringProp("privateKey").config(config).get();
    }
/**
 * MongoDB Atlas Programmatic Public Key
 * 
 */
    public Optional<String> publicKey() {
        return Codegen.stringProp("publicKey").config(config).get();
    }
/**
 * MongoDB Realm Base URL
 * 
 */
    public Optional<String> realmBaseUrl() {
        return Codegen.stringProp("realmBaseUrl").config(config).get();
    }
/**
 * Region where secret is stored as part of AWS Secret Manager.
 * 
 */
    public Optional<String> region() {
        return Codegen.stringProp("region").config(config).get();
    }
/**
 * Name of secret stored in AWS Secret Manager.
 * 
 */
    public Optional<String> secretName() {
        return Codegen.stringProp("secretName").config(config).get();
    }
/**
 * AWS Security Token Service endpoint. Required for cross-AWS region or cross-AWS account secrets.
 * 
 */
    public Optional<String> stsEndpoint() {
        return Codegen.stringProp("stsEndpoint").config(config).get();
    }
}
