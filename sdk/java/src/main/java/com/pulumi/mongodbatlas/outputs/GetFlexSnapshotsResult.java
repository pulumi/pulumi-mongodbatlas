// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;

@CustomType
public final class GetFlexSnapshotsResult {
    /**
     * @return Date and time when the download link no longer works. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
     * 
     */
    private String expiration;
    /**
     * @return Date and time when MongoDB Cloud completed writing this snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
     * 
     */
    private String finishTime;
    /**
     * @return MongoDB host version that the snapshot runs.
     * 
     */
    private String mongoDbVersion;
    /**
     * @return Human-readable label that identifies the flex cluster whose snapshot you want to restore.
     * 
     */
    private String name;
    /**
     * @return Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    private String projectId;
    /**
     * @return Date and time when MongoDB Cloud will take the snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
     * 
     */
    private String scheduledTime;
    /**
     * @return Unique 24-hexadecimal digit string that identifies the snapshot to restore.
     * 
     */
    private String snapshotId;
    /**
     * @return Date and time when MongoDB Cloud began taking the snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
     * 
     */
    private String startTime;
    /**
     * @return Phase of the restore workflow for this job at the time this resource made this request.
     * 
     */
    private String status;

    private GetFlexSnapshotsResult() {}
    /**
     * @return Date and time when the download link no longer works. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
     * 
     */
    public String expiration() {
        return this.expiration;
    }
    /**
     * @return Date and time when MongoDB Cloud completed writing this snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
     * 
     */
    public String finishTime() {
        return this.finishTime;
    }
    /**
     * @return MongoDB host version that the snapshot runs.
     * 
     */
    public String mongoDbVersion() {
        return this.mongoDbVersion;
    }
    /**
     * @return Human-readable label that identifies the flex cluster whose snapshot you want to restore.
     * 
     */
    public String name() {
        return this.name;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Date and time when MongoDB Cloud will take the snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
     * 
     */
    public String scheduledTime() {
        return this.scheduledTime;
    }
    /**
     * @return Unique 24-hexadecimal digit string that identifies the snapshot to restore.
     * 
     */
    public String snapshotId() {
        return this.snapshotId;
    }
    /**
     * @return Date and time when MongoDB Cloud began taking the snapshot. This parameter expresses its value in the ISO 8601 timestamp format in UTC.
     * 
     */
    public String startTime() {
        return this.startTime;
    }
    /**
     * @return Phase of the restore workflow for this job at the time this resource made this request.
     * 
     */
    public String status() {
        return this.status;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetFlexSnapshotsResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String expiration;
        private String finishTime;
        private String mongoDbVersion;
        private String name;
        private String projectId;
        private String scheduledTime;
        private String snapshotId;
        private String startTime;
        private String status;
        public Builder() {}
        public Builder(GetFlexSnapshotsResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.expiration = defaults.expiration;
    	      this.finishTime = defaults.finishTime;
    	      this.mongoDbVersion = defaults.mongoDbVersion;
    	      this.name = defaults.name;
    	      this.projectId = defaults.projectId;
    	      this.scheduledTime = defaults.scheduledTime;
    	      this.snapshotId = defaults.snapshotId;
    	      this.startTime = defaults.startTime;
    	      this.status = defaults.status;
        }

        @CustomType.Setter
        public Builder expiration(String expiration) {
            if (expiration == null) {
              throw new MissingRequiredPropertyException("GetFlexSnapshotsResult", "expiration");
            }
            this.expiration = expiration;
            return this;
        }
        @CustomType.Setter
        public Builder finishTime(String finishTime) {
            if (finishTime == null) {
              throw new MissingRequiredPropertyException("GetFlexSnapshotsResult", "finishTime");
            }
            this.finishTime = finishTime;
            return this;
        }
        @CustomType.Setter
        public Builder mongoDbVersion(String mongoDbVersion) {
            if (mongoDbVersion == null) {
              throw new MissingRequiredPropertyException("GetFlexSnapshotsResult", "mongoDbVersion");
            }
            this.mongoDbVersion = mongoDbVersion;
            return this;
        }
        @CustomType.Setter
        public Builder name(String name) {
            if (name == null) {
              throw new MissingRequiredPropertyException("GetFlexSnapshotsResult", "name");
            }
            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetFlexSnapshotsResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder scheduledTime(String scheduledTime) {
            if (scheduledTime == null) {
              throw new MissingRequiredPropertyException("GetFlexSnapshotsResult", "scheduledTime");
            }
            this.scheduledTime = scheduledTime;
            return this;
        }
        @CustomType.Setter
        public Builder snapshotId(String snapshotId) {
            if (snapshotId == null) {
              throw new MissingRequiredPropertyException("GetFlexSnapshotsResult", "snapshotId");
            }
            this.snapshotId = snapshotId;
            return this;
        }
        @CustomType.Setter
        public Builder startTime(String startTime) {
            if (startTime == null) {
              throw new MissingRequiredPropertyException("GetFlexSnapshotsResult", "startTime");
            }
            this.startTime = startTime;
            return this;
        }
        @CustomType.Setter
        public Builder status(String status) {
            if (status == null) {
              throw new MissingRequiredPropertyException("GetFlexSnapshotsResult", "status");
            }
            this.status = status;
            return this;
        }
        public GetFlexSnapshotsResult build() {
            final var _resultValue = new GetFlexSnapshotsResult();
            _resultValue.expiration = expiration;
            _resultValue.finishTime = finishTime;
            _resultValue.mongoDbVersion = mongoDbVersion;
            _resultValue.name = name;
            _resultValue.projectId = projectId;
            _resultValue.scheduledTime = scheduledTime;
            _resultValue.snapshotId = snapshotId;
            _resultValue.startTime = startTime;
            _resultValue.status = status;
            return _resultValue;
        }
    }
}
