// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import com.pulumi.mongodbatlas.outputs.GetProjectIpAddresses;
import com.pulumi.mongodbatlas.outputs.GetProjectLimit;
import com.pulumi.mongodbatlas.outputs.GetProjectTeam;
import java.lang.Boolean;
import java.lang.Integer;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;

@CustomType
public final class GetProjectResult {
    /**
     * @return The number of Atlas clusters deployed in the project.
     * 
     */
    private Integer clusterCount;
    /**
     * @return The ISO-8601-formatted timestamp of when Atlas created the project.
     * 
     */
    private String created;
    private String id;
    /**
     * @return IP addresses in a project categorized by services. See IP Addresses.
     * 
     */
    private GetProjectIpAddresses ipAddresses;
    /**
     * @return Flag that indicates whether to enable statistics in [cluster metrics](https://www.mongodb.com/docs/atlas/monitor-cluster-metrics/) collection for the project.
     * 
     */
    private Boolean isCollectDatabaseSpecificsStatisticsEnabled;
    /**
     * @return Flag that indicates whether to enable Data Explorer for the project. If enabled, you can query your database with an easy to use interface.
     * 
     */
    private Boolean isDataExplorerEnabled;
    /**
     * @return Flag that indicates whether to enable extended storage sizes for the specified project.
     * 
     */
    private Boolean isExtendedStorageSizesEnabled;
    /**
     * @return Flag that indicates whether to enable Performance Advisor and Profiler for the project. If enabled, you can analyze database logs to recommend performance improvements.
     * 
     */
    private Boolean isPerformanceAdvisorEnabled;
    /**
     * @return Flag that indicates whether to enable Real Time Performance Panel for the project. If enabled, you can see real time metrics from your MongoDB database.
     * 
     */
    private Boolean isRealtimePerformancePanelEnabled;
    /**
     * @return Flag that indicates whether to enable Schema Advisor for the project. If enabled, you receive customized recommendations to optimize your data model and enhance performance. Disable this setting to disable schema suggestions in the [Performance Advisor](https://www.mongodb.com/docs/atlas/performance-advisor/#std-label-performance-advisor) and the [Data Explorer](https://www.mongodb.com/docs/atlas/atlas-ui/#std-label-atlas-ui).
     * 
     */
    private Boolean isSchemaAdvisorEnabled;
    /**
     * @return The limits for the specified project. See Limits.
     * 
     */
    private List<GetProjectLimit> limits;
    /**
     * @return Human-readable label that identifies this project limit.
     * 
     */
    private @Nullable String name;
    /**
     * @return The ID of the organization you want to create the project within.
     * 
     */
    private String orgId;
    private @Nullable String projectId;
    /**
     * @return If GOV_REGIONS_ONLY the project can be used for government regions only, otherwise defaults to standard regions. For more information see [MongoDB Atlas for Government](https://www.mongodb.com/docs/atlas/government/api/#creating-a-project).
     * 
     */
    private String regionUsageRestrictions;
    /**
     * @return Returns all teams to which the authenticated user has access in the project. See Teams.
     * 
     */
    private List<GetProjectTeam> teams;

    private GetProjectResult() {}
    /**
     * @return The number of Atlas clusters deployed in the project.
     * 
     */
    public Integer clusterCount() {
        return this.clusterCount;
    }
    /**
     * @return The ISO-8601-formatted timestamp of when Atlas created the project.
     * 
     */
    public String created() {
        return this.created;
    }
    public String id() {
        return this.id;
    }
    /**
     * @return IP addresses in a project categorized by services. See IP Addresses.
     * 
     */
    public GetProjectIpAddresses ipAddresses() {
        return this.ipAddresses;
    }
    /**
     * @return Flag that indicates whether to enable statistics in [cluster metrics](https://www.mongodb.com/docs/atlas/monitor-cluster-metrics/) collection for the project.
     * 
     */
    public Boolean isCollectDatabaseSpecificsStatisticsEnabled() {
        return this.isCollectDatabaseSpecificsStatisticsEnabled;
    }
    /**
     * @return Flag that indicates whether to enable Data Explorer for the project. If enabled, you can query your database with an easy to use interface.
     * 
     */
    public Boolean isDataExplorerEnabled() {
        return this.isDataExplorerEnabled;
    }
    /**
     * @return Flag that indicates whether to enable extended storage sizes for the specified project.
     * 
     */
    public Boolean isExtendedStorageSizesEnabled() {
        return this.isExtendedStorageSizesEnabled;
    }
    /**
     * @return Flag that indicates whether to enable Performance Advisor and Profiler for the project. If enabled, you can analyze database logs to recommend performance improvements.
     * 
     */
    public Boolean isPerformanceAdvisorEnabled() {
        return this.isPerformanceAdvisorEnabled;
    }
    /**
     * @return Flag that indicates whether to enable Real Time Performance Panel for the project. If enabled, you can see real time metrics from your MongoDB database.
     * 
     */
    public Boolean isRealtimePerformancePanelEnabled() {
        return this.isRealtimePerformancePanelEnabled;
    }
    /**
     * @return Flag that indicates whether to enable Schema Advisor for the project. If enabled, you receive customized recommendations to optimize your data model and enhance performance. Disable this setting to disable schema suggestions in the [Performance Advisor](https://www.mongodb.com/docs/atlas/performance-advisor/#std-label-performance-advisor) and the [Data Explorer](https://www.mongodb.com/docs/atlas/atlas-ui/#std-label-atlas-ui).
     * 
     */
    public Boolean isSchemaAdvisorEnabled() {
        return this.isSchemaAdvisorEnabled;
    }
    /**
     * @return The limits for the specified project. See Limits.
     * 
     */
    public List<GetProjectLimit> limits() {
        return this.limits;
    }
    /**
     * @return Human-readable label that identifies this project limit.
     * 
     */
    public Optional<String> name() {
        return Optional.ofNullable(this.name);
    }
    /**
     * @return The ID of the organization you want to create the project within.
     * 
     */
    public String orgId() {
        return this.orgId;
    }
    public Optional<String> projectId() {
        return Optional.ofNullable(this.projectId);
    }
    /**
     * @return If GOV_REGIONS_ONLY the project can be used for government regions only, otherwise defaults to standard regions. For more information see [MongoDB Atlas for Government](https://www.mongodb.com/docs/atlas/government/api/#creating-a-project).
     * 
     */
    public String regionUsageRestrictions() {
        return this.regionUsageRestrictions;
    }
    /**
     * @return Returns all teams to which the authenticated user has access in the project. See Teams.
     * 
     */
    public List<GetProjectTeam> teams() {
        return this.teams;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetProjectResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private Integer clusterCount;
        private String created;
        private String id;
        private GetProjectIpAddresses ipAddresses;
        private Boolean isCollectDatabaseSpecificsStatisticsEnabled;
        private Boolean isDataExplorerEnabled;
        private Boolean isExtendedStorageSizesEnabled;
        private Boolean isPerformanceAdvisorEnabled;
        private Boolean isRealtimePerformancePanelEnabled;
        private Boolean isSchemaAdvisorEnabled;
        private List<GetProjectLimit> limits;
        private @Nullable String name;
        private String orgId;
        private @Nullable String projectId;
        private String regionUsageRestrictions;
        private List<GetProjectTeam> teams;
        public Builder() {}
        public Builder(GetProjectResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.clusterCount = defaults.clusterCount;
    	      this.created = defaults.created;
    	      this.id = defaults.id;
    	      this.ipAddresses = defaults.ipAddresses;
    	      this.isCollectDatabaseSpecificsStatisticsEnabled = defaults.isCollectDatabaseSpecificsStatisticsEnabled;
    	      this.isDataExplorerEnabled = defaults.isDataExplorerEnabled;
    	      this.isExtendedStorageSizesEnabled = defaults.isExtendedStorageSizesEnabled;
    	      this.isPerformanceAdvisorEnabled = defaults.isPerformanceAdvisorEnabled;
    	      this.isRealtimePerformancePanelEnabled = defaults.isRealtimePerformancePanelEnabled;
    	      this.isSchemaAdvisorEnabled = defaults.isSchemaAdvisorEnabled;
    	      this.limits = defaults.limits;
    	      this.name = defaults.name;
    	      this.orgId = defaults.orgId;
    	      this.projectId = defaults.projectId;
    	      this.regionUsageRestrictions = defaults.regionUsageRestrictions;
    	      this.teams = defaults.teams;
        }

        @CustomType.Setter
        public Builder clusterCount(Integer clusterCount) {
            if (clusterCount == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "clusterCount");
            }
            this.clusterCount = clusterCount;
            return this;
        }
        @CustomType.Setter
        public Builder created(String created) {
            if (created == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "created");
            }
            this.created = created;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder ipAddresses(GetProjectIpAddresses ipAddresses) {
            if (ipAddresses == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "ipAddresses");
            }
            this.ipAddresses = ipAddresses;
            return this;
        }
        @CustomType.Setter
        public Builder isCollectDatabaseSpecificsStatisticsEnabled(Boolean isCollectDatabaseSpecificsStatisticsEnabled) {
            if (isCollectDatabaseSpecificsStatisticsEnabled == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "isCollectDatabaseSpecificsStatisticsEnabled");
            }
            this.isCollectDatabaseSpecificsStatisticsEnabled = isCollectDatabaseSpecificsStatisticsEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isDataExplorerEnabled(Boolean isDataExplorerEnabled) {
            if (isDataExplorerEnabled == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "isDataExplorerEnabled");
            }
            this.isDataExplorerEnabled = isDataExplorerEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isExtendedStorageSizesEnabled(Boolean isExtendedStorageSizesEnabled) {
            if (isExtendedStorageSizesEnabled == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "isExtendedStorageSizesEnabled");
            }
            this.isExtendedStorageSizesEnabled = isExtendedStorageSizesEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isPerformanceAdvisorEnabled(Boolean isPerformanceAdvisorEnabled) {
            if (isPerformanceAdvisorEnabled == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "isPerformanceAdvisorEnabled");
            }
            this.isPerformanceAdvisorEnabled = isPerformanceAdvisorEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isRealtimePerformancePanelEnabled(Boolean isRealtimePerformancePanelEnabled) {
            if (isRealtimePerformancePanelEnabled == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "isRealtimePerformancePanelEnabled");
            }
            this.isRealtimePerformancePanelEnabled = isRealtimePerformancePanelEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder isSchemaAdvisorEnabled(Boolean isSchemaAdvisorEnabled) {
            if (isSchemaAdvisorEnabled == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "isSchemaAdvisorEnabled");
            }
            this.isSchemaAdvisorEnabled = isSchemaAdvisorEnabled;
            return this;
        }
        @CustomType.Setter
        public Builder limits(List<GetProjectLimit> limits) {
            if (limits == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "limits");
            }
            this.limits = limits;
            return this;
        }
        public Builder limits(GetProjectLimit... limits) {
            return limits(List.of(limits));
        }
        @CustomType.Setter
        public Builder name(@Nullable String name) {

            this.name = name;
            return this;
        }
        @CustomType.Setter
        public Builder orgId(String orgId) {
            if (orgId == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "orgId");
            }
            this.orgId = orgId;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(@Nullable String projectId) {

            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder regionUsageRestrictions(String regionUsageRestrictions) {
            if (regionUsageRestrictions == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "regionUsageRestrictions");
            }
            this.regionUsageRestrictions = regionUsageRestrictions;
            return this;
        }
        @CustomType.Setter
        public Builder teams(List<GetProjectTeam> teams) {
            if (teams == null) {
              throw new MissingRequiredPropertyException("GetProjectResult", "teams");
            }
            this.teams = teams;
            return this;
        }
        public Builder teams(GetProjectTeam... teams) {
            return teams(List.of(teams));
        }
        public GetProjectResult build() {
            final var _resultValue = new GetProjectResult();
            _resultValue.clusterCount = clusterCount;
            _resultValue.created = created;
            _resultValue.id = id;
            _resultValue.ipAddresses = ipAddresses;
            _resultValue.isCollectDatabaseSpecificsStatisticsEnabled = isCollectDatabaseSpecificsStatisticsEnabled;
            _resultValue.isDataExplorerEnabled = isDataExplorerEnabled;
            _resultValue.isExtendedStorageSizesEnabled = isExtendedStorageSizesEnabled;
            _resultValue.isPerformanceAdvisorEnabled = isPerformanceAdvisorEnabled;
            _resultValue.isRealtimePerformancePanelEnabled = isRealtimePerformancePanelEnabled;
            _resultValue.isSchemaAdvisorEnabled = isSchemaAdvisorEnabled;
            _resultValue.limits = limits;
            _resultValue.name = name;
            _resultValue.orgId = orgId;
            _resultValue.projectId = projectId;
            _resultValue.regionUsageRestrictions = regionUsageRestrictions;
            _resultValue.teams = teams;
            return _resultValue;
        }
    }
}
