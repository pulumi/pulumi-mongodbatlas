// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import com.pulumi.mongodbatlas.inputs.PushBasedLogExportTimeoutsArgs;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class PushBasedLogExportState extends com.pulumi.resources.ResourceArgs {

    public static final PushBasedLogExportState Empty = new PushBasedLogExportState();

    /**
     * The name of the bucket to which the agent sends the logs to.
     * 
     */
    @Import(name="bucketName")
    private @Nullable Output<String> bucketName;

    /**
     * @return The name of the bucket to which the agent sends the logs to.
     * 
     */
    public Optional<Output<String>> bucketName() {
        return Optional.ofNullable(this.bucketName);
    }

    /**
     * Date and time that this feature was enabled on.
     * 
     */
    @Import(name="createDate")
    private @Nullable Output<String> createDate;

    /**
     * @return Date and time that this feature was enabled on.
     * 
     */
    public Optional<Output<String>> createDate() {
        return Optional.ofNullable(this.createDate);
    }

    /**
     * ID of the AWS IAM role that is used to write to the S3 bucket.
     * 
     */
    @Import(name="iamRoleId")
    private @Nullable Output<String> iamRoleId;

    /**
     * @return ID of the AWS IAM role that is used to write to the S3 bucket.
     * 
     */
    public Optional<Output<String>> iamRoleId() {
        return Optional.ofNullable(this.iamRoleId);
    }

    /**
     * S3 directory in which vector writes in order to store the logs. An empty string denotes the root directory.
     * 
     */
    @Import(name="prefixPath")
    private @Nullable Output<String> prefixPath;

    /**
     * @return S3 directory in which vector writes in order to store the logs. An empty string denotes the root directory.
     * 
     */
    public Optional<Output<String>> prefixPath() {
        return Optional.ofNullable(this.prefixPath);
    }

    /**
     * Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    @Import(name="projectId")
    private @Nullable Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
     * 
     */
    public Optional<Output<String>> projectId() {
        return Optional.ofNullable(this.projectId);
    }

    /**
     * Describes whether or not the feature is enabled and what status it is in.
     * 
     */
    @Import(name="state")
    private @Nullable Output<String> state;

    /**
     * @return Describes whether or not the feature is enabled and what status it is in.
     * 
     */
    public Optional<Output<String>> state() {
        return Optional.ofNullable(this.state);
    }

    @Import(name="timeouts")
    private @Nullable Output<PushBasedLogExportTimeoutsArgs> timeouts;

    public Optional<Output<PushBasedLogExportTimeoutsArgs>> timeouts() {
        return Optional.ofNullable(this.timeouts);
    }

    private PushBasedLogExportState() {}

    private PushBasedLogExportState(PushBasedLogExportState $) {
        this.bucketName = $.bucketName;
        this.createDate = $.createDate;
        this.iamRoleId = $.iamRoleId;
        this.prefixPath = $.prefixPath;
        this.projectId = $.projectId;
        this.state = $.state;
        this.timeouts = $.timeouts;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(PushBasedLogExportState defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private PushBasedLogExportState $;

        public Builder() {
            $ = new PushBasedLogExportState();
        }

        public Builder(PushBasedLogExportState defaults) {
            $ = new PushBasedLogExportState(Objects.requireNonNull(defaults));
        }

        /**
         * @param bucketName The name of the bucket to which the agent sends the logs to.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(@Nullable Output<String> bucketName) {
            $.bucketName = bucketName;
            return this;
        }

        /**
         * @param bucketName The name of the bucket to which the agent sends the logs to.
         * 
         * @return builder
         * 
         */
        public Builder bucketName(String bucketName) {
            return bucketName(Output.of(bucketName));
        }

        /**
         * @param createDate Date and time that this feature was enabled on.
         * 
         * @return builder
         * 
         */
        public Builder createDate(@Nullable Output<String> createDate) {
            $.createDate = createDate;
            return this;
        }

        /**
         * @param createDate Date and time that this feature was enabled on.
         * 
         * @return builder
         * 
         */
        public Builder createDate(String createDate) {
            return createDate(Output.of(createDate));
        }

        /**
         * @param iamRoleId ID of the AWS IAM role that is used to write to the S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder iamRoleId(@Nullable Output<String> iamRoleId) {
            $.iamRoleId = iamRoleId;
            return this;
        }

        /**
         * @param iamRoleId ID of the AWS IAM role that is used to write to the S3 bucket.
         * 
         * @return builder
         * 
         */
        public Builder iamRoleId(String iamRoleId) {
            return iamRoleId(Output.of(iamRoleId));
        }

        /**
         * @param prefixPath S3 directory in which vector writes in order to store the logs. An empty string denotes the root directory.
         * 
         * @return builder
         * 
         */
        public Builder prefixPath(@Nullable Output<String> prefixPath) {
            $.prefixPath = prefixPath;
            return this;
        }

        /**
         * @param prefixPath S3 directory in which vector writes in order to store the logs. An empty string denotes the root directory.
         * 
         * @return builder
         * 
         */
        public Builder prefixPath(String prefixPath) {
            return prefixPath(Output.of(prefixPath));
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
         * 
         * @return builder
         * 
         */
        public Builder projectId(@Nullable Output<String> projectId) {
            $.projectId = projectId;
            return this;
        }

        /**
         * @param projectId Unique 24-hexadecimal digit string that identifies your project. Use the /groups endpoint to retrieve all projects to which the authenticated user has access.
         * 
         * @return builder
         * 
         */
        public Builder projectId(String projectId) {
            return projectId(Output.of(projectId));
        }

        /**
         * @param state Describes whether or not the feature is enabled and what status it is in.
         * 
         * @return builder
         * 
         */
        public Builder state(@Nullable Output<String> state) {
            $.state = state;
            return this;
        }

        /**
         * @param state Describes whether or not the feature is enabled and what status it is in.
         * 
         * @return builder
         * 
         */
        public Builder state(String state) {
            return state(Output.of(state));
        }

        public Builder timeouts(@Nullable Output<PushBasedLogExportTimeoutsArgs> timeouts) {
            $.timeouts = timeouts;
            return this;
        }

        public Builder timeouts(PushBasedLogExportTimeoutsArgs timeouts) {
            return timeouts(Output.of(timeouts));
        }

        public PushBasedLogExportState build() {
            return $;
        }
    }

}
