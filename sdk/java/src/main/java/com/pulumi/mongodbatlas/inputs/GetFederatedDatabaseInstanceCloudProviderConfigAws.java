// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.annotations.Import;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class GetFederatedDatabaseInstanceCloudProviderConfigAws extends com.pulumi.resources.InvokeArgs {

    public static final GetFederatedDatabaseInstanceCloudProviderConfigAws Empty = new GetFederatedDatabaseInstanceCloudProviderConfigAws();

    /**
     * Unique identifier associated with the IAM Role that the Federated Database Instance assumes when accessing the data stores.
     * 
     */
    @Import(name="externalId", required=true)
    private String externalId;

    /**
     * @return Unique identifier associated with the IAM Role that the Federated Database Instance assumes when accessing the data stores.
     * 
     */
    public String externalId() {
        return this.externalId;
    }

    /**
     * Amazon Resource Name (ARN) of the IAM Role that the Federated Database Instance assumes when accessing S3 Bucket data stores. The IAM Role must support the following actions against each S3 bucket:
     * * `s3:GetObject`
     * * `s3:ListBucket`
     * * `s3:GetObjectVersion`
     * 
     */
    @Import(name="iamAssumedRoleArn", required=true)
    private String iamAssumedRoleArn;

    /**
     * @return Amazon Resource Name (ARN) of the IAM Role that the Federated Database Instance assumes when accessing S3 Bucket data stores. The IAM Role must support the following actions against each S3 bucket:
     * * `s3:GetObject`
     * * `s3:ListBucket`
     * * `s3:GetObjectVersion`
     * 
     */
    public String iamAssumedRoleArn() {
        return this.iamAssumedRoleArn;
    }

    /**
     * Amazon Resource Name (ARN) of the user that the Federated Database Instance assumes when accessing S3 Bucket data stores.
     * 
     */
    @Import(name="iamUserArn", required=true)
    private String iamUserArn;

    /**
     * @return Amazon Resource Name (ARN) of the user that the Federated Database Instance assumes when accessing S3 Bucket data stores.
     * 
     */
    public String iamUserArn() {
        return this.iamUserArn;
    }

    /**
     * Unique identifier of the role that the Federated Database Instance can use to access the data stores.
     * 
     */
    @Import(name="roleId", required=true)
    private String roleId;

    /**
     * @return Unique identifier of the role that the Federated Database Instance can use to access the data stores.
     * 
     */
    public String roleId() {
        return this.roleId;
    }

    @Import(name="testS3Bucket")
    private @Nullable String testS3Bucket;

    public Optional<String> testS3Bucket() {
        return Optional.ofNullable(this.testS3Bucket);
    }

    private GetFederatedDatabaseInstanceCloudProviderConfigAws() {}

    private GetFederatedDatabaseInstanceCloudProviderConfigAws(GetFederatedDatabaseInstanceCloudProviderConfigAws $) {
        this.externalId = $.externalId;
        this.iamAssumedRoleArn = $.iamAssumedRoleArn;
        this.iamUserArn = $.iamUserArn;
        this.roleId = $.roleId;
        this.testS3Bucket = $.testS3Bucket;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(GetFederatedDatabaseInstanceCloudProviderConfigAws defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private GetFederatedDatabaseInstanceCloudProviderConfigAws $;

        public Builder() {
            $ = new GetFederatedDatabaseInstanceCloudProviderConfigAws();
        }

        public Builder(GetFederatedDatabaseInstanceCloudProviderConfigAws defaults) {
            $ = new GetFederatedDatabaseInstanceCloudProviderConfigAws(Objects.requireNonNull(defaults));
        }

        /**
         * @param externalId Unique identifier associated with the IAM Role that the Federated Database Instance assumes when accessing the data stores.
         * 
         * @return builder
         * 
         */
        public Builder externalId(String externalId) {
            $.externalId = externalId;
            return this;
        }

        /**
         * @param iamAssumedRoleArn Amazon Resource Name (ARN) of the IAM Role that the Federated Database Instance assumes when accessing S3 Bucket data stores. The IAM Role must support the following actions against each S3 bucket:
         * * `s3:GetObject`
         * * `s3:ListBucket`
         * * `s3:GetObjectVersion`
         * 
         * @return builder
         * 
         */
        public Builder iamAssumedRoleArn(String iamAssumedRoleArn) {
            $.iamAssumedRoleArn = iamAssumedRoleArn;
            return this;
        }

        /**
         * @param iamUserArn Amazon Resource Name (ARN) of the user that the Federated Database Instance assumes when accessing S3 Bucket data stores.
         * 
         * @return builder
         * 
         */
        public Builder iamUserArn(String iamUserArn) {
            $.iamUserArn = iamUserArn;
            return this;
        }

        /**
         * @param roleId Unique identifier of the role that the Federated Database Instance can use to access the data stores.
         * 
         * @return builder
         * 
         */
        public Builder roleId(String roleId) {
            $.roleId = roleId;
            return this;
        }

        public Builder testS3Bucket(@Nullable String testS3Bucket) {
            $.testS3Bucket = testS3Bucket;
            return this;
        }

        public GetFederatedDatabaseInstanceCloudProviderConfigAws build() {
            if ($.externalId == null) {
                throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceCloudProviderConfigAws", "externalId");
            }
            if ($.iamAssumedRoleArn == null) {
                throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceCloudProviderConfigAws", "iamAssumedRoleArn");
            }
            if ($.iamUserArn == null) {
                throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceCloudProviderConfigAws", "iamUserArn");
            }
            if ($.roleId == null) {
                throw new MissingRequiredPropertyException("GetFederatedDatabaseInstanceCloudProviderConfigAws", "roleId");
            }
            return $;
        }
    }

}
