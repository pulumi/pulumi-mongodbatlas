// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Export;
import com.pulumi.core.annotations.ResourceType;
import com.pulumi.core.internal.Codegen;
import com.pulumi.mongodbatlas.ProjectInvitationArgs;
import com.pulumi.mongodbatlas.Utilities;
import com.pulumi.mongodbatlas.inputs.ProjectInvitationState;
import java.lang.String;
import java.util.List;
import javax.annotation.Nullable;

/**
 * ## Example Usage
 * ### S
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.ProjectInvitation;
 * import com.pulumi.mongodbatlas.ProjectInvitationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new ProjectInvitation(&#34;test&#34;, ProjectInvitationArgs.builder()        
 *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
 *             .roles(&#34;GROUP_DATA_ACCESS_READ_WRITE&#34;)
 *             .username(&#34;test-acc-username&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * ```java
 * package generated_program;
 * 
 * import com.pulumi.Context;
 * import com.pulumi.Pulumi;
 * import com.pulumi.core.Output;
 * import com.pulumi.mongodbatlas.ProjectInvitation;
 * import com.pulumi.mongodbatlas.ProjectInvitationArgs;
 * import java.util.List;
 * import java.util.ArrayList;
 * import java.util.Map;
 * import java.io.File;
 * import java.nio.file.Files;
 * import java.nio.file.Paths;
 * 
 * public class App {
 *     public static void main(String[] args) {
 *         Pulumi.run(App::stack);
 *     }
 * 
 *     public static void stack(Context ctx) {
 *         var test = new ProjectInvitation(&#34;test&#34;, ProjectInvitationArgs.builder()        
 *             .projectId(&#34;&lt;PROJECT-ID&gt;&#34;)
 *             .roles(            
 *                 &#34;GROUP_READ_ONLY&#34;,
 *                 &#34;GROUP_DATA_ACCESS_READ_ONLY&#34;)
 *             .username(&#34;test-acc-username&#34;)
 *             .build());
 * 
 *     }
 * }
 * ```
 * 
 * ## Import
 * 
 * ~&gt; **IMPORTANT:** A project invitation can **not** be imported once it has been accepted. Import a user&#39;s invitation to a project by separating the `project_id` and the `username` with a hyphen
 * 
 * ```sh
 *  $ pulumi import mongodbatlas:index/projectInvitation:ProjectInvitation my_user 1112222b3bf99403840e8934-my_user@mongodb.com
 * ```
 * 
 */
@ResourceType(type="mongodbatlas:index/projectInvitation:ProjectInvitation")
public class ProjectInvitation extends com.pulumi.resources.CustomResource {
    /**
     * Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
     * 
     */
    @Export(name="createdAt", type=String.class, parameters={})
    private Output<String> createdAt;

    /**
     * @return Timestamp in ISO 8601 date and time format in UTC when Atlas sent the invitation.
     * 
     */
    public Output<String> createdAt() {
        return this.createdAt;
    }
    /**
     * Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
     * 
     */
    @Export(name="expiresAt", type=String.class, parameters={})
    private Output<String> expiresAt;

    /**
     * @return Timestamp in ISO 8601 date and time format in UTC when the invitation expires. Users have 30 days to accept an invitation.
     * 
     */
    public Output<String> expiresAt() {
        return this.expiresAt;
    }
    /**
     * Unique 24-hexadecimal digit string that identifies the invitation in Atlas.
     * 
     */
    @Export(name="invitationId", type=String.class, parameters={})
    private Output<String> invitationId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies the invitation in Atlas.
     * 
     */
    public Output<String> invitationId() {
        return this.invitationId;
    }
    /**
     * Atlas user who invited `username` to the project.
     * 
     */
    @Export(name="inviterUsername", type=String.class, parameters={})
    private Output<String> inviterUsername;

    /**
     * @return Atlas user who invited `username` to the project.
     * 
     */
    public Output<String> inviterUsername() {
        return this.inviterUsername;
    }
    /**
     * Unique 24-hexadecimal digit string that identifies the project to which you want to invite a user.
     * 
     */
    @Export(name="projectId", type=String.class, parameters={})
    private Output<String> projectId;

    /**
     * @return Unique 24-hexadecimal digit string that identifies the project to which you want to invite a user.
     * 
     */
    public Output<String> projectId() {
        return this.projectId;
    }
    /**
     * List of Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. Refer to the [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) for information on valid roles.
     * 
     */
    @Export(name="roles", type=List.class, parameters={String.class})
    private Output<List<String>> roles;

    /**
     * @return List of Atlas roles to assign to the invited user. If the user accepts the invitation, Atlas assigns these roles to them. Refer to the [MongoDB Documentation](https://www.mongodb.com/docs/atlas/reference/user-roles/#project-roles) for information on valid roles.
     * 
     */
    public Output<List<String>> roles() {
        return this.roles;
    }
    /**
     * Email address to which Atlas sent the invitation. The user uses this email address as their Atlas username if they accept this invitation.
     * 
     */
    @Export(name="username", type=String.class, parameters={})
    private Output<String> username;

    /**
     * @return Email address to which Atlas sent the invitation. The user uses this email address as their Atlas username if they accept this invitation.
     * 
     */
    public Output<String> username() {
        return this.username;
    }

    /**
     *
     * @param name The _unique_ name of the resulting resource.
     */
    public ProjectInvitation(String name) {
        this(name, ProjectInvitationArgs.Empty);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     */
    public ProjectInvitation(String name, ProjectInvitationArgs args) {
        this(name, args, null);
    }
    /**
     *
     * @param name The _unique_ name of the resulting resource.
     * @param args The arguments to use to populate this resource's properties.
     * @param options A bag of options that control this resource's behavior.
     */
    public ProjectInvitation(String name, ProjectInvitationArgs args, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/projectInvitation:ProjectInvitation", name, args == null ? ProjectInvitationArgs.Empty : args, makeResourceOptions(options, Codegen.empty()));
    }

    private ProjectInvitation(String name, Output<String> id, @Nullable ProjectInvitationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        super("mongodbatlas:index/projectInvitation:ProjectInvitation", name, state, makeResourceOptions(options, id));
    }

    private static com.pulumi.resources.CustomResourceOptions makeResourceOptions(@Nullable com.pulumi.resources.CustomResourceOptions options, @Nullable Output<String> id) {
        var defaultOptions = com.pulumi.resources.CustomResourceOptions.builder()
            .version(Utilities.getVersion())
            .build();
        return com.pulumi.resources.CustomResourceOptions.merge(defaultOptions, options, id);
    }

    /**
     * Get an existing Host resource's state with the given name, ID, and optional extra
     * properties used to qualify the lookup.
     *
     * @param name The _unique_ name of the resulting resource.
     * @param id The _unique_ provider ID of the resource to lookup.
     * @param state
     * @param options Optional settings to control the behavior of the CustomResource.
     */
    public static ProjectInvitation get(String name, Output<String> id, @Nullable ProjectInvitationState state, @Nullable com.pulumi.resources.CustomResourceOptions options) {
        return new ProjectInvitation(name, id, state, options);
    }
}
