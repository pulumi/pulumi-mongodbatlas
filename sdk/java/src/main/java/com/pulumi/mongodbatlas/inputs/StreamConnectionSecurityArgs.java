// *** WARNING: this file was generated by pulumi-java-gen. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.inputs;

import com.pulumi.core.Output;
import com.pulumi.core.annotations.Import;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import javax.annotation.Nullable;


public final class StreamConnectionSecurityArgs extends com.pulumi.resources.ResourceArgs {

    public static final StreamConnectionSecurityArgs Empty = new StreamConnectionSecurityArgs();

    /**
     * A trusted, public x509 certificate for connecting to Kafka over SSL. String value of the certificate must be defined in the attribute.
     * 
     */
    @Import(name="brokerPublicCertificate")
    private @Nullable Output<String> brokerPublicCertificate;

    /**
     * @return A trusted, public x509 certificate for connecting to Kafka over SSL. String value of the certificate must be defined in the attribute.
     * 
     */
    public Optional<Output<String>> brokerPublicCertificate() {
        return Optional.ofNullable(this.brokerPublicCertificate);
    }

    /**
     * Describes the transport type. Can be either `PLAINTEXT` or `SSL`.
     * 
     */
    @Import(name="protocol")
    private @Nullable Output<String> protocol;

    /**
     * @return Describes the transport type. Can be either `PLAINTEXT` or `SSL`.
     * 
     */
    public Optional<Output<String>> protocol() {
        return Optional.ofNullable(this.protocol);
    }

    private StreamConnectionSecurityArgs() {}

    private StreamConnectionSecurityArgs(StreamConnectionSecurityArgs $) {
        this.brokerPublicCertificate = $.brokerPublicCertificate;
        this.protocol = $.protocol;
    }

    public static Builder builder() {
        return new Builder();
    }
    public static Builder builder(StreamConnectionSecurityArgs defaults) {
        return new Builder(defaults);
    }

    public static final class Builder {
        private StreamConnectionSecurityArgs $;

        public Builder() {
            $ = new StreamConnectionSecurityArgs();
        }

        public Builder(StreamConnectionSecurityArgs defaults) {
            $ = new StreamConnectionSecurityArgs(Objects.requireNonNull(defaults));
        }

        /**
         * @param brokerPublicCertificate A trusted, public x509 certificate for connecting to Kafka over SSL. String value of the certificate must be defined in the attribute.
         * 
         * @return builder
         * 
         */
        public Builder brokerPublicCertificate(@Nullable Output<String> brokerPublicCertificate) {
            $.brokerPublicCertificate = brokerPublicCertificate;
            return this;
        }

        /**
         * @param brokerPublicCertificate A trusted, public x509 certificate for connecting to Kafka over SSL. String value of the certificate must be defined in the attribute.
         * 
         * @return builder
         * 
         */
        public Builder brokerPublicCertificate(String brokerPublicCertificate) {
            return brokerPublicCertificate(Output.of(brokerPublicCertificate));
        }

        /**
         * @param protocol Describes the transport type. Can be either `PLAINTEXT` or `SSL`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(@Nullable Output<String> protocol) {
            $.protocol = protocol;
            return this;
        }

        /**
         * @param protocol Describes the transport type. Can be either `PLAINTEXT` or `SSL`.
         * 
         * @return builder
         * 
         */
        public Builder protocol(String protocol) {
            return protocol(Output.of(protocol));
        }

        public StreamConnectionSecurityArgs build() {
            return $;
        }
    }

}
