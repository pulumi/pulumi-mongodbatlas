// *** WARNING: this file was generated by pulumi-language-java. ***
// *** Do not edit by hand unless you're certain you know what you are doing! ***

package com.pulumi.mongodbatlas.outputs;

import com.pulumi.core.annotations.CustomType;
import com.pulumi.exceptions.MissingRequiredPropertyException;
import java.lang.Boolean;
import java.lang.String;
import java.util.List;
import java.util.Objects;

@CustomType
public final class GetNetworkContainerResult {
    /**
     * @return CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
     * 
     */
    private String atlasCidrBlock;
    /**
     * @return Unique identifer of the Azure subscription in which the VNet resides.
     * 
     */
    private String azureSubscriptionId;
    private String containerId;
    /**
     * @return Unique identifier of the GCP project in which the Network Peering connection resides.
     * 
     */
    private String gcpProjectId;
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    private String id;
    /**
     * @return Name of the Network Peering connection in the Atlas project.
     * 
     */
    private String networkName;
    private String projectId;
    /**
     * @return Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
     * 
     */
    private String providerName;
    /**
     * @return Indicates whether the project has Network Peering connections deployed in the container.
     * 
     */
    private Boolean provisioned;
    /**
     * @return The Atlas Azure region name for where this container will exist.
     * 
     */
    private String region;
    /**
     * @return The Atlas AWS region name for where this container will exist.
     * 
     */
    private String regionName;
    /**
     * @return Atlas GCP regions where the container resides.
     * 
     */
    private List<String> regions;
    /**
     * @return The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.
     * 
     */
    private String vnetName;
    /**
     * @return Unique identifier of the project’s VPC.
     * 
     */
    private String vpcId;

    private GetNetworkContainerResult() {}
    /**
     * @return CIDR block that Atlas uses for your clusters. Atlas uses the specified CIDR block for all other Network Peering connections created in the project. The Atlas CIDR block must be at least a /24 and at most a /21 in one of the following [private networks](https://tools.ietf.org/html/rfc1918.html#section-3).
     * 
     */
    public String atlasCidrBlock() {
        return this.atlasCidrBlock;
    }
    /**
     * @return Unique identifer of the Azure subscription in which the VNet resides.
     * 
     */
    public String azureSubscriptionId() {
        return this.azureSubscriptionId;
    }
    public String containerId() {
        return this.containerId;
    }
    /**
     * @return Unique identifier of the GCP project in which the Network Peering connection resides.
     * 
     */
    public String gcpProjectId() {
        return this.gcpProjectId;
    }
    /**
     * @return The provider-assigned unique ID for this managed resource.
     * 
     */
    public String id() {
        return this.id;
    }
    /**
     * @return Name of the Network Peering connection in the Atlas project.
     * 
     */
    public String networkName() {
        return this.networkName;
    }
    public String projectId() {
        return this.projectId;
    }
    /**
     * @return Cloud provider for this Network Peering connection. If omitted, Atlas sets this parameter to AWS.
     * 
     */
    public String providerName() {
        return this.providerName;
    }
    /**
     * @return Indicates whether the project has Network Peering connections deployed in the container.
     * 
     */
    public Boolean provisioned() {
        return this.provisioned;
    }
    /**
     * @return The Atlas Azure region name for where this container will exist.
     * 
     */
    public String region() {
        return this.region;
    }
    /**
     * @return The Atlas AWS region name for where this container will exist.
     * 
     */
    public String regionName() {
        return this.regionName;
    }
    /**
     * @return Atlas GCP regions where the container resides.
     * 
     */
    public List<String> regions() {
        return this.regions;
    }
    /**
     * @return The name of the Azure VNet. This value is null until you provision an Azure VNet in the container.
     * 
     */
    public String vnetName() {
        return this.vnetName;
    }
    /**
     * @return Unique identifier of the project’s VPC.
     * 
     */
    public String vpcId() {
        return this.vpcId;
    }

    public static Builder builder() {
        return new Builder();
    }

    public static Builder builder(GetNetworkContainerResult defaults) {
        return new Builder(defaults);
    }
    @CustomType.Builder
    public static final class Builder {
        private String atlasCidrBlock;
        private String azureSubscriptionId;
        private String containerId;
        private String gcpProjectId;
        private String id;
        private String networkName;
        private String projectId;
        private String providerName;
        private Boolean provisioned;
        private String region;
        private String regionName;
        private List<String> regions;
        private String vnetName;
        private String vpcId;
        public Builder() {}
        public Builder(GetNetworkContainerResult defaults) {
    	      Objects.requireNonNull(defaults);
    	      this.atlasCidrBlock = defaults.atlasCidrBlock;
    	      this.azureSubscriptionId = defaults.azureSubscriptionId;
    	      this.containerId = defaults.containerId;
    	      this.gcpProjectId = defaults.gcpProjectId;
    	      this.id = defaults.id;
    	      this.networkName = defaults.networkName;
    	      this.projectId = defaults.projectId;
    	      this.providerName = defaults.providerName;
    	      this.provisioned = defaults.provisioned;
    	      this.region = defaults.region;
    	      this.regionName = defaults.regionName;
    	      this.regions = defaults.regions;
    	      this.vnetName = defaults.vnetName;
    	      this.vpcId = defaults.vpcId;
        }

        @CustomType.Setter
        public Builder atlasCidrBlock(String atlasCidrBlock) {
            if (atlasCidrBlock == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "atlasCidrBlock");
            }
            this.atlasCidrBlock = atlasCidrBlock;
            return this;
        }
        @CustomType.Setter
        public Builder azureSubscriptionId(String azureSubscriptionId) {
            if (azureSubscriptionId == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "azureSubscriptionId");
            }
            this.azureSubscriptionId = azureSubscriptionId;
            return this;
        }
        @CustomType.Setter
        public Builder containerId(String containerId) {
            if (containerId == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "containerId");
            }
            this.containerId = containerId;
            return this;
        }
        @CustomType.Setter
        public Builder gcpProjectId(String gcpProjectId) {
            if (gcpProjectId == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "gcpProjectId");
            }
            this.gcpProjectId = gcpProjectId;
            return this;
        }
        @CustomType.Setter
        public Builder id(String id) {
            if (id == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "id");
            }
            this.id = id;
            return this;
        }
        @CustomType.Setter
        public Builder networkName(String networkName) {
            if (networkName == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "networkName");
            }
            this.networkName = networkName;
            return this;
        }
        @CustomType.Setter
        public Builder projectId(String projectId) {
            if (projectId == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "projectId");
            }
            this.projectId = projectId;
            return this;
        }
        @CustomType.Setter
        public Builder providerName(String providerName) {
            if (providerName == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "providerName");
            }
            this.providerName = providerName;
            return this;
        }
        @CustomType.Setter
        public Builder provisioned(Boolean provisioned) {
            if (provisioned == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "provisioned");
            }
            this.provisioned = provisioned;
            return this;
        }
        @CustomType.Setter
        public Builder region(String region) {
            if (region == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "region");
            }
            this.region = region;
            return this;
        }
        @CustomType.Setter
        public Builder regionName(String regionName) {
            if (regionName == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "regionName");
            }
            this.regionName = regionName;
            return this;
        }
        @CustomType.Setter
        public Builder regions(List<String> regions) {
            if (regions == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "regions");
            }
            this.regions = regions;
            return this;
        }
        public Builder regions(String... regions) {
            return regions(List.of(regions));
        }
        @CustomType.Setter
        public Builder vnetName(String vnetName) {
            if (vnetName == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "vnetName");
            }
            this.vnetName = vnetName;
            return this;
        }
        @CustomType.Setter
        public Builder vpcId(String vpcId) {
            if (vpcId == null) {
              throw new MissingRequiredPropertyException("GetNetworkContainerResult", "vpcId");
            }
            this.vpcId = vpcId;
            return this;
        }
        public GetNetworkContainerResult build() {
            final var _resultValue = new GetNetworkContainerResult();
            _resultValue.atlasCidrBlock = atlasCidrBlock;
            _resultValue.azureSubscriptionId = azureSubscriptionId;
            _resultValue.containerId = containerId;
            _resultValue.gcpProjectId = gcpProjectId;
            _resultValue.id = id;
            _resultValue.networkName = networkName;
            _resultValue.projectId = projectId;
            _resultValue.providerName = providerName;
            _resultValue.provisioned = provisioned;
            _resultValue.region = region;
            _resultValue.regionName = regionName;
            _resultValue.regions = regions;
            _resultValue.vnetName = vnetName;
            _resultValue.vpcId = vpcId;
            return _resultValue;
        }
    }
}
